<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Automated Testing</title>
    <url>/2022/09/26/%20Automated%20Testing/</url>
    <content><![CDATA[<ul>
<li>Outline：
<ul>
<li>源码测试</li>
<li>移动应用</li>
<li>AI测试</li>
</ul>
</li>
</ul>
<p><em>Thanks to 191250025 and other classmates</em></p>
<ul>
<li>This document is used to the Final Review of this course</li>
</ul>
<span id="more"></span>
<h1 id="源码测试"><a class="header-anchor" href="#源码测试"></a>源码测试</h1>
<h2 id="回归测试"><a class="header-anchor" href="#回归测试"></a>回归测试</h2>
<h3 id="基本概念"><a class="header-anchor" href="#基本概念"></a>基本概念</h3>
<ul>
<li>版本迭代后，重新测试用例
<ul>
<li>部分代码修改会影响接口，导致测试用例失效。</li>
<li>新需求需要新用例</li>
</ul>
</li>
<li>可有效保证<strong>代码修改的正确性</strong>并避免代码修改对被测程序其他模块产生的<strong>副作用</strong>。</li>
</ul>
<h3 id="优化方法"><a class="header-anchor" href="#优化方法"></a>优化方法</h3>
<ul>
<li>测试用例优先级（Test Case Prioritization，TCP）</li>
<li>测试用例集约减（Test Suite Reduction，TSR）
<ul>
<li>不考，没记</li>
</ul>
</li>
<li>测试用例选择（Test Case Selection，TCS）</li>
</ul>
<h3 id="差分测试"><a class="header-anchor" href="#差分测试"></a>差分测试</h3>
<ul>
<li>通过将<u>同一测试用例</u>运行到一系列相似功能的应用中观察<u>执行差异</u>来检测bug。(对拍)</li>
</ul>
<h3 id="蜕变测试"><a class="header-anchor" href="#蜕变测试"></a>蜕变测试</h3>
<ul>
<li>依据被测软件的领域知识和软件的实现方法建立的蜕变关系来生成新的测试用例,通过验证蜕变关系是否被保持来决定测试是否通过。( $sin x=sin(\pi-x)$ )
<ul>
<li>蜕变关系(Metamorphic Relation, MR) 是指多次执行目标程序时,输入与输出之间期望遵循的关系</li>
</ul>
</li>
</ul>
<h3 id="变异测试"><a class="header-anchor" href="#变异测试"></a>变异测试</h3>
<ul>
<li>通过定义好的变异操作来对源码进行修改,以此来帮助测试者定位测试数据的弱点,避免执行测试的弱点</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E5%8F%98%E5%BC%82%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B.png" alt="image-20211025220553543"></p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E5%8F%98%E5%BC%82%E6%B5%8B%E8%AF%95%E6%80%BB%E7%BB%93.png" alt="image-20211025220407419"></p>
<h2 id="测试用例优先级"><a class="header-anchor" href="#测试用例优先级"></a>测试用例优先级</h2>
<ul>
<li>简介：
<ul>
<li>依照某种策略赋予每个测试用例的不同优先级,以提高测试套件的故障检测率。</li>
<li>测试优先级排序技术采用特定的(启发式)算法计划测试用例,使得优先级较高的用例能够先于优先级低的用例执行。</li>
</ul>
</li>
<li>类型：
<ul>
<li><strong>通用</strong>测试排序:为<strong>有利于后续版本的测试用例</strong>赋予更高的优先级。</li>
<li><strong>特定于版本</strong>的测试排序:根据不同软件版本的特性为测试用例分配优先级。</li>
</ul>
</li>
</ul>
<h3 id="主要算法的流程及复杂度"><a class="header-anchor" href="#主要算法的流程及复杂度"></a>主要算法的流程及复杂度</h3>
<h4 id="基于贪心的TCP"><a class="header-anchor" href="#基于贪心的TCP"></a>基于贪心的TCP</h4>
<ul>
<li>全局贪心策略
<ul>
<li>每轮优先挑选覆盖最多代码单元的测试用例。</li>
<li>多个用例相同随机选择。</li>
</ul>
</li>
<li>增量贪心策略
<ul>
<li>每轮优先挑选覆盖最多，且未被已选择用例覆盖代码单元的测试用例。</li>
<li>所有代码单元均已被覆盖则重置排序过程</li>
<li>多个用例相同随机选择</li>
</ul>
</li>
</ul>
<h4 id="基于相似性的TCP"><a class="header-anchor" href="#基于相似性的TCP"></a>基于相似性的TCP</h4>
<ul>
<li>
<p>基本定义：每轮优先与已选择测试用例集差异性最大的测试用例。让测试用例均匀地分布在输入域中。</p>
<ul>
<li>（类似PRIM算法）</li>
</ul>
</li>
<li>
<p>排序步骤：</p>
<ol>
<li>
<p>测试用例之间的距离计算：假设$U(t_1)$ 和 $U(t_2)$为测试用例$t_1$和$t_2$所覆盖的代码单元集合，那么这两个用例之间的距离计算如下：<br>
$$<br>
Jaccard(t_1,t_2)=1 - \frac { | U(t_1) \cap U(t_2)|}{| U(t_1) \cup U(t2) |}<br>
$$</p>
</li>
<li>
<p>用例与测试用例集之间的距离计算：分别使用最小距离、平均距离和最大距离度量方式计算待选择用例$t_c$与已选择用例集S的距离：<br>
$$<br>
D(tc,S)=\left{<br>
\begin{aligned}<br>
\max \left{ \min\limits_{0\leq i \leq |S|} \left{ Jaccard(t_c, t_i)\right} \right} \</p>
<p>\max \left{ \underset{0 \leq i \leq|S|}{\operatorname{avg}} \left{ Jaccard(t_c, t_i)\right} \right} \</p>
<p>\max \left{ \max\limits_{0\leq i \leq |S|} \left{ Jaccard(t_c, t_i)\right} \right} \</p>
<p>\end{aligned}<br>
\right.<br>
$$</p>
<ul>
<li>$t_c$是待选用例。这里是计算tc跟已选测试用例集每个ti的距离。假设已选k个用例，则有k个距离，min就是取k个距离中最小的距离作为tc到已选集（包含k个测试用例）的距离。</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="基于搜索的TCP"><a class="header-anchor" href="#基于搜索的TCP"></a>基于搜索的TCP</h4>
<ul>
<li>
<p>基本定义：探索用例排序组合的状态空间，以此找到检测错误更快的用例序列。</p>
</li>
<li>
<p>排序步骤：</p>
<ol>
<li>
<p>种群构造：生成N个测试用例序列，之后随机生成切割点，互相交换两个用例序列切割点后部分的片段，仅交换相同测试用例的部分；同时以一定概率选择测试用例，并随机生成两个测试用例位置，进行互换，产生新的测试用例序列。</p>
</li>
<li>
<p>评估值计算：以语句覆盖为例，给定程序包含m个语句$M = {s_1,s_2,...,s_m}$和n个测试用例$T={t_1,t_2,...,t_n}$，$T'$为某一次搜索中$T$的一个排序序列，$TS_i$为该测试用例序列$T'$中第一个覆盖语句$s_i$的测试用例下标，那么其适应度计算为：<br>
$$<br>
APSC = 1 - \frac {TF_1+TF_2+ \dots + TF_m}{n * m} + \frac {1}{2n}<br>
$$</p>
</li>
</ol>
</li>
</ul>
<h4 id="基于机器学习的TCP策略"><a class="header-anchor" href="#基于机器学习的TCP策略"></a>基于机器学习的TCP策略</h4>
<ul>
<li>
<p>基本定义：基于测试分布特征，预测表现最佳的排序技术。</p>
</li>
<li>
<p>排序步骤：</p>
<ol>
<li>
<p>测试分布特征提取：给定被测程序，提取每个测试用例覆盖单元数；执行时间与单元时间内覆盖单元数。</p>
</li>
<li>
<p>模型生成：由于三种特征取值范围不同，使用min-max正则化，最后使用XGBoost学习特征进行预测。</p>
</li>
</ol>
</li>
</ul>
<h3 id="APFD计算"><a class="header-anchor" href="#APFD计算"></a>APFD计算</h3>
<ul>
<li>
<p>APFD：(Average Percentage of Faults Detected )平均故障检测百分比</p>
</li>
<li>
<p>给定程序包含m个故障$F={f_1,f_2,...,f_m}$和n个测试用例$T={t_1,t_2,...t_n}$，$T'$为$T$的一个排序序列，$TF_i$为该测试用例序列$T'$中第一个检测到故障$f_i$ 的测试用例下标，则该排序序列$T'$的APFD值计算公式为<br>
$$<br>
APFD = 1 - \frac {TF_1+TF_2+ \dots + TF_m}{n * m} + \frac {1}{2n}<br>
$$</p>
</li>
</ul>
<h2 id="测试用例选择"><a class="header-anchor" href="#测试用例选择"></a>测试用例选择</h2>
<ul>
<li>简介：
<ul>
<li>回归测试用例选择可以通过重新运行原始测试套件的一个<u>子集</u>，验证某些变更是否对当前软件版本的功能造成了影响。</li>
</ul>
</li>
<li>优点：
<ul>
<li>降低回归测试的开销</li>
<li>最大化缺陷探测能力</li>
</ul>
</li>
<li>流程：
<ul>
<li>给定修改前的程序$P$，对应的测试用例集$T$，和修改后的程序$P'$</li>
<li>寻找$T$的子集$T'$对$P'$进行测试，并且$T'$中的任意测试用例均是可以检测代码修改的测试用例。</li>
</ul>
</li>
</ul>
<h3 id="主要方法"><a class="header-anchor" href="#主要方法"></a>主要方法</h3>
<h4 id="最小化测试用例选择"><a class="header-anchor" href="#最小化测试用例选择"></a>最小化测试用例选择</h4>
<ul>
<li>从$T$中找出<strong>最小</strong>的子集$T_{min}$，$T_{min}$能够覆盖$P$中所有本次修改的、或者受本次修改影响的部分。</li>
<li>每一条新增的或者被修改的语句都能够被至少一个来自$T$的测试用例执行。</li>
</ul>
<h4 id="安全测试用例选择"><a class="header-anchor" href="#安全测试用例选择"></a>安全测试用例选择</h4>
<ul>
<li>
<p>从$T$中选出能够暴露$P'$中的一个或多个缺陷的所有测试用例，构成安全回归测试集$T_S$</p>
</li>
<li>
<p>$T_S$中的每个测试都能够满足以下条件之一</p>
<ul>
<li>
<p>执行至少一条在$P'$中被删除的语句</p>
</li>
<li>
<p>执行至少一条在$P'$中新增的语句</p>
</li>
</ul>
</li>
</ul>
<h4 id="基于数据流和覆盖的测试用例选择"><a class="header-anchor" href="#基于数据流和覆盖的测试用例选择"></a>基于数据流和覆盖的测试用例选择</h4>
<ul>
<li>变更后的代码$P'$中使数据交互变化的语句构成语句集合$S_I$。从原本的测试用例集$T$中选取出所有覆盖到$S_I$中某条语句的测试用例，组成测试集$T_D$</li>
<li>$T_D$中的每个测试都能够满足以下条件之一
<ul>
<li>执行至少一个在$P'$中被删除的Define-Use对</li>
<li>执行至少一个在$P'$中新增的Define-Use对</li>
</ul>
</li>
</ul>
<h4 id="特制-随机测试用例选择"><a class="header-anchor" href="#特制-随机测试用例选择"></a>特制/随机测试用例选择</h4>
<ul>
<li>规定测试用例的选取数量为m，测试人员随机地从原本的测试用例集$T$中选出m个测试用例，组成随机回归测试集$T_R$</li>
<li>面向剖面测试用例选择：与AOP有关，从$T$中选出与某个剖面a有关的测试用例k，组成回归测试集$T_a$</li>
</ul>
<h3 id="基于程序分析的测试用例选择"><a class="header-anchor" href="#基于程序分析的测试用例选择"></a>基于<strong>程序分析</strong>的测试用例选择</h3>
<ul>
<li>简介：
<ul>
<li>
<p>通过<strong>程序分析</strong>技术计算出测试代码（方法、用例或套件）与生产代码之间的<strong>依赖关系</strong>，并在后者发生变更时，利用这些依赖关系将所有<strong>受到变更影响</strong>的测试代码（Change-Impacted Tests）自动选取出来，组成回归测试集</p>
</li>
<li>
<p>一般被认为是一种<strong>安全测试用例选择技术</strong></p>
</li>
<li>
<p>分类：静态，动态</p>
</li>
<li>
<p>粒度：</p>
<ul>
<li>基本块级、方法级(细)</li>
<li>类级、项目级(粗)</li>
</ul>
</li>
<li>
<p>阶段:</p>
<p>A Phase –分析阶段:分析代码变更、计算测试依赖<br>
E Phase –执行阶段:运行选中测试<br>
C Phase –收集阶段:收集测试信息</p>
</li>
</ul>
</li>
</ul>
<h4 id="静态"><a class="header-anchor" href="#静态"></a>静态</h4>
<ul>
<li>在<u>没有实际执行程序</u>的情况下对计算机软件程序进行自动化分析的技术（手动分析一般被称为程序理解或代码审查）。</li>
<li>大多数情况下，分析的材料为<u>源语言代码</u>，少部分静态分析会针对目标语言代码进行
<ul>
<li>例如：分析Java的字节码</li>
</ul>
</li>
</ul>
<h4 id="动态"><a class="header-anchor" href="#动态"></a>动态</h4>
<ul>
<li>通过在真实或虚拟处理器上<u>执行程序</u>来完成对程序行为的分析。</li>
<li>为了使动态程序分析有效，必须使用足够的测试输入来执行目标程序，以尽可能覆盖程序所有的输出。进行动态分析时一般需要注意最小化插桩对目标程序的影响</li>
</ul>
<h3 id="类的防火墙算法"><a class="header-anchor" href="#类的防火墙算法"></a>类的防火墙算法</h3>
<ul>
<li>
<p>假设在<strong>继承</strong>层级(Inheritance Hierarchy)中,类A是类B的子类。当有且仅有B发生变动时,为了保证<br>
测试充分,除B之外,A也应该重新进行单元测试。</p>
</li>
<li>
<p>假设在<strong>聚合</strong>层级(Aggregation Hierarchy)中,类A是类B的一个聚合类。当有且仅有B发生变动时,为<br>
了保证测试充分,除B之外,A也应该重新进行单元测试。</p>
</li>
<li>
<p>假设在<strong>关联</strong>层级(Association Hierarchy)中,类A与类B的关系满足下列条件之一:</p>
<ol>
<li>
<p>类A访问了类B的数据成员;</p>
</li>
<li>
<p>类A需要向B传递信息</p>
</li>
</ol>
<p>(简言之: A依赖B)</p>
<p>当B发生变动时,为了保证测试充分,除B之外,A也应该重新进行测试。同时,类A还应该与类B进行重新集成。</p>
</li>
</ul>
<h3 id="动态-vs-静态"><a class="header-anchor" href="#动态-vs-静态"></a>动态 vs 静态</h3>
<table>
<thead>
<tr>
<th>特征</th>
<th>动态</th>
<th>静态</th>
</tr>
</thead>
<tbody>
<tr>
<td>总体</td>
<td>好</td>
<td></td>
</tr>
<tr>
<td>依赖信息</td>
<td>多</td>
<td></td>
</tr>
<tr>
<td>开销</td>
<td>小</td>
<td></td>
</tr>
<tr>
<td>过拟合</td>
<td></td>
<td>有</td>
</tr>
<tr>
<td>插桩</td>
<td>需要</td>
<td>不需要</td>
</tr>
<tr>
<td>运行测试阶段</td>
<td></td>
<td>好</td>
</tr>
</tbody>
</table>
<h2 id="测试用例优先级-V-S-测试用例选择"><a class="header-anchor" href="#测试用例优先级-V-S-测试用例选择"></a>测试用例优先级 V.S. 测试用例选择</h2>
<ul>
<li>优先级技术是对测试用例集进行排序,以<strong>最快的速度</strong>找到缺陷,提高测试用例集的故障检测率。</li>
<li>选择技术是取测试用例集的子集,能覆盖修改过的代码,<strong>降低</strong>回归测试的<strong>开销</strong>并最大化缺陷探测能力</li>
</ul>
<h1 id="移动应用"><a class="header-anchor" href="#移动应用"></a>移动应用</h1>
<h2 id="基于图像理解的移动应用自动化测试"><a class="header-anchor" href="#基于图像理解的移动应用自动化测试"></a>基于图像理解的移动应用自动化测试</h2>
<h3 id="各个任务的难点"><a class="header-anchor" href="#各个任务的难点"></a>各个任务的难点</h3>
<ul>
<li>测试输入生成
<ul>
<li>任务难点:
<ul>
<li>运行环境多样化:网络多样化、平台多样化、设备多样化</li>
<li>环境碎片化</li>
<li>开发平台快速演化</li>
<li>需要考虑系统级事件</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="能够论述各个任务的解决方法"><a class="header-anchor" href="#能够论述各个任务的解决方法"></a>能够论述各个任务的解决方法</h3>
<p>( 只针对测试输入生成 )</p>
<ul>
<li>基于随机:Monkey</li>
<li>基于模型:Stout</li>
<li>基于机器学习:Q-testing</li>
</ul>
<h3 id="核心思想"><a class="header-anchor" href="#核心思想"></a>核心思想</h3>
<ul>
<li>测试输入生成即针对给定应用进行测试探索</li>
<li>移动应用结构可以抽象为图结构</li>
</ul>
<h3 id="方法步骤"><a class="header-anchor" href="#方法步骤"></a>方法步骤</h3>
<p>(Stout)</p>
<ul>
<li>
<p>模型构建</p>
<ol>
<li>
<p>UI页面层次结构 – 事件识别</p>
</li>
<li>
<p>随机有限状态机(动态分析)</p>
</li>
<li>
<p>系统事件分析</p>
<p>事件执行频率 – 初始概率</p>
</li>
</ol>
</li>
<li>
<p>模型变异、测试生成与执行</p>
<ol start="4">
<li>随机变异事件转换概率</li>
<li>基于概率生成测试</li>
<li>随机注入系统事件</li>
<li>测试执行</li>
<li>输出度量(覆盖率)</li>
<li>Gibbs取样(是否继续执行)</li>
<li>缺陷诊断</li>
</ol>
</li>
</ul>
<h2 id="基于群智协同的众包测试"><a class="header-anchor" href="#基于群智协同的众包测试"></a>基于群智协同的众包测试</h2>
<ul>
<li>众包测试树</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E4%BC%97%E5%8C%85%E6%B5%8B%E8%AF%95%E6%A0%91.png?Expires=1635207901&amp;OSSAccessKeyId=TMP.3KjR8oFRxvQevrnV39j9kZakE2oyA7i3YRfxSv4711yGuJEpRUWfp9apJ4jCs2cqqK1BxbM5sMui6Gh2BKjZpVKrUUoUB6&amp;Signature=P2%2B2uXSRBy3EFTU%2FUPfHrCgYyDY%3D" alt="image-20211025233428057"></p>
<ul>
<li>众包的难点
<ol>
<li>大量重复报告</li>
<li>大量不完善报告</li>
<li>测试力度分布不均</li>
<li>不能充分利用用户合作,验证问题</li>
<li>整理归类报告困难,相似报告分散,浪费时间精力</li>
<li>审核人员不能专注于质量控制,交付的报告质量较低</li>
</ol>
</li>
</ul>
<h3 id="基本机制"><a class="header-anchor" href="#基本机制"></a>基本机制</h3>
<ul>
<li>协同推荐：众测系统上发布测试任务（任务发布者）</li>
<li>质量保证：众包工人参与测试任务，协作方式完成BUG报告（众包工人）</li>
<li>聚合交付：识别并剔除恶意众包工人，审核报告并交付缺陷列表（管理者）</li>
</ul>
<h3 id="解决方法"><a class="header-anchor" href="#解决方法"></a>解决方法</h3>
<h4 id="协同推荐"><a class="header-anchor" href="#协同推荐"></a>协同推荐</h4>
<ol>
<li>信息共享,用户提交报告时进行实时相似报告推荐,避免重复报告提交</li>
<li>任务分配:用户在提交报告后对其进行审核报告推荐和测试页面推荐。</li>
<li>协作方式:用户对于相似报告和审核报告的结果,可以点赞点踩,验证报告有效性。</li>
</ol>
<h4 id="质量保证"><a class="header-anchor" href="#质量保证"></a>质量保证</h4>
<ul>
<li>众包工人:
<ol>
<li>竞争式提交(独立测试提交报告,贡献归个人所有)、</li>
<li>协作式提交(借鉴他人报告,修改他人报告后生成子报告)、</li>
<li>审核(对他人报告点赞点踩)</li>
</ol>
</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E4%BC%97%E5%8C%85%E5%B7%A5%E4%BA%BA%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="image-20201101010717401"></p>
<ul>
<li>质量控制系统:
<ol>
<li>bug报告有效性模块</li>
<li>bug报告自动评估模块</li>
<li>反馈与监控模块</li>
<li>bug报告审核模块</li>
</ol>
</li>
</ul>
<h4 id="聚合交付"><a class="header-anchor" href="#聚合交付"></a>聚合交付</h4>
<ul>
<li>
<p>过程：</p>
<ol>
<li>聚合阶段： 相似报告聚合</li>
<li>融合阶段 ：融合相似报告，提高可读性</li>
<li>围绕报告融合构建审核业务流程：使审核人员聚焦质量控制</li>
</ol>
</li>
<li>
<p>目标： 构建一套基于<strong>报告融合</strong>的测试报告处理流程</p>
</li>
</ul>
<h1 id="AI测试"><a class="header-anchor" href="#AI测试"></a>AI测试</h1>
<h2 id="AI测试概述"><a class="header-anchor" href="#AI测试概述"></a>AI测试概述</h2>
<h3 id="与传统测试的区别"><a class="header-anchor" href="#与传统测试的区别"></a>与传统测试的区别</h3>
<ul>
<li>决策逻辑:
<ul>
<li>传统软件：程序代码控制决策逻辑</li>
<li>智能软件:深度学习模型的结构、训练后得到的权重节点</li>
</ul>
</li>
<li>系统程序特征:
<ul>
<li>传统软件：<u>控制流和数据流构建的业务处理</u></li>
<li>智能软件<u>:数据驱动</u>构建的参数化数值计算</li>
</ul>
</li>
<li>智能软件系统的缺陷往往不是显式的代码或参数错误</li>
</ul>
<h3 id="测试的难点"><a class="header-anchor" href="#测试的难点"></a>测试的难点</h3>
<p>数据量不够、低质量数据、数据分布不均、不充分测试</p>
<h3 id="数据驱动的测试"><a class="header-anchor" href="#数据驱动的测试"></a>数据驱动的测试</h3>
<ol>
<li>需求分析</li>
<li>数据采集</li>
<li>数据标注</li>
<li>模型结构设计</li>
<li>模型训练</li>
<li>模型测试</li>
<li>模型部署</li>
</ol>
<h2 id="模糊测试"><a class="header-anchor" href="#模糊测试"></a>模糊测试</h2>
<h3 id="基本流程"><a class="header-anchor" href="#基本流程"></a>基本流程</h3>
<ul>
<li>通过异常的输入自动化发现待测程序缺陷</li>
<li>预期输入：变异数据</li>
<li>预期输出：断言失败、无效输入、异常崩溃、错误输出</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95.png" alt="image-20201101122413533"></p>
<h2 id="图像扩增"><a class="header-anchor" href="#图像扩增"></a>图像扩增</h2>
<p>通过轻微变换现有数据或创建新的合成图像来得到新数据的技术。应用领域有图像扩增、文本扩增、雷达扩增......</p>
<ul>
<li>目的：增加数据量、丰富数据多样性、提高模型的泛化能力。</li>
</ul>
<h3 id="扩增的原则"><a class="header-anchor" href="#扩增的原则"></a>扩增的原则</h3>
<ul>
<li>不能引入无关的数据</li>
<li>扩增总是基于先验知识的,对于不同的任务和场景,数据扩增的策略也会不同。</li>
<li>扩增后的标签保持不变</li>
</ul>
<h3 id="常用扩增方法"><a class="header-anchor" href="#常用扩增方法"></a>常用扩增方法</h3>
<h4 id="原样本扩增"><a class="header-anchor" href="#原样本扩增"></a>原样本扩增</h4>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E5%8E%9F%E6%A0%B7%E6%9C%AC%E6%89%A9%E5%A2%9E.png" alt="image-20201101132018081"></p>
<h4 id="单样本扩增"><a class="header-anchor" href="#单样本扩增"></a>单样本扩增</h4>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E5%8D%95%E6%A0%B7%E6%9C%AC%E6%89%A9%E5%A2%9E.png" alt="image-20201101132102202"></p>
<ul>
<li>两阶段：找到可能包含物体的区域 -&gt; 对该区域进行分类</li>
<li>单阶段：图片缩放划分等分网络，并且卷积后过滤获得最后预测框。</li>
<li>特征合成：基于规则、基于分割确定合成区域</li>
</ul>
<h4 id="多样本扩增"><a class="header-anchor" href="#多样本扩增"></a>多样本扩增</h4>
<ul>
<li>
<p>样本级合成：标签a的特征 + 标签b的特征 = 标签a</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E5%A4%9A%E6%A0%B7%E6%9C%AC%E6%89%A9%E5%A2%9E.png" alt="image-20201101132624376" style="zoom: 50%;" /><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E5%A4%9A%E6%A0%B7%E6%9C%AC%20%E7%8B%97%E7%8B%97.png" /><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/%E5%A4%9A%E6%A0%B7%E6%9C%AC%E6%89%A9%E5%A2%9E%20%E7%8C%AB%E7%8B%97%E5%B9%B3%E5%9D%87.png" alt="image-20201101132643639" style="zoom: 50%;" /></p>
</li>
<li>
<p>特征级合成：将不同特征在同一张图上面重新排列组合</p>
</li>
<li>
<p>标签降级：变成不同的特征</p>
</li>
</ul>
<h3 id="医疗图像扩增的特点"><a class="header-anchor" href="#医疗图像扩增的特点"></a>医疗图像扩增的特点</h3>
<ul>
<li>图像中不同形式的细微结构可能代表某种病变</li>
<li>不能保证扩增的质量</li>
<li>不同疾病要使用不同的扩增方法</li>
</ul>
<h3 id="医疗图像扩增的难点"><a class="header-anchor" href="#医疗图像扩增的难点"></a>医疗图像扩增的难点</h3>
<ul>
<li>患者隐私保护,医学影像匮乏</li>
<li>共享临床数据困难</li>
<li>影像质量参差不齐</li>
<li>需要专家手动贴标签</li>
</ul>
<h3 id=""><a class="header-anchor" href="#"></a></h3>
]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
      <tags>
        <tag>Software Testing</tag>
      </tags>
  </entry>
  <entry>
    <title>007 No Time to Die</title>
    <url>/2021/11/03/007%20No%20Time%20to%20Die/</url>
    <content><![CDATA[<p><em>The proper function of man is to live, not to exist. I shall not waste my days in trying to prolong them. I shall use my time.</em></p>
<span id="more"></span>
<p>我心目中最好的动作电影。007系列宣扬了几十年的硬汉精神，到最后终于亲手打破了它，人不可能永远是硬汉，或者说硬汉也会失败。每当我们看着邦德飞檐走壁，出生入死，完成一个个不可能完成的任务时，心头总会飘过一丝阴霾：007会失败吗？007会老吗？ 007... 会死吗？</p>
<p>答案是会的。邦德在我们心中，一贯是沉着冷静、机敏过人，永不疲倦，无所不能。可梦总有醒的一天，英雄总有老的一天。no time to die是誓言，可是一厢情愿，改变不了什么。人和任何生物一样，都是有极限的，哪怕你是007, 能走遍刀山火海，无数次力挽狂澜， 你依然会失败。人在命运面前要接受自己的软弱无知，接受自己的狭隘渺小，英雄也不例外。 人犯的最愚蠢的错误，就是在命运面前保持高傲。再可歌可泣的精神，几十年如一日的坚持，举世无双的勇敢，也无法打动命运。哪怕你说no time to die, 哪怕你确实因此而不懈奋斗， 是全世界最有资格喊出这句话的人， 事实也不会因为你的呼喊而改变，即使做得再好，也有人力有穷而尽的时候。</p>
<p>邦德临死前镇定地凝望着天上的导弹， 昔日无敌的007，终于感到一丝疲倦和悲凉。</p>
]]></content>
      <tags>
        <tag>Movie</tag>
      </tags>
  </entry>
  <entry>
    <title>Big Data Tools</title>
    <url>/2022/09/26/Big%20Data%20Tools/</url>
    <content><![CDATA[<p>Outline：</p>
<ul>
<li>集群简介</li>
<li>Hadoop</li>
<li>Spark</li>
<li>Hadoop + Spark For Manjaro</li>
<li>Hadoop + Spark For Mac</li>
<li>Clickhouse</li>
<li>Flink</li>
<li>Kafka( //TODO )</li>
</ul>
<span id="more"></span>
<h1 id="Hadoop-Spark-集群报告"><a class="header-anchor" href="#Hadoop-Spark-集群报告"></a>Hadoop + Spark 集群报告</h1>
<blockquote>
<p>这是hadoop+spark集群搭建的报告，当然集群太卡了用不了， 所以实际做作业我采用了单机( on Mac M1 )形式<a href="https://archive.apache.org/dist/hadoop/common/hadoop-2.7.4/hadoop-2.7.4-src.tar.gz">hadoop  2.7.4</a> + <a href=".https://archive.apache.org/dist/spark/spark-2.3.3/spark-2.3.3-bin-without-hadoop.tgz">spark 2.3.3</a> + <a href="https://scala-lang.org/download/2.11.12.html">scala  2.11.12</a> + <code>jdk8 </code></p>
<p>这只是hadoop+spark集群搭建的报告， 不包括Clickhouse、Flink的内容； 可以作为hadoop+spark单机搭建的参考</p>
</blockquote>
<p>hadoop+spark集群搭建完毕</p>
<p>hadoop, spark低版本和高版本没有任何区别，只是高版本的spark，hadoop的worker(s)文件， 在低版本中名为slaves</p>
<p>单机和集群也没有什么区别，只是不需要配置worker的DNS了，由于maser和worker都是本机，就直接让localhost做唯一的worker。</p>
<ul>
<li>这意味着hadoop、spark的worker文件不需要做任何更改（里面默认值就是localhost）</li>
<li>主机只需配置master的DNS</li>
<li><code>hdfs-site.xml</code>中的dfs.replication数量应该设为1，因为只有本机自己一个worker</li>
</ul>
<h2 id="集群部署"><a class="header-anchor" href="#集群部署"></a>集群部署</h2>
<p>云服务器配置如下：</p>
<table>
<thead>
<tr>
<th>拥有者</th>
<th>ip</th>
<th>role</th>
</tr>
</thead>
<tbody>
<tr>
<td>lyk</td>
<td>124.222.135.47</td>
<td>master</td>
</tr>
<tr>
<td>sgf</td>
<td>81.69.174.80</td>
<td>slave01</td>
</tr>
<tr>
<td>lss</td>
<td>47.93.158.241</td>
<td>slave02</td>
</tr>
<tr>
<td>xmt</td>
<td>175.27.136.106</td>
<td>slave03</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>方便的做法是所有节点均适用<code>root</code>账户，hadoop安装在<code>/usr/local</code>，但是，严谨的做法是使用用户账户，此时为了避免权限问题，hadoop需要安装在<code>~</code></p>
<ul>
<li>所有节点均使用用户lyk</li>
<li>使用<code>/home/lyk/.bashrc</code>（或者<code>.zshrc</code>）来配置环境变量</li>
</ul>
<p>由于所有服务器都不在同一局域网，因此都采用公网通信。 实际上十分不推荐公网通信，太慢了</p>
<h2 id="集群网络"><a class="header-anchor" href="#集群网络"></a>集群网络</h2>
<ol>
<li>
<p>对于master和slave节点，配置其DNS表(.<code>/etc/hosts</code> )， 其中增加:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 localhost //如果本来就有这条就不用加了</span><br><span class="line">&lt;master的内网ip&gt; master //对于master而言，这里直接填127.0.0.1</span><br><span class="line">&lt;slave01的公网ip&gt; slave01</span><br><span class="line">&lt;slave02的公网ip&gt; slave02</span><br><span class="line">&lt;slave03的公网ip&gt; slave03</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>配置master自己到自己的ssh免密登陆</p>
<ul>
<li>这里增加<code>master</code>后，之后的命令会调用<code>ssh lyk@master</code>， 因此需要配置好本机到master（也是本机）的免密登陆， 是的，<strong>本机到本机也需要配置免密登陆！！！</strong></li>
</ul>
</li>
<li>
<p>配置master对所有slave的ssh免密登陆</p>
<ul>
<li>不需要配置shave对其他节点的免密登陆</li>
</ul>
</li>
</ol>
<p>master需要开放相应端口：</p>
<ul>
<li>hadoop:
<ul>
<li>8099</li>
<li>50070</li>
<li>9000</li>
</ul>
</li>
<li>spark:
<ul>
<li>7077</li>
<li>18080</li>
</ul>
</li>
</ul>
<h2 id="集群用户"><a class="header-anchor" href="#集群用户"></a>集群用户</h2>
<p>所有节点采用lyk用户</p>
<h2 id="集群环境"><a class="header-anchor" href="#集群环境"></a>集群环境</h2>
<p>这里的环境是集群的环境，与我做作业时单机配置的版本不同</p>
<p>注意，hadoop+spark+scala的版本管理非常混乱，因此要<strong>严格按照文档里的版本来安装</strong>（要么用下面集群这套( hadoop3.2.3... )， 要么用上面单机那套（hadoop2.7.4...））</p>
<p>除了jdk和scala， 其他用户软件都安装在lyk用户目录下</p>
<ul>
<li>JDK：<code>usr/lib/jvm/java-8-openjdk-amd64</code>
<ul>
<li><code>sudo apt-get install openjdk-8-jdk</code></li>
</ul>
</li>
<li>scala: <code>/usr/local/scala</code>
<ul>
<li><code>scala-2.12.15</code></li>
</ul>
</li>
<li>hadoop: <code>/home/lyk/hadoop</code>
<ul>
<li><code>hadoop-3.2.3</code></li>
</ul>
</li>
<li>spark: <code>/home/lyk/spark</code>
<ul>
<li><code>spark-3.1.3</code></li>
</ul>
</li>
</ul>
<p><strong>spark和hadoop均是先在master上安装，并进行一些配置，最后打包发给slave</strong></p>
<p>spark是scala实现，hadoop是java实现，二者都运行在JVM上， 因此都可以使用JVM进程查看工具<code>jps</code>进行查看</p>
<h3 id="环境变量"><a class="header-anchor" href="#环境变量"></a>环境变量</h3>
<p><code>/home/lyk/.bashrc</code>中一共需要配置如下环境变量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">JAVA_HOME</span></span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=./:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SCALA_HOME</span></span><br><span class="line">export SCALA_HOME=/usr/local/scala</span><br><span class="line">export PATH=$PATH:$&#123;JAVA_HOME&#125;/bin:$SCALA_HOME/bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">HADOOP_HOME</span></span><br><span class="line">export HADOOP_HOME=/home/lyk/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure>
<h3 id="hadoop安装"><a class="header-anchor" href="#hadoop安装"></a>hadoop安装</h3>
<p>下载hadoop安装包，传到服务器上，改名，配置环境变量</p>
<ol>
<li>
<p><a href="https://hadoop.apache.org/release/3.2.3.html">下载hadoop安装包</a></p>
</li>
<li>
<p>将hadoop-3.2.3.tar.gz拷贝到master服务器上</p>
</li>
<li>
<p>在master上将hadoop压缩包解压并改名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf hadoop-3.2.3.tar.gz -C ~</span><br><span class="line">cd ~</span><br><span class="line">mv ./hadoop-3.2.3 ./hadoop #修改文件夹名称为hadoop</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>添加Hadoop的环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc # 实际我用的是～/.zshrc</span><br></pre></td></tr></table></figure>
<p>将以下内容添加到末尾：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export HADOOP_HOME=/home/lyk/hadoop</span><br><span class="line">export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看hadoop版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop version</span><br></pre></td></tr></table></figure>
<ul>
<li>这一命令对所有节点都有效(包括slave)，可以查看hadoop是否被正确安装</li>
</ul>
</li>
</ol>
<h3 id="spark安装"><a class="header-anchor" href="#spark安装"></a>spark安装</h3>
<p>spark会预装scala，位于其jar文件夹内，但我没有使用内置的scala，而是自己下载了一个</p>
<p>注意到Spark3预装了Scala2.12， 而Spark 3.2+预装了Scala 2.13</p>
<ul>
<li>我的集群hadoop版本是3.2.3, 与Sprak3.1.3配套， 因此就选择Sprak3.1.3, 而后者对应Scala版本是<code>2.12</code></li>
</ul>
<p>由于已经安装了hadoop，就选择安装不带hadoop的Spark，即<code>spark-3.1.3-bin-without-hadoop.tgz</code></p>
<ol>
<li>
<p><a href="https://dlcdn.apache.org/spark/spark-3.1.3/spark-3.1.3-bin-without-hadoop.tgz">下载<code>spark-3.1.3-bin-without-hadoop.tgz</code></a></p>
</li>
<li>
<p>将压缩包拷贝到master( 这里我拷贝到了<code>/</code> )</p>
</li>
<li>
<p>解压并改名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf spark-3.1.3-bin-without-hadoop.tgz -C /usr/local/</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home/lyk</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv ./spark-3.1.2-bin-without-hadoop/ ./spark</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="scala"><a class="header-anchor" href="#scala"></a>scala</h3>
<ol>
<li><a href="https://scala-lang.org/download/2.12.15.html">下载安装包</a></li>
<li>解压到对应目录（我放在<code>/usr/local</code>）并改名为scala</li>
<li>配置环境变量<code>$SCALA_HOME</code>, 这一步在上文“环境变量”已经做好了</li>
</ol>
<h3 id="JDK"><a class="header-anchor" href="#JDK"></a>JDK</h3>
<p>强烈建议通过安装包的方式安装java，因为这样可以指定目录， 因为JAVA环境变量是写在<code>hadoop-env.sh</code>里的，所有节点拷贝一份。 如果指定了java目录，那么所有节点只需把jdk安装在相同目录即可。</p>
<p>（我采用了直接<code>apt-get install</code>对方式）</p>
<p>由于我所有节点都是ubuntu20.04， 直接<code>sudo apt-get install openjdk-8-jdk </code>安装到目录<code>/usr/lib/jvm/java-8-openjdk-amd64</code>, 所有节点都这样（安装到相同的目录）， 因此只要所有节点都通过该指令安装jdk，也可以做到环境变量的同步</p>
<p>下面介绍安装包的方式：</p>
<ol>
<li>将<code>jdk-8u301-linux-x64.tar.gz</code>保存在根目录</li>
<li>运行如下命令</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/java</span><br><span class="line">tar -zxvf /jdk-8u301-linux-x64.tar.gz -C /usr/local/java</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>添加环境变量,</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ～/.bashrc</span><br></pre></td></tr></table></figure>
<p>将下面的内容添加至末尾</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=./:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$PATH:$&#123;JAVA_HOME&#125;/bin</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>退出vim，运行如下命令来使得配置生效</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>使用如下命令来确认是否已经安装完成</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p>​	应该看到如下输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java version &quot;1.8.0_301&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_301-b09)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.301-b09, mixed mode)</span><br></pre></td></tr></table></figure>
<h2 id="集群页面"><a class="header-anchor" href="#集群页面"></a>集群页面</h2>
<p>正确启动hadoop和spark后，应该能看到二者的webUI页面：</p>
<ul>
<li>hadoop：<code>&lt;master-ip&gt;:50070</code></li>
<li>spark: <code>&lt;master-ip&gt;:18080</code></li>
</ul>
<h1 id="Hadoop"><a class="header-anchor" href="#Hadoop"></a>Hadoop</h1>
<h2 id="配置（-on-master）"><a class="header-anchor" href="#配置（-on-master）"></a>配置（ on master）</h2>
<p>所有配置文件都位于目录<code>~/hadoop/etc/hadoop/</code>中</p>
<ol>
<li>
<p>修改<code>workers</code>为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slave01</span><br><span class="line">slave02</span><br><span class="line">slave03</span><br></pre></td></tr></table></figure>
<p>workers文件默认内容是<code>localhost</code>,这里把它删除了。 如果用单机版hadoop，则保留localhost,且不需要添加slave</p>
</li>
<li>
<p>修改core-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/lyk/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>请注意属性<code>hadoop.tmp.dir</code>的值,需要创建该目录（这里就需要创建<code>/home/lyk/hadoop/tmp</code>）</p>
</li>
<li>
<p>修改<code>hdfs-site.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/lyk/hadoop/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/home/lyk/hadoop/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.blocksize<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>134217728<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.webhdfs.enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>必须将dfs.webhdfs.enabled属性设置为true，否则就不能使用webhdfs的LISTSTATUS、LISTFILESTATUS等需要列出文件、文件夹状态的命令，因为这些信息都是由namenode来保存的<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.http.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">value</span>&gt;</span>master:50070<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">description</span>&gt;</span>hadoop的webUI访问页面<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注意， replicatoin数量即worker数量，这里有3个worker； 如果是单机，那么只有1个worker（就是本机）</li>
<li>由于采用lyk用户，所以namenode和datanode目录都设在lyk用户目录下（ <code>/home/lyk/hadoop/dfs</code> ）</li>
</ul>
</li>
<li>
<p>修改<code>mapred-site.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在hadoop2.X中，该文件内容名为<code>mapred-site.xml.template</code>，需要先改名为<code>mapred-site.xml</code>，再编辑</li>
</ul>
</li>
<li>
<p>修改<code>yarn-site.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:8099<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>yarn.resourcemanager.webapp.address</code>是hadoop的master的管理页面</li>
</ul>
</li>
<li>
<p>在<code>hadoop-env.sh</code>中配置<code>JAVA_HOME</code>, 先找到本机的JAVA_HOME， 这里是<code>/usr/lib/jvm/java-8-openjdk-amd64</code>，在<code>hadoop-env.sh</code>中添加：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64</span><br><span class="line">export HDFS_NAMENODE_USER=lyk</span><br><span class="line">export HDFS_DATANODE_USER=lyk</span><br><span class="line">export HDFS_SECONDARYNAMENODE_USER=lyk</span><br><span class="line">export YARN_RESOURCEMANAGER_USER=lyk</span><br><span class="line">export YARN_NODEMANAGER_USER=lyk</span><br></pre></td></tr></table></figure>
<ul>
<li>注意，该文件内本来有一个<code>export JAVA_HOME=$&#123;JAVA_HOME&#125;</code>， 但是该配置不知道为什么无效，所以需要换成显式的JAVA_HOME</li>
<li>由于用户是lyk，所以这里是lyk</li>
</ul>
</li>
<li>
<p>将配置好的hadoop打包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~</span><br><span class="line">rm -rf ./hadoop/tmp</span><br><span class="line">rm -rf ./hadoop/logs/*</span><br><span class="line">tar -zcvf hadoop.master.tar.gz ./hadoop</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将打包好的hdoop发送给slave</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp hadoop.master.tar.gz lyk@slave01:~ </span><br><span class="line">scp hadoop.master.tar.gz lyk@slave02:~ </span><br><span class="line">scp hadoop.master.tar.gz lyk@slave03:~ </span><br></pre></td></tr></table></figure>
<ul>
<li>如果传输较慢，建议用<code>CMD &amp;</code>， 将命令放在后台执行
<ul>
<li>如果是首次ssh连接的话， 还需要对ssh公钥确认输入<code>yes</code>，所以这个命令就不能直接放入后台执行，需要先确认一次。 之后再使用该命令都不需要确认，也就可以放到后台了</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="安装（-on-slave-）"><a class="header-anchor" href="#安装（-on-slave-）"></a>安装（ on slave ）</h2>
<ol>
<li>
<p>只要把master的hadoop文件夹发给slave就行了，这里我采用压缩包方式发送。注意需要先删除slave上原有的hadoop（如果有的话) :</p>
<p>运行如下命令, 删除原有的hadoop根目录( 如果有的话 )并将新的压缩包（master发来的）解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /usr/local/hadoop</span><br><span class="line">tar -zxvf ~/hadoop.master.tar.gz  -C ~</span><br></pre></td></tr></table></figure>
<p>然后改名为<code>hadoop</code></p>
</li>
</ol>
<h2 id="启动Hadoop"><a class="header-anchor" href="#启动Hadoop"></a>启动Hadoop</h2>
<ol>
<li>
<p><strong>格式化HDFS</strong>:注意在首次使用时使用，若重复格式化，将无法开启datanode</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/hadoop/bin</span><br><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure>
<ul>
<li>初始化之前需要删掉配置文件的tmp目录下的所有内容</li>
<li>如果不初始化，则启动时无法启动namenode</li>
<li>最终会输出SHUTTING DOWN....</li>
</ul>
</li>
<li>
<p>在master上输入以下命令启动Hadoop</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/hadoop</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./sbin/start-all.sh</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="查看Hadoop是否启动"><a class="header-anchor" href="#查看Hadoop是否启动"></a>查看Hadoop是否启动</h2>
<ol>
<li>
<p>检验hadoop是否已经启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure>
<p>在master上应该有类似如下输出:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">28848 NameNode</span><br><span class="line">29122 ResourceManager</span><br><span class="line">29234 Jps</span><br><span class="line">29016 SecondaryNameNode</span><br><span class="line">28921 DataNode</span><br><span class="line">29199 NodeManager</span><br></pre></td></tr></table></figure>
<p>主要关注<code>NameNode</code>、<code>ResourceManager</code>、<code>SecondaryNameNode</code>这三条是否存在，如果不存在则应该去<code>~/hadoop/logs/</code>目录下寻找相应地日志查看错误信息</p>
<p>在slave上输入jps应该有类似如下输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4406 Jps1914 </span><br><span class="line">NodeManager1787 </span><br><span class="line">DataNode</span><br></pre></td></tr></table></figure>
<p>主要关注<code>NodeManager</code>、<code>DataNode</code>这两条是否存在，如果不存在同样去<code>~/hadoop/logs/</code>目录下寻找相应地日志查看错误信息</p>
<ul>
<li>我发现某个slave的datanode没有启动，查看其<code>hadoop-lyk-datanode-VM-4-7-ubuntu.log</code>发现，原来是xml配置文件写错了。。</li>
</ul>
</li>
<li>
<p>查看hadoop webUI：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;master-ip&gt;:50070</span><br></pre></td></tr></table></figure>
<ul>
<li>在<code>hdfs-site.xml</code>中配置</li>
</ul>
</li>
</ol>
<h2 id="关闭hadoop"><a class="header-anchor" href="#关闭hadoop"></a>关闭hadoop</h2>
<p>如果关闭Hadoop(<code>~/hadoop/sbin/stop-all.sh</code> ),则所有节点的jps都不会有与hadoop关联的输出</p>
<h2 id="Bugs"><a class="header-anchor" href="#Bugs"></a>Bugs</h2>
<ul>
<li>
<p>ERROR: Invalid HADOOP_HDFS_HOME</p>
<p>网上有说需要配置<code>HADOOP_HDFS_HOME</code>这个环境变量，其实根本不需要。 发生这个问题，大概率是你的hadoop安装出错了， 启动hadoop实际上会执行类似<code>/home/lyk/hadoop/share/hadoop/common/hadoop-common-3.2.3.jar</code>的jar包， 进到该目录看看有没有这个jar包就行了</p>
</li>
</ul>
<h1 id="Spark"><a class="header-anchor" href="#Spark"></a>Spark</h1>
<p>Spark是一个分布式的大数据计算引擎，可以执行你的任务（jar包）</p>
<h2 id="配置"><a class="header-anchor" href="#配置"></a>配置</h2>
<ol>
<li>
<p>改名配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/spark/</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp ./conf/spark-env.sh.template ./conf/spark-env.sh</span><br><span class="line">cp ./conf/workers.template ./conf/workers</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改workers文件的内容，将原来的内容替换成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">master</span><br><span class="line">slave01</span><br><span class="line">slave02</span><br><span class="line">slave03</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在spark-env.sh的末尾添加如下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export SPARK_DIST_CLASSPATH=$(/home/lyk/hadoop/bin/hadoop classpath)</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64</span><br><span class="line">export SCALA_HOME=/usr/local/scala</span><br><span class="line">export HADOOP_HOME=/home/lyk/hadoop</span><br><span class="line">export HADOOP_COMMON_HOME=$HADOOP_HOME</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Spark</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SPARK_MASTER_PORT是7077</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SPARK_MASTER_WEBUI_PORT用于在网页上访问spark管理页面，默认的端口是8080, 这是个常用端口， 因此替换成了18080</span></span><br><span class="line">export SPARK_MASTER_HOST=master</span><br><span class="line">export SPARK_MASTER_PORT=7077</span><br><span class="line">export SPARK_MASTER_WEBUI_PORT=18080</span><br></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export SPARK_DIST_CLASSPATH=$($(HOME)/hadoop/bin/hadoop classpath)</span><br><span class="line">export HADOOP_CONF_DIR=$(HOME)/hadoop/etc/hadoop#</span><br><span class="line">export SCALA_HOME=/usr/lib/scala/scala-2.13.3 </span><br><span class="line">export HADOOP_HOME=$(HOME)/hadoop</span><br><span class="line">export SPARK_MASTER_IP=&lt;master的公网ip&gt; #指定 Spark 集群 Master 节点的 IP 地址 </span><br><span class="line">export SPARK_MASTER_PORT=7077export SPARK_MASTER_HOST=master</span><br><span class="line">export SPARK_EXECUTOR_MEMORY=4096m #大小看虚拟机内存</span><br><span class="line">export SPARK_LOCAL_IP=localhost</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64</span><br></pre></td></tr></table></figure>
<ul>
<li>注意，由于我并没有安装scala所以不添加SCALA_HOME，而是添加JAVA_HOME。此外，由于出现了类似于如下的worker日志报错，我添加了<code>SPARK_LOCAL_IP</code></li>
<li>这里填hadoop的目录， 我在<code>hadoop-env.sh</code>中指定了</li>
</ul>
<ol start="3">
<li>使用如下命令将配置好的spark打包发送给slave</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line">tar -zcvf /spark.master.tar.gz ./spark</span><br><span class="line">scp /spark.master.tar.gz slave01:/</span><br><span class="line">scp /spark.master.tar.gz slave02:/</span><br><span class="line">scp /spark.master.tar.gz slave03:/</span><br></pre></td></tr></table></figure>
<p><strong>安装（slave）：</strong></p>
<ol>
<li>使用如下命令在slave上安装spark</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># rm -rf /usr/local/spark/# </span><br><span class="line">tar -zxvf /spark.master.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>
<h2 id="启动spark"><a class="header-anchor" href="#启动spark"></a>启动spark</h2>
<p>==在启动之前先修改master的spark-env.sh文件，将其中的<code>SPARK_LOCAL</code>注释掉，不然就只能从服务器内网的localhost来访问spark的webui了（我也不知道为啥。。。）==</p>
<ol>
<li>
<p><strong>先按照之前的步骤启动Hadoop</strong></p>
</li>
<li>
<p>启动spark</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/spark</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./sbin/start-all.sh</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="查看spark是否启动"><a class="header-anchor" href="#查看spark是否启动"></a>查看spark是否启动</h2>
<p>执行jps，此时除了hadoop的进程输出外，还能看到spark的进程：</p>
<ul>
<li>
<p>master： 多了<code>Master</code>和<code>Worker</code>(加入指定该master也作为worker的话)</p>
</li>
<li>
<p>worker： 多了<code>Worker</code></p>
</li>
</ul>
<h2 id="提交任务"><a class="header-anchor" href="#提交任务"></a>提交任务</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">spark-submit [path-to-jar]</span><br></pre></td></tr></table></figure>
<h2 id="Bugs-2"><a class="header-anchor" href="#Bugs-2"></a>Bugs</h2>
<ul>
<li>
<p>jps没有输出</p>
<p><code>jps</code>是查看java进程的工具，java程序启动以后，会在<code>/tmp</code>目录下生成一个<code>hsperfdata_[username]</code>的文件夹，其中的文件以java进程的pid命名。因此使用jps查看当前进程，其实就是把<code>/tmp/hsperfdata_username</code>中的文件名遍历一遍之后输出。</p>
<p>情况1:</p>
<p>如果<code>/tmp/hsperfdata_[username]</code>的文件所有者和文件所属用户组与启动进程的用户不一致的话，在进程启动之后，就没有权限写<code>/tmp/hsperfdata_[username]</code>，所以<code>/tmp/hsperfdata_[username]</code>是一个空文件，理所当然jps也就没有任何显示。</p>
<p>情况2:</p>
<p>不知道为啥，重启服务器就好了。。。</p>
</li>
<li>
<p>nodemanager running as process 6410. Stop it first.</p>
<p>进程已经在运行中了，先执行<code>stop-all.sh</code>下]，再执行<code>start-all.sh</code></p>
</li>
<li>
<p>Permission denied</p>
<p>文件所有权的问题， 如果以root身份安装Hadoop（比如一开始把hadoop放在<code>/usr/local</code>），然后又想用普通用户来使用hadoop（比如之后把hadoop放在<code>~</code>)，就会发生此问题，只需要更改hadoop的所有权:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R lyk:lyk ~/hadoop</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Hadoop-Spark-For-Manjaro"><a class="header-anchor" href="#Hadoop-Spark-For-Manjaro"></a>Hadoop + Spark For Manjaro</h1>
<p>这里演示一下Manjaro/arch用户安装hadoop的流程，只开个头。剩余的hadoop配置和spark安装及配置也大同小异。主要是对于manjaro/arch用户来说，安装这类软件会有一些小坑</p>
<ul>
<li>
<p><code>sudo pacman -Syu</code></p>
</li>
<li>
<p>安装jdk：<code>yay -S jdk</code></p>
</li>
<li>
<p>安装openssh：<code>yay -S openssh</code></p>
<ul>
<li>manjaro默认不安装openssh</li>
</ul>
</li>
</ul>
<p><strong>如果你要用hadoop用户，而非lyk用户的话，还得做以下步骤</strong></p>
<ul>
<li>
<p>创建hadooop用户并且更改hadoop用户密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//创建hadoop用户</span><br><span class="line">sudo adduser hadoop</span><br><span class="line"></span><br><span class="line">//更改hadoop用户密码</span><br><span class="line">sudo passwd hadoop</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>manjaro默认不安装<code>adduser</code>命令，要使用<code>useradd</code></strong></li>
<li>如果<code>yay -S adduser</code>,这个安装的命令默认是在/etc内创建用户，而不是（如centos中自带的<code>adduser</code>）在root目录下，因此路径会不一样，在配置环境变量时需要注意。</li>
</ul>
</li>
<li>
<p>以上的配置完成之后，使用hadoop用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su - hadoop</span><br></pre></td></tr></table></figure>
<p>切换成hadoop之后，设置ssh免密登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa </span><br><span class="line"></span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys </span><br><span class="line"></span><br><span class="line">chmod 640 ~/.ssh/authorized_keys </span><br></pre></td></tr></table></figure>
<p>然后试试<code>ssh localhost</code>，查看是否能够免密登录</p>
<blockquote>
<p>如果遇到22端口被拒绝的情况，很有可能是ssh服务并没有开启。<br>
切换成exit退出当前用户，使用主用户<br>
输入<code>sudo service ssh start</code>进行服务的开启。如果显示没有该服务，那么可以确定系统并没有安装openssh, 去安装。</p>
</blockquote>
</li>
<li>
<p>Archlinux或者manjaro开启ssh服务命令:</p>
<p><code>systemctl enable sshd.service</code>     开机启动</p>
<p><code>systemctl start sshd.service</code>      立即启动</p>
<p><code>systemctl restart sshd.service</code>    立即重启</p>
</li>
<li>
<p>用户hadoop使用<code>su</code>可能会报错：</p>
<p><code>hadoop is not in the sudoers file.  This incident will be reported.</code>，需要在/etc/sudoers文件里给该用户添加权限 （<a href="https://www.cnblogs.com/MakeView660/p/12395542.html">ref</a>）</p>
</li>
</ul>
<h1 id="Hadoop-Spark-For-Mac"><a class="header-anchor" href="#Hadoop-Spark-For-Mac"></a>Hadoop + Spark For Mac</h1>
<p>实际做作业时，我用的就是mac m1单机hadoop+spark，亲测没问题</p>
<p>mac和linux的区别主要还是文件路径不同，需要修改一些环境变量，其余步骤完全相同</p>
<ul>
<li>由于mac的用户目录位于<code>/Users/lyk</code>, 各种配置中的环境变量也需要更改（而不是linux的<code>/home/lyk</code>）</li>
<li>同理， mac的jdk位置也可能不一样，需要做更改</li>
<li>因为spark和hadoop都是由高级语言java/scala编写的，因此没有跨平台问题。我的m1能正常安装、运行集群</li>
</ul>
<h1 id="Clickhouse"><a class="header-anchor" href="#Clickhouse"></a>Clickhouse</h1>
<p>Clickhouse是一个单机数据库，对机器学习的支持比较好</p>
<h2 id="环境"><a class="header-anchor" href="#环境"></a>环境</h2>
<p>mac（m1）没法装clickhouse，只能用服务器，即在服务器上裸机安装（后来为了服务高可用性，改为在服务器上docker安装 ）</p>
<h2 id="搭建clickhouse"><a class="header-anchor" href="#搭建clickhouse"></a>搭建clickhouse</h2>
<p><a href="https://clickhouse.com/docs/zh/getting-started/install/">官网文档</a></p>
<h3 id="系统要求"><a class="header-anchor" href="#系统要求"></a>系统要求</h3>
<p>ClickHouse可以在任何具有x86_64，AArch64或PowerPC64LE CPU架构的Linux，FreeBSD或Mac OS X上运行。</p>
<p>官方预构建的二进制文件通常针对x86_64进行编译，并利用<code>SSE 4.2</code>指令集，因此，除非另有说明，支持它的CPU使用将成为额外的系统需求。下面是检查当前CPU是否支持SSE 4.2的命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grep -q sse4_2 /proc/cpuinfo &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;SSE 4.2 supported&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;SSE 4.2 not supported&quot;</span></span><br></pre></td></tr></table></figure>
<p>要在不支持<code>SSE 4.2</code>或<code>AArch64</code>，<code>PowerPC64LE</code>架构的处理器上运行ClickHouse，您应该通过适当的配置调整从<a href="https://clickhouse.com/docs/zh/getting-started/install/#from-sources">源代码构建ClickHouse</a></p>
<ul>
<li>
<p>注意，m1无法安装用软件包clickhouse，只能手动编译，clickhouse官网有<a href="https://clickhouse.com/docs/zh/development/build-osx">教程</a>。 然而m1默认的编译器是apple clang，而clickhouse只推荐clang编译(教程也是用的clang)，因此m1用户还得把默认编译器换成clang， 由于特别麻烦，因此我在服务器上搭建了clickhouse，没有用mac本机</p>
<ul>
<li>
<p>[Apple clang无法编译clickhouse，只能用clang](<a href="https://stackoverflow.com/questions/64497835/clickhouse-installation-for-mac-fails-appleclang-is-not-supported-you-should">Clickhouse installation for mac fails: &quot;AppleClang is not supported, you should install clang from brew.&quot;</a>)</p>
</li>
<li>
<p><a href="https://embeddedartistry.com/blog/2017/02/24/installing-llvm-clang-on-osx/">Installing LLVM/Clang on OS X</a></p>
</li>
</ul>
</li>
</ul>
<h3 id="DEB软件包安装"><a class="header-anchor" href="#DEB软件包安装"></a>DEB软件包安装</h3>
<p>建议使用Debian或Ubuntu的官方预编译<code>deb</code>软件包。运行以下命令来安装包:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y apt-transport-https ca-certificates dirmngr</span><br><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 8919F6BD2B48D754</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb https://packages.clickhouse.com/deb stable main&quot;</span> | sudo <span class="built_in">tee</span> \</span><br><span class="line">    /etc/apt/sources.list.d/clickhouse.list</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install -y clickhouse-server clickhouse-client</span><br><span class="line"></span><br><span class="line">sudo service clickhouse-server start</span><br><span class="line">clickhouse-client <span class="comment"># or &quot;clickhouse-client --password&quot; if you&#x27;ve set up a password.</span></span><br></pre></td></tr></table></figure>
<h3 id="docker安装"><a class="header-anchor" href="#docker安装"></a>docker安装</h3>
<p>强烈建议安装docker版本的clickhouse，<a href="https://hub.docker.com/r/clickhouse/clickhouse-server/">文档</a></p>
<p>pull镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull clickhouse/clickhouse-server</span><br></pre></td></tr></table></figure>
<p>运行server容器，并进行端口映射：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8123:8123 -p9000:9000 --name some-clickhouse-server --ulimit nofile=262144:262144 clickhouse/clickhouse-server</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>这里将主机端口9000， 8123 映射到容器的9000， 8123， 和裸机版的clickhouse一样</p>
</li>
<li>
<p>这样就可以进行公网通信了</p>
</li>
</ul>
<p>运行client容器，连接到server容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --rm --link lyk-clickhouse-server:clickhouse-server clickhouse/clickhouse-client --host clickhouse-server</span><br></pre></td></tr></table></figure>
<p>其余功能，如挂载卷，指定容器使用某个配置文件启动等，都参见文档</p>
<h2 id="配置clickhosue"><a class="header-anchor" href="#配置clickhosue"></a>配置clickhosue</h2>
<p>clickhouse系统配置文件:<code>/etc/clickhouse-server/config.xml </code></p>
<p>clickhouse用户配置文件:<code>/etc/clickhouse-server/users.xml </code></p>
<p>clickhouse日志文件所在目录: <code>/var/log/clickhouse-server</code></p>
<ul>
<li>
<p>如果<code>clickhouse-server</code> 没有找到任何有用的信息或根本没有任何日志，您可以使用命令查看 system.d :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo journalctl -u clickhouse-server</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="允许远程连接"><a class="header-anchor" href="#允许远程连接"></a>允许远程连接</h3>
<p>ClickHouse server默认只监听环回地址, 无法用公网通信：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/var/lib/clickhouse/# lsof -i :8123</span><br><span class="line">COMMAND   PID       USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">clickhous 653 clickhouse   41u  IPv6  32544      0t0  TCP ip6-localhost:8123 (LISTEN)</span><br><span class="line">clickhous 653 clickhouse   44u  IPv4  32547      0t0  TCP localhost:8123 (LISTEN)</span><br></pre></td></tr></table></figure>
<p>需要修改系统配置文件，使其监听公网地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/clickhouse-server/config.xml</span><br></pre></td></tr></table></figure>
<p>把注释掉的<code>&lt;listen_host&gt;::&lt;/listen_host&gt;</code>取消注释，然后重启服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service clickhouse-server restart </span><br></pre></td></tr></table></figure>
<p>现在的端口监听情况：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/var/lib/clickhouse/data/# lsof -i :8123</span><br><span class="line">COMMAND    PID       USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">clickhous 9188 clickhouse   32u  IPv6  61573      0t0  TCP *:8123 (LISTEN)</span><br></pre></td></tr></table></figure>
<h3 id="配置用户名和密码"><a class="header-anchor" href="#配置用户名和密码"></a>配置用户名和密码</h3>
<p>clickhouse默认的登录账号是default， 没有密码</p>
<p><a href="https://blog.csdn.net/qq_38830964/article/details/114012700">教程</a></p>
<p>可以修改用户配置文件，添加密码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/clickhouse-server/users.xml</span><br></pre></td></tr></table></figure>
<p>在对应用户的<password>标签中添加密码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;password&gt;123&lt;/password&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里是明文密码，还可以配置加密密码，这里不介绍了</li>
<li>当password标签为空时，代表免密码登录</li>
</ul>
<h2 id="登陆"><a class="header-anchor" href="#登陆"></a>登陆</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">clickhouse-client -u default --passord 123</span><br></pre></td></tr></table></figure>
<ul>
<li>-u 为指定使用哪个账号进行登录，如不指定, 默认使用default</li>
</ul>
<h2 id="Bugs-3"><a class="header-anchor" href="#Bugs-3"></a>Bugs</h2>
<p>clickhouse有时会自动崩溃，客户端启动时报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clickhouse-client</span><br><span class="line">ClickHouse client version 21.2.4.6 (official build).</span><br><span class="line">Connecting to localhost:9000 as user default.</span><br><span class="line">Code: 210. DB::NetException: Connection refused (localhost:9000)</span><br></pre></td></tr></table></figure>
<ul>
<li>并且，一旦出现一次崩溃，之后的clickhouse都无法通过systemctl启动(<code>sudo service clickhouse-server start</code>)，只能手动启动(<code>sudo clickhouse start</code> )</li>
<li>在网上找了各种教程，都没能解决。 我的服务器是ubuntu20.04，换了新服务器（相同OS），重装，依然有这个问题。  最后无奈使用docker的clickohouse，崩溃就崩溃，重启容器就好了</li>
</ul>
<p>clickhouse的文件的用户/组都为clickhouse，如果发现权限问题，需要chown</p>
<p>例如，新建了日志文件，需要手动更改其权限:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chown clickhouse:clickhouse /var/log/clickhouse-server/clickhouse-server.log</span><br></pre></td></tr></table></figure>
<h2 id="删除clickhouse"><a class="header-anchor" href="#删除clickhouse"></a>删除clickhouse</h2>
<p>查看系统已安装的包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt list --installed </span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt remove -y clickhouse-common-static</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt remove -y clickhouse-server-common</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /var/lib/clickhouse</span><br><span class="line">sudo rm -rf /etc/clickhouse-*</span><br><span class="line">sudo rm -rf /var/log/clickhouse-server</span><br></pre></td></tr></table></figure>
<h1 id="Flink"><a class="header-anchor" href="#Flink"></a>Flink</h1>
<p>Flink也是一个计算引擎，可以执行你提交的jar包</p>
<h2 id="搭建FLink"><a class="header-anchor" href="#搭建FLink"></a>搭建FLink</h2>
<p>环境：Mac单机搭建， Flink Version: 1.13.5-bin-scala-2.11</p>
<p><a href="https://www.jianshu.com/p/bbaa8d72cfcf">参考教程</a></p>
<p>下载jar包：<a href="https://archive.apache.org/dist/flink/flink-1.13.5/">https://archive.apache.org/dist/flink/flink-1.13.5/</a></p>
<p>解压：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo tar -zxf flink-1.13.5-bin-scala_2.11.tgz  -C /usr/local</span><br></pre></td></tr></table></figure>
<p>修改文件名字，并设置权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">sudo mv ./flink-*/ ./flink</span><br><span class="line">sudo chown -R hadoop:hadoop ./flink</span><br></pre></td></tr></table></figure>
<p>添加环境变量:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line">export FLINK_HOME=/usr/local/flink</span><br><span class="line">export PATH=$FLINK_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>
<p>更改配置文件( <code>[flink位置]/conf/flink-conf.yaml</code> ):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># The number of task slots that each TaskManager offers. Each slot runs one parallel pipeline.</span><br><span class="line"></span><br><span class="line">taskmanager.numberOfTaskSlots: 4</span><br><span class="line"></span><br><span class="line"># The parallelism used for programs that did not specify and other parallelism.</span><br><span class="line"></span><br><span class="line">parallelism.default: 1</span><br></pre></td></tr></table></figure>
<h2 id="启动Flink"><a class="header-anchor" href="#启动Flink"></a>启动Flink</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动Flink,因为FLINK_HOME已经写入了环境变量，因此可以直接执行脚本：</span></span><br><span class="line">start-cluster.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>可以通过观察logs目录下的日志来检测系统是否正在运行了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail log/flink--jobmanager-.log</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>JobManager同时会在8081端口上启动一个web前端，通过<a href="https://links.jianshu.com/go?to=http%3A%2F%2Flocalhost%3A8081">http://localhost:8081</a>来访问</p>
</li>
</ul>
<h2 id="关闭Flink"><a class="header-anchor" href="#关闭Flink"></a>关闭Flink</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stop-cluster.sh</span><br></pre></td></tr></table></figure>
<h2 id="提交任务-2"><a class="header-anchor" href="#提交任务-2"></a>提交任务</h2>
<p><a href="https://www.cnblogs.com/fonxian/p/12334222.html">教程</a></p>
<p>Flink可以直接在Flink的webUI上提交jar包</p>
<p>也可以命令行提交：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">run  -c Flink -p 2 [path-to-jar]</span><br></pre></td></tr></table></figure>
<h1 id="Kafka"><a class="header-anchor" href="#Kafka"></a>Kafka</h1>
<p>没学，不会，不想学</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Cloud Computation</tag>
      </tags>
  </entry>
  <entry>
    <title>Blindness</title>
    <url>/2022/02/04/Blindness/</url>
    <content><![CDATA[<p><em>他早已失明，现在依然失明，只是走到厨房门口，听见了她们在阳台上说的话，听见了笑声雨声和水声，呼吸到了带肥皂味的空气，然后回到了沙发上，正在想世界上还存在生活，正在问这生活是否还有他的一份</em></p>
<p><em>JOSÉ SARAMAGO</em></p>
<span id="more"></span>
<p>萨拉马戈的《失明症漫记》，和戈尔丁的《蝇王》一样，是社会试验类的小说。作者构思一个社会环境，然后把人放进去，观察人类的行为。 《蝇王》把人放进荒岛里，探究人性的原恶，而《失明症漫记》把人关押进政府看管的精神病院，揭露的丑恶不只在于人性，还有黑暗的社会。</p>
<p>个人认为，论思想之深刻和语言之深沉，还是《蝇王》更胜一筹。在语言上，萨拉马戈的书面语言是口语化的，节奏缓慢，句子很长，人物对话充斥其间。他本人认为他的作品应该被大声朗读，就像一个人给另一个人讲故事那样，这样才能抓住节奏。而口语化的行文肯定不如正式语言字斟句酌，因此有失深沉。另一方面，《蝇王》揭露的人性原恶在人类中普遍地存在，其结论放之四海而皆准。而本书人类的悲惨境遇，很多是不合理的社会结构导致的： 与人民脱节的政府、冷酷的军队、无人性的体制，这些是当时拉美社会现状的具体反映，不具有普世意义。我想说的是，随着文明的进步和制度的完善，这些问题或多或少地可以改善。</p>
<p>《失明症漫记》可以看成严肃文学版的末世求生，失明症在人群中蔓延，造成恐慌，接着社会崩溃，人性沦丧，有超能力的主角，带队生存.....	这个idea在成书的年代还很新颖,现在已经见怪不怪了。</p>
<p>人性，若有若无的晨曦，永远不要相信它，也永远不要否定它。</p>
<p>我们都知道，被坏人背弃，被许多人抵制的道德感其实自古有之，并且随着社会的发展，道德感已经与血液的颜色和眼泪的咸淡混为一谈。作为延伸，我们的眼睛就是灵魂的镜子，往往毫无保留地展示出我们嘴上试图否认的东西。</p>
<p>失明症是一种神奇的病症，传染没有理由，近乎随机，与普通失明不同，失明症患者看到眼前是一片发光的白色，仿佛眼球掉进了牛奶的海洋。我们不必深究这个病症的来源、细节和背后的寓意，总之它让女主角之外的人类失去了视力 ，让社会陷入混乱，欲望无节制地解放。人类回到原始丛林时代，区别在于不是区区几千男女生活在广袤的大自然中，而是百万千万的男女生活在一个贫瘠干涸的世界上。这是个失明的世界。</p>
<p>像处理任何大型传染病一样，失明症患者们被收容、隔离，主角们被收容到一家精神病院。在一个封闭且相对平等的社会环境内，没过多久就发生了暴力冲突和阶层分化。这一幕我们很熟悉，拥有武力的人组成统治集团，然后占有社会资源：钱财、食物、住所，最后发展成女人。 男人争抢性奴隶，如同一群鬣狗争夺一个骨架。政府在这一过程中冷眼旁观，“病人死了，疾病也就没有了”，抱着这个理念，病人间自相残杀是默许的，甚至未得病的人也可以被送到这儿遭受迫害，毕竟死人都是盲人。</p>
<p>经历残酷的性虐待后，几位女性奋起反抗，发动群众推翻了统治阶级，此时外面的世界已经在失明症下沦陷，看管的政府没有了，大门一扇扇敞开，疯子们走出了精神病院，混入外头盲人组成的混乱的人潮中，像大海中不停涌动的不知道往哪里去的浪涛。最终一场暴雨洗涤了人类肮脏的身体，人们逐渐复明了。</p>
<p>我们永远不能相信人性，不能预先知道一个人会干出什么事来，只有时间能检验一个人，时间是坐在牌桌对面的对手，他手中有各种牌，我们必须想法打出与生命一样的牌，那就是我们的生活。</p>
<p>但是，可以相信美好的存在，暴雨之后，总有东西从我们头顶掠过， 一只鸟，一片云，或者一片微弱的光亮。</p>
]]></content>
      <categories>
        <category>Literature</category>
      </categories>
      <tags>
        <tag>Latin American literatures</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ I/O</title>
    <url>/2022/09/26/C++%20IO/</url>
    <content><![CDATA[<p>Outline：</p>
<ul>
<li>IO
<ul>
<li>控制台对象</li>
<li>文件流</li>
<li>字符串流</li>
</ul>
</li>
<li>重定向</li>
</ul>
<span id="more"></span>
<h1 id="IO"><a class="header-anchor" href="#IO"></a>IO</h1>
<ul>
<li>类的层次结构：
<ul>
<li>层次结构的顶部是<code>ios</code>类，它充当虚基类。不能被实例化</li>
<li>其他类：
<ul>
<li>控制台类：<code>istream</code>,<code>ostream</code>,<code>iostream</code> 它们用于将程序连接到控制台</li>
<li>文件流：<code>ifstream</code>,<code>ofstream</code>,<code>fstream</code> 用于将程序连接到文件</li>
<li>字符串流：<code>istringstream</code>,<code>ostringstream</code>,<code>stringstream</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>C++ 标准输入输出包含在头文件 <iostream> 中，使用输入输出流库需要引入此头文件<br>
标准库中有 4 个 I/O 相关对象：</p>
<ul>
<li>处理输入的 <code>istream</code>对象 <code>cin</code></li>
<li>处理输出的 <code>ostream</code> 对象 <code>cout</code></li>
<li>另外两个 <code>ostream</code> 对象 <code>cerr</code> 和<code> clog</code></li>
</ul>
<p>也可以通过引入头文件 <code>&lt;cstdio&gt;</code> 或 <code>&lt;stdio.h&gt;</code> 使用 <code>printf</code> 和 <code>scanf</code></p>
<h2 id="控制台对象"><a class="header-anchor" href="#控制台对象"></a>控制台对象</h2>
<h3 id="istream对象：-cin"><a class="header-anchor" href="#istream对象：-cin"></a>istream对象： cin</h3>
<p><code>istream</code>类无法实例化，但是系统已经创建了此类的一个名为<code>cin</code>的对象，存储中<iostream></p>
<ul>
<li>
<p>流提取符 <code>&gt;&gt;</code> ,以空白字符或输入结束字符作为终止</p>
<blockquote>
<p>输入结束（End-Of-File，EOF）字符：在 Windows 的命令行中，用 <code>Ctrl + Z</code> 表示，在类 UNIX 系统的命令行中，用 <code>Ctrl (Command) + D</code> 表示</p>
</blockquote>
</li>
<li>
<p>读入一个字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char ch ;</span><br><span class="line">cin.get(ch);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>放回一个字符,可能会有问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cin.unget();</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>删除连续的空白字符:</p>
<p><code>cin &gt;&gt; std::ws;</code></p>
</li>
<li>
<p>忽略一行中剩余的字符，<strong>丢弃定界符（delimiter）</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cin.<span class="built_in">ignore</span>(</span><br><span class="line">    std::numeric_limits&lt;std::streamsize&gt;::<span class="built_in">max</span>(), </span><br><span class="line">    <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">); </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>示例:</p>
</li>
</ul>
<p>输入十个数字:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> nums[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">10</span> ; i++ )</span><br><span class="line">&#123;</span><br><span class="line">	cin &gt;&gt; nums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入未知个数的数字并求和:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int sum = 0;</span><br><span class="line">while( cin &gt;&gt; num )</span><br><span class="line">&#123;</span><br><span class="line">sum += num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>int stoi(string)</code> : 把字符串转换成整数</p>
</li>
<li>
<p>用gets()输入字符数组 （方便，常用）</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> ch[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">gets</span>(ch);</span><br></pre></td></tr></table></figure>
<p>读入一个完整的行（从标准输入读，一直读到遇到换行符），把读到的内容存入括号中指定的字符数组里，并用空字符’\0’取代行尾的换行符’\n’。读入时不需要考虑换行符。</p>
<h3 id="ostream对象：-cout、cerr和clog"><a class="header-anchor" href="#ostream对象：-cout、cerr和clog"></a>ostream对象： cout、cerr和clog</h3>
<p><code>ostream</code>类无法实例化，但是系统已经创建了此类的三个对象：<code>cout</code>、<code>cerr</code>和<code>clog</code>，存储于<iostream></p>
<ul>
<li>
<p><code>cout</code>绑定到<code>cin</code>,意味着每次通过<code>cin</code>输入数据时，<code>cout</code>都会被刷新（清空）</p>
</li>
<li>
<p><code>cerr</code>和<code>clog</code>都被设计为向console发送错误，但<code>cerr</code>每次操作后立即刷新其内容，<code>clog</code>手机错误消息，当程序终止或显示刷新时才刷新</p>
</li>
<li>
<p>流插入符<code>&lt;&lt;</code></p>
</li>
</ul>
<h2 id="文件流"><a class="header-anchor" href="#文件流"></a>文件流</h2>
<h3 id="fstream"><a class="header-anchor" href="#fstream"></a>&lt; fstream &gt;</h3>
<ul>
<li>要在C++进行文件处理,需要引入头文件<code>&lt;fstream&gt;</code></li>
</ul>
<h3 id="ifstream"><a class="header-anchor" href="#ifstream"></a>&lt; ifstream &gt;</h3>
<ul>
<li>
<p>读取文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">fin</span><span class="params">(file_path)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!fin.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;file not found&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>ifstream</code> 的构造函数还可以传入一个 mode 参数，包括但不限于（不同的 mode 可以用按位或运算符 | 组合在一起）：</p>
<ul>
<li><code>ios_base::binary</code> 以二进制方式读取文件</li>
<li><code>ios_base::app</code> 在文件末尾追加</li>
<li><code>ios_base::trunc </code>丢弃文件中原有的内容</li>
</ul>
</li>
</ul>
<h3 id="ofstream"><a class="header-anchor" href="#ofstream"></a>&lt; ofstream &gt;</h3>
<ul>
<li>
<p>写入文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ofstream <span class="title">fout</span><span class="params">(file_path)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (!fin.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;file not found&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>ofstream</code> 的构造函数还可以传入一个 mode 参数，包括但不限于（不同的 mode 可以用按位或运算符 | 组合在一起） ：</p>
<ul>
<li>
<p><code>ios_base::app</code> 在文件末尾追加</p>
</li>
<li>
<p><code>ios_base::trunc</code> 丢弃文件中原有的内容</p>
</li>
</ul>
</li>
</ul>
<h3 id="fstream-2"><a class="header-anchor" href="#fstream-2"></a>&lt; fstream &gt;</h3>
<ul>
<li>兼具 <code>ifstream</code> 和 <code>ofstream</code> 的功能</li>
</ul>
<h2 id="字符串流"><a class="header-anchor" href="#字符串流"></a>字符串流</h2>
<ul>
<li>使用 string 需要引入头文件 <string></li>
<li>字符串流在<code>&lt;sstream&gt;</code></li>
<li>跟 Java 不同，string 是<strong>可修改内容</strong>的</li>
</ul>
<h1 id="重定向"><a class="header-anchor" href="#重定向"></a>重定向</h1>
<ul>
<li><code>rdbuf()</code></li>
</ul>
<p><code>rdbuf() </code>函数定义在<code>&lt;ios&gt;</code>头文件中，专门用于实现 C++ 输入输出流的重定向。</p>
<p>值得一提的是，<code>ios </code>作为 <code>istream </code>和<code> ostream</code> 类的基类，<code>rdbuf() </code>函数也被继承，因此<code> cin</code> 和 <code>cout</code> 可以直接调用该函数实现重定向。</p>
<p><code>rdbuf()</code> 函数的语法格式有 2 种，分别为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">streambuf * <span class="title">rdbuf</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line"><span class="function">streambuf * <span class="title">rdbuf</span><span class="params">(streambuf * sb)</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>streambuf</code> 是 C++ 标准库中用于表示缓冲区的类，该类的指针对象用于代指某个具体的流缓冲区。</p>
</blockquote>
<p>其中，第一种语法格式仅是返回一个指向当前流缓冲区的指针；第二种语法格式用于将 <code>sb</code> 指向的缓冲区设置为当前流的新缓冲区，并返回一个指<strong>向旧缓冲区的对象</strong>。</p>
<p>举个例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//打开 in.txt 文件，等待读取</span></span><br><span class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">(<span class="string">&quot;in.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="comment">//打开 out.txt 文件，等待写入</span></span><br><span class="line">    <span class="function">ofstream <span class="title">fout</span><span class="params">(<span class="string">&quot;out.txt&quot;</span>)</span></span>;</span><br><span class="line">    streambuf *oldcin;</span><br><span class="line">    streambuf *oldcout;</span><br><span class="line">    <span class="type">char</span> a[<span class="number">100</span>];</span><br><span class="line">    <span class="comment">//用 rdbuf() 重新定向，返回旧输入流缓冲区指针</span></span><br><span class="line">    oldcin = cin.<span class="built_in">rdbuf</span>(fin.<span class="built_in">rdbuf</span>());</span><br><span class="line">    <span class="comment">//从input.txt文件读入</span></span><br><span class="line">    cin &gt;&gt; a;</span><br><span class="line">    <span class="comment">//用 rdbuf() 重新定向，返回旧输出流缓冲区指针</span></span><br><span class="line">    oldcout = cout.<span class="built_in">rdbuf</span>(fout.<span class="built_in">rdbuf</span>());</span><br><span class="line">    <span class="comment">//写入 out.txt</span></span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//还原标准输入输出流</span></span><br><span class="line">    cin.<span class="built_in">rdbuf</span>(oldcin); <span class="comment">// 恢复键盘输入</span></span><br><span class="line">    cout.<span class="built_in">rdbuf</span>(oldcout); <span class="comment">//恢复屏幕输出</span></span><br><span class="line">    <span class="comment">//打开的文件，最终需要手动关闭</span></span><br><span class="line">    fin.<span class="built_in">close</span>();</span><br><span class="line">    fout.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>仍以前面创建好的 in.txt 文件为例，执行此程序后，控制台不会输出任何数据，而是会在该项目的目录下生成一个 out.txt 文件，其中就存有该程序的执行结果：</p>
<p>C++<br>
<a href="http://c.biancheng.net/cplus/">http://c.biancheng.net/cplus/</a></p>
<h3 id="命名空间"><a class="header-anchor" href="#命名空间"></a>命名空间</h3>
<ul>
<li>
<p><code>cin</code> 和 <code>cout</code> 是 C++ 标准库内置<strong>对象</strong>而不是关键字</p>
</li>
<li>
<p>标准库的所有标识符都在命名空间 <code>std</code> 中</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using namespace std;  // 直接使用 cin、coutusing std::cin;  // 直接使用 cin、cout，而来自标准库的其他符号需要加上 std:: 前缀using std::cout; </span><br></pre></td></tr></table></figure>
<h3 id="格式化"><a class="header-anchor" href="#格式化"></a>格式化</h3>
<h4 id="cout格式化输出"><a class="header-anchor" href="#cout格式化输出"></a>cout格式化输出</h4>
<ul>
<li>需要引入头文件 <iomanip></li>
</ul>
<p>示例:</p>
<ul>
<li>
<p>输出不同进制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; showbase      &lt;&lt; hex &lt;&lt; 26 &lt;&lt; &#x27; &#x27;      &lt;&lt; oct &lt;&lt; 26;// 输出：0x1a 032</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>浮点数输出指定精度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; setprecision(5) &lt;&lt; 3.1415926535;// 输出：3.1416</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>输出指定宽度,右对齐</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; setw(6) &lt;&lt; right &lt;&lt; 10;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>输出年月日</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int year = 2021, month = 3, day = 26;cout &lt;&lt; year &lt;&lt; &#x27;-&#x27;      &lt;&lt; setw(2) &lt;&lt; setfill(&#x27;0&#x27;) &lt;&lt; month &lt;&lt; &#x27;-&#x27;      &lt;&lt; setw(2) &lt;&lt; setfill(&#x27;0&#x27;) &lt;&lt; day;// 输出：2021-03-26</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>资源和工具</p>
<p>•资源</p>
<p>•<a href="https://en.cppreference.com/w/">https://en.cppreference.com/w/</a></p>
<p>•<a href="https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5">https://zh.cppreference.com/w/首页</a></p>
<p>•工具</p>
<p>•<a href="http://cpp.sh/">http://cpp.sh/</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 命名空间</title>
    <url>/2022/09/26/C++%20%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>命名空间的定义</li>
<li>使用命名空间成员</li>
<li>类、命名空间与作用域</li>
<li>重载与命名空间</li>
</ul>
<span id="more"></span>
<h1 id="命名空间的定义"><a class="header-anchor" href="#命名空间的定义"></a>命名空间的定义</h1>
<ul>
<li>
<p><code>namespace</code> + 命名空间名字。随后是一系列由花括号后才的声明和定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">namespace xxx</span><br><span class="line">&#123;</span><br><span class="line">	class Sales+data &#123; ... &#125;;</span><br><span class="line">	namespace yyy&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; //无须分号</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>每个命名空间都是一个作用域</p>
<ul>
<li>命名空间中的名字可以被该空间内的其他成员直接访问，也可以被内嵌作用域中的任何单位访问</li>
<li>空间外的代码必须明确指出所用的名字属于哪个命名空间</li>
</ul>
</li>
<li>
<p>命名空间可以不连续</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">namespace nsp</span><br><span class="line">&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125; // 如果nsp已存在，这个定义会打开已存在的命名空间并为其添加新的声明</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>通常不把<code>#include</code>放在命名空间内部</p>
<ul>
<li>否则就会把头文件中所有的名字定义成该空间的成员</li>
</ul>
</li>
<li>
<p>全局命名空间是隐式的，作用域运算符可以作用于全局作用域的成员，但是没用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">::member_name</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>内联命名空间</strong>： 其中的名字可以被外层命名空间直接使用</p>
<ul>
<li><code>inline</code>必须写在命名空间第一次定义的地方，后续地方可以不写</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">namespace</span> FifthEd</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>未命名的命名空间（  unnamed namespace ）：其中的变量拥有静态生命周期。</p>
<ul>
<li>未命名的命名空间可以在给定文件内部连续，但不能跨文件。 如果一个头文件包含了未命名的命名空间，则该命名空间中定义的名字将在每个包含了该头文件的文件中对应不同实体</li>
<li>未命名的命名空间中的名字可直接使用，也不能对其使用作用域运算符</li>
<li>未命名的命名空间中的名字的作用域与该命名空间所在的作用域相同。这意味着如果未命名的命名空间定义在文件的最外层作用域中，则该命名空间中的名字一定要与全局作用域中的名字有区别</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i;</span><br><span class="line">namesapce&#123;</span><br><span class="line"><span class="type">int</span> i; <span class="comment">//二义性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>别名：<code>namespace primer = cpluscplus_primer;</code></p>
<ul>
<li>不能再命名空间名字还没定义时就定义别名</li>
</ul>
</li>
<li>
<p><code>using</code>声明：一次只引入命名空间的一个成员。作用域从其声明的地方开始，一直到<code>using</code>声明所在的作用域结束为止</p>
</li>
<li>
<p><code>using</code>指示：<code>using namespace xxx;</code>所有名字都可见</p>
</li>
<li>
<p>头文件如果在其顶层作用域中含有<code>using</code>指示和 <code>using</code>声明，则会将名字注入到所有包含了该文件的头文件中</p>
</li>
</ul>
<h1 id="使用命名空间成员"><a class="header-anchor" href="#使用命名空间成员"></a>使用命名空间成员</h1>
<h1 id="类、命名空间与作用域"><a class="header-anchor" href="#类、命名空间与作用域"></a>类、命名空间与作用域</h1>
<h1 id="重载与命名空间"><a class="header-anchor" href="#重载与命名空间"></a>重载与命名空间</h1>
]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 泛型算法</title>
    <url>/2022/09/26/C++%20%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>Outline：</p>
<ul>
<li>概述</li>
<li>泛型算法概览</li>
<li>定制操作</li>
<li>再探迭代器</li>
<li>泛型算法结构</li>
<li>特定容器算法</li>
</ul>
<span id="more"></span>
<h1 id="概述"><a class="header-anchor" href="#概述"></a>概述</h1>
<ul>
<li>头文件<code>&lt;algorithm&gt;</code>, <code>&lt;numeric&gt;</code></li>
<li>泛型算法： 对不同类型容器的通用算法</li>
<li>大多数情况下，泛型算法操作迭代器，而不是直接操作容器
<ul>
<li>泛型算法不依赖容器，但依赖于元素类型的操作，比如运算符重载</li>
</ul>
</li>
</ul>
<h1 id="算法概览"><a class="header-anchor" href="#算法概览"></a>算法概览</h1>
<h2 id="只读算法"><a class="header-anchor" href="#只读算法"></a>只读算法</h2>
<ul>
<li><code>find</code></li>
<li><code>accumulate</code>
<ul>
<li>必须有合适的<code>+</code>运算符
<ul>
<li><code>string sum = accumulate(v.cbegin(), v.cend(), string(&quot;&quot;));</code></li>
<li><code>string sum = accumulate(v.cbegin(), v.cend(), &quot;&quot;);</code>是错误的，因为<code>const char*</code>没有<code>+</code>运算符</li>
</ul>
</li>
</ul>
</li>
<li><code>equal</code>
<ul>
<li>必须有合适的<code>==</code>运算符</li>
</ul>
</li>
</ul>
<h2 id="写容器元素的算法"><a class="header-anchor" href="#写容器元素的算法"></a>写容器元素的算法</h2>
<ul>
<li>
<p><code>fill</code>接受一对迭代器表示范围</p>
<ul>
<li><code>fill(vec.cbegin(), vec.cend() + vec.size()/2, 10 );</code></li>
</ul>
</li>
<li>
<p>``fill_n( dest, n , val )` 接受一个迭代器来指出单独的目的位置</p>
</li>
<li>
<p><code>copy( begin, end, dest )</code></p>
</li>
<li>
<p><code>unique(begin, end)</code></p>
<ul>
<li>
<p>重排输入范围，使得不重复的元素出现在容器的开始部分</p>
</li>
<li>
<p>返回指向不重复区域之后一个位置的迭代器，</p>
<ul>
<li>
<p>若没有不重复区域，则返回尾后迭代器</p>
</li>
<li>
<p>与<code>erase</code>搭配使用，删除重复的元素</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按字典序排序words并删除重复单词</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">elimDups</span><span class="params">( vector&lt;string&gt; &amp;words )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>( words.<span class="built_in">begin</span>(), words.<span class="built_in">end</span>() );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> end_unique = <span class="built_in">unique</span>( words.<span class="built_in">begin</span>(),words.<span class="built_in">end</span>() );</span><br><span class="line">    words.<span class="built_in">erase</span>( end_unique ,  words.<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">istream_iterator&lt;string&gt; <span class="title">in_iter</span><span class="params">(cin)</span>, eof</span>;</span><br><span class="line">    ostream_iterator&lt;string&gt;<span class="built_in">out_iter</span>( cout, <span class="string">&quot; &quot;</span> );</span><br><span class="line">    vector&lt;string&gt;<span class="built_in">vec</span>(in_iter, eof);</span><br><span class="line">    <span class="built_in">elimDups</span>( vec );</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">copy</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), out_iter);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaa bbb ddd ccc aaa //输入</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaa bbb ccc ddd //输出</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>算法假定：</p>
<ul>
<li>很多算法操作两个序列， 它们接受接受第三个的迭代器来表示第二个序列的目标位置，这些算法都假定， 第二个序列至少与第一个序列一样长
<ul>
<li>如<code>equal</code>， <code>copy</code>
<ul>
<li>返回（递增后的）目的位置迭代器</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>一些算法接受一个单独的迭代器来指出一个单独的目的位置，这类算法不检查写操作，因此越界访问是<code>undefined behavior</code></p>
</li>
<li>
<p>比如，不能在空容器上调用<code>fill_n</code></p>
<ul>
<li>可以用<code> fill_n(back_inserter(),10,0)</code>,每次通过此迭代器赋值时，赋值运算符被重载为调用<code>push_back</code>,这就不用担心越界访问</li>
</ul>
</li>
</ul>
<h1 id="定制操作"><a class="header-anchor" href="#定制操作"></a>定制操作</h1>
<h2 id="谓词"><a class="header-anchor" href="#谓词"></a>谓词</h2>
<ul>
<li>定义： 返回值为<code>bool</code>的可调用对象
<ul>
<li>一元谓词： 只接受一个参数</li>
<li>二元谓词： 接受两个参数</li>
</ul>
</li>
<li>可调用对象：可以对其使用调用运算符的对象或表达式
<ul>
<li>函数和函数指针</li>
<li>重载了函数调用运算符的类</li>
<li>lambda表达式</li>
</ul>
</li>
<li>算法对接受的谓词有要求，为了绕过这个限制，可以使用lambda表达式
<ul>
<li><code>find_if()</code>  接受一个一元谓词，但有时该谓词函数需要不止一个参数</li>
</ul>
</li>
</ul>
<h2 id="lambda的应用"><a class="header-anchor" href="#lambda的应用"></a>lambda的应用</h2>
<ul>
<li><code>for_each(begin,end, callable)</code>：接受一个可调用对象</li>
</ul>
<h1 id="再探迭代器"><a class="header-anchor" href="#再探迭代器"></a>再探迭代器</h1>
<p>除了标准迭代器外，还有以下几种迭代器，头文件：<code>&lt;iterator&gt;</code></p>
<ul>
<li><code>insert iterator</code></li>
<li><code>stream iterator</code></li>
<li><code>reverse iterator</code></li>
<li><code>move iterator</code></li>
</ul>
<h2 id="Insert-Iterator"><a class="header-anchor" href="#Insert-Iterator"></a>Insert Iterator</h2>
<ul>
<li>迭代器适配器, 接受一个容器，生成一个迭代器</li>
<li>调用容器操作向给定容器的指定位置插入一个元素</li>
</ul>
<table>
<thead>
<tr>
<th>操作</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>it = t</code></td>
<td>在<code>it</code> 指定的当前位置插入<code>t</code>. 假定 <code>c</code>是<code>it</code>绑定的容器，依赖于插入迭代器的不同种类， 此赋值会分别调用 <code>push_back(t)</code>，<code>push_front(t)</code>，<code>insert(t,p)</code>， 其中<code>p</code>为传递给<code>inserter</code>的迭代器位置</td>
</tr>
<tr>
<td><code>*it</code>, <code>++it</code>, <code>it++</code></td>
<td>空操作。 都返回<code>it</code></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>迭代器适配器</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>back_insert_iterator</code></td>
<td>创建一个使用<code>push_back</code>的迭代器（这意味着不会发生越界访问，容器大小永远足够），前提是提供有 push_back() 成员方法的容器（包括 vector、deque 和 list）。</td>
</tr>
<tr>
<td><code>front_insert_iterator</code></td>
<td>创建一个使用<code>push_front</code>的迭代器，前提是提供有 push_front() 成员方法的容器（包括 list、deque 和 forward_list）。</td>
</tr>
<tr>
<td><code>insert_iterator</code></td>
<td>在容器的指定位置之前插入新元素，前提是该容器必须提供有 insert() 成员方法。</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>当调用<code>inserter(c, iter)</code>时，得到一个迭代器，接下来使用它时，会将元素插入到<code>iter</code>原来所指向的元素<strong>之前</strong>的位置， 即，如果<code>it</code>是由<code>inserter</code>生成的迭代器，则：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">*it = val;</span><br></pre></td></tr></table></figure>
<p>效果与下面的代码一样：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">it = c.<span class="built_in">inserter</span>(it,val);<span class="comment">//it指向新加入的元素</span></span><br><span class="line">++it; <span class="comment">//递增it使它指向原来的元素</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>front_inserter</code> 生成的迭代器与<code>inserter</code>生成的完全不同。当调用<code> front_inserter</code>时，元素总是插入到容器第一个元素之前：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt; lst = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">list&lt;<span class="type">int</span>&gt; lst2, lst3 ; <span class="comment">// empty list</span></span><br><span class="line"><span class="built_in">copy</span>(lst.<span class="built_in">cbegin</span>(), lst.<span class="built_in">cend</span>(), <span class="built_in">front_inserter</span>(lst2)); <span class="comment">//拷贝完成后， lst2包含4,3,2,1</span></span><br><span class="line"><span class="built_in">copy</span>(lst.<span class="built_in">cbegin</span>(), lst.<span class="built_in">cend</span>(), <span class="built_in">inserter</span>(lst3, lst3.<span class="built_in">begin</span>()));<span class="comment">//拷贝完成后， lst3包含1,2,3,4</span></span><br></pre></td></tr></table></figure>
<p>当调用<code>push_front(c)</code>时，得到一个插入迭代器，接下来会调用<code>push_front</code></p>
</li>
</ul>
<h2 id="iostream-Insrator"><a class="header-anchor" href="#iostream-Insrator"></a>iostream Insrator</h2>
<p><code>itstream</code>不是容器，但<code>STL</code>定义了可以用于这些IO类型对象的迭代器。<code>istream_iterator</code>读取输入流，<code> ostream_iterator</code>向一个输出流写数据。 这些迭代其将它们对应的流当作一个特定类型的元素序列来处理。 通过使用流迭代器，我们可以使用泛型算法从流对象读取数据以及向其写入数据。</p>
<ul>
<li>可以为任何定义了<code>&gt;&gt;</code>和<code>&lt;&lt;</code>运算符的类型创建<code>istream_iterator</code>和<code>ostream_iterator</code></li>
</ul>
<h3 id="istream-iterator操作"><a class="header-anchor" href="#istream-iterator操作"></a>istream_iterator操作</h3>
<p>当创建流迭代器时，必须指定迭代器将要读写的对象类型。 一个<code>istream_iterator</code>使用<code>&gt;&gt;</code>来读取流。 因此， <code>istream_iterator</code><strong>要读取的类型必须定义了输入运算符</strong>。</p>
<ul>
<li>当创建一个<code>istream_iterator</code>时， 我们可以将它绑定到一个流。 当然，我们还可以默认初始化迭代器，这样就创建了一个<strong>尾后迭代器</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line"><span class="function">istream_iterator&lt;<span class="type">int</span>&gt; <span class="title">in_iter</span><span class="params">(cin)</span></span>; <span class="comment">//从cin读取int</span></span><br><span class="line">istream_iterator&lt;<span class="type">int</span>&gt; eof; <span class="comment">//istream尾后迭代器</span></span><br><span class="line"><span class="keyword">while</span>( in_iter != eof )</span><br><span class="line">&#123;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(*in_iter++); <span class="comment">//先后缀递增，返回迭代器的旧值。 再对旧值接引用，得到从流读取的前一个值，即原来指向的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该程序可以改写为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">istream_iterator&lt;<span class="type">int</span>&gt; <span class="title">in_iter</span><span class="params">(cin)</span> ,  eof</span>; <span class="comment">//从cin读取int</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt;  <span class="title">vec</span><span class="params">(in_iter, eof)</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>可以用一对表示元素范围的迭代器构造<code>vec</code></li>
<li>这两个迭代器是<code>istream_iterator</code> , 这意味着元素范围是通过从关联的流中读取数据获得的， 这个构造函数从<code>cin</code>中读取数据，直至遇到文件尾或者遇到一个不是<code>int</code>的数据位置。</li>
</ul>
<h4 id="使用算法操作流迭代器"><a class="header-anchor" href="#使用算法操作流迭代器"></a>使用算法操作流迭代器</h4>
<p>算法使用迭代器，而流迭代器至少支持某些迭代器操作，因此至少可以用某些算法来操作流迭代器</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">istream_iterator&lt;<span class="type">int</span>&gt; <span class="title">in</span><span class="params">(cin)</span>, eof</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">accumulate</span>(in, eof, <span class="number">0</span>) &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<h4 id="istream-iterator允许使用懒惰求值"><a class="header-anchor" href="#istream-iterator允许使用懒惰求值"></a>istream_iterator允许使用懒惰求值</h4>
<ul>
<li>当<code>istream_iterator</code>绑定到一个流时，标准库并不保证迭代器立即从流中读取数据。 具体实现可以直到使用迭代器时才真正读取。</li>
</ul>
<h3 id="ostream-iterator"><a class="header-anchor" href="#ostream-iterator"></a>ostream_iterator</h3>
<p>可以对任何具有<code>&lt;&lt;</code>运算符的类型定义<code>ostream_iterator</code>.  当创建<code>ostream_iterator</code>时，我们可以提供（可选的）第二个参数。它是一个<strong>C风格字符串</strong>， 在输出每个元素后都会打印此字符串</p>
<ul>
<li>必须将<code>ostream_iterator</code>绑定带一个指定的流。 不允许空的或者表示尾后位置的<code>ostream_iterator</code></li>
</ul>
<table>
<thead>
<tr>
<th>操作</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ostream_iterator&lt;T&gt; out(os);</code></td>
<td><code>out</code> 将类型为 <code>T</code>的值写入输出流<code>os</code>中</td>
</tr>
<tr>
<td><code>ostream_iterator&lt;T&gt; out(os,d);</code></td>
<td><code>out</code> 将类型为 <code>T</code>的值写入输出流<code>os</code>中，每个值后面都输出一个<code>d</code>, <code>d</code>指向一个空字符结尾的字符数组</td>
</tr>
<tr>
<td><code>out = val</code></td>
<td>用<code>&lt;&lt;</code>运算符将<code>val</code> 写入到<code>out</code>所绑定的<code>ostream</code>中， <code>val</code>的类型必须与<code>out</code>可写的类型兼容（ 即为<code>T</code> ）</td>
</tr>
<tr>
<td><code>*out</code> ,<code>++out</code>, <code>out++</code></td>
<td>这些运算符存在，但不对<code>out</code>做任何改变。 均返回<code>out</code></td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>使用<code>ostream_iterator</code>输出值的序列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">istream_iterator&lt;<span class="type">int</span>&gt; <span class="title">in_iter</span><span class="params">(cin)</span>, eof</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">vec</span>(in_iter, eof);</span><br><span class="line">    </span><br><span class="line">    ostream_iterator&lt;<span class="type">int</span>&gt;<span class="built_in">out_iter</span>( cout, <span class="string">&quot; &quot;</span> );<span class="comment">//使用ostream_iterator输出值的序列</span></span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">auto</span> e: vec )</span><br><span class="line">    &#123;</span><br><span class="line">        *out_iter++ = e;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事实上，<code>*</code>和<code>++</code>不对<code>ostream_iterator</code>对象做任何事，因此可以写成：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="keyword">auto</span> e: vec )</span><br><span class="line">    &#123;</span><br><span class="line">        out_iter = e;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>但推荐前者，因为易于理解</p>
</li>
<li>
<p>当然，还可以通过<code>copy</code>来打印<code>vector</code>中的元素：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">copy</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), out_iter);</span><br></pre></td></tr></table></figure>
<h2 id=""><a class="header-anchor" href="#"></a></h2>
</li>
</ul>
<h2 id="reverse-iterator"><a class="header-anchor" href="#reverse-iterator"></a>reverse_iterator</h2>
<ul>
<li>
<p>与普通迭代器一样，只是是反向的</p>
<ul>
<li>除了<code>forward_list</code>之外，所有容器都支持反向迭代器</li>
</ul>
</li>
<li>
<p>可以让算法透明地向前或向后处理容器：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span>(vec.<span class="built_in">rbigin</span>(). vec.<span class="built_in">rend</span>());</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>除了流迭代器，其余迭代器都支持递减运算</p>
</li>
<li>
<p>反向迭代器的<code>base（）</code>可以返回对应的正向迭代器</p>
<ul>
<li>返回的正向迭代器的位置在原反向迭代器的后一位（按正序排列）</li>
</ul>
</li>
<li>
<p>反向迭代器的删除：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="keyword">auto</span>: rit: vec,<span class="built_in">begin</span>(); vec.<span class="built_in">end</span>();  )</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>( *tir == XX )</span><br><span class="line">		rit = <span class="keyword">decltype</span>(rit)( <span class="built_in">erase</span>( ++rit.<span class="built_in">base</span>() ) );</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        rit++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>erase()</code>只接受正向迭代器，因此要<code>base（）</code>转换</p>
</li>
<li>
<p>注意到<code>decltype(rit)</code>将正向迭代器转为反向迭代器时，会将位置往前移一位（与之前后移一位对应），避免了手动<code>++rit</code></p>
</li>
</ul>
</li>
<li>
<p>例子：打印最后一个逗号后的字符串</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">line</span><span class="params">(<span class="string">&quot;HELLO, MIKE!&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">auto</span> rcomma = <span class="built_in">find</span>( line.<span class="built_in">crbegin</span>(), line.<span class="built_in">crend</span>(), <span class="string">&#x27;,&#x27;</span> );</span><br><span class="line">cout &lt;&lt; <span class="built_in">string</span>( line.<span class="built_in">crbegin</span>(), rcomma ) &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!EKIM </span><br></pre></td></tr></table></figure>
<p>想要正确输出<code>MIKE!</code>，要使用正向迭代器：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cout &lt;&lt; <span class="built_in">string</span>(  rcomma.<span class="built_in">base</span>(), line.<span class="built_in">cend</span>() ) &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="泛型算法结构"><a class="header-anchor" href="#泛型算法结构"></a>泛型算法结构</h1>
<ul>
<li>
<p>任何算法都对其迭代器提供的操作有要求，这里将迭代器分为五类：</p>
<table>
<thead>
<tr>
<th>name</th>
<th>解释</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>输入迭代器</td>
<td>只读，不写；单遍扫描，只能递增</td>
<td><code>istream_iterator</code></td>
</tr>
<tr>
<td>输出迭代器</td>
<td>只写，不读; 单遍扫描，只能递增</td>
<td><code>ostream_iterator</code></td>
</tr>
<tr>
<td>前向迭代器</td>
<td>可读写，多遍扫描，只能递增</td>
<td><code>forward_list</code>上的迭代器</td>
</tr>
<tr>
<td>双向迭代器</td>
<td>可读写，多遍扫描，可递增递减</td>
<td>很多</td>
</tr>
<tr>
<td>随机访问迭代器</td>
<td>可读写，多遍扫描，支持全部迭代器运算</td>
<td><code>vector</code>,<code>string</code>, <code>deque</code> . etc</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h3 id="算法形参模式"><a class="header-anchor" href="#算法形参模式"></a>算法形参模式</h3>
<p>大多数算法具有如下参数规范之一：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alg(beg,end,other args);</span><br><span class="line">alg(beg,end,dest, other args);</span><br><span class="line">alg(beg,end,beg2,other args);</span><br><span class="line">alg(beg,end,beg2,end2,other args);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>dest</code>: 算法可以写入的目的位置的迭代器
<ul>
<li>算法假定：目标空间足够容纳写入的数据</li>
<li><code>dest</code>经常被绑定到一个插入迭代器或<code>ostream_iterator</code></li>
</ul>
</li>
</ul>
<h2 id="算法命名规范"><a class="header-anchor" href="#算法命名规范"></a>算法命名规范</h2>
<h3 id="一些算法使用重载形式传递一个谓词"><a class="header-anchor" href="#一些算法使用重载形式传递一个谓词"></a>一些算法使用重载形式传递一个谓词</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unique</span>(beg,end);</span><br><span class="line"><span class="built_in">unique</span>(beg,end,comp); <span class="comment">// 使用comp比较元素</span></span><br></pre></td></tr></table></figure>
<h3 id="if版本的算法"><a class="header-anchor" href="#if版本的算法"></a>_if版本的算法</h3>
<p>接受一个元素值的算法通常有一个不同名（因此非重载）的<code>_if</code>版本，它接受一个谓词来代替元素值：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">find</span>( beg, end, val );</span><br><span class="line"><span class="built_in">find_if</span>( beg, end, pred ); <span class="comment">//查找使得pred返回非零值的元素</span></span><br></pre></td></tr></table></figure>
<h3 id="区分拷贝元素和不拷贝的版本"><a class="header-anchor" href="#区分拷贝元素和不拷贝的版本"></a>区分拷贝元素和不拷贝的版本</h3>
<p>默认情况下，重排元素的算法将重排后的元素写回给定的输入序列中。 这些算法还提供另一个版本，将元素写入一个指定的输出目的位置， 这些算法都在名字后面附加一个<code>_copy</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">reverse</span>(beg,end);<span class="comment">// 翻转输入序列中元素的顺序</span></span><br><span class="line"><span class="built_in">reverse</span>(cbeg,cend,dest);<span class="comment">// 将元素按逆序拷贝到dest</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">replace</span>( lst.<span class="built_in">begin</span>(), lst.<span class="built_in">end</span>(), <span class="number">0</span>, <span class="number">42</span> );<span class="comment">//将序列中的所有0替换为42</span></span><br><span class="line"><span class="built_in">replace_copy</span>( lst.<span class="built_in">cbegin</span>(), lst.<span class="built_in">cend</span>(),<span class="built_in">back_inserter</span>(vec), <span class="number">0</span>, <span class="number">42</span> );<span class="comment">//lst自身不变，vec包含list的一份拷贝，只是其中所有0被替换为42</span></span><br></pre></td></tr></table></figure>
<p>一些算法同时提供<code>_copy</code>和<code>_if</code>版本，接受一个<code>dest</code>和一个谓词：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//从v1中删除奇数元素</span><br><span class="line">remove_if( v1.begin(), v1.end(),</span><br><span class="line">						[](int i)&#123;return i%2;&#125;);</span><br><span class="line">//将偶数元素拷贝到v2,v1不变						</span><br><span class="line">remove_copy_if( v1.begin(), v1.end(), back_inserter(v2),</span><br><span class="line">						[](int i)&#123;return i%2;&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="特定容器算法"><a class="header-anchor" href="#特定容器算法"></a>特定容器算法</h1>
<p><code>list</code>和<code>forward_list</code>定义了几个成员函数形式的算法，对于这类容器，应当优先使用使用成员函数版本的算法而不是通用算法</p>
]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++拷贝控制</title>
    <url>/2022/09/26/C++%E6%8B%B7%E8%B4%9D%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>对象移动</li>
<li>//TODO</li>
</ul>
<span id="more"></span>
<h1 id="对象移动"><a class="header-anchor" href="#对象移动"></a>对象移动</h1>
<h2 id="右值引用"><a class="header-anchor" href="#右值引用"></a>右值引用</h2>
<ul>
<li>
<p>左值引用绑定到返回<code>左值</code>的表达式</p>
<p>右值引用或<code>const</code>的左值引用绑定到返回<code>右值</code>的表达式</p>
</li>
<li>
<p>右值要么是字面常量，要么是临时对象。右值引用只能绑定到右值，所以可以接管所引用对象的资源</p>
<ul>
<li>所引用对象将要被销毁</li>
<li>该对象没有其它用户</li>
</ul>
</li>
<li>
<p>变量是<code>左值</code></p>
<ul>
<li>不能把<code>右值引用</code>直接绑定到一个变量,即使这个变量是右值引用类型</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> &amp;&amp;rr1 = <span class="number">42</span>;</span><br><span class="line"><span class="type">int</span> &amp;&amp;rr2 = rr1; <span class="comment">//错误: rr1是右值引用类型的变量,它是个左值</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>move()</code>将<code>左值</code>转换为<code>右值引用</code>.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> &amp;&amp; rr3 = std::<span class="built_in">move</span>(rr1);</span><br></pre></td></tr></table></figure>
<ul>
<li>可以销毁移后源对象,可以赋予其新值,但不能使用移后源对象的值</li>
<li>对<code>move</code>不提供<code>using</code>声明, 直接调用<code>std::move</code>而非<code>move</code></li>
<li>在头文件<code>&lt;utility&gt;</code>中</li>
</ul>
</li>
</ul>
<h2 id="移动构造函数和移动赋值运算符"><a class="header-anchor" href="#移动构造函数和移动赋值运算符"></a>移动构造函数和移动赋值运算符</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">X</span>(<span class="type">int</span> x)</span><br><span class="line">    &#123;</span><br><span class="line">        a = x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//委托构造</span></span><br><span class="line">    <span class="built_in">X</span>()</span><br><span class="line">    : <span class="built_in">x</span>(<span class="number">42</span>)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++结构化</title>
    <url>/2022/09/26/C++%E7%BB%93%E6%9E%84%E5%8C%96/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Preface</li>
<li>Prigramming
<ul>
<li>Data Type</li>
<li>Variable</li>
<li>...</li>
</ul>
</li>
</ul>
<p>ref: <em>C++ Primer</em>, <em>Effective C++</em>, <em>More Effective C++</em>, <em>Effective Modern C++</em></p>
<span id="more"></span>
<h1 id="Preface"><a class="header-anchor" href="#Preface"></a>Preface</h1>
<p><strong>G = ( VN , VT , P , Z )</strong></p>
<p>VN : <code>non-terminal</code>,非终结符号</p>
<p>VT:终结符号</p>
<p>P:规则</p>
<p>Z：target，目标</p>
<p>高级程序设计语言都是有理论保障的，否则不能保证得到正确结果。</p>
<h1 id="Programming"><a class="header-anchor" href="#Programming"></a>Programming</h1>
<p>看待程序设计的两个观点：</p>
<ul>
<li>The <strong>Science</strong> of programming: 从科学的角度。从这个角度看，许多bug是来自数据流而不是程序本身。</li>
<li>The <strong>Art</strong> of programming:从艺术的角度。程序设计要时刻注意所处的设计环境。</li>
</ul>
<p>Von-Neumann structure: 计算器、存储器、控制器、IO</p>
<p>Programming Paradigm</p>
<ul>
<li>Procedure:  最经典的就是 程序 = 数据结构 + 算法</li>
<li>Object-Oriented: OO是对人来说的， 依然在冯诺依曼架构里。</li>
<li>Functional: 典型的就是 f( g(x) )  =  g( f( x ) ),  在java程序中，如果函数有副作用，那这个式子是不成立的，而函数式就要确保函数没有副作用，这就能满足数学上的表达。这种没有副作用的场景是非常多的，比如说分布式计算就依赖于此</li>
<li>Logical: 规则 + 条件 → automatic proof</li>
</ul>
<h2 id="基本数据类型-built-in-datatype"><a class="header-anchor" href="#基本数据类型-built-in-datatype"></a>基本数据类型 built-in datatype</h2>
<ul>
<li>
<p><code>char</code>,<code>int</code> , <code>float</code> , <code>double</code></p>
</li>
<li>
<p>Modifiers: long , short , signed , unsigned</p>
<ul>
<li><code>char</code> 只能用<code>signed</code>,<code>unsigned</code>修饰</li>
<li><code>float</code>不能被修饰</li>
<li><code>double</code>只能用<code>long</code>修饰</li>
<li><code>int</code>可以用四种修饰符组合修饰</li>
</ul>
</li>
<li>
<p>省略表示</p>
</li>
<li>
<p>操作符<code>sizeof</code></p>
</li>
<li>
<p>ANSI C++: <code>wcchar_t</code>,<code>bool</code></p>
</li>
<li>
<p>typedef</p>
<ul>
<li>为<strong>已有</strong>的类型定义一个同义词：</li>
</ul>
<p><code>typedef int INT32;</code></p>
<p><code>typedef int A[8];</code></p>
</li>
<li>
<p><code>using</code>也是类型别名</p>
</li>
</ul>
<h3 id="类型别名"><a class="header-anchor" href="#类型别名"></a>类型别名</h3>
<ul>
<li>
<p>不是宏替换！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> *pstring;</span><br><span class="line"><span class="type">const</span> pstring cstr = <span class="literal">nullptr</span>; <span class="comment">//cstr是指向char的常量指针</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>pstring</code>的基本数据类型是<strong>指针</strong>，（ *<strong>不是声明符的一部分</strong> ），const修饰的是指针。 因此<code>cstr</code>是常量指针</li>
</ul>
</li>
</ul>
<h3 id="生命周期"><a class="header-anchor" href="#生命周期"></a>生命周期</h3>
<ul>
<li>自动局部变量：在函数调用时产生，在函数终止时消亡。可以显示使用<code>auto</code>（写不写都一样）来强调。 如果未显式初始化，自动局部变量会包含以前使用的<strong>垃圾值</strong></li>
<li>静态局部变量： 生命周期是整个程序的生命周期。</li>
<li>全局变量：生命周期同上。 如果未显式初始化， 全局变量和静态局部变量会被初始化为默认值</li>
</ul>
<h2 id="初始化方式"><a class="header-anchor" href="#初始化方式"></a>初始化方式</h2>
<ul>
<li>
<p>列表初始化： 当用于内置类型的变量时，如果使用列表初始化且初始值存在丢失信息的风险，则编译器将报错（ 即无法窄化转换 ）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">double</span> ld = <span class="number">3.141325242</span>;</span><br><span class="line"><span class="type">int</span> a&#123; ld &#125;, b = &#123; ld &#125;; <span class="comment">//编译错误</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">c</span><span class="params">(ld)</span>, d </span>= ld; <span class="comment">//只会warning</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="复合类型"><a class="header-anchor" href="#复合类型"></a>复合类型</h3>
<p>复合类型指基于其他类型定义的类型</p>
<ul>
<li>
<p>一条声明语句由一个<strong>基本数据类型</strong>和一个<strong>声明符列表</strong>（ <em>declarator</em> ）组成，每个声明符命名了一个变量并指定该变量为与基本数据类型有关的某个类型</p>
<ul>
<li>
<p><code>*</code>和<code>&amp;</code>都是类型修饰符,属于声明符的一部分,不会修饰本次定义的全部变量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p1,p2; <span class="comment">//p1是指针,p2是int</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>一条声明语句只能有一个基本类型</p>
</li>
<li>
<p>引用必须初始化，而且无法重新绑定</p>
</li>
</ul>
<h3 id="const限定符"><a class="header-anchor" href="#const限定符"></a>const限定符</h3>
<ul>
<li>
<p><code>const</code>对象一旦创建后其值就不能再改变,因此<code>const</code>对象<strong>必须初始化</strong></p>
</li>
<li>
<p><code>const</code>对象的常量特征仅仅在执行改变其值的时候才会起作用,因此<code>const</code>对象可以执行不改变内容的操作(如类型转换)</p>
</li>
<li>
<p>默认状态下,<code>const</code>对象仅在文件内有效.</p>
<ul>
<li>当多个文件内出现同名的<code>const</code>变量时, 实际等同于在不同文件中分别定义了独立的变量</li>
<li>如果要在多个文件中共享<code>const</code>对象,则必须在变量<strong>定义</strong>之前添加<code>extern</code>.  即: 无论声明和定义都添加<code>extern</code>,这样只需定义一次</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//file1.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">int</span> bufSize = <span class="built_in">fcn</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//file1.h</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">int</span> bufSize; <span class="comment">//这个声明使用了extern,指明 bufSize并非本文件独有,它的定义将在别处出现</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="初始化和对constd引用"><a class="header-anchor" href="#初始化和对constd引用"></a>初始化和对constd引用</h4>
<p>引用的类型必须与所引用对象的类型一致，但初始化常量引用时允许用任意表达式作初始值，只要该表达式的结果能转换成引用的类型即可。尤其，允许为一个常量引用绑定非常量的对象、字面值，甚至是个一般表达式</p>
<ul>
<li>
<p>原因：常量引用绑定到另一种类型上时，编译器会将代码改成绑定到临时量对象。而对于非常量引用，既然要使用非常量引用，就肯定想通过它改变绑定对象的值，可是引用绑定的是临时量，改变它是没有意义的，因此C++视这种行为为非法</p>
<ul>
<li>临时量：当编译器需要一个空间来暂存表达式的求职结果时临时创建的一个未命名的对象</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">    <span class="type">double</span> dval = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> &amp;ri = dval;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//编译器会将代码改成：</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> tmp = dval; <span class="comment">//tmp是临时量</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> &amp;r1 = tmp</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="顶层、底层const"><a class="header-anchor" href="#顶层、底层const"></a>顶层、底层const</h4>
<ul>
<li><strong>对常量的引用</strong>（reference to const）:引用一个常量</li>
<li>常量指针（const pointer）:指针本身是一个常量
<ul>
<li>意味着必须初始化</li>
</ul>
</li>
<li><strong>顶层</strong>（ top-level ）const: 表示任意的对象是一个常量，这对任何数据结构都适用
<ul>
<li>算术类型、类、指针等</li>
</ul>
</li>
<li><strong>底层</strong>（low-level） const: 与指针、引用等复合类型的基本类型（base type）部分有关
<ul>
<li>指针既可以是底层又可以是顶层</li>
</ul>
</li>
<li>当执行拷贝时，顶层const不受影响，而拷入和拷出对象必须有相同的底层const之歌，或者两个对象的数据类型必须能够转换</li>
</ul>
<h3 id="constexpr"><a class="header-anchor" href="#constexpr"></a>constexpr</h3>
<ul>
<li>
<p>常量表达式：值不会改变且在编译期间就能得到计算结果的表达式</p>
<ul>
<li>字面值、用常量表达式初始化的const对象...</li>
</ul>
</li>
<li>
<p>一个对象（or 表达式）是不是<code>constexpr</code>由其数据类型和初始值共同决定</p>
<ul>
<li>初始值为<code>constexpr</code>, 数据类型为<code>const</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> max_files = <span class="number">20</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> limit = max_files + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下两个不是</span></span><br><span class="line"><span class="type">int</span> staff_size = <span class="number">27</span>; <span class="comment">//数据类型不是const</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> sz = <span class="built_in">get_size</span>(); <span class="comment">// 值直到运行期才能获取</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>允许将变量声明为<code>constexpr</code> 以便由编译器检查其值是否为<code>constexpr</code>. 声明为<code>constexpr</code>的变量一定是一个常量，且必须用<code>constexpr</code>初始化</p>
</li>
<li>
<p>尽管引用和指针都能定义成<code>constexpr</code>，它们的初始值却受到严格限制。一个<code>constexpr</code>指针的初始值必须<code>nullptr</code> 或<code>0</code>， 或者是存储与某个固定地址的对象</p>
</li>
<li>
<p><code>constexpr</code>指针的<code>constexpr</code>只对指针有效，与指针所指对象无关。也就是说，<code>constexpr</code>把它所定义的对象置为了顶层<code>const</code></p>
</li>
</ul>
<h2 id="auto"><a class="header-anchor" href="#auto"></a>auto</h2>
<ul>
<li>
<p><code>auto</code>让编译器通过初始值来推断变量的类型，因此，<code>auto</code>定义的变量必须有初始值</p>
</li>
<li>
<p>使用引用实际上是使用引用的对象，因此引用类型被作为初始值时，真正参与初始化的是引用对象的值。此时<code>auto</code>的类型是<strong>引用对象的类型</strong></p>
</li>
<li>
<p><code>auto</code>忽略顶层<code>const</code>,  保留底层<code>const</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> ci=i, &amp;cr=ci;</span><br><span class="line"><span class="keyword">auto</span> b = ci; <span class="comment">//b是整数（ ci的顶层const被忽略 ）</span></span><br><span class="line"><span class="keyword">auto</span> c = cr; <span class="comment">//c是正是整数（ cr是ci的别名，后者是顶层const ）</span></span><br><span class="line"><span class="keyword">auto</span> d = &amp;i; <span class="comment">//d是整形指针</span></span><br><span class="line"><span class="keyword">auto</span> e = &amp;ci; <span class="comment">//e是底层const（ 对常数对象取地址是一种底层const ）</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>如果希望推断出类型是顶层<code>const</code>，需要明确指出</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="keyword">auto</span> f =ci</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="decltype"><a class="header-anchor" href="#decltype"></a>decltype</h2>
<ul>
<li>选择并返回操作数的数据类型，编译器只分析表达式得到类型，不实际计算其值</li>
<li>返回表达式的类型，包括顶层<code>const</code>和引用
<ul>
<li>引用从来都作为所指对象的同义词，只有在此处是例外</li>
</ul>
</li>
</ul>
<h2 id="表达式"><a class="header-anchor" href="#表达式"></a>表达式</h2>
<ul>
<li>
<p>组成</p>
<ul>
<li>operand</li>
<li>operator</li>
<li>others</li>
</ul>
</li>
<li>
<p>求值</p>
<ul>
<li>
<p>优先级</p>
</li>
<li>
<p>结合性</p>
</li>
<li>
<p>类型转换约定: 所有计算,规定的都是<em>同类型</em>计算. 对于混合运算,我们采取类型转换.有<strong>默认类型转换</strong>( Type Coercion ,  可以查文档) , 也可以强制地改变类型转换约定( Type Casting )( 这可以让你从宽的往窄的地方转, compiler会给一个<code>warning</code>,结果你自己负责 ). 我们也可以自己定义各种混合类型的计算.</p>
<ul>
<li>
<p>类型转换是按照计算顺序<strong>逐个</strong>进行的</p>
</li>
<li>
<p>类型转换精度: 浮点数不能精确表达整数,会有精度损失. 因此<code>int</code>默认转成<code>double</code>(一定能得到正确答案) 而不是<code>float</code></p>
</li>
</ul>
</li>
<li>
<p>求值次序</p>
<ul>
<li>
<p>取决于Compiler,不是嘴上说说的</p>
</li>
<li>
<p>token:具有独立意义的最小语法单位</p>
</li>
<li>
<p>代码由编译器翻译为机器码,而编译器中一个重要的功能就是<code>Optimization</code>,因此</p>
<p><code>x = 1 + 2 + 3;</code> 和 <code>a = 1 + 2 ; x = a + 3</code> 性能是一样的,所以<strong>没必要为了性能而写出很晦涩的表达式,其实性能都一样</strong></p>
</li>
</ul>
</li>
<li>
<p>overflow:</p>
<ul>
<li>加法: 判断结果是否为<code>0</code>或者<code>负数</code></li>
<li>减法: 看作加法 ,但是要注意补码特征的问题,如 <code>min</code> (<code>10000...</code>)取反加一之后还是 <code>min</code></li>
<li>乘法: 也要注意补码特征问题</li>
<li>除法: 不能除以0.   <code>-min / -1</code>有问题,别的都没问题</li>
</ul>
</li>
</ul>
</li>
<li>
<p>种类</p>
<p>注意表达式不是语句. <code>x=1</code>是表达式,加上<strong>分号</strong>之后<code>x=1;</code>才是<strong>表达式语</strong>句. <code>1</code>是表达式, <code>1;</code>是表达式语句</p>
<ul>
<li>
<p>算数</p>
</li>
<li>
<p>关系和逻辑</p>
</li>
<li>
<p>赋值</p>
</li>
<li>
<p>逗号</p>
</li>
<li>
<p>字位运算符</p>
</li>
</ul>
</li>
<li>
<p>操作符可重载</p>
<p>​	增加语言灵活性.</p>
<p>​	<em>不是所有操作符都能重载,比如逗号</em></p>
<p>​	重载后的操作符不能与原来语义相违背,比如<code>&amp;&amp;</code>重载后会失去<code>短路效果</code>,所以一般不重载<code>&amp;&amp;</code></p>
</li>
<li>
<p>赋值表达式</p>
<p><em>左值 = 右值表达式</em></p>
<ul>
<li>左值: 可以出现在赋值表达式左部的<em>表达式</em>,具有存放数据的<strong>确定</strong>地址</li>
<li>类型不同时,先计算右值表达式的值,再转换为左值类型,如<code>double d = 5/2</code>,右边会先计算出<code>2</code>,然后转为<code>2.0</code></li>
</ul>
</li>
<li>
<p>算术表达式</p>
<ul>
<li>增量和简练操作符
<ul>
<li>前增量(前减量) <code>++a </code>     <em>// 前增量的结果是左值</em></li>
<li>后增量(后减量) <code>--a</code></li>
<li>提高编译后的执行效率</li>
</ul>
</li>
</ul>
</li>
<li>
<p>条件运算符表达式</p>
<ul>
<li>
<p><code>&lt;exp1&gt;?&lt;exp2&gt;:&lt;exp3&gt;</code></p>
</li>
<li>
<p>唯一的三目运算符</p>
</li>
<li>
<p>只计算一个分量</p>
</li>
<li>
<p>如果<exp2>和<exp2>的值类型相同,且均为左值,则该条件运算符表达式为左值表达式</p>
</li>
<li>
<p>可嵌套</p>
<ul>
<li>sign(x) <code>x &gt; 0 ? 1 : x==0? 0 : -1</code></li>
<li>就近原则</li>
</ul>
</li>
</ul>
</li>
<li>
<p>逗号表达式</p>
<ul>
<li>
<p><code>&lt;exp1&gt;,&lt;exp2&gt;,&lt;exp3&gt;...&lt;expn&gt;</code></p>
</li>
<li>
<p><code>&lt;expn&gt;</code>的值作为该逗号表达式的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a,b,c;</span><br><span class="line">	d = ( a = 1 , b = a + 2 , c = b + 3);</span><br><span class="line">cout &lt;&lt; d &lt;&lt; endl; // 6</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>如<code>&lt;expn&gt;</code>为左值,则该逗号表达式为左值表达式</p>
</li>
</ul>
</li>
<li>
<p>字位运算符表达式</p>
<ul>
<li>
<p>对整型数二进制位(bit)的操作,将整型数看作二进制序列</p>
</li>
<li>
<p>与同一个对象异或两次,结果不变( 结合性 )</p>
</li>
</ul>
</li>
<li>
<p>移位运算符表达式</p>
</li>
</ul>
<h2 id="语句"><a class="header-anchor" href="#语句"></a>语句</h2>
<ul>
<li>
<p>表达式语句</p>
</li>
<li>
<p>IO语句</p>
<ul>
<li><code>cin</code>,<code>cout</code></li>
<li><code>&gt;&gt;</code>,<code>&lt;&lt;</code>可重载 .   现在它们变成操作符了. <code>cin&lt;&lt;x</code>是一个表达式</li>
</ul>
</li>
<li>
<p>控制流语句</p>
<ul>
<li>
<p>顺序,选择,重复</p>
</li>
<li>
<p>switch是顺序执行的，所以写成<code>case  1: ... ; case 2:... ;</code>并没有什么意义,因为<code>1</code>和<code>2</code>只是个标记,编译器看不懂, 要是写成<code>case 2:... ;case  1: ... </code>,就会先执行<code>2</code>,再执行<code>1</code>.</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>switch的实现与优化: Table_Driven.</p>
<blockquote>
<p>实现一个哈希表(用枚举),这是一个指针数组。实际上value（就是每条case的地址）是不连续的。但是数组中顺序地存了指向它们的指针，所以逻辑上是连续的。比如两条case的代码地址分别是<code>08 04 87 f5</code> <code>08 04 87 f5</code>,这是不连续的,设数组起始地址为<code>08 04 89 e4</code>,它们分别是前二个元素,那么数组元素的地址分别为<code>08 04 89 e4</code> <code>08 04 89 e8</code>,我们访问数组的元素,就能连续地间接访问case的代码.</p>
</blockquote>
</li>
<li>
<p>表驱动的思想在很多地方都有.</p>
</li>
<li>
<p><code>Framework</code>,在C++中是用<code>宏</code>完成的(因为这属于编辑<code>edit</code>的工作),后来为了简便,用IDE封装了操作</p>
</li>
<li>
<p>函数也是用表驱动的,每个函数都在表里面.注意实现取决于编译器.C的编译器不支持重载,所以<code>void f(int)</code>和<code>void f()</code>在表中是一个东西,没法作出区分; C++编译器生成的表是把函数签名(而非单纯的函数名)作为表项的(要经过一系列转换),所以上述两个函数是两个不同的表项(签名不同),也就是支持重载.</p>
</li>
<li>
<p>程序中的指令放在<code>EIP</code>里. 这是有意义的,因为无论是代码还是数据还是堆区栈区其实都是二进制的,都可以被机器执行,有些恶意代码可以跳转到栈区去,让程序崩溃.因此用了<code>EIP</code>,不在其中的指令不能执行,后来有了偷代码的攻击,于是我们把<code>R+X</code>也封了,这样小偷就不知道要偷那里的代码.</p>
<h2 id="函数"><a class="header-anchor" href="#函数"></a>函数</h2>
</li>
<li>
<p>原则</p>
<ul>
<li>定义不允许嵌套</li>
<li>先定义后使用</li>
</ul>
</li>
<li>
<p>函数的执行</p>
<ul>
<li>建立被调用函数的栈空间</li>
<li>参数传递
<ul>
<li>值传递( call by value )</li>
<li>引用传递( call by reference): reference是别名,所以改变宽宽当然会改变陆昱宽</li>
</ul>
</li>
<li>保存调用函数的运行状态</li>
<li>将控制转交被调函数</li>
</ul>
</li>
</ul>
<p>所有局部变量一定要初始化才能用,因为栈区不会清零</p>
<ul>
<li>
<p>函数原型</p>
<ul>
<li>
<p>遵循先定义后使用原则</p>
</li>
<li>
<p>自由安排函数定义位置</p>
</li>
<li>
<p>语句</p>
</li>
<li>
<p>只需参数类型,无需参数名称</p>
</li>
<li>
<p>编译器检查</p>
</li>
</ul>
</li>
<li>
<p>函数-重载</p>
<ul>
<li>原则
<ul>
<li>名同,参数不同(个数,类型,顺序)</li>
<li>返回值类型不作为区别重载函数的依据</li>
</ul>
</li>
<li>匹配原则
<ul>
<li>严格</li>
<li>内部转换</li>
<li>用户定义的转换 <code>void f(long); void f(double)</code></li>
<li>当产生问题的时候,有可能你的程序逻辑没问题,而是你的相互使用的库有问题</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="String"><a class="header-anchor" href="#String"></a>String</h2>
<h3 id="String的相关操作-0-IO"><a class="header-anchor" href="#String的相关操作-0-IO"></a>String的相关操作(0) --- IO</h3>
<ul>
<li>
<p>读入，以空白字符或 EOF 作为结束标志</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cin &gt;&gt; s;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>读入一行，以<strong>换行符</strong>或<strong>指定的字符</strong>作为结束标志，<strong>丢弃定界符（delimiter）</strong></p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getline</span>(cin, s);       <span class="comment">// 以换行符为结束标志getline(cin, s, &#x27;,&#x27;);  // 以 , 为结束标志</span></span><br></pre></td></tr></table></figure>
<h3 id="String的相关操作-1-长度"><a class="header-anchor" href="#String的相关操作-1-长度"></a>String的相关操作(1) --- 长度:</h3>
<ul>
<li>
<p>str.size() 和 str.length()，含义相同</p>
</li>
<li>
<p>str.capacity() 表示分配的存储空间的大小</p>
</li>
<li>
<p>str.empty() 判断 str 是否为空字符串 &quot;&quot;</p>
</li>
</ul>
<h3 id="string-的相关操作-2-–-获取-char"><a class="header-anchor" href="#string-的相关操作-2-–-获取-char"></a>string 的相关操作 (2) – 获取 char</h3>
<ul>
<li>
<p><code>str[index]</code></p>
<ul>
<li>
<p>0 ≤ index ≤ str.length()</p>
</li>
<li>
<p>index == str.length() 返回末尾的 \0，不应该修改！</p>
</li>
</ul>
</li>
<li>
<p><code>str.at(int index)</code></p>
<ul>
<li>0 ≤ index ＜ str.length()</li>
</ul>
</li>
<li>
<p><code>str.front()</code></p>
</li>
<li>
<p><code>str.back()</code></p>
</li>
</ul>
<h3 id="string-的相关操作-3-–-连接"><a class="header-anchor" href="#string-的相关操作-3-–-连接"></a>string 的相关操作 (3) – 连接</h3>
<ul>
<li>
<p><code>s1 = s2 + s3</code></p>
</li>
<li>
<p><code>s1.append(s2)</code> 或 <code>s1 += s2</code></p>
</li>
</ul>
<h3 id="string-的相关操作-4-–-其他"><a class="header-anchor" href="#string-的相关操作-4-–-其他"></a>string 的相关操作 (4) – 其他</h3>
<ul>
<li>
<p>查找</p>
<ul>
<li>
<p>str.find(&quot;ab&quot;); // 从前向后的第一个 ab</p>
</li>
<li>
<p>str.find(&quot;ab&quot;, 2); // 从下标 2 开始的第一个 ab</p>
</li>
<li>
<p>str.rfind(&quot;ab&quot;); // 从后向前的第一个 ab</p>
</li>
<li>
<p>str.rfind(&quot;ab&quot;, 2); // 从下标 2 开始从后向前第一次找到 ab</p>
</li>
</ul>
</li>
</ul>
<p>如果找不到，会返回 <code>string::npos</code></p>
<h3 id="string-的相关操作-5-–-与数值互转"><a class="header-anchor" href="#string-的相关操作-5-–-与数值互转"></a>string 的相关操作 (5) – 与数值互转</h3>
<ul>
<li>
<p>子串</p>
<ul>
<li><code>string s2 = s.substr(pos, n); </code>// <strong>与</strong> <strong>Java</strong> **不同：**从 pos 开始取 n 个字符</li>
</ul>
</li>
<li>
<p>比较</p>
<ul>
<li>
<p>&lt;、&lt;=、&gt;、&gt;=、==、!=</p>
</li>
<li>
<p><code>s1.compare(s2)</code> 相等时返回 0；s1 &lt; s2 时返回 -1；s1 &gt; s2 时返回 1</p>
</li>
</ul>
</li>
<li>
<p>字符串转换为 int</p>
<ul>
<li>
<p>int v = std::stoi(str);</p>
</li>
<li>
<p>字符串转换为 long、long long、float 和 double 分别为 stol、stoll、stof 和 stod</p>
</li>
<li>
<pre><code class="language-c++">#include &lt;iostream&gt;
#include &lt;sstream&gt;

int main()
&#123;
    std::string str = &quot;668&quot;;
    int num = 0;

    std::istringstream ss(str);
    ss &gt;&gt; num;

    std::cout &lt;&lt; num;
    return 0;
&#125;

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* </span><br><span class="line"></span><br><span class="line">* ```C++</span><br><span class="line">  #include &lt;iostream&gt;</span><br><span class="line">  #include &lt;stdlib.h&gt;</span><br><span class="line">  </span><br><span class="line">  int main()</span><br><span class="line">  &#123;</span><br><span class="line">      std::string str = &quot;668&quot;;</span><br><span class="line">      std::cout &lt;&lt; atoi(str.c_str());</span><br><span class="line">      return 0;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>





</code></pre>
</li>
</ul>
</li>
<li>
<p>数值转换为字符串</p>
<ul>
<li>string s = std::to_string(42);</li>
</ul>
</li>
</ul>
<h3 id="string-的相关操作-6-–-split"><a class="header-anchor" href="#string-的相关操作-6-–-split"></a>string 的相关操作 (6) – split</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::vector&lt;std::string&gt; <span class="title">split</span><span class="params">(<span class="type">const</span> std::string &amp;s,                                <span class="type">const</span> <span class="type">char</span> delimiter)</span> </span>&#123;    std::vector&lt;std::string&gt; ans;    <span class="function">std::istringstream <span class="title">iss</span><span class="params">(s)</span></span>;    std::string token;    <span class="keyword">while</span> (std::<span class="built_in">getline</span>(iss, token, delimiter)) &#123;        ans.<span class="built_in">push_back</span>(token);    &#125;    <span class="keyword">return</span> ans;&#125;</span><br></pre></td></tr></table></figure>
<h4 id=""><a class="header-anchor" href="#"></a></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">std::vector&lt;std::string&gt; <span class="title">split</span><span class="params">(<span class="type">const</span> std::string &amp;s, <span class="type">const</span> std::string &amp;delim)</span> </span>&#123;    std::vector&lt;std::string&gt; ans;    <span class="type">int</span> begin = <span class="number">0</span>, end = std::string::npos;    <span class="keyword">do</span> &#123;        <span class="type">int</span> end = s.<span class="built_in">find</span>(delim, begin);        <span class="keyword">if</span> (end != std::string::npos) &#123;            ans.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(begin));        &#125; <span class="keyword">else</span> &#123;            ans.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(begin, end - begin));            begin = end + delim.<span class="built_in">length</span>();        &#125;    &#125; <span class="keyword">while</span> (end != std::string::pos);    <span class="keyword">return</span> ans;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意!</strong></p>
<ul>
<li>跟 Java 不同，C++ 的 string <strong>几乎</strong>是一个<strong>字节容器</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string s = &quot;中国&quot;;cout &lt;&lt; s.length() &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<p>输出是4,因为里面是四个字节</p>
<ul>
<li>
<p><code>'\0'</code>会特殊对待</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> bytes[] = &#123;     <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;\0’,     &#x27;</span>d<span class="number">&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>&#125;;<span class="function">string <span class="title">s</span><span class="params">(bytes, <span class="number">0</span>, <span class="number">7</span>)</span></span>;cout &lt;&lt; s.<span class="built_in">length</span>() &lt;&lt; endl;cout &lt;&lt; s &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<p>长度是3,输出是<code>abc</code>,也就是遇到<code>\0</code>会截断</p>
</li>
</ul>
<h3 id="-2"><a class="header-anchor" href="#-2"></a></h3>
<h2 id="程序组织"><a class="header-anchor" href="#程序组织"></a>程序组织</h2>
<ul>
<li>逻辑结构</li>
<li>物理结构
<ul>
<li>多个源文件组成</li>
<li>main唯一</li>
</ul>
</li>
<li>工程文件
<ul>
<li>外部文件</li>
<li>外部变量</li>
</ul>
</li>
</ul>
<h3 id="namespace"><a class="header-anchor" href="#namespace"></a>namespace</h3>
<h3 id="编译预处理"><a class="header-anchor" href="#编译预处理"></a>编译预处理</h3>
<ul>
<li>与作用域, 类型, 接口等概念格格不入
<ul>
<li>潜伏于环境</li>
<li>穿透于作用域</li>
</ul>
</li>
</ul>
<h4 id="include"><a class="header-anchor" href="#include"></a>#include</h4>
<ul>
<li>make interface definitions available</li>
<li>compose source text</li>
</ul>
<h4 id="define"><a class="header-anchor" href="#define"></a>#define</h4>
<ul>
<li>Symbolic constants    <code>const</code></li>
<li>Open subroutines <code>inline</code></li>
<li>Generic subroutines  <code>template</code> //这三种复用都是源代码层次的，即 可以看到细节的</li>
<li>Generic &quot;types&quot;  <code>template</code></li>
<li>Renaming  <code>namespace</code>   // 以上五点，C++中已经有了替换的方法，而下面三点，C++中还没有合适的替代方法：</li>
<li>String concatenation</li>
<li>Special purpose syntax</li>
<li>General macro processing</li>
</ul>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">define</span> MAX(x,y) x &gt;= y ? x : y <span class="comment">//不加括号的后果12 * MAX(2,3)    12 * 2 &gt;= 3 ? 2 : 3# define MIN(x,y) ((x) &lt; (y) ? (x) : ( y));//这样可以实现泛型，前提是类类里面重载了“&lt;”运算符</span></span></span><br></pre></td></tr></table></figure>
<p>缺点：</p>
<ul>
<li>重复计算，因为宏不是函数</li>
<li>没有类型检查，太宽松了</li>
</ul>
<p>注意：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ADD(x,y) &#123;x+y;&#125;int x=0,y=1;<span class="keyword">if</span>( x == 0 )    ADD(x,y);  <span class="comment">//会报错,因为花括号后面有分号else    cout &lt;&lt; &quot;HI&quot;;//但如果写成:#define ADD(x,y) x+y;cout &lt;&lt; ADD(x+y) &lt;&lt; endl; //会报错//只能写成:#define ADD(x,y)  do&#123; x + y ; &#125; while(0);</span></span></span><br></pre></td></tr></table></figure>
<h4 id="选择性编译"><a class="header-anchor" href="#选择性编译"></a>选择性编译</h4>
<ul>
<li>version  control</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">ifndef</span> MY_PRINT_VERSION	#<span class="keyword">define</span> MY_PRINT_VERSION 1# <span class="keyword">endif</span># <span class="keyword">if</span> MY_PRINTF_VERSION == 1void printf( char *str )&#123; ... &#125;#<span class="keyword">elif</span> MY_PRINTF_VERSION == 2int printf( char *fmt , char *args,... )&#123; ... &#125;#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>Commenting out code</p>
<h4 id="pragma"><a class="header-anchor" href="#pragma"></a>#pragma</h4>
</li>
<li>
<p>Control of layout</p>
</li>
<li>
<p>Informing the compiler</p>
</li>
</ul>
<h2 id="数组"><a class="header-anchor" href="#数组"></a>数组</h2>
<ul>
<li>
<p>特征</p>
<ul>
<li>相同类型</li>
<li>连续存储</li>
</ul>
</li>
<li>
<p>一维数组</p>
<ul>
<li>
<p>类型定义</p>
</li>
<li>
<p>函数接口</p>
<ul>
<li>
<p>元素个数须通过参数<strong>显式</strong>给出, 不能通过<code>sizeof</code>取得.</p>
<p>传入的<code>len</code>不能保证真的是数组长度,C++是允许数组越界的</p>
<ul>
<li>字符串</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span>  <span class="title">f</span><span class="params">( <span class="type">int</span> a[<span class="number">16</span>] )</span></span>&#123;	<span class="type">int</span> len = <span class="built_in">sizeof</span>(a);  <span class="comment">//这是错误的&#125;//必须写成:void  f( int a[16] , int size)			</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> s1[] = <span class="string">&quot;abc&quot;</span>; <span class="comment">// == char s1 = &#123;&#x27;a&#x27;,&#x27;b&#x27;, &#x27;c&#x27;,&#x27;\0&#x27;&#125;char s2[] = &#123;&#x27;a&#x27;,&#x27;b&#x27;, &#x27;c&#x27; &#125;;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//找到arr中的第一个负数#include&lt;iterator&gt;int arr[] = &#123;0,1,2,3,4,5.-1&#125;;int *pbeg = begin(arr), *pend = end(arr);while( pbeg!= pend &amp;&amp; *pend  &gt;= 0)	++pbeg;</span></span><br></pre></td></tr></table></figure>
<h3 id="删除所有数组所有元素"><a class="header-anchor" href="#删除所有数组所有元素"></a>删除所有数组所有元素</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int remove(int * arr, int target, int n)&#123;	int front = 0, back = 0, targetCnt = 0;	for(; back &lt; n; back++)&#123;		if(arr[back] == target)&#123;			targetCnt++;		&#125;else&#123;			arr[front] = arr[back];			front++;		&#125;	&#125;	return targetCnt;&#125;int main(int argc, char const *argv[])&#123;	int a1[] = &#123;1, 2, 3, 4, 0, 6, 6, 6, 7, 8, 6, 4, 5&#125;;	int l1 = 1;	l1 -= remove(a1, 6, l1);	for(int i = 0; i &lt; l1; i++)&#123;		std::cout &lt;&lt; a1[i] &lt;&lt; &quot; &quot;;	&#125;	std::cout &lt;&lt; std::endl;	system(&quot;pause&quot;);	return 0;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多维数组"><a class="header-anchor" href="#多维数组"></a>多维数组</h3>
<ul>
<li>定义</li>
<li>存储组织,C++中一定要知道数组的<code>layout</code>(内存布局). C++中的多维数组只是一维数组的不断迭代,和java中的容器等是不一样的</li>
<li>参数传递
<ul>
<li>缺省第一维( C++里没有<code>ragged array</code>)</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> arr[][<span class="number">3</span>] = &#123;&#123;<span class="number">1</span>&#125; , &#123;<span class="number">2</span>,<span class="number">3</span>&#125; , &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125; &#125;cout &lt;&lt; arr[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; endl; <span class="comment">//java中这会报错,但是C++中这是允许的,会得到一个未定义的值. 1的后面是两个未定义的值,再往后是2,3和一个未定义的值,然后是4,5,6. 也就是说真的有3 * 3 = 9 个元素. 这和java中的ragged array不同.</span></span><br></pre></td></tr></table></figure>
<ul>
<li>升/降维处理</li>
</ul>
<h2 id="Struct"><a class="header-anchor" href="#Struct"></a>Struct</h2>
<ul>
<li>赋值 --- 同类型</li>
<li>alignment. 契合硬件,提升效率</li>
<li>参数传递</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span>&#123;    <span class="type">char</span> b; <span class="comment">//1    int a; //4    short c; //2&#125;;cout &lt;&lt; sizeof(B) &lt;&lt; endl; //答案是12,因为会对齐</span></span><br></pre></td></tr></table></figure>
<h2 id="union"><a class="header-anchor" href="#union"></a>union</h2>
<ul>
<li>
<p>共享存储空间</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">C</span>&#123;	<span class="type">char</span> b; <span class="comment">//1	int a; //4	short c; //2&#125;;cout &lt;&lt; sizeof(C) &lt;&lt; endl; //答案是4</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="title class_">Matrix</span>&#123;	<span class="keyword">struct</span> 	&#123;		<span class="type">double</span> a11, a12, a13;		<span class="type">double</span> a21, a22, a23;		<span class="type">double</span> a31, a32, a33;	&#125;;	<span class="type">double</span> _element[<span class="number">3</span>][<span class="number">3</span>];&#125;;	Matrix m;	<span class="type">int</span> i, j;	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)			m._element[i][j] = (i + <span class="number">1</span>) * (j + <span class="number">1</span>);	m.a11 = <span class="number">0</span>;	m.a22 = <span class="number">0</span>;	m.a33 = <span class="number">0</span>;	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)			cout &lt;&lt; m._element[i][j] &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="指针"><a class="header-anchor" href="#指针"></a>指针</h2>
<ul>
<li>管理地址信息</li>
<li>调用代码</li>
</ul>
<h3 id="指针定义与基本操作"><a class="header-anchor" href="#指针定义与基本操作"></a>指针定义与基本操作</h3>
<ul>
<li>
<p>用<code>typedef</code> 定义一个指针类型</p>
<p><code>typedef int* Pointer;</code></p>
<p><code>pointer p,q</code> // p, q均为指针变量</p>
<p>注意: 指针其实不是一个类型,所以<code> int *p,q</code>中, q不是指针</p>
</li>
<li>
<p>赋值</p>
<p><code>int *p = (int*) 0xKN231232</code>  现在没人用这个了</p>
</li>
<li>
<p>操作符</p>
<p><code>&amp;</code>取地址</p>
<p><code>*</code>间接取内容</p>
<p>注意: C++中, <code>NULL</code>是<code>0</code>;</p>
<ul>
<li>
<p>ANSI C: #define NULL( (void*) 0 )   (用 ((void*)0)来置换NULL,这种方式有很大漏洞 )</p>
<p>C++: #define NULL 0 ( 即用 0 去置换NULL )</p>
</li>
</ul>
<p><em>空指针并不一定用与整数0同样的二进制模式表示,可由实现者采用任何选定的方式表示</em></p>
<ul>
<li>现在空指针都用<code>nullptr</code>赋值</li>
</ul>
</li>
<li>
<p>同类型指针比较</p>
</li>
<li>
<p>输出</p>
<ul>
<li>
<p>特例: 原因是操作符重载</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *p = <span class="string">&quot;ABCD&quot;</span>;cout &lt;&lt; p; <span class="comment">//p指向的字符串,即&quot;ABCD&quot;cout &lt;&lt; *p; // p指向的字符,即&#x27;A&#x27;//对于int*之类的就不会这样</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>例: 将某块内存清零</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">memset</span><span class="params">( <span class="type">void</span> *pointer, <span class="type">unsigned</span> size )</span></span>&#123;    <span class="type">char</span> *p = (<span class="type">char</span>*) pointer;<span class="comment">//必须要类型转换,不然p是void的指针,无法进行操作    for( int k = 0 ; k &lt; size ; k++ )        *p++ = 0;     &#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>常量指针与指针常量</p>
<ul>
<li>
<p><strong>常量指针</strong>, 即 指针指向一个常量. ( 也可以指向一个变量, 但指针不知道.所以常量指针就是一个<strong>只读的指针</strong>,可以<strong>消除函数副作用</strong> )</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span>  <span class="type">int</span> c = <span class="number">0</span>;<span class="type">const</span> <span class="type">int</span> *cp;<span class="type">int</span> y = <span class="number">1</span>;<span class="type">int</span> *q;cp = &amp;c;q = &amp;y;*cp = <span class="number">1</span>; <span class="comment">// 不行,指针还没有绑定*q = 2;cp = &amp;y; //可以,常量指针可以指向一个变量,这样的用法非常常见,不能通过指针来修改y,只能用y来修改yq = &amp;c;// 不可以. 变量指针不能指向一个常量//如果硬要让变量指针指向常量,可以用 const_cast&lt;int&gt;,这种方法不太好://假设你有一个 const A a = 8; 你需要把a传入一个 // void fun( A *x) 中,如果你确保fun不会更改a的话,那可以在传参的时候写 fun( const_cast&lt;A *&gt;&amp;a ).//这是在函数给定的情况下的被逼无耐之举, 有条件的话,应该把fun写成 void fun( const A *x)// 没事干不要用 const_cast&lt;&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><strong>常量替换</strong>在编译期间发生,类似于宏替换.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">5</span>;<span class="type">int</span> *p = (<span class="type">int</span> *)&amp;a; <span class="comment">//让p指向与a相同的内存空间cout &lt;&lt; &amp;a &lt;&lt; &quot;, &quot; &lt;&lt; p &lt;&lt; endl;*p = 10; // 照说a的值也应该改变，实际却没有,这就是常量折叠.cout &lt;&lt; a &lt;&lt; &quot;, &quot; &lt;&lt; *p &lt;&lt; endl;// 这个&quot;常量折叠&quot;就是在编译器进行语法分析的时候，将常量表达式计算求值，并用求得的值来替换表达式，放入常量表。可以算作一种编译优化。// 我只是改了这个地址内容,但是a还是5,// 因为编译器在优化的过程中，会把碰见的const全部以内容替换掉// （跟宏似的: #define PI 3.1415,用到PI时就用.1415代替），// 这个出现在预编译阶段；但是在运行阶段，它的内存里存的东西确实改变了!!!// 简单来说就是, 常量a的内存空间里面的内容在运行期间会被更改为10, 但是编译器在预编译阶段,已经用a的值(这个时候a的值还是5) 来替换a这个名字,类似于宏替换. 所以a这个名字的值永远是5,但它代表的内存空间的值可能被改变.输出是:0x61fe14, 0x61fe145, 10</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>常量指针</strong>,就是说指针本身是一个常量, 因此必须在定义的时候初始化.</p>
<p><code>&lt;类型&gt; * const &lt;指针变量&gt;</code></p>
</li>
<li>
<p>数组的最后一个元素的后一个元素的指针是空指针<code>nullptr</code></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="指针数组"><a class="header-anchor" href="#指针数组"></a>指针数组</h3>
<ul>
<li>
<p>main函数:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( <span class="type">int</span> argc, <span class="type">char</span>* argv[], <span class="type">char</span>* env[] )</span></span>&#123;    cout &lt;&lt; argc &lt;&lt; endl;    <span class="keyword">for</span>( <span class="type">int</span> i=<span class="number">0</span>; i != argc ; i++ )    &#123;        cout &lt;&lt; argv[i] &lt;&lt; endl;    &#125;      cout &lt;&lt; env &lt;&lt; endl;      <span class="keyword">return</span> <span class="number">0</span>;  &#125;</span><br></pre></td></tr></table></figure>
<p><code>argc</code>:参数个数</p>
<p><code>argv</code>:命令行参数</p>
<p><code>env</code>:环境参数</p>
</li>
</ul>
<h3 id="多级指针"><a class="header-anchor" href="#多级指针"></a>多级指针</h3>
<ul>
<li>
<p>编写一个函数，交换两个字符串</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( <span class="type">int</span> argc, <span class="type">char</span>* argv[], <span class="type">char</span>* env[] )</span></span>&#123;    <span class="type">char</span> *p1 = <span class="string">&quot;abcd&quot;</span>;    <span class="type">char</span> *p2 = <span class="string">&quot;1234&quot;</span>;    cout &lt;&lt; p1 &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; p2 &lt;&lt; endl;    <span class="built_in">swap</span>( &amp;p1, &amp;p2 );    cout &lt;&lt; p1 &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; p2 &lt;&lt; endl;    <span class="keyword">return</span> <span class="number">0</span>;  &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="动态变量"><a class="header-anchor" href="#动态变量"></a>动态变量</h3>
<ul>
<li>申请(当然是堆区)
<ul>
<li><code>new &lt;类型名&gt;</code></li>
<li><code>new &lt;类型名&gt; [ &lt;整形表达式&gt; ]</code></li>
<li><code>new</code>和<code>malloc</code>都能申请堆区内存. 当为类的对象分配内存时,<code>new</code>会执行构造函数,而<code>malloc</code>只会申请内存,不会执行构造函数. 因此C++中尽量用<code>new</code>而不是<code>malloc</code></li>
<li>申请内存也有可能失败. 因此对于内存申请,一定要判断是否成功,即异常处理</li>
</ul>
</li>
<li>归还
<ul>
<li>操作符
<ul>
<li><code>new</code> --- <code>delete</code>  会调用析构函数</li>
<li><code>delete []</code></li>
<li>申请的指针,不要改变它的值,这是因为申请空间使用的是<code>cookie</code>的方式. 如果硬要改变,那得创建一个副本,然后更改副本. 总之,不能更改申请的指针</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++面向对象-Part3</title>
    <url>/2021/06/17/C++%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-Part3/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Template</li>
<li>Exception</li>
<li>IO处理</li>
<li>右值引用</li>
<li>移动构造</li>
<li>外部模板</li>
<li>Lambda表达式</li>
<li>联合初始化</li>
</ul>
<span id="more"></span>
<h1 id="模板"><a class="header-anchor" href="#模板"></a>模板</h1>
<ul>
<li>
<p>多态的一种形式</p>
</li>
<li>
<p>源代码复用机制</p>
</li>
<li>
<p>参数化模块</p>
<ul>
<li>对程序模块(如: 类, 函数)加上<code>类型参数</code></li>
<li>对不同类型的数据实施相同的操作</li>
</ul>
</li>
<li>
<p>多态的一种形式</p>
</li>
<li>
<p>C++</p>
<ul>
<li>类属函数( 模板函数 )</li>
<li>类属类( 模板类 )</li>
</ul>
</li>
</ul>
<h2 id="类属函数"><a class="header-anchor" href="#类属函数"></a>类属函数</h2>
<ul>
<li>
<p>同一函数对不同类型的数据完成相同的操作</p>
</li>
<li>
<p>宏实现</p>
<ul>
<li><code>#define max(a,b) ( (a)&gt;(b) ? (a) : (b) )</code></li>
<li>缺陷: 宏没有类型检查</li>
</ul>
</li>
<li>
<p>函数重载</p>
<ul>
<li><code>int max(int, int)</code> <code>double max(double,double)</code></li>
<li>缺陷:
<ul>
<li>需要定义的重载函数太多</li>
<li>定义不全</li>
</ul>
</li>
</ul>
</li>
<li>
<p>函数指针</p>
<ul>
<li><code>void sort( void*, unsigned int , unsigned int, int(*cmp)( coid*, void* ) )</code></li>
<li>缺陷</li>
<li>需要定义额外参数</li>
<li>大量指针运算</li>
<li>实现起来复杂</li>
<li>可读性差</li>
</ul>
</li>
<li>
<p>函数模板</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt; <span class="keyword">typename</span> T &gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">( T A[], <span class="type">unsigned</span> <span class="type">int</span> num )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">1</span>; i &lt; num ; i++ )</span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> j = <span class="number">0</span> ; j &lt; num - i; j++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( A[j] &gt; A[j+<span class="number">1</span>] )</span><br><span class="line">            &#123;</span><br><span class="line">                T t = A[j];</span><br><span class="line">                A[j] = A[j+<span class="number">1</span>];</span><br><span class="line">                A[j+<span class="number">1</span>] = t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>不需要显式传参, 因为T具体是什么类型可以通过传递的参数推导出来</li>
<li>必须重载操作符</li>
</ul>
</li>
<li>
<p>函数模板定义了一类重载的函数</p>
</li>
<li>
<p>编译系统自动实例化函数模板</p>
</li>
<li>
<p>函数模板的参数</p>
<ul>
<li>
<p>可有多个类型参数, 用逗号分隔</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T1, <span class="keyword">typename</span> T2 &gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">( T1 a, T2 b )</span></span></span><br><span class="line"><span class="function"></span>&#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>可带普通参数</p>
</li>
<li>
<p>必须列在类型参数之后</p>
</li>
</ul>
</li>
<li>
<p>调用时需显式实例化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">template</span>&lt; <span class="keyword">typename</span> T, <span class="type">int</span> size &gt;</span></span><br><span class="line"><span class="function">  <span class="type">void</span> <span class="title">f</span><span class="params">(T a)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">       T temp[size];</span><br><span class="line">     ...</span><br><span class="line">       <span class="built_in">f</span>&lt;<span class="type">int</span>,<span class="number">10</span>&gt;(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">* 模板特化</span><br><span class="line"></span><br><span class="line">  * 定义一个具有特定类型(而不是模板类型)的函数</span><br><span class="line"></span><br><span class="line">  * 必须在头部之前使用 `<span class="keyword">template</span>&lt;&gt;`,  以显示这是前面定义的模板函数的特化</span><br><span class="line">  * 编译器首先匹配`普通函数`,再匹配`模板特化`, 再匹配`模板函数` </span><br><span class="line">  </span><br><span class="line">* 类模板中的静态成员属于实例化后的类</span><br><span class="line"></span><br><span class="line">* 模板是一种**源代码复用**的机制</span><br><span class="line"></span><br><span class="line">  * 实例化: 生成具体的函数/类</span><br><span class="line"></span><br><span class="line">  * 函数模板的实例化</span><br><span class="line">    * 隐式实现</span><br><span class="line">    * 根据具体模板函数调用</span><br><span class="line">    </span><br><span class="line">  * 类模板的实例化</span><br><span class="line">    * 创建对象时显式指定</span><br><span class="line">    </span><br><span class="line">  * 是否实例化模板的某个实例由使用点来决定;如果未使用到一个模板的某个实例, 则编译系统不会生成相应实例的代码</span><br><span class="line"></span><br><span class="line">  * 如果在模块A中要使用模块B中定义的某模块的实例, 而在模块B中未使用这个实例, 则模块A无法使用这个实例</span><br><span class="line"></span><br><span class="line">  * **C++中模板的完整定义通常放在头文件中**</span><br><span class="line"></span><br><span class="line">    * 编译方法有两种：包含式和独立编译式。独立编译理论最有，但对模板并不适用，`<span class="keyword">export</span>`可以实现独立编译，但没有主流编译器支持，它也在新标准中被废止</span><br><span class="line"></span><br><span class="line">      包含式：声明文件包含在定义文件中，定义文件包含在应用程序文件中，只编译应用程序文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">*  模板元编程</span><br><span class="line"></span><br><span class="line">  ```c++</span><br><span class="line">  template&lt; int N &gt;</span><br><span class="line">  class Fib</span><br><span class="line">  &#123;</span><br><span class="line">      public:</span><br><span class="line">      enum&#123; value + Fib&lt; N - 1&gt;:: value + Fib&lt; N - 2 &gt;:: value &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  template&lt;&gt;</span><br><span class="line">  class Fib&lt;0&gt;</span><br><span class="line">  &#123;</span><br><span class="line">      enum &#123; value = 1 &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  template&lt;&gt;</span><br><span class="line">  class Fib&lt;1&gt;</span><br><span class="line">  &#123;</span><br><span class="line">      enum &#123; value = 1 &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  int main()</span><br><span class="line">  &#123;</span><br><span class="line">      cout &lt;&lt; Fib&lt;8&gt;::value &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>这段程序在<strong>编译器</strong>就能出结果. 元编程就是编写一个程序, 这个程序可以生成更多的程序</p>
</li>
</ul>
<h1 id="异常"><a class="header-anchor" href="#异常"></a>异常</h1>
<ul>
<li>
<p>错误</p>
<ul>
<li>语法错误
<ul>
<li>编译系统</li>
</ul>
</li>
<li>逻辑错误
<ul>
<li>测试</li>
</ul>
</li>
</ul>
</li>
<li>
<p>异常</p>
<ul>
<li>运行环境造成
<ul>
<li>内存不足，文件操作失败等</li>
</ul>
</li>
<li>异常处理</li>
</ul>
</li>
<li>
<p>特征</p>
<ul>
<li>可以预见</li>
<li>无法避免</li>
</ul>
</li>
<li>
<p>作用</p>
<ul>
<li>提高程序<em>Robuntness</em></li>
</ul>
</li>
<li>
<p>常见处理方法</p>
<ul>
<li>函数参数
<ul>
<li>返回值</li>
<li>引用参数</li>
</ul>
</li>
<li>逐层返回</li>
</ul>
</li>
<li>
<p>缺陷</p>
<ul>
<li>程序结构不清楚</li>
</ul>
</li>
<li>
<p>C++异常处理机制</p>
<ul>
<li>一种专门、清晰描述异常处理过程的机制</li>
</ul>
</li>
<li>
<p>处理机制</p>
<ul>
<li><code>try</code>
<ul>
<li>监控  <code>try &#123; &lt;语句序列&gt; &#125;</code></li>
</ul>
</li>
<li><code>throw</code>
<ul>
<li>抛掷异常对象    <code>throw &lt;表达式&gt;</code></li>
</ul>
</li>
<li><code>catch</code>
<ul>
<li>捕获异常并处理 <code> catch ( &lt;类型&gt;  [ &lt; 变量&gt; ]) &#123; 语句序列 &#125;</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>catch</code></p>
<ul>
<li>类型: 异常类型精确匹配</li>
<li>变量: 存储异常对象, 可省</li>
<li>一个<code>try</code>语句块后面可跟多个<code>catch</code>语句块, 用于捕获不同类型的异常进行处理</li>
</ul>
</li>
<li>
<p>定义异常类</p>
<ul>
<li>注意<code>catch</code> 块顺序</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FileErrors</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NonExist</span>: <span class="keyword">public</span> FileErrors&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NonExist</span>: <span class="keyword">public</span> FileErrors&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WrongFormat</span>: <span class="keyword">public</span> FileErrors&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DiskSeekError</span>: <span class="keyword">public</span> FileErrors&#123;&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>例题:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyExceptionBase</span></span><br><span class="line">&#123;&#125;; <span class="comment">//对象切片</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyExceptionDerived</span>: <span class="keyword">public</span> MyExceptionBase</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">( MyExceptionBase&amp; e )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MyExceptionDerived e;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="built_in">f</span>(e);</span><br><span class="line">    &#125; <span class="built_in">catch</span> ( MyExceptionDerived&amp; e  )</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;MyExceptionDerived&quot;</span> &lt;&lt; endl; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>( MyExceptionBase&amp; e )</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;MyExceptionBase&quot;</span> &lt;&lt; endl; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码会输出<code>&quot;MyExceptionBase&quot; </code>, 因为<code>throw</code>抛出对象是<strong>拷贝构造</strong>, 而父类的拷贝构造函数不是虚函数,所以会调用父类的拷贝构造函数, 进行对象切片,<code>throw</code>的结果是一个父类对象</p>
<ul>
<li>
<p>特例</p>
<ul>
<li>
<p>无参数<code>throw</code></p>
<ul>
<li>
<p>将捕获到的异常对象重新抛掷出去</p>
<p><code>catch(int)  &#123;throw &#125;</code></p>
</li>
</ul>
</li>
<li>
<p>catch( ... )</p>
<ul>
<li>默认异常处理</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>Use destructors to prevent resource leaks</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">typename</span> T &gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">auto_ptr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">auto_ptr</span>( T *p = <span class="literal">nullptr</span> )</span><br><span class="line">    :<span class="built_in">ptr</span>( p )</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">auto_ptr</span>() &#123;<span class="keyword">delete</span> ptr;&#125;</span><br><span class="line">    T* <span class="keyword">operator</span> -&gt;() <span class="type">const</span> &#123; <span class="keyword">return</span> ptr; &#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span> *() <span class="type">const</span> &#123;<span class="keyword">return</span> *ptr;&#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    T* ptr;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//WINDOW_HANDOW是一个指针类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">typename</span> T &gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">auto_ptr</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">auto_ptr</span>( T *p = <span class="literal">nullptr</span> )</span><br><span class="line">    :<span class="built_in">ptr</span>( p )</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">auto_ptr</span>() &#123;<span class="keyword">delete</span> ptr;&#125;</span><br><span class="line">    T* <span class="keyword">operator</span> -&gt;() <span class="type">const</span> &#123; <span class="keyword">return</span> ptr; &#125;</span><br><span class="line">    T&amp; <span class="keyword">operator</span> *() <span class="type">const</span> &#123;<span class="keyword">return</span> *ptr;&#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    T* ptr;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Class WindowHandle</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">WindowHandow</span>( WINDOW_HANDLE handler )</span><br><span class="line">    :<span class="built_in">w</span>(handle)</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">WindowHandle</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">destroyWindow</span>(w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">operator</span> <span class="title">WINDOW_HANDLE</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> w; &#125; <span class="comment">//类型转换操作符， 这样就不用重载 * 和 -&gt; 了</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    WINDOW_HANDLE w;</span><br><span class="line">    <span class="built_in">WindowHandle</span>( <span class="type">const</span> WindowHandle&amp;  );</span><br><span class="line">    WindowHandle &amp; <span class="keyword">operator</span> = ( <span class="type">const</span> WindowHandle&amp; );</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="IO处理"><a class="header-anchor" href="#IO处理"></a>IO处理</h1>
<ul>
<li>
<p>操作符<code>&lt;&lt;</code>和<code>&gt;&gt;</code>重载</p>
<ul>
<li>
<p>对自定义类的对象的IO</p>
</li>
<li>
<p>全局(友元)函数重载</p>
</li>
<li>
<p><strong>将全局函数虚化</strong></p>
<ul>
<li>
<p>全局函数是静态绑定,无法实现多态, 但是, 可以让全局函数调用虚函数, 实现虚化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CPoint2D</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> x,y;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">display</span><span class="params">( ostream&amp; out )</span></span></span><br><span class="line"><span class="function">    </span>&#123; out &lt;&lt; x &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; y &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt; ( ostream&amp; out , CPoint2D&amp; a )</span><br><span class="line">&#123;</span><br><span class="line">    a.<span class="built_in">display</span>( out );</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPoint3D</span>: <span class="keyword">public</span> CPoint2D</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> z;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">( ostream&amp; out )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        CPoint2D:: <span class="built_in">display</span>();</span><br><span class="line">        out &lt;&lt; <span class="string">&#x27;,&#x27;</span> &lt;&lt; z &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Never treat arrays polymorphically!</p>
<p>不要在数组中放多态！</p>
<p>比如说， 你想用父类的数组存放子类的对象， 当你遍历数组时，  <code>arr[i]</code> 实际上是 <code>i * 数组元素大小</code>， 而数组元素大小是编译期决定的， 而实际对象类型可能比静态类型大， 所以会数组越界。</p>
<h1 id="右值引用"><a class="header-anchor" href="#右值引用"></a>右值引用</h1>
<ul>
<li>有名称的、可以获取到存储地址的表达式即为左值；反之则是右值</li>
</ul>
<p>其实 C++98/03 标准中就有引用，使用 &quot;&amp;&quot; 表示。但此种引用方式有一个缺陷，即正常情况下只能操作 C++ 中的左值，无法对右值添加引用。举个例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> &amp;b = num; <span class="comment">//正确int &amp;c = 10; //错误</span></span><br></pre></td></tr></table></figure>
<p>如上所示，编译器允许我们为<code>num</code>左值建立一个引用，但不可以为 10 这个右值建立引用。因此，C++98/03 标准中的引用又称为<strong>左值引用</strong>。</p>
<p>注意，虽然 C++98/03 标准不支持为右值建立非常量左值引用，但允许使用<strong>常量左值引用引用右值</strong>(但不能修改)。也就是说，常量左值引用既可以操作左值，也可以操作右值，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int num = 10;const int &amp;b = num;const int &amp;c = 10;</span><br></pre></td></tr></table></figure>
<p>我们知道，右值往往是没有名称的，因此要使用它只能借助引用的方式。这就产生一个问题，实际开发中我们可能需要对右值进行修改（实现移动语义时就需要），显然左值引用的方式是行不通的。</p>
<p>为此，C++11 标准新引入了另一种引用方式，称为右值引用，用 &quot;&amp;&amp;&quot; 表示。</p>
<p>需要注意的，和声明左值引用一样，右值引用也必须<strong>立即进行初始化操作</strong>，且<strong>只能使用右值进行初始化</strong>，比如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//int &amp;&amp; a = num;  //右值引用不能初始化为左值int &amp;&amp; a = 10;</span></span><br></pre></td></tr></table></figure>
<p>和常量左值引用不同的是，右值引用还可以对右值进行修改。例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> &amp;&amp; a = <span class="number">10</span>;</span><br><span class="line">a = <span class="number">100</span>;</span><br><span class="line">cout &lt;&lt; a &lt;&lt; endl;</span><br></pre></td></tr></table></figure>
<p>程序输出结果为 100。</p>
<p>另外值得一提的是，C++ 语法上是支持定义常量右值引用的，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const int&amp;&amp; a = 10;//编译器不会报错</span><br></pre></td></tr></table></figure>
<p>但这种定义出来的右值引用并无实际用处。一方面，右值引用主要用于移动语义和完美转发，其中前者需要有修改右值的权限；其次，常量右值引用的作用就是引用一个不可修改的右值，这项工作完全可以交给常量左值引用完成。</p>
<ul>
<li>In C++ , non-const references can bind to l-values and const references can bind to l-values or r-values, but there is nothing that can bind to a non-const r-value.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setVal</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123; val = x ; &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">A <span class="title">getA</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> <span class="built_in">A</span>(); &#125; <span class="comment">//返回的是个右值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> &amp;ra = a; <span class="comment">//OK</span></span><br><span class="line">    <span class="type">const</span> A &amp;ca = <span class="built_in">getA</span>(); <span class="comment">//OK</span></span><br><span class="line">    A &amp;aa = <span class="built_in">getA</span>(); <span class="comment">//ERROR</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>An <code>r-value reference</code> can bind to an <code>r-value</code>
<ul>
<li>将一个右值变成有内存的变量, 也就是 <strong>可以操纵右值</strong></li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> &amp;ra = a; <span class="comment">//OK</span></span><br><span class="line">    <span class="type">const</span> A &amp;cRa = <span class="built_in">getA</span>(); <span class="comment">//OK</span></span><br><span class="line">    A &amp;&amp;aa = <span class="built_in">getA</span>(); <span class="comment">//ok!!!</span></span><br><span class="line">    aa.<span class="built_in">setVal</span>(<span class="number">2</span>); <span class="comment">//OK</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="移动构造"><a class="header-anchor" href="#移动构造"></a>移动构造</h1>
<p>当类中拥有指针类型的成员变量时，拷贝构造函数中需要以深拷贝（而非浅拷贝）的方式复制该指针成员。</p>
<p>举个例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>using namespace std;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">demo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:   </span><br><span class="line"> 		<span class="built_in">demo</span>()</span><br><span class="line">            :<span class="built_in">num</span>(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">0</span>))</span><br><span class="line">            &#123;      </span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;construct!&quot;</span>&lt;&lt;endl;   </span><br><span class="line">            &#125;    </span><br><span class="line">    </span><br><span class="line">    	<span class="comment">//拷贝构造函数  </span></span><br><span class="line">    	<span class="built_in">demo</span>(<span class="type">const</span> demo &amp;d)</span><br><span class="line">            :<span class="built_in">num</span>(<span class="keyword">new</span> <span class="built_in">int</span>(*d.num))</span><br><span class="line">            &#123;      cout&lt;&lt;<span class="string">&quot;copy construct!&quot;</span>&lt;&lt;endl;   &#125;   </span><br><span class="line">    </span><br><span class="line">    	~<span class="built_in">demo</span>()</span><br><span class="line">        &#123;      </span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;class destruct!&quot;</span>&lt;&lt;endl;   </span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span>:   </span><br><span class="line">    	<span class="type">int</span> *num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">demo <span class="title">get_demo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">demo</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    demo a = <span class="built_in">get_demo</span>();    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如上所示，我们为 demo 类自定义了一个拷贝构造函数。该函数在拷贝 <code>d.num</code> 指针成员时，必须采用深拷贝的方式，即拷贝该指针成员本身的同时，还要拷贝指针指向的内存资源。否则一旦多个对象中的指针成员指向同一块堆空间，这些对象析构时就会对该空间释放多次，这是不允许的。</p>
</blockquote>
<p>可以看到，程序中定义了一个可返回 demo 对象的 get_demo() 函数，用于在 main() 主函数中初始化 a 对象，其整个初始化的流程包含以下几个阶段：</p>
<ol>
<li>执行 get_demo() 函数内部的 demo() 语句，即调用 demo 类的默认构造函数生成一个匿名对象；</li>
<li>执行 return demo() 语句，会调用拷贝构造函数复制一份之前生成的匿名对象，并将其作为 get_demo() 函数的返回值（函数体执行完毕之前，匿名对象会被析构销毁）；</li>
<li>执行 a = get_demo() 语句，再调用一次拷贝构造函数，将之前拷贝得到的临时对象复制给 a（此行代码执行完毕，get_demo() 函数返回的对象会被析构）；</li>
<li>程序执行结束前，会自行调用 demo 类的析构函数销毁 a。</li>
</ol>
<p>注意，目前多数编译器都会对程序中发生的拷贝操作进行优化，因此如果我们使用 VS 2017、codeblocks 等这些编译器运行此程序时，看到的往往是优化后的输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">construct!</span><br><span class="line">class destruct!</span><br></pre></td></tr></table></figure>
<p>而同样的程序，如果在 Linux 上使用<code>g++ demo.cpp -fno-elide-constructors</code>命令运行（其中 demo.cpp 是程序文件的名称），就可以看到完整的输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">construct!        &lt;-- 执行 demo()</span><br><span class="line">copy construct!    &lt;-- 执行 return demo()</span><br><span class="line">class destruct!     &lt;-- 销毁 demo() 产生的匿名对象</span><br><span class="line">copy construct!    &lt;-- 执行 a = get_demo()</span><br><span class="line">class destruct!     &lt;-- 销毁 get_demo() 返回的临时对象</span><br><span class="line">class destruct!     &lt;-- 销毁 a</span><br></pre></td></tr></table></figure>
<p>如上所示，利用拷贝构造函数实现对 a 对象的初始化，底层实际上进行了 2 次拷贝（而且是深拷贝）操作。当然，对于仅申请少量堆空间的临时对象来说，深拷贝的执行效率依旧可以接受，但如果临时对象中的指针成员申请了大量的堆空间，那么 2 次深拷贝操作势必会影响 a 对象初始化的执行效率。</p>
<blockquote>
<p>事实上，此问题一直存留在以 C++ 98/03 标准编写的 C++ 程序中。由于临时变量的产生、销毁以及发生的拷贝操作本身就是很隐晦的（编译器对这些过程做了专门的优化），且并不会影响程序的正确性，因此很少进入程序员的视野。</p>
</blockquote>
<p>那么当类中包含指针类型的成员变量，使用其它对象来初始化同类对象时，怎样才能避免深拷贝导致的效率问题呢？C++11 标准引入了解决方案，该标准中引入了右值引用的语法，借助它可以实现移动语义。</p>
<p>所谓移动语义，指的就是以移动而非深拷贝的方式初始化含有指针成员的类对象。简单的理解，移动语义指的就是将其他对象（通常是临时对象）拥有的内存资源“移为已用”。</p>
<p>以前面程序中的 demo 类为例，该类的成员都包含一个整形的指针成员，其默认指向的是容纳一个整形变量的堆空间。当使用 get_demo() 函数返回的临时对象初始化 a 时，我们只需要将临时对象的 <code>num </code>指针直接浅拷贝给<code> a.num</code>，然后修改该临时对象中 <code>num</code> 指针的指向（通常令其指向 NULL, <strong>防止原对象被析构</strong>），这样就完成了<code> a.num</code> 的初始化。</p>
<blockquote>
<p>事实上，对于程序执行过程中产生的临时对象，往往只用于传递数据（没有其它的用处），并且会很快会被销毁。因此在使用临时对象初始化新对象时，我们可以将其包含的指针成员指向的内存资源直接移给新对象所有，无需再新拷贝一份，这大大提高了初始化的执行效率。</p>
</blockquote>
<p>例如，下面程序对 demo 类进行了修改：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">demo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:    </span><br><span class="line">    <span class="built_in">demo</span>()</span><br><span class="line">        :<span class="built_in">num</span>(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">0</span>))</span><br><span class="line">        &#123;        cout&lt;&lt;<span class="string">&quot;construct!&quot;</span>&lt;&lt;endl;    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">demo</span>(<span class="type">const</span> demo &amp;d)</span><br><span class="line">        :<span class="built_in">num</span>(<span class="keyword">new</span> <span class="built_in">int</span>(*d.num))</span><br><span class="line">     	&#123;        cout&lt;&lt;<span class="string">&quot;copy construct!&quot;</span>&lt;&lt;endl;    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加移动构造函数    </span></span><br><span class="line">    <span class="built_in">demo</span>(demo &amp;&amp;d)</span><br><span class="line">        :<span class="built_in">num</span>(d.num)</span><br><span class="line">        &#123;        d.num = <span class="literal">NULL</span>;        cout&lt;&lt;<span class="string">&quot;move construct!&quot;</span>&lt;&lt;endl;    &#125;    </span><br><span class="line">    </span><br><span class="line">    ~<span class="built_in">demo</span>()&#123;        cout&lt;&lt;<span class="string">&quot;class destruct!&quot;</span>&lt;&lt;endl;    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span>:    </span><br><span class="line">    <span class="type">int</span> *num;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">demo <span class="title">get_demo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    <span class="keyword">return</span> <span class="built_in">demo</span>();&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    demo a = <span class="built_in">get_demo</span>();    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，在之前 demo 类的基础上，我们又手动为其添加了一个构造函数。和其它构造函数不同，此构造函数使用右值引用形式的参数，又称为移动构造函数。并且在此构造函数中，<code>num </code>指针变量采用的是浅拷贝的复制方式，同时在函数内部重置了<code> d.num</code>，有效避免了“同一块对空间被释放多次”情况的发生。</p>
<p>在 Linux 系统中使用<code>g++ demo.cpp -o demo.exe -std=c++0x -fno-elide-constructors</code>命令执行此程序，输出结果为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">construct!</span><br><span class="line">move construct!</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">destruct</span>!</span><br><span class="line">move construct!</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">destruct</span>!</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">destruct</span>!</span><br></pre></td></tr></table></figure>
<p>通过执行结果我们不难得知，当为 demo 类添加移动构造函数之后，使用临时对象初始化 a 对象过程中产生的 2 次拷贝操作，都转由移动构造函数完成。</p>
<p>我们知道，非<code> const</code> 右值引用只能操作右值，程序执行结果中产生的临时对象（例如函数返回值、lambda 表达式等）既无名称也无法获取其存储地址，所以属于右值。当类中同时包含拷贝构造函数和移动构造函数时，如果使用临时对象初始化当前类的对象，编译器会<strong>优先调用移动构造函数</strong>来完成此操作。只有当类中没有合适的移动构造函数时，编译器才会退而求其次，调用拷贝构造函数。</p>
<blockquote>
<p>在实际开发中，通常在类中自定义移动构造函数的同时，会再为其自定义一个适当的拷贝构造函数，由此当用户利用右值初始化类对象时，会调用移动构造函数；使用左值（非右值）初始化类对象时，会调用拷贝构造函数。</p>
</blockquote>
<ul>
<li>如果使用左值初始化同类对象，但也想调用移动构造函数完成，有没有办法可以实现呢？</li>
</ul>
<p>默认情况下，左值初始化同类对象只能通过拷贝构造函数完成，如果想调用移动构造函数，则必须使用右值进行初始化。C++11 标准中为了满足用户使用左值初始化同类对象时也通过移动构造函数完成的需求，新引入了 <code>std::move()</code> 函数，它可以将左值强制转换成对应的右值，由此便可以使用移动构造函数。</p>
<h1 id="外部模板"><a class="header-anchor" href="#外部模板"></a>外部模板</h1>
<h1 id="Lambda表达式"><a class="header-anchor" href="#Lambda表达式"></a>Lambda表达式</h1>
<ul>
<li>
<p>A mechanism for specifying a <code>function object</code></p>
<table>
<thead>
<tr>
<th>捕获列表</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>[]</td>
<td>Capture nothing</td>
</tr>
<tr>
<td>[&amp;]</td>
<td>Capture any referenced variable by reference</td>
</tr>
<tr>
<td>[=]</td>
<td>Capture any referenced variable by making a copy</td>
</tr>
<tr>
<td>[=, &amp;foo]</td>
<td>Capture any referenced variable by making a copy, but capture variable foo by reference</td>
</tr>
<tr>
<td>[bar]</td>
<td>Capture bar by making a copy; don't copy anything else</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>语法：</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[capture list] (参数) <span class="keyword">mutable</span> <span class="keyword">noexcept</span>/<span class="keyword">throw</span>() -&gt; <span class="keyword">return</span> type</span><br><span class="line">&#123;</span><br><span class="line">  function body</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ol>
<li>[capture list]<br>
[ ] 方括号用于向编译器表明当前是一个 lambda 表达式，其不能被省略。在方括号内部，可以注明当前 lambda 函数的函数体中可以使用哪些“外部变量”。</li>
</ol>
<blockquote>
<p>所谓外部变量，指的是和当前 lambda 表达式位于同一作用域内的所有非static局部变量</p>
<p>lambda可以直接使用局部static变量和全局变量</p>
</blockquote>
<ol start="2">
<li>
<p>(参数)<br>
和普通函数的定义一样，lambda 匿名函数也可以接收外部传递的多个参数。和普通函数不同的是，如果不需要传递参数，可以连同 () 小括号一起省略；</p>
</li>
<li>
<p><code>mutable</code><br>
此关键字可以省略，如果使用则之前的 () 小括号将不能省略（参数个数可以为 0）。默认情况下，对于以值传递方式引入的外部变量，不允许在 lambda 表达式内部修改它们的值（可以理解为这部分变量都是 <code>const</code> 常量）。而如果想修改它们，就必须使用 mutable 关键字。</p>
</li>
</ol>
<p>注意，对于以值传递方式引入的外部变量，lambda 表达式修改的是拷贝的那一份，并不会修改真正的外部变量；</p>
<ol start="4">
<li>
<p><code>noexcept/throw()</code><br>
可以省略，如果使用，在之前的 () 小括号将不能省略（参数个数可以为 0）。默认情况下，lambda 函数的函数体中可以抛出任何类型的异常。而标注 <code>noexcept </code>关键字，则表示函数体内不会抛出任何异常；使用 throw() 可以指定 lambda 函数内部可以抛出的异常类型。</p>
<p>值得一提的是，如果 lambda 函数标有<code>noexcept</code>而函数体内抛出了异常，又或者使用 throw() 限定了异常类型而函数体内抛出了非指定类型的异常，这些异常无法使用 try-catch 捕获，会导致程序执行失败（本节后续会给出实例）。</p>
</li>
<li>
<p><code>-&gt; 返回值类型</code><br>
指明 lambda 匿名函数的返回值类型。如果 lambda 函数体内只有一个 return 语句，或者该函数返回 void，则编译器可以自行推断出返回值类型，此情况下可以直接省略<code>-&gt; 返回值类型</code>。</p>
</li>
<li>
<p>函数体<br>
和普通函数一样，lambda 匿名函数包含的内部代码都放置在函数体中。该函数体内除了可以使用指定传递进来的参数之外，还可以使用<strong>指定的外部变量</strong>以及<strong>全局范围内的所有全局变量</strong>。</p>
</li>
</ol>
<p>需要注意的是，<strong>外部变量会受到以值传递还是以引用传递方式引入的影响</strong>，而<strong>全局变量则不会</strong>。换句话说，在 lambda 表达式内可以使用任意一个全局变量，必要时还可以<strong>直接修改它们的值</strong>。</p>
<blockquote>
<p>其中，红色标识的参数是定义 lambda 表达式时必须写的，而绿色标识的参数可以省略。</p>
</blockquote>
<p>比如，如下就定义了一个最简单的 <code>lambda</code> 匿名函数：</p>
<p><code>[]&#123;&#125;</code></p>
<p>显然，此 lambda 匿名函数未引入任何外部变量（[] 内为空），也没有传递任何参数，没有指定 mutable、<code>noexcept</code> 等关键字，没有返回值和函数体。所以，这是一个没有任何功能的 lambda 匿名函数。</p>
<h2 id="外部变量"><a class="header-anchor" href="#外部变量"></a>[外部变量]</h2>
<table>
<thead>
<tr>
<th>外部变量格式</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>[]</td>
<td>空方括号表示当前 lambda 匿名函数中不导入任何外部变量。</td>
</tr>
<tr>
<td>[=]</td>
<td>只有一个 = 等号，表示以值传递的方式导入所有外部变量；</td>
</tr>
<tr>
<td>[&amp;]</td>
<td>只有一个 &amp; 符号，表示以引用传递的方式导入所有外部变量；</td>
</tr>
<tr>
<td>[val1,val2,...]</td>
<td>表示以值传递的方式导入 val1、val2 等指定的外部变量，同时多个变量之间没有先后次序；</td>
</tr>
<tr>
<td>[&amp;val1,&amp;val2,...]</td>
<td>表示以引用传递的方式导入 val1、val2等指定的外部变量，多个变量之间没有前后次序；</td>
</tr>
<tr>
<td>[val,&amp;val2,...]</td>
<td>以上 2 种方式还可以混合使用，变量之间没有前后次序。</td>
</tr>
<tr>
<td>[=,&amp;val1,...]</td>
<td>表示除 val1 以引用传递的方式导入外，其它外部变量都以值传递的方式导入。</td>
</tr>
<tr>
<td>[this]</td>
<td>表示以值传递的方式导入当前的 this 指针。</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意，单个外部变量不允许以相同的传递方式导入多次。例如 [=，val1] 中，val1 先后被以值传递的方式导入了 2 次，这是非法的。</p>
</blockquote>
<p>【例 1】lambda 匿名函数的定义和使用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="type">int</span> num[<span class="number">4</span>] = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对 a 数组中的元素进行排序    </span></span><br><span class="line">    <span class="built_in">sort</span>(num, num+<span class="number">4</span>, [=](<span class="type">int</span> x, <span class="type">int</span> y) -&gt; <span class="type">bool</span>&#123; <span class="keyword">return</span> x &lt; y; &#125; );    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> n : num)</span><br><span class="line">    &#123;        </span><br><span class="line">        cout &lt;&lt; n &lt;&lt; <span class="string">&quot; &quot;</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序执行结果为：</p>
<figure class="highlight plaintext"><figcaption><span>2 3 4</span></figcaption><table><tr><td class="code"><pre><span class="line">1 2 3 4</span><br></pre></td></tr></table></figure>
<p>程序第 9 行通过调用 sort() 函数实现了对<code> num</code> 数组中元素的升序排序，其中就用到了 lambda 匿名函数。而如果使用普通函数，需以如下代码实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义的升序排序规则</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">sort_up</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">return</span>  x &lt; y;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="type">int</span> num[<span class="number">4</span>] = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对 a 数组中的元素进行排序    </span></span><br><span class="line">    <span class="built_in">sort</span>(num, num+<span class="number">4</span>, sort_up);    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> n : num)</span><br><span class="line">    &#123;        </span><br><span class="line">        cout &lt;&lt; n &lt;&lt; <span class="string">&quot; &quot;</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此程序中 sort_up() 函数的功能和上一个程序中的 lambda 匿名函数完全相同。显然在类似的场景中，使用 lambda 匿名函数更有优势。</p>
<p>除此之外，虽然 lambda 匿名函数没有函数名称，但我们仍可以为其手动设置一个名称，比如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="comment">//display 即为 lambda 匿名函数的函数名    </span></span><br><span class="line">    <span class="keyword">auto</span> display = [](<span class="type">int</span> a,<span class="type">int</span> b) -&gt; <span class="type">void</span>&#123;cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b;&#125;;  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用 lambda 函数    </span></span><br><span class="line">    <span class="built_in">display</span>(<span class="number">10</span>,<span class="number">20</span>);    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序执行结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 20</span><br></pre></td></tr></table></figure>
<p>可以看到，程序中使用 <code>auto </code>关键字为 lambda 匿名函数设定了一个函数名，由此我们即可在作用域内调用该函数。</p>
<p>【例 2】值传递和引用传递的区别</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="type">int</span> all_num = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    <span class="comment">//局部变量    </span></span><br><span class="line">    <span class="type">int</span> num_1 = <span class="number">1</span>;    </span><br><span class="line">    <span class="type">int</span> num_2 = <span class="number">2</span>;    </span><br><span class="line">    <span class="type">int</span> num_3 = <span class="number">3</span>;    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;lambda1:\n&quot;</span>;    </span><br><span class="line">    <span class="keyword">auto</span> lambda1 = [=]&#123;        </span><br><span class="line">        <span class="comment">//全局变量可以访问甚至修改       </span></span><br><span class="line">        all_num = <span class="number">10</span>;        </span><br><span class="line">        <span class="comment">//函数体内只能使用外部变量，而无法对它们进行修改        </span></span><br><span class="line">        cout &lt;&lt; num_1 &lt;&lt; <span class="string">&quot; &quot;</span>             </span><br><span class="line">            &lt;&lt; num_2 &lt;&lt; <span class="string">&quot; &quot;</span>             </span><br><span class="line">            &lt;&lt; num_3 &lt;&lt; endl;  &#125;; </span><br><span class="line">    <span class="built_in">lambda1</span>();    </span><br><span class="line">    cout &lt;&lt; all_num &lt;&lt;endl;  </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;lambda2:\n&quot;</span>;    </span><br><span class="line">    <span class="keyword">auto</span> lambda2 = [&amp;]&#123;        </span><br><span class="line">        all_num = <span class="number">100</span>;        </span><br><span class="line">        num_1 = <span class="number">10</span>;        </span><br><span class="line">        num_2 = <span class="number">20</span>;        </span><br><span class="line">        num_3 = <span class="number">30</span>;        </span><br><span class="line">        cout &lt;&lt; num_1 &lt;&lt; <span class="string">&quot; &quot;</span>             </span><br><span class="line">            &lt;&lt; num_2 &lt;&lt; <span class="string">&quot; &quot;</span>             </span><br><span class="line">            &lt;&lt; num_3 &lt;&lt; endl;    </span><br><span class="line">    &#125;;    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">lambda2</span>();    </span><br><span class="line">    cout &lt;&lt; all_num &lt;&lt; endl;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序执行结果为：</p>
<p>lambda1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 3</span><br><span class="line">10</span><br></pre></td></tr></table></figure>
<p>lambda2:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10 20 30</span><br><span class="line">100</span><br></pre></td></tr></table></figure>
<p>可以看到，在创建 lambda1 和 lambda2 匿名函数的作用域中，有 <code>num_1</code>、<code>num_2</code> 和 <code>num_3</code> 这 3 个局部变量，另外还有 <code>all_num</code> 全局变量。</p>
<p>其中，lambda1 匿名函数是以 [=] 值传递的方式导入的局部变量，这意味着默认情况下，此函数内部无法修改这 3 个局部变量的值，但全局变量 <code>all_num</code> 除外。相对地，lambda2 匿名函数以 [&amp;] 引用传递的方式导入这 3 个局部变量，因此在该函数的内部就可以访问这 3 个局部变量，还可以任意修改它们。同样，也可以访问甚至修改全局变量。</p>
<p>当然，如果我们想在 lambda1 匿名函数的基础上修改外部变量的值，可以借助 mutable 关键字，例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> lambda1 = [=]() <span class="keyword">mutable</span>&#123;    </span><br><span class="line">    num_1 = <span class="number">10</span>;    </span><br><span class="line">    num_2 = <span class="number">20</span>;    </span><br><span class="line">    num_3 = <span class="number">30</span>;    </span><br><span class="line">    <span class="comment">//函数体内只能使用外部变量，而无法对它们进行修改    </span></span><br><span class="line">    cout &lt;&lt; num_1 &lt;&lt; <span class="string">&quot; &quot;</span>         </span><br><span class="line">        &lt;&lt; num_2 &lt;&lt; <span class="string">&quot; &quot;</span>        </span><br><span class="line">        &lt;&lt; num_3 &lt;&lt; endl;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>由此，就可以在 lambda1 匿名函数中修改外部变量的值。但需要注意的是，这里修改的仅是 <code>num_1</code>、<code>num_2</code>、<code>num_3</code> 拷贝的那一份的值，真正外部变量的值并不会发生改变。</p>
<p>【例 3】执行抛出异常类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;    </span><br><span class="line">    <span class="keyword">auto</span> except = []()<span class="built_in">throw</span>(<span class="type">int</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="number">10</span>;    </span><br><span class="line">    &#125;;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;        </span><br><span class="line">        <span class="built_in">except</span>();    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="built_in">catch</span> (<span class="type">int</span>) &#123;        </span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;捕获到了整形异常&quot;</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>程序执行结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">捕获到了整形异常</span><br></pre></td></tr></table></figure>
<p>可以看到，<code>except </code>匿名数组中指定函数体中可以抛出整形异常，因此当函数体中真正发生整形异常时，可以借助 <code>try-catch </code>块成功捕获并处理。</p>
<p>在此基础上， 再看一下反例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;    </span><br><span class="line">    <span class="keyword">auto</span> except1 = []()<span class="keyword">noexcept</span>&#123;        </span><br><span class="line">        <span class="keyword">throw</span> <span class="number">100</span>;    &#125;;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> except2 = []()<span class="built_in">throw</span>(<span class="type">char</span>)&#123;        </span><br><span class="line">        <span class="keyword">throw</span> <span class="number">10</span>;    </span><br><span class="line">    &#125;;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>&#123;        </span><br><span class="line">        <span class="built_in">except1</span>();        </span><br><span class="line">        <span class="built_in">except2</span>();    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span>(<span class="type">int</span>)&#123;        </span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;捕获到了整形异常&quot;</span>&lt;&lt; endl;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此程序运行会直接崩溃，原因很简单，<code>except1</code> 匿名函数指定了函数体中不发生任何异常，但函数体中却发生了整形异常；<code>except2 </code>匿名函数指定函数体可能会发生字符异常，但函数体中却发生了整形异常。由于指定异常类型和真正发生的异常类型不匹配，导致<code>try-catch</code>无法捕获，最终程序运行崩溃。</p>
<blockquote>
<p>如果不使用 <code>noexcept </code>或者 <code>throw()</code>，则 lambda 匿名函数的函数体中允许发生任何类型的异常。</p>
</blockquote>
<h2 id="sort"><a class="header-anchor" href="#sort"></a>sort</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Foo</span>():<span class="built_in">a</span>(<span class="number">0</span>), <span class="built_in">b</span>(<span class="number">0</span>)&#123;&#125;</span><br><span class="line">    ~<span class="built_in">Foo</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Foo</span>(<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 规定对象排序的算法：先按照 a 从小到大排序；如果 a 相等，则按照 b 从小到大排序</span></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> Foo &amp;bar)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;a &lt; bar.a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;a == bar.a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>-&gt;b &lt; bar.b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 规定对象排序的算法：先按照 a 从大到小排序；如果 a 相等，则按照 b 从大到小排序</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="type">static</span> <span class="title">decrease</span><span class="params">(<span class="type">const</span> Foo &amp;foo1, <span class="type">const</span> Foo &amp;foo2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (foo1.a &gt; foo2.a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (foo1.a == foo2.a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> foo1.b &gt; foo2.b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">inline</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, Foo &amp;foo)</span><br><span class="line">    &#123;</span><br><span class="line">        out &lt;&lt; foo.a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; foo.b &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> seed = chrono::system_clock::<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line">    <span class="function">minstd_rand0 <span class="title">generator</span><span class="params">(seed)</span></span>;    <span class="comment">// minstd_rand0 is a standard linear_congruential_engine</span></span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;Foo&gt; <span class="title">myVec</span><span class="params">(<span class="number">10</span>, Foo())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Foo &amp;foo : myVec)           <span class="comment">// 随机赋值</span></span><br><span class="line">    &#123;</span><br><span class="line">        foo.a = <span class="built_in">generator</span>() % <span class="number">5</span>;</span><br><span class="line">        foo.b = <span class="built_in">generator</span>() % <span class="number">5</span>;</span><br><span class="line">        cout &lt;&lt; foo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(myVec.<span class="built_in">begin</span>(), myVec.<span class="built_in">end</span>()); <span class="comment">// 排序一：默认从小到大，调用 operator &lt;</span></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;after sorting using operator &lt;&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (Foo &amp;foo : myVec)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; foo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(myVec.<span class="built_in">begin</span>(), myVec.<span class="built_in">end</span>(), Foo::decrease);  <span class="comment">// 排序二：按照 Foo::decrease 的规则从大到小排序</span></span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;after sorting using Foo::decrease()&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (Foo &amp;foo : myVec)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; foo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 排序三：使用 lambda 的方式进行排序，排序的方法和 Foo::decrease 一样</span></span><br><span class="line">    <span class="built_in">sort</span>(myVec.<span class="built_in">begin</span>(), myVec.<span class="built_in">end</span>(), [](<span class="type">const</span> Foo &amp;foo1, <span class="type">const</span> Foo &amp;foo2)</span><br><span class="line">    &#123;                                                 </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (foo1.a &gt; foo2.a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (foo1.a == foo2.a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> foo1.b &gt; foo2.b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;   );</span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;after sorting using lambda&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (Foo &amp;foo : myVec)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; foo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Uniform-Initialization"><a class="header-anchor" href="#Uniform-Initialization"></a>Uniform Initialization</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Compiler will translate &#123;&#125; as initializer_list&lt;int&gt;</span></span><br><span class="line"><span class="keyword">template</span> <span class="keyword">class</span> <span class="title class_">vector</span>&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">    <span class="built_in">vector</span>( initializer_list&lt;T&gt; list )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">auto</span> it = list.<span class="built_in">begin</span>(); it != list.<span class="built_in">end</span>(); ++it )</span><br><span class="line">            <span class="built_in">push_back</span>(*it);  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++面向对象 Part2</title>
    <url>/2021/05/27/C++%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-Part2/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>
<p>多态</p>
</li>
<li>
<p>操作符重载</p>
</li>
</ul>
<span id="more"></span>
<h1 id="多态"><a class="header-anchor" href="#多态"></a>多态</h1>
<ul>
<li>同一论域中一个元素可有多种解释</li>
<li>提高语言灵活性</li>
<li>程序设计语言
<ul>
<li>一名多用  ----   函数重载</li>
<li>类属    ----  template</li>
<li>OO程序设计  ----    虚函数</li>
</ul>
</li>
</ul>
<h1 id="操作符重载"><a class="header-anchor" href="#操作符重载"></a>操作符重载</h1>
<ul>
<li>
<p>函数重载( 见下文&quot;函数匹配&quot; )</p>
<ul>
<li>名同， 参数不同</li>
<li>静态绑定
<ul>
<li>歧义控制
<ul>
<li>顺序</li>
<li>更好匹配</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>操作符重载</p>
</li>
<li>
<p>动机</p>
<p>操作符语义</p>
<ul>
<li><code>built_in</code>类型</li>
<li>自定义数据类型</li>
</ul>
</li>
<li>
<p>作用</p>
<ul>
<li>提高可读性</li>
<li>提高可扩展性</li>
</ul>
</li>
</ul>
<h2 id="函数匹配"><a class="header-anchor" href="#函数匹配"></a>函数匹配</h2>
<p>在大多数情况下我们都能确定某次调用应该选择哪个重载函数。然而当几个重载函数的形参数量相等，以及某些形参的类型可以由其他类型转换得来时，这项工作就不那么容易了。以下面这组函数及其调用为例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">double</span>, <span class="type">double</span>=<span class="number">3.14</span>)</span></span>;</span><br><span class="line"><span class="built_in">f</span>(<span class="number">5.6</span>);</span><br></pre></td></tr></table></figure>
<p>确定候选函数和可行函数</p>
<p>函数匹配的第一步是选定本次调用对应的重载函数集，集合中的函数成为候选函数。候选函数具备两个特征：一是与被调用的函数<strong>同名</strong>，二是其声明在调用点<strong>可见</strong>。在这个例子中，有4个名为f的候选函数。</p>
<p>第二步考察本次调用提供的实参，然后从候选函数中选出能被这组实参调用的函数，这些新选出的函数称为可行函数。可行函数也有两个特征：一是其形参数量与本次调用提供的实参<strong>数量相等</strong>。二是每个实参的类型与对应的形参<strong>类型相同，或者能转换成形参的类型</strong>。</p>
<p>我们能根据实参的数量从候选函数中排除掉两个。不使用形参的函数和使用两个<code>int</code>形参的函数显然都不适合本次调用，这是因为我们的调用只提供了一个实参，而它们分别有0个和2个形参。</p>
<p>使用一个<code>int</code>形参的函数和使用两个<code>double</code>形参的函数是可行的，它们都能用一个实参调用。其中最后那个函数本应该接受两个<code>double</code>值，但是因为它含有一个默认实参，所以只用一个实参也能调用它。</p>
<p>在使用实参数量初步判别了候选函数后，接下来考察实参的类型是否与形参匹配。和一般的函数调用类似，实参与形参的含义可能是它们具有相同的类型，也可能是实参类型和形参类型满足转换规则。在上面的例子中，剩下的两个函数都是可行的：</p>
<p><code>f(int)</code>是可行的，因为实参类型double能转换成形参类型<code>int</code><br>
　　<code>f(double,double)</code>是可行的，因为它的第二个形参提供了默认值，而第一个形参的类型正好是double，与函数使用的实参类型完全一致。</p>
<p>寻找最佳匹配（如果有的话）</p>
<p>函数匹配的第三步是从可行函数中选择与本次调用最匹配的函数。在这一过程中，逐一检查函数调用提供的实参，寻找形参类型与实参类型最匹配的那个可行函数。最匹配的基本思想是，实参类型与形参类型越接近，它们匹配得越好。在我们的例子中，调用只提供了一个实参，它的类型是double。如果调用<code>f(int)</code>，实参将不得不从<code>double</code>转换成<code>int</code>。另一个可行函数<code>f(double,double)</code>则与实参精确匹配。精确匹配比需要类型转换的匹配更好。因此，编译器把f(6.5)解析成对含有两个<code>double</code>形参的函数的调用，并使用默认值填补我们未提供的第二个实参。</p>
<p>含有多个形参的函数匹配<br>
　　当实参的数量有两个或更多时，函数匹配就比较复杂了。对于前面那些名为f的函数，我们来分析如下的调用会发生什么情况：</p>
<p>​                          <code>f(42, 2.56);</code></p>
<p>选择可行函数的方法和只有一个实参的一样，编译器选择那些形参数量满足要求且实参类型和形参类型能够匹配的函数。此例中，可行函数包括<code>f(int, int)</code>和<code>f(double, double)</code>。接下来，编译器依次检查每个实参以确定哪个函数是最佳匹配。如果有且只有一个函数满足下列条件，则匹配成功：</p>
<ul>
<li>该函数每个实参的匹配都不劣于其他可行函数需要的匹配</li>
<li>只有一个实参的匹配优于其他可行函数提供的匹配</li>
</ul>
<p>如果在检测了所以实参之后没有任何一个函数脱颖而出，则该调用是错误的。编译器将报告二义性调用的信息。</p>
<p>在上面的调用中，只考虑第一个实参时我们发现函数<code>f(int, int)</code>能精确匹配；要想匹配第二个函数，<code>int</code>类型必须转换成<code>double</code>类型。显然需要内置类型转换的匹配劣于 精确匹配，因此仅就第一个实参来说，<code>f(int, int)</code>比<code>f(double, double)</code>更好。</p>
<p>接下来考虑第二个实参，此时<code>f(double, double)</code>是精确匹配，要想调用<code>f(int, int)</code>必须将2.56从<code>double</code>类型转换成<code>int</code>类型，因此仅就第二个实参来说，<code>f(double, double)</code>更好。</p>
<p>编译器最终将因为这个调用具有二义性而拒绝其请求：因为每个函数函数各自在一个实参上实现了更好的匹配，从整体上无法匹配孰优孰劣。看起来我们似乎可以通过强制类型转换其中的一个实参来实参函数的匹配，但是在设计良好的系统中，不应该对实参进行强制类型转换。</p>
<p>实参类型转换<br>
　　为了确定最佳匹配，编译器将实参类型到形参类型的转换划分成几个等级，具体排序如下所示：<br>
1.<strong>精确匹配</strong>，包括以下情况：<br>
　　实参类型和形参类型相同<br>
　　实参从数组类型或函数类型转换成对应的指针类型<br>
　　向实参添加顶层<code>const</code>或者从实参中删除顶层<code>const</code><br>
2.通过<code>const</code>转换实现的匹配<br>
3.通过类型提升实现的匹配<br>
4.通过算术类型转换或指针转换实现的匹配<br>
5.通过类类型转换实现的匹配</p>
<p>需要类型提升和算术类型转换的匹配<br>
　　内置类型的提升和转换可能在函数匹配时产生意想不到的结果，幸运的是，在设计良好的系统中函数很少会含有下面例子类似的形参。<br>
　　分析函数前，我们应该知道小整型一般都会提升到<code>int</code>类型或更大的整数类型。假设有两个函数，一个接受<code>int</code>，另一个接受<code>short</code>，则只有当调用的是<code>short</code>类型的值时才会选择short版本的函数。有时候，即使实参是一个很小的整数值，也会直接将它提升成<code>int</code>类型；此时使用<code>short</code>版本反而会导致类型转换：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ff</span><span class="params">(<span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ff</span><span class="params">(<span class="type">short</span>)</span></span>;</span><br><span class="line"><span class="built_in">ff</span>(<span class="string">&#x27;a&#x27;</span>);  <span class="comment">//char提升成int，调用ff(int)</span></span><br></pre></td></tr></table></figure>
<p>所有的算术类型转换的级别都一样。例如，从<code>int</code>向<code>unsigned int</code>的转换并不比<code>int</code>向<code>double</code>的转换级别高：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">mainip</span><span class="params">(<span class="type">long</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mainip</span><span class="params">(<span class="type">float</span>)</span></span>;</span><br><span class="line"><span class="built_in">mainip</span>(<span class="number">3.14</span>);  <span class="comment">//错误，二义性调用</span></span><br></pre></td></tr></table></figure>
<p>字面值3.14的类型是double，它既能转换成long也能转换成float。因为存在两种可能的算术类型转换，所以该调用具有二义性。</p>
<p>函数匹配和<code>const</code>实参<br>
　　如果重载函数的区别在于它们的引用类型的形参是否引用了<code>const</code>，或者指针类型的形参是否指向<code>const</code>，则当调用发生时编译器通过实参是否是常量来决定选择哪个函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Record <span class="title">lookup</span><span class="params">(Account &amp;)</span></span>;    <span class="comment">//函数的参数是Account的引用</span></span><br><span class="line"><span class="function">Record <span class="title">lookup</span><span class="params">(<span class="type">const</span> Account &amp;)</span></span>;  <span class="comment">//函数的参数是一个常量引用</span></span><br><span class="line"><span class="type">const</span> Account a;</span><br><span class="line">Account b;</span><br><span class="line"></span><br><span class="line"><span class="built_in">lookup</span>(a);  <span class="comment">//调用Record lookup(const Account &amp;);</span></span><br><span class="line"><span class="built_in">lookup</span>(b);  <span class="comment">//调用Record lookup(Account &amp;);</span></span><br></pre></td></tr></table></figure>
<p>在第一个调用中，我们传入的是<code>const</code>对象a。因为不能把普通引用绑定到<code>const</code>对象上，所以此例中唯一可行的函数是以常量引用作为形参的那个函数，并且调用该函数与实参a精确匹配。<br>
　　在第二个调用中，我们传入的是非常量对象b。对于这个调用来说，两个函数都是可行的，因为我们既可以使用b初始化常量引用也可以用它初始化非常量引用。然而，用非常量对象初始化常量引用需要类型转换，接受非常量形参的版本则与b精确匹配。因此，应该选用非常量版本的函数。<br>
　　指针类型的形参也类似，如果两个函数的唯一区别是它的指针形参指向常量或非常量，则编译器能通过实参是否是常量决定选用哪个函数：如果实参是指向常量的指针，调用形参是<code>const*</code>的函数；如果实参是指向非常量的值，调用形参是普通指针函数。</p>
<h2 id="操作符重载-2"><a class="header-anchor" href="#操作符重载-2"></a>操作符重载</h2>
<ul>
<li>
<p>可以作为成员函数重载</p>
</li>
<li>
<p>也可以作为全局函数重载</p>
</li>
<li>
<p>重载时,必须至少包含一个用户自定义类型的操作数( 否则你就会更改编译器定义的操作符语义,这是不允许的 )</p>
</li>
<li>
<p>不可重载的操作符</p>
<ul>
<li><code>.</code> <code>.*</code> <code>::</code> <code>?:</code></li>
</ul>
</li>
<li>
<p>基本原则</p>
</li>
<li>
<p>方式</p>
<ul>
<li>类成员函数</li>
<li><strong>带有类参数</strong>的全局函数</li>
</ul>
</li>
<li>
<p>遵循原有语法</p>
<ul>
<li>单目/双目</li>
<li>优先级</li>
<li>结合性</li>
</ul>
</li>
</ul>
<p>笨蛋写法:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title class_">Complex</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> real, imag;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>()</span><br><span class="line">    &#123; real = <span class="number">0</span> ; imag = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="built_in">Complex</span>( <span class="type">double</span> r , <span class="type">double</span> i ) &#123; real = r; imag = i; &#125;</span><br><span class="line">    <span class="function">Complex <span class="title">add</span><span class="params">( Complex &amp;x )</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">a</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span>,<span class="title">b</span><span class="params">(<span class="number">2</span>,<span class="number">4</span>)</span>,c</span>;</span><br><span class="line">    c = a.<span class="built_in">add</span>(b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="作为成员函数重载"><a class="header-anchor" href="#作为成员函数重载"></a>作为成员函数重载</h3>
<ul>
<li>
<p>将运算符重载函数声明为类的成员函数时，二元运算符的参数只有一个，一元运算符不需要参数。之所以少一个参数，是因为这个参数是隐含的。</p>
</li>
<li>
<p>一般是内联函数</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> real, imag;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>()</span><br><span class="line">    &#123; real = <span class="number">0</span> ; imag = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="built_in">Complex</span>( <span class="type">double</span> r , <span class="type">double</span> i ) &#123; real = r; imag = i; &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>+ ( Complex &amp;x)</span><br><span class="line">    &#123;</span><br><span class="line">        Complex temp;</span><br><span class="line">        temp.real = real + x.real;</span><br><span class="line">		temp.real = imag + x.imag;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//重载一元负号，不需要参数</span></span><br><span class="line">     complex <span class="keyword">operator</span> -()    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">complex</span>(-real, -image);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">a</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span>,<span class="title">b</span><span class="params">(<span class="number">2</span>,<span class="number">4</span>)</span>,c</span>;</span><br><span class="line">    c = a + b; <span class="comment">//作为成员函数重载时, 左式会被转换为  c = a.operator+(b);</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="作为全局函数重载"><a class="header-anchor" href="#作为全局函数重载"></a>作为全局函数重载</h3>
<p>将运算符重载函数声明为全局函数时，二元操作符就需要两个参数，一元操作符需要一个参数( 因为没有<code>this</code> ) . 而且其中必须有一个参数是自定义类型，好让编译器区分这是程序员自定义的运算符，防止程序员修改用于内置类型的运算符的性质。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Complex</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> real, imag;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Complex</span>()</span><br><span class="line">    &#123; real = <span class="number">0</span> ; imag = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="built_in">Complex</span>( <span class="type">double</span> r , <span class="type">double</span> i ) &#123; real = r; imag = i; &#125;</span><br><span class="line">    <span class="keyword">friend</span> Complex <span class="keyword">operator</span>+ ( Complex &amp;x , Complex &amp;y ); <span class="comment">//友元函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Complex <span class="keyword">operator</span>+ ( Complex &amp;x , Complex &amp;y )</span><br><span class="line">&#123;</span><br><span class="line">    Complex temp;</span><br><span class="line">    temp.real = x.real + y.real;</span><br><span class="line">    temp.imag = x.imag + y.imag;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">a</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span>,<span class="title">b</span><span class="params">(<span class="number">2</span>,<span class="number">4</span>)</span>,c</span>;</span><br><span class="line">    c = a + b; <span class="comment">//作为全局函数重载时,会被转换为 +(a,b)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id=""><a class="header-anchor" href="#"></a><code>&lt;&lt;</code></h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Point</span>()&#123;&#125;;</span><br><span class="line">    <span class="built_in">Point</span> (<span class="type">int</span> x, <span class="type">int</span> y): <span class="built_in">x</span>(x),<span class="built_in">y</span>(y) &#123;&#125;;</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out , <span class="type">const</span> Point &amp;a);  </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out , <span class="type">const</span> Point &amp;a)&#123;</span><br><span class="line">    out &lt;&lt; <span class="string">&quot;&lt;Point&gt;( &quot;</span> &lt;&lt; a.x &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; a.y &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">a</span><span class="params">(<span class="number">2</span>,<span class="number">4</span>)</span>,<span class="title">b</span><span class="params">(<span class="number">5</span>,<span class="number">3</span>)</span></span>;</span><br><span class="line">    Point c = a + b;</span><br><span class="line">    cout &lt;&lt; c &lt;&lt; endl;    <span class="comment">//转换为 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>&lt;&lt;</code>只能作为<strong>全局函数</strong>重载, 因为如果作为成员函数重载, 那么它的第一个参数必定是<code>this</code>,这显然是不合理的, <code>&lt;&lt;</code>的第一个参数应该是<code>cout</code>. 比如说, 对于<code>cout &lt;&lt; c </code> ,如果<code>&lt;&lt;</code>作为成员函数重载 , 那么应该会写成<code>c &lt;&lt; cout</code>  这种形式,这是很离谱的.</p>
<p><code>&gt;&gt;</code>同理, <code>&lt;&lt;</code>和&gt;&gt;都只能作为全局函数重载</p>
<ul>
<li>注： 模板的<code>&lt;&lt;</code>重载， 只要加上<code>泛型参数</code>就行了</li>
</ul>
<h3 id="双目操作符重载"><a class="header-anchor" href="#双目操作符重载"></a>双目操作符重载</h3>
<ul>
<li>
<p>类成员函数</p>
<ul>
<li>
<p>格式</p>
<p><code>&lt;ret type&gt; operator#( &lt;arg&gt; )</code></p>
</li>
<li>
<p><code>this</code>隐含</p>
</li>
<li>
<p>使用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&lt;<span class="keyword">class</span> <span class="title class_">name</span>&gt; a, b;</span><br><span class="line">a <span class="meta"># b;</span></span><br><span class="line">a.<span class="keyword">operator</span>#(b); <span class="comment">//等价</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>全局函数</p>
<ul>
<li>
<p>友元<code>friend &lt;ret type&gt; operator#( &lt;arg1&gt;, &lt;arg2&gt;)</code></p>
</li>
<li>
<p>格式<code>&lt;ret type&gt; operator#( &lt;arg1&gt;, &lt;arg2&gt;)</code></p>
</li>
<li>
<p>推荐所有的双目操作符都以<strong>全局函数</strong>重载, 因为可以实现交换律:</p>
</li>
<li>
<p>通常只将那些不需要实现交换律的二元运算符重载为<strong>成员函数</strong>. 比如 赋值和复合赋值运算符<code>=</code>,<code>+=</code> , <code>-=</code> , <code>*=</code>, <code>/=</code>, <code>&amp;=</code> . 因为其左操作数( 成为宿主对象 ) 和右操作数( 成为参数对象 ) 的作用不相同, 在这些操作符中, 左操作数扮演的角色与右操作数不同. 左操作数代表左值, 右操作数代表右值, 操作的返回值一般为产生副作用后的宿主对象的值.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CL</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">friend</span> CL <span class="keyword">operator</span>+ ( <span class="type">int</span> i , CL &amp; a );</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">friend</span> CL <span class="keyword">operator</span>+ ( CL &amp; a , <span class="type">int</span> i );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以实现交换律</span></span><br><span class="line">obj + <span class="number">10</span>;</span><br><span class="line"><span class="number">10</span> + obj;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>限制</p>
<ul>
<li><code>=</code> <code>()</code> <code>[]</code>  不能作为全局函数重载,只能作为成员函数重载
<ul>
<li>原因:
<ul>
<li>对于<code>()</code> <code>[]</code>, 它们都需要先计算出左边对象的类型,再计算函数. 为了确保这件事,编译器规定这两个操作符只能作为成员函数重载( <code>this</code>总是优先被计算出 )</li>
<li>对于<code>=</code> 由于以拷贝的方式初始化一个对象时，会调用拷贝构造函数；当给一个对象赋值时，会调用重载过的赋值运算符。因此<code>=</code>不能作为成员函数重载</li>
</ul>
</li>
</ul>
</li>
<li>永远不要重载<code>&amp;&amp;</code>和<code>||</code> , 重载后无法实现短路</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="过度设计-错误设计"><a class="header-anchor" href="#过度设计-错误设计"></a>过度设计 = 错误设计</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rational</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    	<span class="built_in">Rational</span>(<span class="type">int</span>,<span class="type">int</span>);</span><br><span class="line">    <span class="type">const</span> Ration&amp; <span class="keyword">operator</span>*(<span class="type">const</span> Rational &amp;r) <span class="type">const</span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> n , d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//operator* 的函数体</span></span><br><span class="line"><span class="comment">// 尝试1,这是一个栈区的构造函数,错在不能返回一个局部变量的引用或指针</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Rational</span>( n* (r.n), d* ( r.d ));</span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试2,这样是错的,因为对于 w = a*b*c ;  a*b的返回的对象是个匿名对象,再也找不到了,会造成内存泄漏. 也就是说,不能支持链式调用</span></span><br><span class="line">Rational *result = <span class="keyword">new</span> <span class="built_in">Rational</span>( n*(r.n), d*(r.d) );</span><br><span class="line"><span class="keyword">return</span> *result; </span><br><span class="line"></span><br><span class="line"><span class="comment">//尝试3,用一个类静态变量,实现支持链式调用,这样也是错的,因为</span></span><br><span class="line"><span class="comment">//if( (a*b) == (c*d) ) 对于这种写法来说是永真式,返回的永远是同一个</span></span><br><span class="line"><span class="type">static</span> Rational result; <span class="comment">//设置一个类静态变量</span></span><br><span class="line">result.n = n*(r.n);</span><br><span class="line">result.d = d*(r.d);</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure>
<p>可以看到,对于<code>const Ration&amp; operator*(const Rational &amp;r) const;</code>这种写法,实际上是错误的, 所以操作符重载的标准写法一直都是<code>Ration operator*(const Rational &amp;r) </code>, 结尾的<code>const</code>没什么意义,所以也省略了.</p>
<h3 id="a-和-a"><a class="header-anchor" href="#a-和-a"></a><code>a++</code> 和 <code>++a</code></h3>
<ul>
<li><code>后缀运算符</code>返回的是<code>右值</code>, <code>前缀运算符</code>返回的是<code>左值</code>( 返回的就是a, prefix ++等价于a = a+1 )</li>
</ul>
<p>为区别前置和后置运算符，C++编译器要求，需要在<strong>后缀运算符重载函数中加参数</strong><code>int</code>，这个类型在此除了以示区别之外并不代表任何实际含义, 被称为哑整型参数<code>dummy interger parameter</code>；如果不加，编译器无法区分是前置++，还是后置++，导致报错。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Counter</span>() &#123;value = <span class="number">0</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//前置++运算符，需要引用返回，不需要参数。返回自增后的值，且返回的是一个左值 </span></span><br><span class="line">        Counter&amp; <span class="keyword">operator</span>++() <span class="comment">//++a</span></span><br><span class="line">        &#123;</span><br><span class="line">            value++;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//后置++，不需要引用返回，需要参数区分。返回自增前的值，且返回的是一个右值</span></span><br><span class="line">  </span><br><span class="line">        Counter <span class="keyword">operator</span> ++(<span class="type">int</span>) <span class="comment">//a++ //dummy argument</span></span><br><span class="line">        &#123;</span><br><span class="line">            Counter tmp = *<span class="keyword">this</span>;</span><br><span class="line">            value++;</span><br><span class="line">            <span class="keyword">return</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>前缀运算符</p>
<ul>
<li>返回更改后的宿主对象( 宿主对象不能是常量 ), 这意味着我们不应该创建新对象, 而是应该更改宿主对象, 并返回宿主对象, 这意味着我们可以通过<strong>引用返回</strong>, C++允许级联这个运算符( <code>++++x</code> 和 <code>----x</code> ), 这意味着返回对象不能是常量, 必须是<strong>左值</strong></li>
</ul>
</li>
<li>
<p>后缀运算符</p>
<ul>
<li>
<p>需要哑元参数, 哑元参数的作用是创建一个唯一的前面来区分前缀和后缀运算符, 这在程序中被忽略</p>
</li>
<li>
<p>返回对象是在更改前创建的临时对象,这意味着我们不能通过引用返回该对象. <strong>返回的对象是常量( 右值 )</strong> , 因为C++ 不允许级联操作, 例如 a++-- 或 a----</p>
</li>
</ul>
</li>
</ul>
<h3 id="-2"><a class="header-anchor" href="#-2"></a><code>=</code></h3>
<ul>
<li>当我们没有自己设计等号运算符的重载函数，编译器会自动生成一个<strong>浅拷贝</strong>的赋值运算符的重载函数。</li>
<li><strong>浅拷贝</strong>：只是简单地将一个对象的内存数据赋值给另一个对象，如果这个对象成员变量引用了外部资源时（new），那么这两个对象的成员变量都指向这个空间，当这两个对象生存周期结束时，进行析构，那么就会崩溃，对同一块内存我们delete了两次</li>
<li>逐个成员赋值( member-wise assignment )</li>
<li>对含有对象成员的类, 该定义是递归的</li>
<li>赋值操作符重载不能被继承</li>
</ul>
<p>对于如下代码,存在许多问题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="type">char</span> *p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">A</span>( <span class="type">int</span> i , <span class="type">int</span> j , <span class="type">char</span> *s )</span><br><span class="line">        :<span class="built_in">x</span>(i),<span class="built_in">y</span>(j)</span><br><span class="line">        &#123;</span><br><span class="line">            p = <span class="keyword">new</span> <span class="type">char</span>[ <span class="built_in">strlen</span>(s) + <span class="number">1</span> ];</span><br><span class="line">            <span class="built_in">strcpy</span>(p,s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">virtual</span> ~<span class="built_in">A</span>() &#123; <span class="keyword">delete</span>[] p; &#125;</span><br><span class="line">        </span><br><span class="line">        A&amp; <span class="keyword">operator</span> =( A &amp;a )</span><br><span class="line">        &#123;</span><br><span class="line">            x = a.x;</span><br><span class="line">            y = a.y;</span><br><span class="line">            <span class="keyword">delete</span>[] p;</span><br><span class="line">            p = <span class="keyword">new</span> <span class="type">char</span>[ <span class="built_in">strlen</span>(a.p) + <span class="number">1</span> ];</span><br><span class="line">            <span class="built_in">strcpy</span>( p, a.p );</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>问题一,对于:</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">A a,b;</span><br><span class="line">b = a;</span><br></pre></td></tr></table></figure>
<p>由于<code>new</code>会抛异常,当<code>new</code>发生错误的时候, 按理来说<code>b</code>是不变的, 但现在<code>b</code>的成员指针成为了空指针.</p>
<ul>
<li>问题二, 无法支持自我赋值<code>s = s</code>, 这样会报错(  对于 <code>strcpy( p, a.p )</code>, <code>p</code> 和<code>a.p</code>都被删了 )</li>
</ul>
<p>安全的写法是:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *p2 = <span class="keyword">new</span> <span class="type">char</span>[ <span class="built_in">strlen</span>(a.p) + <span class="number">1</span>  ];</span><br><span class="line"><span class="built_in">strcpy</span>(p2,a.p);</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">p = p2;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span></span><br></pre></td></tr></table></figure>
<ul>
<li>赋值是一种不对称操作, 左操作数是一个接受操作副作用的佐治对象, 右操作数是一个不应该再处理过程中更改的右值对象. 必须指出, <strong>要使用此操作符, 左操作数和右操作数必须已经存在.</strong> 换言之, 此运算符不同于<code>拷贝构造函数</code>, 后者从现有对象创建新对象. 对于赋值运算符, 两个对象都必须存在. 我们只更改左对象, 使右对象是右对象的精确副本.</li>
<li>重载辅助运算符需要验证<strong>宿主对象和参数对象不是同一个对象(地址不同)</strong>. 如果对象是在堆中创建的, 这一点尤其重要. 由于在复制参数对象之前必须删除宿主对象, 如果两个对象相同, 则参数对象( 与宿主对象的物理地址相同 ) 也被删除了. 从而没有了要复制的内容.</li>
<li>赋值运算符是右向左结合的. 换言之,有 <code>z = y = x</code>, 这被解释为<code> z = ( y = x )</code> . 但是,C++要求z被看作对y的引用, 这就是返回的对象必须通过引用返回的原因.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">A &amp;A:: <span class="keyword">operator</span> =( <span class="type">const</span> A &amp;right )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( *<span class="keyword">this</span> != right ) <span class="comment">//检查二者是不是同一个对象</span></span><br><span class="line">    &#123;</span><br><span class="line">        number = right.number; <span class="comment">// number是A的成员</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="-3"><a class="header-anchor" href="#-3"></a><code>[]</code></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">class</span> <span class="title class_">string</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="type">char</span> *p;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">string</span>( <span class="type">char</span> *p1 )</span><br><span class="line">        &#123;</span><br><span class="line">            p = <span class="keyword">new</span> <span class="type">char</span>[ <span class="built_in">strlen</span>(p1) + <span class="number">1</span> ];</span><br><span class="line">            <span class="built_in">strcpy</span>( p, p1 );</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//更改器函数</span></span><br><span class="line">     	<span class="type">char</span>&amp; <span class="keyword">operator</span> [](<span class="type">int</span> i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> p[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//访问器函数</span></span><br><span class="line">        <span class="type">const</span>  <span class="type">char</span> <span class="keyword">operator</span> [](<span class="type">int</span> i) <span class="type">const</span> <span class="comment">// const string * const this</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> p[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">virtual</span> ~<span class="built_in">string</span>()&#123;</span><br><span class="line">            <span class="keyword">delete</span>[] p;</span><br><span class="line">        &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配 char&amp; operator [](int i)</span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">( <span class="string">&quot;aacd&quot;</span> )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配 const char operator [](int i) const</span></span><br><span class="line"><span class="function"><span class="type">const</span> string <span class="title">cs</span><span class="params">(<span class="string">&quot;const&quot;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">s[<span class="number">2</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">cout &lt;&lt; cs[<span class="number">0</span>];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>在下标操作符的重载中,由于不知道用户会调用哪个版本,所以应当<strong>始终重载两个版本</strong></p>
</li>
<li>
<p>由于函数末尾<code>const</code>的作用实际上是改变参数列表( 将<code>string * const this</code> 更改为<code>const string * const this</code>),所以编译器函数匹配时会精准匹配</p>
</li>
</ul>
<h4 id="多维数组"><a class="header-anchor" href="#多维数组"></a>多维数组</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Array2D</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Arr1D</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Array1D</span>( <span class="type">int</span> *p ) &#123; <span class="keyword">this</span> -&gt; p = p; &#125;</span><br><span class="line">        <span class="type">int</span>&amp; <span class="keyword">operator</span>[](<span class="type">int</span> index) <span class="type">const</span> &#123; <span class="keyword">return</span> p[index]; &#125;</span><br><span class="line">        <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> *p;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">Array2D</span>( <span class="type">int</span> n1, <span class="type">int</span> n2 ) &#123; p = <span class="keyword">new</span> <span class="type">int</span>[n1 * n2] ; num1 = n1; num2 = n2; &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Array2D</span>() &#123; <span class="keyword">delete</span>[] p; &#125;</span><br><span class="line">    Array1D <span class="keyword">operator</span>[] ( <span class="type">int</span> index ) &#123; <span class="keyword">return</span> p+ index * num2; &#125; <span class="comment">//隐式转换, 将 int* 转换为 Array1D</span></span><br><span class="line">    <span class="type">const</span> Array1D <span class="keyword">operator</span>[] ( <span class="type">int</span> index ) <span class="type">const</span> &#123;<span class="keyword">return</span> p + index * num2; &#125;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> *p;</span><br><span class="line">    <span class="type">int</span> num1, num2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>如果构造函数只有一个参数, 那这个参数就可以用来隐式转换. 前提是构造函数前面没有<code>explicit</code>关键字 ,如果加了, 就代表这个构造函数只能显式调用, 不能隐式转换.</p>
<h3 id="-4"><a class="header-anchor" href="#-4"></a><code>()</code></h3>
<p><code>()</code>有三个用途: <code>优先级声明</code>, <code>函数调用</code>, <code>类型转换</code>. 后两者都可以重载</p>
<h3 id="-5"><a class="header-anchor" href="#-5"></a><code>&amp;</code></h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">	A* <span class="keyword">operator</span>&amp;()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> A* <span class="keyword">operator</span>&amp;() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="函数调用操作符"><a class="header-anchor" href="#函数调用操作符"></a>函数调用操作符</h4>
<ul>
<li>实现了<code>函数对象</code>, 相当于更高级的函数指针. 函数对象可以<strong>保存状态</strong></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Function</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> para;</span><br><span class="line">    <span class="type">int</span> lowerBound, upperBound;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">operator</span><span class="params">()</span> <span class="params">( <span class="type">double</span> , <span class="type">int</span>, <span class="type">int</span> )</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Func f;</span><br><span class="line"><span class="built_in">f</span>( <span class="number">2.4</span>, <span class="number">0</span> ,<span class="number">8</span> ) <span class="comment">//函数对象</span></span><br></pre></td></tr></table></figure>
<h4 id="类型转换运算符"><a class="header-anchor" href="#类型转换运算符"></a>类型转换运算符</h4>
<ul>
<li>减少混合计算中需要定义的操作符重载函数的数量</li>
<li>重载数值型，如<code>int</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rational</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>：</span><br><span class="line">        <span class="built_in">Rational</span>( <span class="type">int</span> n1, <span class="type">int</span> n2 )</span><br><span class="line">        &#123;</span><br><span class="line">            n = n1;</span><br><span class="line">            d = n2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//什么都不返回，没有返回值</span></span><br><span class="line"><span class="comment">//只能转换对象本身，所以不需要参数。因为只能对调用它的对象做类型转换，</span></span><br><span class="line"><span class="comment">//只能作为成员函数</span></span><br><span class="line">        <span class="function"><span class="keyword">operator</span> <span class="title">double</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">double</span>) (n/d);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">int</span> n,d;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="-6"><a class="header-anchor" href="#-6"></a><code>-&gt;</code></h3>
<ul>
<li>
<p><code>-&gt;</code>智能指针</p>
<ul>
<li>
<p><code>-&gt;</code>为二元运算符 , <strong>重载的时候按一元操作符重载描述</strong>, 编译器会在描述后对它重写.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">A a;</span><br><span class="line">A -&gt; <span class="built_in">f</span>();</span><br><span class="line">a.<span class="keyword">operator</span>-&gt;( f ); <span class="comment">// ?????</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//编译器会将它改写为</span></span><br><span class="line">a.<span class="keyword">operator</span> -&gt;() -&gt;<span class="built_in">f</span>();</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>首先, 按照一元操作符描述, <code>a.operator-&gt;( f );</code> 会被描述为``a.operator -&gt;()<code>. 实际上</code>a.operator -&gt;()<code> 返回的是</code>a的指针<code>, 然后编译器将其改写, 再加上不重载的</code> -&gt; f()`</p>
</li>
<li>
<p>实际上<code>a.operator -&gt;()</code>可以返回一个也重载了<code>-&gt;</code>的对象, 然后<code>-&gt; f()</code>再进行重载..... 你可以这么写, 但是非常蠢</p>
</li>
</ul>
<h3 id="new-、delete"><a class="header-anchor" href="#new-、delete"></a><code>new</code> 、<code>delete</code></h3>
<ul>
<li><code>new</code>, <code>delete</code>
<ul>
<li>频繁调用系统的存储管理, 影响效率( 实际上分配内存降低了系统的很大效率 )</li>
<li>程序自身管理内存, 提高效率</li>
<li>方法
<ul>
<li>调用系统存储分配, 申请一块较大的内存</li>
<li>针对该内存, 自己管理存储分配, 去配</li>
<li>通过重载<code>new</code>与<code>delete</code>来实现</li>
<li>重载的<code>new</code>和<code>delete</code>是静态成员. 由于它们肯定是静态的, 所以可加可不加<code>static</code>关键字</li>
<li>重载的<code>new</code>和<code>delete</code>遵循类的访问控制,可继承</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="重载new"><a class="header-anchor" href="#重载new"></a>重载<code>new</code></h4>
<ul>
<li>
<p><code>void *operator new( size_t size, ...)</code></p>
<ul>
<li>名: <code>operator new</code></li>
<li>返回类型: <code>void*</code></li>
<li>第一个参数: <code>size_t ( unsigned int )</code>
<ul>
<li>系统自动计算对象的大小, 并传值给<code>size</code></li>
</ul>
</li>
<li>其他参数: 可有可无
<ul>
<li><code>A *p = new(...) A</code>, 表示传给new的其他实参</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>new</code>的重载可以有多个</p>
</li>
<li>
<p>如果重载了<code>new</code>, 那么通过<code>new</code>动态创建该类的对象时将不再调用内置的(预定义的)new</p>
</li>
<li>
<p>调用全局<code>new</code>:  <code>:: operator new</code></p>
</li>
<li>
<p>定位<code>new</code>: 在栈上new出一块空间, 这样可以复用栈区地址</p>
</li>
</ul>
<h3 id="重载-delete"><a class="header-anchor" href="#重载-delete"></a>重载 <code>delete</code></h3>
<ul>
<li><code>void operator delete( void*p, size_t size )</code>
<ul>
<li>名: <code>operator delete</code></li>
<li>返回类型: <code>void</code></li>
<li>第一个参数: <code>void *</code>
<ul>
<li>被撤销对象的地址</li>
</ul>
</li>
<li>第二个参数: 可有可无; 如果有,则必须是<code> size _t</code>类型
<ul>
<li>被撤销对象的<strong>实际</strong>大小</li>
</ul>
</li>
</ul>
</li>
<li><code>delete</code>的重载只能有一个</li>
<li>如果重载了<code>delete</code>,那么通过<code>delete</code>撤销对象时将不再调用内置的(预定义的<code>delete</code>)</li>
</ul>
]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++面向对象</title>
    <url>/2022/09/26/C++%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Basic Idea</li>
<li>成员初始化表</li>
<li>析构函数</li>
<li>Const成员</li>
<li>静态成员</li>
<li>继承</li>
<li>虚函数</li>
</ul>
<span id="more"></span>
<h1 id="Basic-Idea"><a class="header-anchor" href="#Basic-Idea"></a>Basic Idea</h1>
<p>面向对象的优势是可以<code>设计</code>出<code>可复用性</code>和<code>可维护性</code>更强的代码. OO和PO能做的事其实是一样的,OO甚至会更慢,因为多态必然造成性能的下降.</p>
<p><strong>OO只是设计层面的思想,和运行没有关系</strong></p>
<ol>
<li>弱耦合性: 代码更容易复用</li>
<li>容易维护,主要是因为继承和多态,不点的接口,多种行为,类的内部可以自由修改(只要不改接口)</li>
</ol>
<p>例子:</p>
<ul>
<li>PO实现Stack:</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_SIZE 100</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Stack</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">    <span class="type">int</span> buffer[STACK_SIZE];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">( Stack &amp;s , <span class="type">int</span> i )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( s.top == STACK_SIZE - <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;stack is overflow!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        s.top++;</span><br><span class="line">        s.buffer[s.top] = i;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">( Stack &amp;s, <span class="type">int</span> &amp;i )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( s.top == <span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;stack is empty&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        i = s.buffer[s.top];</span><br><span class="line">        s.top--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Stack st1,st2;</span><br><span class="line">    st1.top = <span class="number">-1</span>;</span><br><span class="line">    st2.top = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">push</span>( st1,<span class="number">12</span> );</span><br><span class="line">    <span class="built_in">pop</span>( st1,x );</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>OO实现Stack</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">    <span class="type">int</span> buffer[STACK_SIZE];</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Stack</span>() &#123;top =  <span class="number">-1</span> ;&#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">push</span><span class="params">( <span class="type">int</span> i )</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">( <span class="type">int</span> &amp;i )</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Stack::push</span><span class="params">( <span class="type">int</span> i )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>( top == STACK_SIZE - <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;stack is overflow!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        top++;</span><br><span class="line">        buffer[top] = i;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Stack::pop</span><span class="params">( <span class="type">int</span> &amp;i )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( top == <span class="number">-1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;stack is empty&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        i = buffer[top];</span><br><span class="line">        top--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( <span class="type">void</span> )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Stack st1,st2;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    st1.<span class="built_in">push</span>(<span class="number">12</span>);</span><br><span class="line">    st1.<span class="built_in">pop</span>(x);</span><br><span class="line">    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>C++ 成员函数都有一个隐含的<code>T *const this</code>,指向本对象( 也就是存储的是本对象的地址 )</p>
<ul>
<li><code>getter</code>和<code>setter</code> 可以在类定义时定义,这样它们就成为<code>隐式内联函数</code></li>
</ul>
<h1 id="成员初始化表"><a class="header-anchor" href="#成员初始化表"></a>成员初始化表</h1>
<ul>
<li>构造函数的补充</li>
<li>执行
<ul>
<li><strong>先于构造函数体</strong></li>
<li><strong>按类数据成员申明次序</strong></li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Class A</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> y;</span><br><span class="line">	<span class="type">int</span> &amp;z;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">A</span>():<span class="built_in">y</span>(<span class="number">1</span>),<span class="built_in">z</span>(x),<span class="built_in">x</span>(<span class="number">0</span>) <span class="comment">//先于构造函数体,按类数据成员声明顺序,所以x初始化为0,z引用x. 再x赋值为10,z也变为10.</span></span><br><span class="line">			&#123; x = <span class="number">100</span> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>成员初始化表: 构造函数在分配内存的时候直接用这个值来进行初始化</p>
<p><code>x = 100</code>: 这是赋值,不是初始化. 构造函数先初始化x,然后复制为100.</p>
<ul>
<li>在构造函数中尽量使用成员初始化取代赋值动作
<ul>
<li><code>const</code>成员, <code>reference</code>成员, <code>对象成员</code></li>
<li>效率高</li>
<li>数据成员太多时,不采用本条准则
<ul>
<li>降低可维护性</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>例题</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CString</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> *p;</span><br><span class="line">	<span class="type">int</span> size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CString</span>(<span class="type">int</span> x): <span class="built_in">size</span>(x), <span class="built_in">p</span>(<span class="keyword">new</span> <span class="type">char</span>[size]) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>错了! 因为p初始化的时候,<code>size</code>还没有初始化! 应该把<code>size</code>声明提前</p>
<h1 id="析构函数"><a class="header-anchor" href="#析构函数"></a>析构函数</h1>
<ul>
<li>
<p><code>~&lt;类名&gt;()</code></p>
</li>
<li>
<p>对象消亡时,系统自动调用( 释放对象持有的非内存资源和不属于这个对象的内存 )</p>
</li>
<li>
<p>RAII vs GC:</p>
<ul>
<li>RAII: <code>Resource Accuisition Is Installization</code> 资源获取即初始化</li>
<li>获得了一个资源,就像对待对象一样对待它</li>
</ul>
</li>
<li>
<p><code>public</code></p>
<ul>
<li>可定义为<code>private</code></li>
</ul>
</li>
</ul>
<h1 id="Const成员"><a class="header-anchor" href="#Const成员"></a><code>Const</code>成员</h1>
<ul>
<li>
<p><code>const</code>成员</p>
<ul>
<li><code>const</code>成员变量</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="function"><span class="keyword">public</span></span></span><br><span class="line"><span class="function">		<span class="title">A</span><span class="params">( <span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function">		:x( i )</span></span><br><span class="line"><span class="function">		&#123;</span></span><br><span class="line">		;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>const</code>成员的初始化放在构造函数的<strong>初始化表</strong>中进行</li>
<li><code>static const</code>: 类静态常量,这个常量放在<code>静态区</code>,只能在类定义外部初始化(而不是在构造函数内, 因为它不从属于某个对象)</li>
</ul>
</li>
</ul>
<h1 id="静态成员"><a class="header-anchor" href="#静态成员"></a>静态成员</h1>
<ul>
<li>
<p>问题:同一个类的不同对象如何共享变量</p>
</li>
<li></li>
</ul>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> x,y;</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> shared;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>;<span class="comment">//静态成员函数,只能存取静态成员变量, 遵循类访问控制</span></span><br><span class="line">		<span class="function"><span class="type">void</span> <span class="title">q</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> A::shared = <span class="number">0</span>; <span class="comment">//在函数定义的时候不需要写static; 不在构造函数内初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">A::f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>静态成员的使用</p>
<ul>
<li>
<p>通过对象使用</p>
<p><code>A a; a.f();</code></p>
</li>
<li>
<p>通过类使用(不像某些语言一样用<code>A.f()</code>)</p>
<p><code>A::F()</code></p>
</li>
</ul>
</li>
<li>
<p>单例:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">protected</span>:</span><br><span class="line">        <span class="built_in">Singleton</span>();</span><br><span class="line">        <span class="built_in">Singleton</span>(<span class="type">const</span> Singleton&amp;);</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">static</span> Singleton* <span class="title">instance</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="type">static</span> Singleton *m_instance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Singleton *Singleton::m_instance = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="function">Singleton *<span class="title">Singleton::instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_instance == <span class="literal">nullptr</span>?</span><br><span class="line">                            m_instance = <span class="keyword">new</span> Singleton : m_instance;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Singleton::destroy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> m_instance;</span><br><span class="line">    m_instance = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="友元"><a class="header-anchor" href="#友元"></a>友元</h2>
<p>在使用C++进行项目开发的过程中难免会使用友元及前置声明 下面就对它们进行讲解：</p>
<p>在此之前，先来了解下什么是友元函数？什么是友元类？什么是友元成员函数？为什么需要友元？</p>
<p>友元函数是指某些虽然不是类成员的函数却能够访问类的<strong>所有成员</strong>。友元类同理，只是友元类与友元函数最主要的区别是：一个是将某个函数作为类的友元，一个则是将整个类（所有成员函数）都作为其他类的友元。而友元成员函数顾名思义就是将某个类的某个成员函数作为其他类的友元。一般情况下，非成员函数是无法直接从外部访问类的私有或保护部分的，但是在有些开发中又需要非成员函数从外部访问该类的私有或保护部分，而友元可以实现。</p>
<p>类的友元函数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> Num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">int</span> n = <span class="number">0</span>):<span class="built_in">Num</span>(n)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;Num = n;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span><span class="type">const</span></span>&#123;std::cout &lt;&lt; <span class="string">&quot;BaseNum:&quot;</span> &lt;&lt; Num &lt;&lt; std::endl;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">setData</span><span class="params">(Base&amp;,<span class="type">int</span>)</span></span>;     <span class="comment">//声明友元函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setData</span><span class="params">(Base&amp; s1,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    s1.Num = n;   <span class="comment">//#1 可以直接访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果没有 <code>friend void setData(Base&amp;,int)</code>;该行声明语句的话，类外部函数<code>setData</code>是无法访问类私有成员<code>Num</code>的，当有该行友元声明的话，<code>setData</code>函数将可以直接访问该类的私有部分<code>Num</code>成员，如代码中#1所示，这是编译器所允许的。<br>
友元<strong>类</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span>;    <span class="comment">//前置声明 因为Base1类在Base类后面定义的，而Base类提到了Base1类(声明友元类的时候)</span></span><br><span class="line">                <span class="comment">//所以必须让编译器知道有这个类 也可以省略该步 但是在声明友元类的时候应该这样写：</span></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Base1</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> Num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">int</span> n = <span class="number">0</span>):<span class="built_in">Num</span>(n)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;Num = n;&#125;    <span class="comment">//设置一个自定义新值</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clearValue</span><span class="params">()</span></span>&#123;Num = <span class="number">0</span>;&#125;       <span class="comment">//将值置为0</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span><span class="type">const</span></span>&#123;std::cout &lt;&lt; <span class="string">&quot;BaseNum:&quot;</span> &lt;&lt; Num &lt;&lt; std::endl;&#125;</span><br><span class="line">    <span class="keyword">friend</span> Base1;   <span class="comment">//将Base1整个类作为该类(Base)的友元 即Base1的所有成员函数均是Base类的友元</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setData</span><span class="params">(Base&amp; s1,<span class="type">int</span> n)</span></span>&#123;s1.Num = n;&#125;     <span class="comment">//与Base::setValue函数功能相同 使用了友元特性</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clearData</span><span class="params">(Base&amp; s1)</span></span>&#123;s1.<span class="built_in">clearValue</span>();&#125;    <span class="comment">//与Base::clearValue函数功能相同 但没有使用到友元特性</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>当需要将一个类的所有成员函数作为另一个类的友元的话，可以将这个类直接作为另一个类的友元，这样<strong>整个类的成员函数都将是另外一个类的友员</strong>。如上面代码所示，因此Base1类中的<code>setData</code>和<code>clearData</code>函数都是Base类的友元，都可以直接从外部对Base类的私有或保护成员进行操作。因为Base1类在Base类后面定义的，在编译friend Base1;这句代码的时候，编译器并不知道Base1是个什么东西，所以必须在将Base1类放在Base类前面定义或者在Base类前面进行前置声明，上面代码正是这么做的。<code>class Base1;</code>这行代码就是前置声明。那么对于上面代码有没有其他方法可以省略前置声明并实现同样效果呢？答案是肯定的，在这里可以省略前置声明，但是必须要将friend Base1;改为friend class Base1;这样编译器就知道将Base1是一个类，然后将它设为友元。</p>
<p>有人可能会问了，能不能将Base1放在Base前面定义，然后前置声明一个class Base;呢？可以，但是必须要将Base1的函数定义部分去掉。如下所示：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>;    <span class="comment">//对Base的前置声明 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setData</span><span class="params">(Base&amp; s1,<span class="type">int</span> n)</span></span>;    <span class="comment">//在这里不能定义函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clearData</span><span class="params">(Base&amp; s1)</span></span>;        <span class="comment">//同上</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> Num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">int</span> n = <span class="number">0</span>):<span class="built_in">Num</span>(n)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;Num = n;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clearValue</span><span class="params">()</span></span>&#123;Num = <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span><span class="type">const</span></span>&#123;std::cout &lt;&lt; <span class="string">&quot;BaseNum:&quot;</span> &lt;&lt; Num &lt;&lt; std::endl;&#125;</span><br><span class="line">    <span class="keyword">friend</span> Base1;    <span class="comment">//在此之前 编译器已经知道了Base1的完整定义 所以不用再对Base1进行前置声明</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Base1::setData</span><span class="params">(Base&amp; s1,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    s1.Num = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Base1::clearData</span><span class="params">(Base&amp; s1)</span></span>&#123;</span><br><span class="line">    s1.<span class="built_in">clearValue</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为什么不能在类中定义该函数呢？因为如果在Base1中定义了<code>setData</code>和<code>clearData</code>函数，而函数体中对Base类的成员进行操作了，这样就必须事先知道Base<strong>类的完整定义</strong>(让编译器知道类内部情况)，不然编译器<u>不知道Base类中有没有这些成员</u>，所以不允许这么做。但是能不能在类中定义<code>setData</code>和<code>clearData</code>函数并在Base1类前面进行前置声明Base类解决这个问题呢？不行！因为前置声明顾名思义只是提前声明，前置声明class Base;只是让编译器知道，有这么一个Base类将在后面进行定义，但是编译器并不知道该类的内部情况，所以编译器只允许在知道该<strong>类的完整定义</strong>后，才让对该类成员进行操作(就是定义对这个类的成员进行操作的函数)，否则不允许。( 所以不能定义函数,只能声明函数 )<br>
到这里，相信聪明的你应该发现，Base1类中只有函数<code>setData</code>使用了友元特性，对Base类私有成员直接访问。而<code>clearData</code>函数的实现只是调用了Base类的公有方法<code>clearValue</code>，间接访问私有成员，但是这并不涉及到友元特性。所以这个函数没有必要成为Base类的友元。如果一个类中有几十个函数，而大部分都没有使用到友元特性，将他们都设置为友元的方法（即友元类）并不推荐，而只有当大部分成员函数都需要使用友元特性的时候，使用友元类将非常方便，而只有个别的成员函数涉及到友元特性的话，推荐使用下面这个友元方法，但是这种方法需要特别注意类的定义顺序。</p>
<p>友元<strong>成员函数</strong>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>;    <span class="comment">//对Base的前置声明 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setData</span><span class="params">(Base&amp; s1,<span class="type">int</span> n)</span></span>;    <span class="comment">//在这里不能定义函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clearData</span><span class="params">(Base&amp; s1)</span></span>;        <span class="comment">//同上</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> Num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">int</span> n = <span class="number">0</span>):<span class="built_in">Num</span>(n)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;Num = n;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clearValue</span><span class="params">()</span></span>&#123;Num = <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span><span class="type">const</span></span>&#123;std::cout &lt;&lt; <span class="string">&quot;BaseNum:&quot;</span> &lt;&lt; Num &lt;&lt; std::endl;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Base1::setData</span><span class="params">(Base&amp; s1,<span class="type">int</span> n)</span></span>;    <span class="comment">//声明友元成员函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Base1::setData</span><span class="params">(Base&amp; s1,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    s1.Num = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Base1::clearData</span><span class="params">(Base&amp; s1)</span></span>&#123;</span><br><span class="line">    s1.<span class="built_in">clearValue</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在声明友元类的时候，只要不在类内部定义函数，顺序无关紧要，只要添加后面定义的类的前置声明就好了。而友元成员函数就不行，因为在使用<code>friend void Base1::setData(Base&amp; s1,int n);</code>这句代码进行声明友元成员函数的时候，提到了Base1<strong>类的成员函数</strong>，既然需要将这个类的<code>setData</code>函数设为友元，那么就必须提前知道Base1类的<strong>完整定义</strong>(了解类的内部情况)，那么就必须将Base1类放在Base类的前面进行定义，以便当编译器编译<code>friend void Base1::setData(Base&amp; s1,int n);</code>这行代码的时候就已经知道Base1类的内部情况了，所以定义的顺序也至关重要，而且Base1类中的函数不能在类中定义，因为定义了的话，就需要知道Base的内部情况(类完整定义)那么就需要将Base放在Base1前面定义，而Base又需要将Base1放在Base前面，这将相互矛盾，所以最友善的解决方法就是Base1的函数不在类中定义，这也是至关重要的。</p>
<ul>
<li>如果**类B提到了类A的成员函数,**那么需要提前知道类A的完整定义.</li>
<li>如果<strong>类B的成员函数提到了类A</strong>,那么只需要前置声明A.而B的函数定义要写在A的<strong>类定义</strong>后面</li>
</ul>
<p>另外，使用前置声明时，例如将Base1放在Base前面定义，并且使用前置声明<code>class Base;</code>那么在Base1类成员部分中不能实例化Base类对象，因为实例化也涉及到构造函数，需要让编译器知道Base类的完整定义，使用前置声明<code>class Base;</code>是不行的！要么Base1类中不进行实例化Base类，要么就在Base1类成员部分定义一个Base类的指针，并且在Base1类<strong>构造函数</strong>中对该指针使用<code>new Base;</code>方法实例化，这样是可以的，因为只定义Base类指针，不需要了解Base类内部情况，只需要知道Base是一个什么类型就好了，如前面的前置声明class Base;就让编译器知道了，Base是一个类，而<code>Base*</code>是一个Base类的指针。如下代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>;    <span class="comment">//对Base的前置声明 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base1</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setData</span><span class="params">(Base&amp; s1,<span class="type">int</span> n)</span></span>;    <span class="comment">//在这里不能定义函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clearData</span><span class="params">(Base&amp; s1)</span></span>;        <span class="comment">//同上</span></span><br><span class="line">    <span class="built_in">Base1</span>(<span class="type">int</span> n = <span class="number">0</span>);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">//      Base temp;         //error! 需要在此之前知道Base的完整定义</span></span><br><span class="line">        Base* pTemp;       <span class="comment">//OK! 只需要提前知道Base是什么类型就好了 前面class Base;已经告诉编译器</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> Num;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>(<span class="type">int</span> n = <span class="number">0</span>):<span class="built_in">Num</span>(n)&#123;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">setValue</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;Num = n;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clearValue</span><span class="params">()</span></span>&#123;Num = <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span><span class="type">const</span></span>&#123;std::cout &lt;&lt; <span class="string">&quot;BaseNum:&quot;</span> &lt;&lt; Num &lt;&lt; std::endl;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">Base1::setData</span><span class="params">(Base&amp; s1,<span class="type">int</span> n)</span></span>;    <span class="comment">//声明友元成员函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Base1::setData</span><span class="params">(Base&amp; s1,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    s1.Num = n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Base1::clearData</span><span class="params">(Base&amp; s1)</span></span>&#123;</span><br><span class="line">    s1.<span class="built_in">clearValue</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Base1::<span class="built_in">Base1</span>(<span class="type">int</span> n)&#123;</span><br><span class="line">    pTemp = <span class="keyword">new</span> <span class="built_in">Base</span>(n);     <span class="comment">//实例化Base类</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在C++中还有模版友元 这将在后面讲述。有些人可能会问了，C++友元会不会与面向对象思想相悖？不会！因为友元只能由类定义，例如需要将Base1声明为Base类的友元，那么就只能在Base类中进行声明，而不能在外部强加友情，因此，尽管友元被授予从外部访问类的私有部分和保护部分的权限，但他们并不与面向对象编程思想相悖，相反，他们提高了公有接口的灵活性。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="继承"><a class="header-anchor" href="#继承"></a>继承</h1>
<ul>
<li>继承机制
<ul>
<li>基于<strong>目标代码</strong>的复用</li>
<li>对事物进行分类
<ul>
<li>派生类是基类的具体化</li>
<li>把事物(概念)以层次结构表示出来,有利于描述和解决问题</li>
</ul>
</li>
<li>增量开发</li>
</ul>
</li>
</ul>
<h2 id="构造函数"><a class="header-anchor" href="#构造函数"></a>构造函数</h2>
<ul>
<li>
<p>派生类对象的初始化</p>
<ul>
<li>由基类和派生类共同完成</li>
</ul>
</li>
<li>
<p>构造函数的执行次序</p>
<ul>
<li>基类的构造函数</li>
<li>派生类对象成员类的构造函数</li>
<li>派生类的构造函数</li>
</ul>
</li>
<li>
<p>析构函数的执行顺序</p>
<ul>
<li>与构造函数相反</li>
</ul>
</li>
<li>
<p>基类构造函数的调用</p>
<ul>
<li>缺省执行基类默认构造函数</li>
<li>如果要执行基类的非默认构造函数,则必须在派生类构造函数的<strong>成员初始化表</strong>中指出</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>()&#123; x = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="built_in">A</span>(<span class="type">int</span> i)&#123; x = i; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="keyword">public</span> A&#123;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">B</span>()&#123; y = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="built_in">B</span>( <span class="type">int</span> i ) &#123; y = i &#125;</span><br><span class="line">    <span class="built_in">B</span>( <span class="type">int</span> i, <span class="type">int</span> j ): <span class="built_in">A</span>(i)<span class="comment">// 注意,实际上A的构造函数会先于B的构造函数执行</span></span><br><span class="line">    &#123; y = j; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    B b1;<span class="comment">//A::A()和执行B::B()</span></span><br><span class="line">    <span class="function">B <span class="title">b2</span><span class="params">(<span class="number">1</span>)</span></span>;<span class="comment">//A::A()和执行B::B(int)</span></span><br><span class="line">    <span class="function">B <span class="title">b3</span><span class="params">(<span class="number">0</span>,<span class="number">1</span>)</span></span>; <span class="comment">//执行A::A(int) 和 B::B(int，int)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Overload（重载）"><a class="header-anchor" href="#Overload（重载）"></a>Overload（重载）</h3>
<p>重载的概念最好理解，在同一个类声明范围中，定义了多个名称完全相同、参数（类型或者个数）不相同的函数，就称之为Overload（重载）。重载的特征如下：</p>
<p>**（1）**相同的范围（在同一个类中）；<br>
**（2）**函数名字相同；<br>
**（3）**参数不同；<br>
**（4）**virtual 关键字可有可无。</p>
<h3 id="Override（覆盖）"><a class="header-anchor" href="#Override（覆盖）"></a>Override（覆盖）</h3>
<p>覆盖的概念其实是用来实现C++多态性的，即子类重新改写父类声明为virtual的函数。Override（覆盖）的特征如下：</p>
<p>**（1）**不同的范围（分别位于派生类与基类）；<br>
**（2）**函数名字相同；<br>
**（3）**参数列表完全相同；<br>
**（4）**返回类型也必须一样</p>
<p>**（5）**基类函数必须有virtual 关键字。</p>
<h3 id="Overwrite（改写）"><a class="header-anchor" href="#Overwrite（改写）"></a>Overwrite（改写）</h3>
<p>改写是指派生类的函数屏蔽（或者称之为“隐藏”）了与其同名的基类函数。正是这个C++的隐藏规则使得问题的复杂性陡然增加，这里面分为两种情况讨论：</p>
<p>**（1）**如果派生类的函数与基类的函数同名，但是参数不同。那么此时，不论有无virtual关键字，基类的函数将被隐藏（注意别与重载混淆）。<br>
**（2）**如果派生类的函数与基类的函数同名，并且参数也相同，但是基类函数没有virtual关键字。那么此时，基类的函数被隐藏（注意别与覆盖混淆）。(编译器在当前类作用域内找到了找到了匹配的函数,于是不再去找基类的; 如果是虚函数,那么会查虚函数表 )</p>
<h2 id="单继承"><a class="header-anchor" href="#单继承"></a>单继承</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//对于C++类中定义的任何类型的函数，名字覆盖的规则都是一样的。</span></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func1</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;cout &lt;&lt; <span class="string">&quot;func1(int) in Base ...&quot;</span> &lt;&lt; endl;&#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">()</span></span>&#123;cout &lt;&lt; <span class="string">&quot;func2() in Base ...&quot;</span> &lt;&lt; endl;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func3</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">func1</span><span class="params">()</span> </span>&#123;cout &lt;&lt; <span class="string">&quot;func1() in Derived...&quot;</span> &lt;&lt; endl;&#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">func2</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;cout &lt;&lt; <span class="string">&quot;func2(int) in Derived...&quot;</span> &lt;&lt; endl;&#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">func3</span><span class="params">()</span> </span>&#123;cout &lt;&lt; <span class="string">&quot;func3() in Derived...&quot;</span> &lt;&lt; endl;&#125;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">func3</span><span class="params">(<span class="type">int</span> )</span> </span>&#123;cout &lt;&lt; <span class="string">&quot;func3() in Derived...&quot;</span> &lt;&lt; endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Derived d;</span><br><span class="line">  d.<span class="built_in">func1</span>(<span class="number">3</span>); <span class="comment">//调用失败。编译器在Derived的作用域中找到了该函数名字，但是发现调用不匹配，不能通过编译</span></span><br><span class="line">  d.<span class="built_in">func2</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>派生类只能通过基类的类来访问基类的<code>protecteed</code> 成员,而不能通过基类的对象来访问.</p>
</li>
<li>
<p>当你在派生类中定义一个基类函数的重载版本后,基类中所有的重载函数在子类中不可见. 这是因为<strong>编译器在面对函数调用时，首先是在作用域范围内查找该函数名（由内之外）， 如果找到了该函数名之后，编译器便停止查找，开始检查形参与实参的匹配是否合法， 如果不合法，不能通过编译</strong>。( 因此,编译器在子类中找到了这个函数名,但是发现调用不匹配,于是不能通过编译 ).</p>
<p>解决方法: 使用<code>using &lt;基类&gt;:: &lt;成员名称&gt;</code> 来将基类中的属性或者函数成员名称引入到子类中来, 也就是让基类中的函数名字在&quot;编译器查找子类&quot;作用域是可见的.</p>
</li>
<li>
<p>构造函数和析构函数不能被继承</p>
</li>
</ul>
<p>派生类友元函数可以通过派生类对象访问基类的<code>protected</code> 成员, 但是不能通过基类对象访问基类的<code> protected</code> 成员. <strong>友元不可传递!</strong></p>
<h2 id="私有继承"><a class="header-anchor" href="#私有继承"></a>私有继承</h2>
<p>在声明一个派生类时将基类的继承方式指定为private的，称为私有继承，用私有继承方式建立的派生类称为私有派生类(private derived class )， 其基类称为私有基类(private base class )。</p>
<p>私有基类的公用成员和保护成员在派生类中的访问属性相当于派生类中的私有成员，即派生类的成员函数能访问它们，而在派生类外不能访问它们。私有基类的私有成员在派生类中成为不可访问的成员，只有基类的成员函数可以引用它们。一个基类成员在基类中的访问属性和在派生类中的访问属性可能是不同的。私有基类的成员在私有派生类中的访问属性见表</p>
<ul>
<li>虽然在派生类外不能通过派生类对象调用私有基类的公用成员函数，但在派生类外可以通过派生类的公共成员函数调用私有基类的公用成员函数(此时它是派生类中的私有成员函数，可以被派生类的任何成员函数调用)。这就是一种<strong>委托</strong></li>
</ul>
<table>
<thead>
<tr>
<th>私有基类中的成员</th>
<th>在私有派生类中的访问属性</th>
</tr>
</thead>
<tbody>
<tr>
<td>私有成员</td>
<td>不可访问</td>
</tr>
<tr>
<td>公用成员</td>
<td>私有</td>
</tr>
<tr>
<td>保护成员</td>
<td>私有</td>
</tr>
</tbody>
</table>
<ul>
<li>私有继承类和基类的<strong>接口不一样</strong>,它们不是<code>is-a</code>关系,而是<code>has-a</code>关系</li>
<li>因此,私有继承不存在类型兼容和类型转换, 也就是不能用父类指向子类.</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CHumanBeing</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CStudent</span>: <span class="keyword">private</span> CHumanBeing</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CHumanBeing a; CStudent b;</span><br><span class="line"><span class="built_in">eat</span>(a);</span><br><span class="line"><span class="built_in">eat</span>(b); <span class="comment">//Error</span></span><br></pre></td></tr></table></figure>
<h2 id="多继承"><a class="header-anchor" href="#多继承"></a>多继承</h2>
<ul>
<li>继承方式及访问控制的规定同单继承</li>
<li>派生类拥有所有基类的所有成员</li>
<li>多继承定义的时候是一个权限名对应一个基类，<code>class derived:public base1, public base2</code>.  不能是<code>class derived:public base1,base2</code></li>
<li>基类的声明次序决定：
<ul>
<li>对基类构造函数/析构函数的调用次序</li>
<li>对基类数据成员的存储安排</li>
</ul>
</li>
<li>名冲突
<ul>
<li>&lt;基类名&gt;：：&lt;基类名称名&gt;</li>
</ul>
</li>
<li>虚基类
<ul>
<li>如果直接基类有公共的基类，则该公共基类中的成员变量在多继承的派生类中有多个副本</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> x;</span><br><span class="line">	...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: A;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: A;</span><br><span class="line">Class D: B,C;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>类D拥有两个成员<code>B:: x</code> 和<code>C:: x</code></p>
<ul>
<li>D调用B和C, B调用A, C调用A. 所以A的构造函数会被调用两次. 实际上A的成员会被拷贝给B和C, 拷贝到不同子类的基类成员之间是<strong>无关联</strong>的</li>
</ul>
</li>
<li>
<p>虚基类</p>
<ul>
<li>
<p>合并</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>;</span><br><span class="line">Class B: <span class="keyword">virtual</span> <span class="keyword">public</span> A;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> A;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span>: B,C;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>设定为虚基类后，系统知道base1和base2都是由base派生出的，所以它就统一先构造base，调用base的构造函数。</li>
<li>再按照顺序调用base1和base2的构造函数，只不过在此时，大家在构造时操作的都是同一个成员</li>
</ol>
</li>
<li>
<p>注意</p>
<ul>
<li>虚基类的构造函数由最新派生出的类的构造函数调用</li>
<li><strong>虚基类的构造函数优先非虚基类的构造函数执行</strong>
<ul>
<li>解释: 设B,C虚继承A, D继承B,C, 则D的构造函数会先执行虚基类A的构造函数,再执行B和C的构造函数; 而在普通多继承中,D会调用B,C,它们再分别调用A. 二者是不同的.</li>
</ul>
</li>
<li>多继承形式下析构函数的执行顺序和构造函数的执行顺序相反。</li>
</ul>
</li>
</ul>
<h3 id="多继承下的构造函数"><a class="header-anchor" href="#多继承下的构造函数"></a>多继承下的构造函数</h3>
<p>多继承形式下的构造函数和单继承形式基本相同，只是要在派生类的构造函数中调用多个基类的构造函数。以上面的 A、B、C、D 类为例，D 类构造函数的写法为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">D</span>(形参列表): <span class="built_in">A</span>(实参列表), <span class="built_in">B</span>(实参列表), <span class="built_in">C</span>(实参列表)&#123;</span><br><span class="line">  <span class="comment">//其他操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基类构造函数的调用顺序和和它们在派生类构造函数中出现的顺序无关，而是<strong>和声明派生类时基类出现的顺序相同</strong>。仍然以上面的 A、B、C、D 类为例，即使将 D 类构造函数写作下面的形式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">D</span>(形参列表): <span class="built_in">B</span>(实参列表), <span class="built_in">C</span>(实参列表), <span class="built_in">A</span>(实参列表)&#123;</span><br><span class="line">  <span class="comment">//其他操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>是先调用 A 类的构造函数，再调用 B 类构造函数，最后调用 C 类构造函数。</p>
<p>从运行结果中还可以发现，</p>
<h3 id="命名冲突"><a class="header-anchor" href="#命名冲突"></a>命名冲突</h3>
<p>当两个或多个基类中有同名的成员时，如果直接访问该成员，就会产生命名冲突，编译器不知道使用哪个基类的成员。这个时候需要在成员名字前面加上类名和域解析符<code>::</code>，以显式地指明到底使用哪个类的成员，消除二义性。</p>
<p>修改上面的代码，为 <code>BaseA</code> 和 <code>BaseB</code> 类添加 show() 函数，并将 Derived 类的 show() 函数更名为 display()：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseA</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span>:    </span><br><span class="line"> <span class="built_in">BaseA</span>(<span class="type">int</span> a, <span class="type">int</span> b);    </span><br><span class="line"> ~<span class="built_in">BaseA</span>();<span class="keyword">public</span>:    </span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="keyword">protected</span>:    </span><br><span class="line"> <span class="type">int</span> m_a;    </span><br><span class="line">    <span class="type">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">BaseA::<span class="built_in">BaseA</span>(<span class="type">int</span> a, <span class="type">int</span> b): <span class="built_in">m_a</span>(a), <span class="built_in">m_b</span>(b)</span><br><span class="line">&#123;    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;BaseA constructor&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">BaseA::~<span class="built_in">BaseA</span>()</span><br><span class="line">&#123;    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;BaseA destructor&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BaseA::show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;m_a = &quot;</span>&lt;&lt;m_a&lt;&lt;endl;    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;m_b = &quot;</span>&lt;&lt;m_b&lt;&lt;endl;</span><br><span class="line">&#125;<span class="comment">//基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseB</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:    </span><br><span class="line">    <span class="built_in">BaseB</span>(<span class="type">int</span> c, <span class="type">int</span> d);    </span><br><span class="line">    ~<span class="built_in">BaseB</span>();    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">protected</span>:    </span><br><span class="line">    <span class="type">int</span> m_c;    </span><br><span class="line">    <span class="type">int</span> m_d;&#125;;</span><br><span class="line">BaseB::<span class="built_in">BaseB</span>(<span class="type">int</span> c, <span class="type">int</span> d): <span class="built_in">m_c</span>(c), <span class="built_in">m_d</span>(d)</span><br><span class="line">&#123;    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;BaseB constructor&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">BaseB::~<span class="built_in">BaseB</span>()</span><br><span class="line">&#123;    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;BaseB destructor&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BaseB::show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;m_c = &quot;</span>&lt;&lt;m_c&lt;&lt;endl;    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;m_d = &quot;</span>&lt;&lt;m_d&lt;&lt;endl;</span><br><span class="line">&#125;<span class="comment">//派生类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>: <span class="keyword">public</span> BaseA, <span class="keyword">public</span> BaseB</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span>:    </span><br><span class="line"> <span class="built_in">Derived</span>(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d, <span class="type">int</span> e);    ~<span class="built_in">Derived</span>();</span><br><span class="line"> <span class="keyword">public</span>:    </span><br><span class="line"> <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"> <span class="keyword">private</span>:    </span><br><span class="line"> <span class="type">int</span> m_e;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Derived::<span class="built_in">Derived</span>(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d, <span class="type">int</span> e): <span class="built_in">BaseA</span>(a, b), <span class="built_in">BaseB</span>(c, d), <span class="built_in">m_e</span>(e)</span><br><span class="line">&#123;    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Derived constructor&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">Derived::~<span class="built_in">Derived</span>()</span><br><span class="line">&#123;    </span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Derived destructor&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Derived::display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">    BaseA::<span class="built_in">show</span>();  <span class="comment">//调用BaseA类的show()函数</span></span><br><span class="line">    BaseB::<span class="built_in">show</span>();  <span class="comment">//调用BaseB类的show()函数</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;m_e = &quot;</span>&lt;&lt;m_e&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;    </span><br><span class="line">        <span class="function">Derived <span class="title">obj</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span></span>;    </span><br><span class="line">        obj.<span class="built_in">display</span>();    </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>显式地指明了要调用哪个基类的 show() 函数</p>
<h1 id="虚函数"><a class="header-anchor" href="#虚函数"></a>虚函数</h1>
<p>c++语言中，基类必须将它的两种成员函数区分开来：一种是基类希望其派生类进行覆盖的函数，另一种是基类希望派生类直接继承而不要改变的函数。对于前者，基类通常将其定义为虚函数（virtual）。当我们使用指针或者引用调用虚函数时，该调用将被动态绑定。根据引用或者指针所绑定的对象类型不同，该调用可能执行基类的版本也可能执行某个派生类的版本。在某些时候基类希望它的派生类有权访问该成员，同时禁止其他用户访问。我们用受保护的（protected）访问运算符来说明这样的成员。</p>
<p>基类通过在其成员函数声明语句之前加上关键字virtual使得改函数执行动态绑定。任何构造函数之外的非静态函数都可以是虚函数。关键字virtual只能出现在类内部声明语句之前而不能用于类外部的函数定义。如果基类把一个函数声明成虚函数，则该函数在派生类中隐式地也是虚函数。</p>
<h2 id="虚函数的访问控制"><a class="header-anchor" href="#虚函数的访问控制"></a>虚函数的访问控制</h2>
<ul>
<li>
<p><strong>编译器根据对象的静态类型来决定访问控制权限，并且进行形参的默认参数的赋值</strong></p>
</li>
<li>
<p>虚函数是在<strong>运行时</strong>查虚函数表,而访问控制发生在编译期而不是运行期, 因此在派生类中更改虚函数的访问控制实际上没有意义</p>
</li>
</ul>
<p>（1） 编译器在决定调用函数时，如果该函数是虚函数才会在运行时确定调用什么函数（动态绑定），如果不是虚函数，那么在编译阶段就已经确定了调用的函数类型（静态绑定）。<br>
如下面的代码，基类与派生类都声明了函数f。但是在main函数的调用中编译器调用的是静态类型对应的函数，因为f函数并不是虚函数，虽然在基类与派生类中都声明了该函数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> i=<span class="number">0</span>)</span> </span>&#123;cout &lt;&lt; <span class="string">&quot;f() in Base...&quot;</span> &lt;&lt; i &lt;&lt; endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>:<span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> i=<span class="number">1</span>)</span></span>&#123;cout &lt;&lt; <span class="string">&quot;f() in derived...&quot;</span> &lt;&lt; i &lt;&lt; endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Base *b = <span class="keyword">new</span> <span class="built_in">Derived</span>();</span><br><span class="line">    b-&gt;<span class="built_in">f</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>（2）如下,基类定义虚函数为public，派生类覆盖了该虚函数，但是将其声明为private，这样当基类的指针绑定到派生类的对象时，使用该基类指针调用该虚函数时:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> i=<span class="number">0</span>)</span> </span>&#123;cout &lt;&lt; <span class="string">&quot;f() in Base...&quot;</span> &lt;&lt; i &lt;&lt; endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span>:<span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> i=<span class="number">1</span>)</span></span>&#123;cout &lt;&lt; <span class="string">&quot;f() in derived...&quot;</span> &lt;&lt; i &lt;&lt; endl;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Base *b = <span class="keyword">new</span> <span class="built_in">Derived</span>();</span><br><span class="line">    b-&gt;<span class="built_in">f</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出为： f() in derived 0 </span></span><br></pre></td></tr></table></figure>
<p>【分析】首先分析为什么输出结果是f() in derived。 编译器在看到b对f进行调用时，此时编译器根据b的静态类型（也就是Base）来决定f函数是否可访问，并且进行形参的默认参数的赋值<br>
由于f是虚函数，那么具体调用哪个函数是在运行时确定的，于是在运行时查找Derived的虚函数表，得到虚函数f（此时的f已经被Derived类覆盖，于是调用的就是派生类的版本。）</p>
<p>也就是说,在编译期间,编译器根据静态类型来决定函数的访问权限,并进行函数匹配,现在匹配到了f,且参数列表符合,则匹配成功,并缺省参数赋值( 这一步详见下文 &quot;绝对不要重新定义继承而来的缺省参数值&quot;), 由于该函数是虚函数,则在运行期间,编译器决定调用子类的f.</p>
<ul>
<li>
<p>类型相容</p>
<ul>
<li>类,类型</li>
<li>类型相容,赋值相容</li>
<li>问题: a, b是什么类型时, a  = b   合法?
<ul>
<li><code>A a; B b;</code> <code>class B: public A </code>  <code>A a = b; </code>
<ul>
<li>对象的身份发生变化</li>
<li>属于派生类的属性已不存在( 切片, 也可以看成是因为拷贝构造函数 )</li>
</ul>
</li>
<li><code>B* pb; A* pa = p;b</code>  <code>class B: public A</code> 可以用父类的指针指向子类</li>
<li><code>B b;  A &amp;a=b; class B: public A</code>  可以用父类的引用引用子类
<ul>
<li>对象的身份没有变化</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>前期绑定( Early Binding )</p>
<ul>
<li>编译时刻</li>
<li>依据对象的静态类型</li>
<li>效率高, 灵活性差</li>
</ul>
</li>
<li>
<p>动态绑定( Late Binding )</p>
<ul>
<li>运行时刻</li>
<li>依据对象的实际类型(动态)</li>
<li>灵活性高,效率低( 比静态绑定多一次寻址 )</li>
</ul>
</li>
<li>
<p>注重效率</p>
<ul>
<li>C++默认前期绑定</li>
<li>后期绑定需显示指出  <code>virtual</code></li>
</ul>
</li>
<li>
<p>定义</p>
<ul>
<li>
<p><code>virtual</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>动态绑定
<ul>
<li>根据实际引用和指向的对象类型</li>
</ul>
</li>
<li>方法重定义</li>
</ul>
</li>
</ul>
</li>
<li>
<p>如基类中被定义为虚成员函数, 则派生类中对其冲定义的成员函数均为虚函数.</p>
</li>
<li>
<p>限制</p>
<ul>
<li>类的成员函数才可以是虚函数</li>
</ul>
</li>
</ul>
<h4 id="虚函数表"><a class="header-anchor" href="#虚函数表"></a>虚函数表</h4>
<p>基类对象包含一个虚表指针，指向基类的虚函数表</p>
<p>派生类对象也将包含一个虚表指针，指向派生类虚函数表</p>
<p>如果派生类重写了基类的虚方法，该派生类虚函数表将保存重写的虚函数的(入口)地址，而不是基类的虚函数地址</p>
<p>如果基类中的虚方法没有在派生类中重写，那么派生类将继承基类中的虚方法，而且派生类中虚函数表将保存基类中未被重写的虚函数的地址，但如果派生类中定义了新的虚方法，则该虚函数的地址也将被添加到派生类虚函数表中</p>
<h2 id="final，override"><a class="header-anchor" href="#final，override"></a>final，override</h2>
<p><strong>1. override 重载</strong></p>
<p>当你在父类中使用了虚函数时候，你可能需要在某个子类中对这个虚函数进行重写，以下方法都可以：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> :<span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span>; <span class="comment">//OK</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">override</span></span>; <span class="comment">//OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果不使用override，当你手一抖，将**foo()<strong>写成了</strong>f00()**会怎么样呢？结果是编译器并不会报错，因为它并不知道你的目的是重写虚函数，而是把它当成了新的函数。如果这个虚函数很重要的话，那就会对整个程序不利。</p>
<p>所以，override的作用就出来了，它指定了子类的这个虚函数是重写的父类的，如果你名字不小心打错了的话，编译器是不会编译通过的：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> :A</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f00</span><span class="params">()</span></span>; <span class="comment">//OK</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f0o</span><span class="params">()</span><span class="keyword">override</span></span>; <span class="comment">//Error </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>显然, <code>override</code> 不能用来修饰非虚函数</li>
</ul>
<p><strong>2.final</strong></p>
<p>* <strong>当不希望某个类被继承，或不希望某个虚函数被重写</strong>，可以在类名和虚函数后添加final关键字，添加final关键字后被继承或重写，编译器会报错。</p>
<ul>
<li><code>final</code>用于类或虚函数, 不能用来修饰非虚函数</li>
</ul>
<p>例子如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">foo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> : Base</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">final</span></span>; <span class="comment">// foo 被override并且是最后一个override，在其子类中不可以重写</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> <span class="keyword">final</span></span>; <span class="comment">// Error: 父类中没有 bar虚函数可以被重写或final</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">final</span> : A <span class="comment">// 指明B是不可以被继承的</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">foo</span><span class="params">()</span> <span class="keyword">override</span></span>; <span class="comment">// Error: 在A中已经被final了</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : B <span class="comment">// Error: B is final</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>PPT例子:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f1</span><span class="params">(<span class="type">int</span>)</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f3</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f5</span><span class="params">(<span class="type">int</span>)</span> <span class="keyword">final</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">D</span>: B <span class="comment">//默认的继承访问权限。struct是public继承的</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f1</span><span class="params">(<span class="type">int</span>)</span> <span class="type">const</span> <span class="keyword">override</span></span>; <span class="comment">//正确，f1与基类中的f1匹配</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f2</span><span class="params">(<span class="type">int</span>)</span> <span class="keyword">override</span></span>;<span class="comment">//错误： B没有形如f2（int）的函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f3</span><span class="params">()</span> <span class="keyword">override</span></span>;<span class="comment">//错误， f3不是虚函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f4</span><span class="params">()</span> <span class="keyword">override</span></span>;<span class="comment">//错误： B没有名为f4的函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">f5</span><span class="params">(<span class="type">int</span>)</span></span>;<span class="comment">//错误， B已经将f5声明成final；</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="纯虚函数和抽象类"><a class="header-anchor" href="#纯虚函数和抽象类"></a>纯虚函数和抽象类</h2>
<ul>
<li>
<p>纯虚函数</p>
<ul>
<li>声明时在函数原型后面加上<code>= 0</code></li>
<li>往往只给出函数声明,不给出实现</li>
<li><strong>往往</strong>的意思是，对于<code>纯虚析构函数</code>,我们是要提供实现的</li>
</ul>
</li>
<li>
<p>抽象类</p>
<ul>
<li>至少包含一个纯虚函数</li>
<li>不能用于创建对象</li>
<li>为派生类提供框架,派生类提供抽象基类的所有成员函数的实现</li>
</ul>
</li>
<li>
<p>虚析构函数</p>
</li>
<li>
<p>确定<code>public inheritance</code>,是真正意义的&quot; is a &quot; 关系</p>
</li>
<li>
<p>不要定义与继承而来的非虚成员函数同名的成员函数</p>
</li>
<li>
<p>明智地运用<code>private Inheritance</code>  见下文&quot;私有继承&quot;</p>
<ul>
<li>Implemented-in-term-of
<ul>
<li>需要使用基类的protected成员,或重载虚函数</li>
<li>不希望一个基类被客户使用</li>
</ul>
</li>
<li>在设计层面无意义,只用于<strong>实现</strong>层面.</li>
</ul>
</li>
<li>
<p><strong>绝对不要重新定义继承而来的缺省参数值</strong>( 写了也没用 )</p>
<ul>
<li>静态绑定</li>
<li>效率</li>
<li>话说这个机制是历史遗留问题, 给我们的启示是:尽量少用缺省参数值</li>
</ul>
<p>缺省参数值: 编译的时候,编译器如果看到这个函数没有参数,但有缺省参数值,当场就会把缺省参数值绑定到形参. 由于对象的<code>vtable</code>只会存虚函数的入口地址(不存缺省参数的原因是很少用,效率也差). 于是, 编译器会在编译期把缺省参数静态绑定上去. 因此,就会发生: 指向子类的父类引用调用了子类的虚函数(这是我们所期望的),但是其缺省参数值<strong>居然是父类的</strong>的情况.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;class A: &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>:  <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;class B: &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> : <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;class C: &quot;</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A* p_a;</span><br><span class="line">    B b;</span><br><span class="line">    p_a = &amp;b;</span><br><span class="line">    p_a-&gt;<span class="built_in">f</span>();</span><br><span class="line"></span><br><span class="line">    A* p_a1;</span><br><span class="line">    C c;</span><br><span class="line">    p_a1 = &amp;c;</span><br><span class="line">    p_a1-&gt;<span class="built_in">f</span>(); <span class="comment">//先找父类，再绑定缺省参数。 在运行期，再选中子类的函数。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出:</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>: <span class="number">0</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span>: <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="三种函数"><a class="header-anchor" href="#三种函数"></a>三种函数</h2>
<ul>
<li>
<p>纯虚函数</p>
<p>只有函数接口会被继承</p>
<ul>
<li>子类必须继承函数接口</li>
<li>子类必须提供实现代码</li>
</ul>
</li>
<li>
<p>一般虚函数</p>
<p>函数的接口及缺省实现代码</p>
<ul>
<li>子类<strong>必须</strong>继承函数接口</li>
<li><strong>可以</strong>继承缺省实现代码</li>
</ul>
</li>
<li>
<p>非虚函数</p>
<p>函数的接口和其实现代码会被继承</p>
<ul>
<li><strong>必须</strong>同时继承接口和实现代码</li>
</ul>
</li>
</ul>
<h2 id="纯虚析构函数"><a class="header-anchor" href="#纯虚析构函数"></a>纯虚析构函数</h2>
<p><a href="https://blog.csdn.net/yby4769250/article/details/7294733">原文</a></p>
<p>纯虚析构函数和普通纯虚函数的区别在于，<strong>纯虚析构函数需要提供函数的实现</strong>，而一般纯虚函数不能有实现，这样的原因在于，纯虚析构函数最终需要被调用，以析构基类对象，虽然是抽象类没有实体。而如果不提供该析构函数的实现，将使得在析构过程中，析构无法完成而导致析构异常的问题</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Class A</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">A</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">virtual</span> ~<span class="built_in">A</span>()=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A::~<span class="built_in">A</span>()&#123;&#125; <span class="comment">//提供了纯虚析构函数的实现</span></span><br><span class="line"></span><br><span class="line">ClassB:<span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A *p =<span class="keyword">new</span> <span class="built_in">B</span>();</span><br><span class="line"></span><br><span class="line">*Delete p;</span><br></pre></td></tr></table></figure>
<p><code>Delete p;</code>通过父类指针去析构子类对象, 分三种情况:</p>
<ol>
<li>父类如<strong>A</strong>的析构函数不是虚函数，这种情况下，将只会调用<strong>A</strong>的析构函数而不会调用子类的析构函数，前面的文章中有提到过，非虚函数是通过类型来寻址的，这样的析构将会导致析构畸形</li>
<li>父类如<strong>A</strong>的析构函数是普通的虚函数，这种情况下，会很正常，从子类一直析构到基类，最后完成析构</li>
<li>父类如<strong>A</strong>的析构函数是纯虚析构函数，如本文所提，正是重点，在这种情况之下，由于析构函数首先是虚函数，所以会按<strong>2</strong>的方法从子类一直析构到父类，但是，又由于父类的析构函数是纯虚函数，没有实现体，所以，当析构到父类时，由于没有实现体，所以导致父类无法析构，最终也导致了析构畸形，因此，特殊的地方就在于这里，纯虚析构函数需要提供一个实现体，以完成对象的析构</li>
</ol>
]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CPU</title>
    <url>/2022/09/08/CPU/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Basic Concepts</li>
<li>...</li>
</ul>
<span id="more"></span>
<h1 id="Basic-Concepts"><a class="header-anchor" href="#Basic-Concepts"></a>Basic Concepts</h1>
<h2 id="CPU-Package"><a class="header-anchor" href="#CPU-Package"></a>CPU( Package )</h2>
<ul>
<li>
<p>CPU:( Central Processing Unit): 中央处理单元. CPU是一个很模糊的概念, 它一般指的是“CPU package”</p>
<ul>
<li>一个CPU可以有多个物理核. 如果开启了超线程, 一个物理核可以分成n个逻辑核, n为超线程的数量</li>
<li>举例来说, AMD的桌面级CPU<a href="https://www.amd.com/zh-hans/products/apu/amd-ryzen-5-5600g">Ryzen™ 5 5600G</a>是6核12线程, 这意味着它有6个物理核, 通过超线程最大可以达到12个逻辑核</li>
</ul>
</li>
<li>
<p>CPU package: 就是我们通常说的CPU, 它包含了外壳( 里面是一个或多个Die )和外面的镀金针脚等. 主板上的每个CPU插槽( socket )只能接受一个CPU Package</p>
<ul>
<li>这就是CPU Package:<br>
<img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/CPU/CPU%20Package.png" alt="CPU Package"></li>
</ul>
</li>
<li>
<p>Linux上查看CPU信息:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lscpu | grep <span class="string">&#x27;CPU(s)&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="CPU-Core"><a class="header-anchor" href="#CPU-Core"></a>CPU Core</h2>
<ul>
<li>CPU Core: 就是CPU的物理核 ( physical core )  , 是一个完整且独立的执行单元. 有独立的电路元件以及L1,L2缓存.</li>
<li>Hyper-threading( 超线程 ), aka HT: 让一个core并发的执行多个控制流( 线程 ), 也就是把一个core虚拟化为多个虚拟核( Or 逻辑核 logical core )
<ul>
<li>超线程在一个逻辑核等待指令执行的间隔把时间片分配到另一个逻辑核</li>
</ul>
</li>
</ul>
<h2 id="CPU-Die"><a class="header-anchor" href="#CPU-Die"></a>CPU Die</h2>
<ul>
<li>CPU Die:  就是一个半导体( usually silicon )片, 它包含了任意数量的core
<ul>
<li>CPU Die之间通过片外总线（Infinity Fabric）互联, 并且不同CPU Die上的CPU内核不能共享CPU Cache.
<ul>
<li>同一个Die内的Core也许能共享某些Cache, 这取决于具体设计</li>
</ul>
</li>
</ul>
</li>
<li>Die是处理器在生产过程中引入的概念. 总的来说，Die或者CPU Die指的是处理器在生产过程中，从晶圆( Silicon Wafer) 上切割下来的一个个小方块( 这也是消费者看到的CPU芯片都是方形的原因 ), 在切割下来之前，每个小方块（Die）都需要经过各种加工，将电路逻辑刻到该Die上</li>
</ul>
<h2 id="CPU-Cache"><a class="header-anchor" href="#CPU-Cache"></a>CPU Cache</h2>
<ul>
<li>
<p>一般L1、L2为每个物理核独占.</p>
</li>
<li>
<p>曾经有过L4 Cache, 是个eDRAM,(Haswell/Broadwell:在Iris系列中)</p>
</li>
</ul>
<h3 id="缓存的设计"><a class="header-anchor" href="#缓存的设计"></a>缓存的设计</h3>
<ul>
<li>exclusive：L1 cahce中的内容不能包含在L2中</li>
<li>strictly inclusive：L1cache的内容一定严格包含在L2中。</li>
<li>Third one（没有正式名字）:不要求L1的一定包含在L2中</li>
</ul>
<h2 id="Multi-core"><a class="header-anchor" href="#Multi-core"></a>Multi-core</h2>
<ul>
<li>
<p>Multi-core: 多核处理器, 就是有多个core的CPU ( 严谨地说, 是CPU Package ), 这些核心可以在同一个Die, 也可以在不同的Die. 现代CPU一般都有多个Die.</p>
</li>
<li>
<p>如下是AMD的64核/128线程CPU EPYC , 它含有4个Die:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/CPU/EPYC.png" alt="EPYC"></p>
</li>
</ul>
<h2 id="Multi-CPU"><a class="header-anchor" href="#Multi-CPU"></a>Multi-CPU</h2>
<ul>
<li>有些主板支持Multi-CPU, 顾名思义也就是多个CPU. 这需要主板上有多个CPU Socket, 多个CPU通过 QPI 链路相连.</li>
<li>多CPU属于并行技术了</li>
</ul>
<h2 id="核显-APU"><a class="header-anchor" href="#核显-APU"></a>核显, APU...</h2>
<p>参见我的 <a href="https://lyk-love.cn/2022/08/01/GPU/">GPU</a></p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Hardware</tag>
      </tags>
  </entry>
  <entry>
    <title>Cache Memory</title>
    <url>/2022/12/01/Cache-Memory/</url>
    <content><![CDATA[<p>Outline:</p>
<span id="more"></span>
<h1 id="Cache-Memory-Principles"><a class="header-anchor" href="#Cache-Memory-Principles"></a>Cache Memory Principles</h1>
<p>程序访问的局部性原理：</p>
<ul>
<li>
<p>时间局部性：在相对较短的时间周期内，重复访问特定的信息</p>
</li>
<li>
<p>空间局部性：在相对较短的时间周期内，访问相邻位置的数据</p>
</li>
</ul>
<h1 id="Elements-of-Cache-Design"><a class="header-anchor" href="#Elements-of-Cache-Design"></a>Elements of Cache Design</h1>
<h2 id="Cache-Addresses"><a class="header-anchor" href="#Cache-Addresses"></a>Cache Addresses</h2>
<h2 id="Cache-Size"><a class="header-anchor" href="#Cache-Size"></a>Cache Size</h2>
<h2 id="Mapping-Function-Replacement-Algorithms-Write-Policy"><a class="header-anchor" href="#Mapping-Function-Replacement-Algorithms-Write-Policy"></a>Mapping Function Replacement Algorithms Write Policy</h2>
<h2 id="Line-Size"><a class="header-anchor" href="#Line-Size"></a>Line Size</h2>
<h2 id="Number-of-Caches"><a class="header-anchor" href="#Number-of-Caches"></a>Number of Caches</h2>
<h1 id="Cache-Organization"><a class="header-anchor" href="#Cache-Organization"></a>Cache Organization</h1>
<ul>
<li>组号不会存储在Cache行中, 因为组号是系统默认分配的.</li>
<li>因此Cahce行大小 = 各种标识位 + Tag+ block</li>
</ul>
<h2 id="Generic-Cache-Memory-Organization"><a class="header-anchor" href="#Generic-Cache-Memory-Organization"></a>Generic Cache Memory Organization</h2>
<p>![image-20230220140706649](/Users/lyk/Library/Application Support/typora-user-images/image-20230220140706649.png)</p>
<p>Consider a computer system where each memory address has m bits that form $M = 2^m$ unique addresses. As illustrated in Figure 6.25(a),</p>
<p>a cache for such a machine is organized as an array of $S = 2^s$ <em>cache sets</em>. Each set consists of $E$ <em>cache lines</em>.</p>
<p>Each line consists of a data <em>block</em> of $B = 2^b$ bytes, a <em>valid bit</em> that indicates whether or not the line contains meaningful information,</p>
<p>and $t = m − (b + s)$ <strong>tag bits</strong> (a subset of the bits from the current block’s memory address) that uniquely identify the block stored in the cache line.</p>
<p>In general, a cache’s organization can be characterized by the tuple $(S, E, B, m)$. The size (or capacity) of a cache, $C$, is stated in terms of the aggregate size of all the blocks. The tag bits and valid bit are not included. Thus, $C = S × E × B$.</p>
<hr>
<p>![image-20230220140723458](/Users/lyk/Library/Application Support/typora-user-images/image-20230220140723458.png)</p>
<p>The parameters $S$ and $B$ induce a partitioning of the $m$ address bits into the three fields</p>
<ul>
<li>The $s$ <em>set index bits</em> in A form an index into the array of $S$ sets. The first set is set 0, the second set is set 1, and so on. When interpreted as an unsigned integer, the set index bits tell us which set the word must be stored in.</li>
<li>Once we know which set the word must be contained in, the $t$ tag bits in A tell us which line (if any) in the set contains the word. A line in the set contains the word <strong>if and only if the valid bit is set and the tag bits in the line match the tag bits</strong> in the address A.</li>
<li>Once we have located the line identified by the tag in the set identified by the set index, then the $b$ <em>block offset bits</em> give us the offset of the word in the B-byte data block.</li>
<li>组号 = 块号 mod 每组行数. 也就是说, 第0, 4, 8, ...块在第0组‘ 第1, 5, 9, ...块在第1组</li>
</ul>
<h2 id="Direct-Mapped-Caches"><a class="header-anchor" href="#Direct-Mapped-Caches"></a>Direct-Mapped Caches</h2>
<p>Caches are grouped into different classes based on $E$, the number of cache lines per set.</p>
<p><strong>A cache with exactly one line per set (E = 1) is known as a <em>direct-mapped</em> cache</strong></p>
<p>![image-20230220140155600](/Users/lyk/Library/Application Support/typora-user-images/image-20230220140155600.png)</p>
<h3 id="Set-Selection"><a class="header-anchor" href="#Set-Selection"></a>Set Selection</h3>
<p>In this example, the set index bits $00001_2$ are interpreted as an integer index that selects set 1.</p>
<p>![Set selection in a direct-mapped cache](/Users/lyk/Library/Application Support/typora-user-images/image-20230220141928582.png)</p>
<p>In this step, the cache:</p>
<ol>
<li>extracts the $s$ set index bits from the middle of the address for $w$.</li>
<li>These bits are interpreted as <strong>an unsigned integer</strong> that corresponds to <strong>a set number</strong>.</li>
</ol>
<h3 id="Line-Matching-and-Word-Selection"><a class="header-anchor" href="#Line-Matching-and-Word-Selection"></a>Line Matching and Word Selection</h3>
<p>Now that we have selected some set i in the previous step, the next step is to determine if a copy of the word $w$ is stored in one of the cache lines contained in set $i$.</p>
<p>In a direct-mapped cache, this is easy and fast because <u>there is exactly one line per set.</u></p>
<p>A copy of $w$ is contained in the line <strong>if and only if the valid bit is set and the tag in the cache line matches the tag</strong> in the address of $w$.</p>
<p>在下图中, valit bit = 1,  且该cache line的tag bits和所给地址中的tag bits相同, 因此Cache hit. 反之则cache miss.</p>
<p>![Line matching and word selection in a direct-mapped cache](/Users/lyk/Library/Application Support/typora-user-images/image-20230220141831370.png)</p>
<h2 id="Set-Associative-Caches"><a class="header-anchor" href="#Set-Associative-Caches"></a>Set Associative Caches</h2>
<p>The problem with conflict misses in direct-mapped caches stems from the constraint that <u>each set has exactly one line</u> (or in our terminology, E = 1). A <em>set associative cache</em> relaxes this constraint so that each set holds more than one cache line.</p>
<p>A cache with $1 &lt; E &lt; C/B$ is often called an <strong>E-way set associative cache</strong>.</p>
<h3 id="Set-Selection-2"><a class="header-anchor" href="#Set-Selection-2"></a>Set Selection</h3>
<p>![Set Selection in Set Associative Caches](/Users/lyk/Library/Application Support/typora-user-images/image-20230220141655020.png)</p>
<p>Set selection is identical to a direct-mapped cache, with the set index bits identi- fying the set. Figure 6.33 summarizes this principle.</p>
<h3 id="Line-Matching-and-Word-Selection-2"><a class="header-anchor" href="#Line-Matching-and-Word-Selection-2"></a>Line Matching and Word Selection</h3>
<p>![Line Matching and Word Selection in Set Associative Caches](/Users/lyk/Library/Application Support/typora-user-images/image-20230220141013402.png)</p>
<p>Line Matching and Word Selection in Set Associative Caches</p>
<ul>
<li>A <strong>conventional memory</strong> is an array of values that <u>takes an address as input and returns the value stored at that address.</u></li>
<li>An <em>associative memory</em>, on the other hand, is an array of (key, value) pairs that <u>takes as input the key and returns a value from one of the (key, value) pairs that matches the input key.</u></li>
<li>Thus, we can think of each set in a set associative cache as a small associative memory where the keys are the concatenation of the tag and valid bits, and the values are the contents of a block.</li>
<li>Figure 6.34 shows the basic idea of line matching in an associative cache. An important idea here is that <strong>any</strong> line in the set <strong>can</strong> contain any of the memory blocks that map to that set. So the cache <strong>must search each line in the set</strong> for a valid line whose tag matches the tag in the address.</li>
</ul>
<p><strong>if there is an empty line</strong>, then it would be a good candidate.</p>
<p>But if there are no empty lines in the set, then we must <strong>choose one of the nonempty lines</strong> and hope that the CPU does not reference the replaced line anytime soon.</p>
<h2 id="Fully-Associative-Caches"><a class="header-anchor" href="#Fully-Associative-Caches"></a>Fully Associative Caches</h2>
<p>A <em>fully associative cache</em> consists of a single set (i.e., E = C/B) that contains all of the cache lines.</p>
<p>![Fully Associative Caches](/Users/lyk/Library/Application Support/typora-user-images/image-20230220141301248.png)</p>
<h3 id="Set-Selection-3"><a class="header-anchor" href="#Set-Selection-3"></a>Set Selection</h3>
<p>![Set Selection in Fully Associative Caches](/Users/lyk/Library/Application Support/typora-user-images/image-20230220141432658.png)</p>
<p>Set selection in a fully associative cache is trivial because there is only one set, summarized in Figure 6.36. Notice that there are no set index bits in the address, which is partitioned into only a tag and a block offset.</p>
<p>根本没有set index</p>
<h3 id="Line-Matching-and-Word-Selection-3"><a class="header-anchor" href="#Line-Matching-and-Word-Selection-3"></a>Line Matching and Word Selection</h3>
<p>Line Matching and Word Selection in Fully Associative Caches</p>
<p>![Line Matching and Word Selection in Fully Associative Caches](/Users/lyk/Library/Application Support/typora-user-images/image-20230220141412164.png)</p>
<p>Line matching and word selection in a fully associative cache work the same as with a set associative cache, as we show in Figure 6.37. The difference is mainly <strong>a question of scale.</strong></p>
<ul>
<li>
<p>a question of scale:</p>
<p>Because the cache circuitry must search for many matching tags in parallel, it is difficult and expensive to build an associative cache that is both large and fast. As a result, fully associative caches are only appropriate for small caches, such as the translation lookaside buffers (TLBs) in virtual memory systems that cache page table entries (Section 9.6.2).</p>
</li>
</ul>
<p>On power-up, the hardware sets all the valid bits in all the caches to &quot;invalid&quot;. Some systems also set a valid bit to &quot;invalid&quot; at other times （电源启动的时候，硬件设置所有的真实位为“非真实”，一些系统也在其他时候设置一个真实位为非真实）</p>
<p>A data cache typically requires two flag bits per cache row entry: a valid bit and also a <a href="http://en.wikipedia.org/wiki/Dirty_bit">dirty bit</a>. The dirty bit indicates whether that block has been unchanged since it was read from main memory -- &quot;clean&quot; -- or whether the processor has written data to that block (and the new value has not yet made it all the way to main memory) -- &quot;dirty&quot;.（一个数据缓存行一般需要两个标志位：真实位和脏位。脏位表明缓存块中的数据是否遭到修改并且没有被写入内存）。</p>
<h1 id="Why-index-with-the-middle-bits"><a class="header-anchor" href="#Why-index-with-the-middle-bits"></a>Why index with the middle bits?</h1>
<p>Cache将物理地址中中间(而不是高位)的几位作为Cache Line的组号, 这是为了提高Cache效率, 使得Cache尽快加载尽可能多的Cache Line</p>
<p>考虑如下情况, 一个4路组Cache将物理地址的高两位作为组号:</p>
<p>![image-20230224161509761](/Users/lyk/Library/Application Support/typora-user-images/image-20230224161509761.png)</p>
<p>我们看到, 这会导致连续的主存块被映射到相同的组. 例如, 在上图中, 第0,1, 2,3个块都被映射到第0组; 第4,5, 6,7个块都被映射到第1组...</p>
<p>如果一个程序拥有比较好的空间局部性, 那么在该程序运行期间, Cache可能只会加载几个组, 剩下几个组的Cache line一直不会被加载.</p>
<p>因此我们将物理地址的中间几位作为组号, 如上图, 此时第0,4, 8,12个块都被映射到第0组, 则当程序运行时, 尽可能多的Cache Line会被加载.</p>
<p>You may be wondering why caches use the middle bits for the set index instead of the high-order bits. There is a good reason why the middle bits are better. Figure 6.31 shows why. If the high-order bits are used as an index, then some contiguous memory blocks will map to the same cache set. For example, in the figure, the first four blocks map to the first cache set, the second four blocks map to the second set, and so on. If a program has good spatial locality and scans the elements of an array sequentially, then the cache can only hold a block-size chunk of the array at any point in time. This is an inefficient use of the cache. Contrast this with middle-bit indexing, where adjacent blocks always map to different cache sets. In this case, the cache can hold an entire C-size chunk of the array, where C is the cache size</p>
<h1 id="Line-Replacement"><a class="header-anchor" href="#Line-Replacement"></a>Line Replacement</h1>
<h2 id="FIFO"><a class="header-anchor" href="#FIFO"></a>FIFO</h2>
<h2 id="LFU"><a class="header-anchor" href="#LFU"></a>LFU</h2>
<p>a <em>least frequently used (LFU)</em> policy will replace the line that has been referenced the fewest times over some past time window.</p>
<h2 id="LRU"><a class="header-anchor" href="#LRU"></a>LRU</h2>
<p>A <em>least recently used (LRU)</em> policy will replace the line that was last accessed the furthest in the past.</p>
<p>“访问”指的是访问对应内存. 仅仅将block从主存中取出来, 而没有“访问”它. 就不算“访问”.</p>
<h1 id="写操作策略"><a class="header-anchor" href="#写操作策略"></a>写操作策略</h1>
<h2 id="直写"><a class="header-anchor" href="#直写"></a>直写</h2>
<p>为保证 Cache 与主存的一致性，往 Cache 写入时同时也要往主存写入 但降低写入速度，容易产生瓶颈</p>
<h2 id="写回"><a class="header-anchor" href="#写回"></a>写回</h2>
<p>在 Cache 中增加一位(脏位)表示是否被修改过，若“脏”，则替换整个块时前将其写回 减少写入操作，但会有不必要的麻烦(如输出时会取得主存中未修改的数据) 策略:输出时候强制修改主存</p>
<h1 id="Questions"><a class="header-anchor" href="#Questions"></a>Questions</h1>
<p>COA22 06</p>
<blockquote>
<p>Q: 为什么 Cache 可以采用直写策略，而修改页面内容时总是采用回写策略?</p>
</blockquote>
<p>Answer:</p>
<ol>
<li>因为采用直写策略时需要同时写快速存储器和慢速存储器，而写磁盘比写主存慢很多，所以在</li>
</ol>
<p>Cache-主存层次，Cache 可以采用直写策略，而在主存-外存(磁盘)层次，修改页面内容时总是采用回写策略。</p>
<hr>
<p>![image-20230225191658506](/Users/lyk/Library/Application Support/typora-user-images/image-20230225191658506.png)</p>
<hr>
<p>![image-20230225191713106](/Users/lyk/Library/Application Support/typora-user-images/image-20230225191713106.png)</p>
<hr>
<p>![image-20230225231434651](/Users/lyk/Library/Application Support/typora-user-images/image-20230225231434651.png)</p>
<hr>
<p>![image-20230225234729675](/Users/lyk/Library/Application Support/typora-user-images/image-20230225234729675.png)</p>
<hr>
<p>![image-20230225235137362](/Users/lyk/Library/Application Support/typora-user-images/image-20230225235137362.png)</p>
<p>不要忘了Valid Bit</p>
<hr>
<p>![image-20230225235736774](/Users/lyk/Library/Application Support/typora-user-images/image-20230225235736774.png)</p>
<p>注意, 每个循环都要读一次写一次.</p>
<hr>
<p>2015 mid</p>
<p>![image-20230226010637925](/Users/lyk/Library/Application Support/typora-user-images/image-20230226010637925.png)</p>
<p>时间 = Cache访问时间 + 主存访问时间 * Cache miss概率</p>
<p>Cache miss概率 = 指令丢失概率 + 数据丢失概率</p>
<p>数据丢失概率 = ( 30% + 10 * 2 ) * 5%</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Computer Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>CAP Theory</title>
    <url>/2022/08/26/CAP-Theory/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Intro</li>
<li>Consistency</li>
<li>Availability</li>
<li>Partition Tolerance</li>
<li>CAP: Tradeoff</li>
<li>Yield &amp;&amp; Harvest</li>
<li>BASE Theory</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<p>In 2000, Dr. Eric Brewer 在 <em>Proceedings of the Annual ACM Symposium on Principles of Distributed Computing</em>[^1]上提出了CAP理论的猜想:</p>
<p>a shared-data system can have at most two of the three following properties:</p>
<ol>
<li><strong>C</strong>onsistency:</li>
<li><strong>A</strong>vailability</li>
<li>tolerance to network <strong>P</strong>artitions.</li>
</ol>
<p>In 2002, Gilbert and Lynch[^2] 形式化地证明了该猜想.</p>
<p>CAP理论揭示出分布式系统不可能同时满足CAP这三者.</p>
<h1 id="Consistency"><a class="header-anchor" href="#Consistency"></a>Consistency</h1>
<p>From Gilbert and Lynch<a href="https://codahale.com/you-cant-sacrifice-partition-tolerance/#fn:2">^2</a>:</p>
<blockquote>
<p>Atomic, or linearizable, consistency is the condition expected by most web services today. Under this consistency guarantee, there must exist a total order on all operations such that <strong>each operation looks as if it were completed at a single instant</strong>. This is equivalent to requiring requests of the distributed shared memory to act as if they were executing on a single node, responding to operations one at a time.</p>
</blockquote>
<ul>
<li>一致性( Consistency ): a system is consistent if <strong>an update is applied to all relevant nodes at the same <u>logical time</u>.</strong>
<ul>
<li>也就是说系统各节点的状态是一致的, 对多个节点的操作从结果上看就好像是对一个节点的操作, 不存在状态不一致的节点. 这也要求操作的原子性.</li>
<li>比如, 所有节点访问同一份最新的数据副本.</li>
<li>database replication不是强一致性的, 因为副本同步需要时间.</li>
</ul>
</li>
<li>即使和全局的一致性是不可能的, 我们要求的只是相对而言的一致性( 即不一致状态的时间粒度很小, 小到没有影响 )</li>
<li>关于一致性的实现, 有强一致性算法和最终一致性算法</li>
</ul>
<h2 id="Strong-Consistency"><a class="header-anchor" href="#Strong-Consistency"></a>Strong Consistency</h2>
<p>//TODO</p>
<p>Paxos：我最喜欢的图灵奖获得者Leslie Lamport于90年提出，几乎所有强一致性算法鼻祖.</p>
<p>Raft(Paxos变种)：etcd使用</p>
<p>ZAB(Paxos变种)：ZooKeeper使用</p>
<h2 id="Eventual-Consistency-Algorithm"><a class="header-anchor" href="#Eventual-Consistency-Algorithm"></a>Eventual  Consistency Algorithm</h2>
<p>DNS系统：域名解析，超过TTL逐步向上询问</p>
<p>Gossip算法：逆熵算法，Cassandra中使用</p>
<h2 id="Eventual-Consistency"><a class="header-anchor" href="#Eventual-Consistency"></a>Eventual Consistency</h2>
<h1 id="Availability"><a class="header-anchor" href="#Availability"></a>Availability</h1>
<p>Again from Gilbert and Lynch[^2]:</p>
<blockquote>
<p>For a distributed system to be continuously available, <strong>every request received by a non-failing node in the system must result in a response</strong>. That is, <strong>any algorithm used by the service must eventually terminate</strong> … [When] qualified by the need for partition tolerance, this can be seen as a strong definition of availability: even when severe network failures occur, every request must terminate.</p>
</blockquote>
<ul>
<li>可用性(Availability): 每个对non-failing node的请求一定能被响应.
<ul>
<li>这里指的是<u>有效</u>的响应, 500服务器错误不是一次有效的响应.</li>
</ul>
</li>
<li>绝对的可用性也是不可能的, 因为存在节点全部fail的情况</li>
</ul>
<h1 id="Partition-Tolerance"><a class="header-anchor" href="#Partition-Tolerance"></a>Partition Tolerance</h1>
<p>Once more, Gilbert and Lynch<a href="https://codahale.com/you-cant-sacrifice-partition-tolerance/#fn:2">2</a>:</p>
<blockquote>
<p>In order to model partition tolerance, <strong>the network will be allowed to lose arbitrarily many messages sent from one node to another</strong>. When a network is partitioned, all messages sent from nodes in one component of the partition to nodes in another component are lost. (And any pattern of message loss can be modeled as a temporary partition separating the communicating nodes at the exact instant the message is lost.)</p>
</blockquote>
<ul>
<li>分区容错性(Partition tolerance): 系统能够容忍任意的网络分区故障.
<ul>
<li>这里的网络分区故障是指, 网络分成许多区域, 不同区域间不能互通</li>
<li>网络丢包可以被认为是暂时的分区故障; node failure也可以被认为是分区故障, 因为所有发送给它的数据包都会丢失</li>
<li>当然也存在不需要分区容错性的系统, 比如单机系统. 不过对于分布式系统, 都存在分区问题.</li>
</ul>
</li>
<li>只要是分布是</li>
</ul>
<h2 id="P-is-Mandatory"><a class="header-anchor" href="#P-is-Mandatory"></a>P is Mandatory</h2>
<p><strong>P is mandatory in distributed systems. You cannot not choose it.</strong></p>
<p>我们可以假设一下, 如果有一个CA的系统, 它有三个节点$A, B, V$, 管理同一块数据. 由于网络分区, 节点被分裂为${A, B}$和${C}$, 此时有一个更新数据的写请求到达节点$C$. 此时$C$只有两种选择:</p>
<ol>
<li>接受这次写请求, 但是$A,B$ 在分区恢复前永远不知道数据已经被更新</li>
<li>拒绝这次写请求, 直到分区恢复后再开始接受请求</li>
</ol>
<p>选择1只能保证可用性, 选择2只能保证一致性. 但没法同时保持CA.</p>
<p>因此, 只要是分布式系统, 都<strong>必须保持P</strong>. 因此系统要么是CP, 要么是AP, 绝不可能是CA. 除非这个分布式系统能够在网络分区的情况下更新其他节点的状态, 但这是不可能的.</p>
<h1 id="CAP-Tradeoff"><a class="header-anchor" href="#CAP-Tradeoff"></a>CAP: Tradeoff</h1>
<h2 id="Consistency-Availability"><a class="header-anchor" href="#Consistency-Availability"></a>Consistency &gt; Availability</h2>
<p>如果一个系统是CP的, 也就是提供一致性( C )而不是可用性( A ), 它将通过<strong>拒绝响应一些请求</strong>来保证其一致性( i.e. 原子读写, 事务)</p>
<p>常见例子是大部分分布式数据库以及银行系统</p>
<h2 id="Availability-Consistency"><a class="header-anchor" href="#Availability-Consistency"></a>Availability &gt; Consistency</h2>
<p>如果一个系统是AP的, 也就是提供可用性( A ), 而不是一致性( C ), 它将对所有的请求做出响应，可能会返回旧的读和接受冲突的写.</p>
<p>有很多数据模型可以接受旧的读, 比如金融行业, 淘宝, 12306 ...</p>
<h1 id="Yield-Harvest"><a class="header-anchor" href="#Yield-Harvest"></a>Yield &amp;&amp; Harvest</h1>
<p>有许多种对分布式系统的度量, 其中很有名的是 Fox 和 Brewer在“Harvest, Yield, and Scalable Tolerant Systems”[^3]中提出的<strong>yield</strong> and <strong>harvest</strong>.</p>
<ul>
<li>
<p><strong>yield</strong>: he probability of completing a request</p>
<ul>
<li>yield与&quot;正常运行时间&quot;很接近，但在实践中更有用，因为并非所有的时间都有同等价值. yield直接映射到用户体验. 在没有请求的情况下宕机一秒钟, 会减少正常运行时间, 但对用户或yield没有影响</li>
</ul>
</li>
<li>
<p><strong>harvest</strong>:  the fraction of the data reflected in the response, i.e. the completeness of the answer to the query.<br>
$$<br>
\mathrm{harvest}= \frac{\mathrm{total \ data}}{\mathrm{data \ available}}<br>
$$</p>
<ul>
<li>例如, 假设我们在一个搜索引擎上工作，我们可以想象每个词都有单独的索引。使用 &quot;cute &quot;一词的网页的索引在$A$节点上，使用 &quot;婴儿 &quot;一词的网页的索引在$B$节点上，而 &quot;动物 &quot;一词的索引在$C$机器上。那么，搜索 &quot;cute baby animals&quot;，结合来自节点$A,B,C$的结果，${A,B,C}$将有100%的$\mathrm{harvest}$. 然而, 如果节点$BB$不可用，我们可能只返回 &quot;cute animals&quot;的结果，这将是一个66%的$\mathrm{harvest}$.</li>
<li>例如, 一个存储文件版本的系统在一些节点瘫痪的情况下, 可以选择呈现它能找到的最新版本的文件，即使它知道这有可能不是它所存储的最新版本.</li>
</ul>
</li>
<li>
<p>关键在于, yield和harvest之间存在trade off. 在设计系统时要根据业务来侧重其中一方. Replicated systems 倾向于把fault等价为 reduced yield, 因为请求被拒绝了(为了同步); partitioned systems 倾向于把fault等价为 reduced harvest, 因为能够接受相同数量的请求, 但是某些分区中的数据不见了.</p>
</li>
</ul>
<h1 id="BASE-Theory"><a class="header-anchor" href="#BASE-Theory"></a>BASE Theory</h1>
<p>CAP理论描述了分布式系统的理想状态, BASE理论是一个更妥协的理论, 在实践中更有用:</p>
<ul>
<li><strong>B</strong>asically <strong>A</strong>vailable( 基本可用 ): 在出现故障时，允许部分可用性（基础可用）</li>
<li><strong>S</strong>oft State( 软状态 ): 允许出现中间状态，不同节点之间数据不一致</li>
<li><strong>E</strong>ventual Consistency( 最终一致性 ): 软状态不可持续, 在有限期限后应能保证数据的最终一致</li>
</ul>
<h1 id="Refs"><a class="header-anchor" href="#Refs"></a>Refs</h1>
<p>[^1]: Brewer. <a href="http://www.cs.berkeley.edu/~brewer/cs262b-2004/PODC-keynote.pdf">Towards robust distributed systems.</a> Proceedings of the Annual ACM Symposium on Principles of Distributed Computing (2000) vol. 19 pp. 7—10<br>
[^2]: Gilbert and Lynch. <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.67.6951&amp;rep=rep1&amp;type=pdf">Brewer’s conjecture and the feasibility of consistent, available, partition-tolerant web services.</a> ACM SIGACT News (2002) vol. 33 (2) pp. 59<br>
[^3]: Fox and Brewer. <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.24.3690&amp;rep=rep1&amp;type=pdf">Harvest, yield, and scalable tolerant systems.</a> Hot Topics in Operating Systems, 1999. Proceedings of the Seventh Workshop on (1999) pp. 174—178</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Distributed System</tag>
      </tags>
  </entry>
  <entry>
    <title>Case Study</title>
    <url>/2022/06/24/Case-Study/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Definition of Case Study</li>
<li>Types of Case Study</li>
<li>Case Study Steps</li>
</ul>
<span id="more"></span>
<h1 id="Def"><a class="header-anchor" href="#Def"></a>Def</h1>
<p>Case Study围绕一些<strong>具体的</strong>对象进行研究</p>
<h1 id="Types"><a class="header-anchor" href="#Types"></a>Types</h1>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%BB%8F%E9%AA%8C%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/Case%20Study%20Types.png" alt="Case Study Types"></p>
<ul>
<li>
<p><strong>Single or multiple</strong> case studies</p>
<ul>
<li>multiple-case is often be stronger than single-case</li>
</ul>
</li>
<li>
<p><strong>Holistic or embedded</strong> case studies</p>
<ul>
<li>holistic: the case is studied as a whole 对整个case进行一次研究</li>
<li>embedded: multiple observations (units of analysis) are studied within a case。将case拆分成一个个模块，分别研究</li>
</ul>
</li>
<li>
<p><strong>Literal or theoretical</strong> replications</p>
<ul>
<li>theoretically replicated: the case is selected to predict contrasting results for anticipatable reasons</li>
<li>literally replicated: the case is selected to predict similar results</li>
</ul>
</li>
</ul>
<h1 id="Steps"><a class="header-anchor" href="#Steps"></a>Steps</h1>
<p>Main Steps of A Case Study:</p>
<ol>
<li>Designing case study</li>
<li>Preparing data collection</li>
<li>Collecting data</li>
<li>Analysing data</li>
<li>Reporting case study</li>
</ol>
<h2 id="1-Designing-Case-Study"><a class="header-anchor" href="#1-Designing-Case-Study"></a>1.Designing Case Study</h2>
<h3 id="Triangulation"><a class="header-anchor" href="#Triangulation"></a>Triangulation</h3>
<p>在Case Study设计时要遵循三角分离原则</p>
<ul>
<li>
<p>Data (source) triangulation</p>
<ul>
<li>using more than one data source or collecting the same data at different occasions 使用多数据源</li>
</ul>
</li>
<li>
<p>Observer triangulation</p>
<ul>
<li>using more than one observer in the study 多个观察者</li>
</ul>
</li>
<li>
<p>Methodological triangulation</p>
<ul>
<li>combining different types of data collection methods, e.g. qualitative and quantitative methods 使用多种数据收集方法</li>
</ul>
</li>
<li>
<p>Theory triangulation</p>
<ul>
<li>using alternative theories or viewpoints 使用多种理论</li>
</ul>
</li>
</ul>
<h2 id="2-Preparing-data-collection"><a class="header-anchor" href="#2-Preparing-data-collection"></a>2.Preparing data collection</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%BB%8F%E9%AA%8C%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/Case%20Study%20data%20collection%20source.png" alt="Case Study data collection source"></p>
<h2 id="3-Collecting-Data"><a class="header-anchor" href="#3-Collecting-Data"></a>3.Collecting Data</h2>
<h3 id="data-collection-techniques"><a class="header-anchor" href="#data-collection-techniques"></a>data collection techniques</h3>
<ol>
<li>
<p>direct methods: researchers are in direct contact with the subjects and collect data in real time 研究者与被研究对象直接接触</p>
</li>
<li>
<p>indirect methods:researchers directly collect raw data without actually interacting with the subjects during the data collection 研究者与被研究对象（在数据收集期间）不直接接触</p>
</li>
<li>
<p>independent analysis:use work artifacts already available and sometimes compiled data 研究者不接触研究对象，而是接触研究对象的数据</p>
</li>
</ol>
<h3 id="evidence-sources"><a class="header-anchor" href="#evidence-sources"></a>evidence sources</h3>
<ul>
<li>documentation</li>
<li>archival records</li>
<li><strong>interviews</strong></li>
<li>direct (independent) observation</li>
<li>participant-observation</li>
<li>physical artifacts</li>
</ul>
<p><strong>Interviews</strong>：</p>
<ul>
<li>
<p>Unstructured interview 谈话过程完全根据研究者的主观意愿</p>
</li>
<li>
<p>Fully structured interview 所有问题，包括问题的顺序都是设计好的</p>
</li>
<li>
<p>Semi-structured interview 问题是设计好的，但问题的顺序可以自由安排</p>
</li>
</ul>
<p><strong>Interview modes</strong>：</p>
<ul>
<li>漏斗式（ funnel mode）：从开放式问题开始，逐步引导到具体问题</li>
<li>金字塔式（pyramid mode）： 从特定问题开始，逐步引导到开放问题</li>
<li>沙漏式（time-glass mode）： 从开放式问题开始，中间引导到特定问题，最后再引导到开放问题</li>
</ul>
<h2 id="4-Analysing-data"><a class="header-anchor" href="#4-Analysing-data"></a>4.Analysing data</h2>
<h3 id="Quantitative-Analysis"><a class="header-anchor" href="#Quantitative-Analysis"></a>Quantitative Analysis</h3>
<ul>
<li>Descriptive statistics 对数据给出解释，比如用直方图</li>
<li>Correlation analysis &amp; predictive modelling： 解释一个变量如何影响之后的另一个变量</li>
<li>Hypothesis testing：检验一/多个变量是否对另一/多个变量有影响</li>
</ul>
<h3 id="Qualitative-Analysis"><a class="header-anchor" href="#Qualitative-Analysis"></a>Qualitative Analysis</h3>
<ul>
<li>Theory generation：find hypotheses or develop a theory from the data</li>
<li>Theory confirmation：confirm a hypothesis or theory is really true</li>
<li>Negative case analysis：try to find alternative explanations that reject the hypotheses or a theory</li>
<li>Combination of the above：use them iteratively and in combination</li>
</ul>
<h2 id="5-Reporting-case-study"><a class="header-anchor" href="#5-Reporting-case-study"></a>5.Reporting case study</h2>
<p>Alternative structures for case study report</p>
<ul>
<li>
<p><strong>Linear-analytic</strong>: standard reporting structure</p>
</li>
<li>
<p><strong>Comparative</strong>: compares alternative cases</p>
</li>
<li>
<p><strong>Chronological</strong>: suitable for longitudinal studies</p>
</li>
<li>
<p><strong>Theory-building</strong>: follows a chain of evidence in order to constitute a theory</p>
</li>
<li>
<p><strong>Suspense</strong>: reverts the linear-analytic structure</p>
</li>
<li>
<p><strong>Unsequenced</strong>: none of the above</p>
</li>
<li>
<p>e.g., when reporting general characteristics of a set of cases</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
      <tags>
        <tag>Empirical SE</tag>
      </tags>
  </entry>
  <entry>
    <title>Command-line Environment</title>
    <url>/2022/02/11/Command-line-Environment/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Job control</li>
<li>Tmux</li>
<li>Aliase</li>
<li>Dotfiles</li>
<li>Remote Machines ( ssh端口转发详见其他文章 )</li>
</ul>
<p>ref: <a href="https://missing.csail.mit.edu/2020/command-line/">MIT lesson</a>, <a href="https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/">tmux tutorial</a>, <a href="https://www.cnblogs.com/sparkdev/p/12146305.html">a good introduction of Session</a></p>
<span id="more"></span>
<h2 id="控制终端-controlling-terminal"><a class="header-anchor" href="#控制终端-controlling-terminal"></a>控制终端(controlling terminal)</h2>
<p>**控制终端是进程的一个属性。**通过 <code>fork</code> 系统调用创建的子进程会从父进程那里继承控制终端。这样，session 中的所有进程都从 session 领头进程那里继承控制终端。Session 的领头进程称为终端的控制进程(controlling process)。简单点说就是：**一个 session 只能与一个终端关联，这个终端被称为 session 的控制终端(controlling terminal)。**同时只能由 session 的领头进程来建立或者改变终端与 session 的联系。我们可以通过 ps 命令查看进程的控制终端：</p>
<p><img data-src="https://img2018.cnblogs.com/blog/952033/202001/952033-20200103182831279-993028624.png" alt="img"></p>
<p>支持 job control 的 <strong>shell</strong> 必须能够控制在某一时刻由哪个 job 使用终端。否则，可能会有多个 job 试图同时从终端读取数据，这会导致进程在接收用户输入时的混乱。为了防止这种情况发生，shell 必须按照预定的协议与终端驱动程序协作。</p>
<p>shell 一次只允许一个 job(进程组)访问控制终端。来自控制终端的某些输入会导致信号被发送到与控制终端关联的 job(进程组)中的所有进程。该 job 被称为控制终端上的前台 job。由 shell 管理的其他 job 在不访问终端的情况下，被称为后台 job。</p>
<p>Shell 的职责是通知 job 何时停止何时启动，还要把 job 的信息通知给用户，并提供机制允许用户继续暂停的 job、在前台和后台之间切换 job。比如前台 job 可以无限制的自由使用控制终端，而后台 job 则不可以。当后台 job 中的进程试图从其控制终端读取数据时，通常会向进程组发送 SIGTTIN 信号。这通常会导致该组中的所有进程停止(变成 stopped 状态)。类似地，当后台 job 中的进程试图写入其控制终端时，默认行为是向进程组发送 SIGTTOU 信号，但是否允许写入的控制会更加的复杂。</p>
<h1 id="Job-control"><a class="header-anchor" href="#Job-control"></a>Job control</h1>
<p>shell和进程采用<code>signal</code>通信，<code>signal</code>是一种软件中断</p>
<h2 id="Killing-a-process"><a class="header-anchor" href="#Killing-a-process"></a>Killing a process</h2>
<ul>
<li><code>Ctrl-z</code>:	<code>SIGSTP</code>,</li>
<li><code>Ctrl-c:	</code>SIGINT`</li>
<li><code>Ctrl-\</code>:	<code>SIGQUIT</code></li>
<li><code>kill -TERM&lt;PID&gt;</code>: <code>SIGTERM</code>(  比前二者更general )</li>
</ul>
<p>An example of a Python program that captures <code>SIGINT</code> and ignores it,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> signal, time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handler</span>(<span class="params">signum, time</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nI got a SIGINT, but I am not stopping&quot;</span>)</span><br><span class="line"></span><br><span class="line">signal.signal(signal.SIGINT, handler)</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    time.sleep(<span class="number">.1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\r&#123;&#125;&quot;</span>.<span class="built_in">format</span>(i), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Terminal :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">202^C</span><br><span class="line">I got a SIGINT, but I am not stopping</span><br><span class="line">212^C</span><br><span class="line">I got a SIGINT, but I am not stopping</span><br><span class="line">219^C</span><br><span class="line">I got a SIGINT, but I am not stopping</span><br><span class="line">367^\zsh: quit (core dumped)  /bin/python ~/Projects/Python/ignoreSIGINT.py</span><br></pre></td></tr></table></figure>
<p><code>^</code> is how <code>Ctrl</code> is displayed when typed in the terminal</p>
<h2 id="Pausing-and-backgrounding-processes"><a class="header-anchor" href="#Pausing-and-backgrounding-processes"></a>Pausing and backgrounding processes</h2>
<ul>
<li>
<p><code>Ctrl-z</code>:	<code>SIGSTP</code>, 会将进程suspend</p>
<ul>
<li>short for Terminal Stop (i.e. the terminal’s version of <code>SIGSTOP</code>), which pauses a process</li>
</ul>
</li>
<li>
<p><a href="https://www.man7.org/linux/man-pages/man1/fg.1p.html"><code>fg</code></a> or <a href="http://man7.org/linux/man-pages/man1/bg.1p.html"><code>bg</code></a>: continue the paused job in the foreground or in the background</p>
</li>
<li>
<p><code>fg/bg</code>: Resume the most recently suspended job and run it in the forward/background</p>
</li>
<li>
<p><code>fg/bg  %job_id</code></p>
</li>
<li>
<p><code>jobs</code>:  显示<strong>当前session</strong>的未完成的job， 每个job都会分配一个工作号， 由<code>%[job_id]引用</code></p>
<ul>
<li>
<p><code>[工作号] 进程号</code></p>
</li>
<li>
<p>得到job的PID：</p>
<ul>
<li><code>grep</code></li>
</ul>
</li>
<li>
<p>To refer to the last backgrounded job you can use the <code>$!</code> special parameter.</p>
</li>
</ul>
<p>如果在终端上出现如下信息：</p>
<p><code>[1]+ Done find / -name install.log</code></p>
<p>则证明后台的这个命令已经完成了。命令如果有执行结果，则也会显示到操作终端上。其中，[1] 是这个命令的工作号，&quot;+&quot;代表这个命令是最近一个被放入后台的</p>
</li>
<li>
<p><code>pgrep</code>: Find or signal processes by name.</p>
<ul>
<li>
<p><code>-l</code>：同时显示进程名和PID</p>
</li>
<li>
<p><code>-o</code>： 当匹配多个进程时，显示进程号最小的那个</p>
</li>
<li>
<p><code>-n</code>： 当匹配多个进程时，显示进程号最大的那个</p>
<ul>
<li>注：进程号越大，并不一定意味着进程的启动时间越晚</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Return PIDs of any running processes with a matching <span class="built_in">command</span> string:</span></span><br><span class="line">pgrep process_name</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>&amp;</code> suffix in a command will run the command in the background, giving you the prompt back, although <strong>it will still use the shell’s <code>STDOUT</code> which can be annoying</strong></p>
<ul>
<li>(use shell redirections in that case): <code>command &gt;out.file 2&gt;&amp;1 &amp;</code></li>
</ul>
</li>
<li>
<p>被放到后台的进程是当前terminal的子进程，当杀死父进程terminal时，会发送<code>SIGHUP</code>杀死子进程，为了避免这种情况：</p>
<ul>
<li>
<p>run the program with <a href="https://www.man7.org/linux/man-pages/man1/nohup.1.html"><code>nohup</code></a> (a wrapper to ignore <code>SIGHUP</code>)</p>
<p><code>nohup command command_arguments</code></p>
</li>
<li>
<p>use <code>disown</code> if the process has already been started</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">disown</span> the current job:</span>                                                     </span><br><span class="line">disown</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Disown a specific job:</span></span><br><span class="line">disown %job_number                                                           </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Disown all <span class="built_in">jobs</span>:</span></span><br><span class="line">disown -a                                                                   </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Keep job (<span class="keyword">do</span> not <span class="built_in">disown</span> it), but mark it so that no future SIGHUP is <span class="comment">#received on shellexit:</span></span>                                                     </span><br><span class="line">disown -h %job_number</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="example"><a class="header-anchor" href="#example"></a>example</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sleep</span> 1000</span></span><br><span class="line">^Z</span><br><span class="line">[1]  + 18653 suspended  sleep 1000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">nohup</span> <span class="built_in">sleep</span> 2000 &amp;</span></span><br><span class="line">[2] 18745</span><br><span class="line">appending output to nohup.out</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">jobs</span></span></span><br><span class="line">[1]  + suspended  sleep 1000</span><br><span class="line">[2]  - running    nohup sleep 2000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">bg</span> %1</span></span><br><span class="line">[1]  - 18653 continued  sleep 1000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">jobs</span></span></span><br><span class="line">[1]  - running    sleep 1000</span><br><span class="line">[2]  + running    nohup sleep 2000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">kill</span> -STOP %1</span></span><br><span class="line">[1]  + 18653 suspended (signal)  sleep 1000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">jobs</span></span></span><br><span class="line">[1]  + suspended (signal)  sleep 1000</span><br><span class="line">[2]  - running    nohup sleep 2000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">kill</span> -SIGHUP %1</span></span><br><span class="line">[1]  + 18653 hangup     sleep 1000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">jobs</span></span></span><br><span class="line">[2]  + running    nohup sleep 2000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">kill</span> -SIGHUP %2</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">jobs</span></span></span><br><span class="line">[2]  + running    nohup sleep 2000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">kill</span> %2</span></span><br><span class="line">[2]  + 18745 terminated  nohup sleep 2000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">jobs</span></span></span><br></pre></td></tr></table></figure>
<h1 id="Dotfiles"><a class="header-anchor" href="#Dotfiles"></a>Dotfiles</h1>
<ul>
<li>
<p>使用dotbot</p>
</li>
<li>
<p>dotfile无法跨平台，换个os就会失效. 为此，可以根据不同的平台加载不同的配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [[ &quot;$(uname)&quot; == &quot;Linux&quot; ]]; then &#123;do_something&#125;; fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Check before using shell-specific features</span></span><br><span class="line">if [[ &quot;$SHELL&quot; == &quot;zsh&quot; ]]; then &#123;do_something&#125;; fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">You can also make it machine-specific</span></span><br><span class="line">if [[ &quot;$(hostname)&quot; == &quot;myServer&quot; ]]; then &#123;do_something&#125;; fi</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>不同程序共享相同配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Test <span class="keyword">if</span> ~/.aliases exists and <span class="built_in">source</span> it</span></span><br><span class="line">if [ -f ~/.aliases ]; then</span><br><span class="line">    source ~/.aliases</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>注意，某些配置最好不要公开，比如<code>~/.ssh/config</code>, 因此dotfile的版本管理最好用私人仓库</p>
</li>
</ul>
<h1 id="SSH"><a class="header-anchor" href="#SSH"></a>SSH</h1>
<p><code>ssh</code></p>
<ul>
<li><code>ssh username@remote_host</code></li>
</ul>
<h2 id="execute-commands-on-remote-machine"><a class="header-anchor" href="#execute-commands-on-remote-machine"></a>execute commands on remote machine</h2>
<ul>
<li>
<p>``ssh username@remote_host -t “command command_arguments“<code> </code>: 在目标主机的home目录下执行command</p>
<ul>
<li>
<p>要执行的命令必须括起来，否则在有的系统中除了第一个命令，其它都是在本地执行的（比如manjaro）</p>
</li>
<li>
<p>支持pipe：</p>
<ul>
<li><code>ssh foobar@server ls | grep PATTERN</code>： 在本地grep远程的输出</li>
<li><code>ls | ssh foobar@server grep PATTERN</code>： 在远程grep本地的输出</li>
</ul>
</li>
<li>
<p><code>-t</code>：Run a command on a remote server with a [t]ty allocation allowing interaction with the remote command</p>
<ul>
<li>explain： 命令如果要与用户交互，就需要分配tty,默认情况下，单纯的ssh连接，shell会分配一个tty,此时你运行了一个shell session； 但当执行<code>ssh foobar@server &quot;command&quot;</code>时，shell不会为这个远程会话分配 TTY。此时 ssh 会立即退出远程主机，所以需要交互的命令也随之结束， 添加 -t 参数会告诉shell分配一个tty与远程 shell 进行交互，ssh 会保持登录状态，直到你退出需要交互的命令</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Key-generation"><a class="header-anchor" href="#Key-generation"></a>Key  generation</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 1024 -f yourkeyname -C <span class="string">&quot;备注&quot;</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>-b</td>
<td>采用长度1024bit的密钥对,b=bits,最长4096</td>
</tr>
<tr>
<td>-t rsa</td>
<td>采用rsa加密方式,t=type</td>
</tr>
<tr>
<td>-f</td>
<td>生成文件名,f=output_keyfiles</td>
</tr>
<tr>
<td>-C</td>
<td>备注，C=comment</td>
</tr>
<tr>
<td>-a</td>
<td>rounds <br/>       指定密钥生成函数，参数数值越高，密码越安全也越慢，默认为16  Higher numbers result in <br/></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>公钥和私钥默认位于<code>~/.ssh</code></li>
<li>使用<a href="https://www.man7.org/linux/man-pages/man1/ssh-agent.1.html"><code>ssh-agent</code></a> or <a href="https://linux.die.net/man/1/gpg-agent"><code>gpg-agent</code></a>  避免每次都输密码</li>
<li><code>ssh-keygen -y -f ~/.ssh/id_rsa</code>： 根据私钥，检查公钥
<ul>
<li><code>-y</code>：  This option will read a private OpenSSH format file and print an OpenSSH public key to stdout</li>
</ul>
</li>
</ul>
<h2 id="Key-based-authentication"><a class="header-anchor" href="#Key-based-authentication"></a>Key based authentication</h2>
<ul>
<li>
<p><code>ssh</code> will look into <code>.ssh/authorized_keys</code> to determine which clients it should let in</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat .ssh/id_ed25519.pub | ssh foobar@remote &#x27;cat &gt;&gt; ~/.ssh/authorized_keys&#x27;</span><br></pre></td></tr></table></figure>
<p>or:</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i .ssh/id_ed25519.pub foobar@remote</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>​</p>
<p>​</p>
<h2 id="Copying-files-over-SSH"><a class="header-anchor" href="#Copying-files-over-SSH"></a>Copying files over SSH</h2>
<p>There are many ways to copy files over ssh:</p>
<ul>
<li>
<p><code>ssh+tee</code>, 把本地文件传到远程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat localfile | ssh remote_server &quot;tee serverfile&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>tee</code>: 将标准输入写入文件</li>
</ul>
</li>
<li>
<p><a href="https://www.man7.org/linux/man-pages/man1/scp.1.html"><code>scp</code></a>: 就是ssh + cp</p>
<p>把本机文件传到远程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp path/to/local_file remote_host:path/to/remote_file</span><br></pre></td></tr></table></figure>
<p>传远程文件到本机：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp remote_host:path/to/remote_file path/to/local_file</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-r</code>:传文件夹</li>
<li>scp没穿输完也会生成目标文件，因此断开scp传输后，你依然能在目标主机上看到目标文件，但是切记，这个文件是不完整的</li>
</ul>
</li>
</ul>
<p>​</p>
<p>把远程文件传到本机：</p>
<ul>
<li><a href="https://www.man7.org/linux/man-pages/man1/rsync.1.html"><code>rsync</code></a> improves upon <code>scp</code> by detecting identical files in local and remote, and preventing copying them again. It also provides more fine grained control over symlinks, permissions and has extra features like the <code>--partial</code> flag that can resume from a previously interrupted copy. <code>rsync</code> has a similar syntax to <code>scp</code>.</li>
</ul>
<h2 id="Port-Forwarding"><a class="header-anchor" href="#Port-Forwarding"></a>Port Forwarding</h2>
<ul>
<li>见《SSH Port Forwarding》</li>
</ul>
<h2 id="SSH-Configuration"><a class="header-anchor" href="#SSH-Configuration"></a>SSH Configuration</h2>
<ul>
<li>
<p>alias:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias my_server=&quot;ssh -i ~/.id_ed25519 --port 2222 -L 9999:localhost:8888 foobar@remote_server</span><br></pre></td></tr></table></figure>
<p>好处是可以继续调用别的命令</p>
</li>
<li>
<p>using <code>~/.ssh/config</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host vm</span><br><span class="line">    User foobar</span><br><span class="line">    HostName 172.16.174.141</span><br><span class="line">    Port 2222</span><br><span class="line">    IdentityFile ~/.ssh/id_ed25519</span><br><span class="line">    LocalForward 9999 localhost:8888</span><br><span class="line"></span><br><span class="line"># Configs can also take wildcards</span><br><span class="line">Host *.mit.edu</span><br><span class="line">    User foobaz</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
  </entry>
  <entry>
    <title>Cloud Native Toolkit</title>
    <url>/2022/09/13/Cloud-Native-Toolkit/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Docker</li>
<li>Kubernetes</li>
</ul>
<span id="more"></span>
<h1 id="Docker"><a class="header-anchor" href="#Docker"></a>Docker</h1>
<p>参见《Docker Intro》</p>
<ol>
<li>
<p>install:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install docker.io</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>最好使用非root用户来使用Docker,此时需要添加非root用户到本地Docker Unix组：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker [user_name]</span><br></pre></td></tr></table></figure>
<ul>
<li>如果当前登陆用户就是要添加进组的用户的话，需要重新登陆才能生效</li>
</ul>
</li>
<li>
<p>换源阿里云,需要去阿里云“容器镜像服务” --&gt; “镜像加速器” 生成镜像url：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://zz1b9pta.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>*mac用户可在setting -- docker engine中修改<code>daemon.json</code>文件</p>
</li>
<li>
<p>终端输入docker info查看是否配置成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; docker info</span><br><span class="line">...</span><br><span class="line">Registry Mirrors:</span><br><span class="line">https://zz1b9pta.mirror.aliyuncs.com/</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将docker设置为开机自启：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="kubernetes"><a class="header-anchor" href="#kubernetes"></a>kubernetes</h1>
<h2 id="Install"><a class="header-anchor" href="#Install"></a>Install</h2>
<p>ubuntu20.04下安装k8s</p>
<p>注意，k8s的安装和集群初始化都需要root用户</p>
<ol>
<li>
<p>安装docker</p>
</li>
<li>
<p>安装依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>
<ul>
<li>直接在<code>/etc/apt/sources.list</code>里添加<code>https://mirrors.aliyun.com/kubernetes/apt/</code>是不行的，因为这个阿里镜像站使用的<code>ssl</code>进行传输的，所以要先安装<code>apt-transport-https</code>并下载镜像站的密钥才可以进行下载</li>
</ul>
</li>
<li>
<p>安装GPG证书:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add - </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>写入软件源信息:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;<span class="variable constant_">EOF</span> &gt;<span class="regexp">/etc/</span>apt/sources.<span class="property">list</span>.<span class="property">d</span>/kubernetes.<span class="property">list</span></span><br><span class="line">deb <span class="attr">https</span>:<span class="comment">//mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span></span><br><span class="line"><span class="variable constant_">EOF</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>然后更新源列表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看可安装版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-cache madison kubelet</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装指定版本:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install -y kubelet=1.18.4-00 kubeadm=1.18.4-00 kubectl=1.18.4-00</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>如果想要安装最新版本，就直接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure>
<p>但是很不推荐，因为最新的k8s 1.24.* 的集群初始化有bug，不如用老版本</p>
</li>
</ul>
</li>
<li>
<p>设置开机启动:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable kubelet &amp;&amp; sudo systemctl start kubelet</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看所需镜像,以刚才安装的1.18.4版本为例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm config images list --kubernetes-version=v1.18.4</span><br><span class="line"></span><br><span class="line">k8s.gcr.io/kube-apiserver:v1.18.4</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.18.4</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.18.4</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.18.4</span><br><span class="line">k8s.gcr.io/pause:3.2</span><br><span class="line">k8s.gcr.io/etcd:3.4.3-0</span><br><span class="line">k8s.gcr.io/coredns:1.6.7</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>上面的镜像是Google的，国内无法访问，需要用阿里云的镜像来替换:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.18.4</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.18.4</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.18.4</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.18.4</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0</span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.7</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>为镜像重新打tag：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.18.4 k8s.gcr.io/kube-apiserver:v1.18.4</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.18.4 k8s.gcr.io/kube-controller-manager:v1.18.4</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.18.4 k8s.gcr.io/kube-scheduler:v1.18.4</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.18.4 k8s.gcr.io/kube-proxy:v1.18.4</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2 k8s.gcr.io/pause:3.2</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0 k8s.gcr.io/etcd:3.4.3-0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.7 k8s.gcr.io/coredns:1.6.7</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>执行下面命令，测试安装是否正常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm init</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>k8s集群在初始化时建议使用root用户，如果以普通用户执行<code>kubeadm init</code>， 会得到报错:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ERROR IsPrivilegedUser]: user is not running as root [preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>查看k8s版本:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm version</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm version: &amp;version.Info&#123;Major:&quot;1&quot;, Minor:&quot;24&quot;, GitVersion:&quot;v1.24.1&quot;, GitCommit:&quot;3ddd0f45aa91e2f30c70734b175631bec5b5825a&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2022-05-24T12:24:38Z&quot;, GoVersion:&quot;go1.18.2&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux/amd64&quot;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>``GitVersion:&quot;v1.24.1&quot;&quot;` 即为版本号</li>
</ul>
</li>
</ol>
<h2 id="Uninstall"><a class="header-anchor" href="#Uninstall"></a>Uninstall</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt remove -y kubelet kubeadm kubectl</span><br><span class="line">rm -rf ~/.kube/</span><br><span class="line">rm -rf /etc/kubernetes/</span><br><span class="line">rm -rf /etc/systemd/system/kubelet.service.d</span><br><span class="line">rm -rf /etc/systemd/system/kubelet.service</span><br><span class="line">rm -rf /usr/bin/kube*</span><br><span class="line">rm -rf /etc/cni</span><br><span class="line">rm -rf /opt/cni</span><br><span class="line">rm -rf /var/lib/etcd</span><br><span class="line">rm -rf /var/etcd</span><br></pre></td></tr></table></figure>
<h2 id="配置管理节点"><a class="header-anchor" href="#配置管理节点"></a>配置管理节点</h2>
<h2 id="配置主机"><a class="header-anchor" href="#配置主机"></a>配置主机</h2>
<p>增加主机名:</p>
<p>单独为每个服务器增加主机名，格式为hostnamectl set-hostname hostname。一般主节点取名master，从节点取名node.</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname [k8s-master]</span><br></pre></td></tr></table></figure>
<p>在主节点配置所有k8s服务器的host，并且host名字跟各服务器的主机名对应。这里配置的是公网IP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt; EOF </span><br><span class="line">&lt;主节点公网IP&gt; k8s-master</span><br><span class="line">&lt;工作节点公网IP&gt; k8s-node1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;使host配置生效&quot; &gt; /dev/null</span><br><span class="line">/etc/init.d/network restart</span><br></pre></td></tr></table></figure>
<h2 id="修改cgroup"><a class="header-anchor" href="#修改cgroup"></a>修改cgroup</h2>
<p>Kubernetes cgroup driver was set to systems but docker was set to systemd. So I created <code>/etc/docker/daemon.json</code> and added below:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;exec-opts&quot;:</span> [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">sudo</span> <span class="string">systemctl</span> <span class="string">daemon-reload</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">systemctl</span> <span class="string">restart</span> <span class="string">docker</span></span><br><span class="line"><span class="string">sudo</span> <span class="string">systemctl</span> <span class="string">restart</span> <span class="string">kubelet</span></span><br></pre></td></tr></table></figure>
<p>Then：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker info | grep Cgroup</span><br></pre></td></tr></table></figure>
<p>如果输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cgroup Driver: systemed</span><br><span class="line">Cgroup Version: 1</span><br></pre></td></tr></table></figure>
<p>即成功</p>
<h2 id="Cluster-Config"><a class="header-anchor" href="#Cluster-Config"></a>Cluster Config</h2>
<h3 id="初始化master节点"><a class="header-anchor" href="#初始化master节点"></a>初始化master节点</h3>
<p>如果初始化过程中出现错误，要使用<code>kubeadm reset -f</code>清除之前的配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=121.36.247.134 \</span><br><span class="line">--kubernetes-version=v1.18.4 \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">--service-cidr=10.96.0.0/12 \</span><br><span class="line">--ignore-preflight-errors=Swap</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=121.36.247.134 \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">--pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure>
<p>这里介绍一下一些常用参数的含义：</p>
<ul>
<li><code>--apiserver-advertise-address</code>: k8s 的<code>apiserver</code>的部署地址，填自己的管理节点 ip( 如果公网通信，那就是公网ip )</li>
<li><code>--image-repository</code>: 拉取的 docker 镜像源，因为初始化的时候<code>kubeadm</code>会去拉 k8s 的很多组件来进行部署，所以需要指定国内镜像源，下不然会拉取不到镜像。</li>
<li><code>--pod-network-cidr</code>: 这个是 k8s 采用的节点网络，因为我们将要使用<code>flannel</code>作为 k8s 的网络，所以这里填<code>10.244.0.0/16</code>就好</li>
<li><code>--kubernetes-version</code>: 这个是用来指定你要部署的 k8s 版本的，一般不用填，不过如果初始化过程中出现了因为版本不对导致的安装错误的话，可以用这个参数手动指定。</li>
<li><code>--ignore-preflight-errors</code>: 忽略初始化时遇到的错误，比如说我想忽略 cpu 数量不够 2 核引起的错误，就可以用<code>--ignore-preflight-errors=CpuNum</code>。错误名称在初始化错误时会给出来。</li>
</ul>
<h3 id="配置-kubectl-工具"><a class="header-anchor" href="#配置-kubectl-工具"></a>配置 kubectl 工具</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /root/.kube &amp;&amp; \</span><br><span class="line">cp /etc/kubernetes/admin.conf /root/.kube/config</span><br></pre></td></tr></table></figure>
<h3 id="执行完成后并不会刷新出什么信息，可以通过下面两条命令测试-kubectl是否可用："><a class="header-anchor" href="#执行完成后并不会刷新出什么信息，可以通过下面两条命令测试-kubectl是否可用："></a>执行完成后并不会刷新出什么信息，可以通过下面两条命令测试 <code>kubectl</code>是否可用：</h3>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 查看已加入的节点</span></span><br><span class="line">kubectl <span class="keyword">get</span> nodes</span><br><span class="line"><span class="meta"># 查看集群状态</span></span><br><span class="line">kubectl <span class="keyword">get</span> cs</span><br></pre></td></tr></table></figure>
<h3 id="部署-flannel-网络"><a class="header-anchor" href="#部署-flannel-网络"></a>部署 flannel 网络</h3>
<p><code>flannel</code>是一个专门为 k8s 设置的网络规划服务，可以让集群中的不同节点主机创建的 docker 容器都具有全集群唯一的虚拟IP地址</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">kubectl apply -f <span class="symbol">https:</span>/<span class="regexp">/raw.githubusercontent.com/coreos</span><span class="regexp">/flannel/master</span><span class="regexp">/Documentation/kube</span>-flannel.yml</span><br></pre></td></tr></table></figure>
<h3 id="检查节点是否部署完成"><a class="header-anchor" href="#检查节点是否部署完成"></a>检查节点是否部署完成</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>Compilers Basic</title>
    <url>/2022/09/11/Compilers-Basic/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Language Processors</li>
<li>Example: GCC</li>
<li>Phases Overview</li>
<li>Front End</li>
<li>Optimizer</li>
<li>Back End</li>
<li>Others</li>
</ul>
<span id="more"></span>
<h1 id="Language-Processors"><a class="header-anchor" href="#Language-Processors"></a>Language Processors</h1>
<h2 id="Compiler"><a class="header-anchor" href="#Compiler"></a>Compiler</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Compilers/Compilers%20Basic/Compiler.png" alt="Compiler"></p>
<ul>
<li><strong>compiler</strong> <strong>maps</strong> a source program into a <strong>semantically equivalent</strong> target program</li>
<li>整个编译过程可以看成 a sequence of phases, 每个phase将源程序的一种表示转换成另一种表示, 程序的中间表示称为IR( Intermediate representation ). phrases大致分两个:
<ol>
<li><strong>Analysis</strong>: 解析源程序, 得到语法树, 根据语法树创建IR, 并收集源程序的信息存入symbol table, 与IR一起传入 synthesis part
<ul>
<li>可分为: Lexical Analysis, Syntax Analysis, Semantic Analysis</li>
</ul>
</li>
<li><strong>Synthesis</strong>: 根据中间表示和符号表创建目标代码</li>
</ol>
</li>
<li>我们定义phases的组合为“<strong>pass</strong>”, 也就是说, 编译器一共要经过3个pass:
<ul>
<li>Frontend pass: 编译器的Analysis部分, 根据源代码生成IR</li>
<li>Optimization: The optimizer is an <strong>ir-to-ir</strong> transformer that tries to improve the ir program in some way.</li>
<li>Backend pass: 编译器的Synthesis部分, 根据IR生成目标代码.</li>
</ul>
</li>
<li>如果target language是machine language, 那么用户可以<strong>在机器上直接执行</strong>target program. 从source program生成machine language的典型过程:</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Compilers/Compilers%20Basic/A%20language%20processing%20system.png" alt="A language processing system"></p>
<h3 id="Structure"><a class="header-anchor" href="#Structure"></a>Structure</h3>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Compilers/Compilers%20Basic/The%20Structure%20of%20a%20Compiler.png" alt="The Structure of a Compiler"></p>
<h2 id="Interpreter"><a class="header-anchor" href="#Interpreter"></a>Interpreter</h2>
<p>解释器不会将一种语言翻译为另一种, 而是直接根据 source language 执行</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Compilers/Compilers%20Basic/Interpreter.png" alt="Interpreter"></p>
<ul>
<li>相比机器执行, 解释器执行起来效率更低, 但是更易于debug</li>
</ul>
<h2 id="Hybrid"><a class="header-anchor" href="#Hybrid"></a>Hybrid</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Compilers/Compilers%20Basic/Hybrid.png" alt="Hybrid"></p>
<ul>
<li>Java的language processor结合了compiler和interpreter. Java program首先被编译为统一格式的bytecode作为target program, 后者再被放入JVM<u>解释执行</u>.
<ul>
<li>为了提高速度, 有的Java Compiler采用了JIT( just-in-time ), 在编译时不仅生成字节码, 还把字节码编译为机器码, 然后直接运行机器码的程序.</li>
</ul>
</li>
<li>无论是将bytecode解释执行, 还是将其编译为机器吗执行, 都需要“dynamic cimpilation”</li>
<li>Java is <strong>not</strong> the first language to employ such a mix. <strong>Lisp</strong> systems have long included both native-code compilers and virtual-machine implementation schemes [266, 324]. The <strong>Smalltalk</strong>-80 system used a bytecode distribution and a virtual machine [233]; several implementations added just-in-time compilers [126].</li>
</ul>
<h1 id="Example-GCC"><a class="header-anchor" href="#Example-GCC"></a>Example: GCC</h1>
<p><a href="https://lyk-love.cn/2022/05/05/Static-Link-Dynamic-Link/">动态链接和静态链接</a></p>
<p>以GCC处理C程序的过程为例:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Compilers/Compilers%20Basic/Language%20Process.png" alt="Language Process"></p>
<ol>
<li><strong>Preprocessor</strong>: <em>source program</em> $\rightarrow$  <em>modified source program</em>
<ul>
<li>gcc的预处理器<code>cpp</code>将<code>.c</code>, <code>.h</code>文件变成<code>.i</code>文件</li>
</ul>
</li>
<li><strong>Compiler</strong>: $\rightarrow$  <em>target assembly program</em>
<ul>
<li>GCC的编译器是<code>cc1</code>， 它把<code>.i</code>文件编译成汇编语言的<code>.s</code>文件。</li>
</ul>
</li>
<li><strong>Assembler</strong>: $\rightarrow$   <em>relocatable machine code</em>
<ul>
<li>GCC的汇编器是<code>as</code>， 它把汇编文件汇编成机器指令文件，并打包成&quot;<strong>可重定向</strong>文件&quot;， 这是个二进制文件，后缀为<code>.o</code></li>
</ul>
</li>
<li><strong>Linker/Loader</strong>: $\rightarrow$  <em>target machine code</em>
<ul>
<li>GCC的汇编器是<code>ld</code>， 它将上一阶段生成的可重定向文件和系统内已存在的可重定向文件，形成最终的<strong>可执行目标文件</strong>( executable object file )并被loader加载入内存</li>
<li>被链接的可重定向文件<strong>包括<code>.o</code>文件, 也包括静态库<code>.a</code>和动态库<code>.so</code></strong>)链接起来( 在此期间会将相对地址解析为绝对地址 )</li>
</ul>
</li>
</ol>
<p>在windows中, 可重定向文件后缀为<code>obj</code>, 可执行目标文件后缀为<code>exe</code></p>
<h1 id="Phases-Overview"><a class="header-anchor" href="#Phases-Overview"></a>Phases Overview</h1>
<p>Symbol Table被所有phase使用</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Compilers/Compilers%20Basic/Phases.png" alt="Phases"></p>
<ol>
<li>Lexical Analyzer： character stream  $\rightarrow$  token stream</li>
<li>Syntax Analyzer：  $\rightarrow$  syntax tree</li>
<li>Semantic Analyzer：$\rightarrow$ syntax tree</li>
<li>Intermediate Code Generator：$\rightarrow$  intermediate representation</li>
<li>Machine-Independent Code Optimizer： $\rightarrow$   intermediate representation</li>
<li>Code Generator： $\rightarrow$  target-machine code</li>
<li>Machine-Dependent Code Optimizer： $\rightarrow$  target-machine code</li>
</ol>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Compilers/Compilers%20Basic/Phases%20Example.png" alt="Phases Example"></p>
<h1 id="Front-End"><a class="header-anchor" href="#Front-End"></a>Front End</h1>
<p>The front end determines if the input code is well formed, in terms of <strong>lexicality</strong>,  <strong>syntax</strong> and <strong>semantics</strong>.</p>
<ul>
<li>我们规定: 语法 = 词法+句法, 即 grammer = lexicality + syntax. 由scanner和parser完成grammer的分析.</li>
<li>Front ends rely on results from formal language theory and type theory</li>
</ul>
<p>如果语法和语义都正确, 前端就会生成IR.</p>
<p>以句子“Compilers are engineered objects.” 为例:</p>
<h2 id="Lexical-Analysis"><a class="header-anchor" href="#Lexical-Analysis"></a>Lexical Analysis</h2>
<ul>
<li>Lexical Analysis( aka scanning ): 找出词法单元, 并赋予其词性( a part of speech ).  最后生成的词法单元形式为(<em>p</em>,<em>s</em>), where <em>p</em> is the word’s <em>part of speech</em> and <em>s</em> is its spelling.</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Compilers/Programming%20Language%20Basic/scanning%20exp.png" alt="scanning exp"></p>
<h2 id="Syntax-Analysis"><a class="header-anchor" href="#Syntax-Analysis"></a>Syntax Analysis</h2>
<ul>
<li>
<p>Syntax Analysis( aka parsing ): 根据给出的语法规则( rule ), 得到derivation:</p>
</li>
<li>
<p>rules:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Compilers/Programming%20Language%20Basic/rules.png" alt="rules"></p>
</li>
<li>
<p>derivation:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Compilers/Programming%20Language%20Basic/derivation.png" alt="derivation"></p>
<p>可以看到, 原句的derivation满足了给定的rules, 因此原句在<strong>语法上正确</strong>( grammatically correct )</p>
</li>
</ul>
<h2 id="Semantic-Analysis"><a class="header-anchor" href="#Semantic-Analysis"></a>Semantic Analysis</h2>
<ul>
<li>
<p>Semantic Analysis: 一个语法正确的句子未必是有意义的, 比如: “Rocks are green vegetables” 符合上述的语法, 但是没有意义.</p>
</li>
<li>
<p>程序语言的语义分析一般比较简单, 主要包括Type check, Object binding等等. Analyser使用语法树和符号表来检查源程序的语义, 使得源程序和目标程序的语义一致.</p>
<p>同时会收集类型信息，存入语法树或符号表，用于后续的中间代码生成.</p>
</li>
</ul>
<h1 id="Optimizer"><a class="header-anchor" href="#Optimizer"></a>Optimizer</h1>
<h2 id="Analysis"><a class="header-anchor" href="#Analysis"></a>Analysis</h2>
<p>The analysis determines where the compiler can <strong>safely</strong> and profitably apply the technique.</p>
<p>Compilers use several kinds of analysis to support transformations:</p>
<ul>
<li><em>Data- flow analysis</em> : reasons, at compile time, about the flow of values at runtime.</li>
<li><em>Dependence analysis</em> : uses number-theoretic tests to reason about the values that can beassumed by subscript expressions.</li>
</ul>
<h2 id="Transformation"><a class="header-anchor" href="#Transformation"></a>Transformation</h2>
<p>Compiler不仅要分析IR, 还要利用分析的结果来将IR转换成更“好”的形式( 比如更快, 更节约空间, 更省电... )</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Compilers/Programming%20Language%20Basic/Transformation.png" alt="Transformation"></p>
<h1 id="Back-End"><a class="header-anchor" href="#Back-End"></a>Back End</h1>
<p>根据IR来generate target-machine code</p>
<h2 id="Instruction-Selection"><a class="header-anchor" href="#Instruction-Selection"></a>Instruction Selection</h2>
<p>首先要将IR映射到机器指令:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Compilers/Programming%20Language%20Basic/Instruction%20Selection.png" alt="Instruction Selection"></p>
<ul>
<li>This code assumes that a, b, c, and d are located at offsets @a, @b, @c, and @d from an address contained in the register rarp.</li>
<li>这里用的汇编语言是ILOC( Intermediate Language for an Optimizing Compiler ), 是一个简化版的汇编</li>
<li>Virtual register: 在Instruction Selection阶段, Compiler使用虚拟的寄存器, 而不关心机器实际的寄存器.  虚拟寄存器到物理寄存器的映射在<strong>Register Allocation</strong>完成.</li>
</ul>
<h2 id="Register-Allocation"><a class="header-anchor" href="#Register-Allocation"></a>Register Allocation</h2>
<p>然后将虚拟寄存器映射到目标机器的物理寄存器. 此时还要考虑一些优化问题. 比如, 下面的例子只使用了“最少的寄存器”:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Compilers/Programming%20Language%20Basic/Register%20Allocation.png" alt="image-20220912154656851"></p>
<h2 id="Instruction-Scheduling"><a class="header-anchor" href="#Instruction-Scheduling"></a>Instruction Scheduling</h2>
<p>编译器可以对指令重拍序, 甚至删除一些指令, 来提高速度:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Compilers/Programming%20Language%20Basic/before%20Instruction%20Scheduling.png" alt="before Instruction Scheduling"></p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Compilers/Programming%20Language%20Basic/after%20Instruction%20Scheduling.png" alt="after Instruction Scheduling"></p>
<h2 id="Interactions-Among-Code-Generation-Components"><a class="header-anchor" href="#Interactions-Among-Code-Generation-Components"></a>Interactions Among Code-Generation Components</h2>
<p>code-genetaion时会遇到很多问题, 这些问题甚至可能是交错的. 比如, 指令重拍就会导致一些变量的依赖出现更改, 影响寄存器分配.</p>
<h1 id="Others"><a class="header-anchor" href="#Others"></a>Others</h1>
<p>编译器的一些其他应用:</p>
<ul>
<li>Binary Translation:  把平台的机器码程序翻译到另一个平台. 比如把x86机器码翻译到VLIW平台.</li>
<li>Hardware Synthesis: 硬件设计使用硬件描述语言: Verilog or VHDL( Very high speed integrated circuit<br>
Language). 它们工作在 register transfer level( RTL )</li>
<li>Compiled Simulation: 以前都是先有处理器再有编译器, 现在都是先有编译器, 通过模拟器来模拟一个处理器, 使用compiler来衡量该处理器的性能.( 也就是只要有架构设计就行了, 不需要硬件实现. )</li>
</ul>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Compilers</tag>
      </tags>
  </entry>
  <entry>
    <title>Code Design</title>
    <url>/2021/06/17/Code%20Design/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>设计易读的代码</li>
<li>设计易维护的代码</li>
<li>设计可靠的代码</li>
<li>使用模型辅助设计复杂代码</li>
<li>单元测试用例</li>
<li>代码复杂度度量</li>
</ul>
<span id="more"></span>
<h1 id="设计易读的代码"><a class="header-anchor" href="#设计易读的代码"></a>设计易读的代码</h1>
<ul>
<li>维护的需要</li>
<li>团队协作的需要</li>
</ul>
<h2 id="代码规范"><a class="header-anchor" href="#代码规范"></a>代码规范</h2>
<h3 id="格式"><a class="header-anchor" href="#格式"></a>格式</h3>
<h3 id="命名"><a class="header-anchor" href="#命名"></a>命名</h3>
<ul>
<li><strong>临时变量命名要符合常规</strong>。 像for循环计数器、键盘输入字符等临时变量一般不要求使用有意义的名称,但是要使用符合常规的名称,例如使用<code>i</code>、<code>j</code>命名整数而不是字符,使用<code>c</code>、<code>s</code>命名字符而不是整数。</li>
<li><strong>不要使用太长的名称</strong>,不利于拼写和记忆。</li>
<li><strong>不要使用易混字符进行命名</strong>,常见的易混字符例如“<code>I</code>”(大写i)、 “<code>1</code>”(数字1)与“<code>l</code>”(小写L)、<code>0</code>(数字零)与<code>o</code> (字母)等。使用易混字符的命名例<br>
如<code>D0Calc</code>与<code>DOCalc</code>。</li>
<li><strong>不要仅仅使用不易区分的多个名称</strong>,例如<code>Sales</code>与<code>Sale</code> , <code>SalesLineltem</code>与<code>SalesLineitem</code>。</li>
<li><strong>不要使用没有任何逻辑的字母缩写进行命名</strong>,例如<code>wrttn</code>、<code> wtht</code>、 <code>vwls</code>、<code>smch</code>......</li>
</ul>
<h3 id="注释"><a class="header-anchor" href="#注释"></a>注释</h3>
<ul>
<li>注释类型(ava)
<ul>
<li>语句注释( <code>//</code>)</li>
<li>标准注释(<code>/* */</code>)</li>
<li>文档注释(<code>/** */</code>)</li>
</ul>
</li>
<li>文档注释的内容
<ul>
<li>包的总结和概述,每个包都要有概述;类和接口的描述,每个类和接口都要有概述;</li>
<li>类方法的描述,每个方法都要有功能概述,都要定义完整的接口描述;</li>
<li>字段的描述,重要字段含义、用法与约束的描<br>
述。</li>
</ul>
</li>
<li><code>Javadoc</code>
<ul>
<li>在描述方法时, Javadoc常用的标签是:</li>
<li><code>@param</code>参数及其意义</li>
<li><code>@return</code>返回值</li>
<li><code>@throws</code>异常类及抛出条件</li>
<li><code>@see</code>:引用</li>
<li><code>@since </code>:最早使用该方法/类/接口的JDK版本)</li>
<li><code>@deprecated</code> 引起不推荐使用的警告</li>
</ul>
</li>
<li>内部注释
<ul>
<li>注释要有意义，不要简单重复代码的含义</li>
<li>重视对数据类型的注释</li>
<li>重视对复杂控制结构的注释</li>
</ul>
</li>
</ul>
<h1 id="设计易维护的代码"><a class="header-anchor" href="#设计易维护的代码"></a>设计易维护的代码</h1>
<h2 id="小型任务"><a class="header-anchor" href="#小型任务"></a>小型任务</h2>
<ul>
<li>要让程序代码可修改,就要控制代码的复杂度。这首先要求每个函数或方法的代码应该是内聚的,恰好完成一个功能与目标。</li>
<li>如果内聚的代码本身比较简单，复杂性可控,那么它就具有比较好的可维护性。反之,内聚的代码也可以比较复杂,典型表现是完成一-个功能需要多个步骤、代码比较长,那么就需要将其进一步分解为多个高内聚、 低耦合的小型任务。</li>
</ul>
<h2 id="复杂决策"><a class="header-anchor" href="#复杂决策"></a>复杂决策</h2>
<ul>
<li>使用新的布尔变量简化复杂决策</li>
<li>使用有意义的名称封装复杂决策</li>
<li>表驱动编程</li>
</ul>
<h2 id="数据使用"><a class="header-anchor" href="#数据使用"></a>数据使用</h2>
<ul>
<li>不要将变量应用于与命名不相符的目的。例如使用变量<code>total</code>表示销售的总价,而不是临时客串for循环的计数器。</li>
<li>不要将单个变量用于多个目的。在代码的前半部分使用<code>total</code>表示销售总价,在代码后半部分不再需要‘销售总价”信<br>
息时再用total客串for循环的计数器也是不允许的。</li>
<li>限制全局变量的使用,如果不得不使用全局变量,就明确注释全局变量的声明和使用处。</li>
<li>不要使用突兀的数字与字符,例如15 (天)、“MALE”等,要将它们定义为常量或变量后使用。</li>
</ul>
<h2 id="明确依赖关系"><a class="header-anchor" href="#明确依赖关系"></a>明确依赖关系</h2>
<ul>
<li>类之间模糊的依赖关系会影响到代码的理解与修改,非常容易导致修改时产生未预期的连锁反应。</li>
</ul>
<h1 id="设计可靠的代码"><a class="header-anchor" href="#设计可靠的代码"></a>设计可靠的代码</h1>
<h2 id="契约式设计"><a class="header-anchor" href="#契约式设计"></a>契约式设计</h2>
<h3 id="异常方式"><a class="header-anchor" href="#异常方式"></a>异常方式</h3>
<h3 id="断言方式"><a class="header-anchor" href="#断言方式"></a>断言方式</h3>
<ul>
<li>Java中断言语句的实现
<ul>
<li>为了方便实现契约式设计, Java提供了断言语句:<code>assert ExpressionI( : Expression2) ;</code>:
<ul>
<li><code>Expressionl</code>是一-个布尔表达式,在契约式设计中可以将其<br>
设置为前置条件或者后置条件;</li>
<li><code>Expression2</code>是一个值,各种常见类型都可以;</li>
<li>如果<code>Expressionl</code>为<code>true</code> ,断言不影响程序执行;</li>
<li>如果<code>ExpressionI</code>为<code>false</code> ,断言抛出<code>AssertionError</code>异常,如果存在<code>Expression2</code>就使用它作为参数构造<code>AssertionError</code>。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="防御式编程"><a class="header-anchor" href="#防御式编程"></a>防御式编程</h2>
<ul>
<li>防御式编程的基本思想是:在一个方法与其他方法、操作系统、硬件等外界环境交互时,不能确保<strong>外界</strong>都是正确的,所以要在外界发生错误时,保护方法内部不受损害。</li>
<li>常见场景
<ul>
<li>输入参数是否合法?</li>
<li>用户输入是否有效?</li>
<li>外部文件是否存在?</li>
<li>对其他对象的引用是否为NULL ?</li>
<li>其他对象是否已初始化?</li>
<li>其他对象的某个方法是否已执行?</li>
<li>其他对象的返回值是否正确?</li>
<li>数据库系统连接是否正常?</li>
<li>网络连接是否正常?</li>
<li>网络接收的信息是否有效?</li>
<li>异常和断言都可以用来实现防御式编程,两种实现方式的差异与契约式设计的实现一样。</li>
</ul>
</li>
</ul>
<h1 id="使用模型辅助设计复杂代码"><a class="header-anchor" href="#使用模型辅助设计复杂代码"></a>使用模型辅助设计复杂代码</h1>
<h2 id="决策表"><a class="header-anchor" href="#决策表"></a>决策表</h2>
<h2 id="伪代码"><a class="header-anchor" href="#伪代码"></a>伪代码</h2>
<h2 id="程序流程图"><a class="header-anchor" href="#程序流程图"></a>程序流程图</h2>
<h1 id="单元测试用例"><a class="header-anchor" href="#单元测试用例"></a>单元测试用例</h1>
<ul>
<li>
<p>为方法开发测试用例主要使用两种线索:</p>
<ul>
<li>
<p>方法的规格</p>
<ul>
<li>根据第一种线索，可以使用基于规格的测试技术开发测试用例,等价类划分和边界值分析是开发单元测试用例常用<br>
的黑盒测试方法。</li>
</ul>
</li>
<li>
<p>方法代码的逻辑结构。</p>
<ul>
<li>根据第二种线索,可以使用基于代码的测试技术开发测试<br>
用例,对关键、复杂的代码使用路径覆盖,对复杂代码使<br>
用分支覆盖,简单情况使用语句覆盖。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>为类开发测试用例</p>
<ul>
<li>在复杂类中,常常有着多变的状态,每次一个方法的执行改变了类状态时,都会给其他方法带来影响,也就是说复杂类的多个方法间是互相依赖的。</li>
<li>所以，除了测试类的每一个方法之外,还要测试类不同方法之间的互相影响情况。</li>
</ul>
</li>
</ul>
<h1 id="代码复杂度度量"><a class="header-anchor" href="#代码复杂度度量"></a>代码复杂度度量</h1>
<h2 id="度量的意义"><a class="header-anchor" href="#度量的意义"></a>度量的意义</h2>
<ul>
<li>基于圈复杂度,你可以衡量一 下程序代码是否需要调整。<br>
[McConnell2004]认为:</li>
<li>0-5子程序可能还不错;</li>
<li>6-10得想办法简化子程序了;</li>
<li>10+把子程序的某一个部分拆分成另- -个子程序并调用它。 10个决策点的上限并不是绝对的。应该把决策点的数量当做一个警示,该警示说明某个子程序可能需要重新设计了。</li>
<li><code>[Chidamber 1994]</code>基于所拥有方法的代码复杂度定义了类的复杂度:
<ul>
<li><code>类的加权方法= Sum( Ci) i=from I to n</code></li>
</ul>
</li>
<li>其中, <code>n</code>为一个类的方法数量，<code>Ci</code>是第<code>i</code>个方法的代码复杂度。</li>
</ul>
<h1 id="问题代码"><a class="header-anchor" href="#问题代码"></a>问题代码</h1>
]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
      <tags>
        <tag>Software Engineering Methodology</tag>
      </tags>
  </entry>
  <entry>
    <title>Network Layer</title>
    <url>/2022/02/21/Computer%20Networking%20Network-Layer/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Intro</li>
<li>虚电路和数据报网络</li>
<li>路由器工作原理</li>
<li>网际协议IP</li>
<li>ICMP</li>
<li>In-net  Route Selection</li>
<li>Internet  Route Selection</li>
<li>广播和多播路由选择</li>
<li>VPN, NAT</li>
<li>MPLS</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<p>计算机网络的不同层次采用不同设备互联：</p>
<ol>
<li>物理层使用的中间设备： 转发器</li>
<li>链路层： 网桥( bridge )</li>
<li>网络层：路由器</li>
<li>网络层以上： 网关( gateway )
<ul>
<li>linux上的gateway，我查了文档，说是第五层设备，但我找不到一个物理设备和它对应。。。</li>
<li>很多人也把路由器叫做网关， 比如Linux路由表中有个<code>default</code>（ 即default gateway），代表的是本机所属的网络</li>
</ul>
</li>
</ol>
<h2 id="网络层的功能"><a class="header-anchor" href="#网络层的功能"></a>网络层的功能</h2>
<p>网络层（第三层、IP层）有三个功能：</p>
<ul>
<li>转发( forwarding )： 分组在单一的路由器中从一条入链路传送到一条出链路
<ul>
<li>是路由器的本地动作</li>
<li>硬件实现</li>
</ul>
</li>
<li>路由选择( routing )：网络中决定分组从源到目的地所采取的端到端路径
<ul>
<li>涉及整个网络的路由器</li>
<li>软件实现</li>
<li>转发和路由选择经常混用</li>
</ul>
</li>
<li>（某些网络层结构，如ATM, MPLS中有）连接建立： 从源到目的地沿着所选择的路径彼此握手，以便在分组传输之前就建立好状态</li>
</ul>
<h2 id="网络层的组件"><a class="header-anchor" href="#网络层的组件"></a>网络层的组件</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Layer/%E7%BD%91%E7%BB%9C%E5%B1%82%E4%B8%89%E5%A4%A7%E7%BB%84%E4%BB%B6.png" alt="网络层三大组件"></p>
<p>网络层三大组件：</p>
<ul>
<li>IP协议</li>
<li>路由选择协议： RIP, OSPF, BGP</li>
<li>ICMP协议：差错报告、路由器“信令”</li>
</ul>
<p>因特网的网络层提供<strong>尽力而为服务</strong>，这可以理解为无服务。 当然除了因特网外还有其他的网络结构模型，比如ATM，就提供恒定比特率、可用比特率等服务</p>
<h2 id="交换机和路由器"><a class="header-anchor" href="#交换机和路由器"></a>交换机和路由器</h2>
<p>交换机： 进行分组转发，是链路层设备。</p>
<p>路由器：分组转发和路由选择，网络层设备</p>
<p>路由器具有<strong>转发表</strong>，路由器通过检查到达分组的首部字段的值来转发分组，然后使用该值在该路由器的转发表中索引查询</p>
<ul>
<li>路由选择算法决定了插入转发表的项的内容</li>
</ul>
<h1 id="虚电路和数据报网络"><a class="header-anchor" href="#虚电路和数据报网络"></a>虚电路和数据报网络</h1>
<p>运输层可以提供<u>面向连接服务和无连接服务</u>（TCP, UDP）, 网络层也类似，但与运输层相比又有不同：</p>
<ul>
<li>网络层中，这些服务是主机到主机的服务，而运输层中是进程到进程的服务</li>
<li>网络层要么提供面向连接服务，称为<strong>虚电路网络</strong>；要么提供无连接服务， 称为<strong>数据报网络</strong>。 网络层不能同时提供这两种服务。
<ul>
<li>虚电路网络： ATM，帧中继</li>
<li>数据报网络： 因特网</li>
</ul>
</li>
<li>运输层连接服务只在<u>端系统</u>中实现， 而网络层连接服务需要在端系统和<u>路由器</u>中实现</li>
</ul>
<p>可以看到，虚电路网络和数据报网络是网络层的两个基本类型</p>
<h2 id="虚电路网络"><a class="header-anchor" href="#虚电路网络"></a>虚电路网络</h2>
<p>路由器需要为连接维持<strong>连接状态信息</strong></p>
<ul>
<li>每当建立和释放连接（虚电路），都要在转发表中增/删表项</li>
</ul>
<p>虚电路的组成：</p>
<ul>
<li>源到目的主机的路径</li>
<li>VC号， 延着该路径的每段链路的一个号码</li>
<li>该路径上每台路由器的转发表</li>
</ul>
<h3 id="VC号"><a class="header-anchor" href="#VC号"></a>VC号</h3>
<p>虚电路分组将在它的首部携带一个VC号，VC号在每段链路都不同，<u>从中间路由器的转发表表项更新</u>：</p>
<ul>
<li>注意， <strong>一段链路可以有多条虚电路，每条虚电路有一个VC号</strong>， 因此属于某虚电路的分组在到达对应链路时，会获得唯一的VC号（ 不会与同一链路上其他虚电路的分组发生冲突 ）</li>
</ul>
<p>示例： 假设主机A要与B创建虚电路，且网络给该虚电路选择路径 A-R1-R2-B,并为三段链路分配VC号 12, 22，32。 该分组离开主机A时，首部的VC号是12,而离开R1时，VC号变成了22；离开R2时，VC号是32</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Layer/%E8%99%9A%E7%94%B5%E8%B7%AF%E7%BD%91%E7%BB%9C%E7%A4%BA%E4%BE%8B.png" alt="虚电路网络示例"></p>
<p>R1的转发表：</p>
<table>
<thead>
<tr>
<th>入接口</th>
<th>入VC号</th>
<th>出接口</th>
<th>出VC号</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>12</td>
<td>2</td>
<td>22</td>
</tr>
<tr>
<td>2</td>
<td>63</td>
<td>1</td>
<td>18</td>
</tr>
<tr>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
</tbody>
</table>
<p>每条虚电路的连接和建立都会让路径上所有路由器的转发表更新</p>
<p>VC号在每段链路都不同的原因：</p>
<ol>
<li>逐链路代替VC号减少了VC号字段在分组首部中的长度</li>
<li>如过一条链路具有多条虚电路，那么约定互不冲突的VC号将花费大量时间</li>
</ol>
<h3 id="虚电路的三个阶段"><a class="header-anchor" href="#虚电路的三个阶段"></a>虚电路的三个阶段</h3>
<p>虚电路的三个阶段：</p>
<ul>
<li>虚电路建立：发送方运输层与网络层联系，指定接收方地址，网络层决定发送方到接收方的路径，为该路径上的<strong>每条链路决定一个VC号</strong>。 最后在路径上的<u>每个路由器</u>中增加一个表项</li>
<li>数据传输</li>
<li>虚电路拆除：网络层通知接收方的端系统，并<u>更新路径上每个路由器的转发表</u>以表明该虚电路不存在了</li>
</ul>
<p>虚电路网络层的两个端系统之间路径上的路由器都要参与虚电路的建立，且每台路由器都完全知道经过它的所有虚电路</p>
<p>端系统向网络层发送的指示虚电路启动与终止的报文，以及路由器之间传递的用于建立虚电路（即修改路由表中的连接状态）的报文，称为<strong>信令报文</strong>（ signaling message ）,用于交换这些报文的协议称为<strong>信令协议</strong>（ signaling protocol ）</p>
<h2 id="数据报网络"><a class="header-anchor" href="#数据报网络"></a>数据报网络</h2>
<p>数据报网络中的路由器不需要维持连接状态信息（因为是无连接的，没有虚电路），但是要在转发表中维持转发状态信息。 装发表存储了目的地址到输出链路接口的映射，通过路由选择算法修改</p>
<p>转发表在将分组的目的地址（当然是IP地址）和转发表表项匹配时，采用<strong>最长前缀匹配</strong></p>
<h1 id="路由器工作原理"><a class="header-anchor" href="#路由器工作原理"></a>路由器工作原理</h1>
<h2 id="路由器结构"><a class="header-anchor" href="#路由器结构"></a>路由器结构</h2>
<p>以下“端口“均指硬件端口，和套接字等软件端口不同</p>
<ul>
<li><strong>输入端口</strong>： 将输入的物理链路与路由器连接。 同时还要在这里完成查询转发表。 一般分组转发到交换结构，进而转发到输出端口；而控制分组（如携带路由选择协议信息的分组）转发到路由选择处理器
<ul>
<li>输入端口拥有<strong>转发表的影子副本</strong>，因此可以进行查找+转发</li>
</ul>
</li>
<li><strong>交换结构</strong>： 用于分组交换，有许多实现，比如经内存交换，经总线交换，经复杂的总线网络交换</li>
<li><strong>输出端口</strong></li>
<li><strong>路由选择处理器</strong>： 执行路由选择协议， 维护路由表，并由此计算出转发表。 它还执行网络管理功能</li>
</ul>
<p>输入/输出端口和交换结构共同实现了转发功能，称为<strong>路由器转发平面</strong>（ router forwarding plane ）</p>
<ul>
<li>纯硬件实现，因此在纳秒级别</li>
</ul>
<p>路由器选择处理器实现了控制功能（路由选择），称为<strong>路由器控制平面</strong>（ router control plane ）</p>
<ul>
<li>软件实现并在路由选择处理器上执行，在毫秒级别</li>
</ul>
<h2 id="队列等待问题"><a class="header-anchor" href="#队列等待问题"></a>队列等待问题</h2>
<p>在输入和输出端口都会形成分组队列，如果队列过长，耗尽了路由器的缓存，路由器就会丢弃分组，即<strong>丢包</strong>。</p>
<p>输入端口的排队不那么严重，因为可以将分组分配到多个输入端口。</p>
<ul>
<li>输入端口的分组传输速度取决于交换结构的速度</li>
</ul>
<p>对于输出端口，由于多个分组都可能争用同一个输出端口， 更容易发生排队，此时需要一个在输出端口的<strong>分组调度程序</strong>选出一个分组发送，以提供服务质量保证。常见的做法是<strong>主动队列管理</strong></p>
<ul>
<li><strong>主动队列管理</strong>（ Active Queue Management, AQM ） ：在缓存填满前便丢弃（或在首部加标记）一个分组，以便向发送方提供一个拥塞信号</li>
<li><strong>随即早期检测</strong>（ Random Early Detection, RED ）：AQM的最流行的一种实现。 为输出队列维护一个加权平均值，如果该值大于某个阈值，则丢弃后续到达的分组</li>
</ul>
<h2 id="路由表和转发表"><a class="header-anchor" href="#路由表和转发表"></a>路由表和转发表</h2>
<h3 id="路由表"><a class="header-anchor" href="#路由表"></a>路由表</h3>
<p>路由表只存储三元素：</p>
<ul>
<li><strong>目的网络地址</strong></li>
<li>（如果划分了子网）子网掩码</li>
<li><strong>下一跳地址</strong>（Mac地址）
<ul>
<li>IP地址和网络接口对应，因此我们所说的<strong>下一跳地址，就是下一跳的网络接口的地址</strong></li>
</ul>
</li>
</ul>
<p>注意，路由表中只存储下一跳地址，而不是最终地址，地址其实就是网络接口的IP。 此外，路由表中还可以设置<strong>默认路由</strong>( Linux中称为默认网关default gateway )， 如果某个包的目的地址和路由表其他项都不匹配时，就匹配到默认路由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 这个命令可以查看路由表，再次强调，我们在Linux内核中不区分路由表和转发表</span><br><span class="line">$ ip route show</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 当目的地址与其他所有项都不匹配时，匹配到default gateway, 其对应的下一跳网络接口地址为172.31.0.1 </span><br><span class="line"># via后面跟的就是下一跳地址</span><br><span class="line"># dev后面跟的是</span><br><span class="line"></span><br><span class="line">default via 172.31.0.1 dev en0</span><br><span class="line">127.0.0.0/8 via 127.0.0.1 dev lo0</span><br><span class="line">127.0.0.1/32 via 127.0.0.1 dev lo0</span><br><span class="line">169.254.0.0/16 dev en0  scope link</span><br><span class="line">172.31.0.0/17 dev en0  scope link</span><br><span class="line">172.31.0.1/32 dev en0  scope link</span><br></pre></td></tr></table></figure>
<h3 id="转发表"><a class="header-anchor" href="#转发表"></a>转发表</h3>
<p>结构：</p>
<ul>
<li>路由表的三元素</li>
<li>主机方面的信息：比如输出端口信息、标记信息等</li>
</ul>
<p>路由器的分组转发： 查看转发表，如果有对应的表项（ 目的IP在本网络， 或者目的IP的规则在路由表中被手动制定 ），就进行交付，否则就转发给本网络的<strong>默认路由</strong></p>
<ul>
<li>转发过程中需要将目的地址与子网掩码做与操作得到网络号， 注意网络号匹配采用<strong>最长前缀匹配</strong></li>
</ul>
<h3 id="路由表和转发表的区别"><a class="header-anchor" href="#路由表和转发表的区别"></a>路由表和转发表的区别</h3>
<p>转发表是根据路由表生成的， 可以看到，路由器只存储路由信息，和主机没有关系，它只描述网络链路状态和方向； 而转发表还要存储一些主机信息，它直接作用于数据包，在主机内部将一个数据包从一个端口导向另一端口。</p>
<p>对于程序员来说， 二者可以看成一个东西，因为<strong>Linux内核本身就不区分这两个表</strong>，每到一个数据包都会查路由表。二者只对于硬件工程师有差别。</p>
<p>在本文的剩余部分，我们不会区分这二者。</p>
<h1 id="IP（v4）"><a class="header-anchor" href="#IP（v4）"></a>IP（v4）</h1>
<h2 id="IP数据报"><a class="header-anchor" href="#IP数据报"></a>IP数据报</h2>
<p>网络层的基本数据传输单元为IP数据报( IP Datagram )</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Layer/IPV4%20packet.png" alt="IPv4 packet"></p>
<p>其中的关键字段如下：</p>
<ul>
<li>版本号：4个比特。通过查看版本号，路由器可以确定如何解释IP数据报的剩余部分，因为不同IP版本使用不同数据报格式。</li>
<li>首部长度：4个比特。确定IP数据报数据部分实际从哪里开始。</li>
<li>服务类型：使不同类型的IP数据报（如要求时延低的数据报）能相互区别开。</li>
<li>数据报长度：16个比特，IP数据报的总长度（首部+数据），以字节计算。IP数据报的理论长度为65535字节，但实际很少超过1500字节。</li>
<li>标识，标志，<strong>片偏移</strong>：与<strong>IP分片</strong>有关。IPV6不允许路由器对分组分片。</li>
<li><strong>寿命（TTL）</strong>：该字段确保数据报不会永远在网络中循环。数据报每过一个路由器，TTL减1，减到0就丢弃。</li>
<li><strong>协议</strong>：<strong>仅在达到目的地才有用。指示IP数据报的数据部分交给哪个运输层协议</strong>，比如6表示交给TCP，17交给UDP。协议号是将网络层与运输层绑定到一起的粘合剂，端口号则用于运输层和应用层的绑定。</li>
<li>首部校验和：帮助路由器检测收到的IP数据报的比特错误。TCP/IP在运输层与网络层都执行差错检测。</li>
<li>源和目的IP地址：通过源主机通过DNS查找来决定目的地址。</li>
<li>选项：该字段允许IP首部被扩展。很少使用，所以数据报首部不包括该字段的信息</li>
<li>数据：该字段除了包含TCP和UDP外，也可重载其他类型的数据，如ICMP报文。</li>
</ul>
<p>IP数据报的首部有20字节（假设无选项）。如果数据报承载一个TCP报文段，每个数据报共承载40字节的首部（有20字节的TCP首部）以及应用层报文</p>
<h3 id="IP数据报分片"><a class="header-anchor" href="#IP数据报分片"></a>IP数据报分片</h3>
<p>并非所有链路层协议都能承载相同长度的网络层分组</p>
<p><strong>最大数据单元</strong>（ Maximum Transmission Unit, MTU ）: 一个帧能承载的最大数据量</p>
<ul>
<li>一段路经上的不同链路可能有不同的链路层协议，因此有不同的MTU</li>
</ul>
<p>分片： 将数据报中的<strong>数据部分</strong>分成较小的数据报，再封装成帧</p>
<ul>
<li>片的组装是相当复杂的工作， 由端系统实现。这是为了保持网络的简单性</li>
<li>IPV6没有片偏移字段，根本上废止了分片</li>
</ul>
<h2 id="IPV4编址"><a class="header-anchor" href="#IPV4编址"></a>IPV4编址</h2>
<p>IP要求每个主机和路由器借口拥有自己的IP地址， 每个IP地址为32 Bit</p>
<ul>
<li>因此，一个IP地址与一个<strong>网络接口</strong>相关联，而不是与包括该接口的主机或路由器相关联</li>
<li>当一台主机同时连到两个网络，该主机就必须具有两个相应的IP地址，网络号不同</li>
</ul>
<p>IP地址的编址方法，目前广泛采用的是CIDR， 早年采用的是分类编址。 我们先介绍传统的分类编址。 为了提高地址利用率， 分类编址还可以划分子网</p>
<h3 id="分类编址"><a class="header-anchor" href="#分类编址"></a>分类编址</h3>
<p>Classful addressing</p>
<p>将IP地址划分为若干个固定类，每一类地址都由网络号(net-id)和主机号(host-id)构成。</p>
<p><strong>现代网络采用的都是CIDR，传统分类地址已经不用了。 不过分类编址在事实上还广泛存在， 比如CIDR中的mask位数取8、16、24就分别代表了分类网络中的A、B、C类地址块</strong></p>
<ul>
<li>网络号由IP管理机构分配，主机号由得到该网络号的单位自行分配</li>
<li>一个网络是指具有<strong>相同网络号</strong>的主机的集合，因此用转发器或网桥等连接起来的若干局域网仍属于一个网络，因为它们都具有相同的网络号。 具有不同网络号的局域网必须用路由器互联</li>
<li>路由器总是有至少2个不同网络号的IP地址，用于连接不同的网络</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Layer/IP%E5%88%86%E7%B1%BB%E7%BC%96%E5%9D%80.png" alt="IP分类编址"></p>
<ul>
<li>
<p>A、B、C类地址都是单播地址。D类地址用于多播</p>
</li>
<li>
<p>网络号全为0的IP表示“<strong>本网络</strong>”</p>
<ul>
<li>网络号全0 + 主机号全0， 表示“本网络上的本主机”</li>
<li>网络号全0 + host-id， 表示“本网络上的某台主机host-id”</li>
</ul>
</li>
<li>
<p>主机号全为0的IP表示“<strong>本主机所连接到的网络的地址</strong>”。 例如， 一个A类地址为5.6.7.8, 则该主机所在的网络地址就是5.6.7.0</p>
</li>
<li>
<p>主机号全为1的IP表示&quot;<strong>本网络上的所有主机的地址</strong>&quot;。 例如，一个B类地址为126.43.255.255， 它表示&quot;在网络126.43.0.0上的所有主机的地址&quot;。</p>
</li>
<li>
<p>A类地址的网络号<strong>127</strong>(即0111 1111)保留作为本地软件<strong>环回(loopback)地址</strong>。 如果主机发送一个IP数据报的目的地址为环回地址，则数据报<strong>根本不会被发送到网络</strong>，而是由本机的协议软件来处理。</p>
<ul>
<li><strong>CIDR表示的<code>127.*.*.*/8</code>，就是整个环回地址块</strong>（A类网络的127地址块）
<ul>
<li>比如本地如果新开了个虚拟机，给它分配的地址就在<code>127.*.*.*/8</code>里面选，通向该地址的包全部走lo0接口</li>
</ul>
</li>
<li>此外，CIDR的<code>127.0.0.1/32</code>是个特殊的环回地址，可以看到它是32位网络号，整个地址就是个网络地址。虽然它已经被包含在了<code>127.*.*.*/8</code>内， 但Linux路由表中还是把这个地址单列了出来。 我也不知道为啥，可能是传统吧</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ip route show                                                                         &lt;snip&gt;</span><br><span class="line"># 可以看到，IPv4的网络号为127的A类网络(8位掩码，表示A类网络)下的地址，全部作为了环回地址</span><br><span class="line">127.0.0.0/8 via 127.0.0.1 dev lo0</span><br><span class="line"></span><br><span class="line"># 很明显它被包含在127.0.0.0/8，单路由表里还是把它单列了出来</span><br><span class="line">127.0.0.1/32 via 127.0.0.1 dev lo0</span><br><span class="line">&lt;snip&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>IP地址的指派范围：</strong></p>
<table>
<thead>
<tr>
<th>网络类别</th>
<th>最大可指派的网络数</th>
<th>第一个可指派的网络号</th>
<th>最后一个可指派的网络号</th>
<th>每个网络中的最大主机数</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>126( $2^7 - 2$ )</td>
<td>1</td>
<td>126</td>
<td>$2^{24}-2$</td>
</tr>
<tr>
<td>B</td>
<td>16383( $2^{14} - 1$ )</td>
<td>128.1</td>
<td>191.255</td>
<td>$2^{16} - 2$</td>
</tr>
<tr>
<td>C</td>
<td>2097151( $2^{21} - 1$ )</td>
<td>192.0.1</td>
<td>223.255.255</td>
<td>254( $2^{8} - 2$ )</td>
</tr>
</tbody>
</table>
<p><strong>不使用的特殊IP地址:</strong></p>
<table>
<thead>
<tr>
<th>net-id</th>
<th>host-id</th>
<th>源地址使用</th>
<th>目的地址使用</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>可以</td>
<td>不可</td>
<td>在本网络上的本主机</td>
</tr>
<tr>
<td>0</td>
<td>host-id</td>
<td>可以</td>
<td>不可</td>
<td>在本网络上的某台主机host-id</td>
</tr>
<tr>
<td>全1</td>
<td>全1</td>
<td>不可</td>
<td>可以</td>
<td>只在本网络进行广播(各路由器均不转发)</td>
</tr>
<tr>
<td>net-id</td>
<td>全1</td>
<td>不可</td>
<td>可以</td>
<td>对net-id上的所有主机进行广播</td>
</tr>
<tr>
<td>127</td>
<td>非全0或全1的任何数</td>
<td>可以</td>
<td>可以</td>
<td>本地环回地址</td>
</tr>
</tbody>
</table>
<h4 id="A类地址"><a class="header-anchor" href="#A类地址"></a>A类地址</h4>
<ul>
<li>A类地址的net-id占1 Byte， 其中第一位固定为0， 因此只有7 bit可以使用。 由于全0的网络号表示“本网络”； 网络号127表示环回地址，因此可以指派的网络号有$2^7 - 2$个</li>
<li>A类地址的host-id占3字节， 由于全0的主机号表示“本主机所连接到的网络的地址”； 全1主机号表示该网络上的所有主机的地址，因此可以指派的主机号有$2^{24}-2$个</li>
</ul>
<h4 id="B类地址"><a class="header-anchor" href="#B类地址"></a>B类地址</h4>
<ul>
<li>B类地址的net-id占2 Byte， 但前面2位已经固定为10， 因此只有14 bit可以使用。 由于网络号字段后面的14位怎么分配也不会出现全0或全1， 因此这里不需要“减二”。 但是，事实上B类网络地址<strong>128.0.0.0是不指派的</strong>( 即网络号1000 0000 )， 可以指派的B类最小网络地址是128.1.0.0( 即网络号1000 0001 )， 所以可以指派的网络号有$2^{14} - 1$个</li>
<li>A类地址的host-id占2 Byte, 减去全0和全1， 可以指派的主机号有$2^{16} - 2$</li>
</ul>
<h4 id="C类地址"><a class="header-anchor" href="#C类地址"></a>C类地址</h4>
<ul>
<li>B类地址的net-id占3 Byte， 但前面3位已经固定为110， 因此只有21 bit可以使用。 同理，C类网络地址不需要“减二”， 但C类网络地址<strong>192.0.0.0也是不指派的</strong>( 即网络号1100 0000 0000)， 可以指派的C类最小网络地址是192.0.1.0( 即网络号1100 0000 0001 )， 所以可以指派的网络号有$2^{21} - 1$个</li>
<li>C类地址的host-id占1 Byte, 减去全0和全1， 可以指派的主机号有$2^{8} - 2$</li>
</ul>
<h3 id="划分子网"><a class="header-anchor" href="#划分子网"></a>划分子网</h3>
<p>使用IP的主机号的若干位进一步划分子网。划分子网后，新的网络地址为： net-id + 子网id</p>
<ul>
<li>子网掩码：就是若干个1， 其数量为新的网络地址数量， 也就是网络号+子网号的位数
<ul>
<li>使用子网掩码后， 不管网络有没有划分子网，只要把子网掩码和IP地址进行与运运算，就能得到网络地址</li>
<li>如果一个网络不划分子网，其子网掩码就是默认子网掩码，也就是仅有“net-id”位
<ul>
<li>比如，A累地址的默认子网掩码是255.0.0.0， 或0xFF00 0000</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="CIDR"><a class="header-anchor" href="#CIDR"></a>CIDR</h3>
<p>无类别域间路由选择Classless Inter Domain Routing, CIDR</p>
<ul>
<li>取消了传统分类网络的概念</li>
<li>和子网掩码的区别：子网掩码只是局限于在某一个子网内或一个站点内使用，而CIDR是对<strong>全球路由系统</strong>可见的
<ul>
<li>这意味着在公网，路由器可以直接对CIDR地址块进行寻址，而不必对主机进行寻址，大大提升了效率
<ul>
<li>这称为路由聚合</li>
<li>相比之下，子网掩码只能在子网使用，因此传统的分类网络在公网只能按主机寻址</li>
</ul>
</li>
</ul>
</li>
<li>CIDR采用最长前缀匹配： 同一个IP，在路由表中可能会匹配多个网络号，此时从匹配结果中采用具有最长网络前缀的路由</li>
</ul>
<h2 id="获取IP地址"><a class="header-anchor" href="#获取IP地址"></a>获取IP地址</h2>
<ol>
<li>ISP从ICANN等机构获得地址</li>
<li>组织从ISP获得一组地址（得到公网IP）</li>
<li>组织内可以用DHCP等方式给主机配置IP地址（得到内网IP）</li>
</ol>
<h2 id="IP地址与硬件地址"><a class="header-anchor" href="#IP地址与硬件地址"></a>IP地址与硬件地址</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Layer/IP%E5%9C%B0%E5%9D%80%E4%B8%8E%E7%A1%AC%E4%BB%B6%E5%9C%B0%E5%9D%80.png" alt="IP地址与硬件地址"></p>
<ul>
<li>
<p>IP层使用IP地址，链路层使用MAC地址</p>
</li>
<li>
<p>硬件地址（aka MAC地址）是<strong>下一跳的地址</strong>， IP地址是目的主机的IP地址</p>
<ul>
<li>
<p>例如，我要去北京，需要经过： 1. 车站。 2.地铁站。 3. 飞机场。</p>
<p>那么，我的目的IP地址始终是北京，而起始IP地址是车站，到了车站后，我的目的MAC地址变成了地铁站， 到了地铁站后，我的起始IP地址是飞机场</p>
</li>
<li>
<p>但是，如何在知道总目的地是北京的情况下，知道下一步是要去车站呢？ 即： 如何在知道目的IP地址的情况下，知道下一跳的MAC地址呢？ 这就需要地址解析协议ARP( Address Resolution Protocal )</p>
<ul>
<li>以上信息，即目的网络号和下一跳地址( Mac地址 )都被存储在路由表中</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="ARP"><a class="header-anchor" href="#ARP"></a>ARP</h3>
<p>IP层使用ARP协议来进行IP - MAC地址的映射</p>
<h4 id="ARP过程"><a class="header-anchor" href="#ARP过程"></a>ARP过程</h4>
<p>每个主机里都设有一个ARP高速缓存( ARP cache )，里面有<strong>本局域网</strong>上各主机和路由器的IP地址到硬件地址的映射表，且这个映射表经常动态更新</p>
<ul>
<li>ARP高速缓存中每条cache都只存在一段时间，超过时间后就被删除</li>
</ul>
<p>工作流程：<strong>假设A和B在同一局域网</strong>，当主机A向局域网上某个主机B发送IP数据报时，先在ARP cache中查看有无主机B的IP地址，若有，就可查出对应的硬件地址，反之，执行下列步骤，找到主机B的硬件地址：</p>
<ol>
<li>
<p>A的ARP进程在局域网广播一个ARP请求分组，包含A自己的硬件地址和IP地址，目的方硬件地址(未知时填0)，目的方IP地址</p>
<ul>
<li>
<p>A为什么要发送自己的硬件地址和IP地址？</p>
<p>当A向B发送IP数据报时，很可能不久后B也要向A发送。 为了减少通信量， A在发送其ARP请求分组时，会把<strong>自己的</strong>IP地址和硬件地址写进请求分组。 这样主机B收到该请求分组时，就会把A当这一映射写进B的ARP cache中</p>
</li>
</ul>
</li>
<li>
<p>在本局域网上的所有主机上运行的ARP进程都收到此ARP请求分组</p>
</li>
<li>
<p>主机B收到广播，发现本机IP与查询IP一致，就向A发送ARP响应分组，其中包括自己的硬件地址和IP地址。 由于其余的所有主机的IP地址都与ARP请求分组中要查询的IP地址不一致，就会直接丢弃该分组。</p>
<ul>
<li>ARP请求分组是多播，但ARP响应分组是单播</li>
</ul>
</li>
<li>
<p>A收到回复的ARP响应分组后，将对应IP和硬件地址存入ARP cache中，方便下次使用</p>
</li>
</ol>
<p>注意：</p>
<ul>
<li>ARP协议只解决<strong>同一局域网</strong>上IP地址和硬件地址映射， <strong>如果A和B在不同局域网，网络通过路由器R1相连，那么ARP会把R1的物理地址返回给A， A就只管把R1的地址写进链路层帧里。 当链路层帧到达R1时， R1再进行ARP，此时就能得到B的物理地址，将数据最终发给B</strong>
<ul>
<li>所以ARP如果在本局域网查不到B的IP，就会查路由器的IP</li>
</ul>
</li>
<li>ARP工作过程对用户是透明的</li>
</ul>
<h4 id="ARP典型情况"><a class="header-anchor" href="#ARP典型情况"></a>ARP典型情况</h4>
<p>四种使用ARP的典型情况：</p>
<ol>
<li>发送方是主机，要把IP数据报发送到本网络上的一个主机，这时ARP找到目的主机的硬件地址</li>
<li>发送方是主机，要把IP数据报发送到另一个网络上的一个主机，这时ARP找到本网络上的一个路由器的硬件地址，A只管把路由器的物理地址写进MAC帧，并最终发给路由器。 再由路由器进行ARP，一步步转发通过各个网络， 最终到达B</li>
<li>发送方是路由器，要把IP数据报发送到本网络上的一个主机，这时ARP找到目的主机的硬件地址</li>
<li>发送方是路由器，要把IP数据报发送到另一个网络上的主机，这时ARP找到本网络上的一个路由器的硬件地址，剩下的工作由这个路由器完成</li>
</ol>
<h2 id="IP层分组转发"><a class="header-anchor" href="#IP层分组转发"></a>IP层分组转发</h2>
<p>示例：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Layer/IP%E5%B1%82%E5%88%86%E7%BB%84%E8%BD%AC%E5%8F%91.png" alt="IP层分组转发"></p>
<ul>
<li>默认路由：就是给主机指定一个“当其他路由表项都不匹配时”匹配的路由</li>
<li>可以减少路由表所占用的空间和搜索路由表所用的时间，<strong>将不在路由表中的网络都连向默认路由</strong></li>
<li>直接交付：主机H查找路由表，如果发现目的主机就在本网络上，则不经过任何路由器，而是直接交付</li>
</ul>
<p>分组转发算法：</p>
<ol>
<li>从数据报的首部提取目的主机的IP地址$D$，得出目的网络地址为$N$</li>
<li>若N就是与此路由器直接相连的某个网络地址，则进行<strong>直接交付</strong>，不需要再经过其他的路由器，直接把数据报交付给目的主机（这里包括把目的主机地址D转换为具体的硬件地址，把数据报封装为MAC帧，再发送此帧）；否则就是间接交付, 执行(3)</li>
<li>若路由表中有目的地址为$D$的<u>特定主机路由</u>，则把数据报传送给路由表中所指明的下一跳路由器，否则执行(4)</li>
<li>若路由表中有到达网$N$的路由，则把数据报传送给路由表中所指明的下一跳路由器，否则执行(5)</li>
<li>若路由表中有一个默认路由，则把数据报传送给路由表中所指明的下一跳路由器，否则执行(6)
<ul>
<li>就是说，如果路由表项能匹配目的地址$D$最好，否则就匹配目的网络$N$，否则就匹配到默认路由</li>
</ul>
</li>
<li>报告转发分组出错</li>
</ol>
<h1 id="IPV6"><a class="header-anchor" href="#IPV6"></a>IPV6</h1>
<p>IPV6新特性：</p>
<ul>
<li>地址长度从32位扩展到128位</li>
<li>简化高效的40字节首部</li>
<li>流标签与优先级： 某些分组（如音频、视频传输）可以被当作一个<strong>流</strong>，并打上特定的标签</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Layer/IPv6.png" alt="IPv6"></p>
<ul>
<li>
<p>版本：该4比特字段用于标识IP版本号。IPv6将该字段设为6。注意到将该字段值设置为4并不能创建一个合法的IPv4数据报。</p>
</li>
<li>
<p>流量类型：该8比特字段与我们在IPv4中看到的TOS字段的含义相似。</p>
</li>
<li>
<p>流标签：该20比特的字段用于标识一条数据报的流，能够对一条流中的某些数据报给出优先权，或者它能够用来对来自某些应用的数据报给出更高的优先权，以优于来自其他应用的数据报。</p>
</li>
<li>
<p>有效载荷长度：该16比特值作为一个无符号整数，给出了IPv6数据报中跟在定长的40字节数据报首部后面的字节数量。</p>
</li>
<li>
<p>下一个首部（指传输层协议的首部）：该字段标识数据报中的内容（数据字段）需要交付给哪些个协议（如TCP或UDP）。该字段使用与IPv4首部中协议字段相同的值。</p>
</li>
<li>
<p>跳限制： 转发数据报的每台路由器将对该字段的内容减一。如果跳限制计数达到0，则该数据包将被丢弃。</p>
</li>
<li>
<p>源地址和目的地址：128比特地址</p>
</li>
<li>
<p>数据：IPv6数据报的有效载荷部分。当数据报到达目的地时，该有效载荷就从IP数据报中移除，并交给在下一个首部字段中指定的协议处理。</p>
</li>
</ul>
<p>IPV6弃用的特性：</p>
<ul>
<li>
<p>分片和重新组装： Pv6不允许在中间路由器上进行分片与重新组装。这种操作只能在源与目的地执行。如果路由器收到的IPv6数据报因太大而不能转发到出链路上的话，则路由器只需丢掉该数据报，并向发送方发回一个分组太大的ICMP差错报文即可。于是发送方能够使用较小长度的IP数据报重新发送数据</p>
</li>
<li>
<p>首部校验和：因为因特网层中的运输层和数据链路层协议执行了校验操作，所以IPv6去除了校验</p>
</li>
<li>
<p>选项：选项字段不再是标准IP首部的一部分了。但是它并未消失，而是可能出现在IPv6首部中由下一个首部指出的位置上</p>
</li>
</ul>
<h2 id="从IPV4到IPV6的迁移"><a class="header-anchor" href="#从IPV4到IPV6的迁移"></a>从IPV4到IPV6的迁移</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Layer/%E5%8F%8C%E6%A0%88.png" alt="双栈"></p>
<p>有两种方案： 双栈， 隧道</p>
<ul>
<li>双栈： 使用双栈的IPV6节点具有完整的IPV4实现，即同时具有收发两种数据报的能力。 在与IPV4节点进行交互时采用IPV4, 与IPV6节点交互时采用IPV6
<ul>
<li>双栈节点需要知道所要交互的节点是否支持IPV4/6, 这可以通过<strong>DNS查询</strong>实现，<strong>如果一个节点支持IPV6,那么DNS返回一个IPV6地址，反之返回IPV4地址</strong></li>
<li>IPV6数据报中一些字段在IPV4中没有，这意味着如果将其IPV6数据报转化为IPV4的，将会丢失一些信息。 对于路径A - B - C -D - E , 假设除了C节点是IPV4外，其他均是IPV6. 那么A-B的IPV6数据报在转换为IPV4时会不可逆地丢失信息，即使后来又被转换为IPV6数据报发向E</li>
</ul>
</li>
<li>隧道：如果两台IPV6数据库之间采用IPV6交互，但它们中间经由IPV4路由器互联，那么可以将整个IPV6数据报放到IPV4的有效载荷中。
<ul>
<li>比如图中B和E，要使用IPV6交互，但是它们经由中间IPv4路由器关联</li>
</ul>
</li>
</ul>
<h2 id="IPsec"><a class="header-anchor" href="#IPsec"></a>IPsec</h2>
<ul>
<li>IPsec是提供安全性服务的新型网络层协议，向后兼容IPV4和IPV6</li>
<li>IPsec只需在两台互相通信的主机中可用，其他主机和路由器可以继续用普通的IPv4</li>
<li>IPsec是面向连接的。主机间建立会话后，发送的TCP和UDP报文段都享受IPsec的安全性服务
<ul>
<li>密码技术约定</li>
<li>IP数据报有效载荷的加密</li>
<li>数据完整性</li>
<li>初始鉴别。主机确信在数据报中的源IP地址是该数据报的实际源</li>
</ul>
</li>
</ul>
<h1 id="ICMP（V4）"><a class="header-anchor" href="#ICMP（V4）"></a>ICMP（V4）</h1>
<p>ICMP协议用于在网络层进行差错报告</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Layer/ICMPv4.png" alt="ICMPv4"></p>
<p>ICMP是网络层协议，但从体系结构上讲位于IP协议之上，因为ICMP报文是作为IP报文的有效载荷承载的。同样，当一台主机收到一个指明上层协议为ICMP的IP数据报时，它分解出该报文的内容交给ICMP（就像任何低层次协议到高层一样）</p>
<p>ICMP报文有两种：</p>
<ul>
<li>ICMP差错报文</li>
<li>ICMP查询报文，查询报文总是成对出现</li>
</ul>
<table>
<thead>
<tr>
<th>ICMP种类</th>
<th>ICMP type字段</th>
<th>code</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>查询报文</td>
<td>0</td>
<td>0</td>
<td>回显回答（对ping的回答）</td>
</tr>
<tr>
<td></td>
<td>3</td>
<td>0</td>
<td>目的主机不可达</td>
</tr>
<tr>
<td></td>
<td>3</td>
<td>1</td>
<td>目的主机不可达</td>
</tr>
<tr>
<td></td>
<td>3</td>
<td>2</td>
<td>目的主机不可达</td>
</tr>
<tr>
<td></td>
<td>3</td>
<td>3</td>
<td>目的主机的端口不可达</td>
</tr>
<tr>
<td></td>
<td>3</td>
<td>6</td>
<td>目的网络未知</td>
</tr>
<tr>
<td></td>
<td>3</td>
<td>7</td>
<td>目的主机未知</td>
</tr>
<tr>
<td></td>
<td>4</td>
<td>0</td>
<td>源抑制（拥塞控制）</td>
</tr>
<tr>
<td></td>
<td>8</td>
<td>0</td>
<td>回显请求</td>
</tr>
<tr>
<td></td>
<td>9</td>
<td>0</td>
<td>路由器通告</td>
</tr>
<tr>
<td>查询报文</td>
<td>10</td>
<td>0</td>
<td>路由器发现</td>
</tr>
<tr>
<td></td>
<td>11</td>
<td>0</td>
<td>TTL过期</td>
</tr>
<tr>
<td></td>
<td>12</td>
<td>0</td>
<td>IP首部损坏</td>
</tr>
</tbody>
</table>
<h2 id="使用ICMP的程序"><a class="header-anchor" href="#使用ICMP的程序"></a>使用ICMP的程序</h2>
<p>ping程序，就是发送一个ICMP类型8编码0的报文到指定主机。 看到该回显（echo）请求，目的主机发回一个类型0编码0的ICMP回显回答</p>
<ul>
<li>大多数提出/IP实现支持在内核中实现ping服务器， 因此ping服务器不一定是个进程</li>
</ul>
<p>traceroute程序：</p>
<ul>
<li>
<p>向目的主机发送一系列普通的IP数据报，每个数据报都携带了具有一个不可达UDP端口号的UDP报文段 第一个数据报的TTL为1,第二个的为2, 依次类推。 该源主机也为每个数据报启动定时器。</p>
</li>
<li>
<p>当第n台路由器观察到这个数据报的TTL刚好过期，根据IP协议规则，就会丢弃该数据报并发送一个ICMP警告报文（类型11,编码0）。</p>
</li>
<li>
<p>该警告报文包含了路由器的名字与IP地址。 当该ICMP报文返回路由器时，源主机从定时器得到往返时延，从ICMP报文中得到第n台路由器的名字与地址。</p>
</li>
<li>
<p>而数据报最终将到达目的主机，由于它包含了一个具有不可达端口号的UDO报文段， 该目的主机将向源发送一个端口不可达的ICMP报文，当源主机收到这个报文时，就可以停止发送探测分组了</p>
</li>
</ul>
<h2 id="ICMPv6"><a class="header-anchor" href="#ICMPv6"></a>ICMPv6</h2>
<p>ICMPv6：用于IPv6， 因为IPv6和IPv4都不保证数据的可靠交付， 需要ICMP来反馈差错信息</p>
<ul>
<li><strong>ARP和IGMP都被合并到了ICMPv6中</strong></li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Layer/ICMPv6.png" alt="ICMPv6"></p>
<h1 id="In-net-Route-Selection"><a class="header-anchor" href="#In-net-Route-Selection"></a>In-net  Route Selection</h1>
<p>原理：将网络抽象为图</p>
<p>依据算法是全局的还是分布式的，可以分为：</p>
<ul>
<li>全局式路由选择算法, aka 链路状态算法（ Link State, LS ）： 该算法以所有节点之间的连通性和所有链路的费用作为输入</li>
<li>分布式路由选择算法：每个节点仅知道相邻链路的信息，通过迭代计算并于相邻节点交换信息，逐渐计算出到达目的节点的最低费用路径
<ul>
<li>最著名的有距离向量( Distance-Vector, DV )算法</li>
</ul>
</li>
</ul>
<h2 id="LS算法"><a class="header-anchor" href="#LS算法"></a>LS算法</h2>
<p>就是Dijkstra算法，需要有网络的全局信息</p>
<p>LS算法的缺陷： 链路振荡</p>
<h3 id="振荡问题"><a class="header-anchor" href="#振荡问题"></a>振荡问题</h3>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Layer/oscillation%20problem.png" alt="oscillation problem"></p>
<p>假设网络出初始的链路费用和路由选择如下，路由费用等于路由负载</p>
<p>那么算法再次运行时， y会发现顺时针到达w的代价为1,低于逆时针的代价，其他节点亦如是，整个链路的方向变为顺时针</p>
<p>算法再次运行，再次发生上述状况，链路方向又变为顺时针 。。。 循环往复，整个链路在不断<strong>振荡</strong></p>
<h2 id="DV算法"><a class="header-anchor" href="#DV算法"></a>DV算法</h2>
<p>距离向量（DV）算法是一种迭代的、异步的和分布式的算法，每个节点都要从一个或多个直接相邻邻居接受某些信息，执行计算然后将其计算结果分发给邻居。</p>
<ul>
<li><strong>分布式</strong>：每个结点都从一个或多个直接连接的邻居接收信息，通过对信息的计算，再把结果通告给邻居</li>
<li><strong>迭代</strong>： 一直持续到邻居之间无更多信息要交换为止</li>
<li><strong>异步</strong>： 不要求节点相互之间步伐一致地操作，而是当收到邻居发来的信息时进行操作即可。</li>
</ul>
<h3 id="Bellman-Ford-方程"><a class="header-anchor" href="#Bellman-Ford-方程"></a>Bellman-Ford 方程</h3>
<p>Bellman-Ford 方程: 令$c(x,v)$ 表示 x 到邻居 v 的开销，$d_v(y) $表示从 节点 v 到目的地 y 的开销，我们需要在 x 的所有邻居中获得最小值。<br>
$$<br>
d_x(y) = min_v{ \ c(x,v) + d_v(y) \ }<br>
$$</p>
<h3 id="距离向量"><a class="header-anchor" href="#距离向量"></a>距离向量</h3>
<p>距离向量:  x 在 N 中到其他所有结点 y 的开销的估计值<br>
$$<br>
D_x = [D_x (y): \ y ∈ N]<br>
$$</p>
<p>Bellman-Ford 方程为 DV 算法提供了理论基础。简单地说，也就是<strong>结点获得最短路径的下一跳</strong>，并且将该信息写入转发表中。这时我们也</p>
<p>每个节点x维护如下路由选择信息：</p>
<ul>
<li>对每个邻居v,从x到直接相连邻居的费用为</li>
<li>节点x的距离向量，即$D_x = [D_x (y): \ y ∈ N]$,   是 x 在 N 中到其他所有结点 y 的开销的估计值</li>
<li>它的每个邻居的距离向量，即对x的每个邻居v,有$D_v = [D_v (y): \ y ∈ N]$</li>
</ul>
<h3 id="算法步骤："><a class="header-anchor" href="#算法步骤："></a>算法步骤：</h3>
<ul>
<li>
<p>每个节点<strong>周期性</strong>向邻居发送它的距离向量副本。 当节点x从它的任何一个邻居v接收到一个新距离向量路由协定，就保存v的距离向量，并根据Bellman-Ford方程更新自己的距离向量如下：<br>
$$<br>
D_x(y) = min_v{ \ c(x,v) + d_v(y) \ } \quad  对N中的每个节点<br>
$$</p>
</li>
<li>
<p>如果x的距离向量因为这次更新被改变，x将向它的每个邻居发送其更新后的距离向量</p>
</li>
<li>
<p>已证明： 只要所有节点继续以异步方式执行此算法，每个费用估计$D_x (y)$收敛到 $d_x (y)$,   $d_x (y)$ 为节点x到y的实际最低费用路径的费用</p>
</li>
<li>
<p>DV算法的缺点：无穷计数问题</p>
</li>
</ul>
<h3 id="无穷计数问题"><a class="header-anchor" href="#无穷计数问题"></a>无穷计数问题</h3>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Layer/endless%20counting%20problem.png" alt="endless counting problem"></p>
<blockquote>
<p>图中有X、Y、Z三个节点。我们增加链路费用。 Y检测到它到X的路径费用由4增加到了60。此时节点Z的距离向量为：d(X) = 5, d(Y) = 1, d(Z) = 0。于是Y在更新向量时发现，咦，Z到X的距离只有5诶，那可以先到Z再到X，于是Y的距离向量更新为：d(x) = 5 + 1 = 6, d(Y) = 0, d(z) = 1。我们可以发现，这个逻辑显然是错误的，因为Z到X的距离为5的前提是要经过Y，但Y更新后的路径又要经过Z，这就形成了一个选路环路（routing-loop）问题。因为Y的距离向量更新了（虽然是错误的），但它还是向Z发送了更新报文。Z收到更新报文后，比较了下邻居们到X的距离，发现经过Y的路径距离为1 + 6 = 7，小于直接到X的距离，于是Z也更新的自己的距离向量，然后又将更新后的距离向量发给Y。Y收到后又更新向量为8，然后再发给Z。。。这样循环往复，更新报文在Y和Z之间传来传去，直到第44次迭代后，Z算出它经由Y的路径费用大于50为止。此时，Z最终确定到X的最短路径费用是直接到达X的费用50，而Y也得到了最短路径是经Z到X的费用51。</p>
</blockquote>
<p><strong>无穷计数问题</strong>： 链路费用<strong>增加</strong>时，路由选择形成环路，该选择过程会不断迭代直到判断开销过大不符合条件才会跳出</p>
<ul>
<li>解决方案： 毒性逆转</li>
</ul>
<p><strong>毒性逆转</strong>： 如果z通过y路由选择到目的地x，则z将通告y：它（z） 到x的距离是无穷大的 。 只要z经y路由选择到x， z就持续地向y讲述这个谎言。y将相信z没有到x的路径，最终y将永远不会试图经由z路由选择到x。</p>
<ul>
<li>毒性逆转并没有解决一般的无穷计数问题，当网络规模增大，涉及到了 3 个及以上的更多节点的环路，毒性逆转将不能探测到故障</li>
<li>（片面的）解决方案：参加RIP</li>
</ul>
<h2 id="层次路由选择"><a class="header-anchor" href="#层次路由选择"></a>层次路由选择</h2>
<p>在互联网等大型网络中，一般把路由器组织为<strong>自治系统</strong>（  Autonomous System, AS  ）</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Layer/AS.png" alt="AS"></p>
<ul>
<li>
<p>将路由器组织成AS的理由：</p>
<ul>
<li>互联网上路由器规模庞大，路由选择信息的计算开销大，因此需要对路由器进行分组，降低计算复杂性</li>
<li>许多组织都希望管理自治</li>
</ul>
</li>
<li>
<p>同一AS内，运行相同的<strong>AS内部路由选择协议</strong>（ RIP, OSPF ）； AS之间， 运行相同的<strong>AS间路由选择协议</strong>( BGP )</p>
</li>
<li>
<p>网关路由器（  gateway router ）：在AS内的路由器，负责向在本AS之外的目的地转发分组</p>
</li>
</ul>
<h1 id="Internet-Route-Selection"><a class="header-anchor" href="#Internet-Route-Selection"></a>Internet Route Selection</h1>
<h2 id="自治系统内的路由选择协议"><a class="header-anchor" href="#自治系统内的路由选择协议"></a>自治系统内的路由选择协议</h2>
<p>也称为<strong>内部网关协议</strong>（ interior gateway protocol ）</p>
<h3 id="RIP"><a class="header-anchor" href="#RIP"></a>RIP</h3>
<p>就是AS内的DV算法，只不过定义了最大跳数（默认16）来解决无穷计数问题，这个方案太简陋了，因为还是要绕圈子， 而且这种定义跳数上限的行为，导致网络中不能存在距离大于16的节点，这导致RIP只能用于小型网络</p>
<p>RIP在传输层使用UDP</p>
<h3 id="OSPF"><a class="header-anchor" href="#OSPF"></a>OSPF</h3>
<p>开放最短路径优先（ Open Shortest Path First, OSPF）：使用洪泛链路状态信息和Dijkstra最低开销路径算法。，每台路由器知道整个自治系统的完整拓扑图。</p>
<ul>
<li>当且仅当链路状态发生变化时，向本AS中所有路由器发送信息（洪泛）
<ul>
<li>RIP仅和相邻节点交换信息</li>
<li>RIP是周期性交换信息，不管链路状态有没有变化</li>
</ul>
</li>
<li>发送的信息就是与本路由器相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息</li>
</ul>
<p>通过交换信息，所有路由器最终都能建立一个链路状态数据库，事实上就是全网（整个AS）的拓扑图，<strong>每个路由器都知道全网的拓扑结构</strong></p>
<ul>
<li>RIP的路由器仅知道下一跳距离和下一跳路由器</li>
</ul>
<p>OSPF采用IP数据报进行传送， 相比UDP，报文更简短</p>
<p>OSPF的优点如下：</p>
<ul>
<li>
<p>安全：OSPF路由器之间的交换可以进行认证，只有受信任的路由器才能参与AS内的OSPF协议，从而防止恶意入侵者；</p>
</li>
<li>
<p>多条相同路径的开销：当到达某目的地的多条路径具有相同的开销时，OSPF允许使用多条路径；</p>
</li>
<li>
<p>对单播与多播路由选择的综合支持：多播OSPF（MOSPF）提供对OSPF的简单扩展，以便提供多播路由选择；</p>
</li>
<li>
<p>支持<u>在单个AS中的层次结构</u>：一个OSPF自治系统能够将AS进一步划分为一个个区域，每个区域都允许自己的OSPF链路状态路由选择算法</p>
<ul>
<li>
<p>面向区域，比面向AS的粒度更细</p>
</li>
<li>
<p>又比面向主机粒度更粗，在洪泛时可以减少链路负载</p>
</li>
</ul>
</li>
</ul>
<h2 id="自治系统间的路由选择"><a class="header-anchor" href="#自治系统间的路由选择"></a>自治系统间的路由选择</h2>
<h3 id="BGP"><a class="header-anchor" href="#BGP"></a>BGP</h3>
<p><strong>边界网关协议</strong>BGP, 作用顾名思义。</p>
<ul>
<li>BGP并非要寻找最短路径路由，而是比较好的路由。因为要考虑AS自身的策略（比如，中国这个AS不允许其报文经由外国再转发到本地，哪怕这条路由费用比较奥低）</li>
</ul>
<p>BGP是面向AS的，将AS视为节点</p>
<h1 id="广播和多播路由选择"><a class="header-anchor" href="#广播和多播路由选择"></a>广播和多播路由选择</h1>
<h2 id="广播"><a class="header-anchor" href="#广播"></a>广播</h2>
<p>最简单的实现方式是“N次单播”，缺点是需要发送方知道所有接收方的信息，这需要额外的协议来保证</p>
<ul>
<li>N次单播会在到第一跳的链路上发送N个副本，效率低下（时间为N）且造成巨大的链路负载，但这可以通过转而让后续节点来生成和转发副本来解决。 第一跳仅需要发一份副本</li>
</ul>
<h3 id="无控制洪泛"><a class="header-anchor" href="#无控制洪泛"></a>无控制洪泛</h3>
<p>洪泛（flooding）: 源节点向它的所有邻居发送分组副本，当某邻居接收了一个广播分组时，它复制该分组并向它的所有邻居（除了从其接收该分组的那个邻居）转发。</p>
<ul>
<li>如果图有环，该方法会导致广播分组死循环</li>
</ul>
<h3 id="受控洪泛"><a class="header-anchor" href="#受控洪泛"></a>受控洪泛</h3>
<p>原理：如果节点已经接收并且洪泛了某分组的较早副本，它就不应该继续洪泛该分组</p>
<h4 id="序号控制洪泛"><a class="header-anchor" href="#序号控制洪泛"></a>序号控制洪泛</h4>
<p>序号控制洪泛： 每个广播分组带有一个广播序号和源节点的地址。节点维护一个接收过的广播分组的广播序号列表。  节点只会复制并转发列表中没有对应序号的分组</p>
<h4 id="反向路径转发"><a class="header-anchor" href="#反向路径转发"></a>反向路径转发</h4>
<p>反向路径转发（ Reverse Path Forwarding, RPF ）: 当一台路由器接收到具有给定源地址的广播分组时，仅当<strong>该分组到达的链路正好位于它自己的返回其源的最短单播路径上</strong>，它才向其所有出链路传输报文；否则，路由器只是丢弃入分组而不向任何它的出链路转发分组</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Layer/RPF.png" alt="RPF"></p>
<p>如图，假设粗线是源A到其它接收方的最低费用路径：</p>
<ol>
<li>A先广播一个源为A的分组到节点C, B</li>
<li>B将向C, D转发它从节点A接收到的源为A的分组（因为A位于自己到A的最低费用路径上）， B将忽略从其它任何节点接收的源为A的分组</li>
<li>考虑C， C将从A和B接收源为A的分组， 而B不在C自己到A的最短路径上， 因此C将忽略来自B的任何源为A的分组</li>
</ol>
<h3 id="生成树广播"><a class="header-anchor" href="#生成树广播"></a>生成树广播</h3>
<p>首先对网络构造出一个最小生成树</p>
<p>实现方法：</p>
<ul>
<li>定义一个根节点</li>
<li>所有其它节点对根节点单播，直到到达根节点或根节点的生成树内的任意节点</li>
<li>整个单播路径上的所有节点就被加入进生成树</li>
</ul>
<h2 id="多播"><a class="header-anchor" href="#多播"></a>多播</h2>
<p>多播数据报采用<strong>间接地址</strong>来编址， 用来表示一组接收方， 寻址到该组的分组被交付给所有与该组相关联的多播接收方</p>
<ul>
<li>间接地址是<strong>D类地址</strong></li>
<li>多播组：与多播地址相关联的一组接收方</li>
<li>显然多播地址<strong>只能用于目的地址，不能用于源地址</strong></li>
<li>对多播数据报不会产生ICMP差错报文， 因此ping一个多播地址将无法收到响应</li>
</ul>
<p>多播的两个组件：</p>
<ul>
<li>IGMP：将主机加入多播组</li>
<li>多播路由选择协议：负责多播数据报的路由选择</li>
</ul>
<h3 id="IGMP"><a class="header-anchor" href="#IGMP"></a>IGMP</h3>
<ul>
<li>
<p>与ICMP类似，封装在IP数据报中</p>
</li>
<li>
<p>IP协议号为2</p>
</li>
<li>
<p>三种报文类型：</p>
<ul>
<li>
<p><code>menbership_query</code>: 由一台路由器向所有与主机相连的接口发送一个<code>menbership_query</code>报文，以确定该接口上主机已加入的所有多播组集合</p>
<ul>
<li>路由器<strong>周期性地发送</strong><code>menbership_query</code></li>
</ul>
</li>
<li>
<p><code>menbership_report</code>: 主机用一个<code>menbership_report</code>报文来响应<code>menbership_report</code>。 当一个应用程序首次加入一个多播组时，主机会之动向路由器发送<code>menbership_report</code></p>
</li>
<li>
<p><code>leave_group</code>: 表明主机离开该多播组，该报文是<strong>可选的</strong>， 因为IGMP是软状态协议。 通过周期性地发送<code>menbership_query</code>，接收<code>menbership_report</code>来更新状态（指某主机加入了多播组）。 如果长时间没有收到<code>menbership_report</code>，那么该状态通过超时事件被删除</p>
</li>
</ul>
</li>
<li>
<p><strong>软状态协议</strong>， 通过某个端系统发送的周期性报文来更新状态。 状态能够在一次崩溃中丢失，接着自动地由后继的更新报文所恢复</p>
</li>
</ul>
<h3 id="多播路由选择协议"><a class="header-anchor" href="#多播路由选择协议"></a>多播路由选择协议</h3>
<p>生成树算法，得到一棵包含所有多播组节点（即多播组对应的路由器）的树。</p>
<p>注意到，该树可能会包含一些非多播组节点，它们因此也会承载多播流量</p>
<h1 id="VPN"><a class="header-anchor" href="#VPN"></a>VPN</h1>
<p>机构可以为内部的主机自行分配IP地址。RFC1918指定了一些专用地址，只能用于内部网络：</p>
<ul>
<li><strong>10.0.0.0——10.255.255.255</strong></li>
<li><strong>172.16.0.0——172.31.255.255</strong></li>
<li><strong>192.168.0.0——192.168.255.255</strong></li>
</ul>
<p><strong>在互联网中的所有路由器，对目的地址是专用地址的数据报一律不进行转发</strong></p>
<p>专用网PN：采用专用地址的网络</p>
<p>虚拟专用网VPN（  Virtual Private Network ）:  用利用互联网来作为本机构各专用网之间的通信载体。。如果专用网的通信必须经过互联网，但又有保密的要求，那么所有通过互联网传送的数据都必须加密</p>
<ul>
<li>尽管可能要经过互联网，但还是用于机构内部的通信，因此称为专用网</li>
<li>显然，一个机构的不同专用网要在公网上通信，每个专用网之间需要有至少一个代理路由器，具有公网IP</li>
<li>可以认为，VPN和PN的区别就是有公网IP</li>
<li>VPN采用<strong>隧道</strong>技术，组织A内的主机可以采用专用地址与主机B通信，主机B可能在本专用网内，可能在另一个专用网，后一种情况下无非是将A的数据报发给本专用网的代理服务器为其做转发，整个过程对通信的双方透明明</li>
</ul>
<h1 id="NAT"><a class="header-anchor" href="#NAT"></a>NAT</h1>
<p>网络地址转换NAT（Network Address Transition）：将专用地址映射为公用地址， 用于专用网内的主机和互联网上的主机通信</p>
<ul>
<li>运行NAT的路由器称为NAT代理，显然，如果NAT代理具有n个公网IP，则最多允许n个内网主机联网。</li>
<li>同一时刻，一个内部主机持有一个公网IP，因此当NAT路由器收到互联网上的主机发来的<strong>SYN分组</strong>（见<em>运输层</em>）时，可以映射表来进行IP地址转换</li>
<li>由于一个公网IP可能会映射不同的内网主机， 外部主机将无法通过NAT代理与内网通信， 即通信只能由内网的主机发起。因此，专用网内部的主机无法当服务器用
<ul>
<li>这意味着NAT和P2P是矛盾的，因为P2P要求任何参与对等方A应当能够对任何其他参与对等方B发起一条TCP连接</li>
</ul>
</li>
</ul>
<p>NAPT：同时做IP映射和端口映射， 此时内网主机在代理时可通过端口来区分，哪怕它们映射到一个公网IP</p>
<ul>
<li>NAPT不仅要改变IP，还要改变端口号，后者属于运输层的范畴，因此NAPT不是“纯的”IP层协议。 而且端口号本来是用于进程编址的（详见<em>运输层</em>）， NAPT将其用于主机编址，属于滥用</li>
</ul>
<h1 id="MPLS"><a class="header-anchor" href="#MPLS"></a>MPLS</h1>
<p>传统的IP网络中， 路由器对分组在转发表中进行最长前缀匹配， 找到下一跳的IP地址，这个过程需要软件计算路由表，速度太慢</p>
<p>转发等价类FEC（  Forwarding Equivalence Class ）:  路由器按照同样方式对待的IP数据报的集合（ 比如，具有相同的源和目的地址 ）</p>
<p>多协议标记交换MPLS（  MultiProtocol Label Switching ）: 给属于同一FEC的IP数据报打上相同的标记，路由器<strong>仅仅根据转发表</strong>来对打上标记的数据报进行转发，</p>
<ul>
<li>这里的“路由器”只用到了转发表，没用到路由表，相当于交换机，即整个转发由硬件实现</li>
<li>硬件意味着开销小，且需要人为控制，这也称为<strong>流量工程</strong></li>
</ul>
<h2 id="MPLS首部的位置"><a class="header-anchor" href="#MPLS首部的位置"></a>MPLS首部的位置</h2>
<p>由于IPv4 首部没有多余的位置存放MPLS标记，MPLS首部实际上位于第二层和第三层之间:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Layer/MPLS%20Header.png" alt="MPLS Header"></p>
<p>“打标记” 就是在帧首部和IP数据报首部之间插入一个4字节的MPLS首部，具体的标记值是一个整数， 位于“MPLS首部”字段中</p>
<p>.</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Computer Networking</tag>
      </tags>
  </entry>
  <entry>
    <title>Clang/LLVM Toolkit</title>
    <url>/2022/09/13/Clang-LLVM-Toolkit/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>LLVM</li>
</ul>
<span id="more"></span>
<h1 id="LLVM"><a class="header-anchor" href="#LLVM"></a>LLVM</h1>
<h2 id="Install"><a class="header-anchor" href="#Install"></a>Install</h2>
<p>这里讲一下Mac OSX怎么安装llvm/clang.</p>
<p>也可以手动编译LLVM/clang: <a href="https://clang.llvm.org/get_started.html">Doc</a></p>
<p>OSX自带了LLVM, 但是是苹果版的, 和开源版本不太一样, 我们希望使用开源版本的LLVM.</p>
<ol>
<li>
<p>使用brew安装:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">brew upgrade &amp;&amp; brew install llvm</span><br></pre></td></tr></table></figure>
<p>这会安装开源版本的LLVM. 注意, 主机中实际是两个版本的LLVM共存的, 我们不要使用系统的LLVM, 只用brew下载的LLVM.</p>
<p>Linux中一般直接安装到<code>/usr/local</code>了. 但是由于Max也有一个LLVM, 不能把二者混淆, brew就会把LLVM装到别的位置</p>
</li>
<li>
<p>查看brew安装的LLVM位置:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> $(brew --prefix llvm)</span><br></pre></td></tr></table></figure>
<ul>
<li>这显示的是符号链接的位置(例如, <code>/opt/homebrew/opt/llvm</code>),  真实的llvm被安装在形如<code>/opt/homebrew/Cellar/llvm/14.0.6_1</code>的位置. 不过无关紧要</li>
</ul>
</li>
<li>
<p>把LLVM添加到<code>PATH</code>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># LLVM on MAC, mac已经自带了llvm, 但是位置很奇怪  Not Committed Yet</span></span><br><span class="line">MAC_LOCAL_LLVM_VERSION=14.0.6_1</span><br><span class="line"><span class="built_in">export</span> LLVM_MAC_LOCAL_HOME=/opt/homebrew/Cellar/llvm/<span class="variable">$MAC_LOCAL_LLVM_VERSION</span></span><br><span class="line"><span class="comment"># brew目录下的llvm实际上是指向Mac local LLVM的符号链接, 为了方便, 还是用符号链接的路径吧</span></span><br><span class="line"><span class="built_in">export</span> LLVM_HOME=/opt/homebrew/opt/llvm</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$LLVM_HOME</span>/bin</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>再添加两个环境变量, 让clang能找到LLVM:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LDFLAGS=<span class="string">&quot;-L(<span class="variable">$LLVM_HOME</span>)/lib -Wl,-rpath,(<span class="variable">$LLVM_HOME</span>)/lib&quot;</span></span><br><span class="line"><span class="built_in">export</span> CPPFLAGS=<span class="string">&quot;-I(<span class="variable">$LLVM_HOME</span>)/include -I(<span class="variable">$LLVM_HOME</span>)/include/c++/v1/&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>再把Clang的环境变量设置一下:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CC := /usr/local/opt/llvm/bin/clang</span><br><span class="line"><span class="built_in">export</span> CXX := $(CC)++</span><br></pre></td></tr></table></figure>
<ul>
<li>更好的办法是添加到<code>PATH</code>. 我这样设置, 命令行需要用<code>$(CC)</code>来调用clang</li>
</ul>
</li>
<li>
<p>测试安装是否成功:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">llvm-dis --version</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Compiler</tag>
      </tags>
  </entry>
  <entry>
    <title>Transport Layer</title>
    <url>/2022/07/06/Computer%20Networking%20Transport-Layer/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Intro</li>
<li>UDP</li>
<li>TCP</li>
<li>可靠传输</li>
<li>TCP Flow Conteol</li>
<li>TCP Congestion Conteol</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<p>网络层(IP)为<strong>主机</strong>之间提供了逻辑通信， 而运输层为<strong>进程</strong>之间提供了端到端的逻辑通信</p>
<ul>
<li>逻辑通信就是好像两个对等实体(无论是网络层的实体(主机)还是运输层的实体(进程))之间有一条水平方向的信道</li>
<li>运输层的端到端通信， 是<strong>进程</strong>间的通信</li>
</ul>
<h2 id="运输层的作用"><a class="header-anchor" href="#运输层的作用"></a>运输层的作用</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Transport%20Layer/Transport%20Layer.png" alt="Transport Layer"></p>
<ul>
<li>复用( multiplexing )：client的不同进程都可以使用同一个运输层协议发送数据到网络层</li>
<li>分用( demultiplexing ): server的运输层在从网络层收到发送给各进程的数据后，可以分别交付给目的进程， 即server的不同进程可以用同一个运输层协议接收数据</li>
<li>对报文进行差错检测</li>
</ul>
<h2 id="运输层的协议"><a class="header-anchor" href="#运输层的协议"></a>运输层的协议</h2>
<p>运输层协议主要有面向连接的TCP和无连接的UDP。 两种协议在协议栈中的位置：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Transport%20Layer/Transport%20Layer%20in%20Network%20Arch.png" alt="Transport Layer in Network Arch"></p>
<ul>
<li>
<p>TCP的数据传输单元称为TCP报文段( TCP Segment )</p>
</li>
<li>
<p>UDP的数据传输单元称为UDP用户数据报( UDP Diagram )</p>
</li>
</ul>
<p>以下给出应用层协议主要使用的运输层协议:</p>
<table>
<thead>
<tr>
<th>应用</th>
<th>应用层协议</th>
<th>运输层协议</th>
</tr>
</thead>
<tbody>
<tr>
<td>域名 --- IP 映射</td>
<td>DNS</td>
<td>UDP</td>
</tr>
<tr>
<td>文件传送</td>
<td>TFTP</td>
<td>UDP</td>
</tr>
<tr>
<td>路由选择</td>
<td>RIP（Router Informatio Protocal）</td>
<td>UDP</td>
</tr>
<tr>
<td>IP分配</td>
<td>DHCP</td>
<td>UDP</td>
</tr>
<tr>
<td>远程文件服务器</td>
<td>NFS( Network File System )</td>
<td>UDP</td>
</tr>
<tr>
<td>多播</td>
<td>IGMP</td>
<td>UDP</td>
</tr>
<tr>
<td>Email</td>
<td>SMTP</td>
<td>TCP</td>
</tr>
<tr>
<td>远程终端接入</td>
<td>TELNET</td>
<td>TCP</td>
</tr>
<tr>
<td>万维网</td>
<td>HTTP</td>
<td>TCP</td>
</tr>
<tr>
<td>文件传送</td>
<td>FTP</td>
<td>TCP</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="Socket-port"><a class="header-anchor" href="#Socket-port"></a>Socket &amp;&amp; port</h2>
<ul>
<li>
<p>套接字( Socket ): 网络通信中的进程的唯一标识， 格式为<code>( IP : port )</code></p>
</li>
<li>
<p>协议端口号( protocal port number ): 简称端口( port )，用来唯一标识一个本机的（应用层）进程</p>
<ul>
<li>数据通过IP发送到对应的主机， 主机上的运输层协议再通过端口来找到对应的应用层进程, 即: <strong>端口是本机的应用层进程和运输层协议交互的一种地址</strong></li>
<li>在本机中，进程也可以通过PID标识，不同的OS拥有不同格式的PID，格式无法统一，因此无法用于运输层与应用层的交互</li>
<li>这里的“端口”是软件端口， 与用于硬件设备交互的硬件端口不同</li>
</ul>
</li>
<li>
<p>端口有16位, 即 0 ~ 65535， 可分为:</p>
<ul>
<li>server port: 0 ~ 49151
<ul>
<li>well-known port: 0 ~ 1023, 被保留用于一些常见的程序，如HTTP(80), FTP(21)</li>
<li>register port: 1024 ~ 49151，被用于没有well-known port的程序</li>
</ul>
</li>
<li>client port: 49152 ~ 65535xs</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>端口号</th>
<th>服务进程</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>7</td>
<td>echo</td>
<td>将收到的数据报送到服务器</td>
</tr>
<tr>
<td>9</td>
<td>Discard</td>
<td>丢弃任何收到的数据报</td>
</tr>
<tr>
<td>21</td>
<td>FTP</td>
<td>活跃的用户</td>
</tr>
<tr>
<td>25</td>
<td>SMTP</td>
<td>简单邮件传输协议</td>
</tr>
<tr>
<td>53</td>
<td>DNS</td>
<td></td>
</tr>
<tr>
<td>69</td>
<td>HTTP</td>
<td></td>
</tr>
<tr>
<td>161</td>
<td>SNMP</td>
<td></td>
</tr>
<tr>
<td>443</td>
<td>HTTPS</td>
<td></td>
</tr>
<tr>
<td>23</td>
<td>Telnet</td>
<td>虚拟终端网络</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h1 id="UDP"><a class="header-anchor" href="#UDP"></a>UDP</h1>
<p>Features:</p>
<ol>
<li>无连接</li>
<li>不可靠传输</li>
<li>面向报文：即将报文剥去/添加UDP头后转交给上/下层， 不进行任何的合并/拆分。这意味着进程必须选择合适大小的报文，若报文过长，IP层会进行分片；若报文太短，则会使得IP数据报的首部的相对长度较大，两种情况都会降低IP层效率</li>
<li>没有拥塞控制</li>
<li>首部开销小，只有 8 Byte</li>
</ol>
<h2 id="UDP通信过程"><a class="header-anchor" href="#UDP通信过程"></a>UDP通信过程</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Transport%20Layer/UDP%20communication%20prodedure.png" alt="UDP communication prodedure"></p>
<h2 id="UDP-Diagram"><a class="header-anchor" href="#UDP-Diagram"></a>UDP Diagram</h2>
<p>UDP Diagram分为Header和Dara两部分</p>
<ul>
<li>Header是固定的8 Byte</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Transport%20Layer/UDP%20Diagram.png" alt="UDP Diagram"></p>
<p>Header各字段如下:</p>
<ol>
<li>
<p>源端口：源端口号；在需要对方回信时选用；不需要时用全0</p>
</li>
<li>
<p>目的端口：目的端口号；在终点交付报文时必须使用</p>
</li>
<li>
<p>长度：UDP用户数据报的长度，最小值是8(仅有首部)</p>
</li>
<li>
<p>checksum：检测UDP用户数据报在传输过程中是否有错。有就丢弃</p>
<ul>
<li>在计算checksum时，需要在UDP报文之前增加12 Byte的&quot;伪首部&quot;( 其结构和内容见上图 ), 伪首部不是报文的一部分，只是在计算checksum时临时添加的</li>
</ul>
<p>​</p>
</li>
</ol>
<p>如果Receiver的UDP发现收到的报文中的目的端口号非法( 比如，没有进程监听该端口 ), 就会丢弃该报文并由ICMP发送一个&quot;port unreachable&quot;差错报文（ type=3, code=3）给Sender</p>
<h2 id="常用的UDP程序"><a class="header-anchor" href="#常用的UDP程序"></a>常用的UDP程序</h2>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<p>流程图见上文&quot;UDP通信过程&quot;</p>
<h3 id="UDP-Client"><a class="header-anchor" href="#UDP-Client"></a>UDP Client</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">serverName = <span class="string">&#x27;localhost&#x27;</span> <span class="comment"># 服务器地址，可以是IP或者域名，如果是域名，则会进行DNS lookup</span></span><br><span class="line">serverPort = <span class="number">12000</span> <span class="comment"># 服务器指定的端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Client Socker</span></span><br><span class="line"><span class="comment"># AF_INET：表明IP采用IPv4</span></span><br><span class="line"><span class="comment"># SOCK_DGRAM:表明这是个UDP Socket</span></span><br><span class="line">clientSocket = socket(AF_INET, SOCK_DGRAM) <span class="comment"># 创建UDP套接字，使用IPv4协议</span></span><br><span class="line"></span><br><span class="line">message = <span class="built_in">input</span>(<span class="string">&#x27;Input lowercase sentence:&#x27;</span>).encode() <span class="comment"># 用户输入信息，并编码为bytes以便发送</span></span><br><span class="line">clientSocket.sendto(message, (serverName, serverPort)) <span class="comment"># 将信息发送到服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从服务器接收信息，同时也能得到服务器地址(当然，其实Client已经知道了Server IP，因此这个信息是多余的)</span></span><br><span class="line"><span class="comment"># 缓存长度2048</span></span><br><span class="line">modifiedMessage, serverAddress = clientSocket.recvfrom(<span class="number">2048</span>) </span><br><span class="line"><span class="built_in">print</span>(modifiedMessage.decode()) <span class="comment"># 显示信息</span></span><br><span class="line">clientSocket.close() <span class="comment"># 关闭套接字</span></span><br></pre></td></tr></table></figure>
<h3 id="UDP-Server"><a class="header-anchor" href="#UDP-Server"></a>UDP Server</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">serverPort = <span class="number">12000</span> <span class="comment"># 服务器指定的端口</span></span><br><span class="line">serverSocket = socket(AF_INET, SOCK_DGRAM) <span class="comment"># 创建UDP套接字，使用IPv4协议</span></span><br><span class="line">serverSocket.bind((<span class="string">&#x27;&#x27;</span>,serverPort)) <span class="comment"># 将套接字绑定到之前指定的端口</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The server is ready to receive&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>: <span class="comment"># 服务器将一直接收UDP报文</span></span><br><span class="line">	message, clientAddress = serverSocket.recvfrom(<span class="number">2048</span>) <span class="comment"># 接收客户端信息，同时获得客户端地址</span></span><br><span class="line">	modifiedMessage = message.upper() <span class="comment"># 将客户端发来的字符串变为大写</span></span><br><span class="line">	serverSocket.sendto(modifiedMessage, clientAddress) <span class="comment"># 通过已经获得的client地址，将修改后的字符串发回client户端</span></span><br></pre></td></tr></table></figure>
<h1 id="TCP"><a class="header-anchor" href="#TCP"></a>TCP</h1>
<p>Featues:</p>
<ol>
<li>
<p>面向连接，且连接是<strong>点对点</strong> 即以Socket为进程的地址，一对一通信)的</p>
<ul>
<li>TCP无法提供多播</li>
</ul>
</li>
<li>
<p>可靠传输</p>
</li>
<li>
<p>全双工通信</p>
</li>
<li>
<p>面向字节流：虽然进程与TCP的交互以数据块（大小不等）为单位， 但TCP将应用层的数据仅仅看成无结构的字节流。 发送方的进程把数据写入TCP的<strong>发送缓存</strong>，接收方的进程从TCP的<strong>接收缓存</strong>中读取字节流</p>
<ul>
<li>发送缓存实际上是发送窗口的超集，二者的关系详见下文<em>滑动窗口与缓存</em></li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Transport%20Layer/TCP%20Procedure.png" alt="TCP Procedure"></p>
</li>
</ol>
<h2 id="TCP连接"><a class="header-anchor" href="#TCP连接"></a>TCP连接</h2>
<ul>
<li>
<p>TCO连接的端点就是Socket，每条TCP连接唯一地被两个端点确定：</p>
<p>TCP连接::={socket1,socket2} = {(IP1:port1),(IP2:port2)}</p>
</li>
</ul>
<h2 id="TCP数据传输"><a class="header-anchor" href="#TCP数据传输"></a>TCP数据传输</h2>
<p>当TCP连接建立后，两个进程就可以发送数据了</p>
<ul>
<li>
<p>发送缓存：应用程序将要发送的数据通过Socket传递给TCP，TCP将数据引导到该连接的发送缓存，<strong>发送缓存</strong>大小是在三阶段握手的过程中确定的；之后TCP将时不时地从该缓存中拿出数据，封装成报文段进行发送</p>
<ul>
<li>TCP规范中<strong>没有规定TCP应该在何时发送缓存里的数据</strong>，描述为“TCP应该在它方便的时候以报文段的形式发送数据”。 关于TCP如何控制发送报文段的时机，见下文<em>TCP的传输效率</em></li>
</ul>
</li>
<li>
<p>接收缓存：当TCP Segment到达接收端时，便进入了接收端的缓存，等待被应用程序读取</p>
<ul>
<li>TCP连接的每一端都有发送和接收缓存</li>
</ul>
</li>
<li>
<p>MSS(Maximum Segment Size)： TCP每次可以从缓存中发送的最大数据长度</p>
<ul>
<li>
<p>一般来说，MSS+TCP/IP首部的长度要小于等于链路的MTU（即链路层最大帧长度Maximum Transport Unit）</p>
</li>
<li>
<p>MSS的名字很让人误解， 事实上MSS指的只是Segment的Data部分的最大长度，而不是整个Segment的长度</p>
</li>
</ul>
</li>
</ul>
<h2 id="TCP-Segment"><a class="header-anchor" href="#TCP-Segment"></a>TCP Segment</h2>
<p>TCP Segment分为Header和Data两部分</p>
<ul>
<li>Header前20Byte固定，后面跟$4n$个可选的Byte，因此Header占$20 + 4n$ Byte</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Transport%20Layer/TCP%20Segment.png" alt="TCP Segment"></p>
<p>Header各字段如下：</p>
<ol>
<li>源端口和目的端口：各占2字节，分别是源端口号和目的端口号</li>
<li><strong>序号</strong>：占4字节, 序号范围$[0,2^{32}-1]$。TCP中传输的数据流中的每一字节都按顺序编号。序号字段的值是<strong>本报文段所发送的数据的第一个字节的序号</strong></li>
<li><strong>确认号</strong>：占4字节，是<strong>期望收到对方下一个报文段的第一个数据字节的序号</strong>。 例如B正确收到了A发送过来的一个Segment。序号为501，而数据长度是200Byte，这表明B正确收到了A发送的到序号700为止的数据。 因此B期望收到A的下一个数据序号是701， 于是B在发送给A的Segment中把确认号置为701
<ul>
<li>若确认号=$N$，则表明到序号$N-1$为止所有数据都正确收到</li>
</ul>
</li>
<li><strong>数据偏移</strong>：占4位，指出TCP报文段的数据起始处与TCP报文段的起始处的距离，也就是<strong>Header的长度</strong></li>
<li>保留：占6位，保留为今后使用，目前应置为0</li>
<li>紧急URG：当URG=1时，表明紧急指针字段有效，告诉系统此报文中有紧急数据，应尽快传送，而不采用原来的按排队顺序来传送</li>
<li>确认<strong>ACK</strong>：仅当ACK=1时确认号字段有效，TCP规定，在<strong>连接建立后</strong>所有数据报文段都把ACK置为1</li>
<li>推送PSH：当收到PSH=1的报文时，就尽快交付接收应用进程，而不再等到整个缓存都填满后再向上交付</li>
<li>复位RST：当RST=1时，表明TCP连接中出现严重差错，必须释放连接，然后重新建立连接。 RST=1还用来咀嚼一个非法的Segment或拒绝打开一个连接。 RST也称为重置位</li>
<li>同步<strong>SYN</strong>：<strong>在连接建立时用来同步序号；当SYN=1而ACK=0时，表明这是一个连接请求报文，对方若同意建立连接，则应在响应报文中使SYN=1，ACK=1</strong>（称为SYNACK）。 因此，SYN=1就表明这是一个连接请求( SYN Segment )或连接接受报文( SYNACK Segment )</li>
<li>终止<strong>FIN</strong>：用来释放一个连接，当FIN=1时，表示此报文段的发送方已经发送完毕，并要求释放连接</li>
<li><strong>窗口</strong>：占2字节，指的是<strong>发送本报文段的一方的接收窗口</strong>（而不是自己的发送窗口 ）。 例如，A是Sender， B是Receiver， A的窗口值作为A让对方设置其发送窗口（ B虽然是Receiver， 但也会向A发送数据 ）的依据；窗口字段明确指出了<strong>从本Sement Header的确认号算起，A目前允许B发送的数据量（以字节为单位）</strong>，窗口值经常动态变化
<ul>
<li>例如，A发送给B一个Segment，确认号是701，窗口字段是1000， 这就是告诉B：“从701算起，我的接收缓存空间还可接收1000Byte数据，你在给我发送数据时，必须考虑到这点”</li>
</ul>
</li>
<li>校验和：占2字节，检验和字段检验的范围包括首部和数据两部分。 在计算校验和是，需要在Header前面加上12Byte的伪首部</li>
<li>紧急指针：占2字节，在URG=1时才有意义，指出本报文段中的紧急数据的字节数</li>
<li>选项：长度可变，最长40Byte。 当没有使用任何选项时， Header长度是20Byte。 最后的填充字段仅仅是为了使整个TCP首部长度是4Byte的整数倍
<ul>
<li>MSS就是选项之一</li>
</ul>
</li>
</ol>
<h2 id="TCP连接管理"><a class="header-anchor" href="#TCP连接管理"></a>TCP连接管理</h2>
<h2 id="TCP连接建立"><a class="header-anchor" href="#TCP连接建立"></a>TCP连接建立</h2>
<p>我们将主动发起连接建立的进程称为client， 被动等待连接建立的进程称为server。 记A为client， B为Server， 连接建立过程为三报文握手：</p>
<ul>
<li>一般将其称作“三次握手”，但严谨地说，TCP连接建立只是“在一次握手中报文交换三次”，因此称为“三报文握手”</li>
<li>注意，<strong>只有SYN和SYNACK报文段会被超时重传， ACK报文段是不会被重传的</strong></li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Transport%20Layer/TCP%203-way%20handshake.png" alt="TCP 3-way handshake"></p>
<p>起初，A和B都为CLOSED状态。在通信开始前，双方都得创建各自的传输控制块（TCB）。B创建完TCB后便进入LISTEN状态，此时准备接收A发来的连接请求。</p>
<h3 id="第一个报文"><a class="header-anchor" href="#第一个报文"></a>第一个报文</h3>
<p>client向server发送连接请求报文段。该报文段没有Data部分, Header中:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SYN=1，ACK=0，seq = client_isn</span><br></pre></td></tr></table></figure>
<p>该Segment称为<strong>SYN Segment</strong></p>
<p>请求发送后，client便进入SYN-SENT状态</p>
<ul>
<li>SYN=1，ACK=0表示该报文段为连接请求报文。</li>
<li><code>client_isn</code>为本次TCP通信的字节流的初始序号， TCP规定：SYN=1的报文段不能有数据部分，但要<strong>消耗掉一个序号</strong></li>
<li><code>client_isn</code>和后文的<code>server_isn</code>可以随机选择，也可以（为了避免网络攻击）使用算法生成</li>
</ul>
<h3 id="第二个报文"><a class="header-anchor" href="#第二个报文"></a>第二个报文</h3>
<p>服务端收到连接请求报文段后，如果同意连接，则会发送一个应答：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SYN=1，ACK=1，seq=server_isn，ack=client_isn + 1</span><br></pre></td></tr></table></figure>
<p>该Segment称为<strong>SYNACK Segment</strong></p>
<p>该应答发送完成后，server便进入SYN-RCVD（同步收到）状态</p>
<ul>
<li>SYN=1，ACK=1表示该segment为连接同意的应答报文</li>
<li>seq=<code>server_isn</code>表示server作为sender时，发送字节流的初始序号. 这个序号也可以是随机选取的</li>
<li>ack=<code>client_isn</code>+1表示服务端希望下一个数据报发送序号从<code>client_isn</code>+1开始的字节</li>
<li>TCP规定: <strong>SYNACK Segment要消耗一个序号，也就是B向A发送的下一个Segment的起始序号是<code>server_isn</code>+1</strong></li>
</ul>
<h3 id="第三个报文"><a class="header-anchor" href="#第三个报文"></a>第三个报文</h3>
<p>当客户端收到连接同意的应答后，还要向服务端发送一个确认报文段，表示：server发来的SYNACK已经成功收到。<br>
该报文段的头部为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ACK=1，seq=client_isn + 1，ack=server_isn+1</span><br></pre></td></tr></table></figure>
<p>该Sement称为<strong>ACK Segment</strong></p>
<p>client发完这个segment后便进入ESTABLISHED状态，server收到这个应答后也进入ESTABLISHED状态，此时连接建立完成</p>
<ul>
<li>SYN = 0， ACK = 1 标识该segment为连接建立确认报文。 由于client发送完这个报文后就处于连接建立状态，因此SYN=0</li>
<li>TCP规定：ACK Segment可以携带数据，<strong>但如果不携带数据则不消耗序号</strong>，此时，<strong>A向B发送的下一个Segment的起始序号仍然是<code>client_isn</code> + 1</strong></li>
</ul>
<hr>
<p><strong>为什么连接建立需要发送第三个报文？</strong></p>
<p>防止失效的连接请求报文段被服务端接收，从而产生错误</p>
<p>考虑如下情况：我们采用两报文握手， A给B发送SYN Segment， 但因该报文丢失而没有收到确认（ SYNACK ），于是A再重传一次SYN Segment。 后来A收到了确认，建立了连接。通信结束后释放连接。 A总共发送了两个报文段，第一个丢失了，第二个正确到达了B，没有“失效的”报文段。这是正常情况。</p>
<p>现在假设一种异常情况， 即A发出的第一个SYN Segment没有丢失，而是迟到了，以致在<strong>连接释放后</strong>才到达B， 这是个<strong>已经失效的Segment</strong>，B收到该SYN Segment后，误以为A又发出了一次新的连接请求，于是就向A发送SYNACK Segment，同意建立连接， <strong>由于这是“两报文握手”， B发送SYNACK后就进入了ESTABLISHED状态</strong>。 但此时A早已进入CLOSED状态， A会直接丢弃这个SYNACK，也不会给B发数据，更不会通知B，B会一直等待下去，持续地浪费其资源。</p>
<hr>
<p><strong>如果第三个报文握手丢失怎么办？</strong></p>
<p>problem：如果第三个报文握手丢失，A处于ESTABLISHED状态，向B发送数据，而B仍然处于SYN_RECV状态，无法响应连接。</p>
<p>solution：B在发送SYNACK后，会根据 TCP的超时重传机制，等待3秒、6秒、12秒后重新发送SYN+ACK包，以便Client重新发送ACK包。</p>
<h2 id="TCP连接释放"><a class="header-anchor" href="#TCP连接释放"></a>TCP连接释放</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Transport%20Layer/TCP%204-way%20wavehand.png" alt="TCP 4-way wavehand"></p>
<p>起初，A和B都为ESTABLISHED状态</p>
<h3 id="第一个报文-2"><a class="header-anchor" href="#第一个报文-2"></a>第一个报文</h3>
<p>若A认为数据发送完成，则它需要向B发送连接释放请求。该Segment只有Header，其中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FIN=1，seq=u</span><br></pre></td></tr></table></figure>
<p>此时，A将进入FIN-WAIT-1状态</p>
<ul>
<li>FIN=1表示该报文段是一个连接释放请求</li>
<li>seq=u，u-1是A向B发送的最后一个字节的序号</li>
<li>TCP规定： FIN 报文段总是会消耗一个序号</li>
</ul>
<h3 id="第二个报文-2"><a class="header-anchor" href="#第二个报文-2"></a>第二个报文</h3>
<p>B收到连接释放请求后，会通知高层进程：<strong>A向B这个方向的连接已经释放</strong>。此时B进入CLOSE-WAIT状态，并向A发送连接释放的应答，Header包含：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ACK=1，seq=v，ack=u+1</span><br></pre></td></tr></table></figure>
<p>A收到该应答，进入FIN-WAIT-2状态，等待B发送连接释放请求。</p>
<ul>
<li>ACK=1：除TCP连接请求和链接释放请求报文段以外，<strong>TCP通信过程中所有数据报的ACK都为</strong>1，表示应答。</li>
<li>seq=v，v-1是B向A发送的最后一个字节的序号。</li>
<li>ack=u+1表示希望收到从第u+1个字节开始的报文段，并且已经成功接收了前u个字节。（因为第一个报文序号为u，且会消耗一个序号，因此ack = u+1）A收到该应答，进入FIN-WAIT-2状态，等待B发送连接释放请求</li>
</ul>
<p>第二次挥手完成后，A到B方向的连接已经释放，B不会再接收数据，A也不会再发送数据。但<strong>B到A方向的连接仍然存在，B可以继续向A发送数据</strong>， 此时连接处于**“半关闭”状态**</p>
<h3 id="第三个报文-2"><a class="header-anchor" href="#第三个报文-2"></a>第三个报文</h3>
<p>当B向A发完所有数据后，向A发送连接释放请求，Header包含：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FIN=1，ACK=1，seq=w，ack=u+1</span><br></pre></td></tr></table></figure>
<p>B然后进入LAST-ACK状态。</p>
<ul>
<li>seq=w： B在半关闭状态可能又发送了一些数据，现在起始序号为w</li>
</ul>
<h3 id="第四个报文"><a class="header-anchor" href="#第四个报文"></a>第四个报文</h3>
<p>A收到释放请求后，向B发送确认应答，Header包含：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FIN=1，ACK=1，seq=w，ack=u+1</span><br></pre></td></tr></table></figure>
<p>此时A进入TIME-WAIT状态，此时连接还没有释放掉，必须经过时间等待计时器( TIME-WAIT timer )设置的时间 2MSL 后，且该时间段内没有B的重发请求的话，A才会进入CLOSED状态，撤销TCB。当B收到确认应答后，也会进入CLOSED状态，撤销TCB。</p>
<ul>
<li>最长报文段寿命MSL( Maximum Segment Lifetime ): 这个值是从工程上考虑的，一般是2min。 因此从A进入TIME-WAIT状态后，最少需要4min才能进入CLOSED</li>
</ul>
<p><strong>为什么A要先进入TIME-WAIT状态，等待时间后才进入CLOSED状态？</strong></p>
<p>为了保证B能收到A的确认应答。<br>
若A发完确认应答后直接进入CLOSED状态，那么如果该应答丢失，B等待超时后就会重新发送连接释放请求，但此时A已经关闭了，不会作出任何响应，因此B永远无法正常关闭。</p>
<h2 id="Example-2"><a class="header-anchor" href="#Example-2"></a>Example</h2>
<h3 id="TCP-Client"><a class="header-anchor" href="#TCP-Client"></a>TCP Client</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">serverName = <span class="string">&#x27;localhost&#x27;</span> <span class="comment"># 指定服务器地址</span></span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line">clientSocket = socket(AF_INET, SOCK_STREAM) <span class="comment"># 建立TCP套接字，使用IPv4协议</span></span><br><span class="line">clientSocket.connect((serverName,serverPort)) <span class="comment"># 向服务器发起连接</span></span><br><span class="line"></span><br><span class="line">sentence = <span class="built_in">input</span>(<span class="string">&#x27;Input lowercase sentence:&#x27;</span>).encode() <span class="comment"># 用户输入信息，并编码为bytes以便发送</span></span><br><span class="line">clientSocket.send(sentence) <span class="comment"># 将信息发送到服务器</span></span><br><span class="line">modifiedSentence = clientSocket.recvfrom(<span class="number">1024</span>) <span class="comment"># 从服务器接收信息</span></span><br><span class="line"><span class="built_in">print</span>(modifiedSentence[<span class="number">0</span>].decode()) <span class="comment"># 显示信息</span></span><br><span class="line">clientSocket.close() <span class="comment"># 关闭套接字</span></span><br></pre></td></tr></table></figure>
<h3 id="TCP-Server"><a class="header-anchor" href="#TCP-Server"></a>TCP Server</h3>
<p>和Servlet类似，TCP Server实际上会先打开一个&quot;欢迎套接字&quot;来等待client连接，当client请求请求到来后， server通过“欢迎套接字”创建一个新的连接套接字(<code>serverSocket.accept()</code>)，由后者进行与该client的连接</p>
<ul>
<li>Client Socket与Server的Connection Socket(而不是欢迎套接字)建立了TCP连接</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line">serverSocket = socket(AF_INET, SOCK_STREAM) <span class="comment"># 创建TCP欢迎套接字，使用IPv4协议</span></span><br><span class="line">serverSocket.bind((<span class="string">&#x27;&#x27;</span>,serverPort)) <span class="comment"># 将TCP欢迎套接字绑定到指定端口</span></span><br><span class="line">serverSocket.listen(<span class="number">1</span>) <span class="comment"># 最大连接数为1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The server in ready to receive&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	connectionSocket, addr = serverSocket.accept() <span class="comment"># 接收到客户连接请求后，建立新的TCP连接套接字</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;Accept new connection from %s:%s...&#x27;</span> % addr)</span><br><span class="line">	sentence = connectionSocket.recv(<span class="number">1024</span>) <span class="comment"># 获取客户发送的字符串</span></span><br><span class="line">	capitalizedSentence = sentence.upper() <span class="comment"># 将字符串改为大写</span></span><br><span class="line">	connectionSocket.send(capitalizedSentence) <span class="comment"># 向用户发送修改后的字符串</span></span><br><span class="line">	connectionSocket.close() <span class="comment"># 关闭TCP连接套接字</span></span><br></pre></td></tr></table></figure>
<h2 id="SYN-Flood-Attack"><a class="header-anchor" href="#SYN-Flood-Attack"></a>SYN Flood Attack</h2>
<p>在TCP三报文握手中，server为了响应一个SYN，会分配一些资源（初始化一些变量和缓存），然后发送一个SYNACK， 并等待client的ACK Segment。 如果client不发送ACK， 最终server将终止该半开连接并回收资源</p>
<p>SYN洪泛攻击( SYN flood attack ): 是一种经典DoS攻击, 在这种攻击中，攻击者发送大量的TCP SYN，而不对返回的SYNACK进行ACK。 随着大量SYN的到来，server会不停地新建半开连接并分配资源，导致server的资源耗尽</p>
<p>流行的解决方法称为SYN cookie， 过程为：</p>
<ol>
<li>
<p>当服务器接收到一个SYN报文段时，其并不知道该报文段来自一个合法用户还是要进行SYN洪泛攻击的攻击者，因此服务器不会为该报文段生成一个半开的连接（即<strong>不会分配资</strong>源） 。 服务器返回的SYNACK中的<code>server_isn</code>由hash生成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server_isn = hash(srcIP,srcPort,dstIP,dstPort, magic)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>magic</code>是只有server知道的一个秘密数字</li>
<li>server不会记住该<code>server_isn</code>及其相关的任何信息</li>
</ul>
</li>
<li>
<p>如果client是合法的，则它将返回一个ACK Segment， 其中<code>ack = server_isn+1</code>， server收到该报文后只要根据IP、端口和自己的<code>magic</code>重新计算<code>new_server_isn</code>，并比较:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if new_server_isn == ack - 1</span><br></pre></td></tr></table></figure>
<p>判定该client是否合法。  如果合法，server会生成一个全开连接</p>
</li>
<li>
<p>如果客户没有返回一个ACK报文段，则说明之前的SYN报文段属于要进行SYN洪泛攻击的攻击者，但其并没有对服务器造成任何危害，因为服务器没有为它分配任何资源</p>
</li>
</ol>
<h1 id="可靠传输"><a class="header-anchor" href="#可靠传输"></a>可靠传输</h1>
<p>理想的传输条件：</p>
<ol>
<li>传输信道不产生差错</li>
<li>不管发送方以多快的速度发送数据，接收方总是来得及处理收到的数据</li>
</ol>
<p>在以上网络条件( 也可以说是<strong>网络层条件</strong> )下，不需要任何措施就可以实现可靠传输。 然而实际的网络都不具备以上理想条件（IP层就是不可靠的），因此要采用一些可靠传输协议来确保可靠传输。</p>
<p>基本上，可靠传输要用到以下机制：</p>
<ul>
<li>计时器（超时重传）</li>
<li>序号</li>
</ul>
<h2 id="可靠传输协议"><a class="header-anchor" href="#可靠传输协议"></a>可靠传输协议</h2>
<p>我们这里讨论抽象的可靠传输协议，其实现不一定局限于应用层。 我们把传输的数据都称为分组，而不考虑数据实际上是在哪一层发送的。</p>
<h3 id="停止等待协议"><a class="header-anchor" href="#停止等待协议"></a>停止等待协议</h3>
<p>对于全双工通信，双方既是Sender又是Receiver。 为了简化问题，我们仅考虑A为Sender， B为Receiver的情况。</p>
<ul>
<li>停止等待： 每发送完一个分组就停止发送，等待对方的确认，在收到确认后再发送下一个分组</li>
</ul>
<h4 id="无差错情况"><a class="header-anchor" href="#无差错情况"></a>无差错情况</h4>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Transport%20Layer/stop-wait%20protocal%20without%20error.png" alt="stop-wait protocal without error"></p>
<h4 id="出现差错"><a class="header-anchor" href="#出现差错"></a>出现差错</h4>
<p>以下是传输过程中出现差错的情况：</p>
<ol>
<li>B在接收M1时检测出差错，就丢弃M1，什么也不做（不通知A收到有差错的分组）
<ul>
<li>B当然可以在检测出差错后给A发送错误报文，但这种方法很复杂，实践中一般不采用</li>
</ul>
</li>
<li>M1在传输过程中就丢失了，B什么也不知道</li>
</ol>
<p>在这两种情况下，B都不会发送任何信息。 而可靠传输协议规定，如果A超过一段时间依然没有收到确认，就会重传前面发送过的分组，这就是<strong>超时重传</strong>。</p>
<ul>
<li>超时重传需要在每发送一个分组后设置超时计时器，如果在计时器在到期之前收到了确认，就重置计时器</li>
</ul>
<p>注意:</p>
<ol>
<li>A发送完一个分组后，必须暂时保留已发送分组的副本，只有在收到相应确认后才删除</li>
<li>分组和确认都需要编号，才能明确哪个分组收到确认，哪个没收到</li>
<li>超时计时器的重传时间应比数据在分组传输的平均往返时间更长一些</li>
</ol>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Transport%20Layer/stop-wait%20protocal%20RTO.png" alt="stop-wait protocal RTO"></p>
<h4 id="确认丢失和确认迟到"><a class="header-anchor" href="#确认丢失和确认迟到"></a>确认丢失和确认迟到</h4>
<p>假设M1的传输正常，但B对M1的确认丢失了，A在没有收到确认后会超时重传M1，B会：</p>
<ol>
<li>丢弃这么重复的分组</li>
<li>向A发送确认</li>
</ol>
<p>​        <img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Transport%20Layer/stop-wait%20protocal%20with%20SYNACK%20loss.png" alt="stop-wait protocal with SYNACK loss"></p>
<p>​</p>
<p>还有一种情况，B对M1对确认没有丢失，而是迟到了。 A超时重传后，B会收到重复的M1，并将其丢弃，并重传确认分组， A会受=收到该重复的确认分组。，并丢弃该确认:</p>
<p>​        <img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Transport%20Layer/stop-wait%20protocal%20with%20SYNACK%20late.png" alt="stop-wait protocal with SYNACK late"></p>
<h4 id="信道利用率"><a class="header-anchor" href="#信道利用率"></a>信道利用率</h4>
<p>上述的停止等待协议使用了超时重传，因此也被称为ARQ( Automatic Repeat reQuest )， ARQ的缺点是大部分的时间都浪费在等待确认上面，信道利用率低</p>
<p>为了提高信道利用率，可以用<em>流水线传输</em>来取代<em>停止等待传输</em>，流水线传输协议包括了连续ARQ协议和滑动窗口协议， 其中滑动窗口协议比较复杂，被TCP所采用，放到<em>TCP可靠传输的实现</em>一节</p>
<ul>
<li>“滑动窗口协议”一般指TCP所采用的滑动窗口协议， 尽管连续ARQ协议也采用了滑动窗口</li>
</ul>
<h3 id="连续ARQ协议"><a class="header-anchor" href="#连续ARQ协议"></a>连续ARQ协议</h3>
<p>发送方维持<strong>发送窗口</strong>，位于发送窗口内的分组都可以连续发送出去，而不需要等待对方确认，这样信道利用率就提高了</p>
<p>工作原理：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Transport%20Layer/ARQ%20sliding%20window.png" alt="ARQ sliding window"></p>
<p>ARQ规定，发送方每收到一个确认，就把发送窗口滑动一个分组位置，接收方采用<strong>累积确认</strong>方式，在收到几个分组后，对<strong>按序到达的最后一个分组发送确认</strong></p>
<ul>
<li>优点：容易实现，确认丢失也不必重传</li>
<li>缺点：不能向发送方反映出接收方已经正确收到的所有分组信息
<ul>
<li>例如，若Sennder发送了前五个分组，而中间的第三个分组丢失了，这时接收方只能对前两个分组发出确认。 Sender无法知道后面三个分组的下落，只能把后面三个分组再重传一次，这就叫做 <strong>Go-back-N</strong>. 表示需要再退回来重传已发送过的N个分组。 可见当网络质量不好时，连续ARQ协议的效率很低。</li>
</ul>
</li>
</ul>
<h2 id="TCP可靠传输的实现"><a class="header-anchor" href="#TCP可靠传输的实现"></a>TCP可靠传输的实现</h2>
<p>我们假定数据传输只在一个方向进行，即A为Sender， B为Receiver</p>
<h3 id="滑动窗口"><a class="header-anchor" href="#滑动窗口"></a>滑动窗口</h3>
<p>TCP滑动窗口<strong>以字节为单位</strong>。 假设A收到了B发来的ACK Segment，其中窗口是20Byte，确认号是31（表明B期望收到的下一个序号是31），A根据B的报文构造自己的发送窗口：</p>
<ul>
<li>之前提到了，除了连接请求和连接释放请求, TCP通信过程中的所有Segment均含有<code>ACK=1</code>,这里是传输数据的Segment，也不例外</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Transport%20Layer/TCP%20sliding%20window.png" alt="TCP sliding window"></p>
<ul>
<li>
<p>发送窗口表示：<strong>在没有收到B的确认时，A可以连续把窗口内的数据都发送出去</strong>。 凡是已发送的数据，在未收到确认之前必须暂时保留，以便在超时重传时使用</p>
</li>
<li>
<p>发送窗口中的序号表示允许发送的序号，窗口越大，发送方就可以在收到对方确认前连续发送更多的数据，因此可能获得更高的传输效率。</p>
<ul>
<li>发送方的发送窗口大小一定不能超过接收方的接受窗口(这里是20)</li>
</ul>
</li>
<li>
<p>发送窗口的后沿的后面部分表示：已发送且已经收到了确认的序号（显然这部分不需要保留）。 前沿的前面部分部分表示：不允许发送的序号。 发送窗口的位置由前沿和后沿决定</p>
</li>
<li>
<p>后沿变化的情况有两种：</p>
<ol>
<li>不动（没有收到新的确认）</li>
<li>前移（收到了新的确认）
<ul>
<li>注： 由于不能撤销已收到的确认，因此后沿不能向后移动</li>
</ul>
</li>
</ol>
</li>
<li>
<p>前沿变化的情况有两种：</p>
<ol>
<li>
<p>前移， 这是一般情况</p>
</li>
<li>
<p>不变，这包含两种情况：</p>
<ol>
<li>没有收到新的确认，且对方通知的窗口大小也不变</li>
<li>收到了新的确认，但对方通知的窗口缩小了，使得前沿正好不懂</li>
</ol>
<ul>
<li>注意，发送窗口前沿不能向后移动，虽然实践上可以，但TCP标准强烈不建议这样做</li>
</ul>
</li>
</ol>
</li>
<li>
<p>注意，A的发送窗口是根据B的接受窗口设置的，此外还要考虑到网络情况和拥塞控制等等，因此A的发送窗口不一定和B的接受窗口一样大</p>
</li>
</ul>
<h3 id="滑动窗口与缓存"><a class="header-anchor" href="#滑动窗口与缓存"></a>滑动窗口与缓存</h3>
<p>TCP的缓存和窗口的关系：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Transport%20Layer/TCP%20cache%20and%20sliding%20window.png" alt="TCP cache and sliding window"></p>
<p>发送缓存存放：</p>
<ul>
<li>
<p>发送应用程序发送给发送方TCP准备发送的数据</p>
</li>
<li>
<p>TCP已发送出但尚未收到确认的数据</p>
</li>
</ul>
<p>发送窗口只是发送缓存的一部分，已被确认的数据应当从发送缓存中删除，因此发送缓存和发送窗口的后沿是重合的。 发送方进程最后写入发送缓存的字节减去最后被确认的字节，就是还保留在<strong>发送缓存</strong>中的被写入的字节数。 <u>这些（发送缓存中的）字节在发送窗口内的部分，可以被一次性发送</u></p>
<p>接收缓存存放：</p>
<ul>
<li>
<p>按序到达的、但尚未被接受应用程序读取的数据</p>
</li>
<li>
<p>未按序到达的数据</p>
</li>
</ul>
<h3 id="超时重传时间的选择"><a class="header-anchor" href="#超时重传时间的选择"></a>超时重传时间的选择</h3>
<p>TCP连接建立时， 发送方如果在规定时间内没有收到确认， 就会超时重传已发送的报文，。为了得到标准的超时重传时间， 我们定义:</p>
<ul>
<li>
<p>RTT: 报文段的往返时间， 注意，每个报文的RTT都不一样</p>
</li>
<li>
<p>RTTs：报文段的加权平均往返时间， 's'表示Smoothed， 因为使用了加权平均，所以得到的结果更平滑, 算法为:<br>
$$<br>
\mathrm{新的RTT_S} = (1 - \alpha) \times (\mathrm{旧的RTT_S}) + \alpha \times(\mathrm{RTT_S} - \mathrm{新的RTT样本})<br>
$$</p>
<ul>
<li>$\alpha$一般为0.125</li>
</ul>
</li>
<li>
<p>$\mathrm{RTT_D}$: RTT的偏差的加权平均值， 它与RTTs和新的RTT样本之差有关。 RFC规定，在第一次测量时，$\mathrm{RTT_D}$为测量到的RTT样本值的一半，在以后的测量中，则是用下式计算$\mathrm{RTT_D}$:<br>
$$<br>
\mathrm{新的RTT_D} = (1 - \beta) \times (\mathrm{旧的RTT_D}) + \beta \times|\mathrm{RTT_S} - \mathrm{新的RTT样本}|<br>
$$</p>
<ul>
<li>$\beta$一般为0.25</li>
</ul>
</li>
<li>
<p>RTO( Retransmission Time-Out ): <strong>超时重传时间</strong>，算法为<br>
$$<br>
\mathrm{RTO}=\mathrm{RTT_S}+4*\mathrm{RTT_D}<br>
$$</p>
</li>
</ul>
<p>RTT的定义是“报文往返时间”， 那么如何判定收到的确认报文是对第一次发送的Segment的曲确认，还是对之后超时重传的Segment的确认？</p>
<p>解决方案之一是Karn算法：</p>
<p><em>在计算加权平均RTTs时，只要报文段重传了，就不采用其往返时间样本，这样得出的加权平均RTTs和RTO就较准确</em></p>
<p>然而Karn算法也不太合理（自行百度），实践中一般采用改进的Karn算法。 总之，RTO的选择是很复杂的。</p>
<h3 id="选择确认SACK"><a class="header-anchor" href="#选择确认SACK"></a>选择确认SACK</h3>
<p>如果收到的报文段无差错，只是中间缺少了一些序号。 选择确认( Selective ACK, aka SACK ) 可以让发送方只传送缺少的数据，而不是重传所有数据</p>
<p>示例：</p>
<p>假设TCP的接收方收到了序号1 ~ 1000, 1501 ~ 3000, 3501 ~ 4500, 其余序号都没有收到，如果所有序号的范围都在接收窗口内，则接收方会收下这些数据，并把已收到序号的“边界”告诉对方，让对方不要再重传这些数据。 对于本例，“边界”就是$[1,1001)$,$[1501,3001)$, $[3501, 4501)$， 注意边界的右界是序号的最右端 + 1</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Transport%20Layer/TCP%20SACK.png" alt="TCP SACK"></p>
<p>显然，TCP 首部中没有哪个字段是用来存放边界的， 因此边界信息都存放在首部“选项”字段。 由于首部选项最多只有40Byte， 而每个字节块有两个边界， 每个边界4Byte（因为序号用4byte表示）， 所以一个字节块就要用8Byte。 选项中还需要指明“启用SACK”（1Byte）和“SACK选项占用的字节数”（1Byte）， 对于n个字节块，一共会在选项字段占用：<br>
$$<br>
8n + 2<br>
$$<br>
字节， 很容易就超过了选项字段40Byte的上限， 再加上SACK文档没有对发送方怎样响应SACK做规定， 因此SACK没有被广泛采用。 一般的实现还是重传所有数据块。</p>
<p>​</p>
<h1 id="TCP-Flow-Control"><a class="header-anchor" href="#TCP-Flow-Control"></a>TCP Flow Control</h1>
<ul>
<li>流量控制( Flow Control ):  让发送方发送速率不要太快，使接收方来得及接收。 这是<strong>端到端</strong>通信量的控制( 接收端控制发送端 )，</li>
</ul>
<h2 id="利用滑动窗口实现流量控制"><a class="header-anchor" href="#利用滑动窗口实现流量控制"></a>利用滑动窗口实现流量控制</h2>
<p>TCP利用滑动窗口实现流量控制，示例：</p>
<p>我们假设A向B发送数据，且：</p>
<ul>
<li>开始时B告诉A： “我的接受窗口rwnd=400”( rwnd = received window )</li>
<li>每个报文段长100字节</li>
<li>数据报文段的序号初始值为1</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Transport%20Layer/TCP%20flow%20control%20with%20sliding%20window.png" alt="TCP flow control with sliding window"></p>
<p>我们看到，上图中B一共进行了三次流量控制。 第一次把窗口减小到rwnd = 300； 第二次把窗口减小到rwnd =100；第三次把窗口减小到rwnd = 0， 即不允许发送方再发送数据了，该状态持续到B重新发出新的窗口值为止。</p>
<ul>
<li>这三个报文段的ACK均为1， 仅当ACK = 1时， 确认号字段才有意义</li>
<li>显然，发送方的发送窗口不能大于接收方给出的接收窗口( rwnd )</li>
</ul>
<p>假设B在发送rwnd = 0， 其接收窗口又有了一些空间， 然后B向A发送了rwnd = 400的报文段，但是这个报文段丢失了， 则A会一直等待B发送的非零窗口的报文段， B也在等待A传来的数据，形成死锁。</p>
<ul>
<li>注意，B如果不继续收到A的报文段，自己是不会再次主动通知A的 （ 因为“通知”是ACK ， 而ACK报文段不会被重传）</li>
</ul>
<p>为此，需要对TCP连接设置<strong>持续计时器</strong>：只要TCP连接的一方收到对方的零窗口通知，就启动持续计时器，若计时器到期，就发送一个零窗口<strong>探测报文段</strong>，而对方就在确认这个报文段时给出了现在的窗口值，若窗口值仍是零，那么收到报文的一方就重新设置持续计时器，若不是零，那么死锁就被打破</p>
<h2 id="TCP的传输效率"><a class="header-anchor" href="#TCP的传输效率"></a>TCP的传输效率</h2>
<p>进程把数据传送到TCP发送缓存后，就由TCP来控制数据的发送。 TCP需要控制报文的发送时机，来得到最大的数据传输效率。 目前的TCP实现中广泛采用Nagle算法</p>
<ul>
<li>Nagle算法：若进程要把数据逐个字节地送到TCP发送缓存，则发送方就把第一个数据字节先发送出去，把后面到达的数据字节都缓存起来。当发送方收到对第一个数据字符的确认后，再把发送缓存中的所有数据组装成一个报文发送出去，同时继续对后到达的数据进行缓存。只有在收到对前一个报文段的确认后才继续发送下一个报文段</li>
</ul>
<h1 id="TCP-Congestion-Control"><a class="header-anchor" href="#TCP-Congestion-Control"></a>TCP Congestion Control</h1>
<ul>
<li>拥塞( congestion ): 网络中对资源的需求 &gt; 可用资源</li>
<li>拥塞控制( congestion control ): 防止过多的数据注入到网络中，使网络中的路由器或链路不致过载。 拥塞控制是一个<strong>全局的</strong>过程，面向整个网络</li>
</ul>
<h2 id="拥塞控制的原理"><a class="header-anchor" href="#拥塞控制的原理"></a>拥塞控制的原理</h2>
<p>拥塞控制可分为开环控制和闭环控制</p>
<ul>
<li>开环控制：在设计网络时事先将有关发生拥塞的因素考虑周到，力求网络在工作时不发生拥塞</li>
<li>闭环控制：基于反馈回路概念；检测网络系统以便检测到拥塞在何时、何处发生；把拥塞发生的信息传送到可采取行动的地方；调整网络系统的运行以解决出现的问题</li>
<li>检测网络拥塞的指标：
<ul>
<li>由于缺少缓存空间而被丢弃的分组的百分数</li>
<li>平均队列长度</li>
<li>超时重传分组数</li>
<li>平均分组时延</li>
</ul>
</li>
</ul>
<h2 id="TCP拥塞控制的方法"><a class="header-anchor" href="#TCP拥塞控制的方法"></a>TCP拥塞控制的方法</h2>
<p>TCP的拥塞控制方法有四种：</p>
<ol>
<li>慢开始</li>
<li>拥塞避免</li>
<li>快重传</li>
<li>快恢复</li>
</ol>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Computer Networking</tag>
      </tags>
  </entry>
  <entry>
    <title>Application Layer</title>
    <url>/2022/09/26/Computer%20Networking-Application%20Layer/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li><strong>DNS</strong></li>
<li><strong>P2P</strong></li>
<li><strong>文件传送协议</strong></li>
<li><strong>TELNET</strong></li>
<li><strong>万维网</strong></li>
<li><strong>Email</strong></li>
<li><strong>DHCP</strong></li>
</ul>
<span id="more"></span>
<h1 id="域名系统DNS"><a class="header-anchor" href="#域名系统DNS"></a>域名系统DNS</h1>
<p>port：53</p>
<h2 id="概述"><a class="header-anchor" href="#概述"></a>概述</h2>
<ul>
<li>把互联网上的主机名字转换为IP地址</li>
<li>DNS被设计为一个联机分布式数据库系统， 并采用CS模式。 DNS使大部分名字都在本地进行<strong>解析（resolve）</strong>,  仅少量解析需要在互联网上通信。
<ul>
<li>由于是分布式系统，单个计算机的故障不会妨碍整个DNS系统的运行</li>
</ul>
</li>
<li>解析是通过<strong>域名服务器程序</strong>， 而运行它的机器称为<strong>域名服务器</strong></li>
<li>解析过程
<ol>
<li>当某一个应用进程需要把主机名解析为IP地址时， 它就调用<strong>解析程序（ resolver）</strong>， 并成为DNS的一个客户， 把带解析的域名放在DNS请求报文中， 以<code>UDP用户数据报</code>的方式发给<code>本地域名服务器</code>( 使用UDP是为了减小开销 )</li>
<li>本地域名服务器在查找域名(递归, 迭代, 详见下文) 后, 把对应的IP地址放在回答报文中返回</li>
<li>应用进程获得目的主机的IP地址后即可进行通讯</li>
</ol>
</li>
</ul>
<h2 id="其他服务"><a class="header-anchor" href="#其他服务"></a>其他服务</h2>
<ul>
<li>主机别名
<ul>
<li>原名称为“规范主机名”</li>
</ul>
</li>
<li>邮件服务器别名</li>
<li>负载分配：将一个IP地址集合（即服务器集合）映射到一个规范主机名。 每次client向集合中的一个元素请求时，DNS以整个集合进行响应（每次返回集合中的一个元素，而整个集合的次序在不断变化，这样就实现了负载分配）</li>
</ul>
<h2 id="互联网的域名结构"><a class="header-anchor" href="#互联网的域名结构"></a>互联网的域名结构</h2>
<ul>
<li>
<p>任何连接在互联网的主机和路由器, 都有一个唯一的<strong>层次结构的名字</strong>, 即<strong>域名(Domain name )</strong>, <strong>域</strong>是一个可被管理的划分. 域可以被划分为子域, 再划分为子域的子域....</p>
</li>
<li>
<p>每个域名都由一个 <em>label</em> 序列组成，各<em>label</em>间用 *.*隔开</p>
<p>如： 三级域名 . 二级域名 . 顶级域名</p>
</li>
<li>
<p><strong>不区分大小写</strong></p>
</li>
<li>
<p>只是个逻辑概念</p>
</li>
</ul>
<h2 id="域名服务器"><a class="header-anchor" href="#域名服务器"></a>域名服务器</h2>
<ul>
<li>
<p>一个服务器管辖的范围叫做<strong>区(zone)</strong>. 每个区内的所有节点是连通的. 每个区设置相应的<strong>权限域名服务器( authoritative name server )</strong>, 用来保存该<u>区中所有主机的域名到IP地址的映射</u></p>
</li>
<li>
<p>DNS查询报文用<strong>UDP</strong></p>
</li>
<li>
<p>DNS服务器的管辖范围以<strong>区</strong>为单位, 区小于等于域, 是域的子集</p>
<ul>
<li><a href="http://xn--abc-q33er8o2xc8t5c.xn--comabc-dn7igl21d6wvi0bxbv127i.com">比如域名abc.com可以只设一个区abc.com</a>, 这样，区和域就是一回事（如左图）； 但域名abc.com也可以划分两个区：<a href="http://abc.com">abc.com</a> 和 <a href="http://y.abc.com">y.abc.com</a>  这两个区都隶属于域 <a href="http://abc.com">abc.com</a> ，都各自设置了相应的权限域名服务器（如又图）</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82/DNS%E5%9F%9F%E7%9A%84%E5%88%86%E5%8C%BA.png" alt=""></p>
</li>
</ul>
<h2 id="DNS服务器层次"><a class="header-anchor" href="#DNS服务器层次"></a>DNS服务器层次</h2>
<ul>
<li>DNS服务器按层次安排, 分四种
<ol>
<li>根域名服务器( root name servevr )
<ul>
<li>最高层次</li>
<li>直到所有的<code>顶级域名服务器</code>的域名和IP地址</li>
<li><code>本地域名服务器</code>自己若无法解析,则首先求助于<code>根域名服务器</code></li>
<li>**任播(anycast)**技术: 找到离DNS客户最近的一个<code>根域名服务器</code></li>
</ul>
</li>
<li>顶级域名服务器( top level domain name server TLD服务器 )</li>
<li>权限域名服务器
<ul>
<li>负责一个区的域名服务器。当它不能给出最后的查询回答时，就会告诉发出查询请求的DNS客户，下一步应该找哪一个权限域名服务器</li>
</ul>
</li>
<li>本地域名服务器（ local name server ） ( 默认域名服务器 )
<ul>
<li>当一个主机发出DNS查询请求时，这个查询请求报文就发给LNS</li>
<li>也称为“默认域名服务器”</li>
<li>当所要查询的主机也属于同一个本地ISP时， 该本地域名服务器就能立即将所查询的主机名转换为IP地址</li>
</ul>
</li>
</ol>
</li>
<li>域名解析过程：
<ul>
<li>主机向本地域名服务器<strong>递归查询（ recursive query ）</strong>
<ul>
<li>本地域名服务器以DNS客户的身份，向其它根域名服务器发送查询报文</li>
<li>因此递归查询的返回结果要么是要查的IP地址，要么是报错，表示没查到</li>
</ul>
</li>
<li>本地域名服务器向<strong>根</strong>域名服务器<strong>迭代查询（iterative query）</strong>
<ul>
<li>让LNS去查，根域名服务器通常把自己知道的顶级域名服务器的IP地址告诉LNS,让LNS再向顶级域名服务器查询。</li>
<li>顶级域名服务器收到LNS的查询请求后，要么给出所查询的IP地址，要么<u>告诉LNS下一步应当向哪个权限域名服务器进行查询</u></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="DNS缓存"><a class="header-anchor" href="#DNS缓存"></a>DNS缓存</h2>
<ul>
<li>DNS广泛使用<strong>高速缓存</strong>
<ul>
<li>为维护缓存中的内容正确，还应给每项内容设一个计时器</li>
<li>主机也需要（DNS的）高速缓存，主机启动时从LNS中下载名字和地址的全部数据库，并且维护（DNS）存放自己最近使用的域名的高速缓存</li>
</ul>
</li>
</ul>
<h2 id="DNS记录和报文"><a class="header-anchor" href="#DNS记录和报文"></a>DNS记录和报文</h2>
<ul>
<li>
<p><strong>资源记录</strong>Resource Record: 所有DNS服务器共同实现了DNS分布式数据库，其条目就是资源记录</p>
<p><code>(Name, Value,Type,TTL)</code></p>
</li>
<li>
<p>Name和Value值取决于Type:</p>
<ul>
<li><code>Type = A</code>: Name = 主机名，  Value = 主机名对应的IP地址</li>
<li><code>Type = NS</code>：Name = 域名，Value = 知道如何获得该域中IP地址的权威DNS服务器的主机名
<ul>
<li>与<code>Type=A</code>记录结合，将权限DNS的主机名进一步映射到权限域名服务器的IP地址，方便<strong>迭代查询</strong></li>
</ul>
</li>
<li><code>Type=CNAME</code>: Value = 别名为Name的主机的规范主机名</li>
<li><code>Type = MX</code>： Value = 别名为Name的邮件服务器的规范主机名
<ul>
<li>使用<code>MX</code>记录使得邮件服务器可以和其他服务器使用相同的别名，DNS client得到别名后，只需请求一条<code>MX</code>记录，就能得到规范主机名</li>
</ul>
</li>
</ul>
</li>
<li>
<p>权威域名服务器包含其区内主机的<code>Type A</code>记录，非权威域名服务器包含的是包含主机名的域的<code>Type = NS</code>记录和<code>Type=A</code>记录，后者提供了<code>NS</code>记录对应的权限域名服务器的IP地址</p>
<ul>
<li>例子：假如<code>edu TLD</code>服务器不是主机<code>gaia.cs.umass.edu</code>的权限域名服务器，则该服务器将包含：
<ul>
<li>一条包括 主机<code>cs.umass.edu</code>的域记录，如<code>（umass.edu, dns.umass.edu, NS）</code></li>
<li>一条A记录，与NS记录配套： <code>(dns.umass.edu, 128.119.40.111,A)</code></li>
<li>这样就实现了迭代查询</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Tool： <code>nslookup</code></p>
</li>
<li>
<p>DNS报文： 略</p>
</li>
<li>
<p>向DNS数据库中插入记录： 要到注册登记机构<code>register</code> ,它负责验证域名的唯一性，将该域名输入DNS DataBase.  步骤为：</p>
<ol>
<li>
<p>假设要开设网站，注册域名<code> LYK-love.cn</code>,你需要提交权威DNS服务器的域名和地址， 假设：权威DNS服务器名为<code>dns.LYK-love.cn</code>, 其IP地址为<code>212.212.212.1</code></p>
</li>
<li>
<p>对每个权威DNS。该<code>register</code>确保将一个<code>NS</code>和<code>A</code>记录输入<code>TLD cn</code>服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">( LYK-love.cn, dns.LYK-love.cn, NS )</span><br><span class="line">( dns.LYK-love.cn, 212.212.212.1,A )</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>还可以输入<code>MX</code>记录，与网站使用相同的别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">( LYK-love.cn, mail.LYK-love.cn, MX ) //别名使用LYK-love.cn</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<h1 id="P2P应用"><a class="header-anchor" href="#P2P应用"></a>P2P应用</h1>
<ul>
<li>CS体系依赖于服务器，P2P减少了对中心化的依赖</li>
</ul>
<h2 id="P2P文件分发"><a class="header-anchor" href="#P2P文件分发"></a>P2P文件分发</h2>
<ul>
<li>考虑一个应用，它从单一server向大量client（称为对等方<code>peer</code>）分发一个文件
<ul>
<li>CS：server负担大</li>
<li>P2P: 每个对等方能重新分发它所拥有的该文件的任何部分</li>
</ul>
</li>
<li>最流行的P2P文件共享协议：<code>BitTorrent</code></li>
</ul>
<h3 id="P2P体系的扩展性"><a class="header-anchor" href="#P2P体系的扩展性"></a>P2P体系的扩展性</h3>
<ul>
<li>
<p>定义：</p>
<ul>
<li>$u_s$: server接入链路的上载速率</li>
<li>$u_i$:第$i$对等方接入链路的上载速率</li>
<li>$d_i$: 第$i$对等方接入链路的下载速率</li>
<li>$F$: 被分发的文件大小（bit）</li>
<li>$N$: 要获得该文件副本的对等方的数量</li>
<li>$D$: <strong>分发时间</strong>, 所有 $N$ 个对等方得到该文件的副本所需的时间</li>
<li>假设网络具有足够的带宽</li>
</ul>
</li>
<li>
<p>CS模式的分发时间(下界)：<br>
$$<br>
D_{cs} \geq \max{\frac{NF}{u_s}, \frac{F}{d_{\min}} }<br>
$$</p>
<ul>
<li>server必须向 $N$个对等方的每个传输该文件的一个副本。因此server必须传输$NF$ bit， 因为其上载速率是<code>u_s</code>, 分发时间必定至少为$\frac{NF}{u_s}$</li>
<li>令$d_{min}$表示具有最小下载速率的对等方的下载速率，后者获得该文件的 所有<code>F</code> bit的时间最少为$ \frac{F}{d_{\min}}$</li>
</ul>
</li>
<li>
<p>P2P模式的分发时间（下界）：<br>
$$<br>
D_{P2P} \geq \max{ \frac{F}{u_s}, \frac{F}{d_{\min}}, \frac{NF}{u_s + \sum\limits_{i=1}^{N}{u_i} } }<br>
$$</p>
<ul>
<li>这里只是最小分发时间的简单表示式</li>
<li>server必须向至少发送该文件的每个bit一次， $\frac{F}{u_s}$</li>
<li>$ \frac{F}{d_{\min}}$与CS模式相同</li>
<li>系统整体上载能力 $u_{total} = u_s + u_1 + u_2 + \dots + u_N$, 系统必须向这$N$个对等方的每个上载$F$比特，  因此总共上载$NF$ bit, 这不能以快于$u_{total}$的速率完成，因此，分发时间也至少是$\frac{NF}{u_s + \sum\limits_{i=1}^{N}{u_i} }$</li>
</ul>
</li>
<li>
<p>比较两种模式的最小分发时间关于 $N$的函数，发现P2P的最小分发时间更小</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82/P2P%E5%92%8CCS%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%9C%80%E5%B0%8F%E5%88%86%E5%8F%91%E6%97%B6%E9%97%B4%E5%AF%B9%E6%AF%94.png" alt=""></p>
</li>
</ul>
<h3 id="BitTorrent"><a class="header-anchor" href="#BitTorrent"></a>BitTorrent</h3>
<ul>
<li>洪流 <code>torrent</code>:   参与一个特定文件分发的所有对等方的集合</li>
<li>块 <code>chunk</code>：在一个洪流中的对等方彼此下载等长度的文件<em>块</em>
<ul>
<li>256KB</li>
</ul>
</li>
<li>任何对等方可能在任何时候加入或离开洪流</li>
<li>追踪器<code> tracker</code>:   每个洪流一个，用于追踪洪流中的对等方
<ul>
<li>每当对等方加入一个洪流，就向其追踪器<code>register</code>自己，并周期性通知追踪器自己仍在该洪流中</li>
</ul>
</li>
<li>workflow：
<ol>
<li>Alice 加入洪流，追踪器随机从对等方的集合中选一个子集（e.g. 50 个 ），并将它们的IP地址发给Alice</li>
<li>Alice持有这张列表，试图与表上所有对等方建立TCP连接</li>
<li>所有与Alice成功建立连接的对等方称为“邻近对等方”（  e.g. $L$个 ）
<ul>
<li>由于用户可随时加入、离开洪流，因此邻近对等方集合是动态的</li>
</ul>
</li>
<li>在任何给定的时间，每个对等方将具有来自该文件的的块子集，Alice周期性地询问每个邻近对等方它们所具有的块列表，得到$L$个块列表，然后对她还没有的块发出请求
<ul>
<li>请求哪些块？
<ul>
<li>最稀缺优先（<code>rarest  first</code>）： （在Alice没有的块中）请求在邻居中副本数量最少的块</li>
</ul>
</li>
<li>向哪些向她请求的块中发送？
<ul>
<li>“一报还一报”（<code>tit for tat</code>）: Alice 根据当前能够以<em>最高速率</em>向她提供数据的邻居，给出其优先权
<ul>
<li>“一报还一报”被证明可以被回避</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="分布式散列表"><a class="header-anchor" href="#分布式散列表"></a>分布式散列表</h2>
<ul>
<li>分布式散列表(<code> Distributed Hash Table, DHT</code> )： 一种分布式数据库，每个对等方仅保持总体数据库的一个子集
<ul>
<li>其条目是<code>(key - value) pair</code></li>
</ul>
</li>
<li>为每个对等方分配 $n$ 位的标识符和<code>key</code>
<ul>
<li>值域: $[0,2^{n}-1]$</li>
<li>对于不是整数的<code>key</code>，用一个散列函数映射到该区间， 以后我们提起<code>key</code>，指的是它的散列值</li>
<li><em>最邻近后继</em>： 将最邻近对等方定义为<code>key</code>的最邻近后继， <code>key</code>就放在其最邻近后继上</li>
</ul>
</li>
</ul>
<h3 id="环形DHT"><a class="header-anchor" href="#环形DHT"></a>环形DHT</h3>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82/%20%20%E7%8E%AF%E5%BD%A2DHT.jpg" alt=""></p>
<ul>
<li>假设$n=4$, 区间为$[0,15]$,  因为对等方<code>12</code>是键<code>11</code>最邻近的后继， 因此将<code>(11, Johny)</code>存储在对等方<code>12</code>上</li>
<li>查询<code>key</code>时，如何确定最邻近对等方？ 需要特殊的对等方拓扑结构：
<ul>
<li>所有对等方相连： 这样每个对等方，每个查询仅需一个报文，但这样的系统难以维护</li>
<li>环形DHT： 如图，平均发送$\frac N 2$ 个报文</li>
<li>“捷径对等方”：在环形基础上增加边
<ul>
<li>普遍采用，每个请求的报文数量能被优化到 $O(logN)$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="对等方扰动"><a class="header-anchor" href="#对等方扰动"></a>对等方扰动</h3>
<ul>
<li>P2P系统中，对等方可以自由加入、退出，上述的拓扑结构会被破坏</li>
<li>措施： 每个对等方联系其$n$个后继（和捷径对等方），这样一个节点消失或增加时，该链表能自己调整</li>
</ul>
<h1 id="文件传送协议"><a class="header-anchor" href="#文件传送协议"></a>文件传送协议</h1>
<h2 id="FTP概述"><a class="header-anchor" href="#FTP概述"></a>FTP概述</h2>
<ul>
<li>FTP( File Transfer Protocal )： 文件传送协议</li>
<li><strong>文件共享协议</strong>的两大类：
<ol>
<li><strong>复制整个文件</strong>，
<ul>
<li>特点是： <u>若要存取一个文件， 就要先获得一个本地的文件副本。 若要修改文件， 只能对文件的副本进行修改， 然后再将修改后的文件副本传回到原节点</u></li>
<li>两种：
<ol>
<li><strong>FTP</strong>: 基于TCP</li>
<li>TFTP: 基于UDP的简单文件传送协议</li>
</ol>
</li>
</ul>
</li>
<li><strong>联机访问</strong>
<ul>
<li>允许多个程序同时对一个系统进行存取</li>
<li>由操作系统提供对远地共享文件进行访问的服务（ 不需要调用特殊的进程 ）， 就如同对本地文件的访问一样</li>
<li>用户可以用远地文件作为输入和输出来运行任何应用程序， 而操作系统中的文件系统则提供对共享文件的<strong>透明存取</strong>， 其优点是： 将原来用于处理本地文件的应用程序用来处理远地文件时， 不需要对应用程序做明显的改动
<ul>
<li>类似云计算机</li>
</ul>
</li>
<li>例子：
<ul>
<li>网络文件系统NFS（ Network File System ）</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="FTP的基本工作原理"><a class="header-anchor" href="#FTP的基本工作原理"></a>FTP的基本工作原理</h2>
<ul>
<li>
<p>CS模式， 一个FTP服务器进程可以同时为多个客户进程提供服务</p>
</li>
<li>
<p>一个FTP服务器进程由两部分组成：</p>
<ol>
<li>主进程：负责接收新的请求</li>
<li>若干个从属进程：负责处理单个请求</li>
</ol>
</li>
<li>
<p>主进程的工作步骤：</p>
<ol>
<li>打开熟知端口（21），使客户进程能连接上</li>
<li>等待客户进程发出连接请求</li>
<li>启动从属进程处理client process发来的请求。 从属进程对 client process 的请求处理完毕后即终止，但从属进程在运行期间还可能创建一些其他的子进程</li>
<li>回到等待状态，继续接受其他客户进程发来的请求。主进程与从属进程的处理是<strong>并发</strong>进行的
<ul>
<li>并发： 在一个芯片上时分复用</li>
</ul>
</li>
</ol>
</li>
<li>
<p>FTP工作步骤：</p>
<ul>
<li>
<p>服务器有<strong>控制进程</strong>。整个会话期间，客户和服务器一直保持<strong>控制连接</strong></p>
</li>
<li>
<p>当客户进程向服务器进程发出建立连接请求时，要寻找连接服务器进程的熟知端口<code>21</code>，同时告诉服务器进程自己的另一个端口号码，用于建立“<strong>数据连接</strong>”。</p>
</li>
<li>
<p>客户发送的传送请求，通过控制连接发送给服务器的控制进程</p>
</li>
<li>
<p>控制进程在接收到文件传输请求后就创建“<strong>数据传送进程</strong>”和“<strong>数据连接</strong>”。数据传送进程实际完成文件的传送（通过数据连接），在传送完成后关闭“数据连接”。</p>
<ul>
<li>
<p>服务器进程用自己传输数据的熟知端口<code>20</code>与客户进程所提供的端口号建立数据传送连接</p>
</li>
<li>
<p>由于FTP将控制连接与数据连接分离，因此FTP的控制信息是<strong>带外</strong>( out of band )传送的.</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="简单文件传送协议TFTP"><a class="header-anchor" href="#简单文件传送协议TFTP"></a>简单文件传送协议TFTP</h2>
<ul>
<li>用于UDP</li>
<li>所占内存较小</li>
</ul>
<h1 id="远程终端协议TELNET"><a class="header-anchor" href="#远程终端协议TELNET"></a>远程终端协议TELNET</h1>
<ul>
<li>用户用TELNET就能通过TCP连接登录到远地的另一台主机（使用主机名或IP地址），这种服务是透明的， 因此TELNET也称为<strong>终端仿真协议</strong></li>
<li>为适应硬件和OS的差异，TELNET定义了数据和命令在互联网中的传输格式，即<strong>网络虚拟终端NVT</strong>( Network Virtual Terminal )，数据在传输时（C To S ， S To C）都被转为NVT格式</li>
</ul>
<h1 id="万维网WWW"><a class="header-anchor" href="#万维网WWW"></a>万维网WWW</h1>
<ul>
<li>万维网（World Wide Web）并非一个特殊的计算机网络，而是一个大规模的、联机式的信息储藏所。 万维网用链接的方法从互联网的一个站点访问另一个站点</li>
<li>万维网是个分布式的<strong>超媒体</strong>（hypermedia）系统，它是<strong>超文本</strong>（hypertext）系统的扩充
<ul>
<li>超文本： 包含指向其它文档的链接的text，即，超文本由多个信息源链接成</li>
<li>超媒体：超文本文档只能包含文本信息，超媒体文档还能包含其他表示方式的信息，如图形、声音...</li>
</ul>
</li>
<li>万维网以CS模式工作， <strong>浏览器</strong>就是在用户主机上的<u>万维网客户程序</u>。 万维网文档所驻留的主机则运行服务器程序，该主机也称为万维网服务器。在一个客户程序主窗口上显示出的万维网文档称为<strong>页面</strong>（page）</li>
</ul>
<h2 id="统一资源定位符URL"><a class="header-anchor" href="#统一资源定位符URL"></a>统一资源定位符URL</h2>
<ul>
<li>
<p>对资源的位置提供了抽象的识别方法，并用它来给资源定位</p>
</li>
<li>
<p>&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</p>
<ul>
<li>端口和路径可以省略。 省略“路径”，则URL指到<strong>主页</strong></li>
<li>有些浏览器可以把&quot;http://&quot;和主机名最前面的&quot;www&quot;省略，当然浏览器会自动把它们添上</li>
</ul>
</li>
</ul>
<h2 id="超文本传送协议HTTP"><a class="header-anchor" href="#超文本传送协议HTTP"></a>超文本传送协议HTTP</h2>
<h3 id="HTTP概述"><a class="header-anchor" href="#HTTP概述"></a>HTTP概述</h3>
<ul>
<li>面向<strong>事务</strong>的应用层协议，使用TCP
<ul>
<li>HTTP本身是<strong>无连接</strong>的，即无需事先建立HTTP连接</li>
<li>HTTP是<strong>无状态</strong>的，不记得曾经的客户，也不记得客户访问了多少次</li>
</ul>
</li>
<li>默认端口<code>80</code></li>
<li>请求一个万维网文档所需的时间 = 该文档的传输时间 + 两倍RTT
<ul>
<li>一个RTT用于建立TCP连接，一个RTT用于请求和接收万维网文档</li>
<li>TCP三报文握手的第三个报文段中的数据，就是客户对万维网文档的请求报文。 服务器收到HTTP请求报文后，就把所请求的文档作为响应报文返回给客户</li>
</ul>
</li>
<li>为避免两倍RTT开销，HTTP/1.1使用了持续连接，它有两种工作方式：
<ul>
<li><strong>非流水线模式</strong>( without pipeling ): 客户收到前一个响应后才能发出下一个请求. 因此，在TCP连接已建立后访问一次对象就要用去一个RTT</li>
<li><strong>流水线模式</strong>（ with pipelining ）： 客户在收到HTTP的响应报文之前就能够接着发送新的请求报文</li>
</ul>
</li>
</ul>
<h3 id="代理服务器"><a class="header-anchor" href="#代理服务器"></a>代理服务器</h3>
<ul>
<li>又称“<strong>万维网高速缓存</strong></li>
<li>client要向互联网上的server发送请求时，就先和proxy server建立TCP连接，并向其发送HTTP报文。若proxy server没找到所请求的对象，则<strong>由proxy server代表client</strong>与互联网上的源点服务器（origin server）建立TCP连接，并发送HTTP报文</li>
</ul>
<h3 id="HTTP报文结构"><a class="header-anchor" href="#HTTP报文结构"></a>HTTP报文结构</h3>
<p>ref: <a href="https://blog.csdn.net/zephyr999/article/details/80055420">https://blog.csdn.net/zephyr999/article/details/80055420</a></p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82/HTTP%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.png" alt=""></p>
<ul>
<li>开始行
<ul>
<li>在请求报文中称为“请求行”<code>request line</code>
<ul>
<li>方法 + url + HTTP版本</li>
</ul>
</li>
<li>在响应报文中称为“状态行”<code>status line</code>
<ul>
<li>服务器HTTP协议版本，响应状态码，状态码的文本描述</li>
</ul>
</li>
</ul>
</li>
<li>首部行（请求头部<code>header</code>）
<ul>
<li>首部行后空一行</li>
</ul>
</li>
<li>实体主体<code>entity body</code>
<ul>
<li>该字段可能缺失</li>
</ul>
</li>
</ul>
<h4 id="请求报文"><a class="header-anchor" href="#请求报文"></a>请求报文</h4>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82/HTTP%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87.png" alt=""></p>
<ul>
<li>
<p><strong>请求行</strong>由三部分组成：<strong>请求方法</strong>，<strong>请求URL</strong>（不包括域名），<strong>HTTP协议版本</strong></p>
<p>请求方法比较多：<strong>GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT</strong></p>
<p>最常用的是GET和POST</p>
</li>
<li>
<p>首部行（请求头部， 报文头）：由 key/value 对组成，每行为一对，key 和 value 之间通过冒号(:)分割。请求头的作用主要用于通知服务端有关于客户端的请求信息</p>
<ol>
<li>
<ul>
<li>User-Agent：生成请求的浏览器类型</li>
</ul>
</li>
</ol>
<ul>
<li>Accept：客户端可识别的响应内容类型列表；星号* 用于按范围将类型分组。*/*表示可接受全部类型，type/*表示可接受 type 类型的所有子类型。
<ul>
<li>Accept-Language: 客户端可接受的自然语言</li>
</ul>
</li>
<li>Accept-Encoding: 客户端可接受的编码压缩格式
<ul>
<li>Accept-Charset： 可接受的字符集</li>
<li>Host: 请求的主机名，允许多个域名绑定同一 IP 地址</li>
</ul>
</li>
<li>connection：连接方式（close 或 keepalive）
<ul>
<li>Cookie: 存储在客户端的扩展字段</li>
</ul>
</li>
<li>Content-Type:标识请求内容的类型
<ul>
<li>Content-Length:标识请求内容的长度</li>
</ul>
</li>
</ul>
</li>
<li>
<p>请求体（报文体）: 主要用于 POST 请求，与 POST 请求方法配套的请求头字段一般有 Content-Type和 Content-Length</p>
<p>常见的Content-Type：</p>
<table>
<thead>
<tr>
<th>Content-Type</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>text/html</td>
<td>html格式</td>
</tr>
<tr>
<td>text/plain</td>
<td>纯文本格式</td>
</tr>
<tr>
<td>text/css</td>
<td>CSS格式</td>
</tr>
<tr>
<td>text/javascript</td>
<td>js格式</td>
</tr>
<tr>
<td>image/gif</td>
<td>gif图片格式</td>
</tr>
<tr>
<td>image/jpeg</td>
<td>jpg图片格式</td>
</tr>
<tr>
<td>image/png</td>
<td>png图片格式</td>
</tr>
<tr>
<td>application/x-www-form-urlencoded</td>
<td>POST专用：普通的表单提交默认是通过这种方式。form表单数据被编码为key/value格式发送到服务器。</td>
</tr>
<tr>
<td>application/json</td>
<td>POST专用：用来告诉服务端消息主体是序列化后的 JSON 字符串</td>
</tr>
<tr>
<td>text/xml</td>
<td>POST专用：发送xml数据</td>
</tr>
<tr>
<td>multipart/form-data</td>
<td>POST专用：下面讲解</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>multipart/form-data</strong></li>
</ul>
<p>用以支持向服务器发送二进制数据，以便可以在 POST 请求中实现文件上传等功能</p>
</li>
</ul>
<h4 id="响应报文"><a class="header-anchor" href="#响应报文"></a>响应报文</h4>
<p>由状态行、响应头、空行、响应内容四部分组成</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82/HTTP%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87.jpg" alt=""></p>
<ul>
<li>状态行</li>
</ul>
<p>状态行也由三部分组成：服务器HTTP协议版本，响应状态码，状态码的文本描述</p>
<p>格式：HTTP-Version Status-Code Reason-Phrase CRLF</p>
<p>比如：HTTP/1.1 200 OK</p>
<ul>
<li>响应头：
<ul>
<li>Location：服务器返回给客户端，用于重定向到新的位置</li>
<li>Server： 包含服务器用来处理请求的软件信息及版本信息Vary：标识不可缓存的请求头列表</li>
<li>Connection: 连接方式， close 是告诉服务端，断开连接，不用等待后续的请求了。 keep-alive 则是告诉服务端，在完成本次请求的响应后，保持连接</li>
<li>Keep-Alive: 300，期望服务端保持连接多长时间（秒）</li>
</ul>
</li>
<li>空行：(CR or LF )， 位于响应头和响应内容之间</li>
<li>响应内容：服务端返回给请求端的文本信息</li>
</ul>
<h4 id="状态码"><a class="header-anchor" href="#状态码"></a>状态码</h4>
<p><img data-src="https://img-blog.csdn.net/20180424090604643?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3plcGh5cjk5OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p>
<ul>
<li>
<p>1XX：服务器已接收了客户端的请求，客户端可以继续发送请求</p>
</li>
<li>
<p>2XX：服务器已成功接收到请求并进行处理</p>
<ul>
<li>200：OK</li>
<li>202：No Content</li>
<li>206：Partial Content</li>
</ul>
</li>
<li>
<p>3XX：服务器要求客户端重定向， 这表明浏览器需要执行某些特殊的处理以正确处理请求。</p>
<ul>
<li>
<p>301：Moved Permanently</p>
<ul>
<li>永久性重定向。 该状态码表示请求的资源已被分配了新的 URI， 以后应使用资源现在所指的 URI。</li>
</ul>
</li>
<li>
<p>302：Found 临时性重定向。 该状态码表示请求的资源已被分配了新的 URI， 希望用户（本次） 能使用新的 URI 访问。</p>
</li>
<li>
<p>303：See Other， 表示由于请求对应的资源存在着另一个URI，应使用GET方法定向获取请求的资源。303状态码明确表示客户端应当采用GET方法获取资源，这点与302状态码有区别</p>
<ul>
<li>当301、302、303响应状态码返回时，几乎所有的浏览器都会<strong>把POST改成GET，并删除请求报文内的主体，之后请求会自动再次发送</strong></li>
</ul>
</li>
<li>
<p>304：Not Modified， 请求的资源没有修改过, 304 虽然被划分在 3XX 类别中， 但是和重定向没有关系</p>
</li>
<li>
<p>307：Temporary Redirect， 与 302 Found 有着相同的含义，但浏览器不会把307从POST变成GET</p>
</li>
</ul>
</li>
<li>
<p>4XX 客户端错误</p>
<ul>
<li>400 Bad Request：请求报文中存在语法错误；</li>
<li>401 Unauthorized：该状态码表示发送的请求需要有通过 HTTP 认证（BASIC 认证、DIGEST 认证） 的认证信息。</li>
<li>403 Forbidden：请求的资源被服务器拒绝；</li>
<li>404 Not Found：服务器上无法找到资源；</li>
</ul>
</li>
<li>
<p>5XX服务器错误</p>
<p>5XX的响应结果表明服务器本身发生错误</p>
<ul>
<li>500 Internal Server Error：服务器端在执行请求时发生了错误</li>
<li>502 网关错误</li>
<li>503 Service Unavailable ：服务器暂时处于超负载或正在进行停机维护， 现在无法处理请求</li>
</ul>
</li>
</ul>
<h3 id="Cookie"><a class="header-anchor" href="#Cookie"></a>Cookie</h3>
<ul>
<li>
<p>为了避免HTTP无状态带来的不便，万维网站点可以用Cookie来跟踪用户</p>
<ul>
<li>Cookie： 在HTTP server 和 client间传递的状态信息</li>
</ul>
</li>
<li>
<p>Cookie工作步骤：</p>
<ol>
<li>
<p>当用户A浏览某个使用Cookie的网站时，该网站的服务器就为A产生一个唯一的<strong>识别码</strong>， 并以此为索引在后端数据库建立一个项目。接着在给A的HTTP响应报文中添加一个叫做<code>Set Cookie</code>的首部行，其字段名为“Set Cookie”，值为识别码，如：</p>
<p>Set-Cookie： 2134vsfva32ddf432</p>
</li>
<li>
<p>当A收到这个响应时，其浏览器就在它管理的特点Cookie文件中添加一行，其中包括这个识别码和server的主机名。当A继续浏览这个网站时，每发送一个HTTP请求报文，其浏览器就会从其Cookie文件中取出这个网站的识别码，放到HTTP请求报文的首部行中：</p>
<p>Set-Cookie： 2134vsfva32ddf432</p>
</li>
<li>
<p>于是，网站就能够跟踪用户2134vsfva32ddf432（用户A）</p>
</li>
</ol>
</li>
</ul>
<h3 id="Web-cache"><a class="header-anchor" href="#Web-cache"></a>Web cache</h3>
<ul>
<li>Web cache: 也称代理服务器（ proxy server ）, 被配置了 proxy server的浏览器的请求都会被定向到该proxy server
<ul>
<li>proxy server会查询缓存，未命中则请求web server，将后者的内容缓存，并发给浏览器
<ul>
<li>递归式查询</li>
<li>proxy server既是server（对于浏览器）也是clinet（对于web server）</li>
</ul>
</li>
<li>应用：<strong>内容分发网络</strong>（  <code>Content Distribution Network, CDN</code> ）</li>
</ul>
</li>
</ul>
<h3 id="Conditional-GET"><a class="header-anchor" href="#Conditional-GET"></a>Conditional GET</h3>
<ul>
<li>proxy cache带来“陈旧缓存”问题，为此proxy cache可以向web server发送<code>Conditional GET</code>
<ul>
<li>具体而言， server每次都会向 proxy server发送  <code>Last-Modified-Since：date</code>字段。 一段时间后，当用户请求代理服务器查询该资源时， proxy server会对web server发送<code>If-Modified-Since</code>: date 字段
<ul>
<li>如果未修改，则只返回一个响应报文，不用返回对象（ 状态码<code>304 Not Modified</code> ）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="万维网的文档"><a class="header-anchor" href="#万维网的文档"></a>万维网的文档</h2>
<h3 id="静态文档"><a class="header-anchor" href="#静态文档"></a>静态文档</h3>
<ul>
<li>文档放在服务器中，在用户浏览过程中，内容不会改变</li>
</ul>
<h3 id="动态文档"><a class="header-anchor" href="#动态文档"></a>动态文档</h3>
<ul>
<li>文档是在client访问server时才由应用程序动态创建
<ul>
<li>当请求到达时，server要运行另一个应用程序。server把client发来的数据交给这个进程，且server能解释这个进程的输出，以及这个输出结果该如何使用，这就需要<strong>通用网关接口CGI</strong>( Common Gateway Interface )， 它既指CGI标准，也指程序</li>
</ul>
</li>
</ul>
<h3 id="活动文档"><a class="header-anchor" href="#活动文档"></a>活动文档</h3>
<ul>
<li>动态文档一旦生成，内容就固定了，无法及时刷新屏幕。为了屏幕的及时更新，有两种技术：
<ol>
<li>服务器推送（server push）:  将所有工作交给服务器，服务器不断运行与动态文档相关联的应用程序，定时更新信息，并发送更新过的文档
<ul>
<li>server要为每个client维持一个不释放的TCP连接</li>
</ul>
</li>
<li>活动文档（active document）:  所有工作交给浏览器端。服务器返回一个程序，它在浏览器端运行
<ul>
<li>Java applet</li>
</ul>
</li>
</ol>
</li>
<li>服务器端的活动文档内容是不变的，从传送的角度看，两种技术都把活动文档看成静态文档</li>
</ul>
<h2 id="万维网的信息检索系统"><a class="header-anchor" href="#万维网的信息检索系统"></a>万维网的信息检索系统</h2>
<ul>
<li>
<p>搜索引擎： 万维网中用来进行搜索的工具。 分为<strong>全文检索</strong>和<strong>分类目录</strong>两种。现在还出现了<strong>垂直搜索引擎</strong>和<strong>元搜索引擎</strong>，</p>
<ul>
<li>
<p>全文检索：爬虫，建立索引，从已建立的索引数据库中查询</p>
</li>
<li>
<p>分类目录：不主动采集网站的信息，由网站向搜索引擎主动提交信息，经人工审核编辑后，输入到分类目录的数据库中。 查询时不需要关键词，只需按照分类。</p>
</li>
<li>
<p>垂直搜索引擎：也是关键词搜索，但只针对某一领域、某一人群等</p>
</li>
<li>
<p>元搜索引擎：把请求发给多个搜索引擎，再把结果集中处理</p>
</li>
</ul>
</li>
</ul>
<h1 id="电子邮件"><a class="header-anchor" href="#电子邮件"></a>电子邮件</h1>
<ul>
<li>
<p>电子邮件系统三要素： 用户代理、邮件服务器、邮件发送协议(SMTP)和邮件读取协议（POP3）</p>
<ul>
<li>用户代理（UA）:就是电子邮件客户端软件</li>
<li>邮件发送协议：用于UA向邮件服务器发送邮件或在邮件服务器之间发送邮件</li>
<li>邮件读取协议： UA从邮件服务器读取邮件</li>
<li>SMTP, POP3, IMAP都用TCP</li>
</ul>
</li>
<li>
<p>用户在浏览器中浏览信息需要HTTP. 因此浏览器和邮件服务器之间传送邮件时，用HTTP. 而各邮件服务器之间传送邮件时,仍然使用SMTP</p>
</li>
<li>
<p>Email发送和接收步骤：</p>
<ol>
<li>用户发送邮件，把工作全部交给UA. 后者把邮件用SMTP协议发给<strong>发送方邮件服务器</strong>
<ul>
<li>此时UA充当SMTP客户，发送方邮件服务器充当SMTP服务器</li>
</ul>
</li>
<li>SMTP服务器（即发送方邮件服务器）收到邮件后，将其暂放在邮件缓存队列中</li>
<li>发送方邮件服务器与接收方邮件服务器建立TCP连接（<strong>不会中转</strong>），然后依次把邮件缓存队列的邮件发出去</li>
<li>接收方邮件服务器中的SMTP服务器进程收到邮件后，把邮件放到收件人的信箱中</li>
<li>收件人打算收信时，运行UA，使用POP3(or IMAP)协议拉取邮件
<ul>
<li>有些“”特快专递“服务能够让UA直接用SMTP发给接收方邮件服务器（ 不用发给发送方邮件服务器了 ）</li>
</ul>
</li>
</ol>
</li>
<li>
<p>Email由<strong>信封</strong>和<strong>内容</strong>组成</p>
<ul>
<li>
<p>信封上最重要的就是收件人的地址，电子邮件地址格式：</p>
<p>用户名 @ 邮件服务器的域名</p>
</li>
<li>
<p>内容分为<strong>首部</strong>和<strong>主体</strong>，后者用户自己撰写</p>
<ul>
<li>首部包括一些关键字，最重要的有
<ul>
<li>To： 收件人的邮件地址</li>
<li>Subject：主题</li>
<li>Cc：抄送，即留下一个复写副本</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="简单邮件传送协议SMTP"><a class="header-anchor" href="#简单邮件传送协议SMTP"></a>简单邮件传送协议SMTP</h2>
<ul>
<li>不使用中间邮件服务器</li>
<li>本用于传输ASCII码而不是二进制文件，后来虽然有了MIME可以传输二进制数据，但效率不高，为此有了Extended SMTP</li>
</ul>
<h2 id="邮件读取协议POP3"><a class="header-anchor" href="#邮件读取协议POP3"></a>邮件读取协议POP3</h2>
<ul>
<li>POP3: UA必须允许POP3 client ， 而收件人所连接的ISP的邮件服务器中则运行POP3 server，当然，它还要运行SMTP server以收信
<ul>
<li>POP3 server需要用户输入鉴别信息（ 用户名和口令 ）</li>
</ul>
</li>
<li>流程： 特许<code>authorization</code>，事务处理， 更新
<ul>
<li>特许：UA以明文发送用户名和口令
<ul>
<li>主要命令：
<ul>
<li><code>user &lt;username&gt;</code></li>
<li><code>pass &lt;passwd&gt;</code>(  现在一般要输入授权码而不是密码 )</li>
</ul>
</li>
</ul>
</li>
<li>事务处理：UA可以对邮箱做一些操作，如<code>list</code>, <code>retr</code>, <code>dele</code>, <code>quit</code>
<ul>
<li><code>quit</code>仅仅给邮件打上删除标记，并没有删除邮件</li>
</ul>
</li>
<li>更新：客户发出<code>quit</code>之后，结束该pop3 session,并删除那些被标记为删除的报文</li>
</ul>
</li>
<li>POP3用户将邮件从服务器下载到本地</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet pop.qq.com 110 //qq官网给的端口是995,但我用995是无法访问的，不知道为什么</span><br><span class="line"></span><br><span class="line">Trying 120.241.186.196...</span><br><span class="line">Connected to pop.qq.com.</span><br><span class="line">Escape character is &#x27;^]&#x27;.</span><br><span class="line">+OK XMail POP3 Server v1.0 Service Ready(XMail v1.0)</span><br><span class="line"></span><br><span class="line">user 邮箱名</span><br><span class="line">+OK</span><br><span class="line">pass 授权吗</span><br><span class="line">+OK</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="邮件读取协议IMAP"><a class="header-anchor" href="#邮件读取协议IMAP"></a>邮件读取协议IMAP</h2>
<ul>
<li>IMAP:用户在自己的计算机上就可以操纵邮件服务器上的邮箱，就像在本地操纵一样
<ul>
<li>允许UA只获取邮件的一部分</li>
</ul>
</li>
</ul>
<h2 id="基于-web的电子邮件"><a class="header-anchor" href="#基于-web的电子邮件"></a>基于 web的电子邮件</h2>
<ul>
<li>UA就是浏览器</li>
</ul>
<h3 id="通用互联网邮件扩充MIME"><a class="header-anchor" href="#通用互联网邮件扩充MIME"></a>通用互联网邮件扩充MIME</h3>
<ul>
<li>新增了5个首部</li>
<li>定义了许多邮件内容的格式，对多媒体邮件的表示方法进行了标准化</li>
<li>定义了传送编码</li>
</ul>
<h1 id="动态主机配置协议DHCP"><a class="header-anchor" href="#动态主机配置协议DHCP"></a>动态主机配置协议DHCP</h1>
<ul>
<li>
<p>DHCP步骤：</p>
<ol>
<li>需要IP地址的主机在启动时就<strong>广播</strong>发送<strong>DHCP发现报文</strong>（DHCPDISCOVER）
<ul>
<li>广播是因为此时不知道DHCP服务器在哪</li>
<li>目的地址是全1</li>
<li>源地址是全0，因为此时主机没有IP地址</li>
</ul>
</li>
<li>本地网络上所有主机都能收到这个报文，但只有DHCP服务器才能对它回答。（返回报文称为”<strong>提供报文</strong>“）
<ul>
<li>DHCP服务器先在其数据库中查找该计算机的配置信息，若找到，则返回找到的信息；若没找到，则从其地址池（address pool）中取一个地址分配给主机</li>
</ul>
</li>
</ol>
</li>
<li>
<p>为每个网络都设置DHCP服务器代价太高，解决方案是每个网络至少有一个<strong>DHCP中继代理</strong>， 它配置了DHCP服务器的IP地址等信息</p>
<ul>
<li>当中继代理收到主机的DHCP广播发现报文后，就以<strong>单播</strong>方式向DHCP服务器转发此报文，收到<strong>提供报文</strong>后，中继代理再把此提供报文发给主机</li>
</ul>
</li>
<li>
<p>DHCP分配的地址是暂时的，称为“<strong>租用期</strong>”</p>
</li>
<li>
<p>DHCO报文采用UDP</p>
</li>
</ul>
<!--未完待续-->
<p>希望我更新的话，请（以各种手段）催更我哦q(≧▽≦q)</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Computer Networking</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Link Layer</title>
    <url>/2021/06/29/Computer%20Networking-Data%20Link%20Layer/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>使用点对点信道的数据链路层</li>
<li>点对点协议PPP</li>
<li>使用广播信道的数据链路层</li>
<li>扩展的以太网</li>
<li>高速以太网</li>
</ul>
<span id="more"></span>
<p>数据链路层使用的信道主要有两种类型：</p>
<ol>
<li>点对点信道</li>
<li>广播信道： 一对多， 需要共享信道协议来协调数据发送</li>
</ol>
<p>本章我们研究的是在同一个局域网中， 分组怎样从一台主机传送到另一台主机， 但并不经过路由器转发。 从整个互联网角度看， 局域网仍属于数据链路层的范围。</p>
<h1 id="使用点对点信道的数据链路层"><a class="header-anchor" href="#使用点对点信道的数据链路层"></a>使用点对点信道的数据链路层</h1>
<h2 id="数据链路和帧"><a class="header-anchor" href="#数据链路和帧"></a>数据链路和帧</h2>
<ul>
<li><code>链路</code>: 从一个结点到<strong>相邻结点</strong>的物理线路(有线或无线), 而中间没有其他的交换结点. 链路只是一条路径的组成部分</li>
<li><code>数据链路</code>: 链路 + 必要的通信协议, 现在常用方法是用<strong>网络适配器</strong>(既有硬件也有软件)来实现这些协议</li>
<li>帧:  网络层协议的数据单元是<code>IP数据报(或简称数据报, 分组 或 包)</code>. 点对点信道的数据链路层在进行通信时的主要步骤如下:
<ol>
<li>结点A数据链路层把网络层交下来的<code>packet</code>添加首部和尾部封装成帧</li>
<li>结点A把封装好的帧发送给结点B的数据链路层</li>
<li>若结点B的数据链路层收到的帧无差错, 则从收到的帧中提取出<code>packet</code>交给上层的网络层;  否则丢弃这个帧</li>
</ol>
</li>
</ul>
<h2 id="三个基本问题"><a class="header-anchor" href="#三个基本问题"></a>三个基本问题</h2>
<h3 id="封装成帧"><a class="header-anchor" href="#封装成帧"></a>封装成帧</h3>
<ul>
<li>分组交换: 所有在互联网上传送的数据都以<code>IP数据报(packet)</code> 为传送单位. <code>packet</code>到数据链路层就成为帧的数据部分, 加上首部和尾部就成为完整的帧</li>
<li>首部和尾部的一个重要作用是<strong>帧定界</strong>, 此外, 首部和尾部还包含许多必要的控制信息</li>
<li>每一种链路层协议都规定了<strong>所能传输的帧的数据部分长度上限 --- 最大传送单元MTU( Maximum Transfer Unit )</strong></li>
</ul>
<h3 id="透明传输"><a class="header-anchor" href="#透明传输"></a><strong>透明传输</strong></h3>
<ul>
<li>字节填充</li>
</ul>
<h3 id="差错检测"><a class="header-anchor" href="#差错检测"></a>差错检测</h3>
<ul>
<li>CRC</li>
</ul>
<h1 id="点对点协议PPP"><a class="header-anchor" href="#点对点协议PPP"></a>点对点协议PPP</h1>
<ul>
<li><code>Point-to-Point Protocol</code>， 是用户计算机和<code>ISP</code>通信时所使用的数据链路层协议</li>
</ul>
<h2 id="PPP协议应满足的需求"><a class="header-anchor" href="#PPP协议应满足的需求"></a>PPP协议应满足的需求</h2>
<ol>
<li>简单</li>
<li>封装成帧.
<ul>
<li>PPP协议必须规定特殊的字符作为<code>帧定界符</code></li>
</ul>
</li>
<li>透明性</li>
<li>多种网络协议
<ul>
<li>PPP必须能够<strong>在同一条物理链路上同时支持多种网络层协议</strong>的运行</li>
</ul>
</li>
<li>多种类型链路
<ul>
<li>PPP必须能在多种类型的链路上运行. 例如串行和并行, 同步和异步, 高速和低速, 电和光</li>
</ul>
</li>
<li>差错检测( error detection )
<ul>
<li>立即丢弃有差错的帧</li>
</ul>
</li>
<li>检测连接状态
<ul>
<li>必须具有一种机制能够及时自动检测链路是否处于正常工作状态</li>
</ul>
</li>
<li>最大传送单元
<ul>
<li>必须对每一种类型的点对点链路设置<strong>最大传送单元MTU</strong>的标准默认值. 这是为了促进各种书籍线之间的互操作性. 如果高层协议发送的分组过长并超过MTU的数值, PPP就要丢弃这样的帧. MTU是数据链路层的帧可以载荷的<strong>数据部分</strong>的最大长度, 而<strong>不是帧的总长度</strong></li>
</ul>
</li>
<li>网络层地址协商</li>
<li>数据压缩协商</li>
</ol>
<h1 id="使用广播信道的数据链路层"><a class="header-anchor" href="#使用广播信道的数据链路层"></a>使用广播信道的数据链路层</h1>
<h2 id="局域网的数据链路层"><a class="header-anchor" href="#局域网的数据链路层"></a>局域网的数据链路层</h2>
<ul>
<li>局域网最主要的特点: <strong>网络为一个单位所拥有, 且地理范围和站点数目均有限</strong></li>
<li>局域网的优点:
<ol>
<li>具有广播功能.  从一个站点可很方便地访问全网. 局域网上的主机可共享连接在局域网上的各种硬件和软件资源</li>
<li>便于习用的扩展和逐渐演变, 各设备的位置可灵活调整和改变</li>
<li>提高了系统的可靠性( reliability ) ,  可用性( availability ) 和生存性( survivability )</li>
</ol>
</li>
<li>局域网的分类( 按拓扑 ):
<ul>
<li>星型网</li>
<li>总线网</li>
<li>环形网</li>
</ul>
</li>
<li><strong>共享信道</strong>要考虑的一个问题是如何使众多用户能合理且方便地共享媒体资源, 这在技术上有两种方法:
<ol>
<li><strong>静态划分信道</strong> . 如第二张的频分复用, 时分复用, 波分服用等. 用户只要分配到了信道就不会与其它用户发生冲突. 但这种方式代价较高, 不适合局域网</li>
<li><strong>动态媒体接入控制</strong>, 又称为<strong>多点接入( multiple access )</strong> , 分两类
<ul>
<li><strong>随机接入</strong>: 用户可以随机地发送信息. 但如果两个或更多的用户在同一时刻发送信息, 那么在共享媒体上就要产生<strong>碰撞</strong>(即发生了<strong>冲突</strong>), 因此必须有解决碰撞的协议. 以太网属于随机接入</li>
<li><strong>受控接入</strong> 用户不能随机地发送消息而必须接受一定的控制</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="适配器的作用"><a class="header-anchor" href="#适配器的作用"></a>适配器的作用</h3>
<ul>
<li>适配器和局域网之间的通信通过<code>电缆</code>或者<code>双绞线</code>以<code>串行</code>传输方式进行</li>
<li>适配器和计算机之间的通信通过计算机主板上的<code>IO总线</code>以<code>并行</code>传输方式进行</li>
<li>适配器的一个重要功能是进行数据串行传输和并行传输的转换</li>
<li>计算机的<code>硬件地址</code>就在适配器的<code>ROM</code>中, 而计算机的软件地址---<code>IP地址</code>, 则在计算机的存储器中</li>
<li>适配器在接受和发送各种帧时, 不使用计算机的CPU. 当适配器收到有差错的帧时, 就把这个帧<u>直接丢弃而不必通知计算机</u>. 当收到正确的帧时, 它就使用<code>中断</code>来通知计算机, 并交付协议栈中的网络层.</li>
<li>当计算机要发送<code>IP数据报</code>时, 就由协议栈把<code>IP数据报</code>向下交给适配器, 组装成<code>帧</code>后发送到<code>局域网</code></li>
</ul>
<h3 id="CSMA-CD协议"><a class="header-anchor" href="#CSMA-CD协议"></a>CSMA/CD协议</h3>
<ul>
<li><code>Carrier Sense Multiple Access with Collision Detection，载波侦听多路访问/冲突检测协议) </code></li>
<li>早期以太网是<code>总线型</code>的. 属于<code>广播通信</code>. 为了在总线上实现<u>一对一通信</u>, 可以使每台计算机的<code>适配器</code>拥有一个和其他适配器不同的地址, 当发送数据帧时, 在帧的首部写明接收站的地址.</li>
<li><strong>仅当数据帧中的目的地址与适配器ROM中存放的硬件地址一致时</strong>, 该适配器才能接收这个数据帧, 否则就丢弃. 这样, 就在总线上实现了</u>一对一通信</u></li>
<li>以太网采取以下两种措施
<ul>
<li><strong>无连接</strong>
<ul>
<li>不必建立链接就可以直接发送数据</li>
<li>适配器对发送的数据帧<strong>不进行编号, 也不要求对方发回确认</strong></li>
<li>尽最大努力的交付, 即不可靠的交付.</li>
</ul>
</li>
</ul>
</li>
<li>总线特点: <strong>在同一时间只能允许一台计算机发送数据</strong>, 解决方法:
<ul>
<li>CSMA/CD协议</li>
<li>曼彻斯特编码</li>
</ul>
</li>
<li>CSMA/CD的特点
<ul>
<li>多点接入</li>
<li>载波监听
<ul>
<li>检测信道( 发送前和发送中都要不停检测信道 )</li>
</ul>
</li>
<li>碰撞检测</li>
</ul>
</li>
</ul>
<h3 id="以太网的MAC层"><a class="header-anchor" href="#以太网的MAC层"></a>以太网的MAC层</h3>
<ul>
<li>局域网中, 硬件地址又称为<code>MAC地址</code></li>
<li>48位的全球地址, 就是固化在适配器的ROM中的地址</li>
<li>发往本站的帧有三种:
<ol>
<li>单播( unicast )帧</li>
<li>广播( broadcast )帧( 一对全体 ), 即发送给本局域网上所有站点的帧( 全1地址 )</li>
<li>多播(multicast )帧( 一对多 ): 即发送给本局域网上部分站点的帧</li>
</ol>
</li>
<li>所有的适配器都能识别前两种帧,有的能通过编程方式识别多播地址</li>
</ul>
<h1 id="扩展的以太网"><a class="header-anchor" href="#扩展的以太网"></a>扩展的以太网</h1>
<h2 id="在物理层扩展以太网"><a class="header-anchor" href="#在物理层扩展以太网"></a>在物理层扩展以太网</h2>
<ul>
<li>用集线器</li>
<li>缺点：
<ul>
<li>多个系的以太网通过集线器互连起来后， 多个<strong>碰撞域</strong>会合并成一个
<ul>
<li>碰撞域： 在任意时刻， 每个碰撞域中只能有一个站在发送数据</li>
</ul>
</li>
<li>如果不同的系使用不同的以太网技术（如数据率不同）， 那么就不可能用集线器把它们互连起来。 集线器基本是个多借口的转发器， 它不能把帧进行缓存</li>
</ul>
</li>
</ul>
<h2 id="在数据链路层扩展以太网"><a class="header-anchor" href="#在数据链路层扩展以太网"></a>在数据链路层扩展以太网</h2>
<p>扩展以太网一般在数据链路层进行， 用交换机</p>
<h3 id="以太网交换机的特点"><a class="header-anchor" href="#以太网交换机的特点"></a>以太网交换机的特点</h3>
<ul>
<li>交换机就是<strong>多接口的网桥</strong></li>
<li>每个接口都直接与单台主机或另一个以太网交换机相连, 且工作在<code>全双工方式</code></li>
<li>具有并行性, 能同时连通多对接口, 且多对主机能同时通信, 相互通信的主机都是<strong>独占传输媒体, 无碰撞地传输数据</strong></li>
<li>是一种即插即用设备, 其内部的<code>帧交换表(地址表)</code>是通过<strong>自学习算法</strong>建立的</li>
<li>交换机能隔离<code>冲突域</code>,但不能隔离广播域
<ul>
<li>交换机使用硬件转发, 比使用软件转发的网桥快很多</li>
</ul>
</li>
<li>交换机一般具有多种速率的接口, 因此不同数据率的两给局域网可以互连</li>
<li>部分交换机实现<code>直通(  cut through )</code>的交换方式. 而网桥只能存储转发</li>
</ul>
<h3 id="以太网交换机的自学习功能"><a class="header-anchor" href="#以太网交换机的自学习功能"></a>以太网交换机的自学习功能</h3>
<ol>
<li>A向B发送一帧, 从接口1进入交换机. 交换机收到帧后, 先查找交换表, 没有找到应从哪个接口转发这个帧( 在MAC地址这一列中, 没有找到目的地址为B的项目 ). 接着, 交换机吧这个帧的源地址和接口1写入交换表中, 并<strong>向除接口1外的所有接口广播这个帧</strong></li>
<li>C和D将丢弃这个帧, 因为目的地址不对. B会收下这个帧. 这称为<strong>过滤</strong></li>
<li>假定接下来B通过接口3向A发送一帧. 交换机查找交换表, 发现交换表中的MAC地址有A, 就应当把收到的帧从接口1转发出去. 并向表中写入源地址B和接口3</li>
</ol>
<ul>
<li>交换表中每个项目都设有一定的有效时间</li>
<li>如果存在冗余链路, 则会导致帧在某个环路中无限兜圈子, 因此IEEE制定了<strong>生成树协议STP( Spanning Tree Protocol )</strong>, 其要点是不改变网络的实际拓扑, 而在逻辑上切断某些链路, 似的从一台主机到所有其他主机的路径是五环路的树状结构, 从而消除了兜圈子现象.</li>
</ul>
<h3 id="从总线到星型以太网"><a class="header-anchor" href="#从总线到星型以太网"></a>从总线到星型以太网</h3>
<ul>
<li>目前, 采用以太网<strong>交换机</strong>的<strong>星型拓扑</strong>成为<strong>首选拓扑</strong></li>
<li>总线以太网使用CSMA/DA协议, 以半双工方式工作. 但以太网交换机不使用共享总线, 没有碰撞问题, 因此不使用CSMA/DA协议, 而是以全双工方式工作</li>
<li>因为<strong>帧</strong>结构没有改变, 所以现在的局域网还叫以太网</li>
</ul>
<h3 id="虚拟局域网"><a class="header-anchor" href="#虚拟局域网"></a><strong>虚拟局域网</strong></h3>
<ul>
<li>是由一些局域网网段构成的与物理位置无关的逻辑组, 而这些网段有某些共同的需求. ,每一个VLAN帧都有一个明确的标识符( VLAN tag, 4字节 ), 指明发送方属于哪一个VLAN</li>
</ul>
<h1 id="高速以太网"><a class="header-anchor" href="#高速以太网"></a>高速以太网</h1>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Computer Networking</tag>
      </tags>
  </entry>
  <entry>
    <title>Computer Networking Introduction</title>
    <url>/2021/12/09/Computer%20Networking-Introduction/</url>
    <content><![CDATA[<p>Outline ：</p>
<ul>
<li>互联网的组成</li>
<li>计算机网络的提及结构</li>
<li>计算机网络的性能指标</li>
<li>计算机网络基本工具</li>
</ul>
<span id="more"></span>
<h1 id="互联网的组成"><a class="header-anchor" href="#互联网的组成"></a>互联网的组成</h1>
<p>互联网拓扑结构：</p>
<ul>
<li>边缘部分： 用户直接使用的主机。
<ul>
<li>主机<code>host</code>也称为端系统<code>end system</code></li>
</ul>
</li>
<li>核心部分：大量网络和连接这些网络的路由器。为边缘部分提供服务（ 连通性和交换 ）</li>
</ul>
<h2 id="互联网核心部分"><a class="header-anchor" href="#互联网核心部分"></a>互联网核心部分</h2>
<ul>
<li>路由器： 分组交换</li>
<li>交换：按照某种方式动态地分配传输线路的资源
<ul>
<li>电路交换：建立连接- 通话 - 释放连接
<ul>
<li>通话的全部时间内，通话用户始终占据端到端的全部资源</li>
</ul>
</li>
<li>报文交换：整个报文线传送到相邻节点，全部存储下来后查找转发表，转发到下一个节点</li>
<li>分组交换： 单个分组（整个报文的一部分）传送到相邻节点，全部存储下来后查找转发表，转发到下一个节点
<ul>
<li>分组交换和报文交换不需要预先分配传输带宽， 数据在哪条链路上传送才占用该链路</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="计算机网络的体系结构"><a class="header-anchor" href="#计算机网络的体系结构"></a>计算机网络的体系结构</h1>
<ul>
<li>
<p>[网络]<strong>协议</strong>：控制两个对等<strong>实体</strong>进行通信的规则的集合</p>
<ul>
<li>语法：数据与控制信息的结构或格式</li>
<li>语义即需要发出何种控制信息，完成何种动作以及做出何种相应</li>
<li>同步：即事件实现顺序的详细说明</li>
</ul>
</li>
<li>
<p><strong>实体</strong>： 任何可发送或接受信息的硬件或软件进程</p>
</li>
<li>
<p>在协议的控制下，来自各个<code>peer entity</code>间的通信时的本层能够向上一层提供服务。 要实现本层协议，还要使用下一层提供的<strong>服务</strong></p>
</li>
<li>
<p>协议与服务不同：</p>
<ul>
<li>协议的实现保证了能够向上一层提供服务。 使用本层服务的实体只能看见服务而无法看见下面的协议
<ul>
<li>下面的协议对上面的实体是<strong>透明的</strong></li>
</ul>
</li>
<li>协议是“<strong>水平的</strong>”，服务是“<strong>垂直的</strong>”
<ul>
<li>服务是下层向上层提供层间借口实现的</li>
<li>只有被高层实体<strong>看得见</strong>的功能才称之为服务（即，并非在层内完成的全部功能都称为服务）</li>
<li>上层使用下层所提供的服务必须通过与下层交换一些命令，称为“服务原语”</li>
</ul>
</li>
<li>协议数据单元<code>PDU( Protocol Data Unit )</code>： 对等层次之间传送的数据单元</li>
<li>服务数据单元<code>SDU( Service Data Unit )</code>: 层与层之间交换的数据单元</li>
</ul>
</li>
<li>
<p>五层协议的体系结构：应用层、运输层、网络层、数据链路层、物理层</p>
<ul>
<li>本文采用五层结构</li>
</ul>
</li>
<li>
<p>七层：应用层、表示层、会话层、运输层、网络层、数据链路层、物理层</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Introduction/OSI%207%20layers.jpeg" alt="OSI 7 layers"></p>
</li>
</ul>
<h2 id="应用层"><a class="header-anchor" href="#应用层"></a>应用层</h2>
<ul>
<li>数据单元：报文<code>message</code></li>
<li>作用：提供进程间交互</li>
</ul>
<h2 id="运输层"><a class="header-anchor" href="#运输层"></a>运输层</h2>
<ul>
<li>作用： 为两台主机中线程间的通信提供<strong>通用</strong>的数据传输服务</li>
<li>协议：
<ul>
<li>TCP：面向连接的，可靠的
<ul>
<li>数据单元： 报文段<code>segment</code></li>
</ul>
</li>
<li>UDP:无连接的，尽最大努力的
<ul>
<li>数据单元：用户数据报</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="网络层"><a class="header-anchor" href="#网络层"></a>网络层</h2>
<ul>
<li>作用：将运输层产生的报文段或用户数据报封装成<strong>分组</strong><code> packet</code>或<strong>包</strong>进行传送，分组也称为**[IP]数据报**
<ul>
<li>其实，不管哪一层的数据单元，都可称为“分组”</li>
</ul>
</li>
<li>互联网是由大量的异构网络通过<code>router</code>连接起来的</li>
<li>一个<code>packet</code>经过的一系列链路和叫哈u年纪称为通过该网络的<code>route</code></li>
</ul>
<h2 id="数据链路层"><a class="header-anchor" href="#数据链路层"></a>数据链路层</h2>
<ul>
<li>将网络层的IP数据报组装成<code>frame</code>,每一帧包括数据和一些控制信息</li>
</ul>
<h2 id="物理层"><a class="header-anchor" href="#物理层"></a>物理层</h2>
<ul>
<li>数据单元：<code>bit</code></li>
<li>传递信息所利用的物理媒体并不属于物理层</li>
</ul>
<h1 id="计算机网络性能指标"><a class="header-anchor" href="#计算机网络性能指标"></a>计算机网络性能指标</h1>
<h2 id="吞吐量"><a class="header-anchor" href="#吞吐量"></a>吞吐量</h2>
<ul>
<li>吞吐量<code>throughput</code>: 单位时间内通过某个网络的实际的数据量</li>
</ul>
<h2 id="时延"><a class="header-anchor" href="#时延"></a>时延</h2>
<ul>
<li>时延<code>latenty</code>：数据从网络的一端传送到另一端的时间
<ul>
<li>发送时延：主机或<code>router</code>发送数据帧所需要的时间
<ul>
<li>= 数据帧长度 / 发送速率</li>
</ul>
</li>
<li>传播时延：电磁波在信道中传播一定的距离需要花费的时间
<ul>
<li>= 心道长度 / 电磁波在信道中的传播速率</li>
</ul>
</li>
<li>处理时延：主机或<code>router</code>处理收到的分组的时间</li>
<li>排队时延：分组在<code>router</code>的输入队列中排队等待处理
<ul>
<li>丢包：分组如果到达一个满的队列，<code>router</code>将<code>drop</code>该分组</li>
</ul>
</li>
</ul>
</li>
<li>总时延 = 发送时延 + 传播时延 + 处理时间 + 排队时延
<ul>
<li>我们一般只能提高发送时延， “光线比铜线快”指的是可以用很快的速率向光纤信道发送数据，光纤信道上的<em>传播速率</em>实际上比铜线慢</li>
</ul>
</li>
</ul>
<h2 id="RTT"><a class="header-anchor" href="#RTT"></a>RTT</h2>
<ul>
<li>往返时间<code>RTT(Round-Trip Time)</code></li>
</ul>
<h2 id="利用率"><a class="header-anchor" href="#利用率"></a>利用率</h2>
<ul>
<li>利用率：
<ul>
<li>信道利用率： 信道有百分之几的时间是被利用的</li>
<li>网络利用率：全网络的信道利用率的加权平均</li>
</ul>
</li>
<li>$D = \frac{D_0}{1-U}$ ( $D$:  网络当前时延，  $D_0$:空闲时延， $U$: 利用率 )</li>
</ul>
<h1 id="工具"><a class="header-anchor" href="#工具"></a>工具</h1>
<h2 id="tracerouter"><a class="header-anchor" href="#tracerouter"></a>tracerouter</h2>
<ul>
<li><code>traceroute [参数选项] hostname，域名或 IP地址</code>
<ul>
<li>向目的地发送几个特殊的分组</li>
<li>得到路由信息（路由器名、路由器地址、时延...）</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">traceroute www.baidu.com                               ✔  9s   base  </span><br><span class="line">traceroute to www.baidu.com (180.101.49.11), 30 hops max, 60 byte packets</span><br><span class="line"> 1  _gateway (172.31.0.1)  2.660 ms  2.634 ms  2.625 ms</span><br><span class="line"> 2  * * *</span><br><span class="line"> 3  * * *</span><br><span class="line"> 4  211.65.206.9 (211.65.206.9)  3.018 ms  3.196 ms  3.748 ms</span><br><span class="line"> 5  * * *</span><br><span class="line"> 6  * 211.65.207.73 (211.65.207.73)  4.098 ms 211.65.206.77 (211.65.206.77)  4.287 ms</span><br><span class="line"> 7  101.4.116.98 (101.4.116.98)  3.681 ms  4.070 ms  3.939 ms</span><br><span class="line"> 8  101.4.112.42 (101.4.112.42)  19.784 ms  20.044 ms  20.090 ms</span><br><span class="line"> 9  202.97.19.13 (202.97.19.13)  13.871 ms  10.297 ms  10.219 ms</span><br><span class="line">10  202.97.60.217 (202.97.60.217)  10.447 ms 202.97.87.129 (202.97.87.129)  11.395 ms 202.97.62.77 (202.97.62.77)  10.188 ms</span><br><span class="line">11  202.97.66.198 (202.97.66.198)  16.129 ms 202.97.66.62 (202.97.66.62)  17.719 ms 202.97.29.114 (202.97.29.114)  15.325 ms</span><br><span class="line">12  58.213.94.106 (58.213.94.106)  23.529 ms 58.213.95.150 (58.213.95.150)  15.693 ms 58.213.94.98 (58.213.94.98)  15.408 ms</span><br><span class="line">13  * * *</span><br><span class="line">14  58.213.96.58 (58.213.96.58)  37.227 ms 58.213.96.126 (58.213.96.126)  40.246 ms 58.213.96.66 (58.213.96.66)  39.501 ms</span><br><span class="line">15  * * *</span><br><span class="line">16  * * *</span><br><span class="line">17  * * *</span><br><span class="line">18  * * *</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>记录按序列号从1开始，每个纪录就是一跳 ，每跳表示一个网关，我们看到每行有三个时间，单位是 ms，其实就是-q的默认参数。探测数据包向每个网关发送三个数据包后，网关响应后返回的时间；如果您用 traceroute -q 4 <a href="http://www.baidu.com">www.baidu.com</a> ，表示向每个网关发送4个数据包。</li>
<li>有时会看到有一些行是以星号表示的。出现这样的情况，可能是防火墙封掉了ICMP的返回信息，所以我们得不到什么相关的数据包返回数据。</li>
<li>有时在某一网关处延时比较长，有可能是某台网关比较阻塞，也可能是物理设备本身的原因。当然如果某台DNS出现问题时，不能解析主机名、域名时，也会 有延时长的现象；您可以加-n 参数来避免DNS解析，以IP格式输出数据。</li>
</ul>
<h2 id="wireshark"><a class="header-anchor" href="#wireshark"></a>wireshark</h2>
<ul>
<li>分组嗅探器：观察执行实体之间交换的报文之间的基本工具</li>
</ul>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Computer Networking</tag>
      </tags>
  </entry>
  <entry>
    <title>Computer History</title>
    <url>/2022/09/13/Computer-History/</url>
    <content><![CDATA[<p>介绍了计算机, 操作系统和编程语言的历史</p>
<p>Outline:</p>
<ul>
<li>The first true digital computer</li>
<li>The First Generation (1945–55): Vacuum Tubes</li>
<li>The Second Generation (1955–65): Transistors and Batch Systems</li>
<li>The Third Generation (1965–1980): ICs and Multiprogramming</li>
<li>The Fourth Generation (1980–Present): Personal Computers</li>
</ul>
<span id="more"></span>
<h1 id="The-first-true-digital-computer"><a class="header-anchor" href="#The-first-true-digital-computer"></a>The first true digital computer</h1>
<p>was designed by the English mathematician <strong>Charles Babbage</strong> (1792–1871)</p>
<ul>
<li>Babbage realized that he would need software for his analytical engine, so he hired a young woman named <strong>Ada Lovelace</strong></li>
</ul>
<p>《信息简史》里讲了他们的故事，向他们致敬！</p>
<h1 id="The-First-Generation-1945–55-Vacuum-Tubes"><a class="header-anchor" href="#The-First-Generation-1945–55-Vacuum-Tubes"></a>The First Generation (1945–55): Vacuum Tubes</h1>
<ul>
<li>编程语言就是二进制, 写在插板(后来是穿孔卡片)上, 也没有编译器</li>
</ul>
<h1 id="The-Second-Generation-1955–65-Transistors-and-Batch-Systems"><a class="header-anchor" href="#The-Second-Generation-1955–65-Transistors-and-Batch-Systems"></a>The Second Generation (1955–65): Transistors and Batch Systems</h1>
<ul>
<li><strong>Batch Systems：</strong> The idea behind it was to collect a tray full of jobs in the input room and then read them onto a magnetic tape using a small (relatively) inexpensive computer, such as the <strong>IBM 1401</strong>, which was quite good at reading cards, copying tapes, and printing output, but not at all good at numerical calculations. Other, much more expensive machines, such as the <strong>IBM 7094</strong>, were used for the real computing</li>
<li>用IBM 140把卡片翻译成磁带， 用7094处理磁带，把结果打印到磁带上， 再将结果磁带交给1401<strong>离线</strong>打印（不需要7094了）</li>
<li>典型：FMS（ the Fortran Monitor System ）和 IBSYS( IBM's system for the 7094 ). 主要用于科学计算</li>
<li>这一时期诞生了高级语言:
<ul>
<li>Fortran for scienti􏰁c computation</li>
<li>Cobol for business data pro cessing</li>
<li>Lisp for symb olic computation</li>
</ul>
</li>
<li>此时的编译器已经比较复杂了: the original fortran compiler was a multipass system that included a distinct scanner, parser, and register allocator, along with some optimizations [26, 27].</li>
</ul>
<h1 id="The-Third-Generation-1965–1980-ICs-and-Multiprogramming"><a class="header-anchor" href="#The-Third-Generation-1965–1980-ICs-and-Multiprogramming"></a>The Third Generation (1965–1980): ICs and Multiprogramming</h1>
<ul>
<li>
<p>By the early 1960s, most computer manufacturers had two distinct, incompatible, product lines：</p>
<ol>
<li>大型机（类似7094），用于科学、工业上的数值计算</li>
<li>商业机， 用于银行、保险公司等的磁带排序和印刷</li>
</ol>
</li>
<li>
<p>System/360</p>
<ul>
<li>
<p>IBM推出的一系列software-compatible machines,拥有同样的架构和指令集，彼此只有价格、性能不同。</p>
<ul>
<li>
<p>IBM 360 was the first major computer line to use (small-scale) ICs, 带来了价格和性能上的巨大提升</p>
</li>
<li>
<p>360还有很多后继，如370, 4300, 3080,  3090， zSeries之类</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>OS/360: 360的操作系统</p>
<ul>
<li>360的&quot;a family of compatible computers&quot;迅速流行。但是，这对软件（尤其是OS）的编写产生了巨大困难。
<ul>
<li>The original intention was that all software, including the operating system, OS/360, had to work on all models。</li>
<li>OS/360项目开发到最后,就如同“a herd of prehistoric beasts stuck in a tar pit”</li>
</ul>
</li>
<li>OS/360引入了许多新技术，包括
<ul>
<li><strong>multiprogramming</strong>：  内存分区， 可以多任务, 避免单任务阻塞使得CPU idle</li>
<li><strong>spooling</strong> (from Simultaneous Peripheral Operation On Line)： 直接将任务从卡片读到磁盘上，输出反之。 再也不需要磁带了 ）</li>
</ul>
</li>
</ul>
</li>
<li>
<p>CTSS(Compatible Time Sharing System)</p>
<ul>
<li>
<p>developed at M.I.T. on a specially modified 7094</p>
</li>
<li>
<p><strong>timesharing</strong>, a variant of multiprogramming, in which each user has an online terminal。 即多用户。提高开发速度。</p>
</li>
<li>
<p>由于缺乏必要的protection hardware。 CTSS没有流行</p>
</li>
</ul>
</li>
<li>
<p>MULTICS (MULTiplexed Information and Computing Service)</p>
<ul>
<li>
<p>M.I.T., Bell Labs, and General Electric研发（最后只有MIT坚持）， 目的是设计一款“computer utility”。 类似国家电力系统，支持同时间许多人的timesharing，MULTICS被设想为房子那样大的计算设施。</p>
</li>
<li>
<p>由于采用PL/I语言和太过有野心，MULTICS没有预期的那样成功</p>
</li>
<li>
<p>MULTICS的概念就是当今的<strong>云计算</strong></p>
</li>
</ul>
</li>
<li>
<p>minicomputers</p>
<ul>
<li>starting with the DEC PDP-1 in 1961</li>
<li>culminating in the PDP-11</li>
</ul>
</li>
<li>
<p>UNIX</p>
<ul>
<li>Ken Thompson，one of the computer scientists at Bell Labs who had worked on the MULTICS project, subsequently found a small PDP-7 minicomputer that no one was using and set out to write a stripped-down, one-user version of MULTICS. This work later developed into the UNIX operating system</li>
<li>Two major versions developed:
<ul>
<li>System V, from AT&amp;T</li>
<li>BSD (Berkeley Software Distribution) from the University of California at Berkeley</li>
<li>POSIX
<ul>
<li>为了让程序能运行在所有UNIX系统，IEEE定义了一个UNIX标准，称为POSIX.</li>
<li>POSIX defines a minimal system-call interface that conformant UNIX systems must support.</li>
<li>很多其他的OS也支持OS</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>MINIX</p>
<ul>
<li>in 1987, the author released a small clone of UNIX, called MINIX, for educational purposes.</li>
<li>相当稳定</li>
</ul>
</li>
<li>
<p>Linux</p>
<ul>
<li>Linus Torvalds为了得到一个完全免费的MINIX,在其基础上开发了LINUX</li>
</ul>
</li>
</ul>
<h1 id="The-Fourth-Generation-1980–Present-Personal-Computers"><a class="header-anchor" href="#The-Fourth-Generation-1980–Present-Personal-Computers"></a>The Fourth Generation (1980–Present): Personal Computers</h1>
<p>由于LSI (Large Scale Integration) circuits的发展，个人计算机成为了可能，它和minicomputer的差距主要是价格上的</p>
<ul>
<li>
<p>CP/M (Control Program for Microcomputers)</p>
<ul>
<li>a disk-based OS for 8080, the first general-purpose 8-bit CPU invented by Intel</li>
<li>由于Intel不认为CP/M有什么未来，就允许作者Kildall拿着专利自立门户，后者成立了Digital Research。</li>
</ul>
</li>
<li>
<p>DOS (Disk Operating System)</p>
<ul>
<li>In the early 1980s, IBM designed the <strong>IBM PC</strong> and looked around for software to run on it. People from IBM contacted <strong>Bill Gates</strong> to license his BASIC interpreter. They also asked him if he knew of an operating system to run on the PC. Gates suggested that IBM contact Digital Research, then the world’s dominant operating systems company。 Kildall拒绝了， 盖茨就找了Seattle Computer Products， 购买了DOS，将其与BASIC捆绑卖给IBM, 后者想要一些修改，盖茨就雇了其DOS的作者Tim Paterson作为他的新公司MS的雇员。</li>
<li>The revised system was renamed MS-DOS (MicroSoft Disk Operating System) and quickly came to dominate the IBM PC market.</li>
<li>By the time the successor to the IBM PC, the IBM PC/AT, came out in 1983 with the Intel 80286 CPU, MS-DOS was firmly entrenched and CP/M was on its last legs. MS-DOS was later widely used on the 80386 and 80486.</li>
</ul>
</li>
<li>
<p>GUI</p>
<ul>
<li>早期的微电脑的OS，包括CP/M, MS-DOS等都基于用户从键盘输入命令。</li>
<li><strong>Engelbart</strong> 发明了GUI  ( Doug Engelbart at Stanford Research Institute in the 1960s ), complete with windows, icons, menus, and mouse.</li>
<li>These ideas were adopted by researchers at <strong>Xerox PARC</strong> and incorporated into machines they built.</li>
</ul>
</li>
<li>
<p>MAC</p>
<ul>
<li>Jobs拜访PARC的时候看到了GUI，回去后开始开发带GUI的Apple，第一代&quot;Lisa&quot;失败了， 第二代“Mac”成功了</li>
</ul>
</li>
<li>
<p>MAC OS X</p>
<ul>
<li>1999,Apple采用了新内核，它CMU研发的微内核，而后者被最初设计用来替代BSD UNIX的内核</li>
<li>因此， MAC OS X是个UNIX操作系统</li>
</ul>
</li>
<li>
<p>Windows</p>
<ul>
<li>微软开发的MS-DOS的后继， 深受Mac成功的影响，因此带有GUI。事实上它更像是运行在MS-DOS上的shell</li>
</ul>
</li>
<li>
<p>Windows 95</p>
<ul>
<li>有十年时间， 1985-1995，Windows 只是一个MS-DOS上的图形环境</li>
<li>Win95是95年发行的独立版本，拥有更多的操作系统的特性， 只将MS-DOS用于启动和运行旧的MS-DOS程序</li>
<li>However, starting in 1995 a freestanding version, <strong>Windows 95</strong>, was released that incorporated many operating system features into it, using the underlying MS-DOS system only for booting and running old MS-DOS programs.</li>
</ul>
</li>
<li>
<p>Windows 98</p>
<ul>
<li>98年发行的Win95的轻微修改版。 这两个版本都还含有大量的Intel16位汇编代码</li>
</ul>
</li>
<li>
<p>Windows NT(where the NT stands for New Technology)</p>
<ul>
<li>和Windows 95兼容， 但是是a full 32-bit system</li>
<li>采用了很多VAX VMS的思想（ 因为主设计者也是后者的设计者之一 ）</li>
<li>Version 5 of Windows NT was renamed <strong>Windows 2000</strong> in early 1999. It was intended to be the successor to both Windows 98 and Windows NT 4.0</li>
<li>由于Win2000也没有足够成功， MS发行了Windows Me (Millennium Edition)</li>
</ul>
</li>
<li>
<p>Windows XP</p>
<ul>
<li>发行于2001</li>
<li>a slightly upgraded version of Windows 2000</li>
<li>基本取代了之前所有版本</li>
</ul>
</li>
<li>
<p>service packs</p>
<ul>
<li>Windows 2000之后，MS将Windos系列分成客户-服务器两台产品线。前者基于XP和其后继， 后者包含了Server 2003 and Windows 2008。 嵌入式的产品线后来也出现了。</li>
<li>All of these versions of Windows forked off their variations in the form of service packs.</li>
</ul>
</li>
<li>
<p>Vista</p>
<ul>
<li>Then in January 2007, Microsoft finally released the successor to Windows<br>
XP, called Vista</li>
</ul>
</li>
<li>
<p>Windows 7</p>
<ul>
<li>相比Vista没有很多新特性，但是更稳定更不吃资源</li>
</ul>
</li>
<li>
<p>Windows 8</p>
<ul>
<li>Win7的后继，2012发行。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>OS Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>Computer I/O Device</title>
    <url>/2022/08/06/Computer-I:O-Device/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Device Controller</li>
<li>Device Driver</li>
<li>Driver</li>
</ul>
<span id="more"></span>
<h1 id="Device-Controller"><a class="header-anchor" href="#Device-Controller"></a>Device Controller</h1>
<p>OS不会直接处理外部设备, OS处理的是device controller</p>
<ul>
<li><strong>controller</strong>是一个或一组<strong>芯片</strong>，位于南桥，向OS提供一个更“简单”（相对直接控制设备而言）的接口
<ul>
<li>比如，OS可能命令“read sector 11,206 from disk 2”。controller需要将将线性的扇区号映射为实际的cylinder, sector, and head，考虑到外侧柱面比内侧多、坏的删区要被重映射为其它山区等等，这个映射会很复杂。</li>
<li>然后controller要决定磁臂停在哪个扇区。 It has to wait until the proper sector has rotated under the head and then start reading and storing the bits as they come off the drive, removing the preamble and computing the checksum. Finally, it has to assemble the incoming bits into words and store them in memory.</li>
<li>To do all this work, controllers often contain small embedded computers that are programmed to do their work.</li>
</ul>
</li>
</ul>
<h1 id="Device-Register"><a class="header-anchor" href="#Device-Register"></a>Device Register</h1>
<ul>
<li>
<p>controller不和device直接交互, 而是和controller的寄存器们( 称为<strong>device register</strong> )交互. driver从OS得到指令，将其翻译后写入device registers。</p>
</li>
<li>
<p>For example, a minimal disk controller might have registers for specifying the disk address, memory address, sector count, and direction (read or write).</p>
</li>
<li>
<p>To activate the controller, the driver gets a command from the operating system, then translates it into the appropriate values to write into the device registers. The collection of all the device registers forms the <strong>I/O port</strong> space, a subject we will come back to in Chap. 5.</p>
</li>
<li>
<p><strong>device registers会被映射到OS的地址空间或者一个特殊的I/O port space</strong></p>
<ul>
<li>前者不需要特殊的I/O instructions，可以被像普通内存数据一样读写，但是消耗了地址空间（  device registers的地址无法被其他程序使用，因此是安全的 ）</li>
<li>后者不消耗地址空间（每个寄存器被映射为一个port address）但需要额外的instructions</li>
</ul>
</li>
</ul>
<h1 id="Driver"><a class="header-anchor" href="#Driver"></a>Driver</h1>
<blockquote>
<p>driver talks to a controller, giving it commands and accepting responses</p>
</blockquote>
<p>各种设备都暴露<strong>物理接口</strong>, 通过<strong>总线</strong>连接到计算机, 最终到达计算机的Controller被统一传输. OS在kernel层面通过driver来控制controller.</p>
<p>虽然通过controller, 可以抽象数据的读取. 但是由于总线的传输需要遵守<strong>数据传输协议</strong>, <u>不同的数据传输协议就对应着不同的driver</u>. OS需要调用相应的driver来解析从controller读出的数据.</p>
<p><strong>因此,  OS不需要关心物理硬件(总线, 物理接口), 只需要关心driver.</strong></p>
<ul>
<li>
<p>总线, 物理接口, 数据传输协议的内容参见<a href="https://lyk-love.cn/2023/04/13/Transport-Buses-Tranfer-Protocals-and-Physical-Interfaces/">Transport Buses, Tranfer Protocals and Physical Interfaces</a></p>
</li>
<li>
<p>每个controller厂商需要为每个操作系统提供一个driver</p>
</li>
<li>
<p>driver一般在kernel mode工作</p>
<ul>
<li>
<p>由于各种driver互不相同，每个计算机需要的都不一样. 因此driver一般都以内核模块的形式安装到OS, 很少直接编译到内核中</p>
</li>
<li>
<p>事实上也有运行在user mode的driver：</p>
<blockquote>
<p>only very few current systems, such as MINIX 3, run all drivers in user space. Drivers in user space must be allowed to access the device in a controlled way, which is not straightforward</p>
</blockquote>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Hardware</tag>
      </tags>
  </entry>
  <entry>
    <title>Computer Memory Error Correction</title>
    <url>/2022/10/11/Computer-Memory-Error-Correction/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Intro</li>
<li>Error Correction</li>
<li>Odd-Even Check</li>
<li>Hamming Code</li>
<li>Cyclic Redundancy Check</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<p>A semiconductor memory system is subject to errors. These can be categorized as hard failures and soft errors.</p>
<ul>
<li>A <strong>hard failure</strong> is <u>a permanent physical defect</u>. 受影响的存储单元不能可靠地存储数据.
<ul>
<li>can be caused by harsh environmental abuse, manufacturing defects, and wear.</li>
</ul>
</li>
<li>A <strong>soft error</strong> is <u>a random, nondestructive event</u>. 它改变了某个或某些存储单元的内容, 但没有损坏机器
<ul>
<li>can be caused by power supply problems or alpha particles.
<ul>
<li>These particles result from radioactive decay and are distressingly common because radioactive nuclei are found in small quantities in nearly all materials.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Both hard and soft errors are clearly undesirable, and most modern main memory systems include logic for both <strong>detecting and correcting errors</strong>.</p>
<h1 id="Error-Correction"><a class="header-anchor" href="#Error-Correction"></a>Error Correction</h1>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Computer%20Architecture/Error%20Correction.png" alt="Error Correction"></p>
<p>Error Correction的基本思想就是使用额外的checkbit.</p>
<p>Steps:</p>
<ol>
<li>
<p>记输入的数据为 $D$ ,  有 $M$ 位. 我们使用函数 $f$ 将其编码为 $K$ 位 checkcode, 记为 $C$. The actual size of the stored word is $ M + K $ bits</p>
</li>
<li>
<p>接收方收到 $M + K$ bits 数据, 其中的 $M$ 位数据记为 $D'$ , $K$ 位checkcode记为 $C'$ .</p>
</li>
<li>
<p>对  $D'$ 再次使用 $f$ 得到 $K$ 位的 $C''$.</p>
</li>
<li>
<p>将 $C'$ 和 $C''$ 做比较( 事实上就是异或 ), 得到故障字(syndrome word) $S$ :<br>
$$<br>
S = C' \oplus C''<br>
$$</p>
<ul>
<li>No errors are detected. 使用数据 $D'$</li>
<li>An error is detected, and it is possible to correct the error. 使用  $D'$ 来生成正确的数据 $D''$ , 并使用 $D''$</li>
<li>An error is detected, but it is not possible to correct it. This condition is reported.</li>
</ul>
</li>
</ol>
<h1 id="Odd-Even-Check"><a class="header-anchor" href="#Odd-Even-Check"></a>Odd-Even Check</h1>
<p>最简单的方法是奇偶校验.</p>
<ul>
<li>
<p>为了方便说明, 我们用“奇偶性”来代指$D$所含有的1的个数是奇数还是偶数. 并定义比特串$D$的奇偶性为$f(D)$.</p>
<ul>
<li>当$1$的个数为奇数时, $f(D)=1$, 反之为$0$.</li>
</ul>
</li>
<li>
<p>定义1位checkbit $C$ ,  $C = f(D)$</p>
</li>
<li>
<p>假设数据为$𝐷=𝐷_M \cdots 𝐷_2𝐷_1$:</p>
</li>
<li>
<p>奇校验:<br>
$$<br>
C=D_{M} \oplus \cdots \oplus D_{2} \oplus D_{1} \oplus 1<br>
$$<br>
偶校验:<br>
$$<br>
C=D_{M} \oplus \cdots \oplus D_{2} \oplus D_{1}<br>
$$</p>
</li>
<li>
<p>奇偶校验的区别仅仅是$C = f(D)$的计算方式不同.</p>
</li>
</ul>
<h2 id="Steps"><a class="header-anchor" href="#Steps"></a>Steps</h2>
<p>以偶校验为例:</p>
<ol>
<li>
<p>发送方计算$C = f(D)$.  将 $C$ 与 $D$ 一同发送</p>
</li>
<li>
<p>接收方收到$C'$ 和 $D'$, 计算 $C'' = f(D')$ :　　<br>
$$<br>
C''=D'<em>{M} \oplus \cdots \oplus D'</em>{2} \oplus D'_{1}<br>
$$</p>
<ul>
<li>如果是奇校验, 则$C''=D'<em>{M} \oplus \cdots \oplus D'</em>{2} \oplus D'_{1} \oplus 1$</li>
</ul>
</li>
<li>
<p>计算$S$<br>
$$<br>
S = C' \oplus C''<br>
$$</p>
</li>
</ol>
<h2 id="Error-Detection"><a class="header-anchor" href="#Error-Detection"></a>Error Detection</h2>
<p>$$<br>
S = C' \oplus C''<br>
$$</p>
<p>已知$C = f(D), C'' = f(D')$. 现在根据 $C$, $D$在传输过程中的出错情况进行分类讨论:</p>
<ul>
<li>
<p>$D$:</p>
<ol>
<li>如果$D$在传输过程中没有出错, 则$D' = D, C'' = f(D') = f(D) $;</li>
<li>如果$D$在传输过程中出错了, 但出错位数为偶数位, 则$C'' = f(D') = f(D)$</li>
<li>如果$D$在传输过程中出错了, 且出错位数为奇数位, 则$C'' = f(D') = \neg f(D)$</li>
</ol>
</li>
<li>
<p>$C$: 注意到$C$仅有1位</p>
<ol>
<li>如果$C$在传输过程中没有出错, 则$C' = C, C' = C = f(D)$</li>
<li>如果$C$在传输过程中出错了, 则$C' = \neg C = \neg f(D)$</li>
</ol>
</li>
</ul>
<p>也就是说:</p>
<ul>
<li>如果$D$在传输过程中没有出错, 或仅仅出错了偶数位, 则$C'' = f(D)$. 否则$C'' = \neg f(D)$</li>
<li>如果$C$在传输过程中没有出错, 则$C' = f(D)$. 否则$C' = \neg f(D)$</li>
</ul>
<p>现在我们考虑$S$:</p>
<ul>
<li>
<p>$𝑆 = 0$ : $C' =C''$, 则:</p>
<ol>
<li>要么$C' = C'' = f(D)$, 即$D$没出错或仅仅出错了偶数位, 且$C$没出错;</li>
<li>要么$C' = C'' = \neg f(D)$, 即$D$出错了奇数位, 且$C$也出错.</li>
<li>在这两种情况下, $C+D$ <strong>要么没出错, 要么只出错了偶数位</strong>
<ul>
<li>$+$表示比特串的concataion</li>
<li>注意到$C$只有一位, 因此$C$出错(1位)且$D$出错奇数位时,  $C+D$ 就出错了偶数位</li>
</ul>
</li>
</ol>
</li>
<li>
<p>$S = 1$: $C' \ne C''$, 则$C+D$ <strong>出错了奇数位</strong></p>
</li>
</ul>
<h2 id="Drawbacks"><a class="header-anchor" href="#Drawbacks"></a>Drawbacks</h2>
<ul>
<li>不能检测到偶数个bit出错的情况</li>
<li>发现错误后不能校正, 因为不能定位到出错的bit.</li>
</ul>
<h1 id="Hamming-Code"><a class="header-anchor" href="#Hamming-Code"></a>Hamming Code</h1>
<p>The simplest of the error-correcting codes is the <strong>Hamming code</strong> devised by <em>Richard Hamming</em> at Bell Laboratories.</p>
<p>Hamming Code is a <strong>single-error-correcting (SEC) code</strong></p>
<ul>
<li><strong>只能检测和纠正1-bit errors</strong></li>
</ul>
<h2 id="Idea"><a class="header-anchor" href="#Idea"></a>Idea</h2>
<p>见如下Venn diagram:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Computer%20Architecture/Hamming%20Code.png" alt="Hamming Code"></p>
<p>假设$ M = 4 $ :</p>
<ul>
<li>我们画三个圆, 中间相交的四个部分分别填4 data bits ( 如图a ).</li>
<li>剩下的最外面三个部分填 <strong>parity bits</strong> ( 也就是checkcode ). Each parity bit is chosen so that the total number of 1s in its circle is <strong>even</strong>( 如图b )</li>
<li>Now, if an error changes one of the data bits ( 如图c ), it is easily found.</li>
<li>By checking the parity bits, discrepancies are found in circle A and circle C but not in circle B. Only one of the seven compartments is in A and C but not B ( 如图d ). The error can therefore be corrected by changing that bit.</li>
</ul>
<h2 id="Steps-2"><a class="header-anchor" href="#Steps-2"></a>Steps</h2>
<ul>
<li>将数据分成几组, 对每一组都使用奇偶校验. 我们默认使用偶校验</li>
<li>数据输入: 为数据 $D$ 中的每组都生成checkbit, 合并得到 $K$ 位check code $C$</li>
<li>数据输出: 为数据 $D'$ 中的每组都生成checkbit, 合并得到 $K$ 位check code $C''$</li>
<li>检错:将 $C''$ 和取出的 $C’$ 按位进行异或, 生成 $K $位 syndrome word $S$. 对$S$分类讨论:
<ul>
<li>全部是0:没有检测到错误</li>
<li>有且仅有1位是1:错误发生在校验码中的某一位，不需要纠正</li>
<li>有多位为1:错误发生在数据中的某一位，将𝐷′中对应数据位 取反即可纠正(得到𝐷&quot;)</li>
</ul>
</li>
</ul>
<h2 id="Check-Code-Length"><a class="header-anchor" href="#Check-Code-Length"></a>Check Code Length</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Computer%20Architecture/Increase%20in%20Word%20Length%20with%20Error%20Correction.png" alt="Increase in Word Length with Error Correction"></p>
<ul>
<li>从上表可以看到, 使用checkcode会使得实际可用的主存( 用户可见的主存 ) 比 事实上的主存 大小更小. 对于64-bit的内存, 如果使用7bit的hamming code, 它的实际word-size是 64 + 7 = 71bit, 而用户只能看见其中的64bit.</li>
</ul>
<p>假设最多1位发生错误, 可能的情况有:</p>
<ul>
<li>$D$ 中有1位出现错误: 有 $M$ 种情况</li>
<li>$C$ 中有1位出现错误: 有 $K$ 种情况</li>
<li>没有错误: 有 $1$ 种情况</li>
</ul>
<p>因此, $K$ 位的$S$ 需要能表示 $M + K + 1$ 种情况, 即满足:<br>
$$<br>
2^{K}-1 \geq M+K<br>
$$<br>
E.g. for a word of 8 data bits ( $M = 8$ ), we have</p>
<ul>
<li>$K=3: 2^{3}-1&lt;8+3$</li>
<li>$K=4: 2^{4}-1&gt;8+4$</li>
</ul>
<p>因此, $M=8$ 时 $K=4$</p>
<h2 id="Checkbit"><a class="header-anchor" href="#Checkbit"></a>Checkbit</h2>
<p>假设$M=8, K=4$. 则数据最终被表示为12bit. 下表中的Position number是这12位中每个bit的的位置(十进制)的二进制表示.</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Computer%20Architecture/Layout%20of%20Data%20Bits%20and%20Check%20Bits.png" alt="Layout of Data Bits and Check Bits"></p>
<ul>
<li>
<p><strong>checkbit的position number是2的幂</strong>:</p>
<ul>
<li>$\mathrm{C}1$: 0001</li>
<li>$\mathrm{C}2$: 0010</li>
<li>$\mathrm{C}4$: 0100</li>
<li>$\mathrm{C}8$: 1000</li>
<li>...</li>
</ul>
</li>
<li>
<p><strong>Each check bit operates on every data bit whose position number contains a 1 in the same bit position as the position number of that check bit.</strong></p>
<ul>
<li>
<p>比如说, $\mathrm{C}1$ 是 $0001$ , 因此$\mathrm{C}1$ 就和所有的 position number 的第一位为 $1$ 的 databit 有关, 即data bit positions 3, 5, 7, 9 and 11 (D1, D2, D4, D5, D7)</p>
<ul>
<li>bit positions 3, 6, 7, 10, and 11 all contain a 1 in the second bit position, as does C2;</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Computer%20Architecture/checkbit%20cal.png" alt="checkbit cal"></p>
</li>
<li>
<p>Looked at another way, bit position <em>n</em> is checked by those bits $C_i$ such that<br>
$$<br>
n=\sum_{i=1}^{K} (C_{i})<br>
$$<br>
For example, position 7 is checked by bits in position 4, 2, and 1; and 7 = 4 + 2 + 1.</p>
</li>
</ul>
</li>
</ul>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<p>Let us verify that this scheme works with an example. Assume that the 8-bit input word is $00111001$, with data bit $\mathrm{D}1$ in the rightmost position. The calculations are as follows:</p>
<ol>
<li>
<p>Sender: Compute $C$ :</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Computer%20Architecture/checkbit%20exp%20step1.png" alt="checkbit exp step1"></p>
</li>
<li>
<p>假设 $\mathrm{D}3$ 出错, 从0变成了1. 接收方收到 $D'$ and $C'$, then Compute $C''$ :</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Computer%20Architecture/checkbit%20exp%20step2.png" alt="checkbit exp step2"></p>
</li>
<li>
<p>最后计算故障字$S$:<br>
$$<br>
S = C' \oplus C''<br>
$$<br>
<img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Computer%20Architecture/checkbit%20exp%20step3.png" alt="checkbit exp step3"></p>
<p>得到$0110 = 3$, 发现是$\mathrm{D}3$ 出错</p>
</li>
</ol>
<h2 id="Why-Only-One-Bit-Errors"><a class="header-anchor" href="#Why-Only-One-Bit-Errors"></a>Why Only One-Bit Errors?</h2>
<p>In computer operation 2-bit errors are <strong>very, very unlikely</strong>.</p>
<p>假设:  the probability of a 1-bit error  =   $10^{-9}$ , if a computer makes 10,000,000 moves a second</p>
<p>On average you get an error <strong>every 100 seconds = less than 2 minutes.</strong></p>
<p>相对应的, 2-bit error的概率大概是 $10^{-18}$, 使用同样的电脑, you get a 2-bit error once <strong>every 1011 seconds = once every 3,171 years.</strong></p>
<p>There may be other considerations, specifically to do with data communications. It is quite common to establish communications over noisy lines, for example, and then the probability of errors increase dramatically. It often happens that there is a short period when may be multiple-bit errors, and it would be impracticable to use a Hamming code in this situation. Other schemes more appropriate to this problem are used instead.</p>
<h2 id="SEC-DED"><a class="header-anchor" href="#SEC-DED"></a>SEC-DED</h2>
<p>Hamming Code只能检查和纠正1-bit error. More commonly, semiconductor memory is equipped with a <strong>single-error-correcting, double-error-detecting (SEC-DED) code</strong>. 这通过添加一个额外的checkbit完成</p>
<ul>
<li>单纠错, 双检错. ( 可以找到两个位产生的错误, 并纠正一个位的错误 )</li>
</ul>
<h3 id="Idea-2"><a class="header-anchor" href="#Idea-2"></a>Idea</h3>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Computer%20Architecture/SEC-DED.png" alt="SEC-DED"></p>
<p>This figure illustrates how such a code works, again with a 4-bit data word.</p>
<ol>
<li>If <strong>two errors occur</strong> ( 如图c )</li>
<li>The checking procedure goes astray ( 如图d )</li>
<li>The situation worsens the problem by creating a third error ( 如图e )</li>
<li>To overcome the problem, <strong>an eighth bit is added</strong> that is set so that the total number of 1s in the diagram is even. The extra parity bit catches the error (f).</li>
</ol>
<h3 id="Steps-3"><a class="header-anchor" href="#Steps-3"></a>Steps</h3>
<ul>
<li>
<p>添加:<br>
$$<br>
C_{5}=D_{1} \oplus D_{2} \oplus D_{3} \oplus D_{5} \oplus D_{6} \oplus D_{8}<br>
$$</p>
</li>
<li>
<p>SED-DED的故障字 $S$ 的分析:</p>
<ul>
<li>都是0: 没有检测到错误</li>
<li>1位为1: 在5个校验位中有一个发生了错误, 不需要修正</li>
<li>2位为1: 有2位数据和校验位出现错误，但找不到错误的位置</li>
<li>3位为1: 8位数据位中有1位发生了错误，该错误可以被纠正</li>
<li>3位以上均为1: 严重情况，检查硬件</li>
</ul>
</li>
</ul>
<h2 id="Drawbacks-2"><a class="header-anchor" href="#Drawbacks-2"></a>Drawbacks</h2>
<ul>
<li>Hamming Code需要额外的存储空间</li>
<li>Hamming Code需要先对数据进行分组, 这无法处理流式数据</li>
</ul>
<h1 id="Cyclic-Redundancy-Check"><a class="header-anchor" href="#Cyclic-Redundancy-Check"></a>Cyclic Redundancy Check</h1>
<p>循环冗余校验(Cyclic Redundancy Check, CRC)</p>
<ul>
<li>适用于以<strong>流格式</strong>存储和传输大量数据</li>
<li>用数学函数生成数据和校验码之间的关系</li>
</ul>
<h2 id="Steps-4"><a class="header-anchor" href="#Steps-4"></a>Steps</h2>
<ul>
<li>Get Check Code:
<ul>
<li>假设数据有 $M$ 位，左移数据 $K$ 位(右侧补0), 并用 $K+1$ 位<strong>生成多项式</strong>除它(<strong>模2运算</strong>)
<ul>
<li>模2除法与算术除法类似，但每一位除的结果不影响其它位，即不向上一位借位，所以实际上就是异或</li>
</ul>
</li>
<li>采用 $K$ 位余数作为checkcode</li>
<li>把checkcode放在数据(不含补的0 )后面, 一同存储或传输</li>
</ul>
</li>
<li>校错: 如果M+K位内容可以被生成多项式除尽，则没有检测到错误 • 否则，发生错误</li>
</ul>
<h2 id="Example-2"><a class="header-anchor" href="#Example-2"></a>Example</h2>
<p>假设数据是 $100011$, 生成多项式为$x^3 + 1$ ( 二进制表示为$1001$ ):</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Computer%20Architecture/CRC.png" alt="CRC"></p>
<p>最后生成的checkcode是$111$</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Computer Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>Network Security</title>
    <url>/2022/08/28/Computer%20Networking%20Network-Security/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Intro</li>
<li>Confidentiality</li>
<li>Digital Signature</li>
<li>Message Digest</li>
<li>End-point Authentication</li>
<li>Key Distribution</li>
<li>Securing Wireless LANs and 4G/5G Cellular Networks</li>
<li>Operational security</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<h2 id="Target"><a class="header-anchor" href="#Target"></a>Target</h2>
<p>网络安全有四大目标:</p>
<ul>
<li><em>Confidentiality</em>：只有信息的发送方和接收方才知道信息的内容</li>
<li><em>Message integrity</em>：信息接收方需要确认所收到的信息<strong>没有被人篡改</strong>过.</li>
<li><em>Authentication</em>: 鉴别分为两种:
<ul>
<li><em>Message Authentication</em>: 对报文的鉴别, 即报文是不是对方发的, 是不是别人伪造的
<ul>
<li>很多书( 谢希仁, 自顶而下... ) 都把报文鉴别也放到 <em>Message integrity</em> 的范畴, 我觉得这样会引起混淆. 因此我用自己的分类方式.</li>
<li>事实上, <strong>实现报文鉴别的方法, 也都实现了报文完整性, 因此我不会单独介绍<em>Message integrity</em>和<em>Message Authentication</em>, 而是直接介绍实现了这两个特性的方法</strong>:
<ol>
<li><strong>数字签名</strong></li>
<li><strong>报文摘要</strong></li>
</ol>
</li>
</ul>
</li>
<li><em>End-point authentication</em> or <em>Entity authenticatio</em>: 对所通信的对象的鉴别</li>
<li>报文鉴别是对每一个报文的, 而实体鉴别是对于通信实体的. 因此实体鉴别只需在通信开始时实行一次.</li>
<li>一般来说, 实体鉴别是双向的.</li>
</ul>
</li>
<li><em>Operational security</em>: 几乎所有组织的网络最终都是连到互联网的，所以网络很容易受到攻击, 需要确保网络的运行时安全.</li>
</ul>
<h2 id="Problems"><a class="header-anchor" href="#Problems"></a>Problems</h2>
<p>计算机网络的攻击可以分为四种:</p>
<ol>
<li>截获——从网络上窃听他人的通信内容</li>
<li>中断——有意中断他人在网络上的通信</li>
<li>篡改——故意篡改网络上传送的报文</li>
<li>伪造——伪造信息在网络上传送</li>
</ol>
<p>此外, 攻击还可以分为被动攻击和主动攻击:</p>
<ul>
<li>被动攻击: Attacker只是观察和分析PDU( 协议数据单元 )而不干扰信息流</li>
<li>主动攻击: Attacker对PDU进行各种处理</li>
</ul>
<h2 id="Assumptions"><a class="header-anchor" href="#Assumptions"></a>Assumptions</h2>
<p>在本文中，我们假设Bob和Alice在偷情, 他们互相在网络上通信. 而Bob的妻子Trudy, 想要通过攻击网络来发现这段恋情.（我认为这个例子更加生动形象，也更能体现网络安全的重要作用）</p>
<h1 id="Confidentiality"><a class="header-anchor" href="#Confidentiality"></a>Confidentiality</h1>
<ul>
<li><em>cryptography</em>: 密码编码学，是密码体制的设计学
<ul>
<li>加密算法也称为<em>cypher</em></li>
</ul>
</li>
<li><em>cryptanalysis</em>: 密码分析学，是在未知密钥的情况下从密文推演出明文或密钥的技术</li>
<li><em>cryptology</em>：密码学， 密码编码学+密码分析学</li>
</ul>
<hr>
<p>密码体制的安全性:</p>
<ul>
<li>无条件安全: 不论截取者获得了多少密文，但在密文中都没有足够的信息来唯一地确定出对应的明文,  即该密码体制理论上是不可破的
<ul>
<li>在无任何限制的条件下，目前几乎所有实用的密码体制均是可破的。 因此我们转而追求“计算上安全”</li>
</ul>
</li>
<li>计算上安全： 密码不能在一定时间内被可以使用的计算资源破译</li>
</ul>
<h2 id="Cryptographic-Model"><a class="header-anchor" href="#Cryptographic-Model"></a>Cryptographic Model</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Security/Cryptographic%20components.png" alt="Cryptographic components"></p>
<p>Alice向Bob发送的信息是<strong>明文</strong>（ plaintext, or cleartext ）, 通过<strong>encryption algorithm</strong>加密后，就得到了<strong>密文</strong>( <strong>ciphertext</strong> )</p>
<h3 id="Encryption"><a class="header-anchor" href="#Encryption"></a>Encryption</h3>
<p>Alice发送明文$m$, 并提供一个密钥$K_A$,  加密算法( encryption algorithm ) $E$接受$m$和$K_A$， 生成密文$c$：<br>
$$<br>
c = E_{K_A}(m)<br>
$$</p>
<ul>
<li>密钥( key )是一串秘密的字符串</li>
</ul>
<h3 id="Decryption"><a class="header-anchor" href="#Decryption"></a>Decryption</h3>
<p>Bob收到密文$c$后，提供一个密钥$K_B$，解密算法( decryption algorithm ) $D$接受$c$和$K_B$，得到明文$m$:<br>
$$<br>
m = D_{K_B}(c) = D_{K_B}( E_{K_A}(m) )<br>
$$</p>
<ul>
<li>解密算法是加密算法的逆运算，在进行解密运算时，如果不使用事先约定好的密钥就无法解出明文</li>
</ul>
<h3 id="Key-System"><a class="header-anchor" href="#Key-System"></a>Key System</h3>
<ul>
<li>对称加密系统( symmetric key system ):  $K_A = K_B$ ， 且两个密钥都是保密的.</li>
<li>非对称加密系统( 也称为公钥加密系统 , public key system):  $K_A \ne K_B$ ， 且密钥分为公钥( public key )和私钥( private key ),  公钥对全世界公开， 而私钥只有通信的一方知道.
<ul>
<li>已有的非对称加密算法( RSA等 )相比已有的对称加密算法( DES, AES )都慢得多. 因此很多低时延场景都使用对称加密.
<ul>
<li>比如后文介绍的WIFI网络, 无论是交换密钥还是数据传输都使用对称加密.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Attack-Types"><a class="header-anchor" href="#Attack-Types"></a>Attack Types</h2>
<p>对密码体制的攻击，分为以下三种：</p>
<ul>
<li><em>Ciphertext-only attack</em>： 攻击者只知道密文</li>
<li><em>Known-plaintext attack</em>： 攻击者知道密文，以及一部分密文-明文对照( (plaintext, ciphertext) pairings  )</li>
<li><em>Chosen-plaintext attack</em>: 攻击者可以选择明文，然后获取其对应的密文。  使用Chosen-plaintext attack， 攻击者很容易破解整个密码体制
<ul>
<li>当然，对于后面介绍的现代密码体制，即使是Chosen-plaintext attack也很难破解</li>
</ul>
</li>
</ul>
<h2 id="Symmetric-Key-System"><a class="header-anchor" href="#Symmetric-Key-System"></a>Symmetric Key System</h2>
<h3 id="Old-Time-Cipher"><a class="header-anchor" href="#Old-Time-Cipher"></a>Old-Time Cipher</h3>
<p>我们先来看看古代的对称加密系统：</p>
<ul>
<li>凯撒加密（ Caesar cipher ）： 选择数字k, 把英文文本的每个字母替换成其在字母表上后面第k位的字母
<ul>
<li>很容易破解</li>
</ul>
</li>
<li>单字母加密( monoalphabetic cipher ): 使用一张明文字母 &lt;--&gt; 密文字母的映射表，将明文按表加密</li>
<li>多字母加密( polyalphabetic encryption ): 对明文的每个字母，先后使用多个映射表加密</li>
</ul>
<p>这些加密算法都很简陋，即使攻击者不知道任何明文( 即Ciphertext-only attack )，也可以根据一些手段进行破解：</p>
<ol>
<li>通过统计学分析。 英文中，统计意义上最常见的字母是e和f，分别占文本的13%和9%</li>
<li>通过猜词，比如i和t常一起出现，成为it。 甚至对于Alice和Bob的情况，Trudy很可能会猜测文本中存在“love”、“Alice”、“Bob”等词，获得更多信息</li>
</ol>
<h3 id="Block-Cipher"><a class="header-anchor" href="#Block-Cipher"></a>Block Cipher</h3>
<p>与古代按字母加密不同，现代加密系统都采用分组加密。 如下所示：</p>
<ol>
<li>在加密前，先对整个的明文进行<strong>分组</strong>。对于64位的报文， 我们将其分成8位的组( 每个组也就是一个8位的二进制数据 )
<ul>
<li><strong>正由于Block Cypher接受固定位数的Block, 因此许多协议中都要加入一个padding字段, 用于填充报文以便于加密</strong>.</li>
</ul>
</li>
<li>对每个组进行<strong>加密</strong>处理加密，形成64位的密文( 64-bit scrambler )
<ul>
<li>可以按表加密，即图上的T。 更现代的做法是使用加密<strong>函数</strong>F</li>
</ul>
</li>
<li><strong>重排</strong>这64位密文，形成输出密文( 64-bit output )</li>
<li>将输出密文作为输入，回到步骤1。 循环n次，得到最终结果
<ul>
<li>循环n次的原因在于增大输入中的每一位对输出的影响。 如果只循环一次，则输入中的1位，至多影响输出中的一位。加密过程会更容易破解</li>
</ul>
</li>
</ol>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Security/Block%20Cipher.png" alt="Block Cipher"></p>
<p>暴力破解算法，就需要把n位长的密钥都是一遍，也就是$2^n$次的开销</p>
<h3 id="CBC"><a class="header-anchor" href="#CBC"></a>CBC</h3>
<p>对于两个完全相同的分组，其分组加密后的密文也会是相同的。比如，对于HTTP报文， 普遍存在内容如“HTTP/1.1”的块， 它们对应的密文也是相同的，这会让攻击者很容易猜出一些信息。 为此，分组加密还引入了<strong>密钥+ 随机数</strong>：</p>
<ol>
<li>
<p>我们假设组为k位。 对于第$i$组( 记为$m(i)$ )，报文发送方生成一个随机的k位数$r(i)$, 然后用密钥$S$加密:<br>
$$<br>
c(i) = K_S( \ m(i) \oplus r(i) \ )<br>
$$</p>
<ul>
<li>$r(i)$是随机的，因此对于内容相同的$m(i) = m(j)$， 有$c(i) \ne c(j)$</li>
</ul>
</li>
<li>
<p>发送方把每组的密文$c(i)$和随机数$r(i)$一起发送。 接收方收到密文和随机数后，使用对称密钥$S$解密:<br>
$$<br>
m(i) = K_S( \ c(i) \ )\oplus r(i)<br>
$$</p>
<ul>
<li>攻击者可以获得$c(i)$和$r(i)$，但不知道密钥$S$，因此无法解密得到$m$</li>
</ul>
</li>
</ol>
<p>该算法的缺点是：对于每个k位的组，都要生成一个k位的随机数r。 二者都被传输，使得报文带宽翻倍。解决方法是采用<strong>Cipher Block Chaining (CBC)</strong>：</p>
<ol>
<li>
<p>在加密前，发送方先生成一个随机的k位数$c(0)$, 称为<strong>Initialization Vector (IV)</strong>， 将其用<strong>明文</strong>发送</p>
</li>
<li>
<p>对于第一个块，采用$c(0)$作为上文的$r(1)$, 用密钥$S$加密:<br>
$$<br>
c(1) = K_S( \ m(1) \oplus c(0) \ )<br>
$$</p>
</li>
<li>
<p>对于第$i$组， 发送方计算c(i):<br>
$$<br>
c(i) = K_S( \ m(i) \oplus c(i-1) \ )<br>
$$<br>
注意到，CBC就是将$c(i-1)$作为$r(i)$.</p>
</li>
<li>
<p>对于第$i$组，发送方只需发送其密文$c(i)$.  因此接收方总共接收到$c(0), c(1), c(2), ...$， 总共只增加了$c(0)$的带宽</p>
</li>
</ol>
<h3 id="Modern-Ciphers"><a class="header-anchor" href="#Modern-Ciphers"></a>Modern Ciphers</h3>
<p>如前所述，现代的公钥加密算法采用分组加密，且都用函数F( 而非图上的表T )加密， 算法都接受一个密钥，来决定每个块的加密函数($F_1, F_2,F_3...$)以及重排时的规则等等。</p>
<ul>
<li>当然，该密钥还会用于CBC</li>
</ul>
<h4 id="DES"><a class="header-anchor" href="#DES"></a>DES</h4>
<p>DES( Data Encryption Standard )：名为“数据加密标准”，由美国研发</p>
<ul>
<li>uses 64-bit blocks with a 56-bit key</li>
</ul>
<p>DES对56位密钥很容易被攻破， 为此又出现了DES3。 它使用两个密钥，把一个64位明文用一个密钥加密，再用另一个密钥解密，然后再使用第一个密钥加密，即：</p>
<p>$$<br>
c = \mathrm{DES}<em>{K_1}( \mathrm{DES}</em>{K_2}^{-1}( \mathrm{DES}_{K_1} ) )<br>
$$</p>
<h4 id="AES"><a class="header-anchor" href="#AES"></a>AES</h4>
<p>AES( Advanced Encryption Standard ): 名为“高级加密标准”。由美国标准与技术协会（NIST）对该标准对实现进行遴选，最终选中了Joan Daemen和Vincent Rijmen提交的Rijndael算法</p>
<ul>
<li>uses 128-bit blocks and can operate with keys that are 128, 192, and 256 bits long</li>
</ul>
<h2 id="Public-Key-System"><a class="header-anchor" href="#Public-Key-System"></a>Public Key System</h2>
<p>公钥密码体制: 使用不同的加密密钥与解密密钥</p>
<ul>
<li>由斯坦福（Stanford）大学的研究人员Diffie与Hellman于1976年提出［DIFF76].</li>
<li>最著名的是RSA, 详见拙著<a href="https://lyk-love.cn/2022/08/24/RSA/#more">RSA</a></li>
</ul>
<p>在公钥密码体制中，加密密钥 PK （public key ）是向公众公开的，而解密密钥 SK （secret key )则是需要保密的. 加密算法E 和解密算法D也都是公开的.</p>
<p>公钥密码体制的加密和解密过程：</p>
<ol>
<li>
<p>接收者B先生成一堆密钥：公钥$PK_{B}$ ( public key, 向公众公开. 用于加密 )和私钥$SK_{B}$ ( secret key, 保密. 用于解密  ).</p>
</li>
<li>
<p>发送者A用B的公钥$PK_{B}$通过E运算对明文加密，得出密文，发送给B:<br>
$$<br>
c = E_{PK_{B}}(m)<br>
$$</p>
</li>
<li>
<p>B用自己的私钥$SK_{B}$通过D运算进行解密，恢复出明文，即:<br>
$$<br>
m = D_{SK_{B}}(c) = D_{SK_{B}}( \  E_{PK_{B}}(m) \ )<br>
$$</p>
</li>
<li>
<p>虽然在计算机上可以容易地产生成对的$PK_{B}$和$SK_{B}$ ，但从已知的$PK_{B}$实际上不可能推导出$SK_{B}$，即从$PK_{B}$到$SK_{B}$是“计算上不可能的 ”.</p>
<ul>
<li>参见我的<a href="https://lyk-love.cn/2022/08/24/RSA/#more">RSA</a>, RSA算法生成公钥$(n,e)$ 和私钥$(n, d)$ , 要根据$(n,e)$ 推导出$d$, 需要对$n$ 进行质数分解. 目前质数分解是计算上不可能的</li>
</ul>
</li>
<li>
<p>虽然公钥可用来加密，但却不能用来解密，即<br>
$$<br>
D_{ PK_{B} } (E_{PK_{B}}(m)) \ne m<br>
$$</p>
</li>
<li>
<p>对<a href="https://lyk-love.cn/2022/08/24/RSA/#more">RSA</a>来说,它的加密函数和解密函数都是一个函数, 只是加密和解密时接受的参数不同. 因此可以把加密函数用于解密, 只要给它输入私钥和密文即可; 对于解密函数也同理<br>
$$<br>
D_{SK_{B}} (E_{PK_{B}}(m)) = E_{SK_{B}}(D_{PK_{B}}(m)) = m.<br>
$$</p>
</li>
</ol>
<h2 id="Cryptographic-Hash-Functions"><a class="header-anchor" href="#Cryptographic-Hash-Functions"></a>Cryptographic Hash Functions</h2>
<p>a hash function takes an input, $m$, and computes a fixed-size string $H(m)$ known as a hash.</p>
<ul>
<li>
<p><strong>cryptographic hash function</strong>: 哈希函数, 且满足 It is <strong>computationally infeasible</strong> to find any two different messages <em>x</em> and <em>y</em> such that $H(x) = H(y)$ , which means it's a one-way function.</p>
<ul>
<li>cryptographic hash function 就是比较难发生碰撞的Hash函数, 常见的Checksum和CRC校验都属于Hash函数, 但都很容易碰撞, 因此不适合作为“加密哈希函数”. 具体例子见<a href="https://github.com/LYK-love/Lazy-Scripts/blob/master/checksum.py">我的checksum实现</a></li>
<li>对于$(m, H(m))$ , 入侵者不可能使用$m'$替换$m$并使得$H(m') == H(m)$</li>
</ul>
</li>
<li>
<p>最初的著名的加密哈希函数是MD5 ( Message Digest version 5 ), 由Rivest发明. 不过MD5在2004年被王小云给破解了.</p>
</li>
<li>
<p>后来, 美国标准与技术协会NIST又提出了SHA( Secure Hash Algorithm ), SHA-1也被破解了. 现在一般用SHA-2, 3 ...</p>
</li>
</ul>
<h3 id="MD5"><a class="header-anchor" href="#MD5"></a>MD5</h3>
<p>MD5代码为128位</p>
<p>Steps:</p>
<ol>
<li>append: 先把报文按模 $2^{64}$ 计算其余数（64位），追加在报文后面</li>
<li>padding: 在报文和余数之间填充1～512位，使得填充后的总长度是512的整数倍. 填充的首位是1，后面都是0
<ul>
<li>填充到固定位数, 用于Block Cypher</li>
</ul>
</li>
<li>把追加和填充后的报文分割为一个个512位的数据块，每个512位的报文数据再分成4个128位的数据块依次送到不同的散列函数进行4轮计算。每一轮又都按32位的小数据块进行复杂的运算。一直到最后计算出MD5报文摘要代码（128位）</li>
</ol>
<h3 id="SHA"><a class="header-anchor" href="#SHA"></a>SHA</h3>
<h1 id="Digital-Signature"><a class="header-anchor" href="#Digital-Signature"></a>Digital Signature</h1>
<p>数字签名实现了以下三点:</p>
<ol>
<li>接收者能够核实发送者对报文的签名。也就是说，接收者能够确信该报文的确是发送者发送的。其他人无法伪造对报文的签名. 即<strong>报文鉴别</strong></li>
<li>接收者确信所收到的数据和发送者发送的完全一样而没有被篡改过. 即<strong>报文完整性</strong></li>
</ol>
<p>数字签名的步骤:</p>
<ol>
<li>发送方A用自己的撕咬对报文进行加密, 发给接收方B.</li>
<li>B用A的公钥对数据解密, 得到报文</li>
</ol>
<ul>
<li>因为除A外没有别人持有A的私钥. 别人如果伪造A向B发报文, B将无法用A对公钥进行解密, 这就实现了<strong>报文鉴别</strong>.</li>
<li>同理, 别人篡改过这篇报文, 但因为不知道A的私钥, B将将无法用A对公钥进行解密, 这就实现了<strong>报文完整性</strong>.</li>
<li>注意, 任何人用A的公钥都可以得出A发送的明文. 因此数据签名并不能用于保密.  如果要加密的话, 可以再使用加密算法.</li>
</ul>
<h1 id="Message-Digest"><a class="header-anchor" href="#Message-Digest"></a>Message Digest</h1>
<p>Message Digest实现了报文完整性和报文鉴别, Message Digest通过报文鉴别码MAC实现.</p>
<ul>
<li>NB: 局域网中使用的媒体接入控制MAC也是使用这三个字母, 因此在看到MAC时应注意上下文.</li>
<li><strong>报文鉴别码MAC和数字签名的最大区别</strong>: 数字签名需要对整个报文进行加密, 而MAC只需要对报文的Hash $H$ 进行加密. 而 $H$ 一般远小于整个报文, 因此MAC消耗的资源更少. 当然MAC存在哈希碰撞的问题, 所以可以理解为 MAC 比数字签名“轻”一点, 但是安全性弱一点.</li>
</ul>
<h2 id="Negative-Example"><a class="header-anchor" href="#Negative-Example"></a>Negative Example</h2>
<p>先来看一个反例. 下面给出的简单步骤, 看起来似乎可以实现报文的完整性和报文鉴别:</p>
<ol>
<li>用户A首先根据自己的明文 $X$计算出散列 $H ( X )$ ( 例如,使用MD5 ). 为方便起见, 我们把得出的散列$H ( X )$记为$H$ .</li>
<li>用户A把散列$H$拼接在明文 $X$ 的后面，生成了扩展的报文$(X,H)$, 然后发送给B.</li>
<li>用户B收到了这个扩展的报文$(X,H)$. 因为散列的长度$H$是早已知道的固定值, 因此可以把收到的散列$H$和明文$X$分离开. B通过散列函数的运算, 计算出收到的明文$X$ 的散列$H ( X )$. 若$H ( X ) = H$, 则B似乎可以相信所收到的明文是A发送过来的.</li>
</ol>
<p>像上面列举的做法，实际上是<strong>不可行</strong>的 . 设想某个入侵者创建了一个伪造的报文$M$ ，然后也同样地计算出其散列$H ( M )$ , 并且冒充A把拼接有散列的扩展报文发送给B. B收到扩展的报文$(M,H(M))$后，按照上面步骤 (3) 的方法进行验证, 发现一切都是正常的, 就会误认为所收到的伪造报文就是A发送的.</p>
<h2 id="Message-Authentication-Code"><a class="header-anchor" href="#Message-Authentication-Code"></a>Message Authentication Code</h2>
<p>解决上面问题的办法并不复杂，就是对散列进行一次加密( 对称和非对称都可以 ):</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Security/Message%20Digest.png" alt="Message Digest"></p>
<ol>
<li>
<p>在A从报文$X$导出散列$H$后，就对散列$H$用密钥 $K$ 加密. 这样得出的结果叫做<strong>报文鉴别码 MAC</strong>（Message Authentication Code )</p>
<ul>
<li>现在已经有了好几个不同的MAC标准，而使用最广泛的就是HMAC，它可以和MD5或SHA一起使用［RFC 2104, 6151].</li>
</ul>
</li>
<li>
<p>A把已加密的报文鉴别码MAC拼接在报文 $X$ 的后面，得到扩展的报文，发送给B.</p>
</li>
<li>
<p>B收到后把MAC与报文 $X$ 分离出来, 然后用密钥对MAC解密, 得到加密前的散列$H$, 再计算出$X$的散列$H ( X )$, 将$H ( X )$  与 $H$比较. 由于入侵者无法对MAC解密.</p>
<ul>
<li>NB: 该这里为了节约计算资源, 没有加密 $X + H$ , 只加密了 $H$ .  $H$ 大小一般远小于 $X$ .</li>
</ul>
</li>
</ol>
<h2 id="Usage"><a class="header-anchor" href="#Usage"></a>Usage</h2>
<p>在链路层, 大量交换机需要交换报文, 为了实现报文完整性和报文鉴别, 且保证通信速度( Digital Signature太慢了 ), 一般都用Message Digest.</p>
<ul>
<li>Message Digest 使用了加密算法, 也就需要密钥分配, 详见后文<em>Key Distribution</em></li>
</ul>
<h1 id="End-point-Authentication"><a class="header-anchor" href="#End-point-Authentication"></a>End-point Authentication</h1>
<p>or Entity Authentication</p>
<p>你可能认为只要通信时每一个报文都采用HMAC之类的方式保证报文鉴别和报文完整性, 就能实现整个通信过程的安全, 这是错误的.</p>
<p>注意, 实体鉴别只需要在通信建立时实施一次. 此外在通信过程中的每一个报文, 依然需要进行报文鉴别和报文完整性检查, 以保证报文的安全性.</p>
<h2 id="IP-Spoofing"><a class="header-anchor" href="#IP-Spoofing"></a>IP Spoofing</h2>
<ul>
<li>IP Spoofing: C可以截获A的IP地址( HMAC对报文头不加密, 因此可以获取IP地址 )，然后把A的IP地址冒充为自己的IP地址(这叫做IP欺骗). 不过IP Sproofing只能单向, 没啥用.</li>
</ul>
<h2 id="Message-Reordering"><a class="header-anchor" href="#Message-Reordering"></a>Message Reordering</h2>
<ul>
<li>C可以把两个报文重新排序, 更改其TCP <code>seq</code>号( 因为报文头没有被HMAC加密 ), 再发给B. 或者C可以干脆删除该报文. B就无法收到正确的信息了.</li>
</ul>
<h2 id="Playback-Attack"><a class="header-anchor" href="#Playback-Attack"></a>Playback Attack</h2>
<p><strong>我们假设报文采用了HMAC, , 但还是会遇到实体鉴别问题</strong></p>
<ul>
<li>
<p>Playback Attack( 重放攻击 ):</p>
<ol>
<li>入侵者C可以从网络上截获A发给B的报文, C并不需要破译这个报文 ( 因为这可能得花很长时间 ）, 而是直接把这个由A加密的报文发送给B, 使B误认为C就是A.</li>
<li>完成“实体鉴别后”, C就和B开始通信, B会向伪装成A的C发送许多本来应当发给A的报文.</li>
</ol>
</li>
<li>
<p>重放攻击的关键在于, B不知道他所受到的报文是来自A的, 还是来自攻击者C的playback. 导致B将这些报文视作属于同一个会话的.</p>
</li>
<li>
<p>这个问题和TCP连接时的三报文握手是一样的: 当server遇到一个 SYN segment 时, 它如何判断这个segment是否属于这次连接? 毕竟它也可能属于上一次连接.</p>
</li>
<li>
<p>TCP的解决方案是server向client发送的SYNACK报文中添加一个<code>seq</code>, 并等待client发来的ACK, 查看其中是否有<code>ack = seq + 1</code>.</p>
<p>也就是说, TCP server使用一个<code>seq</code>来维护一条连接. 对于不同的连接, 其<code>seq</code>不一样, 因此server能把重放攻击者和正常client区分.</p>
<ul>
<li>使用序列号之后, 对报文排了序. 也可以<strong>顺便避免Message Reordering攻击</strong></li>
</ul>
</li>
</ul>
<h3 id="nounce"><a class="header-anchor" href="#nounce"></a>nounce</h3>
<p>在实体鉴别时采用<strong>nonce</strong>( 不重数 )来维护一个“鉴别会话”. nounce就是一种<code>seq</code>, 不同连接的nounce的取值范围不相同. 因此, B和A的鉴别会话, 与B和重放者C的鉴别会话, 拥有不同的nounce, 也就<strong>被视作两个会话</strong>, B不会把A和C混淆.</p>
<p>当然, 为了保证鉴别会话的报文不被篡改, 还需要报文加密. 下图给出了采用对称加密的鉴别会话过程:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Security/End-point%20Authentication%20against%20Playback%20Attack.png" alt="End-point Authentication against Playback Attack"></p>
<ol>
<li>A首先用明文发送其身份A和一个不重数 $R_A$ 给B.</li>
<li>B响应A的查问，用共享的密钥$K_{AB}$ 对 $R_A$ 加密后发回给A，同时也给出了自己的不重数$R_B$</li>
<li>最后, A再响应B的查问, 用共享的密钥$K_{AB}$ 对 $R_B$ 加密后发回给B.
<ul>
<li>这里很重要的一点是A和B对不同的会话必须使用不同的不重数集。由于不重数不能重复使用, 所以C在进行重放攻击时无法重复使用所截获的不重数.</li>
</ul>
</li>
<li>B用$K_{AB}$对 $R_B$ 解密, 发现确实是自己发送的 $R_B$ , 就相信通信的对方是A.</li>
</ol>
<p>对称加密需要通信双方共享密钥. 为了省去这个麻烦, 似乎可以用非对称加密:</p>
<ul>
<li>在前面的例子中, B可以用其私钥对不重数 $R_A$ 进行签名后发回给A. A用B的公钥核实签名, 如能得出自己原来发送的不重数 $R_A$ , 就核实了和自己通信的对方的确是B. 同样, A也用自己的私钥对不重数R B 进行签名后发送给B. B用A的公钥核实签名, 鉴别了A的身份.</li>
</ul>
<p>上面的做法是有漏洞的, 让我们看下面的例子:</p>
<ol>
<li>C冒充是A，发送报文给B，说: ”我是A“</li>
<li>B选择一个不重数 $R_B$  , 发送给A，但被C截获了。</li>
<li>C用自己的私钥$SK_C$冒充是A的私钥，对 $R_B$ 加密，并发送给B。</li>
<li>B向A发送报文，要求对方把解密用的公钥发送过来，但这报文也被C截获了.</li>
<li>C把自己的公钥 $PK_C$ 冒充是A的公钥发送给B。</li>
<li>B用收到的公钥PK C 对收到的加密的 $R_B$ 进行解密，其结果当然正确. 于是B相信通信的对方是A，接着就向A发送许多敏感数据，但都被C截获了.</li>
</ol>
<p>然而上述这种欺骗手段不够高明，因为B只要打电话询问一下A就能戳穿骗局，因为A根本没有和B进行通信。但下面的“中间人攻击 ”（man-in-the-middle attack）就更加具有欺骗性.</p>
<h2 id="man-in-the-middle-attack"><a class="header-anchor" href="#man-in-the-middle-attack"></a>man-in-the-middle attack</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Security/man-in-the-middle%20attack.png" alt="man-in-the-middle attack"></p>
<ol>
<li>A想和B通信，向B发送“我是A”的报文, 并给出了自己的身份。这个报文被“中间人”C截获, C把这个报文原封不动地转发给B. B选择一个不重数 $R_B$ 发送给A，但同样被C截获后也照样转发给A.</li>
<li>中间人C用自己的私钥 $SK_C$ 对 $R_B$ 加密后发回给B, 使B误以为是A发来的。A收到 $R_B$ 后也用自己的私钥 $SK_C$ 对 $R_B$ 加密后发回给B，但中途被C截获并丢弃. B向A索取其公钥，这个报文被C截获后转发给A.</li>
<li>C把自己的公钥 $PK_C$ 冒充是A的公钥发送给B，而C也截获到A发送给B的公钥$PK_A$ .</li>
<li>B用收到的公钥  $PK_C$ （以为是A的）对数据 DATA 加密，并发送给A.</li>
<li>C截获后用自己的私钥 $SK_C$  解密，复制一份留下, 然后再用A的公钥 $PK_A$ 对数据DATA 加密后发送给A.</li>
<li>A收到数据后，用自己的私钥 $SK_A$ 解密, 以为和B进行了保密通信. 其实, B发送给A的加密数据已被中间人C截获并解密了一份, 但A和B却都不知道.</li>
</ol>
<h1 id="Key-Distribution"><a class="header-anchor" href="#Key-Distribution"></a>Key Distribution</h1>
<p>密钥分配也是网络安全的重要问题.</p>
<ul>
<li>对于对称加密, 常见问题是对称密钥的分配很麻烦. 需要一个设施来进行自动化的密钥分配.</li>
<li>对于非对称加密, 常见问题是<strong>声称拥有某人密钥的人, 在现实中并不是某人</strong> , 这也是<strong>中间人攻击成功的原因</strong>. 其实这是一个网络-现实中的实体鉴别问题.
<ul>
<li>由于公钥是公开的, 因此非对称加密的密钥的分配效率不是问题吗不需要“让通信双方共享密钥”.</li>
<li>实体鉴别只能对通信方在网络上的身份进行鉴别. , 但是,网络上的身份不一定就是现实中的身份, 比如, Trudy声称自己是Bob, 然后使用自己的私钥和Alice通信. 在Alice看来, 一切都是正常的, 实体鉴别也通过了. 问题在她鉴别的“Bob”身份只是网络上的, 在现实中, 这个人是Trudy.  Alice使用了所谓的Bob的密钥, 其实她使用的一直都是Trudy的.</li>
<li>因此需要有一个机构来在现实中进行鉴别, 建立网络 - 现实身份的映射</li>
</ul>
</li>
</ul>
<h2 id="Symmentric-Key-Distribution"><a class="header-anchor" href="#Symmentric-Key-Distribution"></a>Symmentric Key Distribution</h2>
<ul>
<li>KDC( Key Distribution Center ): KDC是大家都信任的机构，其任务就是给需要进行秘密通信的用户临时分配一个会话密钥（仅使用一次）.</li>
</ul>
<h2 id="Public-Key-Distribution"><a class="header-anchor" href="#Public-Key-Distribution"></a>Public Key Distribution</h2>
<p><strong>认证中心CA ( Certification Authority )</strong>: 一个权威机构, 用于接受用户认证, 向用户发放证书（certificate）, 证书内容是用户的公钥和个人信息( 比如IP, 人名... ).</p>
<ul>
<li>CA对证书进行数字签名, 这样用户就保证了该证书真的属于改CA.</li>
<li>当然, CA的安全性取决于其权威性. 我自己也可以作为CA生成一个证书, 但是这样的证书肯定没人信.</li>
</ul>
<p>使用CA的步骤:</p>
<ol>
<li>每个实体需要持有CA发的证书</li>
<li>任何人想要获取该实体的公钥, 只需从CA处获取该实体的证书( 或者让该实体自己提供证书也行 ). 这样就能确保对方真的是现实中的那个人.
<ul>
<li>例如, 如果我用了数字签名, 他人就可以拿我证书上的公钥和我的公钥比对, 确保我网络上的身份和我现实中的身份一致.</li>
</ul>
</li>
</ol>
<h1 id="Securing-Wireless-LANs-and-4G-5G-Cellular-Networks"><a class="header-anchor" href="#Securing-Wireless-LANs-and-4G-5G-Cellular-Networks"></a>Securing Wireless LANs and 4G/5G Cellular Networks</h1>
<p>在无线网络( 包括802.11 wireless LANs 和4G/5G cellular network )中, 攻击者可以嗅探到任何报文, 因此无线网络的安全很重要.</p>
<h2 id="Authentication-and-Key-Agreement-in-802-11-Wireless-LANs"><a class="header-anchor" href="#Authentication-and-Key-Agreement-in-802-11-Wireless-LANs"></a>Authentication and Key Agreement in 802.11 Wireless LANs</h2>
<ul>
<li>
<p>WIFI的网络安全有两个目标:</p>
<ul>
<li><em>Mutual authentication</em>: 如果移动设备要接入网络, 移动设备和网络需要互相鉴别</li>
<li><em>Encryption</em>: 移动设备和access point (AP)通信的报文 ( 属于链路层frame ) 需要加密. 因为移动网络中的加密一般要求高速,所以采用对称加密.</li>
</ul>
</li>
<li>
<p><strong>Authentication Server</strong> (AS) : WIFI还需要一个AS来负责鉴别. AP在鉴别时仅仅作为Mobile device和AS通信的桥接.</p>
</li>
</ul>
<p>以下是一个Mobile device接入WIFI的过程:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Security/Authentication%20and%20Key%20Agreement%20in%20802.11%20Wireless%20LANs.png" alt="Authentication and Key Agreement in 802.11 Wireless LANs"></p>
<p>We can identify four distinct phases to the process of mutual authentication and encryption-key derivation and use in Figure 8.30:</p>
<ol>
<li><em>Discovery.</em> AP广播其存在, 然后mobile device与其通信. 此时还没有经过鉴别, 也没有生成链路层frame加密的密钥.</li>
<li><em>Mutual authentication and shared symmetric key derivation.</em> : 详细过程在下面的<em>Mutual Authentication and Shared Symmetric Session Key Derivation</em>介绍
<ol>
<li>为了方便, mobile device都会和AS共享一个密钥( e.g. WIFI密码 )用于鉴别时加密, 双方通过这个密钥, nounce( 避免playback attack )和cryptographic hashing( 报文鉴别, 报文完整性 )来进行双向的实体鉴别.</li>
<li>并且会生成一个symmentric session key( ( 如前所述, 我们一般用对称加密 ), 用于<strong>加密mobile device和AP间传输的链路层frame</strong>.
<ul>
<li>一般而言,对称加密算法是AES</li>
</ul>
</li>
</ol>
</li>
<li><em>Shared symmetric session key distribution.</em> 步骤二中, mobile device和AS都拥有了session key, 此时还需要把session key也传输给AP. ( 不然mobile device和AP通信怎么加密呢.... )</li>
<li><em>Encrypted communication between mobile device and a remote host <strong>via the AP</strong>.</em></li>
</ol>
<h3 id="Mutual-Authentication-and-Shared-Symmetric-Session-Key-Derivation"><a class="header-anchor" href="#Mutual-Authentication-and-Shared-Symmetric-Session-Key-Derivation"></a><strong>Mutual Authentication and Shared Symmetric Session Key Derivation</strong></h3>
<ul>
<li>Wired Equivalent Privacy( WEP ): 就是WIFI网络的安全通信协议. WEP很快被WPA取代.</li>
<li>WiFi Protected Access( WPA ): 就是WEP的改进版.目前都用的WPA3( 2018年发布 )
<ul>
<li>WEP a <strong>four-way handshake</strong> protocol</li>
<li>作用:
<ul>
<li>mutual authentication</li>
<li>shared symmetric session-key derivation</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Security/Mutual%20Authentication%20and%20Shared%20Symmetric%20Session%20Key%20Derivation.png" alt="Mutual Authentication and Shared Symmetric Session Key Derivation"></p>
<p>如图, WPA工作流程为:</p>
<ol start="0">
<li>Mobile device( M )和AS事先会共享一个密钥( 比如WIFI密码 ), 记为$K_{AS-M}$</li>
<li>AS生成一个NonceAS发给M, 这用于避免重放攻击</li>
<li>M收到NonceAS, 并生成它自己的NonceM. 然后M使用NonceAS, NonceM, $K_{AS-M}$, 其MAC地址和AS的MAC地址生成symmentric session key $K_{M-AP}$. 然后将NonceM 和 一个HMAC加密的值( 包括了 $K_{AS-M}$ 和 NounceAS )发给AS</li>
<li>AS通过decode HMAC, 得到NonceAS, 确认了M不是重放攻击. 同时得到了$K_{AS-M}$, 完成了实体鉴别( 即对方确实是拥有这个 $K_{AS-M}$ 的设备). AS然后执行和M一样的操作, 用它收到的NonceAS, NonceM, $K_{AS-M}$, 其MAC地址和M的MAC地址生成$K_{M-AP}$. 因为和M的参数一样, 它们推导出的 $K_{M-AP}$ 也一样.  接下来 $K_{M-AP}$ 会被通知给AP</li>
</ol>
<h3 id="802-11-Security-Messaging-Protocols"><a class="header-anchor" href="#802-11-Security-Messaging-Protocols"></a>802.11 Security Messaging Protocols</h3>
<ul>
<li>Extensible Authentication Protocol (EAP): M和AS通信时采用的协议.
<ul>
<li>注意到M和AS其实是端到端的request/response通信. 因此EAP是一个端到端协议.</li>
<li>EAP是链路层协议. 数据封装成EAPoL (EAP over LAN) 在WIFI链路上传输. AP收到后, 使用RADIUS protoco( or DIAMETER protocol )来解包为通用的链路层协议( TCP/UDP ) ,然后发给AS.</li>
</ul>
</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Security/EAP.png" alt="EAP"></p>
<h2 id="Authentication-and-Key-Agreement-in-4G-5G-Cellular-Networks"><a class="header-anchor" href="#Authentication-and-Key-Agreement-in-4G-5G-Cellular-Networks"></a>Authentication and Key Agreement in 4G/5G Cellular Networks</h2>
<ul>
<li>4G/5G蜂窝网络的安全性要求和WIFI差不多, 都需要:
<ul>
<li>双向鉴别: 基站当然有必要鉴别手机. 但因为基站也有可能被黑, 所以手机也有必要鉴别基站....</li>
<li>加密: 手机和基站依然需要生成一个对称加密密钥, 用来加密M和BS之间通信的链路层frame</li>
</ul>
</li>
</ul>
<h3 id="AKA-Protocol-in-4G"><a class="header-anchor" href="#AKA-Protocol-in-4G"></a>AKA Protocol in 4G</h3>
<ul>
<li>4G/5G蜂窝网络的鉴别和加密协议为AKA( Authentication and Key Agreement (AKA) protocol ), 它规定了如下步骤:</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Security/AKA.png" alt="AKA"></p>
<ol start="0">
<li>
<p>和WIFI一样, 手机和HSS之间需要共享一个密钥$K_{HSS-M}$用于鉴别时的加密. 和WIFI的密钥一般就是WIFI密码不同, $K_{HSS-M}$一般存在手机的SIM卡和HSS database里.</p>
</li>
<li>
<p><em>Authentication request to HSS.</em> 当mobile device第一次通过基站请求加入网络时, 它将发送一个包含其 international mobile subscriber identity (IMSI) 的sttach message, 基站会把该信息转发给被访网络( visited network, 图中称为VN )的MME. 然后MME把<strong>IMSI和VN的信息</strong>发送给家庭网络的HSS.</p>
<ul>
<li>IMSI在4G中被明文传输.</li>
</ul>
</li>
<li>
<p><em>Authentication response from HSS.</em> HSS使用预先共享的$K_{HSS-M}$进行加密, 以获得一个认证令牌auth_token = $K_{HSS-M}(IMSI)$和 一个expected authentication response token $xres_{HSS}$.  前者最终被转发给mobile device, 后者发给MME.</p>
</li>
<li>
<p><em>Authentication response from mobile device.</em> mobile device收到auth_token后解密得到IMSI:<br>
$$<br>
K_{HSS-M}(K_{HSS-M}(IMSI)) = IMSI<br>
$$<br>
mobile device于是知道了该HSS拥有$K_{HSS-M}$, mobile device因此就<strong>鉴别了蜂窝网络</strong> ( HSS和MME就是蜂窝网络的AS ).</p>
<p>并且, mobile device会使用和HSS相同的算法计算出$xres_{M}$, 只是使用了自己的key ( $K_{HSS-M}$) , 并将其$K_{HSS-M}$发送给MME</p>
</li>
<li>
<p><em>Mobile device authentication.</em> MME比对$xres_{M}$ 和  $xres_{HSS}$ , 由于HSS和mobile device拥有相同的$K_{HSS-M}$, 因此:<br>
$$<br>
xres_{M} == xres_{HSS}<br>
$$<br>
MME于是知道了mobile device拥有和HSS相同的key ,因此蜂窝网络<strong>鉴别了mobile device</strong> .</p>
<ul>
<li>这里MME的作用类似WIFI中的AP, 仅仅是一个中介, 不需要知道$K_{HSS-M}$. 和WIFI中不同的是, MME在这里做了认证决定.</li>
</ul>
</li>
<li>
<p><em>Data plane and control plane key derivation.</em> 步骤1~4完成了双向鉴别, 接下来mobile device就和基站共同生成了symmentric session key, 过程和WIFI中的一样. sesssion key用于加密蜂窝网络的链路层frame, 当然, data plane 和 control plane通信是不同的, 因此需要生成两个key.</p>
<ul>
<li>加密算法是AES, 和WIFI一样</li>
</ul>
</li>
</ol>
<h3 id="Changes-in-5G"><a class="header-anchor" href="#Changes-in-5G"></a>Changes in 5G</h3>
<ol>
<li>5G的鉴别和加密协议是AKA' , 它继承了4G的AKA. 此外, 5G还采用了WIFI中的EAP, 因此报文格式和4G的不同. 并且5G还新增了一个协议用于IoT场景, 该协议不需要$K_{HSS-M}$ .</li>
<li>4G的鉴别中, 是被访网络的MME做了mobile device的鉴别决定, 在5G中, 一般都由家庭网络来进行这个鉴别.</li>
<li>5G中的IMSI是被非对称加密的.</li>
</ol>
<p>关于4G/5G安全的更多细节: [3GPP SAE 2019; Cable Labs 2019; Cichonski 2017]</p>
<h1 id="Operational-Security"><a class="header-anchor" href="#Operational-Security"></a>Operational Security</h1>
<p>三大组件:</p>
<ol>
<li>Firewall</li>
<li>Intrusion Detection System ( IDS )</li>
<li>Intrusion Prevention Systems (IPS)</li>
</ol>
<p>防火墙, IDS等肯定会让网络变慢. 因此我们一般把网络划分为不同区域, 需要与外网连接的服务器被分到防御较宽松的<strong>demilita- rized zone (DMZ)</strong>, 其他服务器被分到防御更严格的区域:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Security/Operational%20Security.png" alt="Operational Security"></p>
<ul>
<li>注意, IDS等设施同一时间要计算无数个报文, 工作量很大. 因此一般在网络中部署多个IDS, 达到分治的效果, 如上图所示.</li>
</ul>
<h2 id="Firewalls"><a class="header-anchor" href="#Firewalls"></a>Firewalls</h2>
<ul>
<li>
<p>A <strong>firewall</strong> is a combination of hardware and software that isolates an organization’s internal network from the Internet at large, allowing some packets to pass and blocking others</p>
</li>
<li>
<p>Firewalls can be classified in 2 categories:</p>
<ol>
<li>packet filters: 工作在传输层, 是一种具有分组过滤功能的<u>路由器</u>，它根据过滤规则对进出内部网络的分组执行转发或者丢弃.</li>
<li>application gateways: 也称为Proxy Server( 代理服务器 )工作在应用层, 就是一个应用层APP, 用来在应用层监控某个应用发出在报文.
<ul>
<li>An <strong>application gateway</strong> is an <u>application-specific</u> server through which all application data (inbound and out- bound) must pass.</li>
</ul>
</li>
</ol>
</li>
<li>
<p>分组过滤器和应用网关可以结合使用, 如图:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Security/packet%20filters%20plus%20application%20gateways.png" alt="packet filters plus application gateways"></p>
</li>
</ul>
<h3 id="Packet-Filters"><a class="header-anchor" href="#Packet-Filters"></a>Packet Filters</h3>
<ul>
<li>
<p>分组过滤器分为两种:</p>
<ul>
<li>无状态: 独立地处理每一个分组.</li>
<li>有状态: 会跟踪每个连接或会话的通信状态，并根据这些状态信息来决定是否转发分组.</li>
</ul>
</li>
<li>
<p>以无状态过滤器为例, 假设要保护的网络是130.207/16, 它要和一个Web server at 130.207.244.203 通信:</p>
<table>
<thead>
<tr>
<th>Policy</th>
<th>Policy Firewall Setting</th>
</tr>
</thead>
<tbody>
<tr>
<td>No outside Web access.</td>
<td>Drop all outgoing packets to any IP address, port 80.</td>
</tr>
<tr>
<td>No incoming TCP connections, except those for organization’s public Web server only.</td>
<td>Drop all incoming TCP SYN packets to any IP except 130.207.244.203, port 80.</td>
</tr>
<tr>
<td>Prevent Web-radios from eating up the available bandwidth.</td>
<td>Drop all incoming UDP packets—except DNS packets.</td>
</tr>
<tr>
<td>Prevent your network from being used for a  smurf DoS attack.</td>
<td>Drop all ICMP ping packets going to a “broadcast” address (eg 130.207.255.25)</td>
</tr>
<tr>
<td>Prevent your network from being tracerouted.</td>
<td>Drop all outgoing ICMP TTL expired traffic.</td>
</tr>
</tbody>
</table>
<p>上表中只是抽象的规则, 具体的规则存储在ACL.</p>
</li>
</ul>
<h4 id="ACL"><a class="header-anchor" href="#ACL"></a>ACL</h4>
<ul>
<li>
<p>ACL( access control list ): 就是 packet filters 里的过滤规则, ACL其实和路由表长得差不多</p>
<ul>
<li>比如, 如果想要禁止所有的TCP连接的建立, 只要过滤掉所有ACK = 0的报文 ( 因为TCP中, 只有连接建立时第一个报文的ACK = 0, 此后所有的报文都有ACK =1 )</li>
<li>如果想要禁止员工看视频, 可以把<u>不必要的UDP报文</u>都过滤掉.
<ul>
<li>不可能过滤掉全部的UDP报文, 因为DNS之类的服务也使用UDP</li>
</ul>
</li>
</ul>
</li>
<li>
<p>ACL自顶而下<u>顺序匹配</u>.</p>
<ul>
<li>When a statement “matches”,  no more statements are evaluated.</li>
<li>The packet is either permitted or denied.</li>
</ul>
</li>
<li>
<p>There is an implicit “<u>deny any</u>” statement at the end of the ACL. If a packet does not match any of the statements in the ACL, it is dropped. 下面例子的表中显式地给出了这条规则,</p>
</li>
<li>
<p>下面是一个例子, 该防火墙要保护的网络是222.22/16</p>
<table>
<thead>
<tr>
<th>action</th>
<th>source address</th>
<th>dest address</th>
<th>prototol</th>
<th>source port</th>
<th>dest port</th>
</tr>
</thead>
<tbody>
<tr>
<td>allow</td>
<td>222.22/16</td>
<td>outside of 222.22/16</td>
<td>TCP</td>
<td>&gt; 1023</td>
<td>any</td>
</tr>
<tr>
<td>allow</td>
<td>outside of 222.22/16</td>
<td>222.22/16</td>
<td>TCP</td>
<td>80</td>
<td>&gt; 1023</td>
</tr>
<tr>
<td>allow</td>
<td>222.22/16</td>
<td>outside of 222.22/16</td>
<td>UDP</td>
<td>&gt; 1023</td>
<td>53</td>
</tr>
<tr>
<td>allow</td>
<td>outside of 222.22/16</td>
<td>222.22/16</td>
<td>UDP</td>
<td>53</td>
<td>&gt; 1023</td>
</tr>
<tr>
<td>deny</td>
<td>all</td>
<td>all</td>
<td>all</td>
<td>all</td>
<td>all</td>
</tr>
</tbody>
</table>
<ol>
<li>
<p>前两条规则允许网络内部的主机<strong>单向</strong>地访问Web:</p>
<ol>
<li>
<p>第一条规则允许TCP packet with destination port 80 离开网络, 即允许主机单方面发出TCP请求</p>
</li>
<li>
<p>第二条规则允许TCP packet with source port 80 and the ACK bit set进入网络, 即允许主机接受对方的TCP请求.</p>
<p>注意, 由于不允许外部主机的ACK = 0进入网络( 因此无法建立TCP连接 ), 所以外部主机是无法用TCP访问内部主机的. 因此是“单向”</p>
</li>
</ol>
</li>
<li>
<p>接下来两条规则允许所有DNS packets进出网络.</p>
</li>
<li>
<p>最后一条规则就是deny any, 它是默认的, 禁止了除上述规则匹配的分组之外的所有其他分组.</p>
</li>
</ol>
</li>
</ul>
<h3 id="Application-Gateways"><a class="header-anchor" href="#Application-Gateways"></a>Application Gateways</h3>
<ul>
<li>相比工作在传输层的报文过滤器, 应用网关的控制能力更强更灵活.
<ul>
<li>比如, 组织可能希望某些内部人员必须先在内网进行登录认证后, 才能访问外网. 而“登录认证”的数据属于应用层, 不属于IP/TCP/UDP. 这一级别的访问控制只能由应用网关来处理.</li>
</ul>
</li>
</ul>
<h2 id="IDS"><a class="header-anchor" href="#IDS"></a>IDS</h2>
<ul>
<li>
<p>IDS: 防火墙只能对分组进行简单的检查, 像上面所介绍的, 只能检查地址,协议类型等, 因此很容易被攻破. IDS能对分组进行深度检查, 并对可疑分组发出alert</p>
</li>
<li>
<p>IDS分两种:</p>
<ul>
<li>
<p>Signature-based IDS( 基于特征的IDS ): 维护一个所有已知攻击标志性特征的数据库, 每个特征是一个与某种入侵活动相关联的规则集. 这些规则一般是手动输入的.</p>
<ul>
<li>基于特征的IDS只能检测已知攻击，对于未知攻击则束手无策. 而且即使某个报文匹配了某条规则, 它也不一定就是个有害报文.</li>
</ul>
</li>
<li>
<p>Anomaly-based IDS( 基于异常的IDS ):通过观察正常运行的网络流量来动态判断. 不过区分正常和异常流量很困难, 所以基于异常的IDS能力有限</p>
</li>
</ul>
</li>
<li>
<p>目前最常用的开源IDS是Snort, 它是Signature-based IDS.</p>
</li>
</ul>
<h2 id="IPS"><a class="header-anchor" href="#IPS"></a>IPS</h2>
<ul>
<li>IPS: 和IDS配套使用, 在IDS发出alert后, IPS负责把可疑分组清除</li>
</ul>
<h2 id="EXP-ANONYMITY-AND-PRIVACY"><a class="header-anchor" href="#EXP-ANONYMITY-AND-PRIVACY"></a>EXP: ANONYMITY AND PRIVACY</h2>
<p>假如我要访问一个奇怪的网站( 比如, 某个含有不当言论的网站 ), 我想要:</p>
<ol>
<li>不让网站知道我的IP</li>
<li>不让我的local ISP知道我在访问这个网站, 也就是不让ISP知道我的目的IP</li>
<li>不让local ISP知道我和网站通信交换的报文.</li>
</ol>
<p>只使用SSL是不行的, SSL只能加密报文payload, 但是不能加密源和目的IP地址, 所以无法满足要求1, 2.</p>
<p>正确做法是使用Proxy Server( 代理服务器, 也就是应用网关 ) + SSL:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Network%20Security/Example-%20ANONYMITY%20AND%20PRIVACY.png" alt="Example: ANONYMITY AND PRIVACY"></p>
<ol>
<li>我使用SSL和代理服务器通信, 我向代理服务器发送的HTTP报文都是SSL加密的.</li>
<li>报文被代理服务器解密发给网站.</li>
<li>代理服务器和网站通信, 它们之间的报文不需要加密.</li>
<li>网站发给代理服务器的报文被SSL加密后传给我.</li>
</ol>
<p>这种方式下, 代理服务器的IP作为ISP看到的的目的IP和网站看到的源IP. 数据也被SSL保护. 问题在于, 代理服务器会知道一切( 我的源IP, 目的IP, 我的数据 ), 因此这种方法的安全性取决于代理服务器的安全性.</p>
<p>更好的方法是采用<a href="https://zh.wikipedia.org/zh-my/Tor">TOR</a>, 它使用一个 Proxy Server Pool, 其中每个Proxy Server都是不互通的( non-colluding ). 每次通信随机从中选一个Proxy Server. [[TOR 2020]</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Computer Networking</tag>
        <tag>Network Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Wrangling</title>
    <url>/2022/02/09/Data-Wrangling/</url>
    <content><![CDATA[<p>Some tools for data wrangling</p>
<p>ref: <a href="https://missing.csail.mit.edu/2020/data-wrangling/">MIT lesson</a></p>
<span id="more"></span>
<h1 id="sed"><a class="header-anchor" href="#sed"></a>sed</h1>
<ul>
<li>
<p><code>sed</code> is a “stream editor” that builds on top of the old <code>ed</code> editor. In it, you basically give short <strong>commands</strong> for how to modify the file, rather than manipulate its contents directly (although you can do that too).</p>
<ul>
<li>one of the most common ones is <code>s</code>: substitution</li>
<li><code> sed 's/REGEX/SUBSTITUTION/'</code>： Replace <strong>the first occurrence</strong> of a regular expression in <strong>each line</strong> of a file, and print the result
<ul>
<li><code>REGEX</code>:  the regular expression you want to search for</li>
<li>SUBSTITUTION`: the text you want to substitute matching text with</li>
<li><code>'s/REGEX/SUBSTITUTION/g'</code>:  Replace <strong>all occurrences</strong> of an extended regular expression in a <strong>file</strong></li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh myserver journalctl</span><br><span class="line"> | grep sshd</span><br><span class="line"> | grep &quot;Disconnected from&quot;</span><br><span class="line"> | sed &#x27;s/.*Disconnected from //&#x27;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="REGEX"><a class="header-anchor" href="#REGEX"></a>REGEX</h2>
<ul>
<li>REGEX special characters:
<ul>
<li><code>.</code> means “any single character” except newline</li>
<li><code>*</code> zero or more of the preceding match</li>
<li><code>+</code> one or more of the preceding match</li>
<li><code>[abc]</code> any one character of <code>a</code>, <code>b</code>, and <code>c</code></li>
<li><code>(RX1|RX2)</code> either something that matches <code>RX1</code> or <code>RX2</code></li>
<li><code>^</code> the start of the line</li>
<li><code>$</code> the end of the line</li>
</ul>
</li>
<li><code>sed</code>默认<strong>不转义特殊字符</strong>， 这与其他工具都相反。
<ul>
<li>使用<code>-E</code>开启转义</li>
</ul>
</li>
<li><code>sed</code>的REGEX是贪婪匹配</li>
</ul>
<h2 id="capture-groups"><a class="header-anchor" href="#capture-groups"></a>capture groups</h2>
<ul>
<li>
<p>使用捕获组来进行非贪婪匹配</p>
</li>
<li>
<p>Any text matched by a regex surrounded by parentheses is stored in a numbered capture group. These are available in the substitution (and in some engines, even in the pattern itself!) as <code>\1</code>, <code>\2</code>, <code>\3</code>, etc. So:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">| sed -E &#x27;s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \[preauth\])?$/\2/&#x27;</span><br></pre></td></tr></table></figure>
<p>将输出username</p>
</li>
</ul>
<h1 id="sort"><a class="header-anchor" href="#sort"></a>sort</h1>
<ul>
<li><code>sort</code> will sort its input
<ul>
<li>default: in lexicographic order</li>
<li><code>-n</code>: in numeric order</li>
<li><code>k, --key=KEYDEF</code> :sort via a key; KEYDEF gives location and type
<ul>
<li><code>KEYDEF</code> is <code>F[.C][OPTS][,F[.C][OPTS]]</code> for <strong>start and stop position</strong>, where F is a <strong>field number</strong> and C a character position in the field; both are origin 1, and the stop posi‐ tion defaults to the line's end.</li>
<li>If neither <strong>-t</strong> nor <strong>-b</strong> is in effect, characters in a field are counted from the beginning of the preceding whitespace.</li>
<li>OPTS  is  one  or more single-letter ordering options <code>[bdfgiMhnRrV]</code>, which override global ordering options for that key.  If no key is given, use the entire line as the key.  Use <strong>--debug</strong> to diagnose incorrect key usage.</li>
<li>example: <code>-k1,1</code>即以第一个field为key排序， 而<code>-k</code>1即以第一个field直到行的末尾为key进行排序
<ul>
<li><code>,n</code>:  sort until the <code>n</code>th field, where the default is the end of the line</li>
</ul>
</li>
</ul>
</li>
<li><code>-r</code>: sort in reverse order.</li>
</ul>
</li>
</ul>
<h1 id="uniq"><a class="header-anchor" href="#uniq"></a>uniq</h1>
<ul>
<li><code>uniq -c</code> will collapse consecutive lines that are the same into a single line, prefixed with a count of the number of occurrences</li>
</ul>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh myserver journalctl</span><br><span class="line"> | grep sshd</span><br><span class="line"> | grep &quot;Disconnected from&quot;</span><br><span class="line"> | sed -E &#x27;s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \[preauth\])?$/\2/&#x27;</span><br><span class="line"> | sort | uniq -c</span><br><span class="line"> | sort -nk1,1 | tail -n10</span><br></pre></td></tr></table></figure>
<p>对username（sort默认按字典序）排序</p>
<h1 id="tail"><a class="header-anchor" href="#tail"></a>tail</h1>
<ul>
<li>Display the last part of a file.</li>
</ul>
<h1 id="awk"><a class="header-anchor" href="#awk"></a>awk</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;sfsdfs\n asdfdas&quot; | awk &#x27;&#123;print $2&#125;&#x27; | paste -sd,</span><br></pre></td></tr></table></figure>
<ul>
<li>explain:  for every line, print the contents of the second field,</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> &#123; rows = <span class="number">0</span> &#125;</span><br><span class="line"><span class="variable">$1</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$2</span> ~ <span class="regexp">/^c[^ ]*e$/</span> &#123; rows += <span class="variable">$1</span> &#125;</span><br><span class="line"><span class="keyword">END</span> &#123; print rows &#125;</span><br></pre></td></tr></table></figure>
<h1 id="paste"><a class="header-anchor" href="#paste"></a>paste</h1>
<ul>
<li>
<p><code>paste</code>: Merge lines of files</p>
<ul>
<li>
<p><code>-s</code>: join all the lines into a single line, using TAB as delimiter</p>
</li>
<li>
<p><code>-d</code>: using the specified delimiter</p>
<ul>
<li><code>paste -s -d delimiter file</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh myserver journalctl</span><br><span class="line"> | grep sshd</span><br><span class="line"> | grep &quot;Disconnected from&quot;</span><br><span class="line"> | sed -E &#x27;s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \[preauth\])?$/\2/&#x27;</span><br><span class="line"> | sort | uniq -c</span><br><span class="line"> | sort -nk1,1 | tail -n10</span><br><span class="line"> | awk &#x27;&#123;print $2&#125;&#x27; | paste -sd,</span><br></pre></td></tr></table></figure>
<p>extract the usernames as a comma-separated list instead of one per line</p>
<h1 id="bc"><a class="header-anchor" href="#bc"></a>bc</h1>
<p>You can do math directly in your shell using <code>bc</code>, a calculator that can read from STDIN! For example, add the numbers on each line together by concatenating them together, delimited by <code>+</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| paste -sd+ | bc -l</span><br></pre></td></tr></table></figure>
<p>Or produce more elaborate expressions:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;2*($(data | paste -sd+))&quot; | bc -l</span><br></pre></td></tr></table></figure>
<p>You can get stats in a variety of ways</p>
<h1 id="st"><a class="header-anchor" href="#st"></a>st</h1>
<ul>
<li>优雅简洁的数据处理工具https://github.com/nferraz/st</li>
<li>与linux的<code>st</code>命令重名，需要改名(如<code>scal</code>)</li>
</ul>
<h1 id="R"><a class="header-anchor" href="#R"></a>R</h1>
<ul>
<li>
<p>R is another (weird) programming language that’s great at data analysis and <a href="https://ggplot2.tidyverse.org/">plotting</a>.</p>
<ul>
<li>相比之前的工具更重量级</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh myserver journalctl</span><br><span class="line"> | grep sshd</span><br><span class="line"> | grep &quot;Disconnected from&quot;</span><br><span class="line"> | sed -E &#x27;s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \[preauth\])?$/\2/&#x27;</span><br><span class="line"> | sort | uniq -c</span><br><span class="line"> | awk &#x27;&#123;print $1&#125;&#x27; | R --no-echo -e &#x27;x &lt;- scan(file=&quot;stdin&quot;, quiet=TRUE); summary(x)&#x27;</span><br><span class="line">R is another (weird) programming language that’s great at data analysis and</span><br></pre></td></tr></table></figure>
<p><code>summary</code> prints summary statistics for a vector, and we created a vector containing the input stream of numbers, so R gives us the statistics we wanted!</p>
</li>
</ul>
<h1 id="gnuplot"><a class="header-anchor" href="#gnuplot"></a>gnuplot</h1>
<ul>
<li>simple plotting <a href="http://www.gnuplot.info/">http://www.gnuplot.info/</a></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh myserver journalctl</span><br><span class="line"> | grep sshd</span><br><span class="line"> | grep &quot;Disconnected from&quot;</span><br><span class="line"> | sed -E &#x27;s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \[preauth\])?$/\2/&#x27;</span><br><span class="line"> | sort | uniq -c</span><br><span class="line"> | sort -nk1,1 | tail -n10</span><br><span class="line"> | gnuplot -p -e &#x27;set boxwidth 0.5; plot &quot;-&quot; using 1:xtic(2) with boxes&#x27;</span><br></pre></td></tr></table></figure>
<h1 id="xargs"><a class="header-anchor" href="#xargs"></a>xargs</h1>
<ul>
<li><code>xargs </code>： Execute a command with piped arguments coming from another command, a file, etc.<br>
The input is treated as a single block of text and split into separate pieces on spaces, tabs, newlines and end-of-file.</li>
</ul>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Run a <span class="built_in">command</span> using the input data as arguments:</span> </span><br><span class="line">arguments_source | xargs command</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>Sometimes you want to do data wrangling to find things to install or remove based on some longer list. The data wrangling we’ve talked about so far + <code>xargs</code> can be a powerful combo.</p>
<p>For example, as seen in lecture, I can use the following command to uninstall old nightly builds of Rust from my system by extracting the old build names using data wrangling tools and then passing them via <code>xargs</code> to the uninstaller:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rustup toolchain list | grep nightly | grep -vE &quot;nightly-x86&quot; | sed &#x27;s/-x86.*//&#x27; | xargs rustup toolchain uninstall</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
  </entry>
  <entry>
    <title>Computer Storage</title>
    <url>/2022/08/01/Computer-Storage/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Basic Ideas:
<ul>
<li>Cache</li>
<li>Main Memory</li>
<li>VRAM</li>
<li>Disk</li>
</ul>
</li>
<li>Storage Material
<ul>
<li>RAM</li>
<li>ROM</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<p>存储器由一定数量的单元构成，每个单元可以被唯一标识，每个单元都有存储一个数值的能力。</p>
<ul>
<li>地址：单元的唯一标识符（采用二进制）</li>
<li>地址空间：可唯一标识的单元总数</li>
<li>寻址能力：存储在每个单元中的信息的位数•大多数存储器是字节寻址的，而执行科学计算的计算机通常是64位寻址的</li>
</ul>
<h1 id="The-Memory-Hierarchy"><a class="header-anchor" href="#The-Memory-Hierarchy"></a>The Memory Hierarchy</h1>
<p>计算机的存储架构是分层的：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Computer%20Storage/memory%20hierarchy.png" alt="memory hierarchy"></p>
<ul>
<li>CPU registers: 也就是CPU的 <em>register file</em>， 对它的访问没有延迟</li>
<li>cache memory: 有L1，L2， L3 ...，差别是timing 。访问L1没有延迟，访问L2有1-2个时钟周期的延迟</li>
<li>main memory: 主存, the work house of memory system, 也被称为RAM.（当然更精确的说法是DRAM）</li>
<li>disk: 硬盘，是一种外部存储设备，最慢</li>
</ul>
<p>越上层速度越快，价格越贵，其容量也就越小</p>
<p>还有<em>虚拟内存</em> , 这是进程视角下的内存， 包含了主存和一部分从硬盘中置换出来的存储空间. 通过硬件<strong>MMU</strong>( Memory Management Unit )实现虚拟内存地址和物理内存地址的转换.</p>
<p>总之，虚拟内存是一个抽象的内存概念, 和现实的存储结构没有关系.</p>
<h2 id="Cache"><a class="header-anchor" href="#Cache"></a>Cache</h2>
<ul>
<li>Cache， 位于CPU内部的存储设备，其材质一般是SRAM. 一般有多级cache, 如L1/L2/L3</li>
</ul>
<h2 id="Main-Memory"><a class="header-anchor" href="#Main-Memory"></a>Main Memory</h2>
<ul>
<li>
<p><em>main memory</em>（OR <em>system memory</em> ）：主存，也称为<em>system memory</em>. 在冯诺依曼架构中, 处理器( 包括ALU和Controller )与存储器进行数据交互, 这里我们把和CPU交互的RAM称为<strong>主存</strong>.</p>
</li>
<li>
<p>后面会提到， 主板上的内存条( <em>memory module</em>, 由DRAM组成 )的集合就是主存，提供给CPU一个统一的内存视图</p>
</li>
<li>
<p><strong>在通常的语境下，我们说的RAM都是主存，也就是和CPU交互的DRAM</strong></p>
</li>
<li>
<p>板载内存( on-board memory )：焊接在电路板上的内存就是板载内存，它无法更换。 与之对应的是可插拔的内存条。</p>
<ul>
<li>对于系统RAM，除了板载内存，还可以用可插拔的内存条。</li>
<li>不过对于显存( VRAM )，目前已经不存在可插拔的显存了，所以所有<strong>显存都是板载的</strong>( 起码目前为止 )</li>
<li>系统RAM的板载内存一般焊接在主板上，而显存一般焊接在显卡的PCB( <strong>印刷电路板</strong>，也就是显卡的“主板”)上</li>
</ul>
</li>
</ul>
<h2 id="VRAM"><a class="header-anchor" href="#VRAM"></a>VRAM</h2>
<p><a href="https://zhuanlan.zhihu.com/p/462191421">显存的文档</a></p>
<ul>
<li><em>Video RAM (VRAM)</em>: 显存， 用作GPU的frame buffer. 广义地讲, 显存不是一种特定的RAM材质,  <strong>任何用作主存的RAM( 也就是DRAM )都可以用作显存</strong>。 事实上我们可以把和CPU交互的DRAM叫主存，和GPU交互的叫显存。
<ul>
<li>当然了，在带宽、延迟和速度方面，CPU和GPU的需求是不同的。因此VRAM的材质一般采用GDDR( 下文会介绍 )</li>
<li>VRAM主要存储纹理数据( texture data )，用于和GPU交互。 因此它也被称为 <em>Texture Memory</em></li>
<li>当显存不够用时，GPU将会不得不<strong>从主存中分配内存来作为VRAM</strong>。 甚至如果电脑采用集显，也就是和CPU集成到一起的GPU， GPU就没有自己的RAM。 GPU会将系统RAM的一部分作为VRAM，显而易见这很慢</li>
<li>也有一些计算机使用“统一内存”， 即CPU和GPU都使用为GPU设计的RAM，在运行时为两个处理器动态分配。这样就避免了给GPU和CPU使用不同的内存。
<ul>
<li>比如PlayStation 5和M1，统一使用GDDR</li>
<li>作为一个额外的好处，如果CPU和GPU都需要相同的数据，就不需要在两套不同的内存中拥有两个副本。</li>
</ul>
</li>
<li>有些厂商会提供同一型号但是不同VRAM容量的显卡，其实一般来说，为了单单高一点VRAM就加钱没啥必要。。。</li>
</ul>
</li>
<li>显存的指标：显存主要包括capacity、frequency和bandwidth这三个参数</li>
</ul>
<h2 id="Disk"><a class="header-anchor" href="#Disk"></a>Disk</h2>
<p>Disk：称为硬盘，是非易失的外部存储设备。因为早期的硬盘都是机械硬盘( HDD )，成盘状，所以称为硬“盘”</p>
<ul>
<li>
<p>机械硬盘( HDD ):拥有磁头，扇区和盘片, 材料和ROM没关系.</p>
<ul>
<li>HDD比较重，而且运行时会呼呼地转，发出噪音. HDD价格低容量大，速度也远远慢于SSD. 适合存储一些音频、视频数据</li>
<li>现在M.2 NVMe固态硬盘速度能达到3500MB/s，就算是普通的SATA SSD速度也能到550MB/s，而机械硬盘现在能到200MB/s就很不错了</li>
</ul>
</li>
<li>
<p><strong>固态硬盘</strong>（ SSD， Solid State Disk )：</p>
<ul>
<li>
<p>SSD<strong>没有物理上的磁头和盘片，也没有扇区和磁道等概念</strong>. SSD的存储原理和机械硬盘不同，它是闪存盘的matrix，用某种控制芯片将多个<strong>NAND FLASH</strong>颗粒整合,</p>
<ul>
<li>Flash属于广义上的ROM( 见下文<em>ROM</em> ).</li>
</ul>
</li>
<li>
<p>严格地讲，SSD不算Disk， 不过它在计算机架构中确实承担着Disk的职能( 外部存储设备 )，所以把SSD放入Disk一类</p>
</li>
<li>
<p>SSD价格贵, 速度快. 因为没有磁头, 寻道时间几乎为0. 因为没有机械部件, 因此抗震荡, 低功耗, 无噪音</p>
</li>
<li>
<p>现在流行的使用MVMe协议的SSD</p>
</li>
</ul>
</li>
</ul>
<p>机械硬盘只能实现 50-120 MB/秒的写入速度，而固态硬盘能达到 550 MB/秒的 SATA 总线极限值</p>
<p>注意，虽然SSD材料是ROM，但磁盘和ROM是两个概念。 现代的磁盘包括了HDD和SSD， 已经不是一个材料概念，而是一个计算机架构中的抽象的功能的概念。 而ROM是一个材料的概念。不能把ROM和Disk混为一谈。</p>
<h1 id="Locality"><a class="header-anchor" href="#Locality"></a>Locality</h1>
<h1 id="Storage-Technologies"><a class="header-anchor" href="#Storage-Technologies"></a>Storage Technologies</h1>
<h2 id="RAM"><a class="header-anchor" href="#RAM"></a>RAM</h2>
<p>RAM（ random access memory ）： 是volatile（易失性）的存储材料， 也就是说断电就会丢失所有信息。 RAM常用来做计算机的内存，包括cache和主存等</p>
<p>RAM分为两类：</p>
<ul>
<li>SRAM( Static RAM ):  “静态”是指<strong>只要不掉电, 存储在SRAM中的数据就不会丢失</strong>
<ul>
<li>更快更贵，一般用作Cache( 包括TLB )</li>
</ul>
</li>
</ul>
<ul>
<li>DRAM( Dynamic RAM ): 在通电时还需要<strong>进行周期性的刷新操作, 才能保证数据不丢失</strong>
<ul>
<li>比SRAM慢，也更便宜，一般用作主存和显存</li>
</ul>
</li>
</ul>
<hr>
<p>下图总结了SRAM和DRAM的区别：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Computer%20Storage/Characteristics%20of%20DRAM%20and%20SRAM%20memory.png" alt="Characteristics of DRAM and SRAM memory"></p>
<ul>
<li>SRAM的存取比DRAM快</li>
<li>SRAM对干扰不敏感</li>
<li>SRAM每单元使用更多晶体管，密集度低，比DRAM更贵，功耗更大</li>
</ul>
<hr>
<p>我们规定RAM芯片的基本存储单位是bit，对应的物理结构称为cell</p>
<h3 id="SRAM"><a class="header-anchor" href="#SRAM"></a>SRAM</h3>
<p>SRAM 将每个bit存储在一个 <em>bistable</em> ( 双稳态 )的cell里。每个cell用一个 <em>six-transistor</em>电路实现。</p>
<p>双稳态：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Computer%20Storage/bitable.png" alt="bitable"></p>
<p>上图是一个双稳态电路，它永远保持在两个不同的电压状态，也就是在上图左（右）稳态。其他任何状态都是不稳定的——电路会从不稳定状态迅速地转移到其中一个稳定状态。</p>
<p>上图其实有个地方应该是有偏差的，也就是中间那个状态。原则上来说，当左右两边的作用力相同时，钟摆在垂直的时候也能无限期地保持平衡，但是当左右两边稍微发生一点扰动，这个状态就会变成左稳态或右稳态之一。而且一旦倒下，便不会有机会再站起来。我们称这个状态为亚稳态。</p>
<p>因为SRAM有双稳态的特性，<strong>只要有电，它就会永远的保持它的值, 即使有干扰来扰乱电压, 当干扰时, 电路就会恢复到稳定值.</strong></p>
<ul>
<li>也就是说SRAM在通电时不需要刷新就能保存数据</li>
</ul>
<p>但是, 如果没有电,  双稳态就不能保持, 意味着数据也就丢失了. 这就是“电脑断电后内存数据就会丢失”的原因.</p>
<h3 id="DRAM"><a class="header-anchor" href="#DRAM"></a>DRAM</h3>
<p>DRAM将每个位存储为对一个电容的充电。DRAM可以制造得非常密集——每个单元由一个电容和一个访问晶体管组成。但是与SRAM不同的是，DRAM存储器的单元对干扰非常敏感.当电容的电压被扰乱之后，它就永远不会恢复了.</p>
<ul>
<li>DRAM加电时需要不断刷新, 才能保存数据</li>
</ul>
<h4 id="DRAM-Structure"><a class="header-anchor" href="#DRAM-Structure"></a>DRAM Structure</h4>
<ul>
<li>DRAM芯片的每$w$个cell组成一个supercell，每$d$个supercell组成一个DRAM芯片的存储部分。
<ul>
<li>即， 一个$d \times w$的DRAM总共存储了$d \times w $ bit</li>
</ul>
</li>
<li>supercell被组织成一个$r$行$c$列的长方形阵列，其中$r \times c = d$.  每个DRAM内使用$(i,j)$二维地址( 即$(行号， 列号)$  )对supercell进行寻址
<ul>
<li>也就是说，DRAM的<strong>寻址的基本单位</strong>是supercell， DRAM没有提供机制给supercell内部的cell寻址</li>
</ul>
</li>
</ul>
<p>example：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Computer%20Storage/DRAM%20chip%20exp.png" alt="DRAM chip exp"></p>
<ul>
<li>上图展示了一个$16 * 8 $的DRAM芯片，其中含有$d = 16$个supercell，每个supercell包含$w = 8 $个cell，$r=4$行， $c=4$列
<ul>
<li>每个supercell含有8个cell，相当于每个supercell存储了1 Byte， 即<strong>该DRAM是按字节寻址的</strong></li>
</ul>
</li>
</ul>
<h4 id="pin"><a class="header-anchor" href="#pin"></a>pin</h4>
<ul>
<li>pin( 引脚 ): 对芯片的外部物理接口的抽象称呼，这里我们只讨论用于信息I/O的pin， 每个携带1 bit信号。 其实不是所有的pin都能用来信息I/O， 比如Vcc和GND，除了供电，就没有其他用处。</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Computer%20Storage/DRAM%20pin.png" alt="DRAM pin"></p>
<p>DRAM芯片通过pin来进行信息传输，上图给出了两组pin：</p>
<ol>
<li>8个data pin，能在芯片中I/O一个字节</li>
<li>2个addr pin，能携带一个2 bit的地址，用于对supercell的寻址
<ul>
<li>注意到，这个DRAM是4行4列的，所以一次只能对一维进行寻址</li>
</ul>
</li>
</ol>
<h4 id="DRAM-Addressing"><a class="header-anchor" href="#DRAM-Addressing"></a>DRAM Addressing</h4>
<p>每个DRAM芯片被连接到某个称为<em>memory controller</em>的电路。这个电路可一次向每个DRAM芯片I/O $w$位。<em>memory controller</em>读取supercell $(i,j)$的内容的步骤为：</p>
<ol>
<li>
<p><em>memory controller</em>会通过addr pin发送2 bit的行地址$i$</p>
<ul>
<li>
<p>这个操作称为<em>a RAS (row access strobe) request</em></p>
</li>
<li>
<p>DRAM此时会选中supercell mateix的第$i$行，复制到内部行缓冲区:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Computer%20Storage/DRAM%20addressing%201.png" alt="DRAM addressing 1"></p>
</li>
</ul>
</li>
<li>
<p>再发送2 bit的列地址$j$</p>
<ul>
<li>
<p>这个操作称为<em>a CAS (col access strobe) request</em></p>
</li>
<li>
<p>DRAM此时会选中行缓冲区的第$j$列. 该元素就是supercell$(i,j)$的1 Byte内容</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Computer%20Storage/DRAM%20addressing%202.png" alt="DRAM addressing 2"></p>
</li>
</ul>
</li>
<li>
<p>DRAM然后会将这1 Byte内容通过8个data pin发送给<em>memory controller</em></p>
</li>
</ol>
<p>这个模型把DRAM的supercell组织成二维而不是一维数组，是为了降低芯片上addr pin的数量。 如果supercell被组织成一维数组，就需要$\log_216 = 4$个addr pin. 但是二维数组就需要如上所述的两次寻址，要花更多的时间</p>
<p>这里考虑最简情况，把一个DRAM芯片当做一个<em>memory module</em>。稍后我们会看到，一个<em>memory module</em>由多个DRAM组成，由 <em>memory module</em>和<em>memory controller</em>交互</p>
<h4 id="Memory-Module"><a class="header-anchor" href="#Memory-Module"></a>Memory Module</h4>
<ul>
<li><em>memory module</em>: DRAM被组织成<em>memory module</em>，插到主板的插槽上
<ul>
<li><em>memory module</em>也就是我们常说的<strong>内存条</strong></li>
</ul>
</li>
<li><em>main memory</em>：主存，也称为<em>system memory</em>. 主板上内存条的集合，提供给计算机一个统一的内存视图，这就是主存
<ul>
<li>此外还存在“显存”， 其实二者是一样的。 给CPU用的叫主存，给GPU用的叫显存</li>
</ul>
</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Computer%20Storage/Memory%20Module.png" alt="Memory Module"></p>
<ul>
<li>
<p>上图展示了一个容量为64 MB 的<em>memory module</em>, 由8个 8MB * 8 （ $d = 8* 1024 * 8, w = 8$ ）的DRAM芯片组成，按0～7编号。每个supercell存储$w = 8$ bit 信息。</p>
</li>
<li>
<p>我们假设一个word为8 Byte. 地址A $(i,j)$上的一个word 就由这8个DRAM的地址为$(i,j)$的supercell组成。 也就是说DRAM0的$(i,j)$存储A的第0个Byte, DRAM1的$(i,j)$存储A的第1个Byte, 以此类推 8个DRAM中读取的8个Byte被发送给<em>memory controller</em>， 组合成一个word，再发送给CPU</p>
</li>
</ul>
<h2 id="Enhanced-DRAMs"><a class="header-anchor" href="#Enhanced-DRAMs"></a>Enhanced DRAMs</h2>
<p>除了上述我们介绍的常规DRAM，还有很多变种的DRAM</p>
<h3 id="FPM-DRAM"><a class="header-anchor" href="#FPM-DRAM"></a>FPM DRAM</h3>
<ul>
<li><em>Fast page mode DRAM (FPM DRAM)</em>: 传统的DRAM在读取$(i,j)$ 数据时，会先将第$i$行copy到行缓冲区，然后读取第$j$列将其返回， 丢弃该行的其他元素。 如果workload是要读取第<em>i</em> 行的所有supercell，那么传统DRAM会在每个RAS/CAS后丢弃剩余数据，重新加载行缓冲区。这无疑是十分低效的。 FPM DRAM在完成$(i,j)$的RAS/CAS后， 不会丢弃剩余的元素。 因此对于第$i$行其他元素的RAS/CAS，可以直接返回结果</li>
</ul>
<h3 id="EDO-DRAM"><a class="header-anchor" href="#EDO-DRAM"></a>EDO DRAM</h3>
<ul>
<li><em>Extended data out DRAM (EDO DRAM)</em>: 比FPM DRAM更先进， 可以把多个CAS缓冲CAS为一组，一起发送</li>
</ul>
<h3 id="SDRAM"><a class="header-anchor" href="#SDRAM"></a>SDRAM</h3>
<p><strong>采用外部时钟与处理器同步，具有更高的数据传输速率</strong></p>
<ul>
<li><em>Synchronous DRAM (SDRAM)</em>： 传统DRAM, FPM DRAM, EDO DRAM都是以异步方式进行I/O的( 使用RAS和CAS两个独立的信号 ). 而SDRAM的I/O都在系统时钟的上升沿执行，这使得它可以同步地存取数据. 简言之，SDRAM比传统DRAM快很多
<ul>
<li>SDRAM属于RAM, 因此也需要周期性刷新</li>
</ul>
</li>
<li>SDRAM的材质分为双极性与CMOS( Complementary Metal Oxide Semiconductor, 互补金属氧化物半导体 )
<ul>
<li>CMOS还被用于在数字影像领域. 市面上常见的数码产品, 其感光元件主要就是CCD或者CMOS, 尤其是低端摄像头产品, 而通常高端摄像头都是CCD感光元件.</li>
</ul>
</li>
<li><strong>主板上就用了一个CMOS芯片来记录时间和硬件配置参数</strong>，比如该从哪个盘启动. 该硬件很悲催，没有自己的名字，我们就称为CMOS. CMOS里自带一个小电池, 因此虽然是易失性的，断了电也能工作</li>
</ul>
<h3 id="DDR-SDRAM"><a class="header-anchor" href="#DDR-SDRAM"></a>DDR SDRAM</h3>
<ul>
<li>
<p><em>Double Data-Rate Synchronous DRAM (DDR SDRAM)</em>：双通道DDR SDRAM, 是SDRAM的增强版, 在上升/下降沿都执行I/O</p>
</li>
<li>
<p>DDR 是一种特殊的 SDRAM，也采用外部时钟与处理器同步，但是与 SDRAM 相比，DDR 允许在一 个时钟周期内读/写两次数据，可以加快数据传输速率</p>
</li>
<li>
<p>随着 <em>prefetch buffer</em> ( 预取缓冲区，决定了有效带宽 ) 的增大，DDR已经分为DDR (2 bits), DDR2 (4 bits), DDR3 (8 bits), DDR4(  ) and  DDR5( 16 bits )</p>
<ul>
<li>注意， DDR4的prefetch和3一样，都是8 bit，但是DDR4提高了核心频率，所以总线速度得以提高</li>
<li>DDR的&quot;Double Data-Rate&quot;指的是会在系统时钟的<strong>上升和下降沿都执行I/O</strong>，并不意味着DDR的速度是SDRAM的两倍。 事实上，随着DDR技术的进步，速度差距是越来越大的。</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left">SDRAM</th>
<th style="text-align:left">DDR</th>
<th style="text-align:left">DDR2</th>
<th style="text-align:left">DDR3</th>
<th style="text-align:left">DDR4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">prefetch buffer size</td>
<td style="text-align:left">1 bit</td>
<td style="text-align:left">2 bit</td>
<td style="text-align:left">4 bit</td>
<td style="text-align:left">8 bit</td>
<td style="text-align:left">8 bit</td>
</tr>
<tr>
<td style="text-align:left">电压</td>
<td style="text-align:left">3.3</td>
<td style="text-align:left">2.5 - 2.6</td>
<td style="text-align:left">1.8</td>
<td style="text-align:left">1.35 - 1.5</td>
<td style="text-align:left">1.2</td>
</tr>
</tbody>
</table>
<h3 id="GDDR"><a class="header-anchor" href="#GDDR"></a>GDDR</h3>
<ul>
<li><em>GDDR( Graphics Double Data Rate DRAM )</em>： 一般用作VRAM( 显存 )，带宽更高，速度更快， 支持并发读写（当然容量也更小）。 市面上常见的有GDDR6</li>
<li>GDDR和主存的普通DDR的最大区别就是前者有一个<strong>宽的“总线”</strong>， 总线越宽，数据传输速率越高。 由于图形涉及并行操作大量数据，因此内存总线的宽度非常重要。</li>
</ul>
<h2 id="ROM"><a class="header-anchor" href="#ROM"></a>ROM</h2>
<p>ROM( Read-Only Memory ):  顾名思义是不可写的一种存储材质，它是<strong>novolatile</strong>( 非易失性)的， 数据不会随着断电而丢失。</p>
<ul>
<li>不过，“不可写”其实是生产工艺的限制，而不是什么设计上的特性。</li>
<li>后来ROM发展出了可擦写的存储材质EPROM和EEPROM，因为是可擦写的，所以严格来讲不算&quot;Read-Only&quot;， 但是它们确实是在ROM技术上发展出来的，因此也称为ROM。 后来在这两种技术的发展上又发展出了<strong>NAND FLASH</strong>闪存，这就是我们现在用的U盘中用到的技术，同样，因为其体积小，容量和速度均不错，现在手机存储中的emmc颗粒也是用的这种技术，所以有手机厂商就把手机的存储容量约定俗成为ROM，其继承ROM断电不丢失数据的特性，而且有着较快的速度。（但是是<strong>可擦写</strong>的哦）</li>
<li>EEPROM和flash都有写入次数限制</li>
<li>因此, 闪存(Flash)依然是 ROM 的一种, 写入Flash时必须先擦除原有数据，因此写速度比读速度要慢不少.</li>
</ul>
<p>refs: CSAPP</p>
<h1 id="Others"><a class="header-anchor" href="#Others"></a>Others</h1>
<ul>
<li>
<p>PROM， 可编程只读存储器，<strong>非易失，可以一次电写入，但之后无法修改</strong></p>
</li>
<li>
<p>EPROM 可擦除可编程只读存储器，<strong>可以写入多次，但需要通过紫外光</strong>擦除整个芯片的信息，时间长，但是造价相对较低集成度高</p>
</li>
<li>
<p>EEPROM:  电子 EPROM,可以<strong>擦除单个字节</strong>，消耗时间相对较短，但是造价贵且集成度低</p>
</li>
<li>
<p>CD-ROM: 采用串行存储, 并非随机访问</p>
</li>
</ul>
<h1 id="内存的刷新策略"><a class="header-anchor" href="#内存的刷新策略"></a>内存的刷新策略</h1>
<ul>
<li>
<p>集中式刷新：</p>
<ul>
<li>方式：停止读写操作，刷新每一行</li>
<li>缺点：刷新时无法操作内存</li>
</ul>
</li>
<li>
<p>分散式刷新：</p>
<ul>
<li>方式：每个存储周期内，读写操作完成时进行刷新</li>
<li>对集中式的改进：用户不会感受到内存停止</li>
<li>缺点：会增加每个存储周期的时间</li>
</ul>
</li>
<li>
<p>异步刷新：</p>
<ul>
<li>方式：每行各自以64ms间隔刷新；两个时间间隔内保证每一行被刷新一次</li>
<li>优点：刷新不需要占用读写时间，效率高，常用</li>
</ul>
</li>
</ul>
<h1 id="内存的模块组织策略"><a class="header-anchor" href="#内存的模块组织策略"></a>内存的模块组织策略</h1>
<ul>
<li>
<p>位扩展：地址线不变，数据线增加</p>
<ul>
<li>使用8个4<em>1b芯片组成4</em>8b存储器（注意此时每个地址都会同时选中八个芯片上的对应位置）</li>
</ul>
</li>
<li>
<p>字扩展：数据线不变，地址线增加</p>
<ul>
<li>使用8个4<em>8b芯片组成32</em>8b存储器（高3位用于选片）</li>
</ul>
</li>
<li>
<p>字、位扩展：数据线和地址线同时增加</p>
<ul>
<li>使用8个4<em>4b芯片组成16</em>8b存储器（高2位选片；每次同时选中两片）</li>
</ul>
</li>
</ul>
<h1 id="Questions"><a class="header-anchor" href="#Questions"></a>Questions</h1>
<p>COA2022 05</p>
<blockquote>
<p>Q:</p>
<p>已知某机主存容量为 64KB，按字节编址。假定用 1K×4 位的 DRAM 芯片构成该存储器，</p>
<p>请问:<br>
a) 需要多少个这样的 DRAM 芯片?</p>
<p>b) 主存地址共多少位?哪几位用于选片?哪几位用于片内选址?</p>
</blockquote>
<p>Answer:</p>
<ul>
<li>
<p>a):</p>
<p>1B=8bit</p>
<p>所以 N=64KB/(1K<em>4it)=16</em>8=128 个</p>
</li>
<li>
<p>b):</p>
<p>按字节选址的话 64K=2^6*2^10=2^16B, 所以主存地址一共 16 位.</p>
<p>由于片内为 1K 个地址，所以低 10 位为片内地址，高 16-10=6 位用于选片。</p>
<p>注意，此处不能算为 128=27，所以高 7 位选片，低 16-7=9 位用于片内选址。因为片内的选址单元是 4 位，需要位扩展后才能按字节编址(整体上是字位扩展)，即选片时都是同 时选中 2 个芯片</p>
</li>
</ul>
<hr>
<blockquote>
<p>Q: 假定用 8K×8 位的 EPROM 芯片组成 32K×16 位的只读存储器，请问</p>
<p>a) 数据寄存器(用于存放数据)最少应有多少位?</p>
<p>b) 地址寄存器(用于存放地址)最少应有多少位?</p>
<p>c) 共需要多少个 EPROM 芯片</p>
</blockquote>
<p>Answer:</p>
<ul>
<li>a) 6 位，与每个寻址单元中数据的长度相同</li>
<li>b) 32K=2^15bit 所以最少15位</li>
<li>c) 32/8*16/8=8 个</li>
</ul>
<p>1B=8bit</p>
<p>所以 N=64KB/(1K<em>4it)=16</em>8=128 个</p>
<hr>
<p>![image-20230225223940002](/Users/lyk/Library/Application Support/typora-user-images/image-20230225223940002.png)</p>
<p>?? 为什么用后面的数字作为位元阵列的数量?</p>
<hr>
<blockquote>
<p>Q:下列各类存储器中，不采用随机存取方式的是( )。</p>
<p>A. EPROM</p>
<p>B. CD-ROM</p>
<p>C. DRAM</p>
<p>D. SRAM</p>
</blockquote>
<p>Answer: B</p>
<p>随机存取是指 CPU 可对存储器的任一存储单元中的内容随机存取，而且<strong>存取时间与存储单元的物理位置无关</strong>。</p>
<p>A、C 和 D 均采用随机存取方式，CD-ROM 即光盘，采用<strong>串行存取</strong>方式。注意，CD-ROM 是只读型光盘存储器，其访问方式是顺序访问，不属于只读存储器 ROM。</p>
<hr>
<blockquote>
<p>Q:</p>
<p>某容量为256MB的存储器由若干4M×8位的DRAM芯片构成，该DRAM 芯片的地址引脚和数据引脚总数是( )。</p>
<p>A. 19 B. 22 C. 30 D. 36</p>
</blockquote>
<p>4M×8 位的芯片数据线应为 8 根，地址线应为 log24M = 22 根，而 <strong>DRAM 采用地址复用 技术</strong>，地址线是原来的 1/2，且地址信号分行、列两次传送。地址线数为 22/2=11 根，所以地址引脚与数据引脚的总数为 11 +8= 19 根，选 A。此题需要注意 DRAM 采用的是传两次 地址的策略，所以<strong>地址线为正常的一半</strong>，这是很多考生容易忽略的地方。</p>
<ul>
<li>回顾一下, 内存采用DRAM, 因此地址线复用. 地址线复用可以在线不变的情况下增大地址空间, 缺点是每次访问都需要两次传输, 降低速度. 内存需要更大的地址空间, 因此用DRAM;</li>
<li>而Cache采用SRAM, 地址线不会复用. 这可以增大访问速度, 缺点是需要的地址线较多. 对于Cache最关键的是速度, 因此Cache使用SRAM( 或者说不复用地址线 )</li>
</ul>
<hr>
<p>![image-20230225230037825](/Users/lyk/Library/Application Support/typora-user-images/image-20230225230037825.png)</p>
<p>看不懂. 总之前面的数字代表的是地址线</p>
<hr>
<p>![image-20230225230209721](/Users/lyk/Library/Application Support/typora-user-images/image-20230225230209721.png)</p>
<hr>
<p>![image-20230225230232733](/Users/lyk/Library/Application Support/typora-user-images/image-20230225230232733.png)</p>
<p>先把word拼起来, 每行都是1word</p>
<hr>
<p>![image-20230225230349734](/Users/lyk/Library/Application Support/typora-user-images/image-20230225230349734.png)</p>
<p>看不懂, 总之是低位表示芯片编号, 因此查到芯片编号. 接着由于一个周期只能访问一个芯片, 所以第三个周期到了第二个芯片, 但我没搞懂, 读取数据(8B)不需要时间吗?</p>
<hr>
<p>![image-20230225230523504](/Users/lyk/Library/Application Support/typora-user-images/image-20230225230523504.png)</p>
<p>看不懂, 只需知道4次访问都不能在同一模块内</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Hardware</tag>
      </tags>
  </entry>
  <entry>
    <title>Database Paradigms and BNCF</title>
    <url>/2021/05/15/Database%20Paradigms%20and%20BNCF/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>第一范式</li>
<li>第二范式</li>
<li>第三范式</li>
<li>部分依赖、完全依赖、传递依赖</li>
</ul>
<span id="more"></span>
<h2 id="一、第一范式"><a class="header-anchor" href="#一、第一范式"></a>一、第一范式</h2>
<ul>
<li>
<p>数据库每一列都是不可分的基本数据项（原子数据项）</p>
</li>
<li>
<p>在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。就比如说：下面一个数据表</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>编号</th>
<th>姓名</th>
<th>地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>001</td>
<td>李一</td>
<td>山东，青岛</td>
</tr>
<tr>
<td>002</td>
<td>李二</td>
<td>山东，济南</td>
</tr>
<tr>
<td>003</td>
<td>李三</td>
<td>山东，济宁</td>
</tr>
</tbody>
</table>
<p>上表所示的地址，就不符合第一范式，因为地址那一列可以分为省份和市区，故可以修改为</p>
<table>
<thead>
<tr>
<th>编号</th>
<th>姓名</th>
<th>省份</th>
<th>市区</th>
</tr>
</thead>
<tbody>
<tr>
<td>001</td>
<td>李一</td>
<td>山东</td>
<td>青岛</td>
</tr>
<tr>
<td>002</td>
<td>李二</td>
<td>山东</td>
<td>济南</td>
</tr>
<tr>
<td>003</td>
<td>李三</td>
<td>山东</td>
<td>济宁</td>
</tr>
</tbody>
</table>
<p>​		<!--more--></p>
<h2 id="二、第二范式"><a class="header-anchor" href="#二、第二范式"></a>二、第二范式</h2>
<ul>
<li>
<p>第二范式要求在满足第一范式的基础上，<strong>非主属性必须完全依赖于候选键</strong>，也就是要消除非主属性对任一候选键的部分依赖。（完全依赖，部分依赖在后文）</p>
</li>
<li>
<p>2NF的违例只会出现在候选键由超过一个字段构成的表中，因为对单关键字字段不存在部分依赖问题。</p>
</li>
</ul>
<p>就比如说：</p>
<table>
<thead>
<tr>
<th>订单号</th>
<th>产品号</th>
<th>产品数量</th>
<th>产品价格</th>
<th>订单时间</th>
<th>订单金额</th>
</tr>
</thead>
<tbody>
<tr>
<td>2001</td>
<td>001</td>
<td>3</td>
<td>8.5</td>
<td>20200224</td>
<td>25.5</td>
</tr>
<tr>
<td>2002</td>
<td>002</td>
<td>2</td>
<td>7.5</td>
<td>20200424</td>
<td>17</td>
</tr>
<tr>
<td>2002</td>
<td>003</td>
<td>2</td>
<td>6.5</td>
<td>20200424</td>
<td>17</td>
</tr>
<tr>
<td>2003</td>
<td>001</td>
<td>2</td>
<td>8.5</td>
<td>20200324</td>
<td>16</td>
</tr>
</tbody>
</table>
<p>如上图加粗字体所示，可能对于同一个订单，含有不同的产品，因此主键必须是产品号和订单号联合组成。但可以发现产品数量、产品价格与订单号、产品号都有关，不过订单时间与订单金额仅与订单号有关，这就违反了第二范式。故可以修改为：</p>
<table>
<thead>
<tr>
<th>订单</th>
<th>产品号</th>
<th>产品数量</th>
<th>产品价格</th>
</tr>
</thead>
<tbody>
<tr>
<td>2001</td>
<td>001</td>
<td>3</td>
<td>8.5</td>
</tr>
<tr>
<td>2002</td>
<td>002</td>
<td>2</td>
<td>7.5</td>
</tr>
<tr>
<td>2002</td>
<td>003</td>
<td>2</td>
<td>6.5</td>
</tr>
<tr>
<td>2003</td>
<td>001</td>
<td>2</td>
<td>8.5</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>订单号</th>
<th>订单时间</th>
<th>订单金额</th>
</tr>
</thead>
<tbody>
<tr>
<td>2001</td>
<td>20200224</td>
<td>25.5</td>
</tr>
<tr>
<td>2002</td>
<td>20200424</td>
<td>17</td>
</tr>
<tr>
<td>2002</td>
<td>20200424</td>
<td>17</td>
</tr>
<tr>
<td>2003</td>
<td>20200324</td>
<td>16</td>
</tr>
</tbody>
</table>
<h2 id="三、第三范式"><a class="header-anchor" href="#三、第三范式"></a>三、第三范式</h2>
<p>第三范式要求在满足第二范式的基础上，任何非主属性不依赖于其他非主属性，即在第二范式的基础上消除传递依赖。第三范式要求数据表的每一列都与主键直接相关，而不是间接相关。（不存在非关键字段对任一候选关键字段的传递依赖）</p>
<p>就比如说：</p>
<table>
<thead>
<tr>
<th>学号</th>
<th>姓名</th>
<th>性别</th>
<th>班主任姓名</th>
<th>班主任性别</th>
<th>班主任年龄</th>
</tr>
</thead>
<tbody>
<tr>
<td>2001</td>
<td>李一</td>
<td>男</td>
<td>陈毅</td>
<td>男</td>
<td>35</td>
</tr>
<tr>
<td>2003</td>
<td>李二</td>
<td>男</td>
<td>陈毅</td>
<td>男</td>
<td>35</td>
</tr>
<tr>
<td>2004</td>
<td>李三</td>
<td>男</td>
<td>王玉</td>
<td>男</td>
<td>26</td>
</tr>
<tr>
<td>2005</td>
<td>李四</td>
<td>男</td>
<td>王玉</td>
<td>男</td>
<td>26</td>
</tr>
</tbody>
</table>
<p>从上表可以看出，所有属性都完全依赖于学号，故符合第二范式，但是班主任性别和班主任年龄直接依赖于班主任姓名，而不是主键学号，故不符合第三范式。可修改为：</p>
<table>
<thead>
<tr>
<th>学号</th>
<th>姓名</th>
<th>性别</th>
<th>班主任姓名</th>
</tr>
</thead>
<tbody>
<tr>
<td>2001</td>
<td></td>
<td>李一</td>
<td>男</td>
</tr>
<tr>
<td>2003</td>
<td>李二</td>
<td>男</td>
<td>陈毅</td>
</tr>
<tr>
<td>2004</td>
<td>李三</td>
<td>男</td>
<td>王玉</td>
</tr>
<tr>
<td>2005</td>
<td>李四</td>
<td>男</td>
<td>王玉</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>班主任姓名</th>
<th>班主任性别</th>
<th>班主任年龄</th>
</tr>
</thead>
<tbody>
<tr>
<td>陈毅</td>
<td>男</td>
<td>35</td>
</tr>
<tr>
<td>陈毅</td>
<td>男</td>
<td>35</td>
</tr>
<tr>
<td>王玉</td>
<td>女</td>
<td>26</td>
</tr>
<tr>
<td>王玉</td>
<td>女</td>
<td>26</td>
</tr>
</tbody>
</table>
<p>这样就满足第三范式了。</p>
<p>例子2：</p>
<p>表：(学号, 姓名, 年龄, 所在学院, 学院地点, 学院电话)</p>
<p>该表中候选字段只有“学号”，于是“学号”做主键。由于主键是单一属性，所以不存在非主属性对主键的部分函数依赖的问题，所以必然满足第二范式。但是存在如下传递依赖</p>
<p>(学号) → (所在学院) → (学院地点, 学院电话)</p>
<p>学院地点和学院电话传递依赖于学号，而学院地点和学院电话都是非关键字段，即表中出现了“某一非关键字段可以确定出其它非关键字段”的情况，于是违反了第三范式。</p>
<p>解决办法：</p>
<p>把原表分成两个表：</p>
<p>学生：(学号, 姓名, 年龄, 所在学院)；</p>
<p>学院：(学院, 地点, 电话)。</p>
<h2 id="四、部分依赖、完全依赖、传递依赖"><a class="header-anchor" href="#四、部分依赖、完全依赖、传递依赖"></a>四、部分依赖、完全依赖、传递依赖</h2>
<ul>
<li>
<p>部分函数依赖：设X,Y是关系R的两个属性集合，存在X→Y，若X’是X的真子集，存在X’→Y，则称Y部分函数依赖于X。</p>
<p>比如说：C可以通过AB得到，并且C也可以仅通过A得到，仅通过B得到，<br>
那么就说C部分依赖AB。</p>
</li>
<li>
<p>完全函数依赖：设X,Y是关系R的两个属性集合，X’是X的真子集，存在X→Y，但对每一个X’都有X’ !→Y，则称Y完全函数依赖于X。</p>
<p>比如说：C可以通过AB得到，并且C不可以仅通过A得到，也不可以仅通过B得到，<br>
那么就说C完全依赖AB.</p>
</li>
<li>
<p>传递函数依赖：设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y !→X),Y→Z，则称Z传递函数依赖于X。<br>
比如说：B可以通过A得到，C可以通过B得到，那么就称C传递依</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>Database Toolkit</title>
    <url>/2022/09/13/Database-Toolkit/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Mysql</li>
<li>Mongodb</li>
<li>Database Tools</li>
</ul>
<span id="more"></span>
<h1 id="Mysql"><a class="header-anchor" href="#Mysql"></a>Mysql</h1>
<h2 id="Install"><a class="header-anchor" href="#Install"></a>Install</h2>
<ul>
<li>
<p>manjaro:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yay -S mysql</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>mac:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Ubuntu:这里只针对Ubuntu 20.04. Ubuntu 源仓库中最新的 MySQL 版本号是 MySQL 8.0</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install mysql-server</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>
<p>Start mysql server:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo systemctl start mysql</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Check status of mysql-server:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl status mysql</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Unintall"><a class="header-anchor" href="#Unintall"></a>Unintall</h2>
<p>on Ubuntu:</p>
<ol>
<li>First, remove already installed mysql-server using-- <code>sudo apt-get remove --purge mysql-server mysql-client mysql-common</code></li>
<li>Then clean all files <code>sudo apt-get autoremove</code></li>
</ol>
<h2 id="Config"><a class="header-anchor" href="#Config"></a>Config</h2>
<h3 id="mysql允许远程访问"><a class="header-anchor" href="#mysql允许远程访问"></a>mysql允许远程访问</h3>
<p>mysql默认绑定本地环回地址（127.0.0.1），无法公网通信(即使你的用户是允许远程登录的用户(如<code>%</code>):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcp 0 0 127.0.0.1:3306 0.0.0.0:* LISTEN 3783/mysqld</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>需要修改mysql的配置文件, 该文件的位置依平台的不同而变化. 它在ubuntu20.04中位于:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>我们需要修改<code>bind-address</code>字段:</p>
<ol>
<li>
<p>可以在其后面添加可访问mysql服务器的ip，用空格隔开:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind-address=127.0.0.1  139.196.197.138 &lt;other-ip&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>或者直接把该字段注释掉</p>
</li>
</ol>
</li>
<li>
<p>重启mysql服务:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Connection"><a class="header-anchor" href="#Connection"></a>Connection</h1>
<ul>
<li>
<p>远程连接:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -h 192.168.5.116 -P 3306 -u root -p123456</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>简单来说，<code>locahost</code> 一般意味着使用的是 <code>Unix Domain Socket</code> ，此时是不会经过网络防火墙的。</p>
<p>如果 <code>skip_name_resolve</code> 配置关闭，那么 <code>127.0.0.1</code> 这类地址也会被解析成 <code>locahost</code></p>
<p>如果不指定主机或者使用 <code>-hlocalhost</code> ，实际上会有限尝试使用 Unix Domain Socket 连接 (实际还需要保证没有使用 <code>--protocol=TCP</code> 参数)，默认的是 <code>/var/lib/mysql/mysql.sock</code> ，如果 Sock 地址修改了，也可以通过 <code>-S PATH</code> 参数指定。</p>
<p>也就是说，在通过 mysql 客户端访问数据库时，如果指定了 <code>-h&lt;IP&gt;</code> 参数，那么会通过 TCP/IP 方式连接数据库。</p>
<p>最简单的，如果要要强制使用 TCP/IP 连接到本地服务器，那就使用 IP 地址 <code>127.0.0.1</code> 而不是主机名 <code>localhost</code></p>
<p>通过 TCP/IP 方式进来的连接，MySQL 服务器接收到的来源主机是 <code>127.0.0.1</code>；如果采用的是 UNIX Domain Socket 方式，那么 MySQL 服务器接收到的来源主机是 <code>localhost</code> 。</p>
<p>另外，对于 TCP/IP 方式来说，如果关闭了 <code>skip_name_resolve</code> 选项，那么会尝试将获取到的 IP 地址解析成域名。</p>
<blockquote>
<p><code>skip_name_resolve</code> 参数在调优时，一般建议开启，也就是说禁止域名解析，可以通过如下命令查看是否开启。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#x27;%skip_name_resolve%&#x27;;</span><br></pre></td></tr></table></figure>
<p>修改时，可以直接在 <code>my.cnf</code> 配置文件的 <code>[mysqld]</code> 字段中添加 <code>skip-name-resolve</code> 即可。</p>
</blockquote>
<p>在 MySQL 中 <code>localhost</code> 一般是用来标示 Unix Domain Socket ，如果将 <code>skip_name_resolve</code> 关闭，那么 <code>127.0.0.1</code> 也可能会被反解析成 <code>localhost</code> 。</p>
<h2 id="Problems"><a class="header-anchor" href="#Problems"></a>Problems</h2>
<h3 id="空密码无法用Datagrip连接"><a class="header-anchor" href="#空密码无法用Datagrip连接"></a>空密码无法用Datagrip连接</h3>
<ol>
<li>首选当然是设一个密码</li>
<li>也可以将Datagrip配置中的密码的保存方式更改为Never</li>
</ol>
<h1 id="Mongodb"><a class="header-anchor" href="#Mongodb"></a>Mongodb</h1>
<h2 id="Install-2"><a class="header-anchor" href="#Install-2"></a>Install</h2>
<p>由于 MongoDB 修改了软件授权协议，  官方仓库已经删除了此软件包。请注意从代码编译 mongodb 需要 ~160GB 磁盘空间，需要花费几个小时时间。因此我们最好安装<code>-bin</code>版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yay -S mongodb</span><br></pre></td></tr></table></figure>
<p>注意： 只有先启动<code>mongod</code>， 才能正确启动<code>mongo</code></p>
<h3 id="报错"><a class="header-anchor" href="#报错"></a>报错</h3>
<p>可能有报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; mongo</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017</span><br><span class="line">2018-09-27T21:11:14.779+0800 W NETWORK  [main] Failed to connect to 127.0.0.1:27017, reason: Connection refused</span><br><span class="line">2018-09-27T21:11:14.780+0800 E QUERY    [main] Error: couldn&#x27;t connect to server 127.0.0.1:27017, connection attempt failed :</span><br><span class="line">connect@src/mongo/shell/mongo.js:234:13</span><br><span class="line">@(connect):1:6</span><br><span class="line">exception: connect failed</span><br></pre></td></tr></table></figure>
<p>出现以上原因，可能是data目录下的mongod.lock文件的问题。可以使用命令修复：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">root@localhost mongodb</span>]<span class="meta"># ./bin/mongod --repair</span></span><br></pre></td></tr></table></figure>
<p>然后重新打开一个窗口，启动mongodb</p>
<h2 id="Config-2"><a class="header-anchor" href="#Config-2"></a>Config</h2>
<p>配置文件路径： <code>\etc\mongodb.conf</code>.</p>
<ul>
<li>其中<code>dbpath</code>为数据库的路径</li>
</ul>
<h2 id="Commands"><a class="header-anchor" href="#Commands"></a>Commands</h2>
<p>启动</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>systemctl start mongodb.service</span><br></pre></td></tr></table></figure>
<p>查看状态:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">status</span> mongodb</span><br></pre></td></tr></table></figure>
<p>重启:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart mongodb</span><br></pre></td></tr></table></figure>
<p>停止:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop mongodb</span><br></pre></td></tr></table></figure>
<p>重载服务:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<p>设置开机启动:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable mongodb</span><br></pre></td></tr></table></figure>
<h1 id="Database-Tools"><a class="header-anchor" href="#Database-Tools"></a>Database Tools</h1>
<h2 id="mycli"><a class="header-anchor" href="#mycli"></a>mycli</h2>
<p>好用的命令行mysql界面,<a href="https://github.com/dbcli/mycli">项目地址</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通用</span></span><br><span class="line">pip install -U mycli</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">on Arch</span></span><br><span class="line">yay -S mycli</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Only on macOS</span></span><br><span class="line">brew update &amp;&amp; brew install mycli  </span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Only on debian or ubuntu</span></span><br><span class="line">sudo apt-get install mycli </span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Database Candidate Key</title>
    <url>/2021/05/14/Database%20Candidate%20Key/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>候选键定义</li>
<li>求候选键步骤</li>
<li>示例</li>
</ul>
<span id="more"></span>
<h1 id="候选键定义"><a class="header-anchor" href="#候选键定义"></a>候选键定义</h1>
<p>首先来看候选键的定义：若关系中的某一属性组的值能唯一地标识一个元组，则称该属性组为候选键。</p>
<p>若W是候选键，则必须满足两个条件：W的闭包是U；W没有冗余。</p>
<p>设关系模式R中U=ABC.......等N个属性，U中的属性在FD中有四种范围：</p>
<p>(1)左右出现;<br>
(2)只在左部出现;<br>
(3)只在右部出现;<br>
(4)不在左右出现;</p>
<h1 id="求候选键步骤"><a class="header-anchor" href="#求候选键步骤"></a>求候选键步骤</h1>
<p>按以下步骤求候选键：<br>
1.只在FD右部出现的属性，不属于候选码;<br>
2.只在FD左部出现的属性，一定存在于某候选码当中;<br>
3.外部属性一定存在于任何候选码当中;<br>
4.其他属性逐个与2,3的属性组合，求属性闭包，直至X的闭包等于U,若等于U,则X为候选码。</p>
<h1 id="示例"><a class="header-anchor" href="#示例"></a>示例</h1>
<p>例1：R&lt;U,F&gt;,U=(A,B,C,D,E,G),F={AB--&gt;C,CD--&gt;E,E--&gt;A.A--&gt;G},求候选码。</p>
<p>因G只在右边出现,所以G一定不属于候选码;而B,D只在左边出现,所以B,D一定属于候选码;BD的闭包还是BD,则对BD进行组合,除了G以外,BD可以跟A,C,E进行组合<br>
先看ABD<br>
ABD本身自包ABD,而AB--&gt;C,CD--&gt;E,A--&gt;G,所以ABD的闭包为ABDCEG=U<br>
再看BDC<br>
CD--&gt;E,E--&gt;A,A--&gt;G,BDC本身自包,所以BDC的闭包为BDCEAG=U<br>
最后看BDE<br>
E--&gt;A,A--&gt;G,AB--&gt;C,BDE本身自包,所以BDE的闭包为BDEAGC=U</p>
<p>因为(ABD)、(BCD)、(BDE)的闭包都是ABCDEG所以本问题的候选码有3个分别是ABC、BCD和BDE</p>
<p>例2：R&lt;U,F&gt;,U=(A,B,C),F={AB--&gt;C,C--&gt;B},求候选码。</p>
<p>因为A只出现在左边，所以A一定是候选键。A的闭包还是A，则对A进行组合，可以和B,C进行组合。</p>
<p>首先看AB，AB本身自包AB，而AB--&gt;C，所以AB的闭包是ABC=U。</p>
<p>再看AC，AC本身自包AC，而C--&gt;B，所以AC的闭包是ABC=U。</p>
<p>因为AB,AC的闭包都是ABC，也就是U，所以候选键是AB，AC。</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>Debugger</title>
    <url>/2022/05/05/Debugger/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>GDB</li>
<li>LLDB</li>
</ul>
<span id="more"></span>
<h1 id="GDB"><a class="header-anchor" href="#GDB"></a>GDB</h1>
<p><a href="https://sourceware.org/gdb/">官网</a></p>
<ul>
<li>
<p>GDB: GNU Debugger，是和GCC配套的Debugger， 当然现在也支持Clang/LLVM</p>
<ul>
<li>要使用GDB，需要GCC编译时开始<code>-g</code>选项，生成GDB所需的调试信息</li>
</ul>
</li>
<li>
<p>Debug步骤：</p>
<ol>
<li>设置断点</li>
<li>监视变量值</li>
<li>单步执行</li>
<li>修改变量值</li>
</ol>
</li>
</ul>
<h2 id="commands"><a class="header-anchor" href="#commands"></a>commands</h2>
<p><a href="https://www.geeksforgeeks.org/gdb-command-in-linux-with-examples/">GDB Tutorial</a></p>
<p>Syntax:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb [-help] [-nx] [-q] [-batch] [-cd=dir] [-f] [-b bps] [-tty=dev] [-s symfile] [-e prog] [-se prog] [-c core] [-x cmds] [-d dir] [prog[core|procID]]</span><br></pre></td></tr></table></figure>
<p>使用<code>gdb [executable-file]</code>打开文件进行调试</p>
<table>
<thead>
<tr>
<th>command</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>break/tbreak</td>
<td>设置断点，可以是行号、函数名及地址(以*开头) </br> tbreak: 设置临时断点</td>
</tr>
<tr>
<td>run</td>
<td>执行当前调试的程序</td>
</tr>
<tr>
<td>list</td>
<td>列出源代码的一部分</td>
</tr>
<tr>
<td>next</td>
<td>执行一条语句但不进入函数内部</td>
</tr>
<tr>
<td>step</td>
<td>执行一条语句，是函数则进入函数内部</td>
</tr>
<tr>
<td>display</td>
<td>显示表达式的值</td>
</tr>
<tr>
<td>print</td>
<td>临时显示表达式的值</td>
</tr>
<tr>
<td>kill</td>
<td>中止正在调试的程序</td>
</tr>
</tbody>
</table>
<h1 id="LLDB"><a class="header-anchor" href="#LLDB"></a>LLDB</h1>
<ul>
<li>LLDB( LLVM Debugger ):是Clang/LLVM的配套Debugger. 在OSX上， Xcode的默认编译器就是Clang/LLVM，Debugger就是LLDB</li>
<li>LLDB和GDB用法差不多，详见<a href="https://lldb.llvm.org/use/map.html">GDB 和 LLDB command的差别</a></li>
</ul>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
      <tags>
        <tag>Compilers</tag>
      </tags>
  </entry>
  <entry>
    <title>Dependabot</title>
    <url>/2022/06/27/Dependabot/</url>
    <content><![CDATA[<p>Outline：</p>
<ul>
<li>Intro</li>
<li>Dependabot alerts</li>
<li>Dependabot security updates</li>
<li>Dependabot version updates</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<p>Dependabot是Github的依赖管理工具, 它具有如下功能:</p>
<ul>
<li>
<p>Dependabot alerts: dependabot会检测vulnerable dependencies，在以下情况下，会触发<code>dependabot alert</code>:</p>
<ul>
<li>当GitHub Advisory Database中收录了一个新的vulnerable dependency</li>
<li>repo的依赖图发生了改变，比如新添加了某个依赖，或者用户改变了某个依赖的版本
<ul>
<li>这里的版本指：“语义版本”(<a href="https://semver.org/">semver</a>)</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Dependabot updates:</p>
<ul>
<li>
<p>Dependabot security updates: 在一个<code>dependabot alert</code>产生时，自动触发一次update</p>
</li>
<li>
<p>Dependabot version updates:  当用户依赖的上游有更新时update</p>
<ul>
<li>
<p>通过depenency graph来得到用户依赖和上游依赖</p>
</li>
<li>
<p>用户需要编写依赖配置文件<code>dependabot.yml</code>， 来<strong>说明如何更新依赖</strong></p>
</li>
<li>
<p>这确保了用户依赖始终是updated的</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="Dependabot-alerts"><a class="header-anchor" href="#Dependabot-alerts"></a>Dependabot alerts</h1>
<p>在repo页面 -&gt; <code>Settings</code> -&gt; <code>Security</code>栏的<code>Code security and analysis</code> ， 开启 <code>Dependency graph</code>和<code>Dependabot alerts</code></p>
<ul>
<li><code>Dependency graph</code>和<code>Dependabot alerts</code>对于public repo是默认开启的，只有private repo需要手动开启这两项</li>
<li><code>Dependency graph</code>： 根据依赖配置文件，生成依赖图</li>
<li><code>Dependabot alerts</code>: 自动检测依赖，如果依赖有更新，就会向用户的邮箱发alert，alert中会包含被影响的文件link，以及漏洞修复的版本和信息</li>
</ul>
<h1 id="Dependabot-security-updates"><a class="header-anchor" href="#Dependabot-security-updates"></a>Dependabot security updates</h1>
<p>在开启了<code>Dependency graph</code>和<code>Dependabot alerts</code>的基础上，再开启<code>Dependabot security updates</code></p>
<ul>
<li><code>security updates</code>: Dependabot会自动将漏洞修复，并且给repo提PR</li>
</ul>
<h1 id="Dependabot-version-updates"><a class="header-anchor" href="#Dependabot-version-updates"></a>Dependabot version updates</h1>
<p>在开启了<code>Dependency graph</code>和<code>Dependabot alerts</code>的基础上，再开启<code>Dependabot version updates</code>, 然后配置<strong>依赖文件</strong>，以指定依赖的更新过程</p>
<ul>
<li><code>version updates</code>: 在发现依赖有更新后，会自动创建一个 PR 来更新依赖文件，并说明依赖更新内容，用户自己选择是否 merge该PR</li>
</ul>
<p>依赖配置文件<code>dependabot.yml</code>可以在Github上创建，也可以手动创建：</p>
<ul>
<li>
<p>手动创建： 在repo根目录下创建<code>.github</code> folder，并且在folder下添加<code>dependabot.yml</code>（dependabot的config）</p>
</li>
<li>
<p>用Github创建：在repo页面通过 <code>Insights</code> -&gt; <code>Dependency graph</code> -&gt; <code>Dependabot</code> -&gt; <code>Enable Dependabot</code> 路径即可开启，之后就可以点击 <code>Create config file</code> 来创建配置文件了</p>
</li>
</ul>
<h2 id="dependabot-yml"><a class="header-anchor" href="#dependabot-yml"></a>dependabot.yml</h2>
<p>具体见<a href="https://docs.github.com/cn/code-security/dependabot/dependabot-version-updates/configuring-dependabot-version-updates">官方文档</a></p>
<p><code>version</code>、<code>updates</code>、<code>package-ecosystem</code> 、<code>schedule</code> 是必填的，还可以配置 <code>registries</code> 来指定私有仓库地址及认证信息</p>
<p>example:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Basic dependabot.yml file with</span></span><br><span class="line"><span class="comment"># minimum configuration for two package managers</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">updates:</span></span><br><span class="line">  <span class="comment"># Enable version updates for npm</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">package-ecosystem:</span> <span class="string">&quot;npm&quot;</span></span><br><span class="line">    <span class="comment"># Look for `package.json` and `lock` files in the `root` directory</span></span><br><span class="line">    <span class="attr">directory:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">    <span class="comment"># Check the npm registry for updates every day (weekdays)</span></span><br><span class="line">    <span class="attr">schedule:</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">&quot;daily&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Enable version updates for Docker</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">package-ecosystem:</span> <span class="string">&quot;docker&quot;</span></span><br><span class="line">    <span class="comment"># Look for a `Dockerfile` in the `root` directory</span></span><br><span class="line">    <span class="attr">directory:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">    <span class="comment"># Check for updates once a week</span></span><br><span class="line">    <span class="attr">schedule:</span></span><br><span class="line">      <span class="attr">interval:</span> <span class="string">&quot;weekly&quot;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
  </entry>
  <entry>
    <title>Design Principle</title>
    <url>/2022/06/12/Design-Principle/</url>
    <content><![CDATA[<p>Outline：</p>
<ul>
<li>单一职责原则</li>
<li>开闭原则</li>
<li>里氏代换原则</li>
<li>依赖倒转原则</li>
<li>接口隔离原则</li>
<li>合成复用原则</li>
<li>迪米特法则</li>
</ul>
<span id="more"></span>
<h1 id="单一职责原则"><a class="header-anchor" href="#单一职责原则"></a>单一职责原则</h1>
<p>Single Responsibility Principle， aka <code>SRP</code></p>
<blockquote>
<p><em>&quot;A class should have only one reason to change&quot;  — Robert Martin</em></p>
<p>一个对象应该只包含单一的职责，并且该职责被完整地封装在一个类中</p>
</blockquote>
<ul>
<li>一个类职责越多，就越更改频繁
<ul>
<li>类的职责见<em>Modularity</em></li>
</ul>
</li>
</ul>
<h1 id="开闭原则"><a class="header-anchor" href="#开闭原则"></a>开闭原则</h1>
<p>Open-Closed Principle, aka <code>OCP</code></p>
<blockquote>
<p>一个软件实体应该对扩展开放，对修改关闭。软件实体可以是一个软件模块、一个由多个类组成的局部结构或一个单独的类。</p>
</blockquote>
<ul>
<li>
<p>Be open for extension</p>
<ul>
<li>module's behavior can be extended</li>
</ul>
</li>
<li>
<p>Be closed for modification</p>
<ul>
<li>source code for the module must not be changes</li>
</ul>
</li>
<li>
<p>RTTI is Ugly and Dangerous!</p>
<ul>
<li>RTTI = Run-Time Type Information 执行时期的类型信息</li>
<li>If a module tries to dynamically cast a base class pointer to several derived classes, any time you extend the inheritance hierarchy, you need to change the module 将一个多态指针转换为其实际指向对象的类型。</li>
<li>破坏了面向对象的纯洁性</li>
<li>recognize them by type switch or if-else-if structures</li>
</ul>
</li>
<li>
<p>开闭原则是对单一职责原则的加强</p>
</li>
</ul>
<h1 id="里氏代换原则"><a class="header-anchor" href="#里氏代换原则"></a>里氏代换原则</h1>
<p>Liskov Substitution Principle, aka <code>LSP</code></p>
<blockquote>
<p>*“All derived classes must be substitutable for their base class” — <em>Barbara Liskov, 1988</em></p>
<p>*“Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.” — <em>R. Martin, 1996</em></p>
<p>所有引用基类(父类)的地方必须能透明地使用其子类的对象</p>
</blockquote>
<ul>
<li>
<p>通俗表达: 软件中如果能够使用基类对象，那么一定能够使用其子类对象</p>
</li>
<li>
<p>里氏代换原则是开闭原则的具体实现</p>
</li>
<li>
<p>LSP is about Semantics and Replacement</p>
<ul>
<li>Understand before you design
<ul>
<li>The meaning and purpose of every method and class must be clearly documented</li>
<li>Lack of user understanding will induce de facto violations of LSP</li>
</ul>
</li>
<li>Replaceability is crucial
<ul>
<li>Whenever any class is referenced by any code in any system,</li>
<li>any future or existing subclasses of that class must be 100% replaceable</li>
</ul>
</li>
</ul>
</li>
<li>
<p>LSP Summary:</p>
<ul>
<li>
<p>Design by Contract</p>
</li>
<li>
<p>Advertised Behavior of an object:</p>
<ul>
<li>
<p>advertised Requirements (Preconditions)</p>
</li>
<li>
<p>advertised Promises (Postconditions)</p>
</li>
</ul>
</li>
<li>
<p>Derived class services should <strong>require no more and promise no less</strong></p>
</li>
</ul>
</li>
</ul>
<h1 id="依赖倒转原则"><a class="header-anchor" href="#依赖倒转原则"></a>依赖倒转原则</h1>
<p>Dependency Inversion Principle, aka <code>DIP</code></p>
<blockquote>
<p>高层模块不应该依赖于低层模块，他们都应该依赖抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</p>
</blockquote>
<ul>
<li>
<p>另一种表述:要针对接口编程，而不要针对实现编程</p>
</li>
<li>
<p>依赖倒转原则是开闭原则的具体实现</p>
</li>
</ul>
<h1 id="接口隔离原则"><a class="header-anchor" href="#接口隔离原则"></a>接口隔离原则</h1>
<p>Interface Segregation Principle, aka <code>ISP</code></p>
<blockquote>
<p>客户不应该依赖那些它不需要的接口</p>
</blockquote>
<ul>
<li>在接口拆分时需要满足单一职责原则</li>
</ul>
<h1 id="合成复用原则"><a class="header-anchor" href="#合成复用原则"></a>合成复用原则</h1>
<p>Composite Reuse Principle， aka <code>CRP</code></p>
<blockquote>
<p>在系统中应该尽量多实用组合聚合关联关系，尽量少甚至不使用继承关系</p>
</blockquote>
<h1 id="迪米特法则"><a class="header-anchor" href="#迪米特法则"></a>迪米特法则</h1>
<p>Law of Demter</p>
<blockquote>
<p>在一个软件实体对其他实体的引用越少越好，或者说如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用，而是通过引入一个第三者发生间接交互</p>
</blockquote>
<ul>
<li>You can play with yourself.</li>
<li>You can play with your own toys, but you can't take them apart</li>
<li>You can play with toys that were given to you.</li>
<li>You can play with toys you've made yourself.</li>
</ul>
<h1 id="组合大于继承"><a class="header-anchor" href="#组合大于继承"></a>组合大于继承</h1>
<ul>
<li>Favor Composition Over Inheritance</li>
<li>Use inherit for polymorphism</li>
<li>Use delegate not inherit to reuse code!</li>
</ul>
<p><strong>Coad's Rules of Using Inheritance</strong></p>
<ul>
<li>Use inheritance only when all of the following criteria are satisfied:
<ul>
<li>A subclass expresses &quot;is a special kind of&quot; and not &quot;is a role played by a&quot;</li>
<li>An instance of a subclass never needs to become an object of another class</li>
<li><strong>A subclass extends, rather than overrides or nullifies, the responsibilities of its superclass</strong></li>
<li>A subclass does not extend the capabilities of what is merely an utility class</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
  </entry>
  <entry>
    <title>Docker Basic</title>
    <url>/2022/02/14/Docker-Basic/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Docker Specification</li>
<li>Docker  Engine</li>
<li>Docker Image</li>
<li>Docker Container</li>
<li>Docker Security</li>
<li>Docker Logs</li>
<li>Docker Management</li>
</ul>
<p>介绍了docker的基本概念和命令</p>
<span id="more"></span>
<h1 id="Docker-Specification"><a class="header-anchor" href="#Docker-Specification"></a>Docker Specification</h1>
<p>Docker采用CS模式， 分为Client ， Engine， Index三部分， docker server就是docker引擎， docker index就是docker镜像存储服务（docker hub之类）</p>
<ul>
<li>
<p>由于Index是个服务，Client就是个命令行，<strong>我们指的docker一般就是docker engine</strong>， 它是用于<strong>运行和编排容器的基础工具</strong></p>
</li>
<li>
<p>daemon实现了docker engine的api, client和daemon通过本地<code>IPC/UNIX Socket</code>通信（<code>/var/run/docker.sock</code>, 用<code>docker --version</code>可查看二者的通信 )</p>
</li>
</ul>
<p>镜像是未运行的容器，二者是类和对象的关系。</p>
<p>也可以把容器理解为<strong>命名空间的有组织集合</strong>, 详见下文Security -&gt; Linux -&gt; Namespace</p>
<h2 id="Docker运行时与编排引擎"><a class="header-anchor" href="#Docker运行时与编排引擎"></a>Docker运行时与编排引擎</h2>
<p>引擎分社区和企业版，版本号遵循<code> YY.MM-xx</code>格式</p>
<p>每个docker主机称为一个docker节点</p>
<h2 id="容器生态"><a class="header-anchor" href="#容器生态"></a>容器生态</h2>
<p>docker内置组件都可以替换为第三方组件，“ Batteries  included but removable”</p>
<h2 id="开放容器计划"><a class="header-anchor" href="#开放容器计划"></a>开放容器计划</h2>
<p>The Open Container Initiative, OCI:    旨在管理容器标准的委员会， 目前已发布两项规范</p>
<ol>
<li>镜像规范</li>
<li>容器运行时规范</li>
</ol>
<h2 id="Docker安装"><a class="header-anchor" href="#Docker安装"></a>Docker安装</h2>
<p>建议所有的云服务器都按如下流程走一遍</p>
<ol>
<li>
<p>``sudo apt install docker`</p>
</li>
<li>
<p>最好使用非root用户来使用Docker,此时需要添加非root用户到本地Docker Unix组：<code>sudo usermod -aG docker [user_name]</code></p>
<ul>
<li>如果当前登陆用户就是要添加进组的用户的话，需要重新登陆才能生效
<ul>
<li>这意味着，如果该登陆用户是个jenkins登陆用户，则需要在jenkins上断连再重新连接</li>
</ul>
</li>
</ul>
</li>
<li>
<p>确认安装结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@lykRemote:~# docker --version</span><br><span class="line">Docker version 20.10.12, build e91ed57</span><br><span class="line">root@lykRemote:~# docker system info</span><br><span class="line">Client:</span><br><span class="line"> Context:    default</span><br><span class="line"> Debug Mode: false</span><br><span class="line">&lt;Snip&gt;</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Containers: 1</span><br><span class="line">  Running: 1</span><br><span class="line">  Paused: 0</span><br><span class="line">  Stopped: 0</span><br><span class="line"> Images: 9</span><br><span class="line"> Server Version: 20.10.12</span><br><span class="line">&lt;Snip&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>设置docker开机启动：</p>
<p><code>systemctl enable docker</code></p>
<ul>
<li>
<p>可能遇到</p>
<p><code>Failed to enable unit: Unit file /etc/systemd/system/docker.service is masked</code>，</p>
<p>此时需要：</p>
<p><code>systemctl unmask docker</code></p>
</li>
</ul>
</li>
<li>
<p>docker启动和关闭：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Docker升级"><a class="header-anchor" href="#Docker升级"></a>Docker升级</h2>
<ol>
<li>
<p>卸载当前Docker：</p>
<p><code>apt-get remove docker docker-engine docker-ce docker.io -y</code></p>
<p>or：</p>
<p><code>apt-get remove docker docker-* -y</code></p>
<p>在之前的版本中，Docker的包名可能有很多个，该command能确保全部删除</p>
</li>
<li>
<p>安装新版本Docker：同上</p>
</li>
</ol>
<h2 id="Docker配置"><a class="header-anchor" href="#Docker配置"></a>Docker配置</h2>
<p>查看docker配置文件位置：</p>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure>
<p>默认是<code>/usr/lib/systemd/system/docker.service</code>， 但是该文件还引用了别的文件，很不好管理，因此docker又使用<code>/etc/docker/daemon.json</code>来进行统一的配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里配置日志级别，并配置源为阿里云</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">        </span><br><span class="line">        <span class="attr">&quot;debug&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;log-level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://zz1b9pta.mirror.aliyuncs.com&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>该文件不存在就创建</li>
<li>可能还会有<code>~/.docker/daemon/json</code>, 亲测这个配置文件不起作用</li>
</ul>
<p>更新配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<p>查看配置信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure>
<h3 id="换阿里源"><a class="header-anchor" href="#换阿里源"></a>换阿里源</h3>
<p>如上， 编辑<code>daemon.json</code>,  然后更新配置就行了</p>
<h2 id="插叙-alpine-linux"><a class="header-anchor" href="#插叙-alpine-linux"></a>插叙: alpine linux</h2>
<p>alpine linux是一个超小的Linux镜像,常用来作为基础镜像层节省空间, 除了纯的alpine linux( e.g. <code>From alpine:latest</code>)外, 也可以安装很多用户软件的alpine版本( e.g. <code>FROM node:14.17.4-alpine</code>)</p>
<p>许多容器是alpine的，在alpine中使用apk命令可能会很慢， 可以进入容器，在容器内<strong>换源</strong>：</p>
<p>Alpine 的源文件为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/apk/repositories</span><br></pre></td></tr></table></figure>
<p>这里面的默认配置例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://dl-cdn.alpinelinux.org/alpine/v3.11/main</span><br><span class="line">http://dl-cdn.alpinelinux.org/alpine/v3.11/community</span><br></pre></td></tr></table></figure>
<p>可以使用以下命令来进行源的切换（阿里云源）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27; /etc/apk/repositories</span><br></pre></td></tr></table></figure>
<h2 id="Docker存储驱动的选择"><a class="header-anchor" href="#Docker存储驱动的选择"></a>Docker存储驱动的选择</h2>
<p>每个Docker容器都有一个本地存储空间，用于保存层叠的镜像层（Image Layer）和挂载的容器文件系统，默认情况下容器的所有读写操作都发生在其镜像层或者挂载的文件系统中。</p>
<p>本地存储通过存储驱动（Storage Driver）管理. 存储驱动在上层都采用栈式镜像存储和Copy on Write,  但底层支持不同实现（只针对linux, windows只支持一种存储驱动Windows Filter）</p>
<p>尽管存储空间是容器级别，存储驱动是<strong>节点</strong>级别的，即每个Docker host只能选择一种存储驱动，而不能为每个容器选择不同的存储驱动</p>
<p>下面将存储驱动设置为<code>overlay2</code>：(  <code>daemon.json</code> )</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;storage-driver&quot;: &quot;overlay2&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>修改正在运行的Docker host的存储驱动会导致现有镜像和容器在重启之后不可用， 因为每种存储驱动在主机上存储镜像层的位置不同，修改了驱动，docker就找不到原来的镜像和容器了。 切换到原来的存储驱动就可以继续使用</p>
</li>
<li>
<p>如果要在在切换存储驱动后还能使用原来的镜像和容器，需要先将镜像push到docker仓库，修改本地存储引擎并重启，然后从仓库pull镜像</p>
</li>
<li>
<p>json的最后一个属性后面不能加<strong>逗号</strong></p>
</li>
</ul>
<p>检查存储驱动类型：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker system info</span><br><span class="line">&lt;Snip&gt;</span><br><span class="line">Storage Driver: overlay2</span><br><span class="line">  Backing Filesystem: extfs</span><br><span class="line">  Supports d_type: true</span><br><span class="line">  Native Overlay Diff: true</span><br><span class="line">  userxattr: false</span><br><span class="line">&lt;Snip&gt;</span><br></pre></td></tr></table></figure>
<p>存储驱动介绍：</p>
<ul>
<li>
<p>Red Hat Enterprise: 低版本内核或低版本docker, 建议使用<code>Device Mapper</code> ; 高版本用<code>overlay2</code></p>
</li>
<li>
<p>Ubuntu 4.x内核或更高的版本建议用<code>overlay2</code></p>
</li>
</ul>
<p>大部分存储驱动不需要额外配置，但<code>Device Mapper</code>默认情况下采用<code>loopback mpunted sparse file</code>作为底层实现，性能很差，不能用于生产环境，需要手动更换为<code> LVM</code></p>
<h1 id="Docker-Engine"><a class="header-anchor" href="#Docker-Engine"></a>Docker Engine</h1>
<p>docker server就是docker引擎，而引擎架构如下：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Basic/docker%20engine%20archetecture.png" alt="docker engine archetecture"></p>
<ul>
<li><code>daemon</code>: 实现了与docker client通信的REST API.  自身通过<code>gRPC</code> 与<code>containerd</code>  通信</li>
<li><code>containerd</code>: 用于容器生命周期管理 ---- <code>start|stop|pause|rm</code>
<ul>
<li><code>containerd</code>虽然管理容器，但不负责创建容器。 它指挥<code>runc</code>创建容器
<ul>
<li><code>containerd</code>将docker image转换为 <code> OCI bundle</code>, 并让<code>runc</code>基于此创建容器</li>
</ul>
</li>
<li><code>containerd</code>后来也用于镜像管理等</li>
</ul>
</li>
<li><code>shim</code>： 作为容器的父进程，shim职责为：
<ul>
<li>保持输入输出流的开启</li>
<li>将容器的退出状态反映给<code>daemon</code></li>
</ul>
</li>
<li><code>runc</code>是OCI容器运行时规范的参考实现，只能用于创建容器。
<ul>
<li><code>runc</code>每次创建容器就会fork一个进程。创建完毕， 对应的<code>runc</code>进程就会退出。 因此即使运行上百个容器也无需维持上百个<code>runc</code>进程</li>
<li>一旦<code>runc</code>进程退出，相关联的<code>containerd-shim</code>进程就会成为容器的父进程</li>
</ul>
</li>
</ul>
<p>在这个架构下，容器的启动和管理实现了和<code>daemon</code>的解耦。 即容器运行时和<code>daemon</code>解耦，称为“无守护进程的容器” <code>daemonless container</code>。 因此，对<code>daemon</code>的维护「升级等<strong>不会影响到运行中的容器</strong></p>
<h1 id="Docker-Image"><a class="header-anchor" href="#Docker-Image"></a>Docker Image</h1>
<h2 id="commands"><a class="header-anchor" href="#commands"></a>commands</h2>
<h3 id="搜索镜像"><a class="header-anchor" href="#搜索镜像"></a>搜索镜像</h3>
<p><code>docekr search</code> 通过CLI方式在docker hub搜索镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search [OPTIONS] NAME</span><br></pre></td></tr></table></figure>
<ul>
<li><code>NAME</code>: 仓库名，即<code>&lt;repository&gt;</code></li>
</ul>
<h3 id="下载镜像"><a class="header-anchor" href="#下载镜像"></a>下载镜像</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image pull &lt;image&gt; #默认从docker hub</span><br><span class="line">docker image pull &lt;registry&gt;/&lt;image&gt;:# 指定镜像仓库服务</span><br></pre></td></tr></table></figure>
<ul>
<li><code>&lt;registory&gt;</code>:  <code>&lt;域名/IP&gt;[:端口号]</code>。默认地址是 Docker Hub(<code>docker.io</code>)</li>
</ul>
<h3 id="列出镜像"><a class="header-anchor" href="#列出镜像"></a>列出镜像</h3>
<p>列出本机的所有镜像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>--digest</code>：查看镜像摘要</p>
</li>
<li>
<p><code>--filter</code>: 开启过滤，支持如下过滤器</p>
<ul>
<li>
<p><code>danglng</code>： 仅返回 True（悬虚镜像）；false（非悬虚镜像）</p>
</li>
<li>
<p><code>before</code>， <code>since</code>： 接受<code>&lt;mage&gt;</code>: 作为参数，返回在该image之前/后创建的所有镜像</p>
</li>
<li>
<p><code>label</code>： 根据<code>label</code>值过滤</p>
</li>
<li>
<p><code>reference</code>： 按名过滤：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> 仅显示标签为latest的镜像</span></span><br><span class="line">docker image ls --filter reference=&quot;*.latest&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p><code>--format</code>：</p>
<p>用 <a href="https://gohugo.io/templates/introduction/">Go 的模板语法</a>对输出格式化：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出镜像结果，并且只包含镜像ID和仓库名</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker image <span class="built_in">ls</span> --format <span class="string">&quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;&quot;</span></span></span><br><span class="line"></span><br><span class="line">5f515359c7f8: redis</span><br><span class="line">05a60462f8ba: nginx</span><br><span class="line">fe9198c04d62: mongo</span><br><span class="line">00285df0df87: &lt;none&gt;</span><br><span class="line">329ed837d508: ubuntu</span><br><span class="line">329ed837d508: ubuntu</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="查看镜像"><a class="header-anchor" href="#查看镜像"></a>查看镜像</h3>
<p>列出镜像细节：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image inspect</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>To list all the images and their respective OSs</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `docker images --format &#123;&#123;.ID&#125;&#125;`; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$i</span> `docker image inspect <span class="variable">$i</span> |grep Os`; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="删除镜像"><a class="header-anchor" href="#删除镜像"></a>删除镜像</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image rm &lt;image&gt;</span><br></pre></td></tr></table></figure>
<p>删除全部的悬虚镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image prune</span><br></pre></td></tr></table></figure>
<h3 id="导出镜像为文件"><a class="header-anchor" href="#导出镜像为文件"></a>导出镜像为文件</h3>
<p>将指定镜像保存成 tar 文件:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker save -o [file-name].tar  &lt;image&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-o </code>:输出到的文件</li>
</ul>
<h2 id="镜像服务"><a class="header-anchor" href="#镜像服务"></a>镜像服务</h2>
<p>可完全类比GitHub</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Basic/docker%20registry.png" alt="docker registry"></p>
<ul>
<li>docker image存储在镜像仓库服务 Image Registry中，默认是Docker Hub</li>
<li>Image Registry包含多个镜像仓库Image Repository,</li>
<li>Image Repository包含多个镜像
<ul>
<li>Docker Hub分为官方和非官方仓库，官方仓库名(<code>&lt;repository&gt;</code>) 一般在命名空间顶层，比如 <code>ubuntu</code>， 而个人仓库一般是次级命名空间，比如<code>user_name/ubuntu</code></li>
</ul>
</li>
</ul>
<h2 id="镜像标识（-image-）"><a class="header-anchor" href="#镜像标识（-image-）"></a>镜像标识（&lt;image&gt;）</h2>
<p>镜像标识方法：</p>
<ul>
<li>镜像名：<code>&lt;/repository&gt;:&lt;tag&gt;</code>
<ul>
<li>如果没有在仓库名后指定标签，则默认为<code>tag=latest</code>，但是， <code>latest</code>并没有特殊含义，不能保证这是最新的镜像</li>
<li>同一镜像可以打多个标签</li>
<li>标签是可变的，因此可能不准确</li>
<li>标签会造成悬虚镜像（<code>dangling image</code>）:  当构建了一个新镜像，然后为该镜像打了个已经存在的标签，那么docker会将旧镜像上的标签转移到新镜像上，旧镜像就变成了悬虚镜像，标识为<code>&lt;none&gt;:&lt;onne&gt;</code>:</li>
</ul>
</li>
<li>镜像ID</li>
<li>镜像摘要： 基于内容的散列（最准确）</li>
</ul>
<h2 id="镜像体积"><a class="header-anchor" href="#镜像体积"></a>镜像体积</h2>
<p>镜像下载和上传过程中镜像是保持着压缩状态</p>
<p>Docker Hub 中显示的体积是压缩后的体积</p>
<p><code>docker image ls</code> 显示的是镜像下载到本地后，展开的大小，准确说，是展开后的各层所占空间的总和，因为镜像到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。</p>
<ul>
<li><code>docker image ls</code> 列表中的镜像体积总和并非是所有镜像实际硬盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。由于 Docker 使用 Union FS，相同的层只需要保存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多</li>
</ul>
<p>可以通过 <code>docker system df</code> 命令来便捷的查看镜像、容器、数据卷所占用的空间。</p>
<h2 id="镜像分层"><a class="header-anchor" href="#镜像分层"></a>镜像分层</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Basic/docker%20image%20layer%20archetecture.png" alt="docker image layer archetecture"></p>
<p>Docker镜像由多个松耦合的只读镜像层组成。Docker负责堆叠这些层，并将它们表示为单个统一的对象</p>
<p>镜像一般比较精简，只包含必须的内容， 如必须的OS等，当然，镜像不包含os内核，容器共享docker host的内核</p>
<p>在镜像上启动的容器全部停止之前，镜像无法被删除：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image rm ubuntu:latest                                                         </span><br><span class="line">Error response from daemon: conflict: unable to remove repository reference &quot;ubuntu:latest&quot; (must force)│</span><br><span class="line"> - container 75f3c86793d8 is using its referenced image 54c9d81cbb44</span><br></pre></td></tr></table></figure>
<h2 id="查看镜像层"><a class="header-anchor" href="#查看镜像层"></a>查看镜像层</h2>
<p>回顾<code>docker image pull ubuntu:latest</code>的输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">latest: Pulling from library/ubuntu</span><br><span class="line">952132ac251a: Pull complete</span><br><span class="line">82659f8f1b76: Pull complete</span><br><span class="line">c19118ca682d: Pull complete</span><br><span class="line">8296858250fe: Pull complete</span><br><span class="line">24e0251a0e2c: Pull complete</span><br><span class="line">Digest: sha256:f4691c96e6bbaa99d...28ae95a60369c506dd6e6f6ab</span><br><span class="line">Status: Downloaded newer image for</span><br><span class="line">ubuntu:latest</span><br></pre></td></tr></table></figure>
<p>对应的镜像层为：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Basic/docker%20image%20layer%20example.png" alt="docker image layer example"></p>
<p>或者通过<code>docker  image  inspect</code>查看镜像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker image inspect ubuntu:latest</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">&quot;Id&quot;: &quot;sha256:bd3d4369ae.......fa2645f5699037d7d8c6b415a10&quot;,</span><br><span class="line">&quot;RepoTags&quot;: [</span><br><span class="line">&quot;ubuntu:latest&quot;</span><br><span class="line">&lt;Snip&gt;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&quot;RootFS&quot;: &#123;</span><br><span class="line">&quot;Type&quot;: &quot;layers&quot;,</span><br><span class="line">&quot;Layers&quot;: [</span><br><span class="line">&quot;sha256:c8a75145fc...894129005e461a43875a094b93412&quot;,</span><br><span class="line">&quot;sha256:c6f2b330b6...7214ed6aac305dd03f70b95cdc610&quot;,</span><br><span class="line">&quot;sha256:055757a193...3a9565d78962c7f368d5ac5984998&quot;,</span><br><span class="line">&quot;sha256:4837348061...12695f548406ea77feb5074e195e3&quot;,</span><br><span class="line">&quot;sha256:0cad5e07ba...4bae4cfc66b376265e16c32a0aae9&quot;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到还是有五个镜像层，只不过采用了镜像名的SHA256来标识</p>
<h2 id="镜像层详解"><a class="header-anchor" href="#镜像层详解"></a>镜像层详解</h2>
<p>可以看到，镜像层是<strong>栈</strong>结构的，所有镜像层都起始于一个基础镜像层，后续每当对镜像内容做增改时，就会叠加新的镜像层</p>
<p>example：假如基于Ubuntu Linux 16.04创建一个新的镜像,这就是新镜像的第一层;如果该镜像中添加Python包,就会在基础镜像层之上创建第二个镜像层;如果继续添加一个安全补丁,就创建第三个镜像层。该镜像当前已经包含3个镜像层：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Basic/docker%20image%20layer%20stack%20app.png" alt="docker image layer stack app"></p>
<p>在添加额外的镜像层的同时,镜像始终保持是当前所有镜像的<strong>组合</strong></p>
<p>example：</p>
<p>如下图，在外部看来整个镜像只有6个文件,这是因为最上层中的文件7是文件5的一个更新版本。这种情况下,上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使文件的更新版本作为一个新镜像层添加到镜像当中：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Basic/docker%20image%20layer%20set.png" alt="docker image layer set"></p>
<p>Docker通过存储引擎（新版本采用快照机制）来实现镜像层的栈，并保证多镜像层对外展示为统一的文件系统 所有镜像层堆叠合并，对外提供统一的视图：</p>
<p>example： 上图三层镜像的对外视图，在外界看来，镜像层是合并的</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Basic/docker%20image%20layer%20set%20view.png" alt="docker image layer set view"></p>
<h2 id="共享镜像层"><a class="header-anchor" href="#共享镜像层"></a>共享镜像层</h2>
<p>镜像层可以被多个镜像共享，</p>
<h2 id="镜像摘要"><a class="header-anchor" href="#镜像摘要"></a>镜像摘要</h2>
<p>除了 <code> &lt;reposiroty&gt;: &lt;tag&gt;</code>,  镜像还可以用镜像摘要唯一标识，它是镜像的<strong>内容的散列值</strong></p>
<p>可以用<code>docker image ls</code>的<code>--digests</code> option查看摘要：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@lykRemote:~# docker image ls --digests alpine                       </span><br><span class="line">REPOSITORY   TAG   DIGEST   IMAGE ID       CREATED        SIZE</span><br><span class="line">alpine       latest    sha256:21a3deaa0d32a8057914f36584b5288d2e5ecc984380bc0118285c70fa8c9300   c059bfaa849c   2 months ago   5.59MB</span><br></pre></td></tr></table></figure>
<p>镜像本身就是一个配置对象，其中包含了镜像层的列表以及一些元数据信息</p>
<p>镜像层是实际数据存储的地方，镜像层之间是完全独立的，并没有从属于某个镜像的概念</p>
<p>镜像的唯一标识是其摘要，每个镜像层也有自己的摘要。 这意味着镜像和镜像层是不可变得，任何改动都导致散列值的变化，这就是<strong>内容散列（ Content Hash )</strong>.</p>
<p>但是，在push和pull时，我们往往要对镜像层压缩来节省带宽和仓库存储空间，而压缩会改变镜像内容，这意味着内容散列值会改变，为此，每个镜像层又包含了一个分发散列值（ Distributed  Hash ），这是个压缩版镜像的散列值，用它来校验拉取的镜像是否被篡改过</p>
<h2 id="多架构镜像"><a class="header-anchor" href="#多架构镜像"></a>多架构镜像</h2>
<p>为了支持多架构，同一<code>&lt;repository&gt;:&lt;tag&gt;</code>标识的镜像可以有<code>Manifest</code>列表，每个元素是一个<code>Manifest</code>指针，指向具体的<code>Manifest</code>，其中包含了对应架构的镜像</p>
<p><code>Manifest</code>列表是可选的，在没有<code>Manifest</code>列表时，registry返回普通的<code>Manifest</code></p>
<p>因此不同架构的主机可以用相同的命令从registry得到同一镜像的不同架构版本</p>
<h2 id="删除镜像-2"><a class="header-anchor" href="#删除镜像-2"></a>删除镜像</h2>
<p>删除镜像会删除镜像配置以及相关的镜像层， 镜像层是引用计数的，可以被多个镜像共享。只有当所有依赖该镜像层的镜像都被删除后，该镜像层才被删除。</p>
<h1 id="Docker-Container"><a class="header-anchor" href="#Docker-Container"></a>Docker Container</h1>
<h2 id="commands-2"><a class="header-anchor" href="#commands-2"></a>commands</h2>
<p>注意：下文的<code>&lt;container&gt;</code>是容器名，和<code>&lt;image&gt;</code>镜像名不同</p>
<hr>
<h3 id="启动容器"><a class="header-anchor" href="#启动容器"></a>启动容器</h3>
<p><a href="https://docs.docker.com/engine/reference/run/#docker-run-reference">运行容器</a>：<code>docker client</code>会用API与<code>docker daemon</code>通信，后者<strong>先查询本地有无该镜像，如果没有，就从（默认）docker hub pull到本地</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container run [options] &lt;image&gt; &lt;app&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>-i</code>: Keep STDIN open even if not attached</p>
</li>
<li>
<p><code>-t</code>: Allocate a pseudo-tty 终端</p>
<ul>
<li>
<p>For interactive processes (like a shell), you must use <code>-i -t</code> together in order to allocate a tty for the container process.</p>
<p><code>-i -t</code> is often written <code>-it</code> as you’ll see in later examples.</p>
</li>
</ul>
</li>
<li>
<p><code>-d=true</code> or just <code>-d</code>： daemon模式: 在后台运行</p>
</li>
<li>
<p><code>&lt;app&gt;</code>: 容器中运行的<strong>主进程</strong>（领头进程）</p>
</li>
<li>
<p><code>--name [name]</code>: 给容器起别名</p>
</li>
<li>
<p><code>-p [host_port:container_port]</code>: 指定端口映射， 例如<code>-p 80:8080</code>将主机的80端口映射到容器的8080端口</p>
</li>
<li>
<p><code>--network</code>: 指定容器所属的网络类型：</p>
<ul>
<li><code>--net=host</code>: host网络</li>
<li><code>--net=none</code>: 无网络</li>
<li><code>--net=bridge </code>: bridge网络，这是默认设置</li>
<li><code>--net=container:&lt;container&gt;</code>: 与指定容器共享一个Network Namespace，但其他的namespace还是隔离的</li>
</ul>
</li>
<li>
<p><code>-rm</code>: Automatically remove the container when it exits. 也就是自动移除之前的同名的容器</p>
</li>
<li>
<p><code> --restart</code>: 设置重启策略:</p>
<ul>
<li><code>unless-stopped</code></li>
<li><code>always</code></li>
<li><code>no</code>: Do not automatically restart the container. (the default)</li>
</ul>
</li>
</ul>
<p><code> &lt;Ctrl PQ&gt;</code>： detach容器</p>
<h3 id="启动已停止运行的容器"><a class="header-anchor" href="#启动已停止运行的容器"></a>启动已停止运行的容器</h3>
<p>启动处于停止（<code>Exited</code>）状态的容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container start</span><br></pre></td></tr></table></figure>
<h3 id="重启容器"><a class="header-anchor" href="#重启容器"></a>重启容器</h3>
<p>正在运行的容器可以重启:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container restart &lt;container&gt; </span><br></pre></td></tr></table></figure>
<hr>
<h3 id="在容器中启动新进程"><a class="header-anchor" href="#在容器中启动新进程"></a>在容器中启动新进程</h3>
<p>在运行的容器中启动新进程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker  container exec [options] &lt;container&gt; &lt;app&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>docker container exec -it &lt;container&gt; bash</code>: 将终端重新连接到容器
<ul>
<li><code>exec</code>在容器中创建了新的bash，输入<code>ps</code>可看到两个bash进程。 这意味着在当前shell输入<code>exit</code>并不会导致容器终止，因为主进程还在运行中</li>
</ul>
</li>
</ul>
<hr>
<h3 id="列出容器"><a class="header-anchor" href="#列出容器"></a>列出容器</h3>
<p>列出所有运行的容器， options和image的一样</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container ls</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-a</code>: 显示所有容器(默认只显示运行的)</li>
<li><code>--quiet, -q</code> :只显示数字ID</li>
</ul>
<h3 id="停止容器"><a class="header-anchor" href="#停止容器"></a>停止容器</h3>
<p>停止容器运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container stop</span><br></pre></td></tr></table></figure>
<ul>
<li>向容器内pid=1的进程发送<code>SIGTERM</code>， 如果10s内得到清理并停止运行，则会接着发送<code>SIGKILL</code>强制停止该容器</li>
<li><code>docker stop $(docker ps -a -q)</code></li>
</ul>
<hr>
<h3 id="删除容器"><a class="header-anchor" href="#删除容器"></a>删除容器</h3>
<p>删除容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container rm</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-f</code>:    发送<code>Sigkill</code>停止容器（无需先stop），然后删除（<code>rm</code>）</li>
<li><code>docker rm $(docker ps -a -q)</code></li>
</ul>
<p>批量删除容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container rm -f $(docker container ls -aq | cut -d &quot; &quot; -f 1) </span><br></pre></td></tr></table></figure>
<ul>
<li>先列出所有容器信息(包括id): <code>docker container ls -aq</code></li>
<li>选中指定列, 一般是第一列,这是容器的id: <code>cut -d &quot; &quot; -f 1</code></li>
<li>将容器的id传给<code>rm</code>: <code>docker container rm -f</code></li>
</ul>
<p>删除所有Exited的容器:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container prune       </span><br></pre></td></tr></table></figure>
<h3 id="导出-导入容器的文件系统"><a class="header-anchor" href="#导出-导入容器的文件系统"></a>导出/导入容器的文件系统</h3>
<p>将Docker容器里的文件系统作为一个 tar 文件导出到标准输出， 注意与用于序列化镜像的<code>docker image save</code>不同：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container export [OPTIONS] &lt;container&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-o</code>:将输入内容写到文件</li>
</ul>
<p>从tar文件中创建镜像:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker import [OPTIONS] [file_name].tar &lt;image&gt;</span><br></pre></td></tr></table></figure>
<h3 id="查看容器信息"><a class="header-anchor" href="#查看容器信息"></a>查看容器信息</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker  container  inspect &lt;container&gt;</span><br></pre></td></tr></table></figure>
<p>查看容器重启策略：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker  container  inspect &lt;container&gt; | grep RestartPolicy -A 20</span><br></pre></td></tr></table></figure>
<p>查看容器的挂载情况：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect &lt;container&gt; | grep Mounts -A 20</span><br></pre></td></tr></table></figure>
<p>查看端口映射等信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container port &lt;container&gt;</span><br></pre></td></tr></table></figure>
<h3 id="查看容器日志"><a class="header-anchor" href="#查看容器日志"></a>查看容器日志</h3>
<p>查看容器内部的<strong>标准输出</strong>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -f &lt;container&gt;    </span><br></pre></td></tr></table></figure>
<h3 id="查看容器网络"><a class="header-anchor" href="#查看容器网络"></a>查看容器网络</h3>
<p>查看容器网络：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure>
<h3 id="查看容器卷"><a class="header-anchor" href="#查看容器卷"></a>查看容器卷</h3>
<p>查看容器的卷：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>
<h2 id="容器vs虚拟机"><a class="header-anchor" href="#容器vs虚拟机"></a>容器vs虚拟机</h2>
<p>容器共享操作系统资源（OS内核），虚拟机共享硬件资源</p>
<p>容器是OS虚拟化， 虚拟机是硬件虚拟化</p>
<p>虚拟机的每个OS都有开销，都需要授权，都需要打补丁</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Basic/vm%20archetecture.png" alt="vm archetecture"></p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Basic/container%20archetecture.png" alt="container archetecture"></p>
<h2 id="运行容器"><a class="header-anchor" href="#运行容器"></a>运行容器</h2>
<p>容器镜像都是高度优化的，因此可能没有预装一些命令</p>
<p>容器随着其中运行应用(领头进程)的退出而终止</p>
<h2 id="重启策略"><a class="header-anchor" href="#重启策略"></a>重启策略</h2>
<p>重启策略可以指定容器在事件或错误后重启</p>
<p>重启策略可作为参数<code>docker container run  --restart</code>  的参数设置或在<code>Compose</code>文件中声明</p>
<p>重启策略包括：</p>
<ul>
<li>always: 除非容器被明确停止( 如<code>stop</code>)，否则该策略会一直尝试重启处于Exited的容器
<ul>
<li>该策略下，如果重启daemon,  Exited容器（包括<code>stop</code>!!）也会被重启</li>
</ul>
</li>
<li>unless-stopped： always的修复版，不会在daemon重启的时候重启Exited状态的容器</li>
<li>on-failed： 在退出容器且返回值不是0的时候重启容器，与always相同，如果重启daemon, 明确被停止的容器（包括<code>stop</code>!!）也会被重启</li>
</ul>
<h3 id="example"><a class="header-anchor" href="#example"></a>example</h3>
<p>下面创建两个新容器,其中“always”容器指定--restart always 策略,另一个“unless- stopped”<br>
器指定了--restart unless-stopped 策略。两个容器均通过docker container stop 命令<br>
止,接着重启Docker。结果“always”容器会重启,但是“unless-stopped”容器不会</p>
<ol>
<li>
<p>创建两个新容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container run -d --name always --restart always alpine sleep 1d</span><br><span class="line"></span><br><span class="line">docker container run -d --name unless-stopped --restart  unless-stopped alpine sleep 1d</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>停止两个容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container stop always unless-stopped</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>重启docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>检查两个容器的状态：</p>
</li>
</ol>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container ls -a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出略</span></span><br></pre></td></tr></table></figure>
<h1 id="Docker-Security"><a class="header-anchor" href="#Docker-Security"></a>Docker Security</h1>
<p>本章内容涉及Docker Swarm</p>
<p>Docker使用了大量Linux的安全技术</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Basic/Docker%20Security%20with%20Linux.png" alt="Docker Security with Linux"></p>
<h2 id="Linux-Security"><a class="header-anchor" href="#Linux-Security"></a>Linux Security</h2>
<h3 id="Namespace"><a class="header-anchor" href="#Namespace"></a>Namespace</h3>
<p>Linux Namespace允许对OS进行拆分,</p>
<ul>
<li>例如, 不同的name space可以被分配不同的ip, 这样同一台主机就可以允许多个web服务, 还不存在端口冲突( 因为ip不同 )</li>
</ul>
<p><strong>Docker容器本质是命名空间的有组织集合</strong></p>
<ul>
<li>每个容器都由自己的PID, NET, MNT, IPC, UTS构成, 还可能包括USER</li>
<li>这些命名空间的组合就是容器</li>
</ul>
<p>Linux Docker使用了如下的内核namesoace:</p>
<ul>
<li>进程ID( PID ): 每个容器互相独立, 拥有自己的进程树, 每个容器都有自己的PID为1的进程. PID空间也意味着容器不能看到其他容器或所在主机的进程树</li>
<li>网络 ( NET ): 每个容器有互相隔离的网络栈. 例如每个容器都有自己的<code>eth0</code>接口, 独立的ip和端口地址</li>
<li>文件系统/挂载( MNT ): 每个容器都有互相隔离的根目录, 这也意味着容器不能访问其他容器或宿主机的目录</li>
<li>进程内通信(  IPC ): IPC为容器提供共享内存, 这在不同容器间也是独立的</li>
<li>用户( USER ): Docker允许用户使用USER命名空间来将容器内用户映射到宿主机的不同用户, 比如将容器内的root映射到宿主机的非root用户</li>
<li>UTS: 每个容器都有自己的主机名称</li>
</ul>
<h3 id="Control-Group"><a class="header-anchor" href="#Control-Group"></a>Control  Group</h3>
<p>通过控制组来限制资源分配</p>
<h3 id="Capability"><a class="header-anchor" href="#Capability"></a>Capability</h3>
<p>允许拆分用户权限, 即选择容器允许所需的root用户权限</p>
<h3 id="MAC"><a class="header-anchor" href="#MAC"></a>MAC</h3>
<p>Docker Linux采用主流的Linux Mac 技术, 如 SELinux</p>
<h3 id="Seccomp"><a class="header-anchor" href="#Seccomp"></a>Seccomp</h3>
<p>Docker使用过滤模式下的Seccomp来限制容器对宿主机内核发起的系统调用</p>
<h2 id="Docker-Original-Security"><a class="header-anchor" href="#Docker-Original-Security"></a>Docker Original Security</h2>
<p>Docker很大一部分安全技术都基于Swarm模式, 详见<em>Docker Swarm</em></p>
<p>此外, 还有Docker安全扫描, 内容信任, Docker Secret等</p>
<h3 id="安全扫描"><a class="header-anchor" href="#安全扫描"></a>安全扫描</h3>
<p>就是对Docker镜像进行二进制代码级别的扫描, 对其中的软件根据已知的缺陷数据库( CVE数据库 )进行检查, 并生成报告</p>
<ul>
<li>Docker Hub已经支持安全扫描了</li>
</ul>
<h3 id="内容信任"><a class="header-anchor" href="#内容信任"></a>内容信任</h3>
<p>内容信任允许开发者对push到Image Registry的镜像进行签名, 当镜像被pull的时候确认签名状态, 这可以确保只pull经过验证的镜像</p>
<h3 id="Docker-Secret"><a class="header-anchor" href="#Docker-Secret"></a>Docker Secret</h3>
<p>提供了<code>docker secret</code>系列命令</p>
<p>密钥的存储和传输都是加密的. 使用时被临时挂载到<u>内存文件系统</u>( 只针对Linux, 因为windows没有内存文件系统 )</p>
<ul>
<li>密钥被存在集群存储里,并且加密. 每个Manager都有权访问集群存储</li>
<li>密钥只对已经被授权了的服务开放访问</li>
</ul>
<p>可以在容器/服务创建时指定使用某密钥, 后续该服务的多个示例都会持有该密钥</p>
<ul>
<li>一旦容器/服务的任务完成, 内存文件系统关闭,密钥也随之删除</li>
<li>假设指定服务B使用密钥secret1, 在worker2, worker3运行, 则密钥被传输到worker3的B实例时, 传输是加密的</li>
<li>服务A不能访问该密钥, 因为没有授权</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Basic/Docker%20Secret%20example.png" alt="Docker Secret example"></p>
<h1 id="Docker-Logs"><a class="header-anchor" href="#Docker-Logs"></a>Docker Logs</h1>
<p>Docker网络, 集群出现故障, 就需要查日志</p>
<p>日志分为daemon日志和容器日志</p>
<h2 id="Commands"><a class="header-anchor" href="#Commands"></a>Commands</h2>
<p>查看daemon日志( 仅限于使用<code>systemd</code>的系统)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">journalctl -u docker.service</span><br></pre></td></tr></table></figure>
<p>查看容器日志：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container logs -f &lt;container-name&gt;</span><br></pre></td></tr></table></figure>
<p>对于Swarm服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service logs &lt;service-name&gt;</span><br></pre></td></tr></table></figure>
<h2 id="daemon日志"><a class="header-anchor" href="#daemon日志"></a>daemon日志</h2>
<p>daemon日志： 如果OS用<code>Systemd</code>， 日志会存储在<code>Journald</code></p>
<h3 id="查看daemon日志"><a class="header-anchor" href="#查看daemon日志"></a>查看daemon日志</h3>
<ul>
<li>查看日志： <code>journalctl -u docker.service </code></li>
</ul>
<h3 id="设置日志详细程度"><a class="header-anchor" href="#设置日志详细程度"></a>设置日志详细程度</h3>
<p>通过编辑<code>daemon.json</code>：</p>
<ol>
<li>
<p>设置<code>debug</code>为true</p>
</li>
<li>
<p>设置log-level:</p>
<ul>
<li>debug: 最详细</li>
<li>info： 默认值， 次详细</li>
<li>warn： 第三详细</li>
<li>error</li>
<li>fatal</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	&lt;Snip&gt;</span><br><span class="line">	<span class="attr">&quot;debug&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;log-level&quot;</span><span class="punctuation">:</span> <span class="string">&quot;debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">	&lt;Snip&gt;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="容器日志"><a class="header-anchor" href="#容器日志"></a>容器日志</h2>
<p>每个docker容器或服务都可以配置自己的日志驱动：</p>
<ul>
<li>json-file: 默认</li>
<li>journald: 只在运行<code>systemd</code>的linux主机有效</li>
<li>syslog</li>
<li>...</li>
</ul>
<h3 id="查看容器日志-2"><a class="header-anchor" href="#查看容器日志-2"></a>查看容器日志</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container logs &lt;container-name&gt;</span><br><span class="line">docker service logs &lt;service-name&gt; # 针对Swarm服务</span><br></pre></td></tr></table></figure>
<ul>
<li>json-file和journald日志均可通过这两种命令查看</li>
<li>其他驱动的日志需要用第三方平台提供的原生工具查看</li>
<li><code>--follow</code>: 跟踪日志</li>
<li><code>--tail</code>: 查看日志尾部</li>
<li><code>--details</code>: 额外的详细信息</li>
</ul>
<h3 id="指定容器日志驱动"><a class="header-anchor" href="#指定容器日志驱动"></a>指定容器日志驱动</h3>
<p>配置docker主机的提供的默认日志驱动：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//daemon.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;log-driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;syslog&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>可以在容器启动时通过<code>--log-driver</code>和<code>-log-opts</code>指定特定的日志驱动，这会覆盖掉主机的配置</p>
<h1 id="Docker-Management"><a class="header-anchor" href="#Docker-Management"></a>Docker Management</h1>
<p>命令行docker管理工具: lazydocker</p>
<h2 id="查看配置文件"><a class="header-anchor" href="#查看配置文件"></a>查看配置文件</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure>
<h2 id="更改镜像存储位置"><a class="header-anchor" href="#更改镜像存储位置"></a>更改镜像存储位置</h2>
<h2 id="使用软链接"><a class="header-anchor" href="#使用软链接"></a><strong>使用软链接</strong></h2>
<ul>
<li>默认情况下 <code>Docker</code> 镜像的存放位置在 <code>/var/lib/docker</code> ：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 默认存放位置</span><br><span class="line">$ sudo docker info | grep <span class="string">&quot;Docker Root Dir&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>采用软链接的方式，修改镜像和容器的存放路径</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 停掉<span class="title class_">Docker</span>服务</span><br><span class="line">$ service docker stop</span><br></pre></td></tr></table></figure>
<ul>
<li>然后移动整个 <code>/var/lib/docker</code> 目录到空间不较大的目的路径。这时候启动 <code>Docker</code> 时发现存储目录依旧是 <code>/var/lib/docker</code> 目录，但是实际上是存储在数据盘 <code>～/data/docker</code> 上了。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移动原有的内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mv</span> /var/lib/docker ～/data/docker</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进行链接</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ln</span> -sf ～/data/docker /var/lib/docker</span></span><br></pre></td></tr></table></figure>
<h1 id="Others"><a class="header-anchor" href="#Others"></a>Others</h1>
<h2 id="常见镜像版本"><a class="header-anchor" href="#常见镜像版本"></a>常见镜像版本</h2>
<h3 id="full-official-image"><a class="header-anchor" href="#full-official-image"></a>full official image</h3>
<p>事实上的标准镜像:</p>
<ul>
<li>python:3.8.3</li>
<li>node:14.1.1</li>
</ul>
<p>如果不关心最终镜像的大小, 完整镜像是最安全的选择</p>
<h3 id="buster-stretch-jessie"><a class="header-anchor" href="#buster-stretch-jessie"></a>buster/stretch/jessie</h3>
<ul>
<li>buster:Debian 10</li>
<li>stretch:Debian 9</li>
<li>jessie:Debian 8</li>
</ul>
<p>带有stretch、buster或jessie标签的镜像是不同Debian发行版的代号。</p>
<p>在撰写本文时，稳定的Debian发行版是10.4，它的代号是“buster”。 “stretch”是所有版本9变种的代号，“jessie”是所有版本8变种的代号。</p>
<p>正在开发的未来版本是“bullseye ”和“bookworm”，但还不稳定。你可能会在DockerHub上的镜像版本列表中看到这些标签。</p>
<p>如果您的代码与Debian操作系统的特定版本兼容，请选择其中一个镜像。在开始一个新项目时，你很少需要使用旧版本的Debian。</p>
<h3 id="slim"><a class="header-anchor" href="#slim"></a>slim</h3>
<p>slim的镜像是完整镜像的配对版本, 这个镜像通常只安装运行特定工具所需的最小包</p>
<p>**但是，在使用这个镜像时，一定要进行彻底的测试！**如果您遇到无法解释的错误，请尝试切换到完整的镜像，看看是否能够解决问题。</p>
<h3 id="alpine"><a class="header-anchor" href="#alpine"></a>alpine</h3>
<p>alipine镜像基于alpine linux项目，这是一个专门为容器内部使用而构建的操作系统。在很长一段时间里，这些是最受欢迎的镜像变体，因为它们的尺寸很小。</p>
<p>然而，一些团队正在弃用alpine镜像，因为这些镜像可能会导致难以调试的兼容性问题。具体来说，如果使用python镜像，一些 wheels将被构建成与Debian兼容，并且需要重新编译，才能与基于apline的镜像一起工作。</p>
<p>使用alpine镜像的主要原因是使你得到的镜像尽可能小。基础镜像将小于5MB。python基础镜像(将python添加到基础alpine镜像)目前是78.9MB。这仍然很小。</p>
<p><strong>如果考虑到空间问题，强烈推荐使用此镜像。</strong></p>
<p>它的缺点是不包含一些你可能会需要的包。主要是，它使用了一个更小的musl lib代替glibc。如果您的应用程序有特定的libc需求，您可能会遇到问题。</p>
<p>如果你发现Alpine镜像缺少你需要的东西，你可以直接在Dockerfile中安装它，这样能确保镜像只包含你需要的内容。需要注意，如果您正在安装外部包，您的Dockerfile将会更改。主要的区别是，您将使用apk而不是apt-get来安装包。</p>
<p>对alpine镜像的使用有很多担心之处，所以你需要充分了解它。需要充分阅读文档并研究。 同样，如果您在构建Dockerfile时遇到了无法解释的问题，请尝试切换到完整的镜像，看看是否能解决问题</p>
<h3 id="windowsservercore"><a class="header-anchor" href="#windowsservercore"></a>windowsservercore</h3>
<p>windows或windows Server平台的镜像</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Compose</title>
    <url>/2022/02/15/Docker-Compose/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>
<p>Background of Docker Compose</p>
</li>
<li>
<p>部署要点</p>
</li>
<li>
<p>Compose文件示例</p>
</li>
<li>
<p>热部署</p>
</li>
<li>
<p>本节使用示例：<a href="git@github.com:LYK-love/counter-app.git">here</a></p>
</li>
</ul>
<span id="more"></span>
<h1 id="Background"><a class="header-anchor" href="#Background"></a>Background</h1>
<ul>
<li>
<p>Docker Compose  前身是  Fig</p>
</li>
<li>
<p>目前为止，Docker Compose依然需要在docker主机上进行外部安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt  install docker-compose</span><br></pre></td></tr></table></figure>
<p>检查安装是否成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>单引擎模式部署workflow：</p>
<ol>
<li>编写定义多容器应用的YAML文件（称为Compose文件）</li>
<li>将其交给<code>docker-compose</code>  命令，</li>
<li>该工具会基于docker api完成应用的部署（ 即与docker daemon通信 ）</li>
</ol>
</li>
</ul>
<p>Docker Compose是Docker Stack的<u>简化版</u>. 能够在Docker节点上以单引擎模式（ Single-Engine Mode ）进行简化版多服务应用的部署和管理</p>
<ul>
<li>真正的多服务应用中, 服务是若干容器的集合, 作为一个整体进行统一管理. 例如Docker Stack</li>
<li>Docker Compose中的一个服务就只有一个容器,因此是&quot;简化版多服务应用&quot;</li>
</ul>
<h1 id="Basic-Idea"><a class="header-anchor" href="#Basic-Idea"></a>Basic Idea</h1>
<ul>
<li>
<p>通过Compose文件定义的多容器应用称为Compose应用</p>
</li>
<li>
<p><code>docker-compose</code>构建应用时也会利用构建缓存，对于已有的镜像、网络、卷，不会再重新创建</p>
</li>
<li>
<p><code>docker-compose</code>的命令和<code>docker comtainer</code>大同小异， 所谓的应用就是若干容器， 容器就有运行、停止和关闭三种状态。“关闭”指的是容器资源也被删除</p>
</li>
<li>
<p>由于docker卷的生命周期是与相应的容器完全解耦的。 因此关闭Compose应用，卷不会被删除</p>
</li>
<li>
<p>同样，镜像也不会被删除</p>
</li>
<li>
<p><code>docker-compose</code>会将项目名称和Compose文件中定义的服务名称连起来，作为新构建的镜像的名称， 而容器名称是镜像名称+数字后缀，因为<code>docker-compose</code>允许扩容</p>
</li>
</ul>
<h1 id="Commands"><a class="header-anchor" href="#Commands"></a>Commands</h1>
<h2 id="启动Compose应用"><a class="header-anchor" href="#启动Compose应用"></a>启动Compose应用</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up [ -f [compose_file_name] ]   -d</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-f</code>: 指定Compose文件，默认情况下， 其名为docker-compose.yml 或docker-compose.yaml
<ul>
<li><code>docker-compose up</code>会查找Compose文件，基于此构建镜像、网络和卷，并启动容器</li>
</ul>
</li>
<li><code>-d</code>: daemon模式，在后台启用应用
<ul>
<li>也可以使用<code> &amp;</code>， 但是这样不会重定向输入输出流</li>
</ul>
</li>
</ul>
<h2 id="列出Compose应用："><a class="header-anchor" href="#列出Compose应用："></a>列出Compose应用：</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-copmpose ps</span><br></pre></td></tr></table></figure>
<p>该命令作用和<code> docker container ls</code>  差不多</p>
<hr>
<h2 id="停止Compose应用"><a class="header-anchor" href="#停止Compose应用"></a>停止Compose应用</h2>
<p>停止Compose应用, 并删除资源（类似<code>docker container rm  -f</code>）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure>
<ul>
<li>该命令会停止并关闭容器，删除网络（卷和镜像不会被删除）</li>
</ul>
<p>停止Compose应用,不删除资源：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure>
<p>相当于<code> docker compose stop</code></p>
<p>对于停止的Compose应用,删除其资源：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose rm</span><br></pre></td></tr></table></figure>
<p>类似<code> docker compose rm</code>， 会删除容器和网络</p>
<h2 id="重启Compose应用"><a class="header-anchor" href="#重启Compose应用"></a>重启Compose应用</h2>
<hr>
<p>对于停止的Compose应用,重新启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure>
<p>类似<code> docker compose restart</code></p>
<hr>
<h2 id="查看Compose应用运行情况"><a class="header-anchor" href="#查看Compose应用运行情况"></a>查看Compose应用运行情况</h2>
<p>查看Compose应用运行情况：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose top</span><br></pre></td></tr></table></figure>
<h1 id="Compose文件示例"><a class="header-anchor" href="#Compose文件示例"></a>Compose文件示例</h1>
<p>我们给出一个示例：</p>
<p>先进入构建目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ cd ./counter-app </span><br></pre></td></tr></table></figure>
<p>查看目录内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ ls</span><br><span class="line">app.py  docker-compose.yml  Dockerfile  README.md  requirements.txt</span><br></pre></td></tr></table></figure>
<ul>
<li><code>app.py</code>: 应用程序代码</li>
</ul>
<h2 id="文件格式"><a class="header-anchor" href="#文件格式"></a>文件格式</h2>
<p>查看示例的<code>docker-compose.yml</code>:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">❯</span> <span class="string">cat</span> <span class="string">./docker-compose.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.5&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web-fe:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">python</span> <span class="string">app.py</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">5000</span></span><br><span class="line">        <span class="attr">published:</span> <span class="number">5000</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">counter-net</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">volume</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">counter-vol</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">/code</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:alpine&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">counter-net:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">counter-net:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="string">counter-vol:#</span> </span><br></pre></td></tr></table></figure>
<p>一级key：</p>
<ul>
<li><code>version</code>:  指定Compose文件格式 （注意并非compose或者docker引擎的版本号）</li>
<li><code>services</code>: 定义不同的服务</li>
<li><code>networks</code>: 令docker创建新的网络
<ul>
<li>（ 默认是桥接模式，这是单主机网络，只能够实现同一主机上容器的连接 ）</li>
</ul>
</li>
<li><code>volumns</code>: 令docker创建新的卷</li>
</ul>
<p>二级key：</p>
<ul>
<li><code>services</code>  部分定义两个二级<code>key</code>，docker-compose会将每个服务部署为一个容器，并使用key作为容器名字的一部分，在二级key中有如下指令：
<ul>
<li><code>build： [file_path]</code>：指定Dockerfile的所在目录，该Dockerfile会被用于创建镜像，进而启动容器。 如果已经存在镜像了，可以使用<code>image &lt;image&gt;</code></li>
<li><code>image: &lt;image&gt;</code>: 指定Docker基于镜像启动容器</li>
<li><code>command: [executable]</code>: 指定Docker容器中运行的主程序</li>
<li><code>ports：- target: [target_port] published: [source_port]</code>: 指定端口映射， 将主机的<code>published</code>端口映射到容器的<code>target</code>端口</li>
<li><code>networks：</code>: 指定容器连接到的网络， 该网络要么已经存在，要么在<code>networks</code><strong>一级</strong>key中指定, 后者会让Docker创建该网络</li>
<li><code>volumes</code>:  指定Docker将<code> [source]</code>卷挂到容器的<code> [target]</code> 卷, 该网络要么已经存在，要么在``volumes<code>:</code><strong>一级</strong>key中指定</li>
<li><code>depends_on: &lt;service&gt;</code>： 指定服务启动时间，但是启动时间早并不能保证后一个服务启动时前一个服务已经启动完成</li>
</ul>
</li>
</ul>
<h2 id="解释"><a class="header-anchor" href="#解释"></a>解释</h2>
<p>示例解释：</p>
<p>在本示例中, DockerCompose会调用Docker来为web-fe 服务部署一个独立的容器。该容器基于Compose文件位于同一目录下的Dockerfile构建的镜像。<a href="http://xn--app-xi9d2yo3fvsem0dm0gzsespnw54f3k5bgskcko6sv.py">基于该镜像启动的容器会运行app.py</a> 作为主程序,将5000端口暴露给宿主机,连接到counter-net 网络上,并挂载一个卷到/code . redis服务也类似</p>
<p>由于两个服务都连接到counter-net 网络,因此它们可以通过名称解析到对方的地址。了解这一点重要,本例中上层应用被配置为通过名称与Redis服务通信</p>
<p>查看容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ docker container ls</span><br><span class="line">CONTAINER ID   IMAGE                COMMAND                  CREATED             STATUS             PORTS                                       NAMES</span><br><span class="line">b936fbeba406   counter-app_web-fe   &quot;python app.py&quot;          About an hour ago   Up About an hour   0.0.0.0:5000-&gt;5000/tcp, :::5000-&gt;5000/tcp   counter-app_web-fe_1</span><br><span class="line">1784979d1e6c   redis:alpine         &quot;docker-entrypoint.s…&quot;   About an hour ago   Up About an hour   6379/tcp                                    counter-app_redis_1</span><br></pre></td></tr></table></figure>
<p>可以看到每个服务都创建了对应的容器</p>
<p>查看网络：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ docker network ls</span><br><span class="line">NETWORK ID     NAME                      DRIVER    SCOPE</span><br><span class="line">220db3964578   bridge                    bridge    local</span><br><span class="line">5489df9fb5c0   counter-app_counter-net   bridge    local</span><br><span class="line">961ccb2de759   host                      host      local</span><br><span class="line">03b55e96642c   none                      null      local</span><br></pre></td></tr></table></figure>
<p>可以看到创建了桥接网络<code>counter-app_counter-net</code></p>
<p>查看卷：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">&lt;Snip&gt;</span><br><span class="line">local     counter-app_counter-vol</span><br></pre></td></tr></table></figure>
<p>可以看到创建了卷<code>counter-app_counter-vol</code></p>
<h1 id="热部署"><a class="header-anchor" href="#热部署"></a>热部署</h1>
<p>由于主机的卷被挂载到容器上，对主机上卷的改动就是对容器的卷的改动。 <code>docker-compose</code>可以做到热部署，就是说可以直接在主机的卷上进行修改，容器就会产生相应的改变，不需要重新部署</p>
<p>example：</p>
<p>先查看示例中卷的挂载情况：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ docker volume inspect counter-app_counter-vol | grep Mount</span><br><span class="line">       &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/counter-app_counter-vol/_data&quot;,</span><br></pre></td></tr></table></figure>
<p>我们先修改工作目录下的<code>app.py</code>， 将其copy到<code>/var/lib/docker/volumes/counter-app_counter-vol/_data</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">do some change...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意带这个<span class="built_in">cp</span>命令就是覆盖文件内容</span></span><br><span class="line">cp ./app.py /var/lib/docker/volumes/counter-app_counter-vol/_data/app.py</span><br></pre></td></tr></table></figure>
<p>（当然你也可以直接修改挂载点的文件， 不过由于docker compose每次从构建目录（这里是<code> ～/counter-cp/</code>）来构建应用，如果不改变构建目录下的文件的话，下次构建时，）</p>
<p>现在挂载点的文件内容变了，我们打开<code>localhost:5000</code>，发现修改也生效了。 整个过程<strong>不需要重新部署</strong></p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Network</title>
    <url>/2022/03/23/Docker-Network/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Basic Idea</li>
<li>Docker DNS服务器</li>
<li>Commands</li>
<li>Networks</li>
</ul>
<span id="more"></span>
<h1 id="Basic-idea"><a class="header-anchor" href="#Basic-idea"></a>Basic idea</h1>
<p>Docker使用了Linux的Namespaces技术来进行资源隔离，如PID Namespace隔离进程，Mount Namespace隔离文件系统，Network Namespace隔离网络等。一个Network Namespace提供了一份独立的网络环境，包括网卡、路由、Iptable规则等. 与其他的Network Namespace隔离</p>
<ul>
<li>因此，一个独立的网络就是一个独立的Network Namespace</li>
<li>因此，严格意义上讲，下文介绍的Host， None根本不算网络，因为他们没有自己的Network Namespace</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Network/Docker%20Network%20Arch.png" alt="Docker Network Arch"></p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Network/Docker%20Network%20Layers.png" alt="Docker Network Layers"></p>
<p>Docker网络架构由三部分组成：</p>
<ul>
<li>CNM：  Container Network Model, 容器网络模型，是设计标准</li>
<li>Libnetwork：是CNM的具体实现，被Docker采用</li>
<li>驱动：Go编写，实现了CNM中列举的核心组件</li>
</ul>
<h1 id="Docker-DNS服务器"><a class="header-anchor" href="#Docker-DNS服务器"></a>Docker DNS服务器</h1>
<p>Docker sever有一个<strong>DNS服务器</strong>，可以为容器提供DNS解析功能， 也就是说，在容器网络中， <strong>容器名相当于域名</strong></p>
<ul>
<li>Docker DNS服务器记录了全部容器名称和ip地址的映射</li>
<li>每个启动时使用了<code>--name</code>或<code>--net-alias</code>的Docker容器和Swarm服务， 都会将自己的名称和IP地址注册到Docker DNS服务器</li>
</ul>
<p>每个Docker容器都有自己的本地DNS解析器，相当于<strong>DNS代理服务器</strong>。像正常的网络一样，如果DNS解析器在本地缓存中没有找到对应映射，就会向Docker DNS服务器发起递归查询</p>
<h2 id="CNM"><a class="header-anchor" href="#CNM"></a>CNM</h2>
<p>定义了三个基本要素：</p>
<ul>
<li>Sandbox： 就像容器中的容器，其中运行着独立的网络栈。 被放在容器内部，为容器提供网络连接</li>
<li>终端： 相当于虚拟网卡， 负责将沙盒连接到网络</li>
<li>网络：就是软件实现的网桥</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Network/CNM.png" alt="CNM"></p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Network/CNM%20multi-network.png" alt="CNM multi-network"></p>
<ul>
<li>
<p>虽然容器A,B运行于同一个主机，但是由于有不同的沙盒，所以网络堆栈不同</p>
</li>
<li>
<p>容器A, B可以通信，因为都接入了网络A.</p>
</li>
<li>
<p>容器B的两个终端属于不同网络， 没有交换机无法通信</p>
</li>
</ul>
<h2 id="Libnetwork"><a class="header-anchor" href="#Libnetwork"></a>Libnetwork</h2>
<p>实现了CNM定义的三大组件</p>
<h2 id="Driver"><a class="header-anchor" href="#Driver"></a>Driver</h2>
<p>Docker封装的内置驱动( on Linux )：</p>
<ul>
<li>Bridge</li>
<li>Overlay</li>
<li>Macvlan</li>
</ul>
<p>第三方也可以编写外部驱动</p>
<p>每个驱动都负责其上所有网络资源的创建和管理</p>
<p>Libnetwork支持同时激活多个网络驱动。 这意味着Docker环境可以支持一个庞大的异构网络</p>
<h1 id="Commands"><a class="header-anchor" href="#Commands"></a>Commands</h1>
<h2 id="创建网络"><a class="header-anchor" href="#创建网络"></a>创建网络</h2>
<p>注意到只能用对应驱动创建网络， 而None，Host， Container这些特殊的“网络”，不需要驱动，也就没法用驱动创建</p>
<p>创建容器网络：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create [OPTIONS] [network_name]</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>-driver, -d</code>: 驱动程序管理网络(  默认 <code>bridge</code>  )</p>
<ul>
<li>
<p><code>-d  bridge</code>: 创建<code>bridge</code>网络（仅限linux），这还会在主机内核中创建一个新的网桥， 查看liunx网桥：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brctl show</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>-d overlay</code>： overlay网络， 控制层默认用了TLS加密，  可以再指定<code>-o encrypted</code>对数据层加密</p>
<ul>
<li><code>--subnet=&lt;subnet1&gt; --subnet=&lt;subnet2&gt; ...</code>:  创建具有多个子网的覆盖网络（覆盖网络可以划分子网）， Docker负责子网间的路由</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>-p</code>, <code>--publish</code>: 指定端口映射</p>
</li>
</ul>
<hr>
<h2 id="查看网络"><a class="header-anchor" href="#查看网络"></a>查看网络</h2>
<p>查看已有的网络：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure>
<p>查看指定网络的详细信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network inspect [network_name]</span><br></pre></td></tr></table></figure>
<h2 id="删除网络"><a class="header-anchor" href="#删除网络"></a>删除网络</h2>
<p>删除Docker主机上指定的网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network rm &lt;network&gt;</span><br></pre></td></tr></table></figure>
<p>删除Docker主机上所有未使用的网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network prune</span><br></pre></td></tr></table></figure>
<h2 id="创建容器并定制DNS"><a class="header-anchor" href="#创建容器并定制DNS"></a>创建容器并定制DNS</h2>
<p>启动新容器，向其添加自定义的DNS服务器和域名：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container run -it --name &lt;dontainer-name&gt; \</span><br><span class="line">--dns=&lt;nameserver-ip&gt; \</span><br><span class="line">--dns-search=&lt;domain-name&gt; \</span><br><span class="line">&lt;image&gt; &lt;command&gt;</span><br></pre></td></tr></table></figure>
<h1 id="Networks"><a class="header-anchor" href="#Networks"></a>Networks</h1>
<p>None， Host， Containers网络比较特殊，我们一般也不用</p>
<h2 id=""><a class="header-anchor" href="#"></a></h2>
<h2 id="none"><a class="header-anchor" href="#none"></a>none</h2>
<p>就是没有网络，使用此网络的主机没有ip地址，处于完全隔离的状态</p>
<h2 id="host"><a class="header-anchor" href="#host"></a>host</h2>
<p>Host网络即容器直接使用宿主机的网络，与主机在相同的网络命名空间下，使用相同的网络栈，容器可以直接使用主机的所有端口</p>
<p>即不进行任何网络的虚拟化</p>
<h2 id="container"><a class="header-anchor" href="#container"></a>container</h2>
<p>container网络下的容器都共享相同的Network Namespace， 但除此之外，其他的namespace依然隔离</p>
<ul>
<li>这意味着容器共享了网络栈</li>
<li>这意味着两个容器可以互相ping通</li>
</ul>
<h2 id="单机桥接网络"><a class="header-anchor" href="#单机桥接网络"></a>单机桥接网络</h2>
<ul>
<li>单机： 该网络只能在单个主机上运行，且只能连接所在主机上的容器</li>
<li>桥接：该网络是交换机的软件实现</li>
</ul>
<p>每个Docker主机都有一个默认的单机桥接网络， 在linux上名为bridge,  windows上名为nat</p>
<ul>
<li>除非在容器创建时指定参数<code>--network</code>. 默认情况下，所有容器都会连接到该网络</li>
</ul>
<p>linux主机上的bridge网络由Bridge驱动创建， 而Bridge底层基于Linux内核的Linux Bridge技术.</p>
<p>默认的bridge网络被映射到<code>docker0</code>Linux网桥, 容器连接到该网络后，docker就会从docker0子网中分配一个 IP 给容器使用，并设置 docker0 的 IP 地址为容器的<strong>默认网关</strong></p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Network/bridge%20principle.png" alt="bridge principle"></p>
<p>创建单机桥接网络：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create -d bridge [name]</span><br></pre></td></tr></table></figure>
<h3 id="容器通信"><a class="header-anchor" href="#容器通信"></a>容器通信</h3>
<p>同一网络中的容器可以通过容器名来ping通， 因为容器内部运行了一个本地的DNS解析器，将请求转发到docker内部DNS服务器， 后者记录了容器启动时通过<code>--name</code>或<code>--net-alias</code> 指定的名称与容器之间的映射</p>
<h4 id="示例"><a class="header-anchor" href="#示例"></a>示例</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ docker container run -it --name c1 \</span><br><span class="line">--network localnet \</span><br><span class="line">alpine sleep 1d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">❯ docker container run -it --name c2 \</span><br><span class="line">--network localnet \</span><br><span class="line">alpine sh</span><br></pre></td></tr></table></figure>
<h3 id="端口映射"><a class="header-anchor" href="#端口映射"></a>端口映射</h3>
<p>容器启动时可以使用端口映射：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container run -p &lt;host_port&gt;:&lt;container_port&gt; &lt;image&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-p</code>, <code>--publish</code>: 指定端口映射</li>
</ul>
<h2 id="多机覆盖网络"><a class="header-anchor" href="#多机覆盖网络"></a>多机覆盖网络</h2>
<p>覆盖网络是个<strong>二层</strong>容器网络,  允许单个网络包含多个主机，这样不同主机上的容器就可以<strong>在链路层实现通信</strong></p>
<ul>
<li>
<p>使用<code>overlay</code>驱动， 即需要指定<code>-d overlay</code></p>
<ul>
<li>覆盖网络的控制层默认是加密的，可以指定<code>-o encrypted</code>对数据层加密</li>
</ul>
</li>
<li>
<p>overlay网络需要Swarm模式</p>
</li>
<li>
<p>overlay网络中，所有节点必须打开：</p>
<ul>
<li><code>UDP/4789</code>： 绑定到<code>VTE</code>， 详见下文“原理”</li>
<li>Swarm所需端口：
<ul>
<li><code>TCP/2377</code>： Swarm的集群管理默认使用2377端口</li>
<li><code>TCP/7946</code>, <code>UDP/7946</code>: Swarm的节点发现使用7946端口</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="容器通信-2"><a class="header-anchor" href="#容器通信-2"></a>容器通信</h3>
<ul>
<li>
<p>只有当运行中的容器连接到覆盖网络时，该网络才变成可用状态</p>
<ul>
<li>这意味着在集群中却没有运行（连接到覆盖网络的）容器的节点，是看不到覆盖网络的
<ul>
<li>此时的<code>docker network ls</code> 看不到覆盖网络</li>
<li>当然，创建该网络的节点肯定能看到该网络</li>
</ul>
</li>
</ul>
</li>
<li>
<p>一个Swarm节点直到在覆盖网络上启动容器时，才会自动将自身加入到覆盖网络</p>
<ul>
<li>此时的<code>docker network ls</code> 可以看到覆盖网络</li>
</ul>
</li>
<li>
<p>覆盖网络在网络层为容器提供了<strong>完全的抽象</strong></p>
<ul>
<li>覆盖网络内的容器在网络层<u>直接通信</u> ， <code>traceroute</code>的跳数是1,  尽管这两个容器所在主机可能不在同一个物理网络， 跳数不止1
<ul>
<li>“直接通信” ‘跳数为1“ 的原因是Swarm<strong>默认是Ingress网络，这是个完全图，任意两个节点是直连的</strong></li>
</ul>
</li>
<li>覆盖网络内的容器可以通过网络内的子网ip通信，也可以用容器名通信（ 参见下文《Ingress网络》 ）</li>
</ul>
</li>
</ul>
<h3 id="原理"><a class="header-anchor" href="#原理"></a>原理</h3>
<blockquote>
<p>隧道端点VTEP (VXLAN Tunnel End Point - an entity which originates and/orterminates VXLAN tunnels)</p>
<p>VNI(VXLAN Network Identifier)</p>
</blockquote>
<p>Docker使用VXLAN隧道技术， 基于已经存在的三层网络来创建虚拟的二层网络</p>
<ul>
<li>VXLAN基于现有的三层网络创建隧道</li>
</ul>
<p>注意： overlay网络可以实现三层路由，即可以创建一个包含多个子网的overlay网络， Docker负责子网间的路由:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在Sandbo中创建2个虚拟交换机（不再只有1个）， 默认支持路由</span></span><br><span class="line">docker network create --subnet=&lt;11.1.1.0/24&gt; --subnet=&lt;11.1.1.0/24&gt; -d overlay &lt;network-name&gt;`</span><br></pre></td></tr></table></figure>
<p>容器的Sandbox内部会创建一个名为<code>Br0</code>的虚拟交换机和一个<code>VTEP</code>， 后者一边连到<code>Br0</code>， 一边连到<strong>主机的网络栈</strong>， 主机网络栈中的终端可以从所连接的网络中获得IP地址（主机的IP）， 并以UDP Socket的方式<u>绑定到4789端口</u></p>
<p>每个容器都有自己的虚拟以太网(<code>veth</code>)适配器,  并接入本地的<code>Br0</code></p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Network/overlay%20%20principle.png" alt="overlay principle"></p>
<p>假设node1上的容器为C1, node2上的容器为C2， C1 ping C2 的ip <code>10.0.0.4</code>：</p>
<ul>
<li>该请求通过<code>veth</code>接口发送到<code>Br0</code>, <code>Br0</code>的ARP映射表中没有与当前目的ip对应的MAC地址， 因此它会将该frame发送到其上的所有端口</li>
<li><code>VTEP</code>接口连接到<code>Br0</code>,它知道这个frame的映射， 于是<code>VTEP</code>将自己的MAC地址返回给<code>Br0</code>， 这是个代理ARP响应
<ul>
<li>和计网一模一样， 只返回下一跳的MAC地址，一步一步迭代</li>
<li><code>VTEP</code>接口知道C2, 是因为所有新启动的容器都会将自己的网络详情用网络内置的Gossip协议发送给相同Swarm集群内的其他节点</li>
</ul>
</li>
<li><code>Br0</code>收到返回结果，它更新自己的ARP映射， 将<code>10.0.0.4</code>映射到本地<code>VTEP</code>的MAC地址</li>
<li><code>Br0</code> 将该frame转发到<code>VTEP</code>， 后者将frame封装成UDP包， 设置目的IP字段为node2的<code>VTEP</code>的IP地址，设置<u>目的UDP Socket端口为4789</u>
<ul>
<li>封装就是把 VXLAN Header信息（记录了VLAN到VXLAN的映射）添加到frame,  每个VLAN都对应一个VNID, 以便包被解析后可以被转发到正确的VLAN</li>
</ul>
</li>
<li>包到达node2后， node2的内核发现目的端口为 UDP 4789, 还知道存在<code>VTEP</code>绑定到该端口， 内核就将包发给<code>VTEP</code></li>
<li><code>VTEP</code>读取VNID, 解压该包， 根据VNID将包发给本地名为<code>Br0</code>的连接到VLAN（ 由VNID指定 ）的交换机， 在该交换机上， 包被发送给容器C2</li>
</ul>
<h3 id="示例-2"><a class="header-anchor" href="#示例-2"></a>示例</h3>
<p>注：图中的主机ip请替换为自己的</p>
<h4 id="构建Swarm"><a class="header-anchor" href="#构建Swarm"></a>构建Swarm</h4>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Network/overlay%20%20example.png" alt="overlay example"></p>
<p>假设有两台Docker主机,  将他们配置为Swarm集群， 令node1为manager, node2为worker:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">on node1:</span></span><br><span class="line">docker swarm init --advertise-addr &lt;node1-ip&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">on node2:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要打开2377/tcp, 7946/tcp, 7946/udp</span></span><br><span class="line">docker swarm join --token &lt;token&gt; &lt;node1-ip&gt;</span><br></pre></td></tr></table></figure>
<h4 id="创建覆盖网络"><a class="header-anchor" href="#创建覆盖网络"></a>创建覆盖网络</h4>
<p>在node1上创建网络：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">需要打开4789/udp</span></span><br><span class="line">docker network create -d overlay &lt;network-name&gt; # 覆盖网络使用overlay驱动</span><br></pre></td></tr></table></figure>
<ul>
<li>创建了新的覆盖网络， 还包括了一个TLS加密的控制层</li>
<li><code>-o encrypted</code>: 设置数据层加密</li>
</ul>
<h4 id="将服务连接到覆盖网络"><a class="header-anchor" href="#将服务连接到覆盖网络"></a>将服务连接到覆盖网络</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">on node1:</span></span><br><span class="line">docker service create --name &lt;service-name&gt; \</span><br><span class="line">--network &lt;network-name&gt; \</span><br><span class="line">--replicas 2 \</span><br><span class="line">ubuntu sleep infinity        </span><br></pre></td></tr></table></figure>
<ul>
<li>创建了新服务，连接到了覆盖网络，且基于指定的镜像创建了两个副本（容器）
<ul>
<li>在这里，均在容器中用<code>sleep</code>来保持容器运行</li>
</ul>
</li>
</ul>
<p>当Swarm在覆盖网络上启动容器时，会自动将容器运行所在节点加入到网络中</p>
<ul>
<li>node2上启动了容器， 因此node2加入到覆盖网络</li>
</ul>
<h4 id="测试覆盖网络"><a class="header-anchor" href="#测试覆盖网络"></a>测试覆盖网络</h4>
<p>由后文“服务发现”知， Swarm网络是可以通过容器名来定位的， 这里用ip来定位只是为了测试</p>
<p>先查看被分配给覆盖网络的<code>Subnet</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network inspect uber-net                                                          </span><br><span class="line">[                                                           </span><br><span class="line">    &#123;                                                       </span><br><span class="line">        &quot;Name&quot;: &quot;uber-net&quot;,                                 </span><br><span class="line">        &quot;Id&quot;: &quot;6arolzgpk57l5s6nn3uca25ho&quot;,                                                                              </span><br><span class="line">        &quot;Created&quot;: &quot;2022-03-23T03:24:24.651086709+08:00&quot;,                                                               </span><br><span class="line">        &quot;Scope&quot;: &quot;swarm&quot;,                                   </span><br><span class="line">        &quot;Driver&quot;: &quot;overlay&quot;,                                </span><br><span class="line">        &quot;EnableIPv6&quot;: false,                                </span><br><span class="line">        &quot;IPAM&quot;: &#123;                                           </span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,                                                                                        </span><br><span class="line">            &quot;Options&quot;: null,                                </span><br><span class="line">            &quot;Config&quot;: [                                     </span><br><span class="line">                &#123;                                           </span><br><span class="line">                    &quot;Subnet&quot;: &quot;10.0.1.0/24&quot;,        # 子网掩吗                                                                    </span><br><span class="line">                    &quot;Gateway&quot;: &quot;10.0.1.1&quot;                                                                               </span><br><span class="line">                &#125;                                           </span><br><span class="line">            ]                                               </span><br><span class="line">&lt;Snip&gt;                   </span><br></pre></td></tr></table></figure>
<p>看到覆盖网络的子网是<code>10.0.0/24</code></p>
<p>然后分别查看两个node的对应容器的id和ip地址：</p>
<p>查看id：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker container ls</span><br></pre></td></tr></table></figure>
<p>查看容器ip地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container inspect \</span><br><span class="line">--format=&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27; \ </span><br><span class="line">&lt;container&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node1输出：10.0.1.4</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node2输出：10.0.1.3</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确实遵循子网掩码10.0.0/24</span></span><br></pre></td></tr></table></figure>
<p>然后进入任一容器，ping另一个容器的ip,发现能ping通</p>
<p>使用<code>traceroute</code>跟踪路由信息，发现路由信息<u>只有一跳</u>，证明覆盖网络中，容器间通信是在网络层直连的</p>
<h2 id="接入现有网络"><a class="header-anchor" href="#接入现有网络"></a>接入现有网络</h2>
<p>Docker内置的Macvlan驱动可以给容器提供MAC和IP地址， 让容器在物理网络上成为“一等公民”：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Network/Macvlan%20principle.png" alt="Macvlan principle"></p>
<p>Macvlan 性能高，但是需要将主机网卡设为混杂模式，大部分公有云平台都不允许这么设置， 因此Macvlan在公有云平台不可行</p>
<p>Macvlan基于linux的Macvlan内核驱动， 因此支持linux内核的所有网络功能， 包括VLAN的Trunk</p>
<p>Macvlan驱动在连接到目标网络前，需要设置：</p>
<ul>
<li>子网信息</li>
<li>网关</li>
<li>可分配给容器的IP范围</li>
<li>主机使用的接口或子接口</li>
</ul>
<h3 id="示例-3"><a class="header-anchor" href="#示例-3"></a>示例</h3>
<p>假设有一个物理网络，其上有两个VLAN： VLAN100： 10.0.0.0/24 ； VLAN200： 192.168.3.0/24</p>
<p>我们创建一个名为 macvlan100的 Macvlan网络，它连接到VLAN100：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create -d macvlan \</span><br><span class="line">--subnet=10.0.0.0/24 \</span><br><span class="line">--ip-range=10.0.0.0/25 \</span><br><span class="line">--gateway=10.0.0.1 \</span><br><span class="line">-o parent=eth0.100 \</span><br><span class="line">macvlan100</span><br></pre></td></tr></table></figure>
<ul>
<li>Macvlan  采用标准的Linux子接口， 需要打上目标VLAN网络的ID, 在本例中是VLAN100, 所以子接口标记为<code>.100</code>( <code>eth0.100</code> )</li>
<li><code>--ip-range</code>:   设置Macvlan网络中可分配给容器的IP范围， 这些地址会被保留，不能用于其他节点或者DHCP, 因为没有任何管理功能来检查IP区域重合的问题</li>
</ul>
<p>将容器部署到网络中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container run -d --name mactainer1 \</span><br><span class="line">--network macvlan100 \</span><br><span class="line">alpine sleep 1d</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Network/Macvlan%20example.png" alt="Macvlan example"></p>
<p>Macvlan支持Trunk功能，这意味着可以在同一台主机创建多个VLAN网络：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Network/Macvlan%20multi-vlan.png" alt="Macvlan multi-vlan"></p>
<h2 id="服务发现"><a class="header-anchor" href="#服务发现"></a>服务发现</h2>
<p>允许<u>同一网络中的</u>容器和Swarm服务通过名称互相定位</p>
<ul>
<li>显然，这是通过Docker的DNS服务实现的， 原理和正常网络的DNS服务完全相同</li>
</ul>
<h3 id="自定义DNS规则"><a class="header-anchor" href="#自定义DNS规则"></a>自定义DNS规则</h3>
<p>用户可以自定义Swarm服务和容器的查询规则， 这是通过向容器内部的<code>/etc/resolv.conf</code>添加条目实现的（不要问我为什么是<code>resolv</code> 而不是<code>resolve</code>）</p>
<ul>
<li><code>--dns</code>:  添加自定义的DNS服务器， 向<code>/etc/resolv.conf</code>中追加这个列表</li>
<li><code>--dns-search</code>: 指定自定义查询时所使用的域名， 向<code>/etc/resolv.conf</code>中追加这个域名</li>
</ul>
<h4 id="示例-4"><a class="header-anchor" href="#示例-4"></a>示例</h4>
<p>启动新容器，并添加<code>8.8.8.8</code>DNS服务器， 同时指定<code>dockercets.com</code>作为域名添加到非完整查询中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ docker container run -it --name c3 \</span><br><span class="line">--dns=8.8.8.8 \</span><br><span class="line">--dns-search=dockercets.com \</span><br><span class="line">&gt; alpine sh</span><br></pre></td></tr></table></figure>
<p>进入该容器，查看<code>/etc/resolv.conf</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ # cat /etc/resolv.conf</span><br><span class="line">search dockercets.com</span><br><span class="line">nameserver 8.8.8.8</span><br></pre></td></tr></table></figure>
<h2 id="Ingress网络"><a class="header-anchor" href="#Ingress网络"></a>Ingress网络</h2>
<p>Swarm支持两种服务发布模式：</p>
<ul>
<li>Ingress:   默认， 可以让Swarm集群内任意节点（即使没有运行该服务副本）都能访问该服务
<ul>
<li>Ingress模式底层是一个<strong>完全图</strong>（ 采用Service Mesh网络 ）</li>
<li>Ingree网络会<strong>将流量平均分在所有服务副本之上</strong></li>
</ul>
</li>
<li>Host： Host模式发布的服务只能通过运行服务副本的节点来访问
<ul>
<li>这里的host模式不是之前提到的host网络</li>
</ul>
</li>
</ul>
<p>Host模式发布：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service create -d --name svc1 \</span><br><span class="line">--publish published=5000,target=80,mode=host \</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure>
<ul>
<li>Ingress模式可以使用简单格式，即形如<code> -p 5000:80</code>, 而Host模式必须使用上述的完整格式（逗号前后还不能有空格）</li>
<li><code>published=5000</code>:  服务通过5000端口向外部提供服务</li>
<li><code>target=80</code>: 发送到published端口5000的请求， 会映射到服务副本的80端口</li>
<li><code>mode=host</code>： 只有外部请求发送到运行了服务副本的节点才可以访问该服务</li>
</ul>
<h4 id="示例-5"><a class="header-anchor" href="#示例-5"></a>示例</h4>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Network/Ingress%20example.png" alt="Ingress example"></p>
<ul>
<li>该命令部署了一个<code>svc1</code>服务，连接到了<code>overnet</code>网络，并发布到5000端口</li>
<li>这里的Swarm节点全部接入了Ingress网络， 所以这个端口被发布到了Swarm范围内</li>
<li>集群确保到达Ingress网络中任意节点的5000端口的浏览，都会被路由到80端口的<code>svc1</code>  服务</li>
<li>当前<code>svc1</code>服务只部署了一个副本，因此流量全部分配到Node2</li>
<li>箭头展示了访问Node1的5000端口的浏览，通过Ingress网络，被路由到了Node2的正在运行的服务副本上</li>
</ul>
<p>可以看到，外部流量可能访问任意一个Swarm节点，但是最终都会被路由到运行服务副本的节点</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Design Pattern</title>
    <url>/2022/09/26/Design-Pattern/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>类之间的关系</li>
<li>组合 &gt; 继承</li>
<li>Design Pattern</li>
<li>设计模式：创建型</li>
<li>设计模式： 结构型</li>
<li>设计模式：行为型</li>
</ul>
<p>ref： 软件系统设计 --- 潘敏学； <a href="https://refactoring.guru/design-patterns/creational-patterns">Design Pattern Turotial</a></p>
<span id="more"></span>
<h1 id="类之间的关系"><a class="header-anchor" href="#类之间的关系"></a>类之间的关系</h1>
<p>ref: <a href="https://www.jianshu.com/p/d1d45efcfac1">https://www.jianshu.com/p/d1d45efcfac1</a></p>
<h2 id="泛化-Generalization）"><a class="header-anchor" href="#泛化-Generalization）"></a>泛化(Generalization）</h2>
<blockquote>
<p>泛化表示一个更泛化的元素和一个更具体的元素之间的关系。泛化是用于对<code>继承</code>进行建模的<code>UML元素</code>。在Java中，用<code>extends</code>关键字表示。</p>
</blockquote>
<p>**表示方式：**用实线空心箭头表示。</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/generalization" alt="img"></p>
<h2 id="实现-Realization"><a class="header-anchor" href="#实现-Realization"></a>实现(Realization)</h2>
<blockquote>
<p>实现是一种<code>类与接口</code>的关系，表示类是接口所有特征和行为的实现，在程序中一般通过<code>类实现接口</code>来描述。</p>
</blockquote>
<p>**表示方式：**用虚线空心三角形箭头表示，实现类指向接口。</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/realization" alt="img"></p>
<h2 id="依赖-Dependency"><a class="header-anchor" href="#依赖-Dependency"></a>依赖(Dependency)</h2>
<blockquote>
<p>是一种<code>使用</code>的关系，即一个类的实现需要另一个类的协助。在Java中，方法参数需要传入另一个类的对象，就表示依赖这个类。</p>
</blockquote>
<p>**表示方式：**虚线箭头。</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/dependency" alt="img"></p>
<p>**注意：**类A需要用到类B，类A指向类B。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">(Book book)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;读的书是：&quot;</span> + book.getName());</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(Food food)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;吃的是：&quot;</span> + food.getName());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="关联-Association"><a class="header-anchor" href="#关联-Association"></a>关联(Association)</h2>
<blockquote>
<p>表示类与类之间的联接,它使一个类知道另一个类的属性和方法，这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的。通常是将一个类的对象作为另一个类的成员变量.</p>
<p>在Java中，一个类的全局变量引用了另一个类，就表示关联了这个类</p>
</blockquote>
<p>**表示方式：**实线箭头。</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/association" alt="img"></p>
<p>**注意：**类A中用到类B属性，类A指向类B。</p>
<h2 id="聚合-Aggregation"><a class="header-anchor" href="#聚合-Aggregation"></a>聚合(Aggregation)</h2>
<blockquote>
<p>概念：聚合是关联关系的一种，是强的关联关系。聚合是整体和个体之间的关系，即<strong>has-a</strong>的关系，整体与个体可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。聚合和关联关系在语法上是一致的，只能从语义来区分</p>
</blockquote>
<p>**表示方式：**尾部为空心菱形的实线箭头（也可以没箭头）</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/aggragation" alt="img"></p>
<p>**注意：**类A中用到类B属性，类A指向类B。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Student student;</span><br><span class="line">	<span class="keyword">private</span> Worker worker;</span><br><span class="line">	<span class="keyword">private</span> Farmer farmer;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">People</span><span class="params">(Student student, Worker worker, Farmer farmer)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.student = student;</span><br><span class="line">		<span class="built_in">this</span>.worker = worker;</span><br><span class="line">		<span class="built_in">this</span>.farmer = farmer;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="组合-Composition"><a class="header-anchor" href="#组合-Composition"></a>组合(Composition)</h2>
<blockquote>
<p>组合也是关联关系的一种。组合是一种整体与部分的关系，即contains-a的关系，比聚合更强。部分与整体的生命周期一致，整体的生命周期结束也就意味着部分的生命周期结束，组合关系不能共享。程序中组合和关联关系是一致的，只能从语义级别来区分。</p>
</blockquote>
<p>**表示方式：**尾部为实心菱形的实现箭头（也可以没箭头）。</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/composition" alt="img"></p>
<p>**注意：**Head是Dog的一部分，Dog指向Head。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bird</span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Wing wing;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">People</span><span class="params">()</span>&#123;</span><br><span class="line">		wing = <span class="keyword">new</span> <span class="title class_">Wing</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="组合-继承"><a class="header-anchor" href="#组合-继承"></a>组合 &gt; 继承</h1>
<ul>
<li>Expert designers know not to solve every problem from first principles, they reuse solutions : <strong>&quot;不要造轮子&quot;</strong></li>
<li><strong>HAS-A can be better than IS-A</strong>
<ol>
<li>Composition gives you a lot more flexibility.</li>
<li>Not only does it let you encapsulate a family of<br>
algorithms into their own set of classes, but it<br>
also lets you change behavior at runtime.</li>
</ol>
</li>
<li>与继承关系相比，组合的主要优势在于不会破坏类的封装性，而且<strong>继承是一种耦合度较大的静态关系，无法在程序运行时动态扩展</strong>。在软件开发阶段，组合关系虽然不会比继承关系减少编码量，但是到了软件维护阶段，由于关联关系使系统具有较好的<strong>松耦合性</strong>，因此使得<strong>系统更加容易维护</strong>。当然，组合的缺点是<strong>比继承关系要创建更多的对象</strong></li>
</ul>
<h1 id="Design-Pattern"><a class="header-anchor" href="#Design-Pattern"></a>Design Pattern</h1>
<blockquote>
<p><strong>设计模式(Design Pattern)<strong>是</strong>一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结</strong></p>
</blockquote>
<p>基本要素：</p>
<ol>
<li>模式名称 (Pattern name)</li>
<li>问题 (Problem)</li>
<li>解决方案 (Solution)</li>
<li>效果 (Consequences)</li>
</ol>
<h2 id="Types"><a class="header-anchor" href="#Types"></a>Types</h2>
<ul>
<li>
<p>根据其目的(模式是用来做什么的)可分为创建型(Creational)，结构型(Structural)和行为型(Behavioral)三种：</p>
<ol>
<li>创建型模式主要用于创建对象。</li>
<li>结构型模式主要用于处理类或对象的组合。</li>
<li>行为型模式主要用于描述对类或对象怎样交互和怎样分配职责。</li>
</ol>
</li>
<li>
<p>根据范围，即模式主要是用于处理类之间关系还是处理对象之间的关系，可分为类模式和对象模式两种：</p>
<ol>
<li>类模式处理类和子类之间的关系，这些关系通过继承建立，在编译时刻就被确定下来，是静态的</li>
<li>对象模式处理对象间的关系，这些关系在运行时刻变化，是动态的</li>
</ol>
</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Design%20Pattern%20Classification.png" alt="Design Pattern Classification"></p>
<ul>
<li>注： 模板方法为什么是行为性模式? 答案：子类控制父类的行为</li>
</ul>
<h1 id="Creationnal-Patterns"><a class="header-anchor" href="#Creationnal-Patterns"></a>Creationnal  Patterns</h1>
<h2 id="Singleton"><a class="header-anchor" href="#Singleton"></a>Singleton</h2>
<p>太简单，不介绍了</p>
<h2 id="Simple-Factory"><a class="header-anchor" href="#Simple-Factory"></a>Simple Factory</h2>
<p>策略模式解决<strong>行为问题</strong>, 而工厂模式解决<strong>对象创建问题</strong></p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/simple%20factory%20pattern" alt="image-20220315145604053"></p>
<h3 id="模式结构"><a class="header-anchor" href="#模式结构"></a>模式结构</h3>
<ul>
<li>Factory：  工厂角色</li>
<li>Product：抽象产品</li>
<li>ConcreteProduct： 具体产品角色</li>
</ul>
<h3 id="示例"><a class="header-anchor" href="#示例"></a>示例</h3>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/simple%20factory%20user_manager" alt="image-20220315145955575"></p>
<p>简单工厂模式的缺点</p>
<ul>
<li>当有新产品要加入到系统中时,必须修改工厂类,加入必要的处理逻辑,这违背了“开闭原则”</li>
</ul>
<h2 id="Factory-Method"><a class="header-anchor" href="#Factory-Method"></a>Factory Method</h2>
<blockquote>
<p>在工厂方法模式中,核心的工厂类不再负责所有产品的创建,而是将具体创建工作交给子类去做。这个核心类仅仅负责给出具体工厂必须实现的接口,而不负责哪一个产品类被实例化这种细节,这使得<strong>工厂方法模式可以在不修改工厂角色的情况下引进新产品</strong></p>
</blockquote>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/factory%20method%20pattern" alt="image-20220315150329091"></p>
<h3 id="code"><a class="header-anchor" href="#code"></a>code</h3>
<p>抽象工厂类代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">PayMethodFactory</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> AbstractPay <span class="title function_">getPayMethod</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体工厂类代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CashPayFactory</span> <span class="keyword">extends</span> <span class="title class_">PayMethodFactory</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> AbstractPay <span class="title function_">getPayMethod</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CashPay</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户类代码片段:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PayMethodFactory factory;</span><br><span class="line">AbstractPay payMethod; <span class="comment">//在定义工厂和产品时都必须使用抽象层</span></span><br><span class="line">factory=<span class="keyword">new</span> <span class="title class_">CashPayFactory</span>();</span><br><span class="line">payMethod =factory.getPayMethod();</span><br><span class="line">payMethod.pay();</span><br></pre></td></tr></table></figure>
<p>为了提高系统的可扩展性和灵活性,在<strong>定义工厂和产品时都必须使用抽象层</strong>,如果需要更换产品类,只需要更换对应的工厂即可,其他代码不需要进行任何修改。</p>
<h3 id="示例-2"><a class="header-anchor" href="#示例-2"></a>示例</h3>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/factory%20method%20pattern%20logger" alt="image-20220315150923939"></p>
<h3 id="优点"><a class="header-anchor" href="#优点"></a>优点</h3>
<ul>
<li>很好地符合了“开闭原则”</li>
</ul>
<h3 id="缺点"><a class="header-anchor" href="#缺点"></a>缺点</h3>
<ul>
<li>添加新产品时，不仅要添加新的产品类，还要添加对应的具体工厂类，增加系统的复杂度</li>
</ul>
<h2 id="Abstract-Factory"><a class="header-anchor" href="#Abstract-Factory"></a>Abstract Factory</h2>
<blockquote>
<p>抽象工厂模式(Abstract Factory Pattern):提供一个创建一系列相关或相互依赖对象的接口,而无须指定它们具体的类。抽象工厂模式又称为Kit模式,属于<strong>对象创建型模式</strong></p>
</blockquote>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/abstract%20factory%20pattern" alt="image-20220315151244481"></p>
<h3 id="概念"><a class="header-anchor" href="#概念"></a>概念</h3>
<ul>
<li><strong>产品等级结构</strong>： 即产品的继承结构。 如抽象类是电视机， 而子类有海信电视机， TCL电视机， 则抽象电视机与具体品牌的电视机构成了一个产品等级结构</li>
<li><strong>产品族</strong>：由同一个工厂生产的，位于不同产品等级结构中的一组产品。 如海尔是一个产品族， 海尔电视机属于电视机产品结构， 电冰箱位于电冰箱产品结构</li>
</ul>
<h3 id="模式结构-2"><a class="header-anchor" href="#模式结构-2"></a>模式结构</h3>
<ul>
<li>AbstractFactory</li>
<li>AbstractProduct</li>
<li>Product</li>
</ul>
<h2 id="模式分析"><a class="header-anchor" href="#模式分析"></a>模式分析</h2>
<ul>
<li>抽象工厂模式与工厂方法模式的区别：工厂方法模式针对的是一个产品等级结构，而抽象工厂模式则需要面对多个产品等级结构</li>
</ul>
<h3 id="code-2"><a class="header-anchor" href="#code-2"></a>code</h3>
<p>抽象工厂类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> AbstractProductA <span class="title function_">createProductA</span><span class="params">()</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> AbstractProductB <span class="title function_">createProductB</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体工厂类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteFactory1</span> <span class="keyword">extends</span> <span class="title class_">AbstractFactory</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> AbstractProductA <span class="title function_">createProductA</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteProductA1</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> AbstractProductB <span class="title function_">createProductB</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteProductB1</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="示例-3"><a class="header-anchor" href="#示例-3"></a>示例</h3>
<p>产品结构为：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/abstract%20factory%20method%20text%20%20and%20button" alt="image-20220315151837764"></p>
<p>抽象工厂模式：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/abstract%20factory%20method%20text%20and%20button%20realization.png" alt="image-20220315151810392"></p>
<h3 id="优点-2"><a class="header-anchor" href="#优点-2"></a>优点</h3>
<ul>
<li>增加或者替换产品族比较方便</li>
</ul>
<h3 id="缺点："><a class="header-anchor" href="#缺点："></a>缺点：</h3>
<ul>
<li>增加新的产品等级结构需要修改抽象工厂和所有的具体工厂类，<strong>对“开闭原则”的支持呈现倾斜性</strong></li>
</ul>
<h2 id="Builder"><a class="header-anchor" href="#Builder"></a>Builder</h2>
<blockquote>
<p>建造者模式可以<strong>将一个复杂对象的构建与它的表示分离</strong>,使得<strong>同样的构建过程可以创建不同的表示</strong>.将部件和其组装过程分开,<strong>一步一步创建一个复杂的对象</strong></p>
<p>是一种对象创建型模式</p>
</blockquote>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/builder%20pattern.png" alt="image-20220308144855351"></p>
<h3 id="模式结构-3"><a class="header-anchor" href="#模式结构-3"></a>模式结构</h3>
<ul>
<li>Builder:抽象建造者</li>
<li>ConcreteBuilder:具体建造者</li>
<li>Directo: :指挥者. 一方面它隔离了客户与生产过程;另一方面它负责控制产品的生成过程</li>
<li>Product:产品角色</li>
</ul>
<h3 id="code-3"><a class="header-anchor" href="#code-3"></a>code</h3>
<p>抽象建造者:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Builder</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">protected</span> Product product=<span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildPartA</span><span class="params">()</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildPartB</span><span class="params">()</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildPartC</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Product <span class="title function_">getResult</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Director:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Director</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> Builder builder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Director</span><span class="params">(Builder builder)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">this</span>.builder=builder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBuilder</span><span class="params">(Builder builder)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">this</span>.builder=builer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Product <span class="title function_">construct</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	builder.buildPartA();</span><br><span class="line">	builder.buildPartB();</span><br><span class="line">	builder.buildPartC();</span><br><span class="line">	<span class="keyword">return</span> builder.getResult();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>client:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteBuilder</span>();</span><br><span class="line"><span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>(builder);</span><br><span class="line"><span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> director.construct();</span><br></pre></td></tr></table></figure>
<p>在客户端代码中,无须关心产品对象的具体组装过程， <strong>只需确定具体建造者的类型</strong>,建造者模式将复杂对象的构建与对象的表现分离开来,这样使得同样的构建过程可以创建出不同的表现</p>
<h3 id="示例-4"><a class="header-anchor" href="#示例-4"></a>示例</h3>
<p>KFC套餐,这里省略了抽象建造者</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Builder%20Pattern%20KFC%20example.png" alt="Builder Pattern KFC example"></p>
<h3 id="优点-3"><a class="header-anchor" href="#优点-3"></a>优点</h3>
<ul>
<li>client不必知道产品的创建过程，<strong>将产品本身与产品的创建过程解耦</strong></li>
<li><u>可以更加精细地控制产品的创建过程</u></li>
<li>增加新的具体建造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，<strong>符合“开闭原则”</strong></li>
</ul>
<h3 id="缺点-2"><a class="header-anchor" href="#缺点-2"></a>缺点</h3>
<ul>
<li>建造者模式所创建的产品一般具有较多的共同点,其组成部分相似,如果产品之间的差异性很大,则不适合使用建造者模式,因此其<u>使用范围受到一定的限制</u></li>
<li>如果产品的内部变化复杂,可能会导致需要定义很多具体建造者类来实现这种变化,导致系统变得很庞大。</li>
</ul>
<h3 id="模式简化"><a class="header-anchor" href="#模式简化"></a>模式简化</h3>
<ul>
<li>省略抽象建造者角色: 如果系统中只需要一个具体建造者的话,可以省略掉抽象建造者。</li>
<li>省略指挥者角色: 在具体建造者只有一个的情况下,如果抽象建造者角色已经被省略掉,那么还可以省略指挥者角色,让Builder角色扮演指挥者与建造者双重角色。</li>
</ul>
<h2 id="Prototype"><a class="header-anchor" href="#Prototype"></a>Prototype</h2>
<blockquote>
<p>原型模式(Prototype Pattern): 用原型实例指定创建对象的种类,并且通过复制这些原型创建新的对象。原型模式允许一个对象再创建另外一个可定制的对象,无须知道任何创建的细节</p>
<p>是一种对象创建型模式</p>
</blockquote>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/prototype%20pattern.png" alt="image-20220308152010781"></p>
<h3 id="模式结构-4"><a class="header-anchor" href="#模式结构-4"></a>模式结构</h3>
<ul>
<li>Prototype:抽象原型类</li>
<li>ConcretePrototype:具体原型类</li>
<li>Client</li>
</ul>
<p>一般而言,<code>clone()</code>方法满足:</p>
<ul>
<li>对任何的对象x,都有<code>x.clone() !=x</code>,即克隆对象与原对象不是同一个对象。</li>
<li>对任何的对象x,都有<code>x.clone().getClass()==x.getClass()</code>,即克隆对象与原对象的类型一样。</li>
<li>如果对象x的equals()方法定义恰当,那么<code>x.clone().equals(x)</code>应该成立</li>
</ul>
<p>Java提供的<code>clone()</code>方法默认是浅拷贝，可以override该方法实现不完全的深拷贝</p>
<ul>
<li>要实现彻底的深拷贝是非常困难的</li>
</ul>
<h3 id="优点-4"><a class="header-anchor" href="#优点-4"></a>优点</h3>
<ul>
<li>可以快速创建很多相同或相似的对象，简化对象的创建过程，还可以保存对象的一些中间状态；</li>
</ul>
<h3 id="缺点-3"><a class="header-anchor" href="#缺点-3"></a>缺点</h3>
<ul>
<li>需要为每一个编写<code>clone()</code>，因此对已有类进行改造时，需要修改其源代码，违反了开闭原则</li>
<li>在实现深克隆时需要编写较为复杂的代码
<ul>
<li>事实上几乎不存在完全的深拷贝，这要考虑到底层对象复杂的引用关系</li>
</ul>
</li>
</ul>
<h3 id="适用环境"><a class="header-anchor" href="#适用环境"></a>适用环境</h3>
<ul>
<li><u>创建新对象成本较大</u>，新的对象可以通过原型模式对已有对象进行复制来获得；</li>
<li>系统要<u>保存对象的状态</u>，而对象的状态变化很小；</li>
<li>需要避免使用分层次的工厂类来创建分层次的对象，并且类的实例对象只有一个或很少的几个组合状态，<u>通过复制原型对象得到新实例可能比使用构造函数创建一个新实例更加方便</u></li>
</ul>
<h1 id="Structural-Patterns"><a class="header-anchor" href="#Structural-Patterns"></a>Structural Patterns</h1>
<h2 id="Adatpter"><a class="header-anchor" href="#Adatpter"></a>Adatpter</h2>
<blockquote>
<p>适配器模式(Adapter Pattern) :将一个接口转换成客户希望的另一个接口,适配器模式使接口不兼容的那些类可以一起工作,其别名为包装器(Wrapper)。适配器模式<strong>既可以作为类结构型模式,也可以作为对象结构型模式</strong></p>
<p>在适配器模式中可以定义一个包装类,包装不兼容接口的对象,这个包装类指的就是适配器(Adapter),它所包装的对象就是适配者<br>
(Adaptee),即被适配的类</p>
<p>适配器提供客户类需要的接口,适配器的实现就是把客户类的请求转化为对适配者的相应接口的调用。也就是说:当客户类调用适配器的方法时,在适配器类的内部将调用适配者类的方法,而这个过程对客户类是透明的,客户类并不直接访问适配者类。因此,适配器可以使由于接口不兼容而不能交互的类可以一起工作。这就是适配器模式的模式动机</p>
</blockquote>
<p>模式结构：</p>
<ul>
<li>Target:  目标抽象类， 即</li>
<li>Adapter： 适配器类</li>
<li>Adaptee： 适配者类</li>
<li>Client</li>
</ul>
<h3 id="类适配器"><a class="header-anchor" href="#类适配器"></a>类适配器</h3>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Class%20Adapter.png" alt="Class Adapter"></p>
<ul>
<li>Adapter多继承， 同时继承Target和Adaptee, 这需要语言支持多继承。</li>
<li>如果语言不支持多继承， 那么如果Target是接口的话，也可以选择<u>继承Adaptee,实现Target</u></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">extends</span> <span class="title class_">Adaptee</span> <span class="keyword">implements</span> <span class="title class_">Target</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		specificRequest();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="对象适配器"><a class="header-anchor" href="#对象适配器"></a>对象适配器</h3>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Object%20Adapter.png" alt="Object Adapter"></p>
<ul>
<li>不是继承<code>Adaptee</code>类，而是持有<code>Adaptee</code>的实例，以解决兼容性的问题。即持有<code>Adaptee</code>类，实现<code>Target</code>接口，完成<code>Adaptee—&gt;Target</code>的适配</li>
<li>缺点是难以置换Aaptee的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">extends</span> <span class="title class_">Target</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Adapter</span><span class="params">(Adaptee adaptee)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">this</span>.adaptee=adaptee;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		adaptee.specificRequest();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="优点-5"><a class="header-anchor" href="#优点-5"></a>优点</h3>
<p>将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，而无须修改原有代码。</p>
<p>增加了类的透明性和复用性，将具体的实现封装在适配者类中，对于客户端类来说是透明的，而且提高了适配者的复用性。</p>
<p>灵活性和扩展性都非常好，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合“开闭原则’</p>
<p>由于适配器类是适配者类的子类，因此可以在适配器类中置换一些适配者的方法，使得适配器的灵活性更强</p>
<h3 id="缺点-4"><a class="header-anchor" href="#缺点-4"></a>缺点</h3>
<p>对于Java、C#等不支持多重继承的语言，使用有局限</p>
<h3 id="默认适配器模式"><a class="header-anchor" href="#默认适配器模式"></a>默认适配器模式</h3>
<blockquote>
<p>默认适配器模式(Default Adapter Pattern)或缺省适配器模式:</p>
<p>当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现(空方法)，那么该抽象类的子类可有选择地覆盖父类的某些方法来实现需求，它适用于一个接口不想使用其所有的方法的情况。因此也称为单接口适配器模式</p>
</blockquote>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Default%20Adapter.png" alt="Default Adapter"></p>
<h3 id="双向适配器模式"><a class="header-anchor" href="#双向适配器模式"></a>双向适配器模式</h3>
<blockquote>
<p>在对象适配器的使用过程中，如果在适配器中同时包含对目标类和适配者类的引用，适配者可以通过它调用目标类中的方法，目标类也可以通过它调用适配者类中的方法，那么该适配器就是一个双向适配器</p>
</blockquote>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Bio%20Adapter.png" alt="Bio Adapter"></p>
<h2 id="Composite"><a class="header-anchor" href="#Composite"></a>Composite</h2>
<blockquote>
<p>组合模式(Composite Pattern): 组合多个对象形成树形结构以表示“整体部分”的结构层次。组合模式对单个对象(即叶子对象)和组合对象(即容器对象)的使用具有一致性</p>
<p>又称为“整体部分”(Part-Whole)模式，</p>
<p>属于<strong>对象的结构模式</strong>，它将对象组织到树结构中,可以用来描述整体与部分的关系</p>
</blockquote>
<h3 id="模式动机"><a class="header-anchor" href="#模式动机"></a>模式动机</h3>
<ul>
<li>对于树形结构，当容器对象(如文件夹)的某一个方法被调用时，将遍历整个树形结构，寻找也包含这个方法的成员对象(可以是容器对象，也可以是叶子对象，如子文件夹和文件)并调用执行(递归调用)</li>
<li>由于容器对象和叶子对象在功能上的区别，在使用这些对象的客户端代码中必须有区别地对待容器对象和叶子对象，而实际上大多数情况下客户端希望一致地处理它们，因为对于这些对象的区别对待将会使得程序非常复杂</li>
<li>组合模式描述了如何将容器对象和叶子对象进行<strong>递归组合</strong>，使得用户在使用时无须对它们进行区分，可以一致地对待容器对象和叶子对象</li>
<li>事实上，Leaf类不可能实现Component类的<code>operation()</code>之外的方法，这样毫无意义。 因此<strong>组合模式分为两种</strong>：
<ul>
<li>透明组合模式：把Leaf和Composite看成一个东西，Component类的所有方法都是抽象方法， 则Leaf必须实现所有这些方法
<ul>
<li>好处：对Client而言， Leaf和Composite没有区别，可以直接针对Component抽象类编程</li>
<li>坏处：Leaf的<code>operation()</code>之外的方法全都是无用方法，Leaf对这些方法的实现基本就是抛出异常。Client“透明”地处理Component时，（因为有Leaf存在）要么处理异常， 要么就用RTTI判断对象的实际类型，没有安全性，事实上也不可能透明</li>
<li>因此，透明组合模式就是个笑话</li>
</ul>
</li>
<li>安全组合模式：Component是一个<strong>接口</strong>，仅拥有抽象方法<code>operation（）</code>。 Composite和Leaf都实现Component接口，这样这两个子类的行为就是合理的
<ul>
<li>优点：Leaf和Composite的行为是合理的</li>
<li>缺点：Leaf和Composite是两个不同的类型，使用的时候无法面向Component编程，即对Client不够透明</li>
<li>推荐使用安全组合模式</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="模式结构-5"><a class="header-anchor" href="#模式结构-5"></a>模式结构</h3>
<ul>
<li>
<p>Component: 抽象构件</p>
<ul>
<li>
<p>client针对<code>Component</code>进行编程，无须知道它到底表示的是叶子还是容器，可以对其进行统一处理</p>
</li>
<li>
<p>容器对象中既可以包含叶子，也可以包含容器，以此实现递归组合，形成一个树形结构</p>
</li>
<li>
<p>抽象父类<code> Component</code>中，只有<code>operation （）</code>是抽象方法，其他方法都要提供实现， 否则Leaf类就要实现这些方法了（这是不可能的）</p>
</li>
</ul>
</li>
<li>
<p>Leaf:叶子构件</p>
</li>
<li>
<p>Composite:容器构件</p>
</li>
<li>
<p>Client:客户类</p>
</li>
</ul>
<h3 id="模式分析-2"><a class="header-anchor" href="#模式分析-2"></a>模式分析</h3>
<ul>
<li>组合模式的关键是定义了一个<u>抽象构件类</u>，它<strong>既可以代表叶子，又可以代表容器</strong>，而客户端针对该抽象构件类进行编程，<u>无须知道它到底表示的是叶子还是容器，可以对其进行统一处理</u></li>
<li>同时容器对象与抽象构件类之间还建立了聚合关系，容器对象既可以包含叶子，也可以包含容器，以此实现递归组合，形成树形结构</li>
</ul>
<h3 id="透明组合模式"><a class="header-anchor" href="#透明组合模式"></a>透明组合模式</h3>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Transparent%20Composite.png" alt="Transparent Composite"></p>
<p>Component：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Component</span> <span class="comment">//Leaf类必须实现所有抽象方法</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Component c)</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Component c)</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> Component <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Leaf:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Leaf</span> <span class="keyword">extends</span> <span class="title class_">Component</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Component c)</span> <span class="comment">//这些方法都是无意义的，只能抛个异常</span></span><br><span class="line">	&#123; <span class="comment">//异常处理或错误提示 &#125;</span></span><br><span class="line">        </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Component c)</span></span><br><span class="line">	&#123; <span class="comment">//异常处理或错误提示 &#125;</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">public</span> Component <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">	&#123; <span class="comment">//异常处理或错误提示 &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//实现代码</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="安全组合模式"><a class="header-anchor" href="#安全组合模式"></a>安全组合模式</h3>
<p>在Java AWT中使用了安全组合模式</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Composite%20Pattern%20safe-composite%20arch.png" alt="Composite Pattern safe-composite arch"></p>
<p>Component：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">class</span> Component <span class="comment">//Leaf类只需要实现operation（）</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Leaf:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Leaf</span> <span class="keyword">extends</span> <span class="title class_">Component</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//实现代码</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="code-4"><a class="header-anchor" href="#code-4"></a>code</h3>
<p>前面给出了Component和Leaf的代码，这里只需要给出Composite的代码</p>
<p>Composite:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Composite</span> <span class="keyword">extends</span> <span class="title class_">Component</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Component c)</span></span><br><span class="line">	&#123;</span><br><span class="line">		list.add(c);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Component c)</span></span><br><span class="line">	&#123;</span><br><span class="line">		list.remove(c);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> Component <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span></span><br><span class="line">	&#123;</span><br><span class="line">		(Component)list.get(i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>( Object obj: list )</span><br><span class="line">		&#123;</span><br><span class="line">			((Component)obj).operation();</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="示例-透明组合模式"><a class="header-anchor" href="#示例-透明组合模式"></a>示例( 透明组合模式 )</h3>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Transparent%20Composite%20FileSystem.png" alt="Transparent Composite FileSystem"></p>
<h2 id="Bridge"><a class="header-anchor" href="#Bridge"></a>Bridge</h2>
<blockquote>
<p>将抽象部分与它的实现 部分分离，使它们都可以独立地变化</p>
<p>对象结构型模式</p>
</blockquote>
<ul>
<li>
<p>桥接模式将抽象部分与它的实现部分分离，使它们都可以独立地变化。它是一种对象结构型模式，又称为柄体(Handle and Body)模式或接口(Interface)模式。</p>
</li>
<li>
<p>桥接模式包含如下四个角色:抽象类中定义了一个实现类接口类型的对象并可以维护该对象;扩充抽象类扩充由抽象类定义的接口，它实现了在抽象类中定义的抽象业务方法，在扩充抽象类中可以调用在实现类接口中定义的业务方法;实现类接口定义了实现类的接口，实现类接口仅提供基本操作，而抽象类定义的接口可能会做更多更复杂的操作;具体实现类实现了实现类接口并且具体实现它，在不同的具体实现类中提供基本操作的不同实现，在程序运行时，具体实现类对象将替换其父类对象，提供给客户端具体的业务操作方法。</p>
</li>
<li>
<p>在桥接模式中，抽象化(Abstraction)与实现化(Implementation)脱耦，<br>
它们可以沿着各自的维度独立变化。</p>
</li>
<li>
<p>桥接模式的主要优点是分离抽象接口及其实现部分，是比多继承方案更好的解决方法，桥接模式还提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统，实现细节对客户透明，可以对用户隐藏实现细节;其主要缺点是增加系统的理解与设计难度，且识别出系统中两个独立变化的维度并不是一-件容易的事情。</p>
</li>
<li>
<p>桥接模式适用情况包括:需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系;抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响;一个类存在两个独立变化的维度，且这两个维度都需要进行扩展;设计要求需要独立管理抽象化角色和具体化角色;不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统。</p>
</li>
</ul>
<h3 id="模式动机-2"><a class="header-anchor" href="#模式动机-2"></a>模式动机</h3>
<ul>
<li>
<p>对于有<strong>多个变化维度</strong>的系统，采用<strong>桥接模式</strong>来进行设计系统中类的个数更少， 且系统扩展更为方便</p>
</li>
<li>
<p>桥接模式<strong>将继承关系转换为关联关系</strong>， 从而<strong>降低了类与类之间的耦合</strong></p>
</li>
</ul>
<h3 id="模式结构-6"><a class="header-anchor" href="#模式结构-6"></a>模式结构</h3>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/bridge%20arch.png" alt="bridge arch"></p>
<ul>
<li>Abstraction</li>
<li>RefinedAbstraction：扩充抽象类</li>
<li>Implementor： 扩充的维度类，这里用接口，也可以用抽象类</li>
<li>ConcreteImplementor：维度类的实现类。 例如，若Implementor是“颜色”，则ConcreteImplementor可以是“红”、“黄”、“蓝”</li>
</ul>
<h3 id="模式分析-3"><a class="header-anchor" href="#模式分析-3"></a>模式分析</h3>
<p>理解桥接模式，重点需要理解如何将<strong>抽象化</strong>(Abstraction)与<strong>实现化</strong>(Implementation)<strong>解耦</strong></p>
<ul>
<li>抽象化：将对象的共同性质抽取出来形成类
<ul>
<li>比如，将不同颜色、形状的矩形抽象为“正方形类”</li>
</ul>
</li>
<li>实现化：针对抽象化给出具体实现。 实现化产生的对象比抽象化更具体
<ul>
<li>比如，对“矩形类”进行实例化，赋予其不同的属性（颜色、大小...）</li>
</ul>
</li>
<li>抽象化与实现化解耦：将<strong>抽象化和实现化之间的强关联转变成弱关联，将两个角色（维度类和抽象物体类）之间的继承关系改为关联关系</strong>
<ul>
<li>具体矩形类不需要继承“颜色类”，再继承“大小类”，这样会造成类的数量爆炸。</li>
<li>取而代之的是，使用抽象矩形类，与“颜色类”和“大小类”<strong>组合</strong></li>
</ul>
</li>
</ul>
<h3 id="cocde"><a class="header-anchor" href="#cocde"></a>cocde</h3>
<p>Implementor：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Implementor</span> &#123;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationImpl</span><span class="params">()</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Abstraction:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Abstraction</span> </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//引入了新的维度， 比如该Abstraction类是矩形类，Implementor是颜色类，</span></span><br><span class="line">  <span class="comment">//引入Implementor即使得矩形多了一个“颜色”维度</span></span><br><span class="line">	<span class="keyword">protected</span> Implementor impl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImpl</span><span class="params">(Implementor impl)</span> </span><br><span class="line">  &#123;</span><br><span class="line">		<span class="built_in">this</span>.impl=impl; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>RefinedAbstraction:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title class_">Abstraction</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> </span><br><span class="line">  &#123;</span><br><span class="line">		<span class="comment">//代码 </span></span><br><span class="line">    impl.operationImpl(); </span><br><span class="line">    <span class="comment">//代码</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="示例-5"><a class="header-anchor" href="#示例-5"></a>示例</h3>
<h4 id="模拟毛笔"><a class="header-anchor" href="#模拟毛笔"></a>模拟毛笔</h4>
<p><strong>蜡笔和毛笔是传统继承模式与桥接模式的最好比喻</strong></p>
<p>现需要提供<u>大中小3种型号</u>的画笔，能够绘制<u>5种不同颜色</u></p>
<p>如果使用蜡笔，我们需要准备3*5=15支蜡笔，也就是说必须准备15个具体的蜡笔类</p>
<ul>
<li>蜡笔相当于传统的使用继承体系来扩展对象， 每个具体蜡笔类继承自某个具体大小类，和具体的颜色类， 一共有15个具体蜡笔类</li>
<li>毛笔相当于桥接模式，使用组合来扩展对象。 只需要一个抽象毛笔类，它依赖大小类和颜色类。 只需要3 + 5个维度类 + 一个抽象毛笔类，使用时再使用具体的毛笔实现类</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/bridge%20example.png" alt="bridge example"></p>
<h4 id="跨平台视频播放器"><a class="header-anchor" href="#跨平台视频播放器"></a>跨平台视频播放器</h4>
<p>每个播放器都有两个维度的属性： 支持的视频格式， 支持的操作系统</p>
<p>通过Bridge模式，将两个维度与播放器类组合起来</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/bridge%20example2.png" alt="bridge example2."></p>
<h3 id="优点-6"><a class="header-anchor" href="#优点-6"></a>优点</h3>
<ul>
<li>分离抽象接口及其实现部分</li>
<li>与多继承对比：
<ul>
<li>多继承违背了类的单一职责原则(“一个类只有一个变化的原因”， 即变化的维度)；</li>
<li>使用多继承，类的个数会过多</li>
</ul>
</li>
<li>桥接模式提高了系统的可扩展性
<ul>
<li>在两个变化维度中任意扩展一个维度，都不需要修改原有系统。</li>
</ul>
</li>
<li>可以对用户隐藏实现细节，使得实现细节对客户透明</li>
</ul>
<h3 id="缺点-5"><a class="header-anchor" href="#缺点-5"></a>缺点</h3>
<ul>
<li>引入桥接模式会增加系统的复杂度</li>
<li>桥接模式<u>要求正确识别出系统中两个独立变化的维度，因此其使用范围具有一定的局限性</u></li>
</ul>
<h3 id="适用环境-2"><a class="header-anchor" href="#适用环境-2"></a>适用环境</h3>
<ul>
<li>系统需要<u>在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承关系</u>，
<ul>
<li>通过桥接模式可以使它们在抽象层建立一个关联关系</li>
<li>抽象化角色和实现化角色可以以继承的方式独立扩展而互不影响，在程序运行时可以动态将一个抽象化子类的对象和一个实现化子类的对象进行组合</li>
</ul>
</li>
<li><u>一个类存在多个独立变化的维度</u>，且这些维度都需要进行扩展
<ul>
<li>也可以使用多继承，但会导致类的组合爆炸</li>
</ul>
</li>
<li><u>不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统</u></li>
</ul>
<h3 id="模式扩展"><a class="header-anchor" href="#模式扩展"></a>模式扩展</h3>
<p>适配器模式与桥接模式的联用</p>
<p>桥接模式和适配器模式用于设计的不同阶段,桥接模式用于系统的初步设计，对于存在两个独立变化维度的类可以将其分为抽象化和实现化两个角色，使它们可以分别进行变化;而在初步设计完成之后，当发现系统与已有类无法协同工作时，可以采用适配器模式。但有时候在设计初期也需要考虑适配器模式，特别是那些涉及到大量第三方应用接口的情况。</p>
<h2 id="Decorator"><a class="header-anchor" href="#Decorator"></a>Decorator</h2>
<blockquote>
<p>装饰模式(Decorator Pattern) : <strong>动态地给一个对象增加一些额外的职责</strong>(Responsibility), 就增加对象功能来说，装饰模式比生成子类实现更为灵活</p>
<p>别名称为包装器(Wrapper)，与适配器模式的别名相同，但它们适用于不同的场合。根据翻译的不同，装饰模式也有人称之为“油漆工模式”</p>
<p>是一种对象结构型模式。</p>
</blockquote>
<ul>
<li>装饰模式可分为：
<ul>
<li>透明装饰模式： 要求client完全面向抽象编程，client应该全部使用抽象构件类型</li>
<li>半透明装饰模式:允许client声明具体装饰者类型的对象，调用在具体装饰者中新增的方法</li>
</ul>
</li>
</ul>
<h3 id="模式结构-7"><a class="header-anchor" href="#模式结构-7"></a>模式结构</h3>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Decotator%20Pattern%20arch.png" alt="Decotator Pattern arch"></p>
<ul>
<li>Component</li>
<li>ConcreteComponent</li>
<li>Decorator：抽象装饰类</li>
<li>ConcreteDecorator</li>
</ul>
<h3 id="模式分析-4"><a class="header-anchor" href="#模式分析-4"></a>模式分析</h3>
<ul>
<li>
<p>使用装饰模式来实现扩展<strong>比继承更加灵活</strong>，<strong>它以对客户透明的方式动态地给一个对象附加更多的责任</strong></p>
<ul>
<li>装饰模式可以在不需要创造更多子类的情况下，将对象的功能加以扩展</li>
</ul>
</li>
<li>
<p>装饰模式的简化：如果只有一个具体构件类而没有抽象构件类，那么抽象装饰类可以作为具体构件类的直接子类。</p>
</li>
</ul>
<h3 id="code-5"><a class="header-anchor" href="#code-5"></a>code</h3>
<p>抽象装饰类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Decorator</span> <span class="keyword">extends</span> <span class="title class_">Component</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> Component component;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Decorator</span><span class="params">(Component component)</span> </span><br><span class="line">  &#123;</span><br><span class="line">		<span class="built_in">this</span>.component=component; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> </span><br><span class="line">  &#123;</span><br><span class="line">		component.operation(); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体装饰类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteDecorator</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">ConcreteDecorator</span><span class="params">(Component component)</span> </span><br><span class="line">  &#123;</span><br><span class="line">		<span class="built_in">super</span>(component); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> </span><br><span class="line">  &#123;</span><br><span class="line">		<span class="built_in">super</span>.operation();</span><br><span class="line">		addedBehavior(); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addedBehavior</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//新增方法 </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="半透明装饰模式"><a class="header-anchor" href="#半透明装饰模式"></a>半透明装饰模式</h3>
<p>半透明(semi-transparent)的装饰模式允许用户在客户端声明具体装饰者类型的对象，调用在具体装饰者中新增的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transform camaro;</span><br><span class="line">camaro=<span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">camaro.move();<span class="comment">//这里依然属于面向抽象编程，move()是抽象的Transform类的方法</span></span><br><span class="line">Robot bumblebee=<span class="keyword">new</span> <span class="title class_">Robot</span>(camaro); bumblebee.move();</span><br><span class="line">bumblebee.say(); <span class="comment">//这里使用了具体的Robot装饰类的方法，没有面向抽象编程</span></span><br></pre></td></tr></table></figure>
<h4 id="示例-6"><a class="header-anchor" href="#示例-6"></a>示例</h4>
<p>变形金刚在变形之前是一辆汽车，它可以在陆地上移动。当它变成机器人之后除了能够在陆地上移动之<br>
外，还可以说话;如果需要，它还可以变成飞机，除了在陆地.上移动还可以在天空中飞翔。</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Decotator%20Pattern%20-semi-transparent-example.png" alt="Decotator Pattern -semi-transparent-example"></p>
<h3 id="透明装饰模式"><a class="header-anchor" href="#透明装饰模式"></a>透明装饰模式</h3>
<p>在透明装饰模式中，要求<strong>客户端完全针对抽象编程</strong>，装饰模式的透明性要求客户端程序不应该声明具体构件类型和具体装饰类型，而应该全部声明为抽象构件类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cipher sc,cc,ac;</span><br><span class="line">sc=<span class="keyword">new</span> <span class="title class_">SimpleCipher</span>(); </span><br><span class="line">cc=<span class="keyword">new</span> <span class="title class_">ComplexCipher</span>(sc); </span><br><span class="line">ac=<span class="keyword">new</span> <span class="title class_">AdvancedCipher</span>(cc);</span><br></pre></td></tr></table></figure>
<h4 id="示例-7"><a class="header-anchor" href="#示例-7"></a>示例</h4>
<p>存在多种字符串加密算法(Cipher)</p>
<ul>
<li>SImpleCipher:</li>
<li>ComplexCipher</li>
<li>AdvancedCipher</li>
</ul>
<p>用户可以只选择一种加密算法，也可以多重加密</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Decotator%20Pattern%20example.png" alt="Decotator Pattern example"></p>
<h4 id="优点-7"><a class="header-anchor" href="#优点-7"></a>优点</h4>
<ul>
<li>装饰模式与继承关系的目的都是要扩展对象的功能，但是<strong>装饰模式可以提供比继承更多的灵活性</strong>。</li>
<li>具体构件类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类，在使用时再对其进行组合，原有代码无须改变，符合“开闭原则”</li>
</ul>
<h4 id="缺点-6"><a class="header-anchor" href="#缺点-6"></a>缺点</h4>
<ul>
<li>
<p>使用装饰模式进行系统设计时<strong>将产生很多小对象</strong>，这些对象的区别在于它们之间相互连接的方式有所不同，而不是它们的类或者属性值有所不同，同时还将产生很多具体装饰类。这些装饰类和小对象的产生将增加系统的复杂度，加大学习与理解的难度。</p>
</li>
<li>
<p>这种比继承更加灵活机动的特性，也意味着<strong>装饰模式比继承更加易于出错</strong>，错误排查也比较困难</p>
</li>
</ul>
<h4 id="适用环境-3"><a class="header-anchor" href="#适用环境-3"></a>适用环境</h4>
<ul>
<li>在不影响其他对象的情况下，<strong>以动态、透明的方式给单个对象添加职责</strong></li>
<li>需要<strong>动态地给一个对象增加功能</strong>，这些功能也可以动态地被撤销</li>
<li><strong>当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时</strong>。 不能采用继承的情况主要有两类:
<ol>
<li>是系统中存在大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长;</li>
<li>类被定义为不能继承(如final类)</li>
</ol>
</li>
</ul>
<h2 id="Facade"><a class="header-anchor" href="#Facade"></a>Facade</h2>
<blockquote>
<p>外观模式(Facade Pattern):在外观模式中，外部与一个子系统的通信必须通过一个<strong>统一的外观对</strong>象进行，为子系统中的一组接口提供一组一致的更高层次的接口，使得子系统更容易使用</p>
<p>又称为门面模式</p>
<p>是一种对象结构型模式</p>
</blockquote>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Facade%20Pattern%20arch.png" alt="Facade Pattern arch"></p>
<h3 id="模式结构-8"><a class="header-anchor" href="#模式结构-8"></a>模式结构</h3>
<ul>
<li>Facade</li>
<li>SubSystem</li>
</ul>
<h3 id="模式分析-5"><a class="header-anchor" href="#模式分析-5"></a>模式分析</h3>
<ul>
<li>外观模式要求一个<u>子系统的外部与其内部的通信通过一个统一的外观对象进行</u>，外观类将客户端与子系统的内部复杂性分隔开，使得<u>client只需要与外观对象打交道，而不需要与子系统内部的很多对象打交道</u>
<ul>
<li>是“<u>迪米特法则</u>”的体现，也降低了client与子系统类的耦合</li>
<li>引入外观类可以降低系统的复杂度</li>
<li>降低了子系统间的通信和相互依赖关系</li>
</ul>
</li>
<li>提高了客户端使用的便捷性，使得客户端无须关心子系统的工作细节，通过外观角色即可调用相关功能</li>
</ul>
<h3 id="code-6"><a class="header-anchor" href="#code-6"></a>code</h3>
<p>Facade：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Facade</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">SubSystemA</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubSystemA</span>(); </span><br><span class="line">  <span class="keyword">private</span> <span class="type">SubSystemB</span> <span class="variable">obj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubSystemB</span>(); </span><br><span class="line">  <span class="keyword">private</span> <span class="type">SubSystemC</span> <span class="variable">obj3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubSystemC</span>(); </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		obj1.method(); obj2.method(); obj3.method();</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="示例-8"><a class="header-anchor" href="#示例-8"></a>示例</h3>
<p>一个电源总开关可以控制四盏灯、一个风扇、一台空调和一台电视机的启动和关闭</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Facade%20Pattern%20example.png" alt="Facade Pattern example"></p>
<h3 id="优点-8"><a class="header-anchor" href="#优点-8"></a>优点</h3>
<ul>
<li><u>对客户屏蔽子系统组件</u>，<u>减少了客户处理的对象数目并使得子系统使用起来更加容易</u></li>
<li>实现了子系统与客户之间的松耦合关系</li>
<li>降低了大型软件系统中的编译依赖性，并简化了系统在不同平台之间的移植过程
<ul>
<li>因为编译一个子系统一般不需要编译所有其他的子系统。一个子系统的修改对其他子系统没有任何影响，而且子系统内部变化也不会影响到外观对象</li>
</ul>
</li>
<li>只是提供了一个访问子系统的统一入口，并不影响用户直接使用子系统类</li>
</ul>
<h3 id="缺点-7"><a class="header-anchor" href="#缺点-7"></a>缺点</h3>
<ul>
<li><u>不能很好地限制客户使用子系统类</u>，如果对客户访问子系统类做太多的限制则减少了可变性和灵活性。</li>
<li>在不引入抽象外观类的情况下，当增加新的子系统或者移除子系统时需要修改外观类，<strong>违背了“开闭原则”</strong></li>
</ul>
<h3 id="适用环境-4"><a class="header-anchor" href="#适用环境-4"></a>适用环境</h3>
<ul>
<li>当要为一个复杂子系统提供一个简单接口时可以使用外观模式。该接口可以满足大多数用户的需求，而且<u>用户也可以越过外观类直接访问子系统</u></li>
<li><u>客户程序与多个子系统之间存在很大的依赖性</u>。引入外观类将子系统与客户以及其他子系统解耦，可以提高子系统的独立性和可移植性</li>
<li>在层次化结构中，可以使用外观模式定义系统中每一层的入口，层与层之间不直接产生联系，而通过外观类建立联系，降低层之间的耦合度</li>
</ul>
<h3 id="模式扩展-2"><a class="header-anchor" href="#模式扩展-2"></a>模式扩展</h3>
<ul>
<li><strong>不要试图通过外观类为子系统增加新行为</strong>，外观模式的用意是为子系统提供一个集中化和简化的沟通渠道，而不是向子系统加入新的行</li>
</ul>
<h2 id="Flyweight"><a class="header-anchor" href="#Flyweight"></a>Flyweight</h2>
<blockquote>
<p>享元模式： <strong>通过共享，实现大量的细粒度对象的复用</strong>，以解决对象数量太多导致的性能问题</p>
<p>是一种对象结构性模式</p>
</blockquote>
<p>分为复合享元模式和单纯享元模式</p>
<ul>
<li>单纯享元模式： 就是所有享元对象都可以共享</li>
<li>复合享元模式： 存在复合享元对象，它是单纯和不可共享享元对象的组合，本身不能被共享。 但可以被分解为单纯享元对象，和一些不可共享的享元对象</li>
<li>默认是复合享元模式</li>
</ul>
<p>复合享元模式：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Flyweight%20Pattern%20complex-arch.png" alt="Flyweight Pattern complex-arch"></p>
<h3 id="模式结构-9"><a class="header-anchor" href="#模式结构-9"></a>模式结构</h3>
<ul>
<li>Flyweight:抽象享元类： 声明一个接口，通过它可以接受并作用于外部状态</li>
<li>ConcreteFlyweight: 具体享元类</li>
<li>UnsharedConcreteFlyweight:不可共享的具体享元类</li>
<li>FlyweightFactory:享元工厂类，用于创建并管理享元对象</li>
</ul>
<h3 id="模式分析-6"><a class="header-anchor" href="#模式分析-6"></a>模式分析</h3>
<ul>
<li>享元模式是一个<u>考虑系统性能</u>的设计模式，通过使用享元模式可以节约内存空间，提高系统的性能。</li>
<li>享元模式的核心在于<strong>享元工厂类</strong>，享元工厂类的作用在于提供一个用于<strong>存储享元对象的享元池</strong>，用户需要对象时，首先从享元池中获取，如果享元池中不存在,则创建一个新的享元对象返回给用户，并在享元池中保存该新增对象。</li>
<li>享元模式以共享的方式高效地支持大量的细粒度对象</li>
<li>享元对象具有内部状态(Internal State)和外部状态(External State)
<ul>
<li>内部状态是<u>存储在享元对象内部并且不会随环境改变而改变的状态</u>，因此可以共享。</li>
<li>外部状态是<u>存储在client的，随环境改变而改变的、不可以共享的状态</u>
<ul>
<li>client在享元对象被创建之后并在需要被使用时，将外部状态传入到享元对象内部</li>
<li>外部状态间相互独立</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="code-7"><a class="header-anchor" href="#code-7"></a>code</h3>
<p>FlyweightFactory:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlyweightFactory</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//持有享元对象的序列</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">HashMap</span> <span class="variable">flyweights</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">	<span class="keyword">public</span> Flyweight <span class="title function_">getFlyweight</span><span class="params">(String key)</span> </span><br><span class="line">  &#123;</span><br><span class="line">		<span class="keyword">if</span>(flyweights.containsKey(key)) </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> (Flyweight)flyweights.get(key);</span><br><span class="line">		&#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">Flyweight</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteFlyweight</span>(); </span><br><span class="line">      flyweights.put(key,fw);</span><br><span class="line">			<span class="keyword">return</span> fw;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>Flyweight</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Flyweight</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//内部状态作为成员属性</span></span><br><span class="line">	<span class="keyword">private</span> String intrinsicState;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Flyweight</span><span class="params">(String intrinsicState)</span> </span><br><span class="line">  &#123;</span><br><span class="line">		<span class="built_in">this</span>.intrinsicState = intrinsicState; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//接受外部状态，并可能改变外部状态</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">(String extrinsicState)</span> </span><br><span class="line">  &#123;</span><br><span class="line">		...... </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="优点-9"><a class="header-anchor" href="#优点-9"></a>优点</h3>
<ul>
<li>
<p>可以极大减少内存中对象的数量，使得相同对象或相似对象在内存中只保存一份</p>
</li>
<li>
<p>外部状态相对独立，而且不会影响其内部状态，从而使得享元对象可以在不同的环境中被共享。</p>
</li>
</ul>
<h3 id="缺点-8"><a class="header-anchor" href="#缺点-8"></a>缺点</h3>
<ul>
<li>享元模式使得系统更加复杂，需要分离出内部状态和外部状态，这使得程序的逻辑复杂化。</li>
<li>为了使对象可以共享，享元模式需要将享元对象的状态外部化，而读取外部状态使得运行时间变长。</li>
</ul>
<h3 id="适用环境-5"><a class="header-anchor" href="#适用环境-5"></a>适用环境</h3>
<ul>
<li><strong>一个系统有大量相同或者相似的对象</strong>，由于这类对象的大量使用，造成内存的大量耗费。</li>
<li><strong>对象的大部分状态都可以外部化</strong>，可以将这些外部状态传入对象中。</li>
<li>使用享元模式需要维护一个存储享元对象的享元池，而这需要耗费资源，因此，<strong>在多次重复使用享元对象时才值得使用享元模式。</strong></li>
</ul>
<h3 id="模式扩展-3"><a class="header-anchor" href="#模式扩展-3"></a>模式扩展</h3>
<p>享元模式与其他模式的联用</p>
<ul>
<li>在享元模式的享元工厂类中通常提供一个静态的工厂方法用于返回享元对象，使用简单工厂模式来生成享元对象。在一个系统中，通常只有唯一一个享元工厂，因此享元工厂类可以使用单例模式进行设计。</li>
<li>享元模式可以结合组合模式形成复合享元模式，统- -对享元对象设置外部状态。</li>
</ul>
<h2 id="Proxy"><a class="header-anchor" href="#Proxy"></a>Proxy</h2>
<blockquote>
<p>代理模式(Proxy Pattern) :给某一个对象提供一个代理，并<strong>由代理对象控制对原对象的引用</strong></p>
<p>是一种对象结构型模式</p>
</blockquote>
<ul>
<li>远程代理为一个位于不同的地址空间的对象提供一个本地的代表对象，它使得客户端可以访问在远程机器上的对象，远程机器可能具有更好的计算性能与处理速度，可以快速响应并处理客户端请求。</li>
<li>如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建，这个小对象称为虚拟代理。虚拟代理通过使用一个小对象来代表一一个大对象，可以减少系统资源的消耗，对系统进行优化并提高运行速度 ---- 也就是<strong>延迟初始化</strong></li>
<li>保护代理可以控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Proxy%20Pattern%20arch.png" alt="Proxy Pattern arch"></p>
<h3 id="模式结构-10"><a class="header-anchor" href="#模式结构-10"></a>模式结构</h3>
<ul>
<li>Subject:抽象主题角色</li>
<li>Proxy:代理主题角色</li>
<li>RealSubject:真实主题角色</li>
</ul>
<p>Proxy和RealSubject都继承Subject， 使得可以面向抽象的Subject编程，而不必考虑具体的实现类是Proxy还是ReadSubject</p>
<p>Proxy持有ReadSubject对象，进行相应操作</p>
<h3 id="code-8"><a class="header-anchor" href="#code-8"></a>code</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">RealSubject</span> <span class="variable">realSubject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RealSubject</span>(); </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preRequest</span><span class="params">()</span> &#123;......&#125;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		preRequest(); </span><br><span class="line">    realSubject.request(); </span><br><span class="line">    postRequest();</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postRequest</span><span class="params">()</span> &#123;......&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="优点-10"><a class="header-anchor" href="#优点-10"></a>优点</h3>
<ul>
<li>代理模式能够协调调用者和被调用者，在一定程度上降低了系统的耦合度。</li>
<li><strong>远程代理</strong>使得客户端可以访问在远程机器.上的对象，远程机器可能具有更好的计算性能与处理速度，可以快速响应并处理客户端请求。</li>
<li><strong>虚拟代理</strong>通过使用一个小对象来代表一-个大对象，可以减少系统资源的消耗，对系统进行优化并提高运行速度。</li>
<li><strong>保护代理可以控制对真实对象的使用权限</strong></li>
</ul>
<h3 id="缺点-9"><a class="header-anchor" href="#缺点-9"></a>缺点</h3>
<ul>
<li>慢</li>
<li>复杂度高</li>
</ul>
<h3 id="模式细分"><a class="header-anchor" href="#模式细分"></a>模式细分</h3>
<p>根据代理模式的使用目的，常见的代理模式有以下几种类型:</p>
<ul>
<li>远程(Remote)代理: 为一个位于不同的地址空间的对象提供一个 本地的代理，对象，这个不同的地址空间可以是在同一台主机中，也可以在另一台主机中，远程代理又叫做大使(Ambassador)</li>
<li>虚拟(Virtual)代理:如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建
<ul>
<li>使用示例： 大图浏览的控制
<ol>
<li>用户通过浏览器访问网页时先<strong>不加载真实的大图</strong>，而是通过代理对象的方法来进行处理</li>
<li>在代理对象的方法中，<strong>先使用一个线程向客户端浏览器加载一个小图片</strong>，然后在后台<strong>使用另一个线程来调用大图片的加载方法将大图片加载到客户端</strong>。 当需要浏览大图片时，再将大图片在新网页中显示。</li>
<li>如果用户在浏览大图时加载工作还没有完成，可以再启动一个线程来显示相应的提示信息。通过代理技术结合多线程编程将真实图片的加载放到后台来操作，不影响前台图片的浏览</li>
</ol>
</li>
</ul>
</li>
<li>Copy- on-Write代理: 是虚拟代理的一种，把复制(克隆)操作延迟到只有在客户端真正需要时才执行。一般来说，对象的深克隆是一个开销较大的操作，Copy-on-Write代理可以让这个操作延迟，只有对象被用到的时候才被克隆</li>
<li>保护(Protect or Access)代理: 给不同用户提供不同的使用权限，来控制对对象的访问</li>
<li>缓冲(Cache)代理: 为数据提供临时的存储空间，以便多个客户端可以共享数据。</li>
<li>防火墙(Firewall)代理: 保护对象不被恶意攻击</li>
<li>智能引用(Smart Reference)代理: 相当于智能指针，当一个对象被引用时，智能引用代理会进行一些额外的操作，比如，记录下此对象被调用的次数</li>
</ul>
<h1 id="Behavioral-Patterns"><a class="header-anchor" href="#Behavioral-Patterns"></a>Behavioral Patterns</h1>
<h2 id="Strategy"><a class="header-anchor" href="#Strategy"></a>Strategy</h2>
<blockquote>
<p>策略模式： 定义一系列可替换的算法，由client决定使用哪个</p>
</blockquote>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Strategy%20Pattern%20arch.png" alt="Strategy Pattern arch"></p>
<h3 id="模式结构-11"><a class="header-anchor" href="#模式结构-11"></a>模式结构</h3>
<ul>
<li>上下文（Context ) ： 拥有Strategy对象的一个引用； 被配置了具体策略 ConcreteStrategy</li>
<li>策略（Strategy）: 声明了所支持策略的接口。 Context利用这些被ConcreteStrategy定义的接口</li>
<li>具体策略（ConcreteStrategy）: 实现了Strategy声明 的接口，给出了具体的实现</li>
</ul>
<p>模式逻辑：</p>
<ul>
<li>上下文<code>Context</code>和<code>Strategy</code>的相互协作完成整个算法。 <code>Context</code>可能会通过提供方法让<code>Strategy</code>访问其数据；甚 至将自身的引用传给<code>Strategy</code>，供其访问其数据。 <code>Strategy</code>会在需要的时候访问<code>Context</code>的成员变量。</li>
<li>上下文<code>Context</code>将一些对他的请求转发给策略类来实现 ，客户（<code>Client</code>）通常创建<code>ConcreteStrategy</code>的对象，然 后传递给C<code>ontext</code>来灵活配置<code>Strategy</code>接口的具体实现； 这样<code>Client</code>就有可以拥有一个<code>Strategy</code>接口的策略族，其 中包含多种<code>ConcreteStrategy</code>的实现</li>
</ul>
<h3 id="适用环境-6"><a class="header-anchor" href="#适用环境-6"></a>适用环境</h3>
<ul>
<li>当很多相关类<u>只在它们的行为的实现上不一样</u></li>
<li>当我们需要<u>同一个行为的不同实现</u>（变体）的时候</li>
<li>算法需要用到一些数据，而这些数据不应该被客户知道。我们可以通过策略模式隐藏复杂的算法和数据接口。</li>
<li>一个类定义了很多行为，这些行为作为一个<code>switch</code>选择语句的分支执行部分。策略模式可以消除这些分支选择</li>
</ul>
<h3 id="模式扩展-4"><a class="header-anchor" href="#模式扩展-4"></a>模式扩展</h3>
<ul>
<li><code>Strategy</code>可以是接口，也可以是类。如果是类，则可以抽象所有具体算法中公共的实现部分。</li>
<li>当然，我们也可以直接通过Context的子类来实现不同的 Context实现。不过这样算法的具体实现，就和算法的利用的 实现项目交织在一起，不利于理解和维护.</li>
<li>策略模式消除了类似根据策略类型的Switch语句。</li>
<li>可以动态选择不同的策略
<ul>
<li>这需要客户必须提前知晓不同的策略</li>
</ul>
</li>
<li>Context和Strategy之间的通信有代价</li>
<li>策略模式会创建出较多的对象</li>
</ul>
<h2 id="Command"><a class="header-anchor" href="#Command"></a>Command</h2>
<blockquote>
<p>命令模式(Command Pattern): 将一个请求封装为一个对象,从而可在请求client时传递参数; 对请求排队或者记录请求日志,以及支持可撤销的操作。</p>
<p>是一种对象行为型模式, aka动作(Action)模式或事务(Transaction)模式</p>
</blockquote>
<p>client持有reciever和 invoker， 通过将receiver传给ConcreteCommand来构造command， 然后把command传给invoker， client只要调用<code>invoker</code>的<code>invoke（）</code></p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/command%20pattern.png" alt="image-20220308152816123"></p>
<h3 id="模式结构-12"><a class="header-anchor" href="#模式结构-12"></a>模式结构</h3>
<ul>
<li>命令模式包含如下角色:</li>
<li>Command: 抽象命令类</li>
<li>ConcreteCommand: 具体命令类</li>
<li>Invoker:  调用者</li>
<li>Receiver:  接收者</li>
<li>Client: 客户类</li>
</ul>
<h3 id="模式分析-7"><a class="header-anchor" href="#模式分析-7"></a>模式分析</h3>
<ul>
<li>命令模式的本质是对命令进行封装，<strong>将发出命令的责任和执行命令的责任分开</strong>
<ul>
<li>client负责发出命令。 client持有receiver和invoker，用receiver构造ConcreteCommand， 将command传给invoker，调用<code>invoker.invoke()</code>，发出命令</li>
<li>invoke负责执行命令。 invoker对象持有了command对象， command对象已经被注入了receiver对象。由 invoker执行command</li>
</ul>
</li>
<li>每一个命令都是一个操作:请求的一方发出请求，要求执行一个操作; 接收的一方收到请求，并执行操作
<ul>
<li>Receiver有<code>doSomething()</code>方法，在<code>command.exeute()</code>中调用</li>
</ul>
</li>
<li>命令模式<strong>使请求本身成为一个对象</strong>，这个对象和其他对象一样可以被存储和传递
<ul>
<li>通过引入抽象命令接口（<code>Command</code>），且client针对<code>Command</code>接口编程</li>
</ul>
</li>
<li>命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口、请如何接收、操作是否被执行、何时被执行、怎么被执行的 等问题</li>
</ul>
<h3 id="code-9"><a class="header-anchor" href="#code-9"></a>code</h3>
<p>通用Receiver类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Receiver</span> &#123; </span><br><span class="line">    <span class="comment">//抽象接收者，定义每个接收者都必须完成的业务 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>具体的Receiver类ConcreteReciver1、ConcreteReciver2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteReciver1</span> <span class="keyword">extends</span> <span class="title class_">Receiver</span>&#123; </span><br><span class="line">    <span class="comment">//每个接收者都必须处理一定的业务逻辑 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>&#123; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteReciver2</span> <span class="keyword">extends</span> <span class="title class_">Receiver</span>&#123; </span><br><span class="line">    <span class="comment">//每个接收者都必须处理一定的业务逻辑 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span>&#123; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>抽象的Command类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Command</span> &#123; </span><br><span class="line">    <span class="comment">//每个命令类都必须有一个执行命令的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用者Invoker类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Invoker</span> &#123; </span><br><span class="line">    <span class="keyword">private</span> Command command; </span><br><span class="line">    <span class="comment">//受气包，接受命令 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommand</span><span class="params">(Command _command)</span>&#123; </span><br><span class="line">        <span class="built_in">this</span>.command = _command; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行命令 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">()</span>&#123; </span><br><span class="line">      </span><br><span class="line">        <span class="built_in">this</span>.command.execute(); </span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体的Command类ConcreteCommand1、ConcreteCommand2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteCommand1</span> <span class="keyword">extends</span> <span class="title class_">Command</span> &#123; </span><br><span class="line">    <span class="comment">//进行命令处理的Receiver</span></span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//通过构造函数来注入receiver</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteCommand1</span><span class="params">(Receiver _receiver)</span>&#123; </span><br><span class="line">        <span class="built_in">this</span>.receiver = _receiver; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//必须实现一个命令 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="comment">//业务处理 </span></span><br><span class="line">        <span class="built_in">this</span>.receiver.doSomething(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteCommand2</span> <span class="keyword">extends</span> <span class="title class_">Command</span> &#123; </span><br><span class="line">    <span class="comment">//进行命令处理的Receiver</span></span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//通过构造函数来注入receiver</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteCommand2</span><span class="params">(Receiver _receiver)</span>&#123; </span><br><span class="line">        <span class="built_in">this</span>.receiver = _receiver; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//必须实现一个命令 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="comment">//业务处理 </span></span><br><span class="line">        <span class="built_in">this</span>.receiver.doSomething(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Client：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123; </span><br><span class="line">        <span class="comment">//首先声明调用者Invoker </span></span><br><span class="line">        <span class="type">Invoker</span> <span class="variable">invoker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Invoker</span>(); </span><br><span class="line">        <span class="comment">//定义接收者 </span></span><br><span class="line">        <span class="type">Receiver</span> <span class="variable">receiver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteReciver1</span>(); </span><br><span class="line">        <span class="comment">//定义一个发送给接收者的命令 </span></span><br><span class="line">        <span class="type">Command</span> <span class="variable">command</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteCommand1</span>(receiver); </span><br><span class="line">        <span class="comment">//把命令交给调用者去执行 </span></span><br><span class="line">        invoker.setCommand(command); </span><br><span class="line">        invoker.invoke(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="示例-9"><a class="header-anchor" href="#示例-9"></a>示例</h3>
<p>遥控器（<code>Controller</code>）是client， 电视机（<code>Television</code>）是接收者，有三个具体命令类</p>
<ul>
<li>这个示例是简化版的命令模式，没有invoker，也没有动态注入Receiver</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Command%20example.png" alt="Command example"></p>
<h3 id="优点-11"><a class="header-anchor" href="#优点-11"></a>优点</h3>
<p>命令模式的优点</p>
<ul>
<li>降低系统耦合度</li>
<li>可扩展性强，很容易加入新的命令类</li>
<li>可以比较容易地设计命令队列和宏命令（组合命令）</li>
<li>可以方便地实现请求的Undo和Redo</li>
</ul>
<h3 id="缺点-10"><a class="header-anchor" href="#缺点-10"></a>缺点</h3>
<ul>
<li>可能导致系统具有过多的命令类</li>
</ul>
<h3 id="适用环境-7"><a class="header-anchor" href="#适用环境-7"></a>适用环境</h3>
<ul>
<li>系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互</li>
<li>系统需要在不同的时间指定请求、将请求排队和执行请求</li>
<li>系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作</li>
<li>系统需要将一 组操作组合在一起，即支持宏命令</li>
</ul>
<p>Unix的SHell编程的宏命令功能，可以将多条命令封装在一个命令对象中，这使用了命令模式</p>
<h2 id="State"><a class="header-anchor" href="#State"></a>State</h2>
<blockquote>
<p>状态模式(State Pattern) :允许一个对象在其内部状态改变时改变它的行为,对象看起来似乎修改了它的类。其别名为状态对象(Objects for States), 状态模式是一种<strong>对象行为型模式</strong></p>
</blockquote>
<p>状态模式描述了对象状态的变化以及对象如何在每一种状态下表现出不同的行为。</p>
<p>状态模式的关键是引入了一个<strong>抽象类</strong>来专门表示对象的状态,这个类我们叫做抽象状态类,而对象的每一种具体状态类都继承了该类,并在不同具体状态类中实现了不同状态的行为,包括各种状态之间的转换。</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/state%20pattern.png" alt="image-20220308143955436"></p>
<p>结构：</p>
<ul>
<li>Context 环境类： 是拥有状态的对象。 有时候可以充当状态管理器(State Manager)的角色,可以在环境类中对状态进行切换操作</li>
<li>State 抽象状态类（也可以是接口） : 可以将不同对象下的行为单独提取出来封装在具体的状态类中,使得环境类对象在其内部状态改变时可以改变它的行为,对象看起来似乎修改了它的类,而实际上是由于切换到不同的具体状态类实现的。</li>
<li>ConcreteState: 具体状态类</li>
</ul>
<h3 id="示例-10"><a class="header-anchor" href="#示例-10"></a>示例</h3>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/state%20pattern%20room.png" alt="image-20220308144112980"></p>
<h3 id="缺点-11"><a class="header-anchor" href="#缺点-11"></a>缺点</h3>
<ul>
<li>状态模式的使用必然会增加系统类和对象的个数。</li>
<li>状态模式的结构与实现都较为复杂,如果使用不当将导致程序结构和代码的混乱。</li>
<li>状态模式对“<strong>开闭原则</strong>”的支持并不太好,对于可以切换状态的状态模式,增加新的状态类需要修改那些负责状态转换的源代码,否则无法切换到新增状态;而且修改某个状态类的行为也需修改对应类的源代码。</li>
</ul>
<h2 id="Observer"><a class="header-anchor" href="#Observer"></a>Observer</h2>
<blockquote>
<p>观察者模式(Observer Pattern): 通过建立对象间的一对多依赖关系, 使得每当一个对象状态发生改变时,其相关依赖对象皆得到通知并被自动更新</p>
<p>又叫做发布-订阅(Publish/Subscribe)模式、模型-视图(Model/View)模式、源-监听器(Source/Listener)模式或从属者(Dependents)模式</p>
<p>是一种<strong>对象行为型模式</strong></p>
</blockquote>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/observer%20pattern.png" alt="image-20220315142422314"></p>
<h3 id="模式结构-13"><a class="header-anchor" href="#模式结构-13"></a>模式结构</h3>
<ul>
<li>Subject: 目标</li>
<li>ConcreteSubject:具体目标</li>
<li>Observer:观察者</li>
<li>ConcreteObserver: 具体观察者</li>
</ul>
<h3 id="code-10"><a class="header-anchor" href="#code-10"></a>code</h3>
<p>抽象目标类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Subject</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">protected</span> <span class="type">ArrayList</span> <span class="variable">observers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(Observer observer)</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">(Observer observer)</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体目标类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title class_">Subject</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(Observer observer)</span></span><br><span class="line">	&#123;</span><br><span class="line">		observers.add(observer);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">(Observer observer)</span></span><br><span class="line">	&#123;</span><br><span class="line">		observers.remove(observer);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(Object obs:observers)</span><br><span class="line">		&#123;</span><br><span class="line">			((Observer)obs).update();</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>抽象观察者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Observer</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体观察者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title class_">Observer</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//具体更新代码</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>client代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteSubject</span>();</span><br><span class="line"><span class="type">Observer</span> <span class="variable">observer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteObserver</span>();</span><br><span class="line">subject.attach(observer);</span><br><span class="line">subject.notify();</span><br></pre></td></tr></table></figure>
<h3 id="示例-11"><a class="header-anchor" href="#示例-11"></a>示例</h3>
<p>猫是老鼠和狗的观察目标，老鼠和狗是观察者，猫叫，则老鼠跑，狗也跟着叫</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/observer%20example.png" alt="observer example"></p>
<h3 id="优点-12"><a class="header-anchor" href="#优点-12"></a>优点</h3>
<p>优点：</p>
<ul>
<li>实现了表示层和数据逻辑层的分离</li>
<li>实现了Observer和Subject的解耦</li>
<li>支持广播通信</li>
<li>符合“开闭原则”</li>
</ul>
<h3 id="缺点-12"><a class="header-anchor" href="#缺点-12"></a>缺点</h3>
<ul>
<li>通知到所有直接和间接的Observer，耗时较大</li>
<li>Observer和Subject可能发生循环依赖</li>
</ul>
<h2 id="Mediator"><a class="header-anchor" href="#Mediator"></a>Mediator</h2>
<blockquote>
<p>中介者模式(Mediator Pattern): 用一个中介对象来封装一系列的对象交互,中介者使各对象不需要显式地相互引用,从而<strong>使其松耦合</strong>,而且可以独立地改变它们之间的交互</p>
<p>又称为调停者模式</p>
<p>是一种对象行为型模式</p>
</blockquote>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/medicator%20pattern" alt="image-20220315161423254"></p>
<h3 id="模式结构-14"><a class="header-anchor" href="#模式结构-14"></a>模式结构</h3>
<ul>
<li>Medicator</li>
<li>ConcreteMedicator</li>
<li>Colleague</li>
<li>ConcreteColleague</li>
</ul>
<h3 id="code-11"><a class="header-anchor" href="#code-11"></a>code</h3>
<p>抽象中介者类代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Mediator</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">protected</span> ArrayList colleagues;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Colleague colleague)</span></span><br><span class="line">	&#123;</span><br><span class="line">		colleagues.add(colleague);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体中介者类代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title class_">Mediator</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		......</span><br><span class="line">		((Colleague)(colleagues.get(<span class="number">0</span>))).method1();</span><br><span class="line">		......</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>抽象同事类代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Colleague</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">protected</span> Mediator mediator;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Colleague</span><span class="params">(Mediator mediator)</span></span><br><span class="line">	&#123;	</span><br><span class="line">		<span class="built_in">this</span>.mediator=mediator;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteColleague</span> <span class="keyword">extends</span> <span class="title class_">Colleague</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">ConcreteColleague</span><span class="params">(Mediator mediator)</span></span><br><span class="line">	&#123;</span><br><span class="line">        <span class="built_in">super</span>(mediator);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		......</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">   	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		mediator.operation1();</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="优点-13"><a class="header-anchor" href="#优点-13"></a>优点</h3>
<p>中介者模式可以使对象之间的关系数量大大减少：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/medicator%20pattern%20advantage.png" alt="image-20220315161530458"></p>
<h3 id="缺点-13"><a class="header-anchor" href="#缺点-13"></a>缺点</h3>
<ul>
<li>具体中介者类可能会非常复杂，事实上这就是一个God Class</li>
</ul>
<h2 id="Template-Method"><a class="header-anchor" href="#Template-Method"></a>Template Method</h2>
<blockquote>
<p>模板方法模式：定义一个操作中<strong>算法的骨架</strong>,而将一些步骤<strong>延迟到子类中</strong>,模板方法使得子类可以<strong>不改变一个算法的结构即可重定义该算法的某些特定步骤</strong></p>
<p>是一种类行为型模式</p>
</blockquote>
<ul>
<li>
<p>模板方法模式是<strong>基于继承</strong>的代码复用基本技术</p>
<ul>
<li>只有继承，没有关联</li>
</ul>
</li>
<li>
<p>在模板方法模式中,可以<strong>将相同的代码放在父类中,而将不同的方法实现放在不同的子类中</strong></p>
<ul>
<li>具体子类的基本方法将覆盖父类中定义的基本方法, 子类的钩子方法也将覆盖父类的钩子方法, 从而可以通过在子类中实现的钩子方法对父类方法的执行进行约束, 实现子类对父类行为的<strong>反向控制</strong></li>
</ul>
</li>
<li>
<p>模板方法模式包含两个角色:</p>
<ul>
<li><strong>模板方法</strong>： 定义在抽象类中，是一系列基本方法的组合</li>
<li><strong>基本方法</strong>： 实现算法某个具体步骤， 可分为：
<ul>
<li>抽象方法</li>
<li>具体方法</li>
<li>钩子方法</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Template%20Method%20Pattern.png" alt="Template Method Pattern"></p>
<h3 id="模式结构-15"><a class="header-anchor" href="#模式结构-15"></a>模式结构</h3>
<ul>
<li>AbstractClass</li>
<li>ConcreteClass</li>
</ul>
<h3 id="code-12"><a class="header-anchor" href="#code-12"></a>code</h3>
<p>钩子方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">template</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	open();</span><br><span class="line">	display();</span><br><span class="line">	<span class="keyword">if</span>(isPrint())<span class="comment">//根据钩子方法的返回值来执行逻辑</span></span><br><span class="line">	&#123;</span><br><span class="line">		print();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不同的子类可以自定义这个函数的返回值，从而实现对template方法的反向控制</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPrint</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>抽象类代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">templateMethod</span><span class="params">()</span> <span class="comment">//模板方法，是一系列基本方法的组合</span></span><br><span class="line">	&#123;</span><br><span class="line">		primitiveOperation1();</span><br><span class="line">		primitiveOperation2();</span><br><span class="line">		primitiveOperation3();</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">primitiveOperation1</span><span class="params">()</span> <span class="comment">//基本方法—具体方法</span></span><br><span class="line">	&#123;</span><br><span class="line">	<span class="comment">//实现代码</span></span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">primitiveOperation2</span><span class="params">()</span>; <span class="comment">//基本方法—抽象方法，在子类中实现</span></span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">primitiveOperation3</span><span class="params">()</span> <span class="comment">//基本方法—钩子方法，由子类来定义其逻辑</span></span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子类代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractClass</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">primitiveOperation2</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//实现代码</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">primitiveOperation3</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//实现代码</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="示例-12"><a class="header-anchor" href="#示例-12"></a>示例</h3>
<p>在银行办理业务( <code>process()</code> )时，一般都包含几个基本步骤：</p>
<ol>
<li>首先需要取号排队: <code>takeNumber()</code></li>
<li>然后办理具体业务：<code>transact()</code></li>
<li>最后需要对银行工作人员进行评分<code>evaluate()</code></li>
</ol>
<p>无论具体业务是取款、存款还是转账，其基本流程都一样, 因此模板方法是<code>process()</code>，基本方法是<code>takeNumber() + transact() + evaluate()</code></p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Template%20Method%20Pattern%20example.png" alt="Template Method Pattern example"></p>
<h3 id="优点-14"><a class="header-anchor" href="#优点-14"></a>优点</h3>
<ul>
<li>
<p>模板方法模式<strong>在一个类中抽象地定义算法，而由它的子类实现细节的处理</strong></p>
</li>
<li>
<p>代码复用</p>
</li>
<li>
<p>模板方法模式可以实现<strong>反向控制</strong></p>
<ul>
<li>通过钩子方法</li>
</ul>
</li>
<li>
<p>通过对修改子类来修改行为，符合“开闭原则”</p>
</li>
</ul>
<h3 id="缺点-14"><a class="header-anchor" href="#缺点-14"></a>缺点</h3>
<ul>
<li>每个不同的实现都需要定义一个子类，这会导致<strong>类的个数增加</strong>，系统更加庞大，设计也更加抽象
<ul>
<li>但是也更加符合“单一职责原则”，类的内聚性更高</li>
</ul>
</li>
</ul>
<h3 id="好莱坞原则"><a class="header-anchor" href="#好莱坞原则"></a>好莱坞原则</h3>
<p><em>“不要给我们打电话， 我们会给你打电话(Don 't call us, we’11 call you)</em></p>
<ul>
<li>
<p>好莱坞原则(Hollywood Principle)： 子类不显式调用父类的方法，而是通过覆盖父类的方法来实现某些具体的业务逻辑，<strong>父类控制对子类的调用</strong></p>
</li>
<li>
<p>在模板方法模式中，好莱坞原则体现在:通过父类来调用子类， 子类不需要调用父类。 将某些步骤的实现写在子类中，由父类来控制整个过程</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
  </entry>
  <entry>
    <title>Docker Stack</title>
    <url>/2022/03/25/Docker-Stack/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Basic Idea</li>
<li>Commands</li>
<li>docker-stack.yml</li>
</ul>
<p>Docker Stack是Docker Compose的进化版,  是Docker原生的部署和管理多服务应用的方案, 默认集成在Docker引擎中, 且提供了简单的声明式接口对应用进行部署和全生命周期管理</p>
<span id="more"></span>
<h1 id="Basic-Idea"><a class="header-anchor" href="#Basic-Idea"></a>Basic  Idea</h1>
<p>虽然是Docker Compose的进化版, 但是Stack是Docker原生的, 和Swarm一样</p>
<ul>
<li>事实上, Docker Stack依赖于Docker Swarm, Stack将被部署到Swarm上</li>
</ul>
<p>对应用的任何变更都应该通过Stack文件进行声明, 然后用<code>docker stack deploy</code>部署</p>
<ul>
<li>Stack文件是Stack的配置的唯一声明, 所有Stack相关的改动都要体现在Stack文件中</li>
<li>不要用命令来修改</li>
</ul>
<p>Docker Stack<strong>不支持build</strong>, 意味着在部署Stack之前, 所有镜像必须提前build, 这一点不同于Docker Compose</p>
<p>具体细节就不赘述了, 用的时候再查</p>
<h1 id="Commands"><a class="header-anchor" href="#Commands"></a>Commands</h1>
<h2 id="部署"><a class="header-anchor" href="#部署"></a>部署</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stack deploy</span><br></pre></td></tr></table></figure>
<h2 id="列出Stack"><a class="header-anchor" href="#列出Stack"></a>列出Stack</h2>
<p>列出Swarm集群的全部Stack:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stack ls</span><br></pre></td></tr></table></figure>
<h2 id="查看Stack详情"><a class="header-anchor" href="#查看Stack详情"></a>查看Stack详情</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stack ps &lt;stack&gt;</span><br></pre></td></tr></table></figure>
<h2 id="删除Stack"><a class="header-anchor" href="#删除Stack"></a>删除Stack</h2>
<p>从Swarm中移除Stack</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stack rm &lt;stack&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>只会删除网络和服务, 不会删除密钥和卷</li>
</ul>
<h1 id="docker-stack-yml"><a class="header-anchor" href="#docker-stack-yml"></a>docker-stack.yml</h1>
<p>Docker Stack根据Stack文件部署应用, 也就是<code>docker-stack.yml</code></p>
<p><code>docker-stack.yml</code>就是<code>docker-compose.yml</code>,  唯一的区别就是Docker Stack文件的<code>version</code>要大于3.0</p>
<ul>
<li>二者文件格式相同</li>
</ul>
<p><a href="https://github.com/dockersamples/atsea-sample-shop-apps">项目地址</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">reverse_proxy:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dockersamples/atseasampleshopapp_reverse_proxy</span> <span class="comment"># 唯一的必填项,指定镜像</span></span><br><span class="line">    <span class="attr">ports:</span> <span class="comment"># 指定端口映射</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;443:443&quot;</span></span><br><span class="line">    <span class="attr">secrets:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">revprox_cert</span> <span class="comment"># 定义了两个密钥,不同于网络, 密钥必须在顶级关键字secrets下定义, 且必须在系统上已存在</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">revprox_cert</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">revprox_key</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">revprox_key</span></span><br><span class="line">    <span class="attr">networks:</span> <span class="comment"># 该网络要么已经存在，要么在networks一级key中指定, 后者会让Docker创建该网络</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">front-tier</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">database:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dockersamples/atsea_db</span></span><br><span class="line">    <span class="attr">environment:</span> <span class="comment"># 向容器中注入环境变量, 一般都将它们以密钥形式传递</span></span><br><span class="line">      <span class="attr">POSTGRES_USER:</span> <span class="string">gordonuser</span></span><br><span class="line">      <span class="attr">POSTGRES_DB_PASSWORD_FILE:</span> <span class="string">/run/secrets/postgres_password</span></span><br><span class="line">      <span class="attr">POSTGRES_DB:</span> <span class="string">atsea</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">back-tier</span></span><br><span class="line">    <span class="attr">secrets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres_password</span></span><br><span class="line">    <span class="attr">deploy:</span> <span class="comment"># 定义服务约束</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;node.role == worker&#x27;</span> <span class="comment"># 当前服务只会运行在Swarm的worker上</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">appserver:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dockersamples/atsea_app</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">front-tier</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">back-tier</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">payment</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">2</span> <span class="comment"># 含义同docker swarm</span></span><br><span class="line">      <span class="attr">update_config:</span></span><br><span class="line">        <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">failure_action:</span> <span class="string">rollback</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;node.role == worker&#x27;</span></span><br><span class="line">      <span class="attr">restart_policy:</span> <span class="comment"># 定义了Swarm针对容器异常退出的重启策略</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure#</span> <span class="comment"># 如果容器以failure退出, 会立即重启当前容器,重启最多重试三次, </span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">5s</span>                        <span class="comment"># 每次都会等待120s来检测是否启动成功, 每次重启间隔5s</span></span><br><span class="line">        <span class="attr">max_attempts:</span> <span class="number">3</span></span><br><span class="line">        <span class="attr">window:</span> <span class="string">120s</span>  </span><br><span class="line">    <span class="attr">secrets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">postgres_password</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">visualizer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dockersamples/visualizer:stable</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8001:8080&quot;</span></span><br><span class="line">    <span class="attr">stop_grace_period:</span> <span class="string">1m30s</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">update_config:</span></span><br><span class="line">        <span class="attr">failure_action:</span> <span class="string">rollback</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;node.role == manager&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">payment_gateway:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dockersamples/atseasampleshopapp_payment_gateway</span></span><br><span class="line">    <span class="attr">secrets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">source:</span> <span class="string">staging_token</span></span><br><span class="line">        <span class="attr">target:</span> <span class="string">payment_token</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">payment</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">update_config:</span></span><br><span class="line">        <span class="attr">failure_action:</span> <span class="string">rollback</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;node.role == worker&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;node.labels.pcidss == yes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">front-tier:</span></span><br><span class="line">  <span class="attr">back-tier:</span></span><br><span class="line">  <span class="string">payment:`</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">overlay</span></span><br><span class="line">    <span class="attr">driver_opts:</span></span><br><span class="line">      <span class="attr">encrypted:</span> <span class="string">&#x27;yes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">secrets:</span></span><br><span class="line">  <span class="attr">postgres_password:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span> <span class="comment"># 指定在Stack部署之前, 该密钥必须存在</span></span><br><span class="line">  <span class="attr">staging_token:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">revprox_key:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">revprox_cert:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="关键字"><a class="header-anchor" href="#关键字"></a>关键字</h2>
<p>顶级关键字:</p>
<ul>
<li><code>version</code>: 代表Compose文件格式的版本号.  要应用于Stack, 需要  &gt; 3.0</li>
<li><code>services</code></li>
<li><code>networks</code>: 默认用<code>overlay</code>网络, 因为是Swarm模式</li>
<li><code>secrets</code>:
<ul>
<li><code>external</code>: 在Stack部署之前, 该密钥必须存在</li>
</ul>
</li>
</ul>
<h2 id="网络"><a class="header-anchor" href="#网络"></a>网络</h2>
<p>Docker Stack首先会检查并创建<code>networks</code>,  因为服务依赖于网络</p>
<p>默认情况下, overlay网络的控制层是加密的, 如果要加密数据层, 需要在Stack文件中<code>driver_opts</code>下指定<code>encrypted: 'yes'</code></p>
<h2 id="服务"><a class="header-anchor" href="#服务"></a>服务</h2>
<p>服务只有一个必填的下级关键字<code>image</code>, 指定构建服务副本所需的镜像</p>
<p>其余下级关键字:</p>
<ul>
<li><code>Docker</code>: 指定Docker Registry, 默认是Docker Hub</li>
<li><code>ports</code>: 定义端口映射, 注意由于是Swarm模式, 默认网络是Ingress模式, <code>port</code>项可以简写, 如果指定用Host模式, 则<code>port</code>项要写完整格式</li>
<li><code>secrets</code>: 定义了密钥, 不同于网络, 密钥必须已经在顶级关键字secrets下定义, 且必须在系统上已存在</li>
<li><code> envirenment</code>: 向容器中注入环境变量, 一般都将它们以密钥形式传递</li>
<li><code>deploy</code>: 定义部署约束, 比如节点ID, 节点名称, 节点角色, 还有更新约束等待
<ul>
<li>更新约束就是<code>docker service uodate </code>的那些参数, <code>replicas</code>之类</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Swarm</title>
    <url>/2022/03/25/Docker-Swarm/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Basic Idea</li>
<li>Commands</li>
<li>Swarm Service</li>
<li>Swarm Lock</li>
</ul>
<span id="more"></span>
<h1 id="Preface"><a class="header-anchor" href="#Preface"></a>Preface</h1>
<p>Docker Swarm是一个Docker容器集群编排方案, 同类型的还有K8S, 简而言之, K8S &gt; Docker Swarm. 尽管如此, 但Docker Swarm由Docker原生支持, 而且比K8S简单, 学习它可以初步了解一下容器编排., 可以当作K8S的简易入门.</p>
<ul>
<li>也就是说Docker Swarm就是个玩具...</li>
</ul>
<p>本章需要结合<em>Docker Network</em>理解</p>
<p>使用Swarm, 需要打开Swarm所需端口：</p>
<ul>
<li><code>TCP/2377</code>： Swarm的集群管理默认使用2377端口</li>
<li><code>TCP/7946</code>, <code>UDP/7946</code>: Swarm的节点发现使用7946端口</li>
</ul>
<h1 id="Basic-Idea"><a class="header-anchor" href="#Basic-Idea"></a>Basic Idea</h1>
<p>Docker Swarm由Docker原生支持, 能够创建Dokcer容器集, 并进行编排</p>
<h2 id="node"><a class="header-anchor" href="#node"></a>node</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Docker%20Swarm/Docker%20Swarm%20Arch.png" alt="Docker Swarm Arch"></p>
<p>node: 一个集群( Swarm )由多个node组成, 一个node就是一台docker主机. node分为Manager和worker</p>
<ul>
<li>Manager:  负责集群的控制面板( Control Plane ),  Manager</li>
<li>Worker</li>
</ul>
<p>Swarm node采取主从方式, 有多个Manager,  但同一时刻有且仅有一个Manager处于Active, 处于Active的Manager称为<code>leader</code>, 其余Manager称为<code>follower</code></p>
<ul>
<li><code>leader</code>是唯一一个对Swarm进行控制的节点, 如果<code>follower</code>接收到了Swarm命令, 它会将其转发到主节点</li>
<li><code>leader</code>, <code>follower</code>是Raft的术语, Swarm采用了Raft共识算法</li>
</ul>
<h2 id="Raft"><a class="header-anchor" href="#Raft"></a>Raft</h2>
<p>Docker Swarm采用了Raft共识算法, 以下是两个原则:</p>
<ul>
<li>部署奇数个Manager. 如果Manager之间分区, 掌握多数Manager的分区就会对Swarm进行管理; 反之,如果偶数个分区,会出现Manager数量相同的情况,无法进行决策,称为Split-Brain</li>
<li>Manager数量控制在3~5个. 更多的Manager意味着要花更长的时间达成共识</li>
<li>Manager可以进行分区, 但是各分区之间的网络一定要确保畅通</li>
</ul>
<h2 id="service"><a class="header-anchor" href="#service"></a>service</h2>
<p>Docker Swarm的最小调度单元是服务, 也就是Docker Compose里定义的&quot;服务&quot;</p>
<ul>
<li>服务就是容器的组合, 而且提供了一些高级特性, 比如一些配置文件</li>
</ul>
<h2 id="etcd"><a class="header-anchor" href="#etcd"></a>etcd</h2>
<p>etcd( European Toiletries and Cosmetics Database) :   a distributed, consistent <strong>key-value</strong> store for <strong>shared configuration</strong> and <strong>service discovery</strong>,  许多分布式系统都采用了etcd, 包括K8S和Docker Swarm</p>
<ul>
<li>
<p>etcd位于所有管理节点上, 保存了Swarm的配置和状态</p>
</li>
<li>
<p>etcd运行在内存, 并保持数据的最新状态</p>
</li>
</ul>
<h2 id="token"><a class="header-anchor" href="#token"></a>token</h2>
<p>任何node加入Swarm的唯一凭证就是准入令牌<code>&lt;token&gt;</code></p>
<p>token的格式为:  <code>PREFIX - VERSION - SWARM ID - TOKEN</code></p>
<ul>
<li>
<p><code>PREFIX</code>: 永远是<code>SWMTKN</code></p>
</li>
<li>
<p><code>VERSION</code>: Swarm的版本</p>
</li>
<li>
<p><code>SWARM ID</code>: Swarm认证信息的哈希值</p>
</li>
<li>
<p><code>TOKEN</code>: 其内容决定了该令牌是Manager还是worker的准入令牌</p>
<p>因此,对于指定了加入Swarm的角色的token, 除了<code>TOKEN</code>字段外,其他字段应该相同</p>
</li>
</ul>
<h2 id="TLS"><a class="header-anchor" href="#TLS"></a>TLS</h2>
<p>Docker Swarm采用TLS, 每个node都有自己的客户端证书,  证书的更新周期默认是90天</p>
<h3 id="查看CA配置"><a class="header-anchor" href="#查看CA配置"></a>查看CA配置:</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker system info</span><br><span class="line"></span><br><span class="line"># 输出为</span><br><span class="line">Swarm: active                                                                                                                                                                                     </span><br><span class="line">  NodeID: 0b51jn6a7l72c7rky9k7w3b1d                                                                                                                                                                </span><br><span class="line">  Is Manager: true                                                                                                                                                                                 </span><br><span class="line">  ClusterID: 47zrkbd66toz8zo0fyqgk5oyv </span><br><span class="line">&lt;SNIP&gt;                                    </span><br><span class="line">  CA Configuration:                                                                                                                                                                                </span><br><span class="line">   Expiry Duration: 4 weeks        # 证书过期时间                                                                                                                                                                </span><br><span class="line">   Force Rotate: 0                              </span><br><span class="line">  Autolock Managers: false                                                                       </span><br><span class="line">  Root Rotation In Progress: false</span><br><span class="line">&lt;SNIP&gt;</span><br></pre></td></tr></table></figure>
<h2 id="指定外部CA"><a class="header-anchor" href="#指定外部CA"></a>指定外部CA</h2>
<p><code>docker  swarm  init</code>加<code> --external-ca</code>参数来指定外部CA</p>
<h3 id="更新证书的更新周期"><a class="header-anchor" href="#更新证书的更新周期"></a>更新证书的更新周期</h3>
<p>可以用<code>docker swarm update</code> 配置证书的更新周期:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 更新到30天</span><br><span class="line">docker swarm update --cert-expiry 720h</span><br></pre></td></tr></table></figure>
<h3 id="CA配置"><a class="header-anchor" href="#CA配置"></a>CA配置</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker swarm ca</span><br></pre></td></tr></table></figure>
<ul>
<li>使用时用<code>--help</code>来查看具体功能</li>
</ul>
<h1 id="Commands"><a class="header-anchor" href="#Commands"></a>Commands</h1>
<ul>
<li>只有manager能查看集群信息, worker无权查看, 因此<code>docker service ls</code>之类的命令只有Manager能用</li>
</ul>
<h2 id="创建Swarm"><a class="header-anchor" href="#创建Swarm"></a>创建Swarm</h2>
<p>创建一个新的Swarm, 执行该命令的节点会成为第一个Manager, 也是根CA节点, 且切换到Swarm模式, :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker swarm init</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--advertise-addr &lt;ip:port&gt;</code>: 指定该节点公布给外界的ip和端口( 用于让其他服务器加入swarm ).  这是可选的,但建议总是手动设置这两个属性
<ul>
<li>可以指定一个节点上没有的ip用于负载均衡</li>
<li>端口默认是<code>2377/tcp</code></li>
<li>最好<strong>一定要指定一个公网ip</strong>. 否则默认会公布一个内网ip, 例如 <code>10.0.16.7</code>, 假如其它服务器不在同一个内网, 是无法通过该节点的令牌( 带有其公布的ip )加入swarm的</li>
</ul>
</li>
<li><code>--listen-addr &lt;ip:port&gt;</code>: 指定用于承载Swarm流量的ip和端口, 通常与<code>--advertise-addr</code>相匹配</li>
<li><code>--autolock</code>: 开启swarm锁</li>
<li><code> --external-ca</code>: 指定外部CA</li>
</ul>
<h2 id="获取准入令牌"><a class="header-anchor" href="#获取准入令牌"></a>获取准入令牌</h2>
<p>在Manager上, 获取加入到该Swarm的准入令牌( token ):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker swarm join-token manager # 获得的token能让其他节点作为manager加入</span><br><span class="line">docker swarm join-token worker # 获得的token能让其他节点作为worker加入</span><br></pre></td></tr></table></figure>
<h2 id="更新准入令牌"><a class="header-anchor" href="#更新准入令牌"></a>更新准入令牌</h2>
<p>废除原有的准入令牌,再发布新令牌</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker swarm join-token --rotate manager #  更新已发布的manager的准入令牌</span><br><span class="line">docker swarm join-token --rotate worker # 同理</span><br></pre></td></tr></table></figure>
<ul>
<li>新令牌和旧令牌只有<code>TOKEN</code>字段不同, <code>SWARM ID</code>还是相同的</li>
</ul>
<p>可以废除当前令牌, 再发布新的</p>
<h2 id="加入Swarm"><a class="header-anchor" href="#加入Swarm"></a>加入Swarm</h2>
<p>指定节点加入某Swarm</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker swarm join --token &lt;token&gt; &lt;target-ip:port&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>可以看到, 节点以什么身份加入Swarm, 完全取决于所给的Token, 节点自己没有自定义的权利</li>
</ul>
<h2 id="查看Swarm"><a class="header-anchor" href="#查看Swarm"></a>查看Swarm</h2>
<p>列出Swarm中所有节点:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker node ls</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>仅限Manager使用, worker无权查看集群状态</p>
</li>
<li>
<p><code>MANAGER  STATUS</code> 一列没有任何显示的是worker</p>
</li>
<li>
<p>ID列显示星号( <code>*</code> )的是执行该命令的节点</p>
</li>
<li>
<p>注意, 节点名就是主机名. 如果你觉得主机名没有可读性, 可以改名, 然后重启docker:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname acs-services-node1</span><br><span class="line">service docker restart</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>STATUS</strong>:</p>
<ul>
<li>Ready：集群中的节点</li>
<li>Down：集群中 leave 的节点</li>
</ul>
</li>
<li>
<p><strong>MANAGER STATUS</strong></p>
<ul>
<li><strong>无值：表示该节点是worker</strong></li>
<li>Leader：集群的第一个管理者，管理整个集群，编排决策</li>
<li>Reachable：属于管理节点，当Leader节点不可用后，该节点有权利竞选Leader</li>
<li>Unreachable：管理节点不可用，无法与其它管理节点连接(节点退出集群)</li>
</ul>
</li>
<li>
<p><strong>availability</strong></p>
<ul>
<li>Active：活动的节点，可以被调度器分配任务</li>
<li>Pause：不能分配新任务，已存在的任务继续运行</li>
<li>Drain：不能分配新任务，已存在的任务会被停止，并将这些任务调度到在可用节点上：</li>
</ul>
</li>
</ul>
<h2 id="离开Swarm"><a class="header-anchor" href="#离开Swarm"></a>离开Swarm</h2>
<p>节点主动离开swarm:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker swarm leave</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--force</code>: Manager leave需要加<code>--force</code></li>
</ul>
<h2 id="删除节点"><a class="header-anchor" href="#删除节点"></a>删除节点</h2>
<p>有时只能在其他节点上强制删除另一些节点( 比如, 某些节点是云服务器, 已经过期了, 此时没办法登录这些节点让它们主动<code>leave</code>, 只能在其他节点上删除它 ):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker node rm &lt;noce&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>仅能删除worker, 如果要删除manager, 需要降级为worker. 或者也可以用<code>-rm</code></li>
</ul>
<h2 id="更改节点角色"><a class="header-anchor" href="#更改节点角色"></a>更改节点角色</h2>
<ul>
<li>
<p>将manager角色降级为worker:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker node demote &lt;hostname&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将worker角色升级为manager:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker node promote &lt;hostname&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="创建Service"><a class="header-anchor" href="#创建Service"></a>创建Service</h2>
<p>创建新服务:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service create --name &lt;service-name&gt; \</span><br><span class="line">--replicas &lt;num-of-replica&gt; \</span><br><span class="line">&lt;image&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>docker service create</code> 格式与<code>docker container run</code> 类似</p>
</li>
<li>
<p><code>--replicas</code>: 告知Docker应该总是有n个此服务的副本, 这定义了<code>期望状态</code></p>
<ul>
<li>默认为1</li>
<li>Leader会按要求在Swarm中实例化n个副本,
<ul>
<li>服务副本使用相同的镜像和配置</li>
<li><strong>Manager也会作为worker运行</strong></li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>-p, --publish port</code>：<code>&lt;host-port&gt;:&lt;container-port&gt;</code>， 宿主机端口映射到容器端口，由于是swarm模式，该宿主机端口会监听在集群所有节点上</p>
</li>
<li>
<p>注意，只有<strong>拥有该镜像的节点</strong>才会被调度到运行该服务, 可以从<code>docker service ps &lt;service&gt;</code>中看到，某些节点“拒绝了任务调度，因为”：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">No such image: &lt;imaeg&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>即使该service创建失败, 也依然会占用端口等资源.</p>
</li>
<li>
<p><code>--resolve-image never</code> : 在<a href="https://stackoverflow.com/questions/48962399/no-suitable-node-unable-to-deploy-image-using-docker-service">很少见的情况下</a>, 加了这个选项可以避免平台不支持的问题, 不过我没遇到过</p>
</li>
<li>
<p>swam集群中如果管理节点使用一个本地镜像创建服务,在给子节点分配任务时, 子节点就无法从公共docker hub上拉取到这个自建的镜像. 可以使用自建的本地registry.</p>
<p>也就是说, <strong>swarm集群没法使用本地镜像</strong>, 即使集群中全都是manager也不行, 因为manager也是worker; 甚至<strong>即使集群中只有一个节点, 它是manager, 且它本地有同名镜像, 也依然会使用registry的而不是本地的</strong>.</p>
<p>一个例子是, 我在macbook上build了镜像 <code>lyklove/frontend_volatile_reborn:latest</code>, 然后push到了dockerhub, 结果在linux服务器上使用:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">--name frontend_volatile_reborn_svc \</span><br><span class="line">--network volatile_reborn -p 81:80 \</span><br><span class="line">--replicas 1 \</span><br><span class="line">lyklove/frontend_volatile_reborn:latest</span><br></pre></td></tr></table></figure>
<p>报错:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1/1: no suitable node (unsupported platform on 1 node) </span><br></pre></td></tr></table></figure>
<p>显然,这说明了我service基于的镜像是mac的, 不是linux的, 尽管我的在服务器上也有同名的该镜像.</p>
<ul>
<li>当然, 你也可以使用<a href="https://hub.docker.com/_/registry">自建的本地registry</a>, 不过也太麻烦了, 还是每次都push到dockerhub吧.</li>
</ul>
</li>
<li>
<p>e.g.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ docker service create --name web-fe \</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-p 4000:8080 \</span></span><br><span class="line"><span class="language-bash">&gt; --replicas 5 \</span></span><br><span class="line"><span class="language-bash">&gt; nigelpoulton/pluralsight-docker-ci</span> </span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>Swarm会持续确保服务的实际状态和期望状态一致(也就是K8S中的调协循环)</p>
<ul>
<li>Swarm会在后台轮询检查所有服务, 来持续比较服务的实际状态和期望状态</li>
</ul>
<h2 id="查看Service"><a class="header-anchor" href="#查看Service"></a>查看Service</h2>
<p>列出Swarm中所有运行中的服务:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service ls</span><br></pre></td></tr></table></figure>
<p>查看service在哪个node:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker service ps vo </span><br></pre></td></tr></table></figure>
<p>进一步查看Swarm中某个服务的信息, 比如哪些节点在运行该服务实例:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service ps &lt;service&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>在运行任务的节点上运行<code>docker ps</code>也能看到这个service对应的容器</li>
</ul>
<p>查看服务的详细信息:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service inspect --pretty &lt;service&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--pretty</code>:  文本更可读</li>
</ul>
<h2 id="改变Service"><a class="header-anchor" href="#改变Service"></a>改变Service</h2>
<p>对运行中的服务的属性进行变更, 这要求<strong>节点都处于overlay网络</strong>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service update &lt;service&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>--autolock=true</code>: 开启swarm锁</p>
</li>
<li>
<p>滚动更新:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service update \</span><br><span class="line">--image &lt;new-image&gt; \ # 指定新镜像</span><br><span class="line">--update-parallelism &lt;num-of-replica-per-update&gt; \ # 每次更新的副本数</span><br><span class="line">--update-delay 20s uber-svc # 每次更新的延迟</span><br><span class="line">&lt;service&gt; </span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>所有update操作都是持久的, 可以用<code>docker service inspect</code> 查看</p>
<h2 id="服务扩缩容"><a class="header-anchor" href="#服务扩缩容"></a>服务扩缩容</h2>
<p>对服务副本个数进行增减</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service scale</span><br></pre></td></tr></table></figure>
<h2 id="删除Service"><a class="header-anchor" href="#删除Service"></a>删除Service</h2>
<p>删除服务, 该命令不会要求确认</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service rm</span><br></pre></td></tr></table></figure>
<h2 id="配置CA"><a class="header-anchor" href="#配置CA"></a>配置CA</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker  swarm ca</span><br></pre></td></tr></table></figure>
<h2 id="服务滚动更新"><a class="header-anchor" href="#服务滚动更新"></a>服务滚动更新</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker service update \</span><br><span class="line">--image &lt;new-image&gt; \ </span><br><span class="line">--update-parallelism &lt;num&gt; \ </span><br><span class="line">--update-delay &lt;time&gt; uber-svc \</span><br><span class="line">&lt;service-to-update&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--update-parallelism &lt;num&gt;</code>： 每次更新<code>num</code>个副本</li>
<li><code>--update-delay &lt;time&gt;</code> # 每次更新有<code>time</code>s 延迟</li>
</ul>
<h2 id="查看Service日志"><a class="header-anchor" href="#查看Service日志"></a>查看Service日志</h2>
<p>查看服务的日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service logs</span><br></pre></td></tr></table></figure>
<h1 id="Swarm-Service"><a class="header-anchor" href="#Swarm-Service"></a>Swarm Service</h1>
<h2 id="创建Service-2"><a class="header-anchor" href="#创建Service-2"></a>创建Service</h2>
<p>创建新服务:</p>
<h2 id="副本模式-vs-全局模式"><a class="header-anchor" href="#副本模式-vs-全局模式"></a>副本模式 vs 全局模式</h2>
<p>服务的复制模式:</p>
<ul>
<li>副本模式(  <code>replicated</code> ): 默认模式, 会部署期望数量的副本,并尽可能均匀地讲个副本分布在各个集群中
<ul>
<li>这意味着一个主机可能被部署多个副本</li>
</ul>
</li>
<li>全局模式了每个节点上仅运行一个副本</li>
</ul>
<h2 id="扩缩容"><a class="header-anchor" href="#扩缩容"></a>扩缩容</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service scale=&lt;expected-number&gt;</span><br></pre></td></tr></table></figure>
<h2 id="删除服务"><a class="header-anchor" href="#删除服务"></a>删除服务</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service rm &lt;service-name&gt;</span><br></pre></td></tr></table></figure>
<p>验证服务是否被删除:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service ls</span><br></pre></td></tr></table></figure>
<ul>
<li>只有Manager可用</li>
</ul>
<h2 id="滚动更新"><a class="header-anchor" href="#滚动更新"></a>滚动更新</h2>
<p>滚动更新需要节点处于overlay网络中. 如果位于bridge网络中, 则其他节点是不会收到更新的</p>
<p>先创建一个overlay网络,:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network create -d overlay uber-net</span><br></pre></td></tr></table></figure>
<ul>
<li>由<em>Docker Network</em>得, 一个Swarm节点直到在覆盖网络上启动容器时,才会将自己接入该网络, 因此,此时在其他节点上,看不到该网络</li>
</ul>
<p>然后创建一个服务,部署4个副本, 连接到overlay网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ docker service create --name uber-svc \</span><br><span class="line">--network uber-net \ # 接入overlay网络</span><br><span class="line">-p 80:80 --replicas 4 \</span><br><span class="line">nigelpoulton/tu-demo:v1</span><br></pre></td></tr></table></figure>
<ul>
<li>此时在其他节点上启动了容器,因此能看到该网络</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ docker service update \</span><br><span class="line">--image nigelpoulton/tu-demo:v2 \ # 指定新镜像</span><br><span class="line">--update-parallelism 2 \ # 每次更新两个副本</span><br><span class="line">--update-delay 20s uber-svc # 每次更新有20s延迟</span><br><span class="line">uber-svc # 对uber-svc 进行更新</span><br></pre></td></tr></table></figure>
<ul>
<li>此时在其他节点上<code>docker container ls</code> 可以看到已经运行了新版本的镜像</li>
</ul>
<h1 id="Swarm-Security"><a class="header-anchor" href="#Swarm-Security"></a>Swarm Security</h1>
<p>Docker Swarm提供了许多安全特性( 许多已经被前文提到 ) , 包括:</p>
<ul>
<li>加密 node ID</li>
<li>基于TLS的认证</li>
<li>安全准入令牌</li>
<li>周期性证书更新</li>
<li>CA配置</li>
<li>加密集群存储: 目前的存储基于<code>etcd</code>, 且会在Swarm manager间自动复制, 存储默认加密</li>
<li>加密网络</li>
</ul>
<h1 id="Swarm-Lock"><a class="header-anchor" href="#Swarm-Lock"></a>Swarm Lock</h1>
<p>重启旧的Manager, 进行备份恢复等操作都会对集群造成影响, 为此, Docker Swarm提供了锁机制, 这会<strong>强制要求重启的管理节点在提供一个集群解锁码之后才能接入集群</strong></p>
<ul>
<li>需要手动开启</li>
</ul>
<h2 id="开启锁"><a class="header-anchor" href="#开启锁"></a>开启锁</h2>
<p>在创建Swarm时开启锁:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker swarm init --autolock</span><br></pre></td></tr></table></figure>
<p>在已有Swarm上开启锁:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker swarm update --autolock=true</span><br></pre></td></tr></table></figure>
<p>上锁后会得到解锁码:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ docker swarm update --autolock=true</span><br><span class="line">Swarm updated.</span><br><span class="line">To unlock a swarm manager after it restarts, run the `docker swarm unlock`</span><br><span class="line">command and provide the following key:</span><br><span class="line"></span><br><span class="line">    SWMKEY-1-RAjjfCURYShYusB+KEJRL3RDzz6B9hA1z48tmqaTJWs</span><br><span class="line"></span><br><span class="line">Please remember to store this key in a password manager, since without it you</span><br><span class="line">will not be able to restart the manager.</span><br></pre></td></tr></table></figure>
<h2 id="验证锁效果"><a class="header-anchor" href="#验证锁效果"></a>验证锁效果</h2>
<p>开启锁后, 重启一个管理节点:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker node ls</span><br></pre></td></tr></table></figure>
<p>输出为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error response from daemon: Swarm is encrypted and needs to be unlocked before it can be used. Please use &quot;docker swarm unlock&quot; to unlock it.</span><br></pre></td></tr></table></figure>
<h2 id="解锁"><a class="header-anchor" href="#解锁"></a>解锁</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker swarm unlock</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后会要求你输入解锁码</span></span><br></pre></td></tr></table></figure>
<h1 id="Swarm实战-volatile"><a class="header-anchor" href="#Swarm实战-volatile"></a>Swarm实战: volatile</h1>
<p>我们要将前端服务<code>volatile_frontend_svc</code>(容器监听80端口)部署到集群，对外暴露集群的81端口</p>
<h2 id="Server-Config"><a class="header-anchor" href="#Server-Config"></a>Server Config</h2>
<table>
<thead>
<tr>
<th>主机名</th>
<th>主机ip</th>
<th>角色</th>
</tr>
</thead>
<tbody>
<tr>
<td>lyk阿里云服务器</td>
<td>**</td>
<td>master，CICD工作节点</td>
</tr>
<tr>
<td>lyk华为云服务器</td>
<td>**</td>
<td>master</td>
</tr>
<tr>
<td>lyk腾讯云服务器</td>
<td>**</td>
<td>master</td>
</tr>
</tbody>
</table>
<p>3台Master， 3台Worker（ Master也同时作为Worker，因此实际上只有三台主机 ）</p>
<h2 id="Prerequists"><a class="header-anchor" href="#Prerequists"></a>Prerequists</h2>
<p>前置准备：所有节点必须打开：</p>
<ul>
<li>UDP/4789： 绑定到VTE</li>
<li>TCP/2377： Swarm的集群管理默认使用2377端口</li>
<li>TCP/7946, UDP/7946: Swarm的节点发现使用7946端口</li>
<li>TCP81: 暴露所有运行前端server的node的的81端口</li>
</ul>
<h2 id="步骤"><a class="header-anchor" href="#步骤"></a>步骤</h2>
<ol>
<li>
<p>先在阿里云主机上创建第一个master节点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker  swarm init --advertise-addr **:2377</span><br></pre></td></tr></table></figure>
<ul>
<li>填该master节点的公网ip</li>
</ul>
</li>
<li>
<p>生成令节点作为master加入集群的令牌：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker swarm join-token manager</span><br></pre></td></tr></table></figure>
<ul>
<li>该命令的输出即为令牌</li>
</ul>
</li>
<li>
<p>在其他节点上使用上述令牌，使其作为master加入该swarm集群。 成功后执行下述命令，查看集群中的节点：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker node <span class="built_in">ls</span> </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在任意master上创建overlay网络，名为<code>volatile</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network create -d overlay volatile</span><br></pre></td></tr></table></figure>
<ul>
<li>一定要先创建网络, 否则其他节点无法加入该网络</li>
</ul>
</li>
<li>
<p>在master上基于镜像创建新服务<code>volatile_frontend_svc</code>，并使用网络<code>volatile</code>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker service create --name volatile_frontend_svc \</span><br><span class="line">--network volatile \</span><br><span class="line">-p 81:80 \</span><br><span class="line">--replicas 3 \</span><br><span class="line">lyklove/volatile_frontend:latest</span><br></pre></td></tr></table></figure>
<ul>
<li>这里设置服务实例数为3</li>
<li>我们将集群的81端口映射到了容器的80端口。 因此访问集群的任意节点的81端口的流量最终都会被转发到运行了该服务副本的节点</li>
</ul>
</li>
<li>
<p>（后续）滚动更新:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service update --image lyklove/volatile_frontend:new --update-parallelism 2  --update-delay 1s volatile_frontend_svc</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>基于新镜像<code>lyklove/volatile_frontend:new </code>更新服务，并在其他节点上也进行服务更新</li>
<li>该命令可以在任意拥有该新镜像的master节点上执行</li>
</ul>
<h2 id="集成CICD"><a class="header-anchor" href="#集成CICD"></a>集成CICD</h2>
<p>可以发现，CICD只需要将服务打包成镜像，然后利用该镜像滚动更新就行了</p>
<p>Jenkins脚本<code>jenkinsfile.groovy</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 根据代码构建新镜像</span></span><br><span class="line">stage(<span class="string">&quot;update service by built image&quot;</span>)&#123;</span><br><span class="line">        sh <span class="string">&quot;docker service update --image $&#123;IMAGE_TO_RUN&#125; --update-parallelism 2  --update-delay 2s $&#123;SERVICE_NAME&#125;&quot;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意, jenkinsfile里只写了<code>docker service update</code>, 而没有create. 因此, 需要先手动在server上create service, 后续cicd时才能够update</li>
</ul>
<h2 id="集群使用"><a class="header-anchor" href="#集群使用"></a>集群使用</h2>
<p>通过<code>[host-ip]:81</code>访问前端</p>
<p>其中<code>host-ip</code>可以是集群中任意节点的ip</p>
<h1 id="Swarm实战-volatile-reborn"><a class="header-anchor" href="#Swarm实战-volatile-reborn"></a>Swarm实战: volatile_reborn</h1>
<h2 id="Server-Config-2"><a class="header-anchor" href="#Server-Config-2"></a>Server Config</h2>
<p>由于华为云服务器过期了, 这次只有两个节点. 这也意味着只能有一个专业的worker, 否则会发生brain-split</p>
<table>
<thead>
<tr>
<th>主机名</th>
<th>主机ip</th>
<th>角色</th>
</tr>
</thead>
<tbody>
<tr>
<td>lyk腾讯云服务器</td>
<td>**</td>
<td>master, CICD工作节点</td>
</tr>
<tr>
<td>lyk阿里云服务器</td>
<td>**</td>
<td>master</td>
</tr>
</tbody>
</table>
<p>1台Master， 2台Worker(算上Master)</p>
<h2 id="Steps"><a class="header-anchor" href="#Steps"></a>Steps</h2>
<ol>
<li>
<p>照常配置服务器端口</p>
</li>
<li>
<p>把之前volatile时期配置的华为云的node删掉. 由于server已经登陆不上了, 没法主动leave, 只能在其他节点上删除:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker node <span class="built_in">rm</span>  k8s-master //k8s-master是华为云服务器的hostname</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Create Token:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker  swarm init --advertise-addr 123.56.20.222:2377</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Let other nodes join the swarm with this token</p>
</li>
<li>
<p>Create overlay network on  any master, 名为<code>volatile_reborn</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker network create -d overlay volatile_reborn</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Create frontend service on manager:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">--name frontend_volatile_reborn_svc \</span><br><span class="line">--network volatile_reborn -p 81:80 \</span><br><span class="line">--replicas 2 lyklove/frontend_volatile_reborn:latest-linux </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Create backend  service on manager:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">--name backend_volatile_reborn_svc \</span><br><span class="line">--network volatile_reborn -p 8000:8000 \</span><br><span class="line">--replicas 1 lyklove/backend_volatile_reborn:latest-linux </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Create eureka service on manager:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">--name backend_eureka_volatile_reborn_svc \</span><br><span class="line">--network volatile_reborn -p 8001:8001 \</span><br><span class="line">--replicas 1 lyklove/backend_eureka_volatile_reborn:latest-linux </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>后续滚动更新和集成cicd都和volatile类似</p>
</li>
</ol>
<h1 id="Problems"><a class="header-anchor" href="#Problems"></a>Problems</h1>
<ul>
<li>swarm面对一个镜像名, 似乎会优先使用dockerhub的镜像?</li>
<li>--resolve-image never</li>
</ul>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Volume</title>
    <url>/2022/03/25/Docker-Volume/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Basic Idea</li>
<li>Commands</li>
<li>示例</li>
<li>第三方卷驱动</li>
<li>在集群节点间共享存储</li>
</ul>
<span id="more"></span>
<h1 id="Basic-Idea"><a class="header-anchor" href="#Basic-Idea"></a>Basic Idea</h1>
<p>docker可以进行非持久化和持久化存储</p>
<p>非持久化存储: 属于容器的一部分, 与容器的生命周期一致</p>
<ul>
<li>默认情况下, 容器的所有存储都使用非持久化存储</li>
</ul>
<p>持久化存储: 用户可以创建docker卷, 将卷挂载到容器上</p>
<ul>
<li>
<p>这首先需要将主机的文件挂载到docker卷,   默认会用主机的<code> &lt;docker镜像存放位置&gt;/volumes/&lt;卷名&gt;/_data</code>目录</p>
<ul>
<li>这意味着可以在主机的文件系统里查看卷的数据</li>
</ul>
</li>
<li>
<p>docker卷与容器是解耦的. 删除容器,卷不会被删除</p>
</li>
</ul>
<p>本地存储默认位于<code>&lt;docker镜像存放位置&gt;/&lt;storage-driver&gt;</code></p>
<ul>
<li>docker镜像存放位置: 默认情况下 在 <code>/var/lib/docker</code></li>
<li>存储驱动: 可以自己查看<code>deamon.json</code>, 一般都是<code>overlay2</code></li>
</ul>
<h1 id="Commands"><a class="header-anchor" href="#Commands"></a>Commands</h1>
<h2 id="创建卷"><a class="header-anchor" href="#创建卷"></a>创建卷</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume create &lt;vol-name&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-d</code>: 指定驱动, 默认是<code>local</code></li>
</ul>
<h2 id="列出卷"><a class="header-anchor" href="#列出卷"></a>列出卷</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure>
<h2 id="查看卷"><a class="header-anchor" href="#查看卷"></a>查看卷</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume inpect &lt;vol-name&gt;</span><br></pre></td></tr></table></figure>
<p>输出形如:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;CreatedAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-25T01:02:47+08:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span><span class="punctuation">,</span> <span class="comment">//默认驱动是local</span></span><br><span class="line">        <span class="attr">&quot;Labels&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Mountpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/home/lyk/data/docker/volumes/bizvol/_data&quot;</span><span class="punctuation">,</span> <span class="comment">// docker主机被挂载的文件系统位置</span></span><br><span class="line">        <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bizvol&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Options&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span> <span class="comment">// 默认是local,只能用于当前docker主机的容器</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="删除卷"><a class="header-anchor" href="#删除卷"></a>删除卷</h2>
<p>删除所有未被使用的卷:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume prune</span><br></pre></td></tr></table></figure>
<p>删除指定卷( 不能删除正在被使用的卷 ):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume rm &lt;vol&gt;</span><br></pre></td></tr></table></figure>
<h2 id="将卷挂载到容器"><a class="header-anchor" href="#将卷挂载到容器"></a>将卷挂载到容器</h2>
<p>docker命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container run \</span><br><span class="line">-dit --name &lt;contaienr&gt; \                                                                 </span><br><span class="line">--mount source=&lt;vol&gt;,target=&lt;container-mount-point&gt; \</span><br><span class="line">--restart=always \</span><br><span class="line">&lt;image&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><code>--mount</code>: 挂载卷, <strong>如果没有该卷则会创建</strong>
<ul>
<li><code>source</code>: 要被挂载的docker卷</li>
<li><code>target</code>: 卷被挂载到的容器内目录</li>
</ul>
</li>
<li><code>--restart=always</code>: 容器总是自动重启，生产环境中建议使用此特性</li>
</ul>
<p>Dockerfile:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VOLUME  &lt;container-mount-point&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>这个方案没什么用,因为Dockerfile一般只能指定相对的主机目录, 这就意味着挂载点在不同主机间会不一样, 得每次部署都手动修改主机目录Docker</li>
</ul>
<h2 id="查看容器的挂载卷情况"><a class="header-anchor" href="#查看容器的挂载卷情况"></a>查看容器的挂载卷情况</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect &lt;container&gt; | grep Mounts -A 20</span><br></pre></td></tr></table></figure>
<h1 id="示例"><a class="header-anchor" href="#示例"></a>示例</h1>
<ol>
<li>
<p>创建一个容器,并挂载一个卷到其<code>/vol</code>目录:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container run -dit --name voltainer \</span><br><span class="line">--mount source=bizvol,target=/vol \ # bizvol卷不存在,因此会被自动创建</span><br><span class="line">alpine</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>进入该容器:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker container exec -it &lt;contaienr&gt; sh</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在容器中的<code>/vol</code>目录下存储数据:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;This will last&quot; &gt; /home/lyk/data/docker/volumes/bizvol/_data/file1</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看上一步操作:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /home/lyk/data/docker/volumes/bizvol/_data/file1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出为: This will last</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>删除该容器:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container rm -f  voltainer</span><br></pre></td></tr></table></figure>
<ul>
<li>这并不会删除docker卷</li>
</ul>
</li>
<li>
<p>查看docker主机文件系统中对应该卷的目录:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cat /home/lyk/data/docker/volumes/bizvol/_data/file1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出为: This will last</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可见卷保留了原始数据, 也证明了卷没有被删除</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>下面将<code>bizvol</code> 卷挂载到新的服务/容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">--name hellcat \</span><br><span class="line">--mount source=bizvol,target=/vol \</span><br><span class="line">alpine sleep 1d</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>由于没有指定<code>--replicas</code>, 因此服务只会部署一份副本. 找到该服务运行的节点,  在节点上找到该服务对应的容器:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker service ps hellcat</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>进入该容器</p>
</li>
<li>
<p>查看挂载点下的数据:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cat /home/lyk/data/docker/volumes/bizvol/_data/file1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出为: This will last</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可见可以将卷挂载给其他容器</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="第三方卷驱动"><a class="header-anchor" href="#第三方卷驱动"></a>第三方卷驱动</h1>
<p>Docker可以通过插件方式集成第三方卷驱东, 这可以<strong>为Docker集成外部存储系统,并使用这些系统的特性</strong>:</p>
<ul>
<li>块存储: 适用于小块数据的随机访问</li>
<li>文件存储: 包括Azure文件存储和Amazon EFS</li>
<li>对象存储: 适用于较大且长期存储的,很少变更的二进制数据, 通常是根据内容寻址</li>
</ul>
<h1 id="在集群节点间共享存储"><a class="header-anchor" href="#在集群节点间共享存储"></a>在集群节点间共享存储</h1>
<p>Docker可以继承外部存储系统, 而后者中, 如LUN, NFS等能提供集群间节点共享存储</p>
<p>但是, 所有的共享存储都会面临缓存一致性, 数据一致性等问题,这需要在应用程序中控制. Docker自身无法控制这点</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerizing</title>
    <url>/2022/03/19/Dockerizing/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>
<p>单体应用容器化</p>
<ul>
<li>Dockerfile</li>
<li>build image</li>
<li>push image</li>
</ul>
</li>
<li>
<p>多阶段构建</p>
</li>
<li>
<p>构建镜像优化</p>
</li>
</ul>
<p>介绍了应用的容器化</p>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<p>应用容器化步骤：</p>
<ol>
<li>编写应用代码</li>
<li>创建Dockerfile,其中包括当前应用的描述，依赖以及如何运行这个应用</li>
<li>对该Dockerfile执行<code>docker image build</code></li>
<li>等待Docker将应用程序构建到Docker镜像中</li>
</ol>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Dockerizing/docker%20image%20squash.png" alt="dockerizing workflow"></p>
<h1 id="单体应用容器化"><a class="header-anchor" href="#单体应用容器化"></a>单体应用容器化</h1>
<p>示例项目：<a href="https://github.com/LYK-love/psweb">https://github.com/LYK-love/psweb</a></p>
<h2 id="Dockerfile"><a class="header-anchor" href="#Dockerfile"></a>Dockerfile</h2>
<p>构建上下文（Build Context）： 包含应用文件的目录</p>
<p>Dockerfile一般放在构建上下文的根目录下</p>
<p>Dockerfile首字母不能小写</p>
<p>Dockerfile:</p>
<ul>
<li>除了 <code>#</code> 开头的注释行之外， 其他的每一行都是一条指令
<ul>
<li>指令： <code>INSTRUCTION argument</code>: 不区分大小写，一般<code>INSTRUCTION</code>大写</li>
</ul>
</li>
<li>分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM alpine</span><br><span class="line"></span><br><span class="line">LABEL maintainer=&quot;nigelpoulton@hotmail.com&quot;</span><br><span class="line"></span><br><span class="line"># Install Node and NPM</span><br><span class="line">RUN apk add --update nodejs npm curl</span><br><span class="line"></span><br><span class="line"># Copy app to /src</span><br><span class="line">COPY . /src</span><br><span class="line"></span><br><span class="line">WORKDIR /src</span><br><span class="line"></span><br><span class="line"># Install dependencies</span><br><span class="line">RUN  npm install</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;node&quot;, &quot;./app.js&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="Options"><a class="header-anchor" href="#Options"></a>Options</h3>
<ul>
<li>
<p><code>FROM  &lt;image&gt;</code>： 将指定的镜像的作为要构建的镜像的基础镜像层，一般是OS</p>
</li>
<li>
<p><code> LABEL &lt;tag&gt; &lt;tag&gt;</code>：添加一些元数据，每个tag都是键值对</p>
</li>
<li>
<p><code>RUN &lt;command&gt;</code> 或 <code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>：</p>
</li>
<li>
<p>前者将在 shell 终端中运行命令，即 <code>/bin/sh -c</code>；后者则使用 <code>exec</code> 执行。指定使用其它终端可以通过第二种方式实现，例如 <code>RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;]</code></p>
</li>
<li>
<p>每条 <code>RUN</code> 指令都会在当前镜像层基础上执行指定命令， 并<strong>新建一个镜像层</strong></p>
</li>
<li>
<p><code>ENV &lt;ENV_VARIABLE&gt;=&lt;str&gt;</code>: 设置环境变量</p>
</li>
<li>
<p><code>COPY &lt;src&gt; &lt;dest&gt;</code>：</p>
<p>复制本地主机的 <code>&lt;src&gt;</code>（为 Dockerfile 所在目录的相对路径，即构建上下文）到容器中的 <code>&lt;dest&gt;</code></p>
</li>
<li>
<p><code>WORKDIR  [dir]</code>: 为Dockerfile中尚未执行的指令设置工作目录</p>
</li>
<li>
<p><code>ENTRYPOINT</code></p>
<p>两种格式：</p>
<ul>
<li><code>ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code></li>
<li><code>ENTRYPOINT command param1 param2</code>（shell中执行）。</li>
</ul>
<p>配置镜像以容器方式启动后默认运行的程序，并且不可被 <code>docker run</code> 提供的参数覆盖。</p>
<p>每个 Dockerfile 中只能有一个 <code>ENTRYPOINT</code>，当指定多个时，只有最后一个起效。</p>
</li>
<li>
<p><code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code>：暴露容器端口. 一般不用写这个指令，在启动容器的时候自己映射端口. 写这个指令有如下好处:</p>
<ol>
<li>告诉告诉镜像使用者,该镜像暴露的端口</li>
<li>如果使用随机端口映射运行容器，也就是 <code>docker run -P</code> ，会自动随机映射 <code>EXPOSE</code> 的端口</li>
</ol>
</li>
<li>
<p><code>VOLUME [&quot;/data&quot;]</code>：</p>
<p>创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。</p>
</li>
</ul>
<h2 id="构建镜像"><a class="header-anchor" href="#构建镜像"></a>构建镜像</h2>
<h3 id="步骤"><a class="header-anchor" href="#步骤"></a>步骤</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image build [选项] path</span><br></pre></td></tr></table></figure>
<p>docker daemon按行来读取path下（包括子目录）的 Dockerfile，并将该path下的所有内容发送给 Docker 服务端，由服务端来创建镜像,</p>
<ul>
<li>
<p><code>-t</code> : 指定镜像的标签信息,即<code>&lt;image&gt;</code>, 注意镜像名必须是<strong>全小写</strong></p>
<ul>
<li>
<p>可以在构建时指定tag:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t hangge_server:2.4 .</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p><code>-f</code>: 指定dockerfile</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -f /path/to/a/Dockerfile .</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="原理"><a class="header-anchor" href="#原理"></a>原理</h3>
<h4 id="增加镜像层"><a class="header-anchor" href="#增加镜像层"></a>增加镜像层</h4>
<p>一般而言，如果指令会对镜像增改，那么会<strong>新建镜像层</strong>， 如果指令只是指示Docker如何构建或者如何运行应用程序，那么就只会<strong>增加镜像的元数据</strong></p>
<p>查看image build的输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ docker image build -t web:latest .</span><br><span class="line">Sending build context to Docker daemon  82.43kB</span><br><span class="line">Step 1/8 : FROM alpine</span><br><span class="line">latest: Pulling from library/alpine</span><br><span class="line">3d2430473443: Pull complete </span><br><span class="line">Digest: sha256:d6d0a0eb4d40ef96f2310ead734848b9c819bb97c9d846385c4aca1767186cd4</span><br><span class="line">Status: Downloaded newer image for alpine:latest</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">e9adb5357e84</span></span><br><span class="line">Step 2/8 : LABEL maintainer=&quot;nigelpoulton@hotmail.com&quot;</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 84a356f040f7</span></span><br><span class="line">Removing intermediate container 84a356f040f7</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">f84bda7d881d</span></span><br><span class="line">Step 3/8 : RUN apk add --update nodejs npm curl</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 16254526f96c</span></span><br><span class="line">&lt;Snip&gt;</span><br><span class="line">Removing intermediate container 16254526f96c</span><br><span class="line">Step 4/8 : COPY . /src</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">7bee4035f9fb</span></span><br><span class="line">Step 5/8 : WORKDIR /src</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 9773c1204206</span></span><br><span class="line">Removing intermediate container 9773c1204206</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">a9bea6558795</span></span><br><span class="line">Step 6/8 : RUN  npm install</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 2117e2800e7d</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以发现，对于Dockerfile中的<strong>每一个产生镜像层的指令</strong>， docker server会：</p>
<ol>
<li>运行一个临时容器</li>
<li>在该容器中执行该指令</li>
<li>将指令执行结果保存为镜像层</li>
<li>删除临时容器</li>
</ol>
<p>而对于不产生镜像层的指令， 不会生成临时容器</p>
<h4 id="build-cache"><a class="header-anchor" href="#build-cache"></a>build cache</h4>
<p><code>docker image build</code>会从顶层自上而下逐条执行Dockerfile中的指令， 对于每一条指令， Docker都会检查缓存中是否已经有与该指令对应的镜像层。</p>
<ul>
<li>如果Cache hit,  并且会链接到这个镜像层，在此基础上继续构建；</li>
<li>如果Cache miss, 则会<strong>对剩余部分的指令设置缓存无效</strong>（ 这意味着Dockerfile接下来的指令将全部执行， 而不再尝试查找build cache ）， 并基于当前指令构建新的镜像层
<ul>
<li>一旦某条指令cache miss, 则之后的指令都不会使用缓存。 因此编写Dockerfile时， 尽量将易于导致镜像层改变的指令放到后面</li>
<li><code>--no-cahce=true</code>： 强制忽略build cache</li>
<li>判断缓存命中（即镜像是否相同）的算法：计算每一个被构建文件的checksum， 将其与已有镜像层中同一文件的checksum进行对比 。 如果不同，则说明 cache miss</li>
</ul>
</li>
</ul>
<h3 id="squash-image"><a class="header-anchor" href="#squash-image"></a>squash image</h3>
<p>正常来说， docker会构建多个镜像层， 并将它们合并为一个镜像</p>
<p>可以将镜像层手动合并， 这样更方便， 但是会导致被合并的镜像层无法被共享：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image build --squash </span><br></pre></td></tr></table></figure>
<p>例子：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Dockerizing/docker%20image%20squash.png" alt="docker image squash"></p>
<p>可以看到，合并前的镜像层是独立的，可以只发送不同的镜像层， 但合并后，所有镜像层合并为一个镜像层， 所以每次都需要传输完整的镜像</p>
<h3 id="示例"><a class="header-anchor" href="#示例"></a>示例</h3>
<p>example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image build -t web:latest .</span><br></pre></td></tr></table></figure>
<h2 id="推送镜像"><a class="header-anchor" href="#推送镜像"></a>推送镜像</h2>
<p>push首先需要当前用户登陆dockerhub</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Container/Dockerizing/docker%20push%20information.png" alt="docker push information"></p>
<p>push镜像需要如下信息：</p>
<ul>
<li>Registry: 默认<code>docker.io</code></li>
<li>Repository: 被推送镜像的REPOSITORY属性值</li>
<li>Tag:  默认<code>latest</code></li>
</ul>
<h3 id="preparation"><a class="header-anchor" href="#preparation"></a>preparation</h3>
<p>假设镜像仓库名是web, 那么push后，镜像位于<code>docker.io/web:latest</code>,然而用户一般没有一级命名空间的权限,  因此<strong>需要为当前镜像重新打一个标签， 这个标签指定了要推送的用户空间</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image tag &lt;image-qith-current-wothtag&gt; &lt;image-with-new-tag&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">该命令会为镜像添加额外的标签，不会删除已有的标签. 可以通过`docker image <span class="built_in">ls</span>` 查看，发现镜像拥有了两个标签</span> </span><br></pre></td></tr></table></figure>
<p>如果你的标签上的用户名不等于你当前登陆的docker hub id, push会失败：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> 当前登陆用户为lyklove</span></span><br><span class="line">❯ docker image ls</span><br><span class="line">REPOSITORY           TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world          latest    feb5d9fea6a5   5 months ago   13.3kB</span><br><span class="line">lyk/hello-world      latest    feb5d9fea6a5   5 months ago   13.3kB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">错误示范</span></span><br><span class="line">❯ docker image push lyk/hello-world:latest</span><br><span class="line">The push refers to repository [docker.io/lyk/hello-world] </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 可以看到docker试图push到lyk的目录下，但是当前用户是lyklove, 不具有用户lyk的权限， 因此push会失败</span></span></span><br><span class="line"></span><br><span class="line">e07ee1baac5f: Preparing </span><br><span class="line">denied: requested access to the resource is denied</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="步骤-2"><a class="header-anchor" href="#步骤-2"></a>步骤</h3>
<ol>
<li>
<p>先登陆docker hub：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>为当前镜像重新打一个标签（ 与当前dockerhub id相符）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image tag &lt;current-tag&gt; &lt;new-tag&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>push镜像（以新标签标识的镜像）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image push [OPTIONS]  &lt;image&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="示例-2"><a class="header-anchor" href="#示例-2"></a>示例</h3>
<p>例子：</p>
<ol>
<li>
<p>假设有一个镜像 <code>web</code>， 则 <code>docker  image push web</code> 实际上会将镜像推送到<code>docker.io/web:latest</code></p>
<p>( 默认Registry是<code>docker.io</code>,  默认tag是<code>latest</code> )</p>
</li>
<li>
<p>但是， 我不可能有<code>docker.io/</code>这个以及命名空间的权限， 只能推送到我自己的二级命名空间(也就是用户的命名空间)：</p>
<p>假如我当前登陆的docker hub id为<code>lyklove</code>， 则我需要推送到<code>docker.io/lyklove/web:latest</code></p>
</li>
<li>
<p>为此，需要给镜像改名：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker  image tag web:latest lyklove/web:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">由于镜像web的默认标签名就是latest, 因此也可以:</span></span><br><span class="line">docker image tag web lyklove/web</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>最后将<code>lyklove/web</code> ( 或者<code>lyklove/web:latest</code> )  推送到dockerhub</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image push lyklove/web:latest</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="查看镜像构建过程"><a class="header-anchor" href="#查看镜像构建过程"></a>查看镜像构建过程</h2>
<p>查看在构建镜像的过程中执行了哪些指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image history &lt;image&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>每行内容都对应Dockerfile的一条指令（自下而上,  最后执行的指令（如<code> ENTRYPOINT</code>）最先显示）</p>
</li>
<li>
<p>对于示例项目<code>web:latest</code>, 可以看到只有Dokcerfile的<code> FROM</code>， <code>RUN</code>和<code>ADD</code>指令添加了镜像层， 其他的指令只是新增了元数据信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ docker image history web</span><br><span class="line">IMAGE          CREATED         CREATED BY                                      SIZE      COMMENT</span><br><span class="line">8552b568ff4c   2 minutes ago   /bin/sh -c #(nop)  ENTRYPOINT [&quot;node&quot; &quot;./app…   0B        </span><br><span class="line">3669d3adfb1a   2 minutes ago   /bin/sh -c #(nop)  EXPOSE 8080                  0B        </span><br><span class="line">d0005c695ed3   2 minutes ago   /bin/sh -c npm install                          23.4MB    </span><br><span class="line">a9bea6558795   2 minutes ago   /bin/sh -c #(nop) WORKDIR /src                  0B        </span><br><span class="line">7bee4035f9fb   2 minutes ago   /bin/sh -c #(nop) COPY dir:09deb2ee65cb723fd…   44.9kB    </span><br><span class="line">6df93a7da909   2 minutes ago   /bin/sh -c apk add --update nodejs npm curl     52.5MB    </span><br><span class="line">f84bda7d881d   5 minutes ago   /bin/sh -c #(nop)  LABEL maintainer=nigelpou…   0B        </span><br><span class="line">e9adb5357e84   30 hours ago    /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot;]              0B        </span><br><span class="line">&lt;missing&gt;      30 hours ago    /bin/sh -c #(nop) ADD file:cf4b631a115c2bbfb…   5.57MB    </span><br><span class="line">                            </span><br></pre></td></tr></table></figure>
<p>可以看到，第一行是执行的最后一条指令<code>ENTRYPOINT</code>。 一共产生了四个镜像层</p>
</li>
</ul>
<p>查看镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image inspect &lt;image&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image inspect web:latest # 以示例项目为例, 可以看到确实只有四个镜像层</span><br><span class="line"></span><br><span class="line">         &lt;Snip&gt;</span><br><span class="line">        &quot;RootFS&quot;: &#123;</span><br><span class="line">            &quot;Type&quot;: &quot;layers&quot;,</span><br><span class="line">            &quot;Layers&quot;: [</span><br><span class="line">                &quot;sha256:5e03d8cae8773cb694fff1d55da34a40d23c2349087ed15ce68476395d33753c&quot;,</span><br><span class="line">                &quot;sha256:3dc92b603964ad1b75c9dde518d028676ded40c82858ee4d236e10ef0e3c02fb&quot;,</span><br><span class="line">                &quot;sha256:04910df3fe981f716ad106dec89d8b667102690462e81efefef411273dad7d26&quot;,</span><br><span class="line">                &quot;sha256:a46c93c283ea7d6611acc8d1422f0b20f40acf1ebadd9d51439e425f7a3dc18d&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">		&lt;Snip&gt;</span><br><span class="line">		</span><br></pre></td></tr></table></figure>
<h2 id="运行容器"><a class="header-anchor" href="#运行容器"></a>运行容器</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container run -d --name c1 \</span><br><span class="line">-p 80:8080 \</span><br><span class="line">web:latest</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--name</code>：  指定容器名</li>
<li><code>-p host_port:container_port</code>: 指定将主机的端口映射到容器的端口</li>
<li><code>-P</code>: 随机端口映射，容器内部端口随机映射到主机的高端口</li>
<li><code>-d</code>: 后台运行容器，并返回容器ID</li>
<li><code>-i</code>: 以交互模式运行容器，通常与 -t 同时使用</li>
<li><code>-t</code>: 为容器重新分配一个伪输入终端，通常与 -i 同时使用</li>
<li><code>-e username=&quot;ritchie&quot;</code>: 设置环境变量</li>
<li><code>--env-file=[file]</code>: 从指定文件读入环境变量</li>
<li><code>--expose=[port-num]-[port-num]</code>: 开放（暴露）一个端口或一组端口；</li>
<li><code>--rm</code>:  退出时自动删除容器</li>
</ul>
<h1 id="多阶段构建"><a class="header-anchor" href="#多阶段构建"></a>多阶段构建</h1>
<p>进行多阶段构建， 概念和Jenkinsfile、 Github Action workflow一样</p>
<p>多阶段构建使用一个Dockerfile, 其中包含多个<code>FROM</code>指令， 每个都是一个 Build Stage, 从0开始编号。 每个stage可以复用之前stage的构建结果（jar包， target文件之类的）</p>
<p>示例项目: <a href="https://github.com/LYK-love/atsea-sample-shop-app">https://github.com/LYK-love/atsea-sample-shop-app</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM node:latest AS storefront</span><br><span class="line">WORKDIR /usr/src/atsea/app/react-app</span><br><span class="line">COPY react-app .</span><br><span class="line">RUN npm install</span><br><span class="line">RUN npm run build # 构建出一个很大的node镜像</span><br><span class="line"></span><br><span class="line">FROM maven:latest AS appserver</span><br><span class="line">WORKDIR /usr/src/atsea</span><br><span class="line">COPY pom.xml .</span><br><span class="line">RUN mvn -B -f pom.xml -s /usr/share/maven/ref/settings-docker.xml dependency:resolve</span><br><span class="line">COPY . .</span><br><span class="line">RUN mvn -B -s /usr/share/maven/ref/settings-docker.xml package -DskipTests # 构建出一个很大的maven镜像</span><br><span class="line"></span><br><span class="line">FROM java:8-jdk-alpine</span><br><span class="line">RUN adduser -Dh /home/gordon gordon</span><br><span class="line">WORKDIR /static</span><br><span class="line">COPY --from=storefront /usr/src/atsea/app/react-app/build/ . # 从storefront阶段拉取一些文件过来， 复制到工作目录下</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY --from=appserver /usr/src/atsea/target/AtSea-0.0.1-SNAPSHOT.jar . # 同上， 从appserver阶段拉取一些文件过来， </span><br><span class="line">ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app/AtSea-0.0.1-SNAPSHOT.jar&quot;]</span><br><span class="line">CMD [&quot;--spring.profiles.active=postgres&quot;] # 构建出一个精简的镜像</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>COPY --from</code> 指令： 从之前stage构建的镜像中仅复制生产环境所需要的文件， 这样镜像中就带有不会冗余文件（比如maven, node）</p>
</li>
<li>
<p>三个<code>FROM</code>指令构建出三个镜像， 用<code>docker image build -t multi:stage</code>进行构建， 它只会命名最后一个镜像， 我们就只需要将最后一个镜像push到生产环境：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ docker image ls</span><br><span class="line">REPOSITORY                  TAG            IMAGE ID       CREATED          SIZE</span><br><span class="line">node                        latest         36fad710e29d   2 weeks ago      991MB</span><br><span class="line">&lt;none&gt;                      &lt;none&gt;         d9c9c532ae40   7 minutes ago    934MB</span><br><span class="line">maven                       latest         d833a10812ed   3 weeks ago      793MB</span><br><span class="line">&lt;none&gt;                      &lt;none&gt;         db32cdd21a1a   31 minutes ago   1.15GB</span><br><span class="line">openjdk                     8-jdk-alpine   a3562aa0b991   2 years ago      105M</span><br><span class="line">multi                       stage          040df44afa9a   7 minutes ago    211MB</span><br></pre></td></tr></table></figure>
<ul>
<li>可以看到， 1第一行是第一阶段拉取的镜像， 第二行是第一阶段生成的镜像； 第三，四，五，六行同理；并且第六行镜像被<code>-t multi:stage</code>命了名</li>
<li>还可以看到，只有最后一个镜像会被命名， 而其余的<code>FROM</code>指令生成的镜像都变成了玄虚镜像， 可以直接删除， 非常方便</li>
</ul>
</li>
</ul>
<h1 id="构建镜像优化"><a class="header-anchor" href="#构建镜像优化"></a>构建镜像优化</h1>
<p>ref:<a href="https://juejin.cn/post/6991689670027542564">如何优化 node 项目的 docker 镜像</a>, 这篇文章将构建镜像优化到了:</p>
<ol>
<li><strong>大小从 1.06G 到 73.4M</strong></li>
<li><strong>构建速度从 29.6 秒到 1.3 秒</strong></li>
</ol>
<p>我们以文中的<a href="https://github.com/iamobj/wechat-bot">node项目</a>为例, 最初的Dockerfile如下:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">14.17</span>.<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> NODE_ENV=production</span><br><span class="line"><span class="keyword">ENV</span> APP_PATH=/node/app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$APP_PATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把当前目录下的所有文件拷贝到镜像的工作目录下 .dockerignore 指定的文件不会拷贝</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . <span class="variable">$APP_PATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yarn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">4300</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> yarn start</span></span><br></pre></td></tr></table></figure>
<h2 id="基本操作"><a class="header-anchor" href="#基本操作"></a>基本操作</h2>
<ul>
<li>
<p>对于会新建镜像层的指令, 比如<code>RUN</code>, <code>ENV</code>.... 因此这些指令最好<strong>写成一行</strong>, 可以用 <code>&amp;&amp;</code>连接多个命令或用<code>\\</code>换行书写.</p>
<p>例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ENV NODE_ENV=production \</span><br><span class="line">    APP_PATH=/node/app</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>由于构建镜像时会逐层检查build cache, 因此最好把不经常变动的层提到前面去, 比如<code>ENV</code></p>
</li>
</ul>
<h2 id="使用alpine"><a class="header-anchor" href="#使用alpine"></a>使用alpine</h2>
<p>基础镜像层可以使用alpine, 这是一个超级小的Linux镜像. 上例的基础镜像层是node, 可以:</p>
<h3 id="使用软件的alpine版本"><a class="header-anchor" href="#使用软件的alpine版本"></a>使用软件的alpine版本</h3>
<p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fhub.docker.com%2F_%2Fnode%3Ftab%3Ddescription%26page%3D1%26ordering%3Dlast_updated">dockerhub</a> 查看 node 版本</p>
<p>对于node等基础软件,使用其alpine版本:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM node:14.17.4-alpine</span><br></pre></td></tr></table></figure>
<p>可以去</p>
<h4 id="使用alpine-linux"><a class="header-anchor" href="#使用alpine-linux"></a>使用alpine linux</h4>
<p>使用alpine linux作为基础镜像层,然后手动装node等基础软件. 该方法效果最显著.</p>
<p>alpine使用apk作为包管理工具, 可以到 <a href="https://pkgs.alpinelinux.org/packages?name=npm&amp;branch=edge&amp;repo=&amp;arch=&amp;maintainer=">apk官网</a> 查看apk包版本</p>
<ul>
<li>
<p>需要注意alpine镜像版本. 比如, 如果使用镜像alpine:3.16, 而我需要的nodejs版本只存在于alpine3.13, 就会无法拉取该依赖</p>
<ul>
<li>即: 一定要指定alpine版本. <strong>不要选择 latest 版本</strong>( <code>From alpine:latest</code>)</li>
</ul>
</li>
<li>
<p>其次, 有人会用<a href="http://mirrors.aliyun.com/alpine/?spm=a2c6h.25603864.0.0.133a2f83TmQnBB">阿里云的apk源</a>, 此时也要注意选择alpine镜像的版本</p>
</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.13</span> AS base</span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;LYK-love&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RUN echo &quot;http://mirrors.aliyun.com/alpine/edge/main/&quot; &gt; /etc/apk/repositories \</span></span><br><span class="line"><span class="comment">#     &amp;&amp; echo &quot;http://mirrors.aliyun.com/alpine/edge/community/&quot; &gt;&gt; /etc/apk/repositories \</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apk add --no-cache --update nodejs=14.20.0-r0 npm=14.20.0-r0 \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; npm config <span class="built_in">set</span> registry http://r.cnpmjs.org/ --production</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ... 后面的步骤不变</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>用户软件( node, yarn等 )也最好要<strong>指定版本</strong>,</p>
</li>
<li>
<p><strong>下面的例子中使用方案2</strong></p>
</li>
<li>
<p>注意:</p>
<ul>
<li>
<p><code>apk</code>和其他工具不同, 不会在下载node时顺便下载npm, 所以如果使用npm, 需要手动下载:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">apk add --no-cache --update nodejs=14.17.4-r0 npm=8.19.1-r0 </span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="提前下载依赖"><a class="header-anchor" href="#提前下载依赖"></a>提前下载依赖</h2>
<ul>
<li>
<p>对于前端项目, 下载依赖在构建镜像时花了很大时间. 我们可以利用构建缓存, <strong>先将package.json 文件单独提前拷贝到镜像，再装依赖</strong>，执行命令装依赖这层的前一层是拷贝 package.json 文件，因为<strong>安装依赖命令不会变化，所以只要 package.json 文件没变化，就不会重新执行 <code>yarn</code> 安装依赖，它会复用之前安装好的依赖</strong>.</p>
<p>示例:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 apk 命令安装 nodejs 和 yarn，如果使用 npm 启动，就不需要装 yarn</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --no-cache --update nodejs=14.17.4-r0 yarn=1.22.10-r0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">4300</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> NODE_ENV=production \</span><br><span class="line">    APP_PATH=/node/app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$APP_PATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝 package.json 到工作跟目录下</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package.json .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yarn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把当前目录下的所有文件拷贝到镜像的工作目录下 .dockerignore 指定的文件不会拷贝</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> yarn start</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="利用多阶段构建"><a class="header-anchor" href="#利用多阶段构建"></a>利用多阶段构建</h2>
<p>运行 node 程序只需要生产的依赖和最终 node 可以运行的文件，就是说我们运行项目只需要 package.js 文件里 dependencies 里的依赖，devDependencies 依赖只是编译阶段用的</p>
<ul>
<li>比如 <u>eslint 等这些工具在项目运行时是用不到的</u>，再比如我们项目是用 typescript 写的，node 不能直接运行 ts 文件，ts 文件需要编译成 js 文件，</li>
</ul>
<p><u>运行项目我们只需要编译后的文件和 dependencies 里的依赖就可以运行，也就是说最终镜像只需要我们需要的东西</u>，任何其他东西都可以删掉，下面我们使用多阶段改写 Dockerfile:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 构建基础镜像</span></span><br><span class="line">    <span class="keyword">FROM</span> alpine:<span class="number">3.16</span>.<span class="number">2</span> AS base</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置环境变量</span></span><br><span class="line">    <span class="keyword">ENV</span> NODE_ENV=production \</span><br><span class="line">        APP_PATH=/node/app</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置工作目录</span></span><br><span class="line">    <span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$APP_PATH</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装 nodejs 和 yarn</span></span><br><span class="line">    <span class="keyword">RUN</span><span class="language-bash"> apk add --no-cache --update nodejs=14.17.4-r0 yarn=1.22.10-r0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用基础镜像 装依赖阶段</span></span><br><span class="line">    <span class="keyword">FROM</span> base AS install</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拷贝 package.json 到工作跟目录下</span></span><br><span class="line">    <span class="keyword">COPY</span><span class="language-bash"> package.json ./</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 安装依赖</span></span><br><span class="line">    <span class="keyword">RUN</span><span class="language-bash"> yarn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终阶段，也就是输出的镜像是这个阶段构建的，前面的阶段都是为这个阶段做铺垫</span></span><br><span class="line">    <span class="keyword">FROM</span> base</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拷贝 装依赖阶段 生成的 node_modules 文件夹到工作目录下</span></span><br><span class="line">    <span class="keyword">COPY</span><span class="language-bash"> --from=install <span class="variable">$APP_PATH</span>/node_modules ./node_modules</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入镜像的工作目录下</span></span><br><span class="line">    <span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 启动</span></span><br><span class="line">    <span class="keyword">CMD</span><span class="language-bash"> yarn start</span></span><br></pre></td></tr></table></figure>
<h2 id="github-的-actions-构建镜像问题"><a class="header-anchor" href="#github-的-actions-构建镜像问题"></a>github 的 actions 构建镜像问题</h2>
<p>github 提供的 actions，每次都是一个干净的实例，什么意思，就是每次执行，都是干净的机器，这会导致一个问题，会导致 docker 没法使用缓存，那有没有解决办法呢，我想到了两种解决办法：</p>
<ol>
<li>
<p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Fdocker%2Fbuild-push-action%2Fblob%2Fmaster%2Fdocs%2Fadvanced%2Fcache.md">docker 官方提供的 action 缓存方案</a></p>
<p>我用的是 Github cache 方案</p>
</li>
<li>
<p>自托管 actions 运行机器</p>
<p>相当于 gitlab 的 runner 一样，自己提供运行器，自己提供的就不会每次都是干净的机器，<a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Factions%2Fhosting-your-own-runners%2Fabout-self-hosted-runners%23requirements-for-self-hosted-runner-machines">详情看 actions 官方文档</a></p>
</li>
<li>
<p>先构建一个已经安装好依赖包的镜像，然后基于此镜像再次构建，相当于多阶段构建，把前两个阶段构建的镜像产物推送到镜像仓库，再以这个镜像为基础去构建后续部分。借助镜像仓库存储基础镜像从而达到缓存的效果（此方案来源于评论里的大佬）</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以这个镜像为基础去构建，这个镜像是已经装好项目依赖的镜像并推送到镜像仓库里，这里从镜像仓库拉下来</span></span><br><span class="line"><span class="keyword">FROM</span> project-base-image:latest</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> yarn start</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Examples"><a class="header-anchor" href="#Examples"></a>Examples</h1>
<h2 id="Vue-app"><a class="header-anchor" href="#Vue-app"></a>Vue app</h2>
<h3 id="Dockerfile-2"><a class="header-anchor" href="#Dockerfile-2"></a>Dockerfile</h3>
<h4 id="使用node的alpine"><a class="header-anchor" href="#使用node的alpine"></a>使用node的alpine:</h4>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># build stage</span></span><br><span class="line"><span class="comment"># FROM node:14.20.1-slim  as build-stage</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">14.16</span>.<span class="number">0</span>-alpine3.<span class="number">13</span> AS build-stage</span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> maintainer=<span class="string">&quot;LYK-love&quot;</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package*.json ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> node -v &amp;&amp; npm -v \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; npm config <span class="built_in">set</span> registry http://r.cnpmjs.org/ \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; npm install </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># production stage</span></span><br><span class="line"><span class="comment"># FROM nginx:1.21.5 as production-stage</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:<span class="number">1.21</span>.<span class="number">5</span>-alpine as production-stage</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> nginx -v</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build-stage /app/dist/ /usr/share/nginx/html/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build-stage /app/default.conf /etc/nginx/conf.d/default.conf</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;nginx&quot;</span>,<span class="string">&quot;-g&quot;</span>,<span class="string">&quot;daemon off;&quot;</span> ]</span></span><br></pre></td></tr></table></figure>
<p>我实验了一下, 如果全都使用标准镜像(<code>node:14.20.1-slim</code> +  <code>nginx:1.21.5</code> ), 则镜像总大小为151.42MB. 而全都使用alpine镜像后, 总大小为39.03MB, 这是惊人的提升.</p>
<h4 id="使用alpine-linux-2"><a class="header-anchor" href="#使用alpine-linux-2"></a>使用alpine linux</h4>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apk add --no-cache --update nodejs=14.20.0-r0 npm=14.20.0-r0 \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; npm config <span class="built_in">set</span> registry http://r.cnpmjs.org/ --production</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ENV NODE_ENV production</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> base AS build-stage</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package*.json ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> node -v &amp;&amp; npm -v \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; npm install </span></span><br><span class="line">    <span class="comment"># &amp;&amp; npm install -g @vue/cli@5.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># production stage</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:<span class="number">1.21</span>.<span class="number">5</span>-alpine as production-stage</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build-stage /app/dist/ /usr/share/nginx/html/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build-stage /app/default.conf /etc/nginx/conf.d/default.conf</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;nginx&quot;</span>,<span class="string">&quot;-g&quot;</span>,<span class="string">&quot;daemon off;&quot;</span> ]</span></span><br></pre></td></tr></table></figure>
<p>总体大小为39.03MB, 感觉反而不如node-alpine呢...... 为啥啊??</p>
<h3 id="dockerignore"><a class="header-anchor" href="#dockerignore"></a>.dockerignore</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Dependency directory</span><br><span class="line"># https://www.npmjs.org/doc/misc/npm-faq.html#should-i-check-my-node_modules-folder-into-git</span><br><span class="line">node_modules</span><br><span class="line">.DS_Store</span><br><span class="line">dist</span><br><span class="line"></span><br><span class="line"># node-waf configuration</span><br><span class="line">.lock-wscript</span><br><span class="line"></span><br><span class="line"># Compiled binary addons (http://nodejs.org/api/addons.html)</span><br><span class="line">build/Release</span><br><span class="line">.dockerignore</span><br><span class="line">Dockerfile</span><br><span class="line">*docker-compose*</span><br><span class="line"></span><br><span class="line"># Logs</span><br><span class="line">logs</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"># Runtime data</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">*.suo</span><br><span class="line">*.ntvs*</span><br><span class="line">*.njsproj</span><br><span class="line">*.sln</span><br><span class="line">*.sw*</span><br><span class="line">pids</span><br><span class="line">*.pid</span><br><span class="line">*.seed</span><br><span class="line">.git</span><br><span class="line">.hg</span><br><span class="line">.svn</span><br></pre></td></tr></table></figure>
<h3 id="Commands"><a class="header-anchor" href="#Commands"></a>Commands</h3>
<ol>
<li>
<p>build:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t Frontend_VolatileReborn . </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>run:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it -p 8080:80 --rm --name Frontend_VolatileReborn Frontend_VolatileReborn:latest </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>visit: localhost:8080</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dune</title>
    <url>/2021/11/03/Dune/</url>
    <content><![CDATA[<p>《沙丘》： 9.0/10</p>
<span id="more"></span>
<p>《沙丘》电影版对视听的注重更甚于叙事,每一帧都完美, 宏大, 肃穆. 观众或许会在复杂的剧情中迷失,但这无关紧要,他们只需要坐在椅子上,放空身心,静静享受画面的震撼.</p>
<p>《沙丘》没有致力于讲一个故事,而是营造一个氛围,沙丘世界的荒凉肃穆的氛围,这是独属于《沙丘》电影,属于维伦纽瓦的氛围. 这是明智的选择,因为原著在21世纪早已落伍了,当时的科幻鼻祖之一,如今看来只是部政治宫斗,沙丘故事( 包括基地在内的一众早期科幻故事 )无非是将宫斗剧从地球搬到了太空, 其思想内核也与科幻没有什么关系. 此次的电影化, 导演一方面老老实实地讲述了原著剧情,让慕原著名而来的观众不觉为何,又将表现的侧重点放在气氛,场景的营造上,注重纯粹视听的表达, 使电影不囿于小说的平庸. ,正如文艺复兴对于古希腊文化的发掘是为了利用先贤发扬自己的思想一样, 《沙丘》电影只是对沙丘文本的一次利用,其最终目的是完成导演和剧组想要的, 一个宏大荒凉壮丽的星空舞台.</p>
<p>维伦纽瓦与雷德利斯科特不同的地方在于, 属于老一辈人的雷德利斯科特, 是将科幻作品作为严肃的题材,去发掘其内核的, 也就是说,他尝试讲好一个故事. 《银翼杀手》就是这种严肃的哲学内核和美丽的科幻幻想的产物. 而维伦纽瓦不试图讲好一个故事了,他只负责将故事老老实实地讲完,然后在视听方面发挥才华, 可以说, 维导的科幻没有什么严肃的( 像雷德利斯科特那样, 沉重的 )内核, 这并不是贬低维导 ----- 表现和意义, 本身就是电影这一综合艺术的两极. 极致的视听塑造, 也是一种艺术.</p>
]]></content>
      <categories>
        <category>Art</category>
      </categories>
      <tags>
        <tag>Movie</tag>
      </tags>
  </entry>
  <entry>
    <title>Empirical Software Engineering</title>
    <url>/2022/06/24/Empirical-Software-Engineering/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Philosophical Stances</li>
<li>Empirical methods</li>
<li>Research Measurements</li>
</ul>
<span id="more"></span>
<h1 id="Philosophical-Stances"><a class="header-anchor" href="#Philosophical-Stances"></a>Philosophical Stances</h1>
<ul>
<li>
<p>Positivism(实证主义):</p>
<ul>
<li>all knowledge must be based on logical inference from a set ofbasic observable facts</li>
</ul>
</li>
<li>
<p>Constructivism(建构主义):</p>
<ul>
<li>scientific knowledge CANNOT be separated from its human/social context</li>
</ul>
</li>
<li>
<p>Transformative/Participatory(改造/参与性):</p>
<ul>
<li>research needs to be related with a political agenda 研究需要与政治议程有关</li>
</ul>
</li>
<li>
<p>Pragmatism(实用主义):</p>
<ul>
<li>all knowledge is approximate and incomplete and its value depends on the methods by which it was obtained</li>
</ul>
</li>
</ul>
<p><strong>不同哲学立场对应不同的实证研究方法：</strong></p>
<ul>
<li>Positivism: Experiments, Survey,Confirmatory case studies</li>
<li>Constructivism: Ethnographies, Exploratory case studies</li>
<li>Advocacy/Participatory: Action research, Interview</li>
<li>Pragmatism: Mixed methods: Experiments, Case studies, Survey, Action research</li>
</ul>
<h1 id="Empirical-methods"><a class="header-anchor" href="#Empirical-methods"></a>Empirical methods</h1>
<table>
<thead>
<tr>
<th><strong>Empirical Method</strong></th>
<th><strong>Precondition</strong></th>
<th><strong>Sampling</strong></th>
<th><strong>Challenges</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Experiments</strong></td>
<td>A clear hypothesis that guides the entire experimental design</td>
<td>Random</td>
<td>Control of variables except the chosen independent ones</td>
</tr>
<tr>
<td><strong>Case Studies</strong></td>
<td>A clear RQ concerned with how or why certain phenomena occur</td>
<td>有目的取样</td>
<td>Data collection &amp; analysis is more open to interpretation and researcher bias</td>
</tr>
<tr>
<td><strong>Survey Research</strong></td>
<td>A clear RQ that asks about the nature of a particular target population</td>
<td>从目标群体中选择</td>
<td>Control for sampling bias<br>Low response rates<br>Question design to yield valid data</td>
</tr>
<tr>
<td><strong>Ethnographies</strong></td>
<td>A clear RQ that focuses on the cultural practices of a community w/o any pre-existing theories</td>
<td>Chain or representative</td>
<td>Detailed observation , data collection &amp; analysis while avoiding preconceptions</td>
</tr>
<tr>
<td><strong>Action Research</strong></td>
<td>A problem owner willing to collaborate to both identify a problem and engage in an effort to solve it</td>
<td>n/a</td>
<td>Immaturity as an empirical method</td>
</tr>
</tbody>
</table>
<h1 id="Research-Measurements"><a class="header-anchor" href="#Research-Measurements"></a>Research Measurements</h1>
<p>不同的实证研究方法，如experiment, case study, survey, 都有自己的度量，这里列出最general的度量</p>
<h2 id="Formalism"><a class="header-anchor" href="#Formalism"></a>Formalism</h2>
<ul>
<li>
<p>Immersion approaches</p>
<ul>
<li>rely more on researchers’ interpretive skills •</li>
</ul>
</li>
<li>
<p>Editing approaches</p>
<ul>
<li>includefewaprioricodesbasedonfindingsofthe researcher during the analysis</li>
</ul>
</li>
<li>
<p>Template approaches</p>
<ul>
<li>more formal with more a priori based on research questions</li>
</ul>
</li>
<li>
<p>Quasi-statistical approaches</p>
<ul>
<li>much formalized, e.g., word frequency analysis</li>
</ul>
</li>
</ul>
<h2 id="Validity"><a class="header-anchor" href="#Validity"></a>Validity</h2>
<ul>
<li>
<p>Construct Validity:</p>
<ul>
<li>to what extent the measures really represent what is investigated by the research questions</li>
</ul>
</li>
<li>
<p>Criterion validity:</p>
<ul>
<li>how well the responses for the particular tests match others used in the field, or responses for different tests that should be correlated</li>
</ul>
</li>
<li>
<p>Predictive validity</p>
<ul>
<li>if a response can be shown to be accurately predictive of the intended phenomenon</li>
</ul>
</li>
<li>
<p>Content validity</p>
<ul>
<li>establishing acceptance that a construct measures what it claims to</li>
</ul>
</li>
<li>
<p>Face validity</p>
<ul>
<li>a cursory review of items by untrained judges</li>
</ul>
</li>
<li>
<p>Internal Validity</p>
<ul>
<li>whether one factor affects an investigated factor</li>
</ul>
</li>
<li>
<p>External validity</p>
<ul>
<li>to what extent it is able to generalize the findings</li>
</ul>
</li>
</ul>
<h2 id="Reliability"><a class="header-anchor" href="#Reliability"></a>Reliability</h2>
<p>to what extent the data and the analysis are dependent on the specific researchers</p>
<ul>
<li>
<p>Test-retest (intra-observer)</p>
<ul>
<li>if the same person responds to a survey twice, how likely to get the same answers each time?</li>
</ul>
</li>
<li>
<p>Alternate form reliability</p>
<ul>
<li>rewording or re-ordering questions in different versions of the questionnaire</li>
</ul>
</li>
<li>
<p>Inter-observer (inter-rater)</p>
<ul>
<li>the reliability of surveys that involve a (group) of trained person completing a survey instrument based on their own observations</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
      <tags>
        <tag>Empirical SE</tag>
      </tags>
  </entry>
  <entry>
    <title>Finite Machine</title>
    <url>/2022/09/11/Finite-Machine/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Intro</li>
<li>NFA</li>
<li>DFA</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<p>Finite-state machines can model a large number of problems, among which are <strong>electronic design automation</strong>,<strong>communication protocol design</strong>, <strong>parsing</strong> and other engineering applications.</p>
<p>FA和状态转换图本质上相同</p>
<p>NFA, DFA, RE是等价的</p>
<h1 id="NFA"><a class="header-anchor" href="#NFA"></a>NFA</h1>
<h2 id="Def"><a class="header-anchor" href="#Def"></a>Def</h2>
<p>NFA( 不确定性有限状态机 ) 是一个五元组 A = (Σ, $S$, $s_0$ , δ, F ):</p>
<ol>
<li>字母表  $\sum$  ( $\epsilon \notin \sum$ )</li>
<li>有穷的状态集合 S</li>
<li>唯一的初始状态 $s_0 \in S$</li>
<li>状态转移函数 δ
<ul>
<li>$δ : S × (Σ ∪ {ε}) → 2^S$</li>
<li>这里$2^S$定义为$S$的幂集</li>
</ul>
</li>
<li>接受状态集合 $F \subseteq   S$</li>
</ol>
<h2 id="Language"><a class="header-anchor" href="#Language"></a>Language</h2>
<ul>
<li>由一个NFA $A$定义(接受)的语言是从开始状态到某个接受状态的所有路径上的符号串集合，称为$L(A)$</li>
</ul>
<ul>
<li>一个NFA接受输入字符串x，当且仅当对应的 转换图中存在一条从开始状态到某个接受状态 的路径，使得该路径中各条边上的标号组成符 号串x (路径中可能包含ε边)</li>
<li>只要存在从开始状态到接受状态的路径，符号串就认为被NFA接受</li>
<li>约定: 所有没有对应出边的字符默认指向一个不存在的 <code>dead state</code></li>
</ul>
<h1 id="DFA"><a class="header-anchor" href="#DFA"></a>DFA</h1>
<h2 id="Def-2"><a class="header-anchor" href="#Def-2"></a>Def</h2>
<p>一个NFA被称为DFA，如果:</p>
<ul>
<li>没有$\epsilon$之上的转换动作, 即标记为$\epsilon$的边, 即$δ : S × (\sum) → 2^S$</li>
<li>对于每个状态s和每个输入符号a, 有且只有一条标号为a的边</li>
</ul>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Compilers</tag>
      </tags>
  </entry>
  <entry>
    <title>EulerOS</title>
    <url>/2022/05/05/EulerOS/</url>
    <content><![CDATA[<p>Outline：</p>
<p>Introduction for EulerOS， 用于Linux考试</p>
<span id="more"></span>
<p>2019年EulerOS被推送到开源社区，名为openEuler</p>
<p>OpenEuler是一个开源的Linux发行版，支持Arm, x86, RISC-V等多种处理器架构</p>
<p>OpenEuler在多核调度技术，软硬件协同、轻量级虚拟化、指令集优化和智能优化引擎等方面做了增强</p>
<p>所有开发者、企业、商业组织都可以使用openEuler社区版本，也可以基于社区版本 发布自己二次开发的操作系统版本</p>
<p>线程间通信ITC：</p>
<ul>
<li>互斥机制主要通过自旋锁实现，Euler提供了NUMA感知队列自旋锁实现互斥机制，减少了NUMA体系结构中使用自旋锁的开销</li>
<li>同步机制主要使用信号量实现，Euler提供了up和down原语</li>
<li>Euler还增强了两种ITC机制：
<ul>
<li>共享内存</li>
<li>消息传递</li>
</ul>
</li>
</ul>
<p>openEuler内存页相关说明</p>
<ul>
<li>
<p>页表一般存储在一个地址连续的内存中，且能随机访问，以快速查找页表中相应的记录。在open Euler中，各级页表的表项大小为<strong>8B</strong></p>
</li>
<li>
<p>页表的查询通常由与用的硬件内存管理单元(Memory Management Unit，MMU)快速完成，然 后交给OS完成(建表、设置基址寄存器、访存管理)</p>
</li>
<li>
<p>openEuler<strong>将标准大页封装为一个伪文件系统</strong>(hugetlbfs)提供给用户程序申请并访问。</p>
</li>
<li>
<p>操作系统需要依据一定的页置换策略决定将哪些页进行换出，openEuler采用Least Recently Used</p>
<p>(<strong>LRU</strong>)最近最久未使用策略实现页选择换出。</p>
</li>
<li>
<p>页在未来被访问的概率只能预测，不能精准判断</p>
</li>
</ul>
<p>毕昇JDK:一款针对ARM优化的高性能 OpenJDK 发行版，SpecJBB 提升20%</p>
<ul>
<li>ARM64优化 :dmb指令消除等提升新能</li>
<li>快速序列化技术:提升序列化，反序列化性能</li>
<li>GC优化 :让系统减少卡顿</li>
</ul>
<p>鲲鹏处理器是基于ARMv8-64位RISC指令集开发的通用处理器，使用大量寄存器：通用X0 - X30( 31个， 64位 ) + 特殊寄存器 + 系统寄存器</p>
<p>Euler还通过插件，对鲲鹏处理器做了优化，有：</p>
<ul>
<li>对称/非对称加密</li>
<li>数字签名</li>
<li>压缩解压缩等算法，用于加速SSL/TLS应用和数据压缩</li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>GPG</title>
    <url>/2022/02/10/GPG/</url>
    <content><![CDATA[<p>useful encryption tool</p>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<p><strong>Pretty Good Privacy (PGP)</strong> is a nice example of an e-mail encryption scheme written by Phil Zimmermann in 1991 [PGP 2020]. Depending on the version, the PGP soft- ware uses MD5 or SHA for calculating the message digest; CAST, triple-DES, or IDEA for symmetric key encryption; and RSA for the public key encryption.</p>
<p>不过PGP是商用软件, 因此自由软件基金会( FSF )开发了PGP的替代品GnuPG, 也就是GPG. 这两个软件事实上差不多, 我们接下来介绍GPG.</p>
<p>GPG( or PGP )的实现原理参见拙著<a href="https://lyk-love.cn/2022/08/28/Security-in-Internet/">Security in Internet</a> --&gt; Application Layer: Securing E-Mail</p>
<h1 id="install"><a class="header-anchor" href="#install"></a>install</h1>
<ul>
<li>输入<code>gpg --help</code>可以查看你是否已经安装</li>
</ul>
<h1 id="generate-GPG-key"><a class="header-anchor" href="#generate-GPG-key"></a>generate GPG key</h1>
<ul>
<li><code>gpg --full-generate-key</code></li>
<li>按照提示输入信息，密钥类型使用默认的<code>RSA and RSA</code>即可。密钥长度推荐使用4096,</li>
<li>然后输入你的个人信息，这样密钥就会绑定到你的邮箱，要使用和 Git 提交相同的邮箱地址。</li>
<li>最后输入<strong>私钥的密码</strong>，用来提取这个密钥。这样一个 GPG 密钥就生成好了</li>
</ul>
<h1 id="generate-revocation-certificate"><a class="header-anchor" href="#generate-revocation-certificate"></a>generate revocation certificate</h1>
<ul>
<li><code>gpg --gen-revoke [用户ID]</code>:生成一张&quot;撤销证书&quot;，以备以后密钥作废时，可以请求外部的公钥服务器撤销你的公钥</li>
</ul>
<h1 id="key-management"><a class="header-anchor" href="#key-management"></a>key management</h1>
<h2 id="list-keys"><a class="header-anchor" href="#list-keys"></a>list  keys</h2>
<h3 id="public-key"><a class="header-anchor" href="#public-key"></a>public key</h3>
<ul>
<li>
<p><code>--list-keys</code>: 列出系统中已有的公钥</p>
<p>显示如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/home/lyk/.gnupg/pubring.kbx</span><br><span class="line">----------------------------</span><br><span class="line">pub   rsa4096 2022-02-10 [SC]</span><br><span class="line">      DFD9A8D9CF0BD747BE1BDBD839AD95E8DF842459</span><br><span class="line">uid           [ultimate] LYK-love (gpg for lyk) &lt;your_email&gt;</span><br><span class="line">sub   rsa4096 2022-02-10 [E]</span><br></pre></td></tr></table></figure>
<p>第一行： <strong>公钥</strong>文件名（<code>pubring.kbx</code>）</p>
<p>第二行： 公钥特征（4096位，Hash字符串和生成时间）</p>
<p>第三行： 密钥保质期，用户id， comment, email</p>
<p>第四行： 私钥特征</p>
</li>
</ul>
<h3 id="private-key"><a class="header-anchor" href="#private-key"></a>private key</h3>
<ul>
<li>
<p><code>--list-secret-keys --keyid-format LONG &lt;your_email&gt;</code>： 列出私钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里以别人的为例</span></span><br><span class="line">sec   rsa4096/39AD95E8DF842459 2022-02-10 [SC]</span><br><span class="line">      DFD9A8D9CF0BD747BE1BDBD839AD95E8DF842459</span><br><span class="line">uid                 [ultimate] LYK-love (gpg for lyk) &lt;your_email&gt;</span><br><span class="line">ssb   rsa4096/051FBEBE8BDED88B 2022-02-10 [E]</span><br></pre></td></tr></table></figure>
<p><code>39AD95E8DF842459</code>就是用户ID的hash, 等价于用户ID（<code>LYK-love</code>  or <code>&lt;your_email&gt;</code>）</p>
</li>
</ul>
<h2 id="export-keys"><a class="header-anchor" href="#export-keys"></a>export keys</h2>
<ul>
<li>
<p><code>gpg --armor --output public-key.txt  --export pub [用户ID]</code>： 导出该用户ID的公钥</p>
<ul>
<li>
<p>公钥文件（<code>pubring.kbx</code>）以二进制形式储存，<code>-armor</code>可以将其转换为ASCII码显示</p>
</li>
<li>
<p><code>--output outputfile_name</code>:  指定输出位置</p>
</li>
<li>
<p><code>export-secret-keys</code>：导出私钥：</p>
<p><code>gpg --armor --output private-key.txt --export-secret-keys</code></p>
</li>
</ul>
</li>
</ul>
<h2 id="upload-public-key"><a class="header-anchor" href="#upload-public-key"></a>upload public key</h2>
<p>公钥服务器是网络上专门储存用户公钥的服务器</p>
<ul>
<li>
<p><code>gpg --send-keys [用户ID] --keyserver hkp://subkeys.pgp.net</code>：将公钥传到服务器<code>subkeys.pgp.net</code>，通过交换机制，所有的公钥服务器最终都会包含该公钥</p>
</li>
<li>
<p><code>gpg --fingerprint [用户ID]</code>：生成公钥指纹</p>
<ul>
<li>由于公钥服务器没有检查机制，任何人都可以用你的名义上传公钥，所以没有办法保证服务器上的公钥的可靠性。通常，因此需要公布一个公钥指纹，让其他人核对下载到的公钥是否为真</li>
</ul>
</li>
</ul>
<h2 id="import-public-key"><a class="header-anchor" href="#import-public-key"></a>import public key</h2>
<ul>
<li>
<p>除了生成自己的密钥，还需要将他人的公钥或者你的其他密钥输入系统</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gpg --import [密钥文件]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>为了获得他人的公钥，可以让对方直接发给你，或者到公钥服务器上寻找</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gpg --keyserver hkp://subkeys.pgp.net --search-keys [用户ID]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>正如前面提到的，我们无法保证服务器上的公钥是否可靠，下载后还需要用其他机制验证</p>
<h1 id="encrypt-decrypt"><a class="header-anchor" href="#encrypt-decrypt"></a>encrypt &amp;&amp; decrypt</h1>
<h2 id="encrypt"><a class="header-anchor" href="#encrypt"></a>encrypt</h2>
<p>假定有一个文本文件demo.txt，对它加密:</p>
<ul>
<li><code>gpg --recipient [用户ID] --output demo.en.txt --encrypt demo.txt</code></li>
<li><code>--encrypt</code>: 指定加密源文件</li>
<li><code>--recipient</code>：指定<strong>接收者</strong>的公钥</li>
<li><code>--output</code>： 指定加密后的文件名</li>
</ul>
<h2 id="decrypt"><a class="header-anchor" href="#decrypt"></a>decrypt</h2>
<p>对方收到加密文件以后，就用自己的私钥解密。</p>
<ul>
<li>
<p><code>gpg --decrypt demo.en.txt --output demo.de.txt</code></p>
<ul>
<li><code>--decrypt</code>： 指定需要解密的文件</li>
<li><code>--output</code>“： 指定解密后生成的文件</li>
</ul>
</li>
<li>
<p>GPG允许省略decrypt的参数:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gpg demo.en.txt</span><br></pre></td></tr></table></figure>
<p>运行上面的命令以后，解密后的文件内容直接显示在STDOUT</p>
</li>
</ul>
<h1 id="signiture"><a class="header-anchor" href="#signiture"></a>signiture</h1>
<h2 id="file-signiture"><a class="header-anchor" href="#file-signiture"></a>file signiture</h2>
<p>有时，我们不需要加密文件，只需要对文件签名，表示这个文件确实是我本人发出的</p>
<ul>
<li>
<p><code>gpg --sign demo.txt</code>:  在当前目录下生成<code>demo.txt.gpg</code>文件，这就是签名后的文件,默认采用二进制储存</p>
<ul>
<li><code>--clearsign</code>: 生成ASCII码的签名文件（ <code>demo.txt.asc</code>， 后缀名asc表示该文件是ASCII码形式 ）</li>
</ul>
</li>
<li>
<p><code>gpg --detach-sign demo.txt</code>： 生成单独的签名文件，与文件内容分开存放</p>
<p>运行上面的命令后，当前目录下生成一个单独的签名文件demo.txt.sig。该文件是二进制形式的，如果想采用ASCII码形式，要加上armor参数。</p>
<p><code>gpg --armor --detach-sign demo.txt</code></p>
</li>
</ul>
<h2 id="verify-signiture"><a class="header-anchor" href="#verify-signiture"></a>verify signiture</h2>
<p>我们收到别人签名后的文件，需要用对方的公钥验证签名是否为真,<code>--verify</code>用来验证</p>
<p><code>gpg --verify demo.txt.asc demo.txt</code></p>
<p>举例来说，<a href="https://openvpn.net/index.php/open-source/downloads.html">openvpn</a>网站就提供每一个下载包的gpg签名文件。你可以根据它的<a href="https://openvpn.net/index.php/open-source/documentation/sig.html">说明</a>，验证这些下载包是否为真</p>
<h1 id="signiture-encryption"><a class="header-anchor" href="#signiture-encryption"></a>signiture + encryption</h1>
<p>如果想同时签名和加密，可以使用下面的命令：</p>
<p><code>gpg --local-user [发信者ID] --recipient [接收者ID] --armor --sign --encrypt demo.txt</code></p>
<ul>
<li>--<code>local-user</code>： 用发信者的名字作为私钥签名，该option必须放在前面。 该option是可选的，默认采用<code>default- key</code></li>
<li><code>--recipient</code>： 指定用接收者的公钥加密</li>
<li>--<code>armor</code>： 采用ASCII码形式显示</li>
<li><code>--sign</code>： 表示需要签名</li>
<li><code>--encrypt</code>： 指定源文件</li>
</ul>
<h1 id="将-GPG-密钥与-Git-关联"><a class="header-anchor" href="#将-GPG-密钥与-Git-关联"></a><strong>将 GPG 密钥与 Git 关联</strong></h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.signingkey 66DD4800155F7A2B</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">git config user.signingkey 66DD4800155F7A2B</span><br></pre></td></tr></table></figure>
<h2 id="Git-提交启用签名"><a class="header-anchor" href="#Git-提交启用签名"></a>Git 提交启用签名</h2>
<ul>
<li>
<p>在提交时启用签名很简单，只要在<code>git commimt</code>命令中加上<code>-S</code>选项即可。</p>
</li>
<li>
<p>1Git 提交时，使用 -S 标记进行 GPG 签名：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -S -m “commit message&quot;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Git 可以设置默认使用 GPG 签名提交：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global commit.gpgsign true</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">git config commit.gpgsign true</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="解决“error-gpg-数据签名失败”"><a class="header-anchor" href="#解决“error-gpg-数据签名失败”"></a>解决“error: gpg 数据签名失败”</h2>
<ul>
<li>
<p>commit报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">error: gpg 数据签名失败</span><br><span class="line">fatal: 写提交对象失败</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>solution：</p>
<ol>
<li>
<p>在<code>.zshrc</code>里面加入一行代码 <code>export GPG_TTY=$(tty)</code></p>
</li>
<li>
<p>重启 gpg-agent: 第一次配置，必须重启，否则签名会失败:</p>
<p><code>gpgconf –kill gpg-agent</code></p>
</li>
<li>
<p>重启终端（或者新开一个终端标签）</p>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2023/02/08/Git/</url>
    <content><![CDATA[<p>全面介绍了Git的原理和使用</p>
<span id="more"></span>
<p>ref:</p>
<ul>
<li>
<p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰的教程</a></p>
</li>
<li>
<p><a href="https://wangchujiang.com/git-tips/">git使用技巧和笔记</a></p>
</li>
<li>
<p><a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Branching</a></p>
</li>
</ul>
<p>Tools:</p>
<ul>
<li><a href="https://gitexplorer.com/">Git Command Explorer</a></li>
</ul>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<ul>
<li>Git是Linus用<strong>C</strong>写的分布式版本管理系统</li>
</ul>
<blockquote>
<p>集中式:</p>
<ul>
<li>CVS[^1]:最早的开源且免费的集中式版本控制系统&lt;由于自身设计问题,会造成提交文件不完整,版本库莫名损坏的情况</li>
<li>SVN[^2]:同样开源且免费,修正了CVS的一些稳定性问题,是目前用得最多的集中式版本控制系统</li>
<li>ClearCase:IBM的,收费,又大又笨</li>
</ul>
</blockquote>
<blockquote>
<p>分布式:</p>
<ul>
<li>Git</li>
</ul>
</blockquote>
<p>[^1]: Concurrent Versions System<br>
[^2]:Apache Subversion</p>
<h2 id="创建版本库"><a class="header-anchor" href="#创建版本库"></a>创建版本库</h2>
<p>版本库:<em>repository</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in /c/Users/陆昱宽/Desktop/DOC/.git/</span><br></pre></td></tr></table></figure>
<p>自动生成<code>.git</code>目录, 用于跟踪管理版本库; 以及在 project 和 每个 module 中生成一个 <code>.gitgnore</code> 文件</p>
<h2 id="把文件添加到版本库"><a class="header-anchor" href="#把文件添加到版本库"></a>把文件添加到版本库</h2>
<p>所有版本控制系统,只能跟踪文本文件的改动,比如txt,网页,代码等. 而图片,视频这些二进制文件,虽然也能由版本控制系统管理,但没法跟踪文件的变化,就是说知道改了,但不知道改了啥.</p>
<p>微软的Word格式是二进制格式,所以版本控制文件没法跟踪Word文件的改动. Windows自带的记事本在保存UTF-8的文件时,会自动在其开头添加0xefbbbf（十六进制）的字符,因此会有许多问题,建议使用Notepad++ ,编码设为UTF-8 without BOM</p>
<p>编写一个<code>Git.md</code>文件,放到<code>Doc</code>目录下(子目录也行)</p>
<ol>
<li>
<p>stage file:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add Git.md</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>执行上面的命令,没有任何反馈,OK了,说明添加成功</p>
<ol start="2">
<li>再commit</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git  commit -m&#x27;1</span><br><span class="line">[master 45a4a38] 3</span><br><span class="line"> 1 file changed, 46 insertions(+)</span><br><span class="line"> create mode 100644 readme.txt</span><br></pre></td></tr></table></figure>
<p><code>46 insertions</code>：插入了46行内容</p>
<ul>
<li>
<p>Q:如果输入<code>git add Git.md</code>，得到错误<code>fatal: pathspec 'Git.md' did not match any files</code>。</p>
<p>A：添加某个文件时，该文件必须在当前目录下存在，用<code>ls</code>或者<code>dir</code>命令查看当前目录的文件，看看文件是否存在，或者是否写错了文件名。</p>
</li>
</ul>
<h1 id="基本操作"><a class="header-anchor" href="#基本操作"></a>基本操作</h1>
<h2 id="git-add"><a class="header-anchor" href="#git-add"></a>git add</h2>
<p>我们修改Git.md文件,运行<code>git.status</code>看看结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ git statusOn branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">        deleted:    &quot;\346\227\245\350\256\260.md&quot;</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        Diary.md</span><br><span class="line">        &quot;\344\271\220\350\260\261.md&quot;</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>
<p><code>git.status</code>命令可以展示仓库当前的状态,上面的输出告诉我们,<code>Git.md</code>被修改过了,但还没有准备提交的修改.</p>
<p>用<code>git  diff Git.md</code>能看到具体修改了什么内容:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git diff</span><br><span class="line">diff --git &quot;a/\346\227\245\350\256\260.md&quot; &quot;b/\346\227\245\350\256\260.md&quot;</span><br><span class="line">deleted file mode 100644</span><br><span class="line">index 4db3376..0000000</span><br><span class="line">--- &quot;a/\346\227\245\350\256\260.md&quot;</span><br><span class="line">+++ /dev/null</span><br><span class="line">@@ -1,179 +0,0 @@</span><br><span class="line">-　# Diary</span><br><span class="line">-</span><br><span class="line">-## 12 / 25</span><br><span class="line">-</span><br><span class="line">-　　圣诞夜中了两棵树,一棵二叉搜索树,一棵AVL树,另一棵B树没有开工,忙碌的一天。</span><br><span class="line">-</span><br><span class="line">-</span><br><span class="line">-</span><br><span class="line">-　## 12/26</span><br><span class="line">-</span><br><span class="line">-　　昨天凡人修仙传看到四点, 今天本打算写完微积分和计基的,但是没忍住看了一天小说</span><br></pre></td></tr></table></figure>
<p><code>git diff</code>顾名思义就是查看difference，显示的格式正是Unix通用的diff格式</p>
<p>知道了对<code>Git.md</code>作了什么修改后,再把它提交到仓库就放心多了. 提交修改和提交新文件一样是两步,</p>
<ol>
<li><code>git add</code></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add Git.md</span><br></pre></td></tr></table></figure>
<p>没有任何反应,在执行<code>git commit</code>之前,我们再运行<code>git status</code> 看看当前仓库的状态:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        modified:   Git.md</span><br></pre></td></tr></table></figure>
<p><code>git status</code>告诉我们,将要被提交的修改包括<code>Git.md</code> ,下一步就能放心提交了:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git commit -m&quot;4&quot;</span><br><span class="line">[master 4553e0a] 4</span><br><span class="line"> 1 file changed, 77 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>
<p>提交后,再用<code>git status</code>看看仓库的当前状态:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>
<p>Git告诉我们当前没有需要提交的修改,且工作目录是干净(working tree clean)的.</p>
<ul>
<li>windows下<code>commit</code>的message千万不能有中文,否则会乱码</li>
</ul>
<h2 id="版本回退"><a class="header-anchor" href="#版本回退"></a>版本回退</h2>
<p>先提交文件,message为&quot;origin&quot;;再输入&quot;初次修改&quot;并提交,message为&quot;chucixiugai&quot;;再输入&quot;再次修改&quot;<br>
并提交,message为&quot;再次修改&quot;.</p>
<p>现在,<code>Git.md</code>一共有三个版本(origin之前的不算)被提交到repository里了,</p>
<p>版本1:origin</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>(啥都没写)</p>
<p>版本2:chucixiugai</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">初次修改</span><br></pre></td></tr></table></figure>
<p>版本3:zaicixiugai</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">再次修改</span><br></pre></td></tr></table></figure>
<p>我们不可能记住一个文件每次都改了什么内容,版本控制系统肯定有某个命令可以告诉我们历史记录,Git中用<code>git log</code>命令查看:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 028637e47a974357debe623e8bb4d0ca5053db87 (HEAD -&gt; master)</span><br><span class="line">Author: 陆昱宽 &lt;191820133@ smail.nju.edu.cn&gt;</span><br><span class="line">Date:   Sun Feb 28 23:41:08 2021 +0800</span><br><span class="line"></span><br><span class="line">    zaicixiugai</span><br><span class="line"></span><br><span class="line">commit cdd92a630141982791273c123d60b3ce0ed09932</span><br><span class="line">Author: 陆昱宽 &lt;191820133@ smail.nju.edu.cn&gt;</span><br><span class="line">Date:   Sun Feb 28 23:40:30 2021 +0800</span><br><span class="line"></span><br><span class="line">    chucixiugai</span><br><span class="line"></span><br><span class="line">commit 914f04abce43f4517121ba10957d89bd9658432e</span><br><span class="line">Author: 陆昱宽 &lt;191820133@ smail.nju.edu.cn&gt;</span><br><span class="line">Date:   Sun Feb 28 23:39:31 2021 +0800</span><br><span class="line"></span><br><span class="line">    origin</span><br></pre></td></tr></table></figure>
<p><code>git log</code>命令显示最近到最远的全部提交日志,我们看最近三次,最近一次是<code>zaicixiugai</code>,上一次是<code>chuxixiugai</code>,再上一次是<code>origin</code>. 如果嫌输出信息太多不太好看,可以加上<code>--pretty=oneline</code>参数:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br><span class="line">028637e47a974357debe623e8bb4d0ca5053db87 (HEAD -&gt; master) zaicixiugai</span><br><span class="line">cdd92a630141982791273c123d60b3ce0ed09932 初次修改</span><br><span class="line">914f04abce43f4517121ba10957d89bd9658432e origin</span><br></pre></td></tr></table></figure>
<p>我们看到许多类似<code>028637e</code>的<code>commit id</code>(版本号),这是一个SHA1计算出的非常大的数字,用十六进制表示. SVN的版本号是1,2,3,4递增,因为SVN是集中式. Git是分布式,号码容易不够,所以用这种方式</p>
<p>每提交一个新版本，实际上Git就会把它们自动串成一条时间线。如果使用可视化工具查看Git历史，就可以更清楚地看到提交历史的时间线</p>
<p>现在我们把<code>Git.md</code>回退到上个版本<code>chucitijiao</code>. 首先,Git必须知道当前版本是哪个版本,在Git中,用<code>HEAD</code>(小写也可以)表示<strong>当前版本</strong>,即最近的提交<code>02863</code>,上个版本就是**<code>HEAD^</code><strong>,上上个版本就是<code>HEAD^^</code>,以此类推. 往前100个版本数不过来,可以写成</strong><code>HEAD~100</code>**.</p>
<p>用 <code>git reset</code>命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at cdd92a6 chucitijiao</span><br></pre></td></tr></table></figure>
<p>,<code>--hard</code>参数的意义之后再讲.</p>
<p>OK,已经被还原了</p>
<p>现在用<code>git log</code>看看当前版本库的提交日志:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit cdd92a630141982791273c123d60b3ce0ed09932 (HEAD -&gt; master)</span><br><span class="line">Author: 陆昱宽 &lt;191820133@ smail.nju.edu.cn&gt;</span><br><span class="line">Date:   Sun Feb 28 23:40:30 2021 +0800</span><br><span class="line"></span><br><span class="line">    chucixiugai</span><br><span class="line">    </span><br><span class="line">commit 914f04abce43f4517121ba10957d89bd9658432e </span><br><span class="line">Author: 陆昱宽 &lt;191820133@ smail.nju.edu.cn&gt;</span><br><span class="line">Date:   Sun Feb 28 23:39:31 2021 +0800</span><br><span class="line"></span><br><span class="line">    origin</span><br></pre></td></tr></table></figure>
<p>我们看不到最近的那个版本<code>zaicixiugai</code>了! 好比时间从21世纪穿越回了10世纪,当然看不到后面的历史了! 如果想回去,就要用<code>commit id</code>.</p>
<ol>
<li>如果还没关掉GIt窗口,可以把窗口往上翻,找到那个<code>zaicixiugai</code>的<code>commit id</code>是<code>028637e...</code>,于是可以指定回到未来的某个版本:</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reset --hard 0286</span><br><span class="line">HEAD is now at 028637e zaicixiugai</span><br></pre></td></tr></table></figure>
<p>版本号没必要写全,写前几位. Git会自动去找.</p>
<p>OK,已经回到未来了.</p>
<ol start="2">
<li>如果已经关掉窗口了,Git中有<code>git reflog</code>记录你的每一次命令:</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git reflog --pretty=oneline</span><br><span class="line">028637e (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 0286</span><br><span class="line">914f04a HEAD@&#123;1&#125;: reset: moving to head^</span><br><span class="line">cdd92a6 HEAD@&#123;2&#125;: reset: moving to HEAD^</span><br><span class="line">028637e (HEAD -&gt; master) HEAD@&#123;3&#125;: commit: zaicixiugai</span><br><span class="line">cdd92a6 HEAD@&#123;4&#125;: commit: 初次修改</span><br><span class="line">914f04a HEAD@&#123;5&#125;: commit: origin</span><br></pre></td></tr></table></figure>
<p><strong>小结</strong></p>
<ul>
<li><code>HEAD</code>指向的版本就是当前版本,这是个指针. 版本穿梭使用<code>git reset --hard commit_id</code></li>
<li>穿梭前,用<code>git log</code>可以查看提交历史,以便确定要回退到哪个版本.</li>
<li>要回到未来,可以用<code>git reflog</code>来确定要回到未来的哪个版本.</li>
<li>如果commit（提交）比较多，git log 的内容就会比较多；当满屏放不下，就会显示冒号，回车（往下滚一行）、空格（往下滚一页）可以继续查看剩余内容；<strong>退出</strong>：英文状态下 按 <strong>q</strong> 可以退出git log 状态。</li>
</ul>
<h2 id="工作区和暂存区"><a class="header-anchor" href="#工作区和暂存区"></a>工作区和暂存区</h2>
<p>Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念.</p>
<p><em>工作区(Working directory)</em><br>
就是在电脑里能看到的目录,如<code>Doc</code>文件夹就是一个工作区.</p>
<p><em>版本库(Eepository)</em><br>
工作区有一个隐藏目录<code>.git</code>,它不算作工作区,而是Git的版本库.</p>
<p>Git的版本库里存了许多东西,其中最重要的就是称为<em>stage</em>(或<em>index</em>)的<strong>暂存区</strong>,还有Git为我们自动创建的第一个<strong>分支</strong><code>master</code>,以及指向<code>master</code>的一个<strong>指针</strong>叫<code>HEAD</code></p>
<p>(所以版本库(包括暂存区和分支们)都在工作区里面,只是不算作工作区)</p>
<p><img data-src="https://www.liaoxuefeng.com/files/attachments/919020037470528/0" alt="git-repo"></p>
<p>分支和<code>HEAD</code>的概念暂且不表.</p>
<p>前面讲了我们把文件添加剂Git版本库时,是分两步的:</p>
<p>第一步用<code>git add</code>把文件修改添加到<strong>暂存区</strong>(stage)</p>
<p>第二步用<code>git commit</code>把<strong>暂存区</strong>的<strong>所有内容</strong>提交到<strong>当前分支</strong></p>
<p>因为我们创建Git版本库时,Git为我们自动创建了一个<code>master</code>分支,所以,现在<code>git commit</code>就是往<code>master</code>分支上提交更改.</p>
<p>需要提交的文件统统放到暂存区,然后,一次性提交暂存区(stage)的所有修改到当前分支</p>
<p>举例,先建个<code>readme.txt</code>提交到版本库,再在工作区(即Doc这个文件夹)里新增一个<code>LICENSE</code>文本文件,再对<code>readme.txt</code>做些修改(内容都随意). 先用<code>git status</code>看看状态:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">        modified:   readme.txt</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        LICENSE.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>
<p>Git告诉我们,<code>readme.txt</code>被修改了,这个修改没有被添加到暂存区,遑论分支了( changes not staged for commit). 而<code>LICENSE</code>这个文件还从来没被添加(add)过,所以其状态是<code>Untracked</code>. 由于没有修改被提交到暂存区,暂存区就是空的( no changes added to be commit).</p>
<p>现在用两次<code>git add</code>把把<code>readme.txt</code>和<code>LICENSE</code>都添加后，用<code>git status</code>再查看一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        new file:   LICENSE.txt</span><br><span class="line">        modified:   readme.txt</span><br></pre></td></tr></table></figure>
<p>现在,暂存区状态变成这样了:</p>
<p><img data-src="https://www.liaoxuefeng.com/files/attachments/919020074026336/0" alt="git-stage"></p>
<p>所以,<code>git add</code>命令就是把要提交的所有修改放到暂存区(stage),然后,执行<code>git commit</code>可以一次性把暂存区所有修改提交到分支. (注意暂存区不是被**&quot;清空&quot;**,而是&quot;安静&quot;了.暂存区中永远保留着上次add的版本)因此</p>
<p><img data-src="https://www.liaoxuefeng.com/files/attachments/919020100829536/0" alt="git-stage-after-commit"></p>
<p>一旦<strong>提交</strong>(注意是<code>commit</code>) 后,如果你对工作区又没有做任何修改,那么<strong>工作区</strong>就是clean的:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>关于<code>git diff</code>:</p>
<p>如果是输入<code>git diff</code>，查看到的是<strong>工作区和暂存区</strong>(上次git add 的内容)的不同，如果是<code>git diff --cached</code>，查看到的是<strong>暂存区和HEAD</strong>的不同。</p>
</li>
</ul>
<h2 id="撤销修改"><a class="header-anchor" href="#撤销修改"></a>撤销修改</h2>
<p>在<code>readme .txt</code>中添加了一行,但还没有<code>git add</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat readme.txt</span><br><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br><span class="line">My stupid boss still prefers SVN.</span><br></pre></td></tr></table></figure>
<p>现在想撤销最后一行,可以用 <code>git restore readme.txt</code>, 有两种情况:</p>
<ul>
<li><code>read.me.txt</code>自修改后还没有被放到暂存区,现在,撤销修改就回到和版本库一模一样的状态 .</li>
<li><code>readme.txt</code>已经添加到暂存区后,又做了修改. 现在,撤销修改就回到和添加到暂存区后的状态.</li>
</ul>
<p>总之,就是让该文件回到最近一次<code>add</code>时的状态(即 <strong>暂存区</strong>里的状态)</p>
<p>现在,看看<code>readme.txt</code>的内容:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat readme.txt</span><br><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br></pre></td></tr></table></figure>
<p>果然复原了.</p>
<p>如果我把那句话<code> git add</code>到暂存区了呢? ( 但还没有<code>commit</code>) ,先用<code>git status</code>查看一下,</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git restore --staged &lt;file&gt;...&quot; to unstage)</span><br><span class="line">        modified:   readme.txt</span><br></pre></td></tr></table></figure>
<p>git告诉我们,修改只是被添加到了暂存区,还没有被提交,可以用 <code>git restore --staged readme.txt</code>  把暂存区的修改撤销掉( unstage ),<strong>重新放回工作区</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat readme.txt</span><br><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br><span class="line">My stupid boss still prefers SVN.</span><br></pre></td></tr></table></figure>
<p>再用<code>git status</code>查看一下,现在暂存区是干净的,工作区有修改:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">        modified:   readme.txt</span><br></pre></td></tr></table></figure>
<p>我们要丢弃工作区的修改,就回到了上上步: <code>git restore readme.txt</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git restore readme.txt</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>
<p>Over!</p>
<p>如果我不仅把那句话<code>git add</code>了,我还<code>git commit</code>到了版本库, 我们可以用<em>版本回退</em>. 但如果你还把它<code>git push</code>到了 远程版本库,那就完蛋了.</p>
<h2 id="删除文件"><a class="header-anchor" href="#删除文件"></a>删除文件</h2>
<p>情况一: 工作区文件删除,无其它操作</p>
<ol>
<li><code>rm readme.txt</code></li>
</ol>
<p>可用命令<code>git restore readme.txt</code>恢复文件</p>
<p>情况二: 工作区文件删除,版本库文件删除</p>
<ol>
<li><code> rm readme.txt</code></li>
<li><code>git rm readme.txt</code></li>
<li><code>git commit -m&quot; remove readme.txt &quot;</code></li>
</ol>
<p>可用命令<code>git reset --hard HAED^</code>恢复文件( 回到哪个头要看情况,如果当前分支内有这个文件,那就可以回到当前版本,不用去上个版本)</p>
<p><code>rm</code>是DOS命令,在各个shell都可以用. 用在git仓库中,是删除工作区的文件,用 <code>git restore readme.txt</code>可以还原. 而<code>git rm readme.txt</code>是删除工作区和暂存区的文件, <strong>由于<code>git restore</code>的原理是将工作复原为暂存区中的版本</strong>,而暂存区中该文件也被删除了,所以恢复不了, 分支里还有这个文件,所以用版本回退<code>git reset --hard HEAD^</code></p>
<h2 id="git-pull"><a class="header-anchor" href="#git-pull"></a>git pull</h2>
<p>1、将远程指定分支 拉取到 本地指定分支上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>
<p>2、将远程指定分支 拉取到 本地当前分支上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin &lt;远程分支名&gt;</span><br></pre></td></tr></table></figure>
<p>3、将与本地当前分支同名的远程分支 拉取到 本地当前分支上(需先关联远程分支，方法见文章末尾)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>
<p>在克隆远程项目的时候，本地分支会自动与远程仓库建立追踪关系，可以使用默认的origin来替代远程仓库名</p>
<h3 id="pull强制覆盖本地文件"><a class="header-anchor" href="#pull强制覆盖本地文件"></a>pull强制覆盖本地文件</h3>
<p>ref： <a href="https://www.jianshu.com/p/1ac2e1f99166">https://www.jianshu.com/p/1ac2e1f99166</a></p>
<blockquote>
<p><strong>重要提示：如果您有任何本地更改，将会丢失。无论是否有--hard选项，任何未被推送的本地提交都将丢失。</strong><br>
如果您有任何未被Git跟踪的文件(例如上传的用户内容)，这些文件将不会受到影响。<br>
下面是正确的方法：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git fetch --all</span><br></pre></td></tr></table></figure>
<p>然后，你有两个选择：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure>
<p>或者如果你在其他分支上：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">git reset --hard origin/&lt;branch_name&gt;</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<p><code>git fetch</code>从远程下载最新的，而不尝试合并或rebase任何东西。</p>
<p>然后<code>git reset</code>将主分支重置为您刚刚获取的内容。 <code>--hard</code>选项更改工作树中的所有文件以匹配<code>origin/master</code>中的文件</p>
<p>在重置之前可以通过从master创建一个分支来维护当前的本地提交：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git branch <span class="keyword">new</span>-branch-to-save-current-commits</span><br><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure>
<p>在此之后，所有旧的提交都将保存在new-branch-to-save-current-commits中。然而，没有提交的更改(即使staged)将会丢失。确保存储和提交任何你需要的东西。</p>
<h2 id="git-push"><a class="header-anchor" href="#git-push"></a>git push</h2>
<p>1、将本地当前分支 推送到 <strong>远程指定分支上</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure>
<p>2、将本地当前分支 推送到 <strong>与本地当前分支同名的远程分支</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin &lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>
<p>3、将本地当前分支 推送到 与本地当前分支同名的远程分支上(需先关联远程分支])</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure>
<h3 id="修改commit信息"><a class="header-anchor" href="#修改commit信息"></a>修改commit信息</h3>
<p><a href="https://blog.csdn.net/Muscleape/article/details/105637401">https://blog.csdn.net/Muscleape/article/details/105637401</a></p>
<h2 id="远程仓库"><a class="header-anchor" href="#远程仓库"></a>远程仓库</h2>
<h3 id="添加远程库"><a class="header-anchor" href="#添加远程库"></a>添加远程库</h3>
<p>把已有的本地仓库与一个git仓库相关联( 建立绑定关系 ):</p>
<p><code>$ git remote add origin https://github.com/LYK-love/Learning</code>, 添加后,远程库的名字就是<code>origin</code>,这是Git默认的叫法,也可以改名,但没必要.</p>
<p>下一步,就可以把本地库的内容push到远程库上:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line">Enumerating objects: 7, done.</span><br><span class="line">Counting objects: 100% (7/7), done.</span><br><span class="line">Delta compression using up to 12 threads</span><br><span class="line">Compressing objects: 100% (7/7), done.</span><br><span class="line">Writing objects: 100% (7/7), 6.46 KiB | 6.46 MiB/s, done.</span><br><span class="line">Total 7 (delta 1), reused 0 (delta 0), pack-reused 0</span><br><span class="line">remote: Resolving deltas: 100% (1/1), done.</span><br><span class="line">To https://github.com/LYK-love/Learning.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch &#x27;master&#x27; set up to track remote branch &#x27;master&#x27; from &#x27;origin&#x27;.</span><br></pre></td></tr></table></figure>
<p>把本地库内容推送到远程,用<code>git push</code>命令,实际上是把当前分支<code>master</code>(本地的那个)推送到远程库(名叫<code>origin</code>).</p>
<p>由于远程库是空的,我们第一次推送<code>master</code>分支时,加上了<code>-u</code>参数. Git不但会把本地的<code>master</code>分支内容推送到远程新的<code>master</code>分支( 现在远程也有一个叫<code>master</code>的分支了),还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来,这样在以后的oush或oull时就可以简化命令.</p>
<p>从现在起,只要在本地作了<code>git commit</code>,就可以通过命令<code>git push origin</code>把本地的<code>master</code>分支的最新修改推送到Github,大功告成!</p>
<h3 id="删除远程库"><a class="header-anchor" href="#删除远程库"></a>删除远程库</h3>
<p>如果添加远程库的时候地址写错了,或者就是想删除远程库,可以用<code>git remote rm &lt;name&gt;</code>命令. 使用前建议先用<code>git remote -v</code>查看远程库信息:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  https://github.com/LYK-love/Learning.git (fetch)</span><br><span class="line">origin  https://github.com/LYK-love/Learning.git (push)</span><br></pre></td></tr></table></figure>
<p>然后,根据名字删除.</p>
<p><strong>注意</strong>:</p>
<ul>
<li>此处的*&quot;删除&quot;*其实是解除了本地和远程库的绑定关系,并没有物理上删除远程库,远程库本身没有任何改动( 也就是说远程库里的内容都还在 )要恢复绑定关系,可以再次用<code>$ git remote add origin https://github.com/LYK-love/Learning</code> , 然后用<code>$ git push -u origin master</code>来推送( <code>-u</code>参数能关联分支 )</li>
<li><code>origin</code>就是你指向的远程库的名字,可以等价于<code>https://github.com/LYK-love/Learning</code>,它指向的是repository, 而master只是这个repository中默认创建的第一个branch. 当我们<code>push</code>的时候,因为<code>origin</code>和<code>master</code>是默认创建的,所以这二者可以省略,但这是个bad practice,因为如果我换一个branch再push的时候,这样就很纠结了.</li>
<li>当然<code>origin</code>这个名字来源于<code>$ git remote add origin https://github.com/LYK-love/Learning</code>,我们也可以把<code>origin</code>改成别的名字,比如阿猫阿狗,如 <code>$ git remote add aMao https://github.com/LYK-love/Learning</code>,那么推送的时候就可以用<code>git push -u aMao master</code>了, 如果你的本地版本库是从远程仓库git clone而来，git会默认把这个远程仓库的地址叫做origin. 这时候依旧可以通过 git remote add 把远程仓库的名称改成'aGou'</li>
</ul>
<h3 id="从远程库clone"><a class="header-anchor" href="#从远程库clone"></a>从远程库clone</h3>
<p>随便哪个本地仓库,都可以用<code>$ git clone git@github.com:LYK-love/Learning.git</code>来clone. Github给出的地址不止一个,还可以用<code>https://github.com/LYK-love/Learning</code>. 实际上Git支持多种协议,默认的<code>git://</code>使用<code>ssh</code>( Secure Shell,安全外壳协议),但也可以使用<code>http</code>等其他协议. 使用<code>https</code>除了<strong>速度慢</strong>以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用<code>ssh</code>协议而只能用<code>https</code>。</p>
<p><strong>补充</strong>: SSH</p>
<ul>
<li>
<p>Intro:</p>
<p>SSH 为 [Secure Shell](<a href="https://baike.baidu.com/item/Secure">https://baike.baidu.com/item/Secure</a> Shell) 的缩写，由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是较可靠，专为<a href="https://baike.baidu.com/item/%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/1071998">远程登录</a>会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。</p>
</li>
<li>
<p>功能:</p>
<p>传统的网络服务程序，如：ftp、pop和telnet在本质上都是不安全的，因为它们在网络上用明文传送口令和数据，别有用心的人非常容易就可以截获这些口令和数据。而且，这些服务程序的安全验证方式也是有其弱点的， 就是很容易受到“<strong>中间人</strong>”（man-in-the-middle）这种方式的攻击。所谓“中间人”的攻击方式， 就是“中间人”冒充真正的服务器接收你传给服务器的数据，然后再冒充你把数据传给真正的服务器。服务器和你之间的数据传送被“中间人”一转手做了手脚之后，就会出现很严重的问题。通过使用SSH，你可以把所有传输的数据进行加密，这样&quot;中间人&quot;这种攻击方式就不可能实现了，而且也能够防止DNS欺骗和IP欺骗。使用SSH，还有一个额外的好处就是传输的数据是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替Telnet，又可以为FTP、PoP、甚至为PPP提供一个安全的&quot;通道&quot; 。</p>
</li>
<li>
<p>验证:</p>
<p>从客户端来看，SSH提供两种级别的安全验证。</p>
<p><strong>第一种级别（基于口令的安全验证）</strong></p>
<p>只要你知道自己帐号和口令，就可以登录到远程主机。所有传输的数据都会被加密，但是不能保证你正在连接的服务器就是你想连接的<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>。可能会有别的服务器在冒充真正的服务器，也就是受到“中间人”这种方式的攻击。</p>
<p><strong>第二种级别（基于密匙的安全验证）</strong></p>
<p>需要依靠<a href="https://baike.baidu.com/item/%E5%AF%86%E5%8C%99">密匙</a>，也就是你必须为自己创建一对密匙，并把公用密匙放在需要访问的服务器上。如果你要连接到SSH服务器上，客户端软件就会向服务器发出请求，请求用你的密匙进行安全验证。服务器收到请求之后，先在该服务器上你的主目录下寻找你的公用密匙，然后把它和你发送过来的公用密匙进行比较。如果两个密匙一致，服务器就用公用密匙加密“<strong>质询</strong>”（challenge）并把它发送给客户端软件。客户端软件收到“质询”之后就可以用你的 <strong>私人密匙</strong> <em>解密再把它发送给服务器</em>。</p>
<p>用这种方式，你必须知道自己密匙的<a href="https://baike.baidu.com/item/%E5%8F%A3%E4%BB%A4">口令</a>。但是，与第一种级别相比，第二种级别不需要在网络上传送口令。</p>
<p>第二种级别不仅加密所有传送的数据，而且“中间人”这种攻击方式也是不可能的（因为他没有你的私人密匙）。但是整个登录的过程可能需要10秒  。</p>
</li>
</ul>
<h1 id="Branch"><a class="header-anchor" href="#Branch"></a>Branch</h1>
<h2 id="创建分支"><a class="header-anchor" href="#创建分支"></a>创建分支</h2>
<p>创建<code>dev</code>分支, 然后切换到<code>dev</code>分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git switch -c dev </span><br><span class="line">Switched to a new branch &#x27;dev&#x27;</span><br></pre></td></tr></table></figure>
<h2 id="切换分支"><a class="header-anchor" href="#切换分支"></a>切换分支</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git switch dev </span><br></pre></td></tr></table></figure>
<h2 id="查看分支"><a class="header-anchor" href="#查看分支"></a>查看分支</h2>
<ul>
<li>
<p>查看本地所有分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看远程所有分支</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看本地及远程的所有分支:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -a </span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="删除分支"><a class="header-anchor" href="#删除分支"></a>删除分支</h2>
<ul>
<li>
<p>删除远程分支:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin :br  (origin 后面有空格)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>删除本地分支:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch -D br</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="关联分支"><a class="header-anchor" href="#关联分支"></a>关联分支</h2>
<p>将本地分支与远程同名分支相关联</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/develop develop</span><br></pre></td></tr></table></figure>
<p>也可以在push时设置:</p>
<figure class="highlight plaintext"><figcaption><span>l</span></figcaption><table><tr><td class="code"><pre><span class="line">git push --set-upstream origin &lt;本地分支名&gt;</span><br><span class="line"></span><br><span class="line"># 简写方式： </span><br><span class="line"># git push -u origin &lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>
<p>pull和push同.</p>
<h2 id="创建与合并分支"><a class="header-anchor" href="#创建与合并分支"></a>创建与合并分支</h2>
<p><code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p>
<ul>
<li>
<p>首先，我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支：</p>
</li>
<li>
<p>然后，用<code>git branch</code>命令查看当前分支：</p>
</li>
<li>
<p>然后提交:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m &quot;branch test&quot;</span><br><span class="line">[dev b17d20e] branch test</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>现在，<code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git switch master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>切换回<code>master</code>分支后，再查看一个<code>readme.txt</code>文件，刚才添加的内容不见了！( 工作区的不见了!!!  )因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变：</p>
<p><img data-src="https://www.liaoxuefeng.com/files/attachments/919022533080576/0" alt="git-br-on-master"></p>
<ul>
<li>
<p>现在，我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line">Updating d46f35e..b17d20e</span><br><span class="line">Fast-forward</span><br><span class="line"> readme.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查看<code>readme.txt</code>的内容(工作区)，就可以看到，和<code>dev</code>分支的最新提交是完全一样的。</p>
</li>
</ul>
<p>注意到上面的<code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。</p>
<p>当然，也不是每次合并都能<code>Fast-forward</code>，我们后面会讲其他方式的合并。</p>
<p>合并完成后，就可以放心地删除<code>dev</code>分支了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch -d dev</span><br><span class="line">Deleted branch dev (was b17d20e).</span><br></pre></td></tr></table></figure>
<p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>
<p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p>
<ul>
<li>
<p>查看分支：<code>git branch</code></p>
</li>
<li>
<p>创建分支：<code>git branch &lt;name&gt;</code></p>
</li>
<li>
<p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p>
</li>
<li>
<p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p>
</li>
<li>
<p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p>
</li>
<li>
<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>
</li>
</ul>
<h2 id="查看远程分支"><a class="header-anchor" href="#查看远程分支"></a>查看远程分支</h2>
<p>查看远程与本地当前分支对应的分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure>
<p>查看本地和远程所有分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>
<h3 id="解决冲突"><a class="header-anchor" href="#解决冲突"></a>解决冲突</h3>
<p>如果<code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交，变成了这样：</p>
<p><img data-src="https://www.liaoxuefeng.com/files/attachments/919023000423040/0" alt="git-br-feature1"></p>
<p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git merge feature1</span><br><span class="line">Auto-merging readme.txt</span><br><span class="line">CONFLICT (content): Merge conflict in readme.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure>
<p>果然冲突了！Git告诉我们，<code>readme.txt</code>文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以告诉我们冲突的文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of &#x27;origin/master&#x27; by 2 commits.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run &quot;git commit&quot;)</span><br><span class="line">  (use &quot;git merge --abort&quot; to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)</span><br><span class="line"></span><br><span class="line">	both modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure>
<p>打开工作区的<code>readme.txt</code>,我们可以直接查看readme.txt的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Creating a new branch is quick &amp; simple.</span><br><span class="line">=======</span><br><span class="line">Creating a new branch is quick AND simple.</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure>
<p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Creating a new branch is quick and simple.</span><br></pre></td></tr></table></figure>
<p>再提交：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m &quot;conflict fixed&quot;</span><br><span class="line">[master cf810e4] conflict fixed</span><br></pre></td></tr></table></figure>
<p>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：</p>
<p><img data-src="https://www.liaoxuefeng.com/files/attachments/919023031831104/0" alt="git-br-conflict-merged"></p>
<p>用带参数的<code>git log</code>也可以看到分支的合并情况：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   cf810e4 (HEAD -&gt; master) conflict fixed</span><br><span class="line">|\  </span><br><span class="line">| * 14096d0 (feature1) AND simple</span><br><span class="line">* | 5dc6824 &amp; simple</span><br><span class="line">|/  </span><br><span class="line">* b17d20e branch test</span><br><span class="line">* d46f35e (origin/master) remove test.txt</span><br><span class="line">* b84166e add test.txt</span><br><span class="line">* 519219b git tracks changes</span><br><span class="line">* e43a48b understand how stage works</span><br><span class="line">* 1094adb append GPL</span><br><span class="line">* e475afc add distributed</span><br><span class="line">* eaadf4e wrote a readme file</span><br></pre></td></tr></table></figure>
<p>最后，删除<code>feature1</code>分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch -d feature1</span><br><span class="line">Deleted branch feature1 (was 14096d0).</span><br></pre></td></tr></table></figure>
<p>工作完成。</p>
<ul>
<li>
<p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p>
<p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p>
<p>用<code>git log --graph</code>命令可以看到分支合并图。</p>
</li>
</ul>
<h3 id="分支管理策略"><a class="header-anchor" href="#分支管理策略"></a>分支管理策略</h3>
<p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。</p>
<p>如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p>
<p>下面我们实战一下<code>--no-ff</code>方式的<code>git merge</code>：</p>
<p>首先，仍然创建并切换<code>dev</code>分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git switch -c dev</span><br><span class="line">Switched to a new branch &#x27;dev&#x27;</span><br></pre></td></tr></table></figure>
<p>修改readme.txt文件，并提交一个新的commit：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m &quot;add merge&quot;</span><br><span class="line">[dev f52c633] add merge</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>
<p>现在，我们切换回<code>master</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git switch master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br></pre></td></tr></table></figure>
<p>准备合并<code>dev</code>分支，请注意<code>--no-ff</code>参数，表示禁用<code>Fast forward</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</span><br><span class="line">Merge made by the &#x27;recursive&#x27; strategy.</span><br><span class="line"> readme.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>
<p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。</p>
<p>合并后，我们用<code>git log</code>看看分支历史：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   e1e9c68 (HEAD -&gt; master) merge with no-ff</span><br><span class="line">|\  </span><br><span class="line">| * f52c633 (dev) add merge</span><br><span class="line">|/  </span><br><span class="line">*   cf810e4 conflict fixed</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>可以看到，不使用<code>Fast forward</code>模式，merge后就像这样：</p>
<p><img data-src="https://www.liaoxuefeng.com/files/attachments/919023225142304/0" alt="git-no-ff-mode"></p>
<ul>
<li>不用<code>Fast forwa</code>模式,提交图就像是 <code>dev</code>分支上做提交, <code>master</code>分支上做提交, 然后在<code>master</code>分支上手动解决冲突再提交 的图一样!.</li>
<li>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</li>
<li>如果之前<code>master</code>和<code>dev</code>只想相同提交. 现在你在<code>master</code>分支, 对 <code>readme.txt</code>做了修改, 然后<code>switch</code>到了<code>dev</code>分支, <code>add</code>, <code>commit</code>, 现在<code>dev</code>指向新的提交了! 我们<code>switch</code>回到<code>master</code>分支, 打开<code>readme.txt</code>,发现里面的内容是没有修改过的, 这是因为<strong>分支是指向提交的</strong>, 尽管你在<code>master</code>分支做了修改,但没有提交, 提交是在<code>dev</code>分支上完成的. 因此<code>master</code>分支指向的是上一次提交, 也就是没有修改过的版本.</li>
</ul>
<h3 id="Bug分支"><a class="header-anchor" href="#Bug分支"></a>Bug分支</h3>
<p>软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。</p>
<p>当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支<code>issue-101</code>来修复它，但是，等等，当前正在<code>dev</code>上进行的工作还没有提交：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch dev</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">	new file:   hello.py</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">	modified:   readme.txt</span><br></pre></td></tr></table></figure>
<p>并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？</p>
<p>幸好，Git还提供了一个<code>stash</code>功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure>
<p>现在，用<code>git status</code>查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。</p>
<p>首先确定要在哪个分支上修复bug，假定需要在<code>master</code>分支上修复，就从<code>master</code>创建临时分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">Your branch is ahead of &#x27;origin/master&#x27; by 6 commits.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">$ git checkout -b issue-101</span><br><span class="line">Switched to a new branch &#x27;issue-101&#x27;</span><br></pre></td></tr></table></figure>
<p>现在修复bug，需要把“Git is free software ...”改为“Git is a free software ...”，然后提交：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m &quot;fix bug 101&quot;</span><br><span class="line">[issue-101 4c805e2] fix bug 101</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>
<p>修复完成后，切换到<code>master</code>分支，并完成合并，最后删除<code>issue-101</code>分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git switch master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">Your branch is ahead of &#x27;origin/master&#x27; by 6 commits.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">$ git merge --no-ff -m &quot;merged bug fix 101&quot; issue-101</span><br><span class="line">Merge made by the &#x27;recursive&#x27; strategy.</span><br><span class="line"> readme.txt | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>
<p>太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到<code>dev</code>分支干活了！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git switch dev</span><br><span class="line">Switched to branch &#x27;dev&#x27;</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch dev</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>
<p>工作区是干净的，刚才的工作现场存到哪去了？用<code>git stash list</code>命令看看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure>
<p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p>
<p>一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；</p>
<p>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash pop</span><br><span class="line">On branch dev</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">	new file:   hello.py</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">	modified:   readme.txt</span><br><span class="line"></span><br><span class="line">Dropped refs/stash@&#123;0&#125; (5d677e2ee266f39ea296182fb2354265b91b3b2a)</span><br></pre></td></tr></table></figure>
<p>再用<code>git stash list</code>查看，就看不到任何stash内容了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></table></figure>
<p>你可以多次stash，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的stash，用命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git stash apply stash@&#123;0&#125;</span><br></pre></td></tr></table></figure>
<p>在master分支上修复了bug后，我们要想一想，dev分支是早期从master分支分出来的，所以，这个bug其实在当前dev分支上也存在。</p>
<p>那怎么在dev分支上修复同样的bug？重复操作一次，提交不就行了？</p>
<p>有木有更简单的方法？</p>
<p>有！</p>
<p>同样的bug，要在dev上修复，我们只需要把<code>4c805e2 fix bug 101</code>这个提交所做的修改“复制”到dev分支。注意：我们只想复制<code>4c805e2 fix bug 101</code>这个提交所做的修改，并不是把整个master分支merge过来。</p>
<p>为了方便操作，Git专门提供了一个<code>cherry-pick</code>命令，让我们能复制一个特定的提交到当前分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">$ git cherry-pick 4c805e2</span><br><span class="line">[master 1d4b803] fix bug 101</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>
<p>Git自动给dev分支做了一次提交，注意这次提交的commit是<code>1d4b803</code>，它并不同于master的<code>4c805e2</code>，因为这两个commit只是改动相同，但确实是两个不同的commit。用<code>git cherry-pick</code>，我们就不需要在dev分支上手动再把修bug的过程重复一遍。</p>
<ul>
<li>
<p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p>
</li>
<li>
<p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场；</p>
</li>
<li>
<p>在master分支上修复的bug，想要合并到当前dev分支，可以用<code>git cherry-pick &lt;commit&gt;</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。</p>
</li>
</ul>
<h3 id="Feature分支"><a class="header-anchor" href="#Feature分支"></a>Feature分支</h3>
<p>软件开发中，总有无穷无尽的新的功能要不断添加进来。</p>
<p>添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</p>
<p>现在，你终于接到了一个新任务：开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。</p>
<p>于是准备开发：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git switch -c feature-vulcan</span><br><span class="line">Switched to a new branch &#x27;feature-vulcan&#x27;</span><br></pre></td></tr></table></figure>
<p>5分钟后，开发完毕：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git add vulcan.py</span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch feature-vulcan</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">	new file:   vulcan.py</span><br><span class="line"></span><br><span class="line">$ git commit -m &quot;add feature vulcan&quot;</span><br><span class="line">[feature-vulcan 287773e] add feature vulcan</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 vulcan.py</span><br></pre></td></tr></table></figure>
<p>切回<code>dev</code>，准备合并：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git switch dev</span><br></pre></td></tr></table></figure>
<p>一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。</p>
<p>但是！</p>
<p>就在此时，接到上级命令，因经费不足，新功能必须取消！</p>
<p>虽然白干了，但是这个包含机密资料的分支还是必须就地销毁：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch -d feature-vulcan</span><br><span class="line">error: The branch &#x27;feature-vulcan&#x27; is not fully merged.</span><br><span class="line">If you are sure you want to delete it, run &#x27;git branch -D feature-vulcan&#x27;.</span><br></pre></td></tr></table></figure>
<p>销毁失败。Git友情提醒，<code>feature-vulcan</code>分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的<code>-D</code>参数。。</p>
<p>现在我们强行删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch -D feature-vulcan</span><br><span class="line">Deleted branch feature-vulcan (was 287773e).</span><br></pre></td></tr></table></figure>
<p>终于删除成功！</p>
<ul>
<li>开发一个新feature，最好新建一个分支；</li>
<li>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</li>
</ul>
<h3 id="多人协作"><a class="header-anchor" href="#多人协作"></a>多人协作</h3>
<ul>
<li><code>master</code>分支是主分支，因此要时刻与远程同步；</li>
<li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li>
<li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li>
<li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li>
</ul>
<ol>
<li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li>
<li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li>
<li>如果合并有冲突，则解决冲突，并在本地提交；</li>
<li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功</li>
</ol>
<ul>
<li>查看远程库信息，使用<code>git remote -v</code>；
<ul>
<li>比<code> git  remote</code>更详细</li>
<li>上面显示了可以抓取和推送的<code>origin</code>的地址。如果没有推送权限，就看不到push的地址。</li>
</ul>
</li>
<li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li>
<li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li>
<li>在本地创建和远程分支对应的分支并关联起来（ 就是说不用 <code>set-upstream</code> ），使用<code>git switch -c  branch-name origin/branch-name</code>，本地和远程分支的名称最好一致.</li>
<li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li>
<li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li>
</ul>
<h3 id="Rebase"><a class="header-anchor" href="#Rebase"></a>Rebase</h3>
<p>在上一节我们看到了，多人在同一个分支上协作时，很容易出现冲突。即使没有冲突，后push的童鞋不得不先pull，在本地合并，然后才能push成功。</p>
<p>每次合并再push后，分支变成了这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">* d1be385 (HEAD -&gt; master, origin/master) init hello</span><br><span class="line">*   e5e69f1 Merge branch &#x27;dev&#x27;</span><br><span class="line">|\  </span><br><span class="line">| *   57c53ab (origin/dev, dev) fix env conflict</span><br><span class="line">| |\  </span><br><span class="line">| | * 7a5e5dd add env</span><br><span class="line">| * | 7bd91f1 add new env</span><br><span class="line">| |/  </span><br><span class="line">* |   12a631b merged bug fix 101</span><br><span class="line">|\ \  </span><br><span class="line">| * | 4c805e2 fix bug 101</span><br><span class="line">|/ /  </span><br><span class="line">* |   e1e9c68 merge with no-ff</span><br><span class="line">|\ \  </span><br><span class="line">| |/  </span><br><span class="line">| * f52c633 add merge</span><br><span class="line">|/  </span><br><span class="line">*   cf810e4 conflict fixed</span><br></pre></td></tr></table></figure>
<p>总之看上去很乱，有强迫症的童鞋会问：为什么Git的提交历史不能是一条干净的直线？</p>
<p>其实是可以做到的！</p>
<p>Git有一种称为rebase的操作.</p>
<p>同步后，我们对<code>hello.py</code>这个文件做了两次提交。用<code>git log</code>命令看看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">* 582d922 (HEAD -&gt; master) add author</span><br><span class="line">* 8875536 add comment</span><br><span class="line">* d1be385 (origin/master) init hello</span><br><span class="line">*   e5e69f1 Merge branch &#x27;dev&#x27;</span><br><span class="line">|\  </span><br><span class="line">| *   57c53ab (origin/dev, dev) fix env conflict</span><br><span class="line">| |\  </span><br><span class="line">| | * 7a5e5dd add env</span><br><span class="line">| * | 7bd91f1 add new env</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>注意到Git用<code>(HEAD -&gt; master)</code>和<code>(origin/master)</code>标识出当前分支的HEAD和远程origin的位置分别是<code>582d922 add author</code>和<code>d1be385 init hello</code>，本地分支比远程分支快两个提交。</p>
<p>现在我们尝试推送本地分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> ! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to &#x27;git@github.com:michaelliao/learngit.git&#x27;</span><br><span class="line">hint: Updates were rejected because the remote contains work that you do</span><br><span class="line">hint: not have locally. This is usually caused by another repository pushing</span><br><span class="line">hint: to the same ref. You may want to first integrate the remote changes</span><br><span class="line">hint: (e.g., &#x27;git pull ...&#x27;) before pushing again.</span><br><span class="line">hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.</span><br></pre></td></tr></table></figure>
<p>很不幸，失败了，这说明有人先于我们推送了远程分支。按照经验，先pull一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">remote: Counting objects: 3, done.</span><br><span class="line">remote: Compressing objects: 100% (1/1), done.</span><br><span class="line">remote: Total 3 (delta 1), reused 3 (delta 1), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), done.</span><br><span class="line">From github.com:michaelliao/learngit</span><br><span class="line">   d1be385..f005ed4  master     -&gt; origin/master</span><br><span class="line"> * [new tag]         v1.0       -&gt; v1.0</span><br><span class="line">Auto-merging hello.py</span><br><span class="line">Merge made by the &#x27;recursive&#x27; strategy.</span><br><span class="line"> hello.py | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure>
<p>再用<code>git status</code>看看状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of &#x27;origin/master&#x27; by 3 commits.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>
<p>加上刚才合并的提交，现在我们本地分支比远程分支超前3个提交。</p>
<p>用<code>git log</code>看看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   e0ea545 (HEAD -&gt; master) Merge branch &#x27;master&#x27; of github.com:michaelliao/learngit</span><br><span class="line">|\  </span><br><span class="line">| * f005ed4 (origin/master) set exit=1</span><br><span class="line">* | 582d922 add author</span><br><span class="line">* | 8875536 add comment</span><br><span class="line">|/  </span><br><span class="line">* d1be385 init hello</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>对强迫症童鞋来说，现在事情有点不对头，提交历史分叉了。如果现在把本地分支push到远程，有没有问题？</p>
<p>有！</p>
<p>什么问题？</p>
<p>不好看！</p>
<p>有没有解决方法？</p>
<p>有！</p>
<p>这个时候，rebase就派上了用场。我们输入命令<code>git rebase</code>试试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git rebase</span><br><span class="line">First, rewinding head to replay your work on top of it...</span><br><span class="line">Applying: add comment</span><br><span class="line">Using index info to reconstruct a base tree...</span><br><span class="line">M	hello.py</span><br><span class="line">Falling back to patching base and 3-way merge...</span><br><span class="line">Auto-merging hello.py</span><br><span class="line">Applying: add author</span><br><span class="line">Using index info to reconstruct a base tree...</span><br><span class="line">M	hello.py</span><br><span class="line">Falling back to patching base and 3-way merge...</span><br><span class="line">Auto-merging hello.py</span><br></pre></td></tr></table></figure>
<p>输出了一大堆操作，到底是啥效果？再用<code>git log</code>看看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">* 7e61ed4 (HEAD -&gt; master) add author</span><br><span class="line">* 3611cfe add comment</span><br><span class="line">* f005ed4 (origin/master) set exit=1</span><br><span class="line">* d1be385 init hello</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>原本分叉的提交现在变成一条直线了！这种神奇的操作是怎么实现的？其实原理非常简单。我们注意观察，发现Git把我们本地的提交“挪动”了位置，放到了<code>f005ed4 (origin/master) set exit=1</code>之后，这样，整个提交历史就成了一条直线。rebase操作前后，最终的提交内容是一致的，但是，我们本地的commit修改内容已经变化了，它们的修改不再基于<code>d1be385 init hello</code>，而是基于<code>f005ed4 (origin/master) set exit=1</code>，但最后的提交<code>7e61ed4</code>内容是一致的。</p>
<p>这就是rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。</p>
<p>最后，通过push操作把本地分支推送到远程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mac:~/learngit michael$ git push origin master</span><br><span class="line">Counting objects: 6, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (5/5), done.</span><br><span class="line">Writing objects: 100% (6/6), 576 bytes | 576.00 KiB/s, done.</span><br><span class="line">Total 6 (delta 2), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (2/2), completed with 1 local object.</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line">   f005ed4..7e61ed4  master -&gt; master</span><br></pre></td></tr></table></figure>
<p>再用<code>git log</code>看看效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">* 7e61ed4 (HEAD -&gt; master, origin/master) add author</span><br><span class="line">* 3611cfe add comment</span><br><span class="line">* f005ed4 set exit=1</span><br><span class="line">* d1be385 init hello</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>远程分支的提交历史也是一条直线。</p>
<ul>
<li>rebase操作可以把本地未push的分叉提交历史整理成直线；</li>
<li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li>
</ul>
<h2 id="合并远程分支"><a class="header-anchor" href="#合并远程分支"></a>合并远程分支</h2>
<p>假设你本地在使用的分支为a, 需要合并的远程分支为b</p>
<ol>
<li>
<p>新建和远程分支对应的本地分支:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git switch -c b origin/b</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将远程代码pull到本地:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin b</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>返回到你的分支a</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git switch a</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>合并分支a与分支b</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge b</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="标签管理"><a class="header-anchor" href="#标签管理"></a>标签管理</h1>
<hr>
<p>发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。</p>
<p>Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。</p>
<p>Git有commit，为什么还要引入tag？</p>
<p>“请把上周一的那个版本打包发布，commit号是6a5819e...”</p>
<p>“一串乱七八糟的数字不好找！”</p>
<p>如果换一个办法：</p>
<p>“请把上周一的那个版本打包发布，版本号是v1.2”</p>
<p>“好的，按照tag v1.2查找commit就行！”</p>
<p>所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p>
<h2 id="创建标签"><a class="header-anchor" href="#创建标签"></a>创建标签</h2>
<p>在Git中打标签非常简单，首先，切换到需要打标签的分支上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br></pre></td></tr></table></figure>
<p>然后，敲命令<code>git tag &lt;name&gt;</code>就可以打一个新标签：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag v1.0</span><br></pre></td></tr></table></figure>
<p>可以用命令<code>git tag</code>查看所有标签：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v1.0</span><br></pre></td></tr></table></figure>
<p>默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？</p>
<p>方法是找到历史提交的commit id，然后打上就可以了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git log --pretty=oneline --abbrev-commit</span><br><span class="line">12a631b (HEAD -&gt; master, tag: v1.0, origin/master) merged bug fix 101</span><br><span class="line">4c805e2 fix bug 101</span><br><span class="line">e1e9c68 merge with no-ff</span><br><span class="line">f52c633 add merge</span><br><span class="line">cf810e4 conflict fixed</span><br><span class="line">5dc6824 &amp; simple</span><br><span class="line">14096d0 AND simple</span><br><span class="line">b17d20e branch test</span><br><span class="line">d46f35e remove test.txt</span><br><span class="line">b84166e add test.txt</span><br><span class="line">519219b git tracks changes</span><br><span class="line">e43a48b understand how stage works</span><br><span class="line">1094adb append GPL</span><br><span class="line">e475afc add distributed</span><br><span class="line">eaadf4e wrote a readme file</span><br></pre></td></tr></table></figure>
<p>比方说要对<code>add merge</code>这次提交打标签，它对应的commit id是<code>f52c633</code>，敲入命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag v0.9 f52c633</span><br></pre></td></tr></table></figure>
<p>再用命令<code>git tag</code>查看标签：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v0.9</span><br><span class="line">v1.0</span><br></pre></td></tr></table></figure>
<p>注意，标签不是按时间顺序列出，而是按字母排序的。可以用<code>git show &lt;tagname&gt;</code>查看标签信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git show v0.9</span><br><span class="line">commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:56:54 2018 +0800</span><br><span class="line"></span><br><span class="line">    add merge</span><br><span class="line"></span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>可以看到，<code>v0.9</code>确实打在<code>add merge</code>这次提交上。</p>
<p>还可以创建带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag -a v0.1 -m &quot;version 0.1 released&quot; 1094adb</span><br></pre></td></tr></table></figure>
<p>用命令<code>git show &lt;tagname&gt;</code>可以看到说明文字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git show v0.1</span><br><span class="line">tag v0.1</span><br><span class="line">Tagger: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 22:48:43 2018 +0800</span><br><span class="line"></span><br><span class="line">version 0.1 released</span><br><span class="line"></span><br><span class="line">commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (tag: v0.1)</span><br><span class="line">Author: Michael Liao &lt;askxuefeng@gmail.com&gt;</span><br><span class="line">Date:   Fri May 18 21:06:15 2018 +0800</span><br><span class="line"></span><br><span class="line">    append GPL</span><br><span class="line"></span><br><span class="line">diff --git a/readme.txt b/readme.txt</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="操作标签"><a class="header-anchor" href="#操作标签"></a>操作标签</h2>
<p>如果标签打错了，也可以删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag -d v0.1</span><br><span class="line">Deleted tag &#x27;v0.1&#x27; (was f15b0dd)</span><br></pre></td></tr></table></figure>
<p>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。</p>
<p>如果要推送某个标签到远程，使用命令<code>git push origin &lt;tagname&gt;</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push origin v1.0</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> * [new tag]         v1.0 -&gt; v1.0</span><br></pre></td></tr></table></figure>
<p>或者，一次性推送全部尚未推送到远程的本地标签：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push origin --tags</span><br><span class="line">Total 0 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> * [new tag]         v0.9 -&gt; v0.9</span><br></pre></td></tr></table></figure>
<p>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git tag -d v0.9</span><br><span class="line">Deleted tag &#x27;v0.9&#x27; (was f52c633)</span><br></pre></td></tr></table></figure>
<p>然后，从远程删除。删除命令也是push，但是格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push origin :refs/tags/v0.9</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> - [deleted]         v0.9</span><br></pre></td></tr></table></figure>
<p>要看看是否真的从远程库删除了标签，可以登陆GitHub查看。</p>
<ul>
<li>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</li>
<li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li>
<li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li>
<li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签</li>
</ul>
<h2 id="git-diff"><a class="header-anchor" href="#git-diff"></a>git diff</h2>
<p>git-diff - Show changes between commits, commit and working tree, etc</p>
<p>git diff 显示提交与提交之间、提交与工作树之间的文件修改。</p>
<ol>
<li>git diff <strong>显示本地开发工作中已经修改但未提交至暂存区的文件和已经提交至暂存区文件的修改</strong></li>
<li>**git diff HEAD *<em>**显示的是已提交到工作树中文件和未提交到工作树中文件的所有修改。**</em>***查看已缓存的与未缓存的所有改动。</li>
<li>**git diff --cached 上一次最后一次提交到工作树中文件（也就是*<em>head*</em>）与暂存区内文件的改动。**查看已缓存的改动。</li>
</ol>
<p>总结一下，可以想象有三个环境，一个是我们本地正在编辑的开发环境，一个我们提交的版本库环境，还有中间一个暂时存放代码的暂存区。</p>
<p>git diff 就是我们本地正在开发的但未提交到暂存区文件和之前已经提交到暂存区里的文件的对比；</p>
<p>git diff head 就是已经提交到版本库环境中的文件和未提交到版本库环境中文件的所有修改对比；</p>
<p>git diff --cached 最后一次提交到版本库环境中文件和暂存区中文件的修改对比；</p>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>GPU</title>
    <url>/2022/08/01/GPU/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Preface：Graphic Card</li>
<li>Basic Concepts</li>
<li>Components of GPU</li>
</ul>
<span id="more"></span>
<h1 id="Preface：Graphic-Card"><a class="header-anchor" href="#Preface：Graphic-Card"></a>Preface：Graphic Card</h1>
<p><a href="https://zhuanlan.zhihu.com/p/156083352">很详细的介绍显卡的文章</a></p>
<ul>
<li><strong>显卡</strong>( Video card、Display card、Graphics card ): 由 GPU, 电路板( PCB ), 显存, 金手指, 供电 &amp; 显示接口以及散热等构成
<ul>
<li>因为显卡最重要的就是GPU, 我们也可以把二者混为一谈. 比如后文提到的集显和核显, 其实就是两块纯的GPU,  为了方便我们还是说成显卡.</li>
</ul>
</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/GPU/Graphic%20Card%20Arch.png" alt="Graphic Card Arch"></p>
<h1 id="Basic-Concepts"><a class="header-anchor" href="#Basic-Concepts"></a>Basic Concepts</h1>
<ul>
<li>
<p>Graphic Processing Unit, aka GPU: 为了处理图形计算任务而专门开发的硬件, 是一种特殊的CPU.</p>
</li>
<li>
<p>GPU就是特殊的CPU, 这意味着电脑可以没有GPU，用普通的CPU也可以处理图形任务. 不过性能嘛... 给个例子， 顶级CPU 3990X 性能撕裂者勉强带得动前几代的《孤岛危机》</p>
</li>
<li>
<p>因此, GPU对于现代计算机是必要的. 没有外置显卡就用核显, 没有核显就用主板的集显, 连集显都没有那电脑可以入土了</p>
</li>
</ul>
<h2 id="集显"><a class="header-anchor" href="#集显"></a>集显</h2>
<ul>
<li>集显( 集成显卡 )：<strong>集成在主板</strong>北桥的GPU. 能和CPU共享散热器和系统RAM等资源
<ul>
<li>集显下GPU没有独立的RAM，只能将系统RAM的一部分作为VRAM( 显而易见这很慢 )</li>
<li>因为就集成在主板上把它叫做“板载显卡”</li>
</ul>
</li>
<li>早期的主板很多都带集显, 集显性能都还很垃圾. 现在的显卡都不带集显了( 比如b550m ), 不过集显的概念没有消失, 现在很多人都用“核显”</li>
</ul>
<h2 id="核显"><a class="header-anchor" href="#核显"></a>核显</h2>
<ul>
<li>
<p>核显:被封装到<a href="https://lyk-love.cn/2022/09/08/CPU/">CPU Package</a>中的GPU, 甚至有核显是<strong>刻在CPU的Die里面</strong>的</p>
<ul>
<li>其目的和集显一样, 都为了和CPU共享散热器和系统RAM等资源, 因此也可以把核显认为是集显的一种</li>
<li>因为CPU和GPU放在一块, 也可以把这种CPU叫做<strong>APU</strong>( 按AMD的说法 )</li>
</ul>
</li>
<li>
<p>AMD的<a href="https://www.amd.com/en/products/apu/amd-ryzen-5-5600g">R5 5600G</a>就自带了<em>UHD750</em>显卡( 刻在了Die里面.... )它的性能相对5600G这块CPU很垃圾, 但也能在1080P中高画质上60帧数上运行诸如LOL的游戏了:</p>
<table>
<thead>
<tr>
<th>Graphics Model</th>
<th>Graphics Core Count</th>
<th>Graphics Frequency</th>
</tr>
</thead>
<tbody>
<tr>
<td>Radeon™ Graphics</td>
<td>7</td>
<td>1900 MHz</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h2 id="独显"><a class="header-anchor" href="#独显"></a>独显</h2>
<ul>
<li>独显( 独立显卡 )：顾名思义就是可插拔的独立的显卡.  通过插槽插入计算机的主板，并且通常需要比通过卡插槽提供的更多的功率。因此，它也可能有来自计算机电源的专用电源连接。</li>
</ul>
<h2 id="GPU和CPU的区别"><a class="header-anchor" href="#GPU和CPU的区别"></a>GPU和CPU的区别</h2>
<ol>
<li>CPU被设计用于通用计算. 而GPU被设计为专门用于图形计算, 这些专用的功能会被直接集成到硬件中(起码在目前依然是这样)</li>
<li>CPU被设计为高效地执行<strong>单线程</strong>代码( SMT / Hyper-Threading等技术也改进了CPU的多线程能力 )； 而GPU天然被设计为高效地执行<strong>多线程</strong>代码。 也就是说，面对需要多线程的worload时，GPU的效率远高于CPU</li>
<li>GPU通过堆叠核心来扩展多线程性能, 所以核心数肯定比COU多。 AMD的高端CPU Epyc CPU是64核/128线程； 而Nvidia的最低端Pascal GPU就有384个内核。</li>
</ol>
<h2 id="GPU的性能度量"><a class="header-anchor" href="#GPU的性能度量"></a>GPU的性能度量</h2>
<ul>
<li>
<p>GPU的性能和架构的关系很大.  因此不同架构的GPU之间，不能单凭核心数来比较性能。</p>
</li>
<li>
<p>只有同一厂商的同一系列的GPU，才可以只用核心数比较。比如GTX 3070 和 GTX 3080 和 GTX 3080 Ti； 以及 [RX 5700 XT 和 RX 6700 XT]</p>
</li>
</ul>
<h1 id="Components-of-GPU"><a class="header-anchor" href="#Components-of-GPU"></a>Components of GPU</h1>
<p>GPU由核心( Core )、纹理映射单元( Texture Mapping Unit, TMU )、渲染输出( Render OutPut, ROP )和 显存( Video Random Access Memory, VRAM ) 组成。 粗略地说， GPU的最小功能单元是计算资源的块( block of computing resources )</p>
<p>VRAM在拙著<em>Computer Storage</em>介绍</p>
<p>GPU可以用如下标准来表示: [ 核心数 ]:[ 纹理映射单元数  ]:[ 渲染输出数 ]</p>
<ul>
<li>比如4096:160:64</li>
</ul>
<h2 id="基本单元：-SM-CU"><a class="header-anchor" href="#基本单元：-SM-CU"></a>基本单元： SM/CU</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/GPU/SM%20of%20Pascal%20Multiprocessor.png" alt="SM of "></p>
<p>( 这是一个AMD的Pascal Multiprocessor (SM) )</p>
<ul>
<li>GPU被构造成blocks of computing resources，block“可以看作”GPU的最小功能单元
<ul>
<li>Nvidia calls these blocks an <strong>SM</strong> (Streaming Multiprocessor), while AMD refers to them as a <strong>CU</strong>( Compute Unit ) .</li>
<li>严格地讲，block并没有涵盖GPU所有的功能 ---- 比如 video decode engines, render outputs required for actually drawing an image on-screen, and the memory interfaces used to communicate with onboard VRAM。</li>
</ul>
</li>
</ul>
<h2 id="Core"><a class="header-anchor" href="#Core"></a>Core</h2>
<ul>
<li>
<p>GPU的核心( <strong>Core</strong> )是block的集合，比如AMD的APU( having 8 or 11 Vega Compute Units ), 这就拥有GPU的大多数功能了</p>
</li>
<li>
<p>Each block contains a group of cores, a <strong>scheduler</strong>, a r<strong>egister file</strong>, <strong>instruction cache</strong>, <strong>texture</strong> and <strong>L1 cach</strong>e, and <strong>texture mapping units</strong>.</p>
</li>
</ul>
<h2 id="TMU"><a class="header-anchor" href="#TMU"></a>TMU</h2>
<ul>
<li><strong>纹理映射单元</strong>（<strong>Texture mapping unit</strong>，TMU）是GPU的一个部件，用于 纹理映射</li>
<li>TMU的数量决定了GPU对于纹理映射workload的吞吐量和处理速度</li>
<li>TMU曾就是一个独立的物理部件，现在已经集成到着色器中</li>
</ul>
<h2 id="ROP"><a class="header-anchor" href="#ROP"></a>ROP</h2>
<ul>
<li>渲染输出( <strong>Render OutPut</strong>, ROP )（有时也称为光栅操作管线）是GPU的一个部件。 它将GPU的输出组装成图像在显示器上显示。</li>
<li>ROP的数量乘以GPU的时钟速度可以控制像素填充率。ROPs的数量越多，意味着可以同时输出更多的像素。</li>
<li>ROPs还可以处理抗锯齿</li>
</ul>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Hardware</tag>
      </tags>
  </entry>
  <entry>
    <title>Github</title>
    <url>/2022/09/29/Github/</url>
    <content><![CDATA[<ul>
<li>Import Repository</li>
<li>Transfer</li>
</ul>
<span id="more"></span>
<h1 id="Import-Repository"><a class="header-anchor" href="#Import-Repository"></a>Import Repository</h1>
<p>Side of profile picture you will find <code>+</code> button click on that then there will be option to <code>import repository</code>.</p>
<p>our old repository’s clone URL is required which is gitlab repo url in your case. then select Owner and then type name for this repo and click to begin import button.</p>
<h1 id="Transfer"><a class="header-anchor" href="#Transfer"></a>Transfer</h1>
<p>可以把个人仓库转给别人或者组织.</p>
<p>在仓库的Settings主页的最末尾的Transfer ownership.</p>
<h1 id="Organization"><a class="header-anchor" href="#Organization"></a>Organization</h1>
<p>Within in a <strong>Organization</strong>, each <strong>Repository</strong> defines its restrictions by <strong>Permission</strong> associated to <strong>Team/s</strong> and Collaborator/s.</p>
<ul>
<li>There are 2 <a href="https://help.github.com/articles/managing-people-s-access-to-your-organization-with-roles/">Roles</a> within a GitHub Organization: <code>Owner</code> or <code>Member</code>.</li>
<li>A GitHub user becomes a Member by &quot;joining&quot; an Organization (by default). <strong>Note</strong>: An invitation from an Owner is needed before hand.</li>
<li>Members within an GitHub Organization can be distributed in <a href="https://help.github.com/articles/organizing-members-into-teams/">Teams</a>. A member can join one or more teams.</li>
<li>Collaborators (members or external user from the organization) and teams can be defined for each repository. For each of them should be assigned a <a href="https://help.github.com/articles/permission-levels-for-an-organization/">Permission Level</a></li>
</ul>
<p>As a summary: <a href="https://help.github.com/articles/repository-permission-levels-for-an-organization/">Repository permission levels for an organization</a>.</p>
<h2 id="成员权限"><a class="header-anchor" href="#成员权限"></a>成员权限</h2>
<p>member默认只有read权限, 可以更改配置, 使其拥有push权限:</p>
<ol>
<li>settings --&gt; Member privileges --&gt; Base permissions --&gt; 选择Write</li>
</ol>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
  </entry>
  <entry>
    <title>HTML Basic</title>
    <url>/2022/08/23/HTML-Basic/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Basic</li>
<li>HTML Attributes</li>
<li>Head Elements</li>
<li>Block and Inline Elements</li>
<li>Other Elements</li>
<li>CSS</li>
</ul>
<span id="more"></span>
<h1 id="Basic"><a class="header-anchor" href="#Basic"></a>Basic</h1>
<h2 id="DOCTYPE"><a class="header-anchor" href="#DOCTYPE"></a>&lt;!DOCTYPE&gt;</h2>
<p>The <code>&lt;!DOCTYPE&gt;</code> declaration represents the document type, and helps browsers to display web pages correctly.</p>
<p>It must only appear once, at the top of the page (before any HTML tags).</p>
<p>The <code>&lt;!DOCTYPE&gt;</code> declaration is not case sensitive.</p>
<p>The <code>&lt;!DOCTYPE&gt;</code> declaration for HTML5 is:</p>
<!DOCTYPE html>
<h1 id="HTML-Elements"><a class="header-anchor" href="#HTML-Elements"></a>HTML Elements</h1>
<p>An HTML element is defined by a start tag, some content, and an end tag:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;tagname&gt; Content goes here... &lt;/tagname&gt;</span><br></pre></td></tr></table></figure>
<p>tag及其包括的content构成了HTML元素</p>
<ul>
<li>HTML tag不是大小写敏感的
<ul>
<li><code>&lt;P&gt;</code> means the same as <code>&lt;p&gt;</code></li>
</ul>
</li>
<li>HTML元素可以嵌套</li>
<li>某些HTML元素没有内容部分(比如 <code>&lt;br&gt;</code> 元素)，称为空元素。  空元素不能有end tag</li>
</ul>
<h2 id="基本标签"><a class="header-anchor" href="#基本标签"></a>基本标签</h2>
<ul>
<li>The <code>&lt;!DOCTYPE html&gt;</code> declaration defines that this document is an HTML5 document</li>
<li>The <code>&lt;html&gt;</code> element is the root element of an HTML page</li>
<li>The <code>&lt;head&gt;</code> element contains meta information about the HTML page</li>
<li>The <code>&lt;title&gt;</code> element specifies a title for the HTML page (which is shown in the browser's title bar or in the page's tab)</li>
<li>The <code>&lt;body&gt;</code> element defines the document's body, and is a container for all the visible contents, such as headings, paragraphs, images, hyperlinks, tables, lists, etc.</li>
<li>The <code>&lt;h1&gt;</code> element defines a large heading</li>
<li>The <code>&lt;p&gt;</code> element defines a paragraph</li>
</ul>
<h2 id="Usage"><a class="header-anchor" href="#Usage"></a>Usage</h2>
<ul>
<li>All HTML documents must start with a document type declaration: <code>&lt;!DOCTYPE html&gt;</code>.</li>
<li>The HTML document itself begins with <code>&lt;html&gt;</code> and ends with <code>&lt;/html&gt;</code>.</li>
<li>The visible part of the HTML document is between <code>&lt;body&gt;</code> and <code>&lt;/body&gt;</code>.</li>
</ul>
<h2 id="nav"><a class="header-anchor" href="#nav"></a>&lt;nav&gt;</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;nav&gt;</span><br><span class="line">  &lt;a href=&quot;/html/&quot;&gt;HTML&lt;/a&gt; |</span><br><span class="line">  &lt;a href=&quot;/css/&quot;&gt;CSS&lt;/a&gt; |</span><br><span class="line">  &lt;a href=&quot;/js/&quot;&gt;JavaScript&lt;/a&gt; |</span><br><span class="line">  &lt;a href=&quot;/jquery/&quot;&gt;jQuery&lt;/a&gt;</span><br><span class="line">&lt;/nav&gt;</span><br></pre></td></tr></table></figure>
<h2 id="aside"><a class="header-anchor" href="#aside"></a>&lt;aside&gt;</h2>
<p>The <code>&lt;aside&gt;</code> element defines some content aside from the content it is placed in (like a sidebar).</p>
<p>The <code>&lt;aside&gt;</code> content should be indirectly related to the surrounding content.</p>
<h1 id="HTML-Attributes"><a class="header-anchor" href="#HTML-Attributes"></a>HTML Attributes</h1>
<p>HTML attributes provide additional information about HTML elements.</p>
<ul>
<li>All HTML elements can have <strong>attributes</strong></li>
<li>Attributes are always specified in <strong>the start tag</strong></li>
<li>Attributes usually come in name/value pairs like: <strong>name=&quot;value&quot;</strong></li>
</ul>
<h2 id="基本属性"><a class="header-anchor" href="#基本属性"></a>基本属性</h2>
<p>The <code>&lt;a&gt;</code> tag defines a hyperlink. The <code>href</code> <u>attribute</u> specifies the URL of the page the link goes to:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.w3schools.com&quot;</span>&gt;</span>Visit W3Schools<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Class"><a class="header-anchor" href="#Class"></a>Class</h2>
<p>The <code>class</code> attribute can be used on <strong>any</strong> HTML element.</p>
<p><strong>Note:</strong> The class name is case sensitive!</p>
<p>HTML elements can belong to more than one class.</p>
<h1 id="HTML-Head-Elements"><a class="header-anchor" href="#HTML-Head-Elements"></a>HTML Head Elements</h1>
<p>The <code>&lt;head&gt;</code> element is a container for metadata (data about data) and is placed between the <code>&lt;html&gt;</code> tag and the <code>&lt;body&gt;</code> tag.</p>
<p>HTML metadata is data about the HTML document. Metadata is not displayed.</p>
<p>Metadata typically define the document title, character set, styles, scripts, and other meta information.</p>
<p>You can have several <code>&lt;header&gt;</code> elements in one HTML document. However, <code>&lt;header&gt;</code> cannot be placed within a <code>&lt;footer&gt;</code>, <code>&lt;address&gt;</code> or another <code>&lt;header&gt;</code> element.</p>
<h2 id="title"><a class="header-anchor" href="#title"></a>&lt;title&gt;</h2>
<ul>
<li>The title must be text-only</li>
</ul>
<ul>
<li>defines a title in the browser toolbar</li>
<li>displays a title for the page in search engine-results</li>
</ul>
<h2 id="style"><a class="header-anchor" href="#style"></a>&lt;style&gt;</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">body</span> &#123;<span class="attribute">background-color</span>: powderblue;&#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">h1</span> &#123;<span class="attribute">color</span>: red;&#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">p</span> &#123;<span class="attribute">color</span>: blue;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="meta"><a class="header-anchor" href="#meta"></a>&lt;meta&gt;</h2>
<p><strong>Define the character set used:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br></pre></td></tr></table></figure>
<p><strong>Define keywords for search engines:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;keywords&quot; content=&quot;HTML, CSS, JavaScript&quot;&gt;</span><br></pre></td></tr></table></figure>
<p><strong>Define a description of your web page:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;description&quot; content=&quot;Free Web tutorials&quot;&gt;</span><br></pre></td></tr></table></figure>
<p><strong>Define the author of a page:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;author&quot; content=&quot;John Doe&quot;&gt;</span><br></pre></td></tr></table></figure>
<p><strong>Refresh document every 30 seconds:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;refresh&quot; content=&quot;30&quot;&gt;</span><br></pre></td></tr></table></figure>
<p><strong>Setting the viewport to make your website look good on all devices:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br></pre></td></tr></table></figure>
<h2 id="link"><a class="header-anchor" href="#link"></a>&lt;link&gt;</h2>
<p>The <code>&lt;link&gt;</code> tag is most often used to link to external style sheets:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;mystyle.css&quot;&gt;</span><br></pre></td></tr></table></figure>
<h2 id="script"><a class="header-anchor" href="#script"></a>&lt;script&gt;</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">function myFunction() &#123;</span><br><span class="line">  document.getElementById(&quot;demo&quot;).innerHTML = &quot;Hello JavaScript!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="base"><a class="header-anchor" href="#base"></a>&lt;base&gt;</h2>
<p>The <code>&lt;base&gt;</code> element specifies the base URL and/or target for all relative URLs in a page.</p>
<p>The <code>&lt;base&gt;</code> tag must have either an href or a target attribute present, or both.</p>
<p>There can only be one single <code>&lt;base&gt;</code> element in a document!</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">&lt;base href=&quot;https://www.w3schools.com/&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img src=&quot;images/stickman.gif&quot; width=&quot;24&quot; height=&quot;39&quot; alt=&quot;Stickman&quot;&gt;</span><br><span class="line">&lt;a href=&quot;tags/tag_base.asp&quot;&gt;HTML base Tag&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="Block-and-Inline-Elements"><a class="header-anchor" href="#Block-and-Inline-Elements"></a>Block and Inline Elements</h1>
<ul>
<li>The <code>&lt;div&gt;</code> element is a block-level and is often used as a container for other HTML elements</li>
<li>The <code>&lt;span&gt;</code> element is an inline container used to mark up a part of a text, or a part of a document</li>
</ul>
<h2 id="Block"><a class="header-anchor" href="#Block"></a>Block</h2>
<p>A block-level element always <strong>starts on a new line</strong>, and the browsers automatically add some space (<strong>a margin</strong>) <strong>before and after the element</strong>.</p>
<p>A block-level element always takes up the full width available (stretches out to the left and right as far as it can).</p>
<p>Two commonly used block elements are: <code>&lt;p&gt;</code> and <code>&lt;div&gt;</code>.</p>
<p>The <code>&lt;p&gt;</code> element defines a paragraph in an HTML document.</p>
<p>The <code>&lt;div&gt;</code> element defines a division or a section in an HTML document.</p>
<h2 id="Inline"><a class="header-anchor" href="#Inline"></a>Inline</h2>
<p>An inline element does not start on a new line.</p>
<p>An inline element only takes up as much width as necessary.</p>
<p><strong>Note:</strong> An inline element cannot contain a block-level element!</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span&gt;Hello World&lt;/span&gt;</span><br></pre></td></tr></table></figure>
<h1 id="Other-Elements"><a class="header-anchor" href="#Other-Elements"></a>Other Elements</h1>
<h1 id="label"><a class="header-anchor" href="#label"></a>&lt;label&gt;</h1>
<p>The <code>for</code> attribute of <code>&lt;label&gt;</code> must be equal to the id attribute of the related element to bind them together. A label can also be bound to an element by placing the element inside the <code>&lt;label&gt;</code> element.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form action=&quot;/action_page.php&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;radio&quot; id=&quot;html&quot; name=&quot;fav_language&quot; value=&quot;HTML&quot;&gt; # 对应for = &quot;html&quot;</span><br><span class="line">  &lt;label for=&quot;html&quot;&gt;HTML&lt;/label&gt;&lt;br&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;input type=&quot;radio&quot; id=&quot;css&quot; name=&quot;fav_language&quot; value=&quot;CSS&quot;&gt;# 对应for = &quot;css&quot;</span><br><span class="line">  &lt;label for=&quot;css&quot;&gt;CSS&lt;/label&gt;&lt;br&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;input type=&quot;radio&quot; id=&quot;javascript&quot; name=&quot;fav_language&quot; value=&quot;JavaScript&quot;&gt;</span><br><span class="line">  &lt;label for=&quot;javascript&quot;&gt;JavaScript&lt;/label&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<h1 id="CSS"><a class="header-anchor" href="#CSS"></a>CSS</h1>
<h2 id="Using-CSS"><a class="header-anchor" href="#Using-CSS"></a>Using CSS</h2>
<p>CSS can be added to HTML documents in 3 ways:</p>
<ul>
<li><strong>Inline</strong> - by using the <code>style</code> attribute inside HTML elements</li>
<li><strong>Internal</strong> - by using a <code>&lt;style&gt;</code> element in the <code>&lt;head&gt;</code> section</li>
<li><strong>External</strong> - by using a <code>&lt;link&gt;</code> element to link to an external CSS file</li>
</ul>
<h2 id="Inline-2"><a class="header-anchor" href="#Inline-2"></a>Inline</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=&quot;color:blue;&quot;&gt;A Blue Heading&lt;/h1&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Internal"><a class="header-anchor" href="#Internal"></a>Internal</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;background-color: powderblue;&#125;</span><br><span class="line">h1   &#123;color: blue;&#125;</span><br><span class="line">p    &#123;color: red;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="External"><a class="header-anchor" href="#External"></a>External</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;This is a heading&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;This is a paragraph.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Class-2"><a class="header-anchor" href="#Class-2"></a>Class</h2>
<p>To create a class; write a period (.) character, followed by a class name. Then, define the CSS properties within curly braces {}:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.city &#123;</span><br><span class="line">  background-color: tomato;</span><br><span class="line">  color: white;</span><br><span class="line">  padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2 class=&quot;city&quot;&gt;London&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;London is the capital of England.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2 class=&quot;city&quot;&gt;Paris&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;Paris is the capital of France.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2 class=&quot;city&quot;&gt;Tokyo&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;Tokyo is the capital of Japan.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Coupling &amp;&amp; Cohension</title>
    <url>/2021/06/27/Coupling%20&amp;&amp;%20Cohension/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>耦合</li>
<li>内聚</li>
<li>耦合和内聚的度量</li>
</ul>
<span id="more"></span>
<p>本文所引用的设计原则参见 <em>Design Patterns</em></p>
<blockquote>
<p>we want high cohesion and low coupling. 高内聚, 低耦合</p>
</blockquote>
<h1 id="Coupling"><a class="header-anchor" href="#Coupling"></a>Coupling</h1>
<p>Coupling: the measure of <strong>the strength</strong> of association established by a connection from one module to another 耦合是对模块间联系的度量</p>
<ul>
<li>
<p>How complicated the connection is</p>
</li>
<li>
<p>Whether the connection refers to the module itself or something inside it</p>
<ul>
<li>Connections that address or refer to a module as a whole by its name yield <strong>lower coupling</strong> than connections referring to the internal elements of another module 相比引用另一整个模块, 引用另一个模块内部的成员 的耦合性更高</li>
</ul>
</li>
<li>
<p>在结构化编程中，耦合是对某个标签或者地址的引用： A connection is a reference to some label or address defined elsewhere</p>
</li>
<li>
<p>在面向对象编程中，按照模块的访问逻辑耦合可分为：</p>
<ul>
<li>Component coupling （访问耦合）：模块间的依赖关系</li>
<li>Inheritance coupling （继承耦合）：模块间的继承关系（以及实现等等）</li>
</ul>
</li>
</ul>
<h2 id="Types-of-Coupling"><a class="header-anchor" href="#Types-of-Coupling"></a>Types of Coupling</h2>
<p>六种耦合, 由低到高（耦合性越低越好） ：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>耦合性</th>
<th>解释</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>内容耦合</td>
<td>最高（最坏）</td>
<td>一个模块直接修改或者依赖于另一个模块的内容</td>
<td>程序跳转GOTO; 改变另一个模块的内部数据</td>
</tr>
<tr>
<td>公共耦合,</td>
<td></td>
<td>模块之间共享全局的数据</td>
<td>全局变量</td>
</tr>
<tr>
<td>重复耦合</td>
<td></td>
<td>模块之间有同样逻辑的重复代码</td>
<td></td>
</tr>
<tr>
<td>控制耦合</td>
<td></td>
<td>传递了控制信息</td>
<td>传递&quot;显示星期天&quot;. 传递模块和接收模块必须共享同一个内部结构和逻辑</td>
</tr>
<tr>
<td>印记耦合</td>
<td></td>
<td>共享数据结构, 但是却只用了其中的一部分</td>
<td>传递了整个记录给另一个模块, 另一个模块却只需要一个字段</td>
</tr>
<tr>
<td>数据耦合</td>
<td>最低( 最好 )</td>
<td>两个模块的所有参数是同类型的数据项</td>
<td>传递一个整数给一个计算平方根的函数</td>
</tr>
</tbody>
</table>
<h2 id=""><a class="header-anchor" href="#"></a></h2>
<ul>
<li>Data Coupling   数据耦合
<ul>
<li>Connections that pass necessary data</li>
</ul>
</li>
<li>Stamp Coupling  印记耦合
<ul>
<li>Connections that pass data more than necessary</li>
</ul>
</li>
<li>Control Coupling  控制耦合
<ul>
<li>Connections that pass data and control elements</li>
</ul>
</li>
<li>Repeat Coupling 重复耦合</li>
<li>Common Coupling  公共耦合</li>
<li>Content Coupling 内容耦合</li>
<li>Obviously Stamp Coupling couples more Data Coupling</li>
<li>Control Coupling also couples more than data coupling
<ul>
<li>Information Hiding</li>
</ul>
</li>
</ul>
<h2 id="访问耦合"><a class="header-anchor" href="#访问耦合"></a>访问耦合</h2>
<h3 id="Principles-of-Component-Coupling"><a class="header-anchor" href="#Principles-of-Component-Coupling"></a>Principles of Component Coupling</h3>
<p>降低访问耦合的设计原则：</p>
<ul>
<li>
<p>Global Variables Consider Harmful</p>
</li>
<li>
<p>To be Explicit</p>
</li>
<li>
<p>Don’t repeat</p>
</li>
<li>
<p>Programming to Interface</p>
</li>
<li>
<p>Programming to Required Interface, not only Suffered Interface</p>
</li>
<li>
<p><strong>Design by Contract</strong></p>
<ul>
<li>
<p>Contract of Module/ Class</p>
<ul>
<li>Required methods / Provided methods</li>
</ul>
</li>
<li>
<p>Contract of Methods</p>
<ul>
<li><code>PreCondition</code> , <code>PostCondition</code>, <code>Invariant</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Interface Segregation Principle(ISP)</strong></p>
</li>
<li>
<p>Programming to Simpler Interface</p>
</li>
<li>
<p>Many client-specific interfaces are better than one general purpose interface <strong>把接口变小</strong></p>
</li>
<li>
<p><strong>The Law of Demeter</strong></p>
</li>
</ul>
<h2 id="继承耦合"><a class="header-anchor" href="#继承耦合"></a>继承耦合</h2>
<h3 id="Principles-of-Inherit-Coupling"><a class="header-anchor" href="#Principles-of-Inherit-Coupling"></a>Principles of Inherit Coupling</h3>
<ul>
<li>Liskov Substitution Principle （LSP）</li>
<li>Favor Composition Over Inheritance</li>
</ul>
<h1 id="Cohension"><a class="header-anchor" href="#Cohension"></a>Cohension</h1>
<p>Cohension： 模块内部各个元素彼此结合的紧密程度的度量</p>
<h2 id="Types-of-Cohension"><a class="header-anchor" href="#Types-of-Cohension"></a>Types of Cohension</h2>
<p>从低到高：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>内聚性</th>
<th>解释</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td>偶然内聚</td>
<td>最低</td>
<td>模块执行多个不相干的操作</td>
<td></td>
</tr>
<tr>
<td>逻辑内聚</td>
<td></td>
<td>模块执行一系列相关操作, 每个操作的调用由其他模块来决定</td>
<td>把下列方法放在一个模块中: 开车去, 坐火车去, 坐飞机去</td>
</tr>
<tr>
<td>时间内聚</td>
<td></td>
<td>模块执行一系列与时间有关的操作</td>
<td>把下列方法放在一个模块中: 起床, 刷牙, 洗脸, 吃早餐</td>
</tr>
<tr>
<td>过程内聚</td>
<td></td>
<td>模块执行一系列与步骤顺序有关的操作</td>
<td>把下列方法放在一个模块中: 守门员传球给后卫, 后卫传球给中场, 中场传球给前锋, 前锋射门</td>
</tr>
<tr>
<td>通信内聚</td>
<td></td>
<td>模块执行一系列与步骤顺序有关的操作, 并且这些操作在相同的数据上进行</td>
<td>把下列方法放在一个模块中: 查书的名字, 查书的作者, 查书的出版商</td>
</tr>
<tr>
<td>功能内聚</td>
<td></td>
<td>模块只执行一个操作或达到一个单一的目的</td>
<td>下列内容都作为独立模块: 计算平方根, 决定最短路径, 压缩数据</td>
</tr>
<tr>
<td>信息内聚</td>
<td>最高(最好)</td>
<td>模块进行许多操作, 各个都有各自的入口点, 每个操作的代码相对独立, 而且所有操作都在相同的数据结构上完成</td>
<td>比如栈. 它包含相应的数据结构和操作. 所有的操作都是针对相同的数据结构</td>
</tr>
</tbody>
</table>
<h2 id="Principles-of-Cohension"><a class="header-anchor" href="#Principles-of-Cohension"></a>Principles of Cohension</h2>
<ul>
<li>Single Responsibility Principle( SRP )</li>
</ul>
<h1 id="耦合和内聚的度量"><a class="header-anchor" href="#耦合和内聚的度量"></a>耦合和内聚的度量</h1>
<h2 id="Coupling-Metrics"><a class="header-anchor" href="#Coupling-Metrics"></a>Coupling Metrics</h2>
<p>模块间耦合性度量</p>
<h3 id="Coupling-between-object-classes-CBO"><a class="header-anchor" href="#Coupling-between-object-classes-CBO"></a>Coupling between object classes (CBO)</h3>
<p>对象类之间的耦合</p>
<ul>
<li>
<p>一个类合作（即相关）的数量。当CBO增大时，不仅降低了可重用性，而且使其修改和修改后的测试变得复杂。所以，每个类的CBO值应当保持合理。这与在传统软件中减少耦合的一般原则是一致的。</p>
</li>
<li>
<p>A count of the number of other classes: 访问本类或者含有被本类访问的方法或变量的其他类. ( 不包括继承 )</p>
<ul>
<li>which access a method or variable in this class, or</li>
<li>contain a method or variable accessed by this class</li>
<li>Not including Inheritance</li>
</ul>
</li>
<li>
<p>Want to keep this low</p>
</li>
</ul>
<h3 id="Data-abstraction-coupling-DAC"><a class="header-anchor" href="#Data-abstraction-coupling-DAC"></a>Data abstraction coupling (DAC)</h3>
<p>数据抽象耦合</p>
<ul>
<li>
<p>The number of attribute having an ADT type dependent on the definitions of other classes 拥有<u>依赖于其他类的ADT</u>的属性的数量</p>
</li>
<li>
<p>Want to keep this low</p>
</li>
</ul>
<h3 id="Ce-and-Ca-efferent-and-afferent-coupling"><a class="header-anchor" href="#Ce-and-Ca-efferent-and-afferent-coupling"></a>Ce and Ca (efferent and afferent coupling)</h3>
<p>传出耦合和传入耦合</p>
<ul>
<li>
<p>Ca: 传入耦合</p>
<ul>
<li>The number of classes outside this category that depend upon classes within this category. 外部的依赖于这个category内部的类的类的数量</li>
</ul>
</li>
<li>
<p>Ce: 传出耦合</p>
<ul>
<li>The number of classes inside this category that depend upon classes outside this category 这个category内部的依赖于外部类的类的数量</li>
</ul>
</li>
<li>
<p>Want to keep these low</p>
</li>
</ul>
<h3 id="Depth-of-the-Inheritance-tree-DIT"><a class="header-anchor" href="#Depth-of-the-Inheritance-tree-DIT"></a>Depth of the Inheritance tree (DIT)</h3>
<p>继承树深度</p>
<ul>
<li>
<p>the maximum length from the node to the root of the tree 这个类的节点到继承树根节点的最大距离</p>
</li>
<li>
<p>as <code>DIT</code> grows, it becomes difficult to predict behavior of a class because of the high degree of inheritance DIT越大,这个类离根节点越远,类的行为就难以预测</p>
</li>
<li>
<p>Positively, large DIT values imply that many methods may be reused</p>
<p>好消息是, DIT越大, 意味着越多可重用的方法</p>
</li>
</ul>
<h3 id="Number-of-children-NOC"><a class="header-anchor" href="#Number-of-children-NOC"></a>Number of children (NOC)</h3>
<p>子女数</p>
<ul>
<li>count of the subclasses immediately subordinate to a class  就是直接隶属于该节点的节点数</li>
<li>as NOC grows, reuse increases <code>NOC</code>越大,重用越频繁</li>
<li>as NOC grows, abstraction can become diluted <code>NOC</code>越大, 抽象性就越被稀释</li>
<li>increase in NOC means the amount of testing will increase <code>NOC</code>增大意味着更多的测试</li>
</ul>
<h2 id="Cohesion-Metrics"><a class="header-anchor" href="#Cohesion-Metrics"></a>Cohesion Metrics</h2>
<p>模块内聚性度量</p>
<h3 id="Lack-of-cohesion-in-methods-LCOM"><a class="header-anchor" href="#Lack-of-cohesion-in-methods-LCOM"></a>Lack of cohesion in methods (LCOM)</h3>
<ul>
<li>Definition:</li>
</ul>
<p>一个类内的每种方法访问一个或多个属性（也称实例变量）。LCOM是访问一个或多个相同属性方法的数量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class Ck with n methods M1,…Mn</span><br><span class="line"></span><br><span class="line">Ij is the set of instance variables used by Mj</span><br><span class="line"></span><br><span class="line">There are n such sets I1 ,…, In</span><br><span class="line"></span><br><span class="line">P = &#123;(Ii, Ij) | (Ii ∩ Ij ) =  ∅&#125; //P是访问一个类中不同属性的方法的度量, P越大, 内聚性越差</span><br><span class="line"></span><br><span class="line">Q = &#123;(Ii, Ij) | (Ii ∩ Ij ) ≠  ∅&#125; //Q是访问一个类中相同属性的方法的度量,Q越大, 说明类中这样的方法越多, 内聚性越好</span><br><span class="line"></span><br><span class="line">If all n sets Ii are ∅ then P = ∅</span><br><span class="line"></span><br><span class="line">LCOM = |P| – |Q|, if |P| &gt; |Q|</span><br><span class="line"></span><br><span class="line">LCOM = 0 otherwise</span><br></pre></td></tr></table></figure>
<ul>
<li>Want to keep this low</li>
<li>Many other versions of LCOM have been defined</li>
<li>If <code>LCOM </code>&gt;=1, then the class should be separated</li>
</ul>
]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
      <tags>
        <tag>Software Engineering Methodology</tag>
      </tags>
  </entry>
  <entry>
    <title>Hard Link &amp;&amp; Symbol Link</title>
    <url>/2022/05/05/Hard-Link-Symbol-Link/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>link</li>
<li>symlink</li>
</ul>
<span id="more"></span>
<h1 id="硬链接-link"><a class="header-anchor" href="#硬链接-link"></a>硬链接( link )</h1>
<p>对应的shell命令：<code>ln</code></p>
<p>对应系统调用<code>link</code></p>
<h2 id="详解"><a class="header-anchor" href="#详解"></a>详解</h2>
<ul>
<li>
<p>硬链接只是对<strong>同一个</strong>inode创建了新的引用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">ln</span> far far2</span> </span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">ls</span> -i</span>                                                                       </span><br><span class="line"></span><br><span class="line">2536724 far  2536724 far2  //inode number一样</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>事实上，文件名都只是对<code>inode</code>的链接</p>
</li>
<li>
<p>创建文件时，实际上是先创建<code>inode</code>，然后将人类可读的名称链接到该文件，并将这个键值对存入目录</p>
</li>
<li>
<p>不能创建目录的硬链接，因为会在目录树中成环</p>
</li>
<li>
<p><code>inode  number</code>在不同文件系统中不唯一，因此硬链接不能跨文件系统</p>
</li>
<li>
<p>硬链接会增加文件的引用计数，也就是<code>ls -l</code>里看到的那个</p>
</li>
</ul>
<h2 id="code"><a class="header-anchor" href="#code"></a>code</h2>
<p>Create a new link to (make a new name for) a file:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">link</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *oldpath, <span class="type">const</span> <span class="type">char</span> *newpath)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Return: 0 if success; -1 if failure</li>
</ul>
<p>Delete a name and possibly the file it refers to:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">int unlink(const char *pathname);</span><br></pre></td></tr></table></figure>
<ul>
<li>Return: 0 if success; -1 if failure</li>
</ul>
<h1 id="软链接-symlink"><a class="header-anchor" href="#软链接-symlink"></a>软链接( symlink )</h1>
<p>也称为符号链接</p>
<p>对应shell命令：<code>ln -s</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s  far far3  </span><br></pre></td></tr></table></figure>
<p>对应系统调用<code>symlink</code></p>
<h2 id="详解-2"><a class="header-anchor" href="#详解-2"></a>详解</h2>
<ul>
<li>
<p>符号链接是一个<strong>不同类型的文件</strong>, 它的内容是被链接文件的文件名</p>
<ul>
<li><code>ls</code>显示，类型为<code>l</code></li>
</ul>
</li>
<li>
<p><strong>OS将截获对符号链接文件的访问，,依据符号链接中的文件名去读真正的目标文件</strong></p>
</li>
<li>
<p>优点： 可链接目录， 可跨文件系统链接（因为只存储了目标路径）</p>
</li>
<li>
<p>缺点:<strong>搜索文件路径</strong>开销大,需要额外的空间查找存储路径</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">ls</span> -al</span></span><br><span class="line">drwxr-xr-x 3 lyk lyk  4096 11月 26 22:14 .</span><br><span class="line">drwxr-xr-x 4 lyk lyk  4096 11月 26 22:00 ..</span><br><span class="line">-rwxrwxrwx 2 lyk lyk     6 11月 26 21:41 far</span><br><span class="line">-rwxrwxrwx 2 lyk lyk     6 11月 26 21:41 far2</span><br><span class="line">lrwxrwxrwx 1 lyk lyk     3 11月 26 22:14 far3 -&gt; far  //软链接，内容为目标文件名“far”，是三字节</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="code-2"><a class="header-anchor" href="#code-2"></a>code</h2>
<p>Create a symbolic link (named newpath which contains‏the‏sting‏”oldpath”):</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">symlink</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *oldpath, <span class="type">const</span> <span class="type">char</span> *newpath)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Return: 0 if success; -1 if failure</li>
</ul>
<p>Read value of a symbolic link:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">readlink</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">char</span> *buf, <span class="type">size_t</span> bufsiz)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Return: the count of characters placed in the buffer if success; -1 if failure</li>
</ul>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo</title>
    <url>/2022/03/27/Hexo/</url>
    <content><![CDATA[<p>Outline</p>
<p>Hexo, Next, Markdown</p>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<p>Hexo版本: 6.2.0</p>
<p>Next版本: 8.12.3</p>
<ul>
<li><a href="https://hexo.io/zh-cn/">Hexo官网</a></li>
<li><a href="https://hexo-next.readthedocs.io/zh_CN/latest">NeXt Tutor</a>, 里面有几乎全部的主题配置教程</li>
<li><a href="https://github.com/next-theme/hexo-theme-next">最新版(v8)NeXt Github仓库</a></li>
<li><a href="https://theme-next.js.org/">Next Official Blog</a></li>
<li><a href="https://github.com/theme-next/awesome-next">Awesome NexT</a> : 有很多别人的Next博客, 非常值得借鉴</li>
</ul>
<p>本文档参考了:</p>
<ul>
<li>比较全的<a href="https://www.yuque.com/skyrin/coding/tm8yf5#xgq4yz">Hexo + Next搭建教程</a>, 其中有些内容有点老了</li>
</ul>
<p>Hexo是流行的静态博客框架, 同类的还有Hugo和Jekyl. Hexo的优点是, 它的Next主题比较好看. 本文介绍Hexo + Next的配置.</p>
<p>主题文件都存放在<code>&lt;hexo-dir&gt;/themes/</code>, 例如Next主题就位于<code>&lt;hexo-dir&gt;/themes/next/_config.yml</code>. <strong>但是</strong>, 由于下面讲的多主机同步的原因, 实际起作用的主题配置文件是<code>&lt;hexo&gt;/_cofig.next.yml</code></p>
<p>Hexo的配置文件位于Hexo目录的<code>_config.yml</code></p>
<p>Next的配置目录位于<code>&lt;hexo&gt;/_cofig.next.yml</code>.</p>
<p>在主题配置中, 除非特殊说明, 编辑都是主题配置文件. 同理, 对于Hexo的配置, 除非特殊说明, 编辑的都是Hexo配置文件</p>
<h1 id="Hexo-Commands"><a class="header-anchor" href="#Hexo-Commands"></a>Hexo Commands</h1>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>hexo init [folder]</code></td>
<td>初始化网站</td>
</tr>
<tr>
<td><code>hexo new [layout]</code></td>
<td>新建文章, 默认是“post”, 我通过<code>default_layout: draft</code>设置为新建到“draft”</td>
</tr>
<tr>
<td><code>hexo publish [layout]</code></td>
<td>发布草稿</td>
</tr>
<tr>
<td><code>hexo g[enerate]</code></td>
<td>生成静态文件.</td>
</tr>
<tr>
<td><code>hexo s[erver]</code></td>
<td>启动本地服务器. 服务器会监听文件变化并自动更新</td>
</tr>
<tr>
<td><code>hexo d[eploy]</code></td>
<td>在安装了deploy git 插件后, 可以生成本地文件并远程部署到GitPage. 再也不用<code>hexo d -g</code>了</td>
</tr>
<tr>
<td><code>hexo clean</code></td>
<td>清理数据库和静态文件</td>
</tr>
<tr>
<td><code>hexo list</code></td>
<td>列出站点信息</td>
</tr>
<tr>
<td><code>hexo version</code></td>
<td>版本信息</td>
</tr>
<tr>
<td><strong><code>hexo d -g</code></strong></td>
<td>生成并部署</td>
</tr>
</tbody>
</table>
<h1 id="Hexo搭建"><a class="header-anchor" href="#Hexo搭建"></a>Hexo搭建</h1>
<ol>
<li>
<p>安装 Hexo:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在本地指定文件夹 <code>&lt;folder&gt;</code> 中建立项目:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>新建完成后，指定文件夹 <code>&lt;folder&gt;</code> 的目录如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>文件/文件夹</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>_config.yml</td>
<td>网站的<a href="https://hexo.io/zh-cn/docs/configuration.html">配置</a>文件</td>
</tr>
<tr>
<td>package.json</td>
<td>应用程序的信息</td>
</tr>
<tr>
<td>scaffolds</td>
<td><a href="https://hexo.io/zh-cn/docs/templates.html">模版</a>文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件</td>
</tr>
<tr>
<td>source</td>
<td><a href="https://hexo.io/zh-cn/docs/asset-folders.html">资源文件夹</a>是存放用户资源的地方。除 <em>posts 文件夹之外，开头命名为</em>  (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去</td>
</tr>
<tr>
<td>themes</td>
<td><a href="https://hexo.io/zh-cn/docs/themes.html">主题</a>文件夹。Hexo 会根据主题来生成静态页面</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>安装主题, 见下文</p>
</li>
</ol>
<h2 id="部署到GitPage"><a class="header-anchor" href="#部署到GitPage"></a>部署到GitPage</h2>
<p>GitPage 允许你将你的博客创建为一个 GitHub Project，通过 <code>your-account.github.io</code> 这样的特殊项目名称与 GitPage 进行关联，然后，你只需要像平时一样 commit 你的博文到 GitHub 上就 OK 了，GitPage 会自动将你的更新部署出去.</p>
<blockquote>
<p>注意, 私有仓库的Gitpages也是可以公共访问的, 所以千万不要把含有敏感信息的私有仓库作为GitPages</p>
</blockquote>
<ol>
<li>
<p>安装 deploy git 插件实现一键自动部署:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在 GitHub 创建一个名为<code>&lt;username&gt;.github.io.git</code>的仓库。</p>
</li>
<li>
<p>在主题配置文件<code>_config.yml</code>中修改仓库地址, 注意, 为了后文说的多主机同步. 我的仓库有两个分支. <code>master</code>用于存放生成的网页文件, <code>hexo</code>存放源文件. 部署当然是push网页文件, 也就是<code>master</code>分支:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:LYK-love/LYK-love.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>GitPage可以关联到项目的任意分支, 我们要到仓库的Settings -&gt; Code and automation -&gt; Pages里, 把Pages关联到master分支. 这样我们部署到master的网页文件就可以同步到Pages上.</p>
</li>
<li>
<p>执行<code>hexo d</code>即可部署到 GitHub 仓库。</p>
</li>
<li>
<p>新增或修改主题配置后部署时请执行 <code>hexo clean &amp;&amp; hexo d</code></p>
</li>
</ol>
<p>注：这里使用 ssh 协议而非 http，所以请先确保您已经在 GitHub 添加了公钥.</p>
<h2 id="自定义域名"><a class="header-anchor" href="#自定义域名"></a>自定义域名</h2>
<ol>
<li>首先你需要去域名注册商（阿里云腾讯云等）买一个域名</li>
<li>在根站点下<code>source</code>目录中添加<code>CNAME</code>文件，文件内容为您购买的域名<code>xxx.com</code>，不要添加<code>www</code>、<code>mail</code>等子域例如<code>www.xxx.com</code>或<code>mail.xxx.com</code></li>
<li>前往域名控制台解析此域名到<code>github.io</code>，根据 gitpage 的自定义域名要求，他们建议解析到<code>github.io</code>的数字 ip 地址，即<code>151.101.129.147</code></li>
<li>在控制台设置域名解析，添加 A 记录指向 <code>151.101.129.147</code> 即可</li>
<li>命令行执行<code>hexo d</code>发布站点到 GitHub 库，这时在 Git 库应该就能看到 CNAME 文件，至此自定义域名设置完毕，现在使用<code>xxx.com</code>即可访问站点</li>
</ol>
<h2 id="写作"><a class="header-anchor" href="#写作"></a>写作</h2>
<ul>
<li>
<p>默认新建文章都是posts, 改成新建为drafts:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">default_layout:</span> <span class="string">draft</span></span><br></pre></td></tr></table></figure>
<p>这样<code>hexo new</code>新建的就都是草稿了</p>
</li>
<li>
<p>文章能会有多个类别, 分类具有顺序性和层次性, 有<code>3</code>种不同的编写方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 第一种</span><br><span class="line">categories:</span><br><span class="line">  - Java</span><br><span class="line">  - Servlet</span><br><span class="line"># 第二种</span><br><span class="line">categories: [Java, Servlet]</span><br><span class="line"># 第三种</span><br><span class="line">categories:</span><br><span class="line">  -[Java]</span><br><span class="line">  -[Servlet]</span><br></pre></td></tr></table></figure>
<p>前一、二种书写方式的作用一致，表示该文章分类于<code>Java/Servlet</code>下，起到了子分类的作用</p>
<p>第三种书写方式起到了多分类的作用，表示该文章分类于<code>Java</code>和<code>Servlet</code>下</p>
</li>
<li>
<p>标签没有层次性:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- Diary</span><br><span class="line">tags:</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Configuring-Author"><a class="header-anchor" href="#Configuring-Author"></a>Configuring Author</h2>
<p>Edit Hexo config file and set the value of <code>author</code> to your nickname.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Hexo</span> <span class="string">config</span> <span class="string">file</span></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">author:</span></span><br></pre></td></tr></table></figure>
<h2 id="Configuring-Description"><a class="header-anchor" href="#Configuring-Description"></a>Configuring Description</h2>
<p>Edit Hexo config file and set the value of <code>description</code> to your description, which can be a sentence you like.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Hexo</span> <span class="string">config</span> <span class="string">file</span></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">description:</span></span><br></pre></td></tr></table></figure>
<h2 id="Enabling-Theme"><a class="header-anchor" href="#Enabling-Theme"></a>Enabling Theme</h2>
<p>Like all Hexo themes, after you download it, open Hexo config file, find <code>theme</code> option, and change its value to <code>next</code> (or another theme directory name).</p>
<p>Edit Hexo config file:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>
<p>Now you have installed NexT theme and enabled it. The following steps will help you verify whether NexT is enabled correctly.</p>
<h1 id="NeXt配置"><a class="header-anchor" href="#NeXt配置"></a>NeXt配置</h1>
<p><a href="https://convivae.top/posts/hexo-bo-ke-cai-keng/">进阶配置</a></p>
<ul>
<li>
<p>Schemes: 目前觉得Mist比较好看</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"><span class="comment"># scheme: Pisces</span></span><br><span class="line"><span class="comment"># scheme: Gemini</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>设置语言: 我使用默认的英语. 如果要使用汉语, 可以编辑主题配置文件:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>首页文章显示摘要: 在文章中适当位置插入 <code>&lt;!--more--&gt;</code>，该位置之前的部分即为摘要，会显示在首页中.</p>
</li>
<li>
<p>sidebar社交链接: 邮箱前要加<code>mailto:</code>, 这还是我用开发者工具查别人的网站发现的..( 其实mailto是html中发送email的代码 )</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/LYK-love</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:191820133@smail.nju.edu.cn</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>sidebar社交链接的图案:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>添加建站时间, 不加的话就会显示当前年份:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup. If not defined, current year will be used.</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2021</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>关掉闪烁:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">quicklink:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Toc: Table of Contents in the Sidebar. 主要是sidebar里面的标题要不要自动进行数字编号. 默认为true. 我不喜欢编号：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Configuring-Favicon"><a class="header-anchor" href="#Configuring-Favicon"></a>Configuring Favicon</h2>
<p>By default the Hexo site use NexT favicons in <code>[hexo-site]/themes/next/source/images/</code> directory with different size for different device. You can replace them with your own favicons.</p>
<p>但是, 如果使用npm安装Next, 则主题文件夹是<code>[hexo-site]/node_modules/hexo-theme-next</code>, 无法进行版本管理.</p>
<p>因此, Hexo也支持将图片放在<code>[hexo-site]/source/images/</code>. 我也<strong>强烈推荐</strong>这么做, 这样就可以进行版本管理了:</p>
<ol>
<li>
<p>先手动创建文件夹:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> [hexo-site]/source</span><br><span class="line"><span class="built_in">mkdir</span> images</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>后续在Next配置文件中使用<code>images</code>路径来找到图片:</p>
<ul>
<li>由于<code>themes/next/source/images/</code>和<code>source/images/</code>都可以放图片, 该操作实际上会扫描这两个文件夹</li>
</ul>
</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir images</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>设置站点图标:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="comment"># small: /images/favicon-16x16-next.png</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/white_flower1.jpg</span></span><br><span class="line">  <span class="comment"># medium: /images/favicon-32x32-next.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/white_flower1.jpg</span></span><br><span class="line">  <span class="comment"># apple_touch_icon: /images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/white_flower1.jpg</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>设置菜单: 真不知道about页面有啥用</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment"># about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable / Disable menu icons / item badges.</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>设置sidebar avatar, 并且让图片圆形显示</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/white_flower1.jpg</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be displayed in circle.</span></span><br><span class="line">  <span class="comment"># 圆形显示</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>头像必须存放在<code>&lt;next&gt;/themes/source/images/</code></p>
</li>
</ul>
<h2 id="搜索服务"><a class="header-anchor" href="#搜索服务"></a>搜索服务</h2>
<p>使用本地搜索，按以下步骤配置：</p>
<ol>
<li>
<p>安装 hexo-generator-searchdb 插件：加了这个之后,博客生成时间要慢好几秒, 不过也是值得的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>编辑Hexo配置文件 <code>_config.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>编辑Next配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="百度统计"><a class="header-anchor" href="#百度统计"></a>百度统计</h2>
<p>也可以添加Google统计, 都差不多</p>
<ol>
<li>
<p>开通百度统计帐号: 在 <a href="https://tongji.baidu.com/web/welcome/login"><strong>百度统计</strong></a> 注册帐号. 帐号注册成功后，在侧边栏<code>账户管理 -&gt; 网站列表</code>，点击右侧<code>新增网站</code>按钮</p>
</li>
<li>
<p>添加<code>网站域名/网站首页</code>信息后，点击<code>确定</code>按钮，百度统计会提供一段<code>JS</code>脚本用于嵌入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> _hmt = _hmt || [];</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> hm = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>);</span><br><span class="line">  hm.<span class="property">src</span> = <span class="string">&quot;https://hm.baidu.com/hm.js?&lt;app-id&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;script&quot;</span>)[<span class="number">0</span>]; </span><br><span class="line">  s.<span class="property">parentNode</span>.<span class="title function_">insertBefore</span>(hm, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>粘贴上面代码中的`<app-id>, 复制到主题配置文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">baidu_analytics: &lt;app-id&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>Next主题已对百度统计进行配置优化，因此只需要编辑配置文件, 填写<code>app-id</code>. 对于更一般的情况, 需要把上面的JS代码添加到网站全部页面的 <code>&lt;/head&gt;</code> 标签前.</li>
</ul>
</li>
<li>
<p>如果代码安装正确，一般20分钟后，可以查看网站分析数据.</p>
</li>
</ol>
<h2 id="Math"><a class="header-anchor" href="#Math"></a>Math</h2>
<p><a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/MATH.md">Next数学公式支持官方文档</a></p>
<p><a href="https://theme-next.js.org/docs/third-party-services/math-equations.html?highlight=mathjax#mjx-eqn%3Aeq2">Next Mathjax高级特性</a></p>
<p>目前的Latex渲染引擎有 <a href="https://www.mathjax.org/">MathJax</a> 和 <a href="https://khan.github.io/KaTeX/">Katex</a>, <code>MathJax</code>完美支持Latex, <code>Katex</code>速度更快, 但是有些语法不支持. 综合来看还是选择Mathjax.</p>
<p><code>NexT</code>默认使用的markdown渲染引擎是<a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>, 它不支持Mathjax，不支持插件扩展，不支持emoji表情, 因此我们需要卸载它, 并替换为别的引擎.</p>
<p>注意, 不同的渲染引擎是不能共存的( <a href="https://github.com/next-theme/hexo-filter-mathjax">hexo-filter-mathjax</a>除外, 它是server端的渲染引擎 ), 因此在使用一个渲染引擎之前, 需要卸载掉其他全部的渲染引擎/</p>
<h3 id="Engines"><a class="header-anchor" href="#Engines"></a>Engines</h3>
<p>Next支持的渲染引擎:</p>
<h4 id="Mathjax"><a class="header-anchor" href="#Mathjax"></a>Mathjax</h4>
<p>If you use MathJax to render Math Equations, you can choose one of the Markdown renderers below:</p>
<ul>
<li><a href="https://github.com/wzpan/hexo-renderer-pandoc">hexo-renderer-pandoc</a>
<ul>
<li>支持Mathjax语法, 不仅可以渲染markdown, 还支持textile, reStructedText和许多其他格式, 仍然不支持emoji表情</li>
<li>内建的汇总文件<code>db.json</code>将来可能会非常大, 同步到 Github 可能会比较慢, 博客内建的搜索功能也可能会变得非常慢.
<ul>
<li>亲测, 博客生成和博客的搜索功能都慢得离谱, 而且它和Next的集成有问题, 无法正确把生成的HTML文件的标题加入Anchor.</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/sun11/hexo-renderer-kramed">hexo-renderer-kramed</a>: 基于hexo-renderer-marked二次开发的渲染器，完善了对Mathjax的支持, 仍然不支持插件的扩展，不支持emoji表情.
<ul>
<li>亲测它比<code>hexo-renderer-pandoc</code><strong>快一点</strong>. 但是有bug, 需要自己配置. 由于它太老了,就不推荐了.</li>
</ul>
</li>
<li><a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a>：支持<code>MathJax</code>, 并可以通过插件支持<code>KeTex</code>.
<ul>
<li>支持Markdown以及CommonMark语法.</li>
<li>支持插件配置, 支持标题带安全的id信息</li>
<li>支持脚注（上标, 下标, 下划线）</li>
<li><strong>我最后选择<code>hexo-renderer-markdown-it</code></strong></li>
</ul>
</li>
<li><a href="https://github.com/CHENXCHEN/hexo-renderer-markdown-it-plus">hexo-renderer-markdown-it-plus</a>: 支持Katex插件并默认启用</li>
<li><a href="https://github.com/next-theme/hexo-filter-mathjax">hexo-filter-mathjax</a>: Server side <a href="http://www.mathjax.org/">MathJax</a> Renderer Plugin for <a href="http://hexo.io/">Hexo</a>. 要使用它,需要卸载掉除<code>hexo-renderer-marked</code> ( 用于渲染markdown )之外的LaTex引擎. 它的缺点是有些语法不支持, 而且无法渲染目录里的LaTex.</li>
</ul>
<h4 id="KaTex"><a class="header-anchor" href="#KaTex"></a>KaTex</h4>
<p>If you use KaTeX to render Math Equations, you can choose one of the Markdown renderers below:</p>
<ul>
<li><a href="https://github.com/CHENXCHEN/hexo-renderer-markdown-it-plus">hexo-renderer-markdown-it-plus</a>: 没用过</li>
<li><a href="https://github.com/hexojs/hexo-renderer-markdown-it">hexo-renderer-markdown-it</a>: 亲测它也支持Mathjax, 并支持Hexo支持的Mathjax特性</li>
</ul>
<h3 id="支持MathJax"><a class="header-anchor" href="#支持MathJax"></a>支持MathJax</h3>
<p>支持Latex步骤:</p>
<ol>
<li>
<p>卸载<code>hexo-renderer-marked</code>, 安装<code>hexo-renderer-pandoc</code> <code>hexo-renderer-markdown-it</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># npm i hexo-renderer-pandoc --save 有问题, 废弃</span></span><br><span class="line">npm i hexo-renderer-markdown-it --save</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>如果选择<code>hexo-renderer-pandoc</code> , 还需要额外安装<a href="https://github.com/jgm/pandoc/blob/master/INSTALL.md">pandoc</a></p>
<p>for Mac:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install pandoc</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>开启mathjax:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="comment"># Default (false) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to true, it will load mathjax / katex script EVERY PAGE.</span></span><br><span class="line">  <span class="attr">every_page:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: none | ams | all</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">ams</span> <span class="comment"># ams: 开启公式自动编号</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>per_page</code>: 设置为false, 这样只会渲染添加了<code>mathjax: true</code>的文章
<ul>
<li>在低版本的NeXt,这句话上面的注释是反的, 即“false”只会渲染指定文章.</li>
</ul>
</li>
</ul>
</li>
<li>
<p>在需要渲染Latex的文章的Front-matter里打开mathjax开关，如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: index.html</span><br><span class="line">date: 2016-12-28 21:01:30</span><br><span class="line">tags:</span><br><span class="line"><span class="section">mathjax: true</span></span><br><span class="line"><span class="section">--</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Configuring-hexo-renderer-markdown-it"><a class="header-anchor" href="#Configuring-hexo-renderer-markdown-it"></a>Configuring <code>hexo-renderer-markdown-it</code></h3>
<p><code>hexo-renderer-markdown-it</code>的<a href="https://github.com/hexojs/hexo-renderer-markdown-it">默认配置</a>是无法正确给标题添加anchor的, 需要做一些修改, 并将配置添加到Hexo中.</p>
<p>编辑Hexo配置文件 <code>_config.yml</code>,  插入以下内容:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Config of hexo-renderer-markdown-it</span></span><br><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">preset:</span> <span class="string">&#x27;default&#x27;</span> <span class="comment"># 渲染器默认预设 # &quot;commonmark&quot;: 使用严格 CommandMark 规定. # &quot;default&quot;: 默认配置, 类似于 GFM # &quot;zero&quot;: 禁用所有预设.</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span> <span class="comment"># 将 HTML 内容渲染为 XHTML 的形式 (XHTML 语法非常严格, 比如原 HTML 中的 &lt;br&gt; 标签必须要使用 &lt;br/&gt; 这样的形式进行 &quot;自闭和&quot;) 可能会出现兼容性问题.</span></span><br><span class="line">    <span class="attr">langPrefix:</span> <span class="string">&#x27;language-&#x27;</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span> <span class="comment"># true 则将所有换行渲染为 &lt;br&gt; 标签 # 这种行为不属于 CommandMark 和 GFM.</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span> <span class="comment"># true 则自动解析链接并添加为 &lt;a&gt; 标签, false 则将链接渲染为文本.</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">false</span> <span class="comment"># 默认 true # 自动转义各种排版用字符, 如 ©. 这甚至会转义掉LaTex中的字符, 所以不能开启</span></span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">&#x27;“”‘’&#x27;</span> <span class="comment"># 当 typographer 定义为 true 时的自动转换引号的行为, quotes: &#x27;“”‘’&#x27; 则表示将 &quot;123&quot; &#x27;123&#x27;转换为 “123” ‘123’</span></span><br><span class="line">  <span class="attr">enable_rules:</span></span><br><span class="line">  <span class="attr">disable_rules:</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">1</span> <span class="comment"># 开始创建锚点的等级, 默认为2,表示从 H2 开始创建一直到 H6(最后).</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 如果遇到重复的锚点 ID 为其添加数字编号时在这个数字后添加的后缀.</span></span><br><span class="line">    <span class="attr">permalink:</span> <span class="literal">true</span> <span class="comment">#  默认为false, 需要更改为true, 来创建一个除标题外带有固定地址的的锚点标签.</span></span><br><span class="line">    <span class="attr">permalinkClass:</span> <span class="string">&#x27;header-anchor&#x27;</span></span><br><span class="line">    <span class="attr">permalinkSide:</span> <span class="string">&#x27;left&#x27;</span> <span class="comment"># 设定为 right 则会在标题后添加固定链接.</span></span><br><span class="line">    <span class="attr">permalinkSymbol:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 更改为空字符串</span></span><br><span class="line">    <span class="attr">case:</span> <span class="number">0</span> <span class="comment"># 转换锚点 ID 中的字母为大写或小写 # &quot;0&quot; 不转换, &quot;1&quot; 为小写, &quot;2&quot; 为大写. “不转换”是为了方便手写Anchor</span></span><br><span class="line">    <span class="attr">separator:</span> <span class="string">&#x27;-&#x27;</span> <span class="comment"># 用于替换空格的符号. # 默认为 &quot;-&quot;</span></span><br><span class="line">  <span class="comment"># images:</span></span><br><span class="line">  <span class="comment">#   lazyload: false</span></span><br><span class="line">  <span class="comment">#   prepend_root: false</span></span><br><span class="line">  <span class="comment">#   post_asset: false</span></span><br></pre></td></tr></table></figure>
<p>当然你也可以直接更改依赖的代码, 但是这样做无法进行版本管理, 所以<strong>不推荐</strong>:</p>
<ol>
<li>
<p>进入包目录:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd [hexo-site]/node_modules/hexo-renderer-markdown-it</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>编辑<code>index.js</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hexo.config.markdown.anchors = Object.assign(&#123;</span><br><span class="line">  level: <span class="number">2</span>,</span><br><span class="line">  collisionSuffix: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  permalink: <span class="literal">true</span>, <span class="comment">//更改为true</span></span><br><span class="line">  permalinkClass: <span class="string">&#x27;header-anchor&#x27;</span>,</span><br><span class="line">  permalinkSide: <span class="string">&#x27;left&#x27;</span>,</span><br><span class="line">  permalinkSymbol: <span class="string">&#x27;&#x27;</span>, <span class="comment">//更改为空字符串</span></span><br><span class="line">  <span class="keyword">case</span>: <span class="number">0</span>,</span><br><span class="line">  separator: <span class="string">&#x27;-&#x27;</span></span><br><span class="line">&#125;, hexo.config.markdown.anchors);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="公式自动编号和引用"><a class="header-anchor" href="#公式自动编号和引用"></a>公式自动编号和引用</h3>
<p>To enable this feature, you need to set <code>mathjax.tags</code> to <code>ams</code> in NexT config file.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: none | ams | all</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">ams</span></span><br></pre></td></tr></table></figure>
<p>为了使用这项功能，一般来说，你必须把所使用的 LaTeX 公式放在 <code>equation</code> 环境里面，采用旧的方法（也就是说，仅仅把公式的每一边用两个 <code>$</code> 符号包含起来）是无效的。如何引用公式？你只需要在书写公式的时候给公式一个 <code>\label&#123;&#125;</code> 标记（tag），然后在正文中，可以使用 <code>\ref&#123;&#125;</code> 或者 <code>\eqref&#123;&#125;</code> 命令来引用对应的公式。使用 <code>\eqref&#123;&#125;</code> 是推荐的方式，因为如果你使用 <code>\ref&#123;&#125;</code>，公式在文中的引用编号将没有圆括号包围。下面介绍几种常见的公式编号例子.</p>
<p>对于简单的公式，使用下面的方式给公式一个标记，</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span><span class="keyword">\begin</span>&#123;equation&#125;<span class="keyword">\label</span>&#123;eq1&#125;</span><br><span class="line">e=mc<span class="built_in">^</span>2</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;<span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>然后，在正文中，你可以轻松引用上述公式，一个简单的例子如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">著名的质能方程 $\eqref&#123;eq1&#125;$ 由爱因斯坦提出 ...</span><br></pre></td></tr></table></figure>
<h3 id="Multi-line-Equations"><a class="header-anchor" href="#Multi-line-Equations"></a>Multi-line Equations</h3>
<p>对于多行公式，在 <code>equation</code> 环境中，你可以使用 <code>aligned</code> 环境把公式分成多行，</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span><span class="keyword">\begin</span>&#123;equation&#125;<span class="keyword">\label</span>&#123;eq2&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;aligned&#125;</span><br><span class="line">a <span class="built_in">&amp;</span>= b + c <span class="keyword">\\</span></span><br><span class="line">  <span class="built_in">&amp;</span>= d + e + f + g <span class="keyword">\\</span></span><br><span class="line">  <span class="built_in">&amp;</span>= h + i</span><br><span class="line"><span class="keyword">\end</span>&#123;aligned&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;equation&#125;<span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<h3 id="Multiple-Aligned-Equations"><a class="header-anchor" href="#Multiple-Aligned-Equations"></a>Multiple Aligned Equations</h3>
<p>要对齐多个公式，我们需要使用 <code>align</code> 环境。align 环境中的每个公式都有自己的编号：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span><span class="keyword">\begin</span>&#123;align&#125;</span><br><span class="line">a <span class="built_in">&amp;</span>= b + c <span class="keyword">\label</span>&#123;eq3&#125; <span class="keyword">\\</span></span><br><span class="line">x <span class="built_in">&amp;</span>= yz <span class="keyword">\label</span>&#123;eq4&#125;<span class="keyword">\\</span></span><br><span class="line">l <span class="built_in">&amp;</span>= m - n <span class="keyword">\label</span>&#123;eq5&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;align&#125;<span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<h3 id="Exclude-Equations-from-Numbering"><a class="header-anchor" href="#Exclude-Equations-from-Numbering"></a>Exclude Equations from Numbering</h3>
<p>在 <code>align</code> 环境中，如果你不想给某个或某几个公式编号，那么在这些公式后面使用 <a href="https://tex.stackexchange.com/questions/17528/show-equation-number-only-once-in-align-environment"><code>\nonumber</code></a> 命令即可。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$\begin&#123;align&#125;</span><br><span class="line">-4 + 5x &amp;= 2+y \nonumber  \\</span><br><span class="line"> w+2 &amp;= -1+w \\</span><br><span class="line"> ab &amp;= cb</span><br><span class="line">\end&#123;align&#125;$$</span><br></pre></td></tr></table></figure>
<h3 id="Use-tag-to-Tag-Equations"><a class="header-anchor" href="#Use-tag-to-Tag-Equations"></a>Use <code>\tag</code> to Tag Equations</h3>
<p>有时，你可能会希望采用更加奇特的方式来标记和引用你的公式，你可以通过使用 <code>\tag&#123;&#125;</code> 命令来实现，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$x+1\over\sqrt&#123;1-x^2&#125; \tag&#123;i&#125;\label&#123;eq_tag&#125;$$</span><br></pre></td></tr></table></figure>
<p>如果你想要了解更多信息，请访问 <a href="https://docs.mathjax.org/en/latest/input/tex/eqnumbers.html">MathJax 关于公式编号的官方文档</a>。同时，你也可以阅读 <a href="https://theme-next.org/docs/third-party-services/math-equations">这篇文档</a> 来获取更多细节信息。</p>
<h2 id="字体"><a class="header-anchor" href="#字体"></a>字体</h2>
<p>默认字体(<code>font: false</code>)是温软雅黑, 还挺好看的. 当然也可以自己改字体.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>低版本的Next的<code>font: false</code>的中文巨丑, 将<code>font</code>设为true,之后比原来好看了..</p>
<p>但我也不知道新字体是啥</p>
<h2 id="代码块"><a class="header-anchor" href="#代码块"></a>代码块</h2>
<ul>
<li>
<p>代码高亮: 这个网站可以预览所有高亮效果：<a href="https://theme-next.js.org/highlight/">传送门</a></p>
<p>我使用highlight作为高亮引擎, 高亮用<code>arduino-light</code></p>
</li>
<li>
<p>我没有设置代码块行号</p>
</li>
</ul>
<p>主题配置文件:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="comment"># light: default</span></span><br><span class="line">    <span class="comment"># dark: stackoverflow-dark</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">arduino-light</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">arduino-light</span></span><br><span class="line">  <span class="attr">prism:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">vs</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">vs</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">flat</span></span><br></pre></td></tr></table></figure>
<p>Hexo项目配置文件:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="图像缩放"><a class="header-anchor" href="#图像缩放"></a>图像缩放</h2>
<p><code>NexT</code>集成了多种图像显示工具, 包括<code>FancyBox</code>和<code>MediumZoom</code>, 主要功能是图像缩放.</p>
<p>开启<code>MediumZoom</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># A JavaScript library for zooming images like Medium.</span><br><span class="line"># Warning: Do not enable both `fancybox` and `mediumzoom`.</span><br><span class="line"># For more information: https://medium-zoom.francoischalifour.com</span><br><span class="line">mediumzoom: true</span><br></pre></td></tr></table></figure>
<h2 id="图像懒加载"><a class="header-anchor" href="#图像懒加载"></a>图像懒加载</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-lazyload --save</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lazyload: true</span><br></pre></td></tr></table></figure>
<h2 id="访客人数-文章阅读次数"><a class="header-anchor" href="#访客人数-文章阅读次数"></a>访客人数&amp;&amp;文章阅读次数</h2>
<p><code>NexT</code>主题已集成了不蒜子的访客人数和文章阅读统计功能:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">user</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">eye</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">eye</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在首页显示文章的阅读次数</li>
<li>点击全文阅读显示阅读次数</li>
<li>在底部可以看见访客人数和文章阅读次数</li>
</ul>
<h2 id="网页加载加速"><a class="header-anchor" href="#网页加载加速"></a>网页加载加速</h2>
<p>使用<a href="https://github.com/theme-next/hexo-filter-optimize">hexo-filter-optimize</a>来提升网页加载速度:</p>
<ol>
<li>
<p>下载插件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-optimize</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>编辑配置文件:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">filter_optimize:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># remove the surrounding comments in each of the bundled files</span></span><br><span class="line">  <span class="attr">remove_comments:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">css:</span></span><br><span class="line">    <span class="comment"># minify all css files</span></span><br><span class="line">    <span class="attr">minify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># bundle loaded css files into one</span></span><br><span class="line">    <span class="attr">bundle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># use a script block to load css elements dynamically</span></span><br><span class="line">    <span class="attr">delivery:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># make specific css content inline into the html page</span></span><br><span class="line">    <span class="comment">#   - only support the full path</span></span><br><span class="line">    <span class="comment">#   - default is [&#x27;css/main.css&#x27;]</span></span><br><span class="line">    <span class="attr">inlines:</span></span><br><span class="line">    <span class="attr">excludes:</span></span><br><span class="line">  <span class="attr">js:</span></span><br><span class="line">    <span class="comment"># minify all js files</span></span><br><span class="line">    <span class="attr">minify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># bundle loaded js files into one</span></span><br><span class="line">    <span class="attr">bundle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">excludes:</span></span><br><span class="line">  <span class="comment"># set the priority of this plugin,</span></span><br><span class="line">  <span class="comment"># lower means it will be executed first, default of Hexo is 10</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">12</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="back2top-button"><a class="header-anchor" href="#back2top-button"></a>back2top button</h2>
<p>back2top button非常好看, 默认是添加的:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line">  # Back to top in sidebar. button默认出现在左下角, 如果这里为true,就会出现在sidebar里面(头像, 目录下面),很难察觉</span><br><span class="line">  # 所以我设为false</span><br><span class="line">  sidebar: false</span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line">  # 让to-top的小箭头随时显示数值, 我觉得这样破坏阅读体验, 所以为false</span><br><span class="line">  scrollpercent: false</span><br></pre></td></tr></table></figure>
<p>这里有个<a href="https://github.com/jiangtj-lab/hexo-cake-moon-menu">插件</a>, 不过已经不需要了. 自带的就很好看.</p>
<h2 id="版权"><a class="header-anchor" href="#版权"></a>版权</h2>
<p>选择<code>sidebar</code>, 会在sidebar出现一个小徽章, 不怎么碍眼. 如果选择<code>post</code>, 版权信息会出现在文章底部, 很难看.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Creative Commons 4.0 International License.</span></span><br><span class="line"><span class="comment"># See: https://creativecommons.org/about/cclicenses/</span></span><br><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="comment"># Available values: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | cc-zero</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="comment"># Available values: big | small</span></span><br><span class="line">  <span class="attr">size:</span> <span class="string">small</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span></span><br><span class="line">  <span class="comment"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></table></figure>
<h2 id="一些不想用的美化"><a class="header-anchor" href="#一些不想用的美化"></a>一些不想用的美化</h2>
<p>以下美化我都不想用, 只是给出添加方式.</p>
<ul>
<li>
<p>添加版权信息: 版权信息很丑, 所以我没加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>添加评论系统. 我不想加</p>
</li>
<li>
<p>夜间模式: 这是永久的, 不能手动切换, 所以我也不想加.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">darkmode: true</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Reading progress bar: 五颜六色的,影响观看:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reading_progress:</span> <span class="string">Reading</span> <span class="string">progress</span> <span class="string">bar</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="多主机同步"><a class="header-anchor" href="#多主机同步"></a>多主机同步</h1>
<p>多主机同步主要的坑在于主题的管理</p>
<h2 id="多分支"><a class="header-anchor" href="#多分支"></a>多分支</h2>
<p>在安装插件后,<code>hexo d</code>会生成网页文件, 并将其部署到GitHub和GitPage. 但是不会把源文件也push到github. 我们需要:</p>
<ol>
<li>
<p>在Github建两个分支,分别管理生成的网页文件和源文件:</p>
<ul>
<li>master: 用于存放<code>hexo d </code>部署的网页文件</li>
<li>hexo: 用于项目源文件, 包括文档源文件</li>
</ul>
</li>
<li>
<p>在Github仓库<code>-&gt;Settings-&gt;Branches-&gt;Default branch</code>中将默认分支设为<code>Hexo</code>. 这样每次手动push源文件,都到hexo分支.</p>
<p>当然也可以每次都手动指定,这样很蠢:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>而我们的<code>hexo d</code>会把生成的网页文件同步到master分支. 这是之前配置<code>hexo d</code>插件时设置的:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:LYK-love/LYK-love.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="多主机同步的问题"><a class="header-anchor" href="#多主机同步的问题"></a>多主机同步的问题</h2>
<p>我们看到, Hexo添加主题的一般流程是 <code>clone</code> 主题到对应的 <code>themes</code>目录中，然后编辑Hexo的配置文件. 但是, 主题是一个独立的github仓库, 有自己的 <code>.git</code> 文件夹, 也就是说<strong>本地的主题项目是嵌套在Hexo项目内的字仓库</strong>.</p>
<p><strong>当push本地仓库时, 是不会push子仓库的</strong>, 证据就是, 在github上查看网站项目仓库, 点进<code>&lt;repository&gt;/themes/</code>, 会发现<code>next</code>文件夹有个很奇怪的名字: <code>[next @ XXXXX</code>, 点击它, 会跳转到该主题文件夹对应的github项目. 这说明<strong>本地的主题文件夹是一个子项目, 从来没有随着父项目一起被push到github上</strong>.</p>
<p>因此, 当有新主机<strong>clone</strong>你的hexo仓库时( 比如它要参与多主机同步 ), 它clone下的主题文件夹是空的.</p>
<p>比如, 我用next主题, 当我买了台新电脑, 想要在它上面同步我开发的hexo. clone下我的网站, 发现项目内<code>themes/next</code>为空. 这样就无法正确生成网站页面了.</p>
<blockquote>
<p>该Bug的表面结果是: hexo生成的<code>index.html</code>也为空( 0kb )</p>
</blockquote>
<p>主题文件夹不会被push, 且每次主题更新时,都会被overwritten, 所以不要更改主题文件夹到任何内容.</p>
<p>对于<strong>主题配置文件</strong>. Next官方提供<a href="https://theme-next.js.org/docs/getting-started/configuration">Alternate Theme Config机制</a>来让用户自定义主题配置:</p>
<ol>
<li>
<p>把主题配置文件复制到Hexo项目目录下, 取名为 <code>_config.[name].yml</code>. Replace <code>[name]</code> with the value of <code>theme</code> option in Hexo config file. For NexT theme, the file name is <code>_config.next.yml</code> by default</p>
</li>
<li>
<p>现在主题的配置文件就会读取Hexo项目目录的<code>_config.[name].yml</code>, 而不是主题目录的<code>_config.yml</code>. 由于位于Hexo项目目录下, <code>_config.[name].yml</code>会随着每次的push被push到Hexo项目的仓库. 不用担心<strong>子项目问题</strong></p>
</li>
<li>
<p>多主机同步时, 新主机只需clone整个项目:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/LYK-love/LYK-love.github.io</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>对于CSS之类的文件, 反我是不会改的, 所以无所谓同步. 对于图片, <a href="#Configuring-Favicon">之前</a>讲了,可以放在项目的<code>/source/images/</code>进行同步( 而不是主题的<code>themes/next/images</code>).</p>
<p>当然为了保险, 我也另外在项目文件夹内备份了图片文件.</p>
<p>下文的**@Deprecated 同步步骤**是被废弃的方案, 它使用git modules, 这种方案新建了主题仓库, 然后用git module同步整个主题文件夹, 问题在于这样做就没法进行主题的更新了, 因此废弃</p>
<h2 id="New-同步步骤"><a class="header-anchor" href="#New-同步步骤"></a>@New 同步步骤</h2>
<p>老主机只需<code>git pull</code>就行了.</p>
<p>对于本地还没有hexo项目的新主机, 需要:</p>
<ol>
<li>
<p>clone自己的Hexo项目并初始化:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/LYK-love/LYK-love.github.io</span><br><span class="line">cd LYK-love.github.io</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>可能会遇到报错:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR Cannot find module &#x27;hexo&#x27; from &#x27;/Users/lyk/Documents/LYK-love.github.io&#x27;</span><br><span class="line">&lt;Snip&gt;</span><br><span class="line">ERROR Try running: &#x27;rm -rf node_modules &amp;&amp; npm install --force&#x27;</span><br></pre></td></tr></table></figure>
<p>只需按照提示操作即可:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf node_modules &amp;&amp; npm install --force</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装主题</p>
</li>
<li>
<p>由于下文介绍的Next主题的Alternate Theme Config机制, 主题配置文件已经在Hexo项目文件夹中被我们clone下来了, 也就是说已经同步了, 万事大吉.</p>
<ul>
<li>由前文知, hexo-renderer-markdown-it的配置也放在主题配置文件中进行同步了.</li>
</ul>
</li>
<li>
<p>但是, images等文件没有同步, 我把images放在Hexo项目文件夹下, 需要手动把它copy到主机文件夹的<code>source/images</code>中</p>
</li>
</ol>
<h2 id="Deprecated-同步步骤"><a class="header-anchor" href="#Deprecated-同步步骤"></a>@Deprecated 同步步骤</h2>
<p><strong>注: 该方案已经被废弃</strong></p>
<p>Ref:</p>
<ul>
<li><a href="https://juejin.cn/post/6844903751908605965"> 在 hexo 中使用 git submodules 管理主题 </a></li>
</ul>
<p>在Hexo多主机同步时, 我们当然希望自己的主题配置文件也同步.</p>
<hr>
<p><strong>Bad Practice</strong>: 由于本地的主题项目没办法push, 新主机就只能每次只clone 自己Hexo项目, 然后重新clone官方的主题. 这样做是愚蠢的. 多台机子上开发, 每台的本地都是不同的主题项目, 每次生成网页文件,样式都不一样.</p>
<hr>
<p>因此, 我们需要<strong>有一个自己的主题项目, 来对主题也进行版本管理</strong>. 可以fork官方主题项目, 但我为了方便, 直接创建了<a href="https://github.com/LYK-love/Next">自己的主题项目</a>.</p>
<h3 id="Old-Hosts"><a class="header-anchor" href="#Old-Hosts"></a>Old Hosts</h3>
<p>对于已经加入多主机同步的主机来说, 如果本地更改了主题. 那么每次除了push Hexo项目文件, 还得把再把主题项目文件也push. 否则主题配置的更改是没法同步到Github的.</p>
<hr>
<p>push子项目:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ./themes/next</span><br><span class="line">git add . &amp;&amp; git commit -m&quot;XXX&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<hr>
<p>要在pull Hexo项目时顺便拉取子项目( 主题项目 ), 这称为update submodule:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把项目的子项目也pull下来</span></span><br><span class="line">git submodule update --init</span><br></pre></td></tr></table></figure>
<p>当然也可以pull Hexo后手动再pull子项目,这样很蠢:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ./themes/next</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>
<h3 id="New-Hosts"><a class="header-anchor" href="#New-Hosts"></a>New Hosts</h3>
<p>对于要加入多主机同步的新主机来说, 要把主题文件当作git submodule, 在初始化阶段, 先同步Hexo, 再同步主题.</p>
<ol>
<li>
<p>clone自己的Hexo项目并初始化:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/LYK-love/LYK-love.github.io</span><br><span class="line">cd LYK-love.github.io</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将主题作为submodule添加进来:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd blog-hexo</span><br><span class="line">git submodule add https://github.com/LYK-love/next themes/next</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>git submodule add &lt;sub-module-registry&gt;</code>:  git 会将主题项目( 也就是我的<code>next</code>项目 )作为一个submodule,  clone 到 <code>themes/hexo</code> 中.</p>
<ul>
<li>同时 hexo 项目中会生成一个 <code>.gitmodules</code> 文件, 这个配置文件中保存了项目 URL 与已经拉取的本地目录之间的映射.</li>
</ul>
</li>
<li>
<p><code>.gitmodules 文件内容</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; cat .gitmodules</span><br><span class="line">[submodule &quot;themes/next&quot;]</span><br><span class="line">	path = themes/next</span><br><span class="line">	url = git@github.com:LYK-love/next.git</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>update submudule, 第一次update时要加<code>--init</code>选项:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git submodule update --init</span><br></pre></td></tr></table></figure>
<ul>
<li>也可在 clone 父项目时直接使用 <code>git clone --recursive</code> , git 也会pull所有的子项目.</li>
</ul>
</li>
<li>
<p>现在新主机已经加入多主机同步, 变成Old Hosts了.</p>
</li>
</ol>
<h2 id="Bugs"><a class="header-anchor" href="#Bugs"></a>Bugs</h2>
<ul>
<li>
<p><code>hexo g</code> 会生成静态文件, 但是，如果你的目录下有失效的软链接， 就不会生成文件。 因此请删除所有的失效软链接</p>
<ul>
<li>ref：<a href="https://chrisbergeron.com/2020/12/24/fixing-hexo-not-generating-files/#:~:text=If%20you%E2%80%99re%20having%20trouble%20with%20Hexo%20not%20generating,l%20-exec%20test%20%21%20-e%20%7B%7D%20%3B%20-print"> Fixing Hexo Not Generating Files </a></li>
</ul>
</li>
<li>
<p>hexo的markdown源代码避免出现<strong>跨级标题结构</strong>， 这里的<em>跨级</em>指的是不能从一个一级标题直接跟三级标题；二级标题后紧跟的子标题级别必须是三级标题</p>
</li>
<li>
<p>文章的Front-matter是YAML格式, 因此冒号后面必须有一个英文空格:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: XX</span><br><span class="line">categories: XX</span><br><span class="line">tags: XX</span><br></pre></td></tr></table></figure>
<p>否则报错:</p>
<p>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key</p>
</li>
<li>
<p>如果表格多了行/列,在显示时会很丑</p>
</li>
<li>
<p>极其罕见的Bug, 花了我大半天: Hexo和Next分别更新, 结果Latex不能显示, hexo g巨慢, 页面闪烁, back2top小箭头图表消失等等等等... 最好他居然神奇地好了. 我猜是package.json冲突了. 不过具体原因我也不知道... .气死我了.</p>
</li>
</ul>
<h1 id="Hexo-Doc"><a class="header-anchor" href="#Hexo-Doc"></a>Hexo Doc</h1>
<p>网上没有关于安装指定版本的Hexo的教程. 我的做法是抄一份指定版本的<code>package.json</code>然后<code>npm install</code></p>
<h2 id="Version"><a class="header-anchor" href="#Version"></a>Version</h2>
<ol>
<li>
<p>查看本地Hexo版本:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看有哪些落后的版本:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm outdated</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Install"><a class="header-anchor" href="#Install"></a>Install</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h2 id="Ungrade"><a class="header-anchor" href="#Ungrade"></a>Ungrade</h2>
<ol>
<li>
<p>安装hexo时需要安装hexo-cli(它包含了hexo在内的一大堆依赖), 而升级hexo只需升级所有插件:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g npm-upgrade</span><br></pre></td></tr></table></figure>
<ul>
<li><code>npm-upgrade</code>: 升级作为<code>dependency</code>的hexo</li>
</ul>
</li>
<li>
<p>查看是否更新成功:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Uninstall"><a class="header-anchor" href="#Uninstall"></a>Uninstall</h2>
<ul>
<li>
<p>Uninstall:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="NeXt-Doc"><a class="header-anchor" href="#NeXt-Doc"></a>NeXt Doc</h1>
<p>NexT 每个月都会发布新版本</p>
<p><a href="https://theme-next.js.org/docs/getting-started/installation.html">安装文档</a></p>
<h2 id="Version-2"><a class="header-anchor" href="#Version-2"></a>Version</h2>
<p>NeXt &lt; 8的版本好像没办法查看</p>
<p>Next &gt;=8 之后, 每次<code>hexo s/d</code>时在命令行的输出里都有Next版本信息. 此外<code>hexo version</code>也会显示next版本.</p>
<h2 id="Installation"><a class="header-anchor" href="#Installation"></a>Installation</h2>
<p>由于我不对主题做版本管理, 也就不新开仓库了.</p>
<p>无论是下载还是更新Next, 都要先更新到最新的Hexo.</p>
<h3 id="Using-npm"><a class="header-anchor" href="#Using-npm"></a>Using npm</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next@latest</span><br></pre></td></tr></table></figure>
<ul>
<li>npm会把主题文件夹下载到<code>/node_modules/hexo-theme-next</code></li>
</ul>
<h3 id="Using-git"><a class="header-anchor" href="#Using-git"></a>Using git</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<ul>
<li>注意, 如果在<code>themes/</code>下已经存在了主题文件夹, 则Hexo会忽略<code>node_modules/</code>中可能存在的/主题文件夹. 也就是说要么用git, 要么用npm, 两者不能共存</li>
</ul>
<h2 id="Upgrade"><a class="header-anchor" href="#Upgrade"></a>Upgrade</h2>
<p>记得备份old主题文件夹的文件, 把旧主题文件夹rename为<code>next-old</code>. 当然, 由于该文件夹一般什么都不会改,所以不备份也没啥关系</p>
<p>已经采用了Alternate Theme Config, 因此可以平滑地升级:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>
<h1 id="Markdown"><a class="header-anchor" href="#Markdown"></a>Markdown</h1>
<h2 id="页面内跳转"><a class="header-anchor" href="#页面内跳转"></a>页面内跳转</h2>
<h2 id="Anchor"><a class="header-anchor" href="#Anchor"></a>Anchor</h2>
<h3 id="Auto"><a class="header-anchor" href="#Auto"></a>Auto</h3>
<p>只需要使用<code>hexo-renderer-markdown-it</code>, 并修改其配置文件, 就可以使文章Header自带Anchor</p>
<h3 id="Manual"><a class="header-anchor" href="#Manual"></a>Manual</h3>
<p>例子:</p>
<p>Markdown的一个标题:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">// in markdown:</span><br><span class="line"><span class="section"># Ha ha</span></span><br><span class="line">dadads</span><br></pre></td></tr></table></figure>
<p>会被Hexo渲染成:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//in html</span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> = <span class="string">&quot;ha-ha&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>dadads<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>空格会被转换为连字符, 大写会被转换为小写.
<ul>
<li>由于我在<code>hexo-renderer-markdown-it</code>中的配置, 空格会被转换为<code>-</code>, 而大小写是<strong>不转换</strong>的</li>
</ul>
</li>
</ul>
<hr>
<p>如果有重名的标题(即使处于不同的标题层次), 就会在html的标签的id属性中予以区分:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">// in markdown:</span><br><span class="line"><span class="section"># haha</span></span><br><span class="line">dadads</span><br><span class="line"></span><br><span class="line"><span class="section"># Heihei</span></span><br><span class="line"><span class="section">## Haha //重名了</span></span><br><span class="line">asa</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//in html</span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> = <span class="string">&quot;haha-1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>dadads<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> = <span class="string">&quot;haha-2&quot;</span>&gt;</span> //用数字后缀区分了</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>asa<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>因此, 只需要在markdown中写:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[显示的内容](#标题)</span><br></pre></td></tr></table></figure>
<p>生成的Html是:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;标题&quot;&gt;显示的内容&lt;/a&gt;</span><br></pre></td></tr></table></figure>
<p>这就引用了对应的标题:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 标题</span><br></pre></td></tr></table></figure>
<p>可以看到, 这是基于Html的标签id匹配的, 而Markdown标题生成的Html标签的id和标题级别没有关系, 只和标题名字有关系. 所以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[显示的内容](#KKK)</span><br></pre></td></tr></table></figure>
<p>可以引用到:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Haha</span><br><span class="line">## KKK</span><br></pre></td></tr></table></figure>
<p>中的二级标题<code>KKK</code></p>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
  </entry>
  <entry>
    <title>How Digital Cameras Work</title>
    <url>/2022/08/22/How-Digital-Cameras-Work/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Pixel's Color</li>
<li>Bayer Array</li>
<li>Interpolation/Approximation</li>
<li>Other applications of interpolation</li>
</ul>
<span id="more"></span>
<h1 id="Pixel-s-Color"><a class="header-anchor" href="#Pixel-s-Color"></a>Pixel's Color</h1>
<p>在<a href="https://lyk-love.cn/2022/08/14/Resolution-on-Screen/#more">Resolution on Screen</a>中, 我介绍了Pixel的概念. 我们也知道颜色是由红, 绿, 蓝 三原色组成的:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/red%2C%20green%2C%20blue.png" alt="read, green, blue"></p>
<p>每个像素都有颜色和亮度. 但是感光元件只能衡量亮度, 无法衡量光的波长(颜色), 要想感知色彩，需要在每个感光元件前加滤色片( filter ), 滤色片是<strong>单色</strong>的.</p>
<p>感光元件的材料有CCD (charge coupled device), and CMOS (complementary metal oxide semiconductor ). 对应人眼球的中央凹(当然中央凹不仅可以感知光的强度, 还能感知色彩)</p>
<ul>
<li>CMOS作为一种SDRAM,也被用于计算机领域,参见<a href="https://lyk-love.cn/2022/08/01/Computer-Storage/?highlight=stora">Computer Storage</a></li>
</ul>
<hr>
<ul>
<li>
<p>对于显示屏来说, 每个像素(感光元件)都是由三个红, 绿, 蓝的单色子像素(子感光元件)组成的.</p>
</li>
<li>
<p>数码图像和显示器一样, 每个像素也由三个单色的子像素构成</p>
</li>
<li>
<p>对于相机来说, 每个像素只是<strong>单色</strong>的, 缺失的另两种颜色从邻居“借来”</p>
<ul>
<li>照理来说可以像显示器一样, 将三个不同颜色的像素作为子像素合并为一个像素. 但是这样做效率很低, 对于相机而言不可接受.</li>
<li>上面说法有个前提, 那就是感光元件使用Bayer Array.</li>
</ul>
</li>
</ul>
<h1 id="Bayer-Array"><a class="header-anchor" href="#Bayer-Array"></a>Bayer Array</h1>
<h2 id="Uneven-Distribution-of-Filters"><a class="header-anchor" href="#Uneven-Distribution-of-Filters"></a>Uneven Distribution of Filters</h2>
<p>相机的每个像素都有一个单色对Filter. 令人惊讶的是, <strong>Filter的数量是不均匀的</strong>.</p>
<p>其实, 人眼对于色彩的感知是不均匀的. 人眼的锥体( 大概6 million )有50%对绿色敏感, 25%对蓝色和红色敏感:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/human%20eyes%27%20color%20sensor%20distribution.png" alt="human eyes' color sensor distribution"></p>
<hr>
<p><a href="https://en.wikipedia.org/wiki/Bryce_Bayer">Bryce Bayer</a>根据这点发明了Bayer Array. 其中绿色Filter占50%, 红色和蓝色Filter各占25%:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/Bayer%20Array%201.png" alt="Bayer Array 1"></p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/Bayer%20Array%202.png" alt="Bayer Array 2"></p>
<p>由于简单好用, Bayer Array被绝大多数相机镜头采纳</p>
<h2 id="Mind-the-Gap"><a class="header-anchor" href="#Mind-the-Gap"></a>Mind the Gap</h2>
<p>下面介绍一下Bayer Array的成像步骤:</p>
<p>这是一张花的图片:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/flower.png" alt="flower"></p>
<hr>
<p>框起来的区域:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/flower%20area.png" alt="flower area"></p>
<p>我们要对框起来的区域使用bayer filter, 也就是单色的filter:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/flower%20filter.png" alt="flower filter"></p>
<hr>
<p>这是输出的红色像素:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/flower%20filter%20red.png" alt="flower filter red"></p>
<p>可以看到, 拥有红色Filter的像素大概占50%</p>
<hr>
<p>这是绿色像素:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/flower%20filter%20green.png" alt="flower filter green"></p>
<p>大概25%.</p>
<hr>
<p>这是蓝色像素:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/flower%20filter%20blue.png" alt="flower filter blue"></p>
<p>大概25%.</p>
<hr>
<p>将这三张像素图拼起来, 再结合它们对应的颜色:</p>
<center class="half">
    <img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/flower%20filter%20composed.png" width="200"/><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/Bayer%20Array%203.png" width="200"/>
</center>
<p>就得到了:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/flower%20output.png" alt="flower output"></p>
<p>可以看到, 结果图片还是很模糊的, 这是因为Bayer Array的像素都是单色的, 还缺失另外两原色. 对此, 我们需要采用数学手段, “猜出” 另外两原色.</p>
<h1 id="Interpolation-Approximation"><a class="header-anchor" href="#Interpolation-Approximation"></a>Interpolation/Approximation</h1>
<p>猜色问题可以抽象为: 已知两个点, 如何“猜出”它们的中间点. 这就是一个近似/插入问题.</p>
<p>对此, 我们有很多方法.</p>
<h2 id="Nearest-neighbor"><a class="header-anchor" href="#Nearest-neighbor"></a>Nearest-neighbor</h2>
<p>最简单的方法就是向邻居“借”颜色. 也就是中间点的取值 == 离中间点最近的点的取值.</p>
<p>在1维图像上, 就是这样:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/Nearest-neighbor%201D.png" alt="Nearest-neighbor 1D"></p>
<p>二维图像是这样:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/Nearest-neighbor%202D.png" alt="Nearest-neighbor 2D"></p>
<hr>
<p>对于相机的场景, 假设左图为原图, 右图采用了最近邻:</p>
<center class="half">
    <img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/camera%20pixels%20exp.png" width="200"/><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/camera%20pixels%20Nearest-neighbor.png" width="200"/>
</center>
<hr>
<p>最近邻的优点是没有引入任何的虚拟值. 缺点是形成的图像成块状, 不够连续.</p>
<h2 id="Linear"><a class="header-anchor" href="#Linear"></a>Linear</h2>
<p>线性建模就是把已知点用直线连起来.</p>
<p>1维:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/Linear%201D.png" alt="Linear 1D"></p>
<p>2维:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/Linear%202D.png" alt="Linear 2D"></p>
<hr>
<p>对于之前的相机的例子:</p>
<center class="half">
    <img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/camera%20pixels%20exp.png" width="200"/>
  <img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/camera%20pixels%20Linear.png" width="200"/>
</center>
<hr>
<p>线性近似相比最近邻, 没有那么“blocky”. 但是如果图像有sharp edge, 用线性近似会把边界模糊掉</p>
<h2 id="Quadratic"><a class="header-anchor" href="#Quadratic"></a>Quadratic</h2>
<p>既然一阶的线性多项式效果不好, 不妨试试二阶. 二阶多项式需要三个点:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/Quadratic.png" alt="Quadratic"></p>
<p><em>图中的黄色点就是二阶近似生成的</em></p>
<p>很可惜, 二阶近似没法使用, 因为:</p>
<ol>
<li>图中可以看到, 二阶近似产生的中间值很可能过高或过低.</li>
<li>二阶方程没有拐点, 曲线不够平滑</li>
</ol>
<h2 id="Cubic"><a class="header-anchor" href="#Cubic"></a>Cubic</h2>
<p>再试试四阶近似, 这需要四个点:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/Cubic.png" alt="Cubic"></p>
<p>1维:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/Cubic%201D.png" alt="Cubic 1D"></p>
<p>3阶近似的效果不错. 但由于每次只考虑4个点,  前四个点的3阶方程曲线, 和后四个点的曲线, 可能会有比较大的差异. 所以在某些情况下, 3阶近似效果一般.</p>
<h2 id="Catmull-Rom-Splines"><a class="header-anchor" href="#Catmull-Rom-Splines"></a>Catmull-Rom Splines</h2>
<p>这是对3阶近似的一个改进. 依然需要4个点, 设为$x_{-1},x_0, x_1, x_2$, 假设要求$x_0, x_1$的中间点, $x_0, x_1$中间曲线的三阶近似方程为:<br>
$$<br>
\begin{align}<br>
f(x) = ax^3 + bx^2 + cx + d \nonumber \<br>
f'(x) = 3ax^2 + 2bx + c \nonumber \<br>
f'(x) = 3ax^2 + 2bx + c \nonumber<br>
\end{align}<br>
$$<br>
我们已经知道了$f(x_0), f(x_1)$, Catmull-Rom Splines要求设3阶方程在$x_0, x_1$处的斜率分别是直线$x_{-1}x_1, x_0x_2$的斜率. 也就是：<br>
$$<br>
\begin{align}<br>
f'(x_0) = \frac {y_1 - y_{-1}}{2} \nonumber \newline<br>
f'(x_1) = \frac {y_2 - y_0}{2} \nonumber<br>
\end{align}<br>
$$</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/Catmull-Rom%20Splines.png" alt="Catmull-Rom Splines"></p>
<hr>
<p>1维:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/Catmull-Rom%20Splines%201D.png" alt="Catmull-Rom Splines 1D"></p>
<hr>
<p>2维:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/Catmull-Rom%20Splines%202D.png" alt="img"></p>
<hr>
<p>相机:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/camera%20pixels%20exp.png" alt="img"></p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/camera%20pixels%20Catmull-Rom%20Splines.png" alt="camera pixels Catmull-Rom Splines"></p>
<p>可以和普通的3阶近似做对比.</p>
<p>实践证明, Catmull-Rom Splines方法效果更好, 因此大部分相机都使用该算法.</p>
<h1 id="General-Case"><a class="header-anchor" href="#General-Case"></a>General Case</h1>
<p>对于像素填充问题, 我们只需要在两个点之间近似一个中间点就好了. 对于更一般的情况, 即在两个点之间近似一条曲线, 我们还有更多的方法.</p>
<h2 id="Half-Cosine"><a class="header-anchor" href="#Half-Cosine"></a>Half-Cosine</h2>
<p>取余弦函数曲线的一半, 它具有如下的“优秀”特性:</p>
<ol>
<li>平滑</li>
<li>两端点处导数为0. 因此不会生成比已有值更高/低的近似值</li>
</ol>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/Half-Cosine.png" alt="Half-Cosine"></p>
<p>1维:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/Half-Cosine%201D.png" alt="Half-Cosine 1D"></p>
<p>不过, 由于$\cos(\pi/4) = 1/2$, 对于求离散点的中点的情况, 其结果和线性近似一样. 所以对于相机像素的近似, 没必要用cos近似</p>
<h2 id="Smoothstep"><a class="header-anchor" href="#Smoothstep"></a>Smoothstep</h2>
<p>此外还可以将高阶多项式近似继续推广. Smoothstep只用于奇数阶多项式, 为了不产生过高/过低的估计值, 它假设段点处的高阶导数为0.</p>
<p>假设$x \in [0,1], y \in [0,1]$, 已知$f(0), f(1)$</p>
<p>3阶Smoothstep就是3阶多项式, 并且其$f'(0) = f'(1) = 1$</p>
<p>5阶Smoothstep就是5阶多项式, 并且其$f''(0) = f''(1) = f'(0) = f'(1) = 1$</p>
<p>以此类推</p>
<h1 id="Other-applications-of-interpolation"><a class="header-anchor" href="#Other-applications-of-interpolation"></a>Other applications of interpolation</h1>
<h2 id="Damping-motion"><a class="header-anchor" href="#Damping-motion"></a>Damping motion</h2>
<p>前面介绍的近似方法可以应用在很多场景. 考虑一个点的直线运动的近似, 只有起点和终点两个已知点. 我们可以用:</p>
<ol>
<li>最近邻</li>
<li>如果信息足够多的话, 已知点足够多, 比如有7个, 最近邻可以“好看”一点</li>
<li>Half Cosine</li>
<li>3阶Smoothstep</li>
<li>5阶Smoothstep</li>
<li>7阶Smoothstep</li>
</ol>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/How%20Digital%20Cameras%20Work/velocity%20exp.png" alt="velocity exp"></p>
<p>可以看出不同的近似方法的差别</p>
<h1 id="Ref"><a class="header-anchor" href="#Ref"></a>Ref</h1>
<p><a href="https://datagenetics.com/blog/may12018/index.html">https://datagenetics.com/blog/may12018/index.html</a></p>
]]></content>
      <categories>
        <category>Potpourri</category>
      </categories>
  </entry>
  <entry>
    <title>History of Western Music History</title>
    <url>/2022/09/26/History%20of%20Western%20Music%20History/</url>
    <content><![CDATA[<p>Ref:</p>
<p>[西方音乐通论][<a href="http://elite.nju.edu.cn/jiaowu/student/elective/courseList.do?method=getCourseInfoM&amp;courseNumber=37100180&amp;classid=101708">http://elite.nju.edu.cn/jiaowu/student/elective/courseList.do?method=getCourseInfoM&amp;courseNumber=37100180&amp;classid=101708</a>]</p>
<span id="more"></span>
<h1 id="西方音乐调式"><a class="header-anchor" href="#西方音乐调式"></a>西方音乐调式</h1>
<p><code>调式</code><strong>以一个音为中心</strong>,其它音围绕它构建</p>
<ul>
<li><strong>分为大调和小调</strong>（文艺复兴时期发明）</li>
<li>每个音都有其功能性和倾向性</li>
</ul>
<blockquote>
<p>1 主音</p>
<p>2 上主音</p>
<p>3 中音</p>
<p>4 下属音</p>
<p>5 属音，解决<code>1</code></p>
<p>6 下中音</p>
<p>7 导音</p>
<p>【1】主音</p>
</blockquote>
<ul>
<li><code>7</code>是<code>导音</code>,西方音乐里认为<code>7</code>最不稳定,强烈地倾向于<code>高音1</code></li>
</ul>
<h2 id="Major-大调式"><a class="header-anchor" href="#Major-大调式"></a>Major 大调式</h2>
<p><em>明亮,稳定,辉煌</em></p>
<p>由12345671构成. 以 <code>1</code> 为中心.</p>
<p>大调式有三种形态:</p>
<ul>
<li>
<p>自然大调: 12345671   <strong>中等</strong> 没有降调 <em>&lt;国歌&gt;</em></p>
</li>
<li>
<p>和声大调: 12345 (6)71 <strong>最明亮</strong>, <em>&lt;我的太阳&gt;</em> <code>566716532153211</code></p>
</li>
<li>
<p>旋律大调: 12345(67)1  <strong>相对最柔和</strong>,但没有小调那么晦涩</p>
</li>
</ul>
<h2 id="Minor-小调式"><a class="header-anchor" href="#Minor-小调式"></a>Minor 小调式</h2>
<p><em>柔和黯淡</em></p>
<ul>
<li>自然小调:(6)(7)123456 没有降调  <strong>中等程度</strong>   <em>&lt;喀秋莎&gt;</em></li>
<li>和声小调:(6)71234【5】6    <strong>最柔和,最忧伤</strong></li>
<li>旋律小调: (6)(7)123【4】【5】6  **相对明亮一点 **   <em>&lt;斯卡布罗&gt;</em>  标志性的【4】</li>
</ul>
<h1 id="中国民族音乐调式"><a class="header-anchor" href="#中国民族音乐调式"></a>中国民族音乐调式</h1>
<ul>
<li>宫调式:以<code>1</code>为核心(主音),和西方的大调式很像</li>
<li>商调式:以<code>2</code>为核心(主音)</li>
<li>角调式:以<code>3</code>为核心(主音)</li>
<li>徵调式:以<code>5</code>为核心(主音). 以<code>5</code>结束.  <em>&lt;茉莉花&gt;</em></li>
<li>羽调式:以<code>6</code>为核心(主音).</li>
</ul>
<p>称为<code>五声调式</code>。中国音乐里有<code>5</code>和<code>7</code>，但都会一带而过。</p>
<p><code>4</code>叫<code>清角</code>,<code>#4</code>叫<code>变徵</code>,<code>7</code>叫<code>变宫</code>,<code>#7</code>叫<code>闰</code></p>
<h1 id="欧洲中世纪的音乐（4-6世纪）"><a class="header-anchor" href="#欧洲中世纪的音乐（4-6世纪）"></a>欧洲中世纪的音乐（4-6世纪）</h1>
<p><code>米拉琴</code>：西方音乐的一个象征</p>
<p>所有乐器里最古老的：弹拨乐。 有横弹和竖弹。 比如吉他，有西班牙吉他（横弹，一般都是这个）和夏威夷吉他（竖弹）两种。</p>
<hr>
<p>欧洲中世纪的音乐不只是音乐本身。宗教是很大因素。公元一世纪基督教出现，基督教徒有两大重要活动：<em>日课</em>,<em>圣咏</em>。</p>
<p><em>395年，基督教随着罗马帝国分裂，分为东西两部</em></p>
<p>罗马教皇<code>格里高利一世</code>发现各地的<code>圣咏</code>的语言，内容，形式都不一样，于是他规定圣咏的<strong>表现形式</strong>：无伴奏（阿卡贝拉）、拉丁文、<strong>曲调平缓</strong>（对欧洲音乐的发展非常深远，意大利歌剧（<em>诞生于巴洛克时期</em>的美声唱法就是格里高利圣咏经过漫长演变而来的）、服装朴素、表情严肃。这对以后欧洲音乐的影响非常深远。</p>
<p>中世纪音乐享有崇高地位。属于<code>七艺</code>：</p>
<p>语文艺术(语法、逻辑、修辞)</p>
<p>数学艺术（算数、几何、天文、<strong>音乐</strong>）</p>
<p>中世纪音乐除了圣咏，还有经文歌曲、方言歌曲，基本上都是<code>单音音乐</code>（只有一个声部，两个声部叫复调），曲调比较平缓。乐器也分为两大类：弦乐器（主要是弹拨乐，出现得比较早）、管乐器。</p>
<p>此外还有一些音乐具有简单的复调，叫做<code>奥尔加农</code></p>
<p>ref：<em>《乡村骑士间奏曲》</em></p>
<p>圭多</p>
<p>复调</p>
<h1 id="文艺复兴时期"><a class="header-anchor" href="#文艺复兴时期"></a>文艺复兴时期</h1>
<p>帕列斯特里那</p>
<h1 id="巴洛克音乐"><a class="header-anchor" href="#巴洛克音乐"></a>巴洛克音乐</h1>
<p>巴洛克（Baroque）:   在音乐方面指1600 - 1750 左右的欧洲音乐。这个时期复调音乐获得了充分的发展，达到历史上的巅峰，也是巴洛克音乐的主要标志。</p>
<ul>
<li>强调情感的表现和戏剧性对比，在细节上充满装饰性。艺术观念和手法大胆，有尽可能的综合各门艺术的倾向</li>
<li>最重要推动力：16C的人文主义思潮，它直接促进了单声歌曲（monody）和歌剧的诞生</li>
<li>时期：
<ol>
<li>早期：1600 - 1640，巴洛克风格的形成期，它发源于晚期文艺复兴的意大利</li>
<li>中期：1640-1690，定型期，音乐语言逐渐相通，风格开始传遍欧洲</li>
<li>1690-1750：盛期：不是创新，而是完善的时期，达到辉煌的顶点</li>
</ol>
</li>
</ul>
<p>当时的键盘乐器主要是管风琴和古钢琴。</p>
<ul>
<li>
<p><strong>协奏曲</strong>（concerto）：巴洛克最重要的器题材。（在巴洛克时期）强调在一个统一的形式中的突然对比。</p>
<ul>
<li>
<p>指一件或多件独奏乐器与管弦乐队协同演奏</p>
</li>
<li>
<p>独奏协奏曲（solo concerto）：强调一件独奏乐器和整个乐队之间的对比和协调</p>
</li>
<li>
<p>大协奏曲（concerto grosso）：强调某一乐器组（如弦乐队）与整个乐队之间的对比</p>
</li>
</ul>
</li>
<li>
<p>巴洛克时期,声乐和器乐并行发展</p>
<ul>
<li>单声歌曲: <em>monody</em>, 通奏低音伴奏的宣叙风格的歌曲<br>
*</li>
</ul>
</li>
</ul>
<h2 id="歌剧"><a class="header-anchor" href="#歌剧"></a>歌剧</h2>
<ul>
<li>来源: 16C末意大利北部的宫廷娱乐活动和在这种活动中产生的幕间剧</li>
<li>第一部作为音乐完整保留下来的歌剧: Euridice</li>
</ul>
<h3 id="蒙特威尔第"><a class="header-anchor" href="#蒙特威尔第"></a>蒙特威尔第</h3>
<ul>
<li><code>意大利歌剧</code>: 诞生于<code>佛罗伦萨</code>, 发展于<code>威尼斯</code>,成熟于<code>那不勒斯</code>. 那不勒斯也称为&quot;意大利歌剧的故乡&quot;.
<ul>
<li>歌剧有两种:<code>宣叙调</code>（唱），<code>念白</code>（说）</li>
</ul>
</li>
<li><code>蒙特威尔第</code>: <strong>巴洛克早期最重要的音乐家</strong>,威尼斯圣马可大教堂的主教,且是唱诗班的带头人. 他创作了《奥菲欧》（<code>L'Orfeo</code>，被称为西方音乐史上第一部歌剧）、《奥丽安娜》。最早期，在佛罗伦萨诞生的歌剧只有简单的宣叙调，而《奥尔菲斯》有了真正的宣叙调。宣叙调（唱），念白（说）</li>
<li>意大利除了<code>歌剧</code>，还有<code>戏剧</code>,遵循罗马传统, <code>罗马歌剧</code>和<code>意大利戏剧</code>是意大利的两大艺术.</li>
<li>意大利乐器:小提琴</li>
<li>阿马蒂，两个学生：斯特拉迪瓦里， 瓜尔内里
<ul>
<li>意大利的维奥尔(Viol)家族,以生产 小提琴( violin ), 中提琴( viola ), 大提琴( violocello ) 闻名</li>
<li>当时最好的小提琴制造师是<code>艾尔玛蒂</code>(Amati)</li>
<li>意大利是欧洲<strong>拉丁语系</strong>的国家, 拉丁语系国家还有<code>法国</code>, 法国的小提琴不如意大利,但是法国盛产<code>钢琴</code></li>
</ul>
</li>
<li>巴洛克时期音乐特征： 通奏低音</li>
</ul>
<h2 id="器乐的发展"><a class="header-anchor" href="#器乐的发展"></a>器乐的发展</h2>
<ul>
<li>奏鸣曲( sonata ): 独立的器乐作品, 通常是无标题的, 多乐章的室内乐合奏
<ul>
<li>教堂奏鸣曲</li>
<li>室内奏鸣曲</li>
</ul>
</li>
<li>康塔塔( cantata ): 声乐作品</li>
</ul>
<h3 id="维塔利"><a class="header-anchor" href="#维塔利"></a>维塔利</h3>
<p>Vitali, 1632 ~1692</p>
<ul>
<li>《G小调恰空》</li>
</ul>
<h3 id="科雷利"><a class="header-anchor" href="#科雷利"></a>科雷利</h3>
<p>阿尔坎杰罗·科雷利，A.Arcangelo Corelli (1653～1713)</p>
<ul>
<li>意大利小提琴学派的奠基人</li>
<li>第一个完全用大小调体系进行创作的作曲家</li>
<li>《福利亚（La Folia）变奏曲》</li>
</ul>
<h3 id="维瓦尔第"><a class="header-anchor" href="#维瓦尔第"></a>维瓦尔第</h3>
<p>1678 - 1741, “红发神父”</p>
<p>早年写了很多歌剧，活得很滋润，但是引来了天主教会的不满，被禁止在天主教地区演奏，晚年贫困而死。</p>
<ul>
<li>
<p>曾在威尼斯的仁爱救济院任音乐教师</p>
<ul>
<li>仁爱救济院：女童孤儿院。学习优秀的女孩会加入乐队，演奏水平被认为是威尼斯最高的，甚至超过了威尼斯当地的歌剧院。</li>
</ul>
</li>
<li>
<p>在托雷利的基础上进一步发展了<strong>协奏曲</strong>。确立了协奏曲的“快 - 慢 - 快”的三部分形式，一直被沿用到浪漫主义时期。</p>
<ul>
<li>三部分：Allegro（小快板） -- Adagio（柔板） -- Presto（急板）</li>
</ul>
</li>
<li>
<p>协奏曲: 协奏曲（Concerto），是指一件或多件独奏乐器与乐队]协同演奏，</p>
<ul>
<li>协奏曲一词来源于16世纪的意大利语concertare，意为“协调一致”；17世纪，协奏曲一词又产生了拉丁文涵义“竞争”等，接近于现代意义上的协奏曲  。</li>
</ul>
</li>
</ul>
<h2 id="巴洛克晚期"><a class="header-anchor" href="#巴洛克晚期"></a>巴洛克晚期</h2>
<p>1690 - 1750</p>
<p>法国著名音乐家: 拉莫 , 让·巴普蒂斯特·吕利。</p>
<p>德国音乐家:</p>
<h3 id="拉莫"><a class="header-anchor" href="#拉莫"></a>拉莫</h3>
<blockquote>
<p>(Jean - Phiipre Rameau,1683-1764)</p>
</blockquote>
<ul>
<li>法国18C最重要的作曲家</li>
<li>《和声学》</li>
</ul>
<h3 id="斯卡拉蒂"><a class="header-anchor" href="#斯卡拉蒂"></a>斯卡拉蒂</h3>
<blockquote>
<p>Domenico Scarlatti <strong>（1685-1757）</strong></p>
</blockquote>
<ul>
<li>D大调奏鸣曲</li>
</ul>
<h3 id="亨德尔"><a class="header-anchor" href="#亨德尔"></a>亨德尔</h3>
<p>亨德尔: 只写清唱剧（和歌剧）</p>
<blockquote>
<p>亨德尔（Georg Friedrich Handel，1685—1759）出生于德国哈勒城的一个小市民家庭，是著名的英籍德国作曲家。亨德尔少年时期曾跟随当地风琴师、作曲家学习音乐，后来担任了哈雷礼拜堂的风琴师，并开始创作。</p>
</blockquote>
<ul>
<li>宗教清唱剧《弥赛亚》； 管弦乐《水上音乐》《皇家焰火音乐》《奥兰多》&quot;&quot;</li>
<li>首创用英语演唱清唱剧
<ul>
<li>他的清唱剧为剧场而不是教堂而写，因此具有强烈的戏剧性</li>
</ul>
</li>
</ul>
<h3 id="巴赫"><a class="header-anchor" href="#巴赫"></a>巴赫</h3>
<p>巴洛克音乐集大成的音乐家：<strong>巴赫</strong>，他在音乐上最早的突破是<strong>管风琴</strong>领域，音乐上最大的突破是<strong>复调</strong>。</p>
<blockquote>
<p>约翰·塞巴斯蒂安·巴赫（Johann Sebastian Bach，1685年3月21日-1750年7月28日），出生于德国图林根州，他被称为“西方音乐之父”</p>
<p>在<em>圣托马斯教堂</em>工作了20多年</p>
</blockquote>
<ul>
<li>复调：最简单的形式是 <code>奥尔加农</code>,普通的叫<code>复调</code>,复杂的叫<code>赋格</code>.
<ul>
<li>两段或两段以上同时进行、相关但又有区别的声部所组成，这些声部各自独立，但又和谐地统一为一个整体，彼此形成和声关系，以对位法为主要创作技法。 不同旋律的同时结合叫做对比复调，同一旋律隔开一定时间的先后模仿称为模仿复调</li>
</ul>
</li>
</ul>
<p>半音阶幻想曲与赋格, 15首两部创意曲,。 第一个把十二平均律应用在钢琴领域( 明朝 zhuzaiyu证明了十二平均律, 可是没有应用在音乐实践上 )；200多首宗教contata（占作品总数的一半）, 23首世俗contata, 《马太受难曲》,《约翰受难曲》</p>
<ol>
<li>《平均律钢琴曲集》，被誉为“钢琴家的旧约圣经”，共48首，每首包含一首前奏曲和赋格；</li>
<li>《赋格的艺术》，巴赫最后的作品，都是由一个主题发展变化而来，此作还未完成，巴赫就去世了，这是巴赫晚年对艺术最深层探索的思想和总结；</li>
<li>《勃兰登堡协奏曲》，大协奏曲，一共6首，每首的独奏乐器组都有不同，这组乐曲被瓦格纳称为“一切音乐中最惊人的奇迹”
<ul>
<li>献给勃兰登堡的路德维希侯爵，其宫廷位于普鲁士首都柏林，巴赫的目的是要在柏林找工作（但没成功）</li>
<li>将大协奏曲推向了最后的高峰</li>
</ul>
</li>
<li>《哥德堡变奏曲》，巴赫最著名的变奏曲，全曲共32段，其中30段变奏，每3个为一组，以第16变奏为中心，速度分为前后两半，作曲结构非常精妙，让人叹为观止；</li>
<li>《意大利协奏曲》，是一首主调与复调交替进行的作品，是对意大利作曲家维瓦尔第小提琴协奏曲继承和发扬。</li>
<li>《马太受难乐》：《尼伯龙根的指环》之前最伟大的戏剧作品，“现存宗教音乐的巅峰”
<ul>
<li>由门德尔松发掘</li>
</ul>
</li>
</ol>
<p>巴赫预示着一个崭新时代的到来: <strong>古典乐派</strong>. 代表人物: 海顿, 莫扎特, 贝多芬.</p>
<h1 id="古典乐派-维也纳乐派"><a class="header-anchor" href="#古典乐派-维也纳乐派"></a>古典乐派(维也纳乐派)</h1>
<p>1750（巴赫逝世） - 贝多芬</p>
<p>古典乐派讲究严谨的结构，完美的形式，和谐的音响与严密的逻辑。乐曲多以严肃，稳重为主，崇尚理性，而对感情的表现为含蓄内在。器乐曲多是无标题音乐。主要作曲家有：亨德尔、巴赫、海顿、莫扎特、贝多芬等人。</p>
<p>古典主义时期被分为两个阶段——<strong>前古典时期</strong>以及<strong>维也纳古典乐派时期</strong></p>
<hr>
<p>维也纳乐派三巨头： 海顿， 莫扎特， 贝多芬（ 贝多芬是德国人， 其余两个是奥地利人 ）</p>
<blockquote>
<p>这里插入一下音乐学校作曲系考试流程:</p>
<ol>
<li>乐理, 作曲</li>
<li>和声</li>
<li>艺术歌曲, 钢琴, 面试</li>
</ol>
</blockquote>
<h2 id="前古典时期"><a class="header-anchor" href="#前古典时期"></a>前古典时期</h2>
<h3 id="维也纳古典时期"><a class="header-anchor" href="#维也纳古典时期"></a>维也纳古典时期</h3>
<p>维也纳是奥地利哈布斯堡王朝的都城</p>
<h3 id="海顿"><a class="header-anchor" href="#海顿"></a>海顿</h3>
<blockquote>
<p>1792 - 1809. 出身在奥匈边境的小镇（ 奥地利南部的罗劳 ），8岁到维也纳，成为Stephen教堂唱诗班成员。 后来被聘为宫廷乐队乐长服务了30年，在此阶段创作了一生中绝大部分作品</p>
</blockquote>
<ul>
<li>
<p>交响曲之父。 写了108部交响乐，26部歌剧，4部大型清唱剧， 68首弦乐四重奏。</p>
<ul>
<li>
<p>交响乐： 《号角》、《告别》、 6首《巴黎》、《牛津》、 12首《伦敦》</p>
</li>
<li>
<p>清唱剧： 《创世纪》、《四季》</p>
</li>
<li>
<p>弦乐四重奏： 《云雀》、《皇帝》</p>
</li>
<li>
<p>海顿之前已经有交响乐，海顿把交响乐推进到了古典主义风格</p>
</li>
</ul>
</li>
</ul>
<p><strong>爱乐</strong> ：1839年，维也纳宫廷的乐师到民间演奏的时候，为了显示自己与民间音乐家水平的差距，自称为<em>Philharmonic</em>。 指“由离开宫廷的乐手们，为在民间演出而自发组成的演奏团体”</p>
<ul>
<li>代表作：两部交响曲《创世纪》《四季》</li>
</ul>
<h3 id="莫扎特"><a class="header-anchor" href="#莫扎特"></a>莫扎特</h3>
<p>莫扎特不像海顿一样生活依靠宫廷，他的生活依靠出版商，非常不稳定，他接触了很多阴暗面。 所以他的音乐尽管很华丽，但和声部分总是有无奈伤感的部分。<strong>“乐神”</strong></p>
<p>11岁的时候写出了他的第一部歌剧<code>《装疯卖傻》</code></p>
<h3 id="贝多芬"><a class="header-anchor" href="#贝多芬"></a>贝多芬</h3>
<p>德国人的骄傲，维也纳的骄傲，世界的骄傲。 “<strong>乐圣</strong>”。</p>
<p>出生于<em>波恩</em>。</p>
<ul>
<li>单簧管：表现男性</li>
<li>双簧管：表现女性</li>
<li>长笛：表现孩子</li>
</ul>
<p>《第六交响曲: 田园》：开创了浪漫主义时代</p>
<ul>
<li>
<p>作品：</p>
<ul>
<li>歌剧：《费德里奥》</li>
<li>庄严弥撒： D大调弥撒</li>
<li>歌曲： 《阿德拉伊德》、《致远方的爱人》</li>
<li>etc.：  《 第三交响曲 》、 《瓦尔德斯坦》、 《热情》、 《克莱采》、《拉祖莫夫斯四重奏》</li>
</ul>
</li>
<li>
<p>“自由与进步”</p>
</li>
</ul>
<h1 id="浪漫主义（-19-20-世纪-）"><a class="header-anchor" href="#浪漫主义（-19-20-世纪-）"></a>浪漫主义（ 19 ~ 20 世纪 ）</h1>
<p>浪漫主义音乐从德奥音乐开始.</p>
<h2 id="德奥音乐"><a class="header-anchor" href="#德奥音乐"></a>德奥音乐</h2>
<h3 id="韦伯"><a class="header-anchor" href="#韦伯"></a>韦伯</h3>
<p><code>卡尔·玛利亚·冯·韦伯（Carl Maria von Weber，1786—1826）</code>出生在德国奥尔登堡的厄丁</p>
<ul>
<li>
<p>1813年曾任布拉格歌剧院的院长。1817年担任<strong>德累斯顿</strong>宫廷剧院乐长。（ 德累斯顿是&quot;德国的佛罗伦萨&quot; ）</p>
</li>
<li>
<p>代表作品《自由射手》( 被认为是<strong>第一部真正的浪漫主义歌剧</strong> ); 《欧丽安特》（ <code>Euryanthe</code>，1817—1821）和《奥伯龙》（<code>Oberon</code>，1825—1826）。</p>
</li>
<li>
<p>此人特别喜欢<code>单簧管</code>。写了两首单簧管协奏曲</p>
</li>
</ul>
<blockquote>
<p>钢琴曲阶梯:</p>
<p>(拜厄, 汤普森) 599 → 849 → 299 → 740 → 肖邦 → 李斯特 → 斯特劳斯基</p>
</blockquote>
<h3 id="舒伯特"><a class="header-anchor" href="#舒伯特"></a>舒伯特</h3>
<p><code>Franz Schubert</code>，1797年1月31日—1828年11月19日</p>
<p>出生在维也纳郊区, 生活条件艰苦, 才华横溢, 音乐旋律性尤其出色. 他是贝多芬的粉丝. 严格来说,二人是师兄弟, 都受<code>萨列里</code>教导. <code>萨列里</code>对二人的评价是: 贝多芬是天才, 而舒伯特是个好人.</p>
<p>舒伯特的旋律非常深邃. 因为生活贫困,他的很多歌曲都是在没有准备的情况下写的, 因此他写了很多即兴, 天马行空,非常浪漫.</p>
<ul>
<li>
<p>&quot;<strong>歌曲之王</strong>&quot;: 由于同时代有贝多芬,所以他只能在歌曲上下功夫.</p>
</li>
<li>
<p>著名作品：</p>
<ul>
<li>
<p>艺术歌曲&lt;野玫瑰&gt;&lt;菩提树&gt;&lt;流浪者&gt;&lt;在海边&gt;&lt;魔王&gt;&lt;鳟鱼&gt;&lt;小夜曲&gt;&lt;摇篮曲&gt;&lt;天鹅之歌&gt;(14首)</p>
</li>
<li>
<p>声乐套曲《美丽的磨坊女》《冬之旅》</p>
</li>
<li>
<p>交响曲：重要的交响曲: 第五交响曲, 第九交响曲, 第八交响曲(未完成)</p>
</li>
</ul>
</li>
<li></li>
</ul>
<h3 id="门德尔松"><a class="header-anchor" href="#门德尔松"></a>门德尔松</h3>
<p><code>Mendelssohn</code>,1809年2月3日—1847年11月4日</p>
<ul>
<li>代表作：
<ul>
<li>第三交响曲《苏格兰交响曲》， 第四交响曲《意大利交响曲》</li>
<li>小提琴协奏曲有：《E小调小提琴协奏曲》</li>
</ul>
</li>
</ul>
<h2 id="斯拉夫音乐"><a class="header-anchor" href="#斯拉夫音乐"></a>斯拉夫音乐</h2>
<h3 id="肖邦"><a class="header-anchor" href="#肖邦"></a>肖邦</h3>
<p><code>F.F.Chopin</code>，1810年3月1日—1849年10月17日</p>
<ul>
<li>
<p>“<strong>钢琴诗人</strong>”，只写钢琴作品</p>
</li>
<li>
<p>当时，浪漫主义由西欧向东欧（斯拉夫民族）过渡。</p>
</li>
</ul>
<p>肖邦的妈妈是波兰人，爸爸是法国人。他父亲教他法语。十几岁时，他就在华沙成名了，因为他的钢琴技巧，也因为他的大量的具有显著浪漫主义特征的钢琴作品。</p>
<ul>
<li>肖邦的音乐不同于德奥音乐的严肃，他的作品轻盈优雅，如同诗歌。</li>
</ul>
<p>肖邦在音乐学院毕业前，就写了《第一钢协》和《第二钢协》。肖邦认为他的钢琴会让人沉醉，于是故意不让钢琴太早出来，使前奏一拖再拖。《第一钢协》第一乐章的第一主题，钢琴一出来果真打动人心。第二乐章也很精彩，像是夜晚躺在床上看窗外的月光，想起童年的时光和妈妈的话语。</p>
<ul>
<li>第一乐章：**庄严的快板，E小调。**形式是追随莫扎特确立的古典协奏曲形式，先由<a href="https://baike.baidu.com/item/%E7%AE%A1%E5%BC%A6%E4%B9%90/11051209">管弦乐</a>合奏第一主题，第二主题由弦乐以<a href="https://baike.baidu.com/item/E%E5%A4%A7%E8%B0%83/8400142">E大调</a>奏出。钢琴出现后，极尽技巧化而华丽地表现这两个主题，然后以管弦乐合奏结束呈示部。发展部为C大调，钢琴从处理第一主题后半段始，此后诸主题在多种转调中发展。再现部调子改为<a href="https://baike.baidu.com/item/G%E5%A4%A7%E8%B0%83/8120824">G大调</a>，最后以钢琴灿烂技巧发挥的激动达到高潮。</li>
<li>**浪漫曲，甚缓板，E大调，有夜曲风格。**主题如歌性格，由两部分构成。其后半段以<a href="https://baike.baidu.com/item/B%E5%A4%A7%E8%B0%83/656971">B大调</a>开始，间奏后进入激动的中段，以强音出现<a href="https://baike.baidu.com/item/%E5%8D%87C%E5%B0%8F%E8%B0%83/15421362">升C小调</a>略呈灰暗的新主题。此主题奏完后以升G大调回到仍装饰得很复杂的主题后半段。尾奏使用序奏部材料，以音阶与琶音<a href="https://baike.baidu.com/item/%E4%B8%89%E8%BF%9E%E9%9F%B3/8903707">三连音</a>轻快的动态装饰，然后像烟雾消失般结束。</li>
<li>**回旋曲，甚快板，E大调。**钢琴谐谑地诱导出第一主题，产生妙趣横生的反复进行，插入的方式极有莫扎特的魅力，结尾是华丽的尾奏，以钢琴奏三连高音阶性乐流结束。</li>
</ul>
<p>华沙被沙俄攻陷后，他逃到巴黎他父亲的家。由于他的作品和当时西欧的音乐都不一样，很快引起了轰动。一次聚会上，他认识了乔治桑，二人成为知己和恋人（尽管二人年龄相差悬殊），肖邦为她写了大量的马祖卡和《夜曲》。</p>
<ul>
<li>肖邦把钢琴当作<strong>倾诉</strong>的工具，这不同于李斯特，后者把钢琴看作<strong>万能乐器</strong></li>
</ul>
<h2 id="意大利音乐"><a class="header-anchor" href="#意大利音乐"></a>意大利音乐</h2>
<h3 id="罗西尼"><a class="header-anchor" href="#罗西尼"></a>罗西尼</h3>
<p><code>Gioacchino Rossini</code>，1792~1868</p>
<ul>
<li>
<p>意大利歌剧三杰：罗西尼，威尔第，普契尼。罗西尼最早，属于浪漫主义早期和中期</p>
</li>
<li>
<p>罗西尼是19世纪上半叶意大利歌剧的最高峰。</p>
</li>
<li>
<p>代表作：《塞维利亚的理发师》《鹊贼》《威廉退尔》</p>
</li>
</ul>
<p>他通过<strong>不同的乐器的音色的变化</strong>，和力度，和声，织体的变化，来表现人物形象，剧情发展，哲学思想。其实，浪漫主义的一方面，就是音乐家们对器乐的性能做的大量探索。</p>
<p>他的最后一部歌剧《威廉退尔》，一举奠定了他的历史地位. <code>coda</code>快的同时还把音乐放轻，造成了极大的紧张度</p>
<p>《鹊贼》讲的是经常偷窃人类物品的小鸟。罗西尼在观众席后面也安排了小军鼓，小鸟们就在辉煌的鼓声中雄赳赳气昂昂地出场了。 众鸟们看到目标后开始俯冲,一只小鸟成功偷到了东西,被众鸟视作英雄.</p>
<h3 id="威尔第"><a class="header-anchor" href="#威尔第"></a>威尔第</h3>
<p><code>Giuseppe Verdi</code>，1813年—1901年</p>
<p>近50岁才有较成熟的歌剧作品。</p>
<p>父亲是旅馆老板，和教堂里一位谈管风琴的人学音乐，后考到米兰音乐学院，一度想放弃音乐，又因为对音乐的热爱坚持了下来。从《罗彻斯特》（第一部）到《法尔斯塔夫》（最后一部），他一共写了26部歌剧。</p>
<ul>
<li>代表作：《纳布科》《伦巴底人》《弄臣》《游吟诗人》《茶花女》《奥赛罗》《假面舞会》《唐·卡洛斯》《命运之力》</li>
</ul>
<p>不同于罗西尼的欢乐俏皮，威尔第的歌剧非常深邃有哲理。</p>
<h3 id="普契尼"><a class="header-anchor" href="#普契尼"></a>普契尼</h3>
<p><code>Giacomo Puccini</code>,1858年12月22日-1924年11月29日</p>
<p>比威尔第更有浪漫主义精神。出生于浪漫主义音乐世家，第一部歌剧叫《群妖围舞》.</p>
<ul>
<li>代表作《图兰朵》《玛侬·雷斯考特》《波希米亚人》</li>
</ul>
<h2 id="法国主义音乐"><a class="header-anchor" href="#法国主义音乐"></a>法国主义音乐</h2>
<h3 id="柏辽兹"><a class="header-anchor" href="#柏辽兹"></a>柏辽兹</h3>
<p><code>Hector Louis Berlioz</code>,1803年12月11日-1869年3月8日</p>
<ul>
<li>法国浪漫主义音乐非常重要的音乐家</li>
</ul>
<p>没有受过正规的音乐训练，他父亲是巴黎医学院毕业的著名医生，想让柏辽兹学医。 由于觉得医学院太枯燥，柏辽兹跑到了歌剧院，一开始当实习，后参加了1830年的罗马作曲大赛，获得大奖（ 非常厉害，那个比赛不是写歌，而是写器乐作品 ）。 此后当了全职作曲家。</p>
<ul>
<li>著名作品《幻想交响曲》《安魂曲》《葬礼与凯旋》《浮士德的天空》《特洛伊人》。《配器法》（著作）</li>
</ul>
<p>由于不是音乐学院毕业，所以柏辽兹被当时的人看不起。后来受帕格尼尼赞助，才走上了职业音乐家的道路</p>
<ul>
<li>创立了<strong>标题音乐</strong>(幻想交响曲,每个乐章都有个名字,所以无形中创立了标题音乐)</li>
</ul>
<p>法国音乐不同于德国的严谨，非常的自由奇妙。 典型的是柏辽兹的《浮士德的天空》：</p>
<p><em>“下午夕阳高照，一队军人训练结束准备回营房了”---《浮士德的天空》</em></p>
<p>这一段描写军队行进，但是节拍非常飘，初学者很难打准（<s>可见法军的战斗力不咋地</s>）</p>
<p>一个军队的音乐居然写得这么好玩幽默轻巧，可见法国音乐之浪漫。</p>
<h2 id="匈牙利音乐"><a class="header-anchor" href="#匈牙利音乐"></a>匈牙利音乐</h2>
<p>这个国家非常非常漂亮. 虽然奥地利人施特劳斯写过《蓝色多瑙河》，奥地利人也把多瑙河称作母亲河，<s>事实上奥地利境内的多瑙河并不咋地</s>，匈牙利境内的多瑙河才叫漂亮。这个国家能歌善舞，出过很多艺术大师，而且民族众多。</p>
<p><strong>音乐伴随着整个匈牙利民族</strong></p>
<h3 id="李斯特"><a class="header-anchor" href="#李斯特"></a>李斯特</h3>
<p><code>Franz Liszt</code>，1811年10月22日—1886年7月31日,出生于匈牙利雷汀</p>
<ul>
<li>
<p>&quot;<strong>钢琴之王</strong>&quot;,&quot;音乐巨人&quot;. 此人的手非常非常大,单手就能跨两个八度. 11岁就声明远扬. 而且长得非常帅</p>
</li>
<li>
<p>首创&quot;交响诗&quot;( 单乐章交响曲 )。 著名的有《塔索》《山岳》《匈牙利》</p>
</li>
</ul>
<p>创立了布达佩斯音乐学院,亲自任第一任院长. 对整个欧洲音乐的发展起了极大的推动作用.</p>
<ul>
<li>代表作: 12首超技曲, 6首帕格尼尼练习曲, 19首匈牙利狂想曲. D小调奏鸣曲(单乐章).  降E大调钢协, A大调钢协.</li>
</ul>
<blockquote>
<p>五大钢协:</p>
<p>贝多芬的&lt;“皇帝”钢琴协奏曲&gt;(降E大调)、<br>
柴可夫斯基的《降b小调第一钢琴协奏曲》、<br>
拉赫玛尼诺夫的《C大调第二钢琴协奏曲》、<br>
舒曼的《a小调钢琴协奏曲》、<br>
李斯特的《第一钢琴协奏曲》</p>
</blockquote>
<h2 id="德国音乐-19世纪"><a class="header-anchor" href="#德国音乐-19世纪"></a>德国音乐( 19世纪 )</h2>
<h3 id="瓦格纳"><a class="header-anchor" href="#瓦格纳"></a>瓦格纳</h3>
<p><code>Richard Wagner</code>，1813年5月22日—1883年2月13日</p>
<p><strong>此人强的离谱</strong></p>
<p>自学的音乐,学成之后就看不起别的音乐家了. 他考上了莱比锡大学,读法律,后来放弃了,去小歌剧院当指挥. 第一部作品《黎恩济》</p>
<ul>
<li>19世纪最有影响力的德国作曲家</li>
<li>《漂泊的荷兰人》《汤豪瑟》《纽伦堡的名歌手》《罗恩格林》《尼伯龙根的指环》《特里斯坦与伊索尔德》《帕西法尔》</li>
<li>他的音乐煽动性极强</li>
</ul>
<h3 id="舒曼"><a class="header-anchor" href="#舒曼"></a>舒曼</h3>
<h3 id="舒曼-2"><a class="header-anchor" href="#舒曼-2"></a>舒曼</h3>
<p><code>robert schumann</code>，1810年6月8日—1856年7月29日。 诞生于德国东部莱比锡附近的小城茨维考。父亲是作家（西方国家的作家的地位不高）。大学进莱比锡大学读法律，不满足，就拜里希·维克为师学钢琴，把手练坏了，但是她爱上了老师的女儿小维克·克拉拉。 舒曼写了大量的歌曲。有了克拉拉的爱，他生命中有一段时期非常辉煌，《a小调钢琴协奏曲》是五大钢协之一。舒曼后来得了精神病，经常跳莱茵河。</p>
<ul>
<li>
<p>继门德尔松之后，十九世纪上半叶德国音乐史上突出的人物</p>
</li>
<li>
<p>代表作：</p>
<ul>
<li>钢琴：《蝴蝶》《维也纳狂欢节》《童年情景》</li>
<li>歌曲：《桃金娘》《诗人之恋》《妇女之恋》</li>
</ul>
</li>
<li>
<p>代表作: 《蝴蝶》《维也纳狂欢节》</p>
</li>
</ul>
<h3 id="勃拉姆斯"><a class="header-anchor" href="#勃拉姆斯"></a>勃拉姆斯</h3>
<p><code>Johannes Brahms</code>，<code>1833年5月7日—1897年4月3日</code>.出生于德国汉堡，父亲是低音提琴手。后来学小提琴，并进行世界巡回演出，后来认识了李斯特和舒曼。</p>
<p>四部交响曲都充满了浪漫主义的古典风格（ 勃拉姆斯认为他是古典主义作曲家而不是浪漫主义， 但是古典主义的节奏是固定的 ， 浪漫主义的节奏是比较随性的， 所以勃拉姆斯依然是浪漫主义音乐家）。《D小调小提琴协奏曲》是四大小协之一。</p>
<ul>
<li>《德意志安魂曲》《21首匈牙利舞曲》</li>
</ul>
<p>我们一直以为音乐家的作品是很遥远的，直到勃拉姆斯的《匈牙利舞曲》，突然能发现音乐离我们这么近。勃拉姆斯为人不苟言笑，他的情感都蕴含在他的音乐里。有热烈的（《第一首》），诙谐的（《第三首》），辉煌（《第七首》），欢快的（《第八首》）</p>
<p>师生恋。 他发掘了德沃夏克。</p>
<h2 id="民族音乐-俄罗斯音乐"><a class="header-anchor" href="#民族音乐-俄罗斯音乐"></a>民族音乐 ---俄罗斯音乐</h2>
<h3 id="格林卡：俄罗斯音乐之父"><a class="header-anchor" href="#格林卡：俄罗斯音乐之父"></a>格林卡：俄罗斯音乐之父</h3>
<p><code>米哈伊尔·伊万诺维奇·格林卡（Михаил Иванович Глинка，1804—1857）</code></p>
<p>俄罗斯古典音乐之父, 俄罗斯交响乐之父</p>
<p>格林卡是第一个将俄罗斯民族音乐文化与西方音乐文化交融而使之达到先进水平的作曲家，被视为“俄罗斯古典音乐之父”。他的音乐以爱国主义的内容和质朴的民族形式相结合而著称，在歌剧、管弦乐、歌曲等重要领域为俄罗斯的音乐创作开辟了新路。他的歌剧，为俄罗斯的歌剧发展铺设了两条路线：一条是爱国主义、英雄主义的历史性题材，以<code>《为沙皇献身》</code>为代表；另一条是神话、传奇题材，以<code>《鲁斯兰与柳德米拉》</code>为代表。在器乐创作领域，还开创了标题性和民歌变奏性质的管弦乐道路。他的作品，风格清新，富于生活气息。而他的艺术歌曲，是建立在城市小调的基础上，使之具有浓郁的俄罗斯风格。此外，他还吸收异国情调和多民族音乐语言来丰富俄罗斯音乐形式，对日后的俄罗斯作曲家影响极大。</p>
<p>格林卡是俄罗斯民族音乐真正的奠基人，被尊称为“俄罗斯音乐之父”，他为俄罗斯民族音乐的发展开创了广阔的前景，对俄罗斯民族音乐的发展起到了举足轻重的作用。他之后，俄罗斯相继出现了一大批思想成熟，技法高超的民族音乐大师。</p>
<p>格林卡的两部歌剧不仅是俄罗斯歌剧宝库中的珍品，而且也是世界歌剧史上的杰作。他的代表作还有管弦乐序曲<code>《马德里之夜》</code>等</p>
<ul>
<li>代表作：
<ul>
<li>歌剧：<code>《伊凡·苏萨宁》</code>和<code>《鲁斯兰与柳德米拉》</code></li>
</ul>
</li>
</ul>
<p>借鉴了俄罗斯城市音乐的特征，吸收了俄罗斯</p>
<ul>
<li>代表作： 歌剧《》《》； 西班牙戏曲《》；幻想交响曲《》</li>
</ul>
<h3 id="强力集团"><a class="header-anchor" href="#强力集团"></a>强力集团</h3>
<p>巴拉基涅夫： 理论家</p>
<p>juyi：</p>
<p>卡萨客服</p>
<p>穆索尔斯基：</p>
<p>保罗丁：</p>
<h2 id="民族音乐-捷克"><a class="header-anchor" href="#民族音乐-捷克"></a>民族音乐---捷克</h2>
<p>母亲河： 沃尔塔瓦河（ 意思是河流汇聚的地方 ）</p>
<h3 id="斯美塔那"><a class="header-anchor" href="#斯美塔那"></a>斯美塔那</h3>
<ul>
<li>代表作《我的祖国》</li>
</ul>
<h3 id="德沃夏克"><a class="header-anchor" href="#德沃夏克"></a>德沃夏克</h3>
<p>出生于屠夫家庭。 音乐天才，他曾参加音乐比赛，评委<code>勃拉姆斯</code>说“第一名不给这个人，我就辞职”，于是德沃夏克得了第一名。为了感谢勃拉姆斯的知遇之恩，针对勃拉姆斯的21首匈牙利舞曲，德沃夏克写了16首<code>斯拉夫舞曲</code></p>
<p>《自新大陆》</p>
<p>美国人把《第九交响曲》说成“我们的交响曲”</p>
<h2 id="民族音乐-芬兰"><a class="header-anchor" href="#民族音乐-芬兰"></a>民族音乐 -- 芬兰</h2>
<h3 id="西贝柳斯"><a class="header-anchor" href="#西贝柳斯"></a>西贝柳斯</h3>
<p>当时的芬兰被俄国占领了,</p>
<p>代表作：《芬兰颂》</p>
<p>规定赫尔辛基不许聚会,只要超过十个人聚会,就抓起来. 西贝柳斯很痛苦,就写了《芬兰颂》。 芬兰这个国家多雪多山，西贝柳斯把芬兰描绘成一个神圣伟大的国家。</p>
<h2 id="民族音乐-挪威"><a class="header-anchor" href="#民族音乐-挪威"></a>民族音乐 --挪威</h2>
<h3 id="格里戈"><a class="header-anchor" href="#格里戈"></a>格里戈</h3>
<h2 id="民族音乐-俄罗斯"><a class="header-anchor" href="#民族音乐-俄罗斯"></a>民族音乐 --俄罗斯</h2>
<h3 id="柴可夫斯基"><a class="header-anchor" href="#柴可夫斯基"></a>柴可夫斯基</h3>
<p>俄罗斯音乐史上极其伟大的音乐家。 他的创作覆盖几乎每一个领域。</p>
<p>《降B小调钢协》（五大钢协之一）</p>
<h3 id="拉赫玛尼诺夫"><a class="header-anchor" href="#拉赫玛尼诺夫"></a>拉赫玛尼诺夫</h3>
<p>大手怪，和李斯特有一拼</p>
<p>代表作： 《拉二》（五大钢协之一）， 《拉三》</p>
]]></content>
      <tags>
        <tag>Music</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Class</title>
    <url>/2022/02/24/Java-Class/</url>
    <content><![CDATA[<p>Outline</p>
<ul>
<li>RTTI</li>
<li>Class对象</li>
<li>类型转换前先做检查</li>
<li>反射</li>
<li>动态代理</li>
<li>空对象</li>
</ul>
<p>ref ： Thinking in Java</p>
<span id="more"></span>
<h1 id="RTTI"><a class="header-anchor" href="#RTTI"></a>RTTI</h1>
<ul>
<li>Java使用Class对象执行其RTTI</li>
<li>Java类在必须时才加载
<ul>
<li>当程序创建第一个对类的<strong>静态成员</strong>的引用时，就会加载这个类
<ul>
<li>因此构造器也是静态成员</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="类加载"><a class="header-anchor" href="#类加载"></a>类加载</h2>
<ul>
<li>加载  -&gt; 验证 -&gt; 准备 -&gt; 解析 -&gt; 初始化 -&gt; 使用 -&gt; 卸载</li>
<li>类加载只有一次</li>
</ul>
<h3 id="初始化"><a class="header-anchor" href="#初始化"></a>初始化</h3>
<ol>
<li>静态变量初始化
<ul>
<li><code>static final</code>变量不会初始化，直接赋值</li>
</ul>
</li>
<li>静态变量赋值</li>
<li>执行静态代码块</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClassLoader</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">TestClassLoader</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestClassLoader</span>(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">TestClassLoader</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestClassLoader</span>(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> print(<span class="string">&quot;i&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> print(<span class="string">&quot;j&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        print(<span class="string">&quot;静态块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestClassLoader</span><span class="params">(String str)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println((++k)+ <span class="string">&quot;: &quot;</span> + str + <span class="string">&quot; i=&quot;</span> + i + <span class="string">&quot; n=&quot;</span> + n );</span><br><span class="line">        ++i;</span><br><span class="line">        ++n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">print</span><span class="params">(String str)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println((++k)+ <span class="string">&quot;: &quot;</span> + str + <span class="string">&quot; i=&quot;</span> + i + <span class="string">&quot; n=&quot;</span> + n );</span><br><span class="line">        ++n;</span><br><span class="line">        <span class="keyword">return</span> ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestClassLoader</span>(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述程序输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1: j i=0 n=0</span><br><span class="line">2: t1 i=1 n=1</span><br><span class="line">3: j i=2 n=2</span><br><span class="line">4: t2 i=3 n=3</span><br><span class="line">5: i i=4 n=4</span><br><span class="line">6: 静态块 i=5 n=99</span><br><span class="line">7: j i=6 n=100</span><br><span class="line">8: init i=7 n=101</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>Class loader:</p>
<ul>
<li>
<p>先检查这个类的<code>Class</code>对象是否被加载</p>
<ul>
<li>若未加载</li>
</ul>
</li>
<li>
<p>一旦<code>Class</code>对象加载入内润，就被用来创建该类的所有对象</p>
</li>
</ul>
</li>
</ul>
<h1 id="Class对象"><a class="header-anchor" href="#Class对象"></a>Class对象</h1>
<p>生成类对象的引用：</p>
<ul>
<li>
<p>``Class.forName(String className)`静态方法: 返回该类的Class引用，具有副作用，如果该类还没有加载就会加载该类。该方法会抛出异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">t</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Thread&quot;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>Params:<br>
className – the fully qualified name of the desired class.</li>
<li>Returns:<br>
the Class object for the class with the specified name.</li>
<li>Throws:<br>
LinkageError – if the linkage fails<br>
ExceptionInInitializerError – if the initialization provoked by this method fails<br>
ClassNotFoundException – if the class cannot be located</li>
</ul>
</li>
<li>
<p><code>Class.class</code>（ <strong>类字面常量</strong> ）： 返回类对象的引用，<strong>没有副作用</strong></p>
</li>
<li>
<p><code>object.getClass()</code>:  获得对象的<strong>确切类型</strong>的Class引用</p>
</li>
</ul>
<p>类名：</p>
<p><code>object.getName()</code>: 返回全限定名</p>
<p><code>object.getSimpleName()</code>: 返回不含包名的类名</p>
<p><code>object.getCanonicalName()</code>: 返回全限定名</p>
<p>创建对象：</p>
<p><code>Class.newInstance()</code>实例方法：“虚拟构造器”，能且仅能调用该类的public无参数构造方法</p>
<h1 id="类型转换前先做检查"><a class="header-anchor" href="#类型转换前先做检查"></a>类型转换前先做检查</h1>
<p>Class引用可以指向别的Class对象，这个错误在编译期不会发现。 使用泛型语法可以在编译期执行类型检查：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">intClass</span> <span class="operator">=</span> <span class="type">int</span>.class;</span><br><span class="line">Class&lt;Integer&gt; genericClass = <span class="type">int</span>.class;</span><br><span class="line">genericClass = Integer.class; <span class="comment">// same thing</span></span><br><span class="line"></span><br><span class="line">intClass = <span class="type">double</span>.class; <span class="comment">// 编译期不会报错</span></span><br><span class="line">genericIntClass = <span class="type">double</span>.class;  <span class="comment">// illegal</span></span><br></pre></td></tr></table></figure>
<p>判断类型是否兼容：</p>
<ul>
<li>
<pre><code class="language-java">if( Object obj_a instanceof Class class_b)&#123;
&#125;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* ```java</span><br><span class="line">  public boolean isInstance(Object o);</span><br></pre></td></tr></table></figure>



</code></pre>
</li>
</ul>
<p>判断类型是否相等：</p>
<ul>
<li><code>equals()</code></li>
<li><code>==</code></li>
</ul>
<h1 id="Reflection"><a class="header-anchor" href="#Reflection"></a>Reflection</h1>
<h2 id="利用反射来查看类"><a class="header-anchor" href="#利用反射来查看类"></a>利用反射来查看类</h2>
<p><code>getDeclaredXX()</code> 方法可以无视访问权限</p>
<ul>
<li>
<p>得到方法：</p>
<ul>
<li><code>Method getMethod(name, Class...)</code>：获取某个<code>public</code>的<code>Method</code>（包括父类）</li>
<li><code>Method getDeclaredMethod(name, Class...)</code>：获取当前类的某个<code>Method</code>（不包括父类）</li>
<li><code>Method[] getMethods()</code>：获取所有<code>public</code>的<code>Method</code>（包括父类）</li>
<li><code>Method[] getDeclaredMethods()</code>：获取当前类的所有<code>Method</code>（不包括父类）</li>
</ul>
</li>
<li>
<p>得到字段：</p>
<ul>
<li><code>Field getField(name)</code>：根据字段名获取某个public的field（包括父类）</li>
<li><code>Field getDeclaredField(name)</code>：根据字段名获取当前类的某个field（不包括父类）</li>
<li><code>Field[] getFields()</code>：获取所有public的field（包括父类）</li>
<li><code>Field[] getDeclaredFields()</code>：获取当前类的所有field（不包括父类）</li>
</ul>
</li>
<li>
<p>访问构造方法：</p>
<ul>
<li><code>getConstructor(Class...)</code>：获取某个<code>public</code>的<code>Constructor</code>；</li>
<li><code>getDeclaredConstructor(Class...)</code>：获取某个<code>Constructor</code>；</li>
<li><code>getConstructors()</code>：获取所有<code>public</code>的<code>Constructor</code>；</li>
<li><code>getDeclaredConstructors()</code>：获取所有<code>Constructor</code>。</li>
</ul>
</li>
<li>
<p>得到继承关系：</p>
<ul>
<li><code>Class getSuperclass()</code>：获取父类类型；</li>
<li><code>Class[] getInterfaces()</code>：获取当前类实现的所有接口。</li>
</ul>
<p>通过<code>Class</code>对象的<code>isAssignableFrom()</code>方法可以判断一个向上转型是否可以实现。</p>
</li>
</ul>
<p>例子： 打印类的方法和构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShowMethods</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">usage</span> <span class="operator">=</span> <span class="string">&quot;Please input a Class&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;\\w+\\.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(String str)</span>&#123; System.out.println(str); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String str)</span>&#123; System.out.print(str); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(args.length &lt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            println( usage );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lines</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Class&lt;?&gt; c = Class.forName( args[<span class="number">0</span>] );</span><br><span class="line">            Method[] methods = c.getMethods();</span><br><span class="line">            Constructor[] constructors = c.getConstructors();</span><br><span class="line">            <span class="keyword">if</span>(args.length == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>( Method method: methods )</span><br><span class="line">                &#123;</span><br><span class="line">                    println( pattern.matcher(method.toString()).replaceAll(<span class="string">&quot;&quot;</span>) );</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(Constructor constructor: constructors )</span><br><span class="line">                &#123;</span><br><span class="line">                    println( pattern.matcher( constructor.toString() ).replaceAll(<span class="string">&quot;&quot;</span>) );</span><br><span class="line">                &#125;</span><br><span class="line">                lines += methods.length + constructors.length;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="利用反射来修改类"><a class="header-anchor" href="#利用反射来修改类"></a>利用反射来修改类</h2>
<p>反射可以绕过几乎所有障碍（访问权限）来得到类的信息、修改类，</p>
<p>即使只发布字节码文件，依然可以通过<code>javap</code>这样的反编译工具查看源代码</p>
<ul>
<li><code>javap -p</code>: 显示所有成员，包括私有成员</li>
</ul>
<p>下面给出两种防御措施，并给出破解方案, 基本思路是：</p>
<ol>
<li>只要得到对象，就可以调用<code>getClass()</code>得到其实际类型（破解了类访问权限），</li>
<li>再用<code>getDeclaredXXX()</code>得到其所有字段/方法（破解了字段/方法访问权限）</li>
<li>对非public字段/方法/构造方法的访问、修改，都要先<code>setAccessible(true)</code>
<ul>
<li>有些jvm有security manager,可能会拒绝<code>setAccessible(true)</code></li>
</ul>
</li>
<li>接下来就可以设置字段： <code>Field.set(Object, Object)</code>，其中第一个<code>Object</code>参数是指定的实例，第二个<code>Object</code>参数是待修改的值
<ul>
<li><code>final</code>字段在被修改时是安全的， 运行时系统会在不抛任何异常的情况下接受修改尝试，但实际上不会发生任何修改</li>
</ul>
</li>
</ol>
<h3 id="隐瞒类访问权限"><a class="header-anchor" href="#隐瞒类访问权限"></a>隐瞒类访问权限</h3>
<h4 id="防御措施"><a class="header-anchor" href="#防御措施"></a>防御措施</h4>
<p>接口A只有方法<code>f()</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> typeinfo.packageaccess;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>只暴露HiddenC一个类，它产生A类型（实际是C类型）的对象， 但是调用者无法调用A接口之外的方法， 因为类名C是不可见的， 因此理论上<code>g()</code>,<code>u()</code>等不应该能被调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span>&#123;</span><br><span class="line">        Utils.println( <span class="string">&quot;public C.f()&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">g</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Utils.println(<span class="string">&quot;public C.g()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">u</span><span class="params">()</span>&#123; Utils.println(<span class="string">&quot;package C.u()&quot;</span>); &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">v</span><span class="params">()</span>&#123; Utils.println(<span class="string">&quot;protected C.v()&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">w</span><span class="params">()</span>&#123;</span><br><span class="line">        Utils.println(<span class="string">&quot;private C.w()&quot;</span>  );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HiddenC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> A <span class="title function_">makeA</span><span class="params">()</span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">C</span>(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="破解方案"><a class="header-anchor" href="#破解方案"></a>破解方案</h4>
<p>得到a的实际类型，然后进行方法调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">callHiddenMethod</span><span class="params">( Object a, String method_name )</span> <span class="keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">g</span> <span class="operator">=</span> a.getClass().getDeclaredMethod(method_name);</span><br><span class="line">        g.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        g.invoke(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="主程序"><a class="header-anchor" href="#主程序"></a>主程序</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> typeinfo.HiddenImplementation;</span><br><span class="line"><span class="keyword">import</span> typeinfo.packageaccess.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HiddenImplementation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> HiddenC.makeA();</span><br><span class="line">        a.f();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//编译期错误，找不到类型C</span></span><br><span class="line"><span class="comment">//        if( a instanceof C)</span></span><br><span class="line"><span class="comment">//        &#123;</span></span><br><span class="line"><span class="comment">//            C c = (C)a;</span></span><br><span class="line"><span class="comment">//            c.g();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//绕过了包访问权限！！！</span></span><br><span class="line">        callHiddenMethod(a, <span class="string">&quot;g&quot;</span>);</span><br><span class="line">        callHiddenMethod(a, <span class="string">&quot;u&quot;</span>);</span><br><span class="line">        callHiddenMethod(a, <span class="string">&quot;v&quot;</span>);</span><br><span class="line">        callHiddenMethod(a, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="隐瞒字段访问权限"><a class="header-anchor" href="#隐瞒字段访问权限"></a>隐瞒字段访问权限</h3>
<p>破解方法：</p>
<p>通过<code>getDeclaredField(field_name)</code> 就可以得到私有字段</p>
<p>后续可以<code>setAccessible(true)</code>，<code>set(Object, Object)</code>对字段进行修改（ final字段不可被修改，因此是安全的 ）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WithPrivateFinalField</span> <span class="variable">pf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WithPrivateFinalField</span>();        </span><br><span class="line">f = pf.getClass().getDeclaredField(<span class="string">&quot;s2&quot;</span>);</span><br><span class="line">      f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">      f.set(pf,<span class="string">&quot;No, you&#x27;re not!&quot;</span> );</span><br><span class="line">      System.out.println(pf);</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<h4 id="防御措施-2"><a class="header-anchor" href="#防御措施-2"></a>防御措施</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WithPrivateFinalField</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;I&#x27;m totally safe&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;Am I safe?&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;i = &quot;</span> + i + <span class="string">&quot;, &quot;</span> + s1 + <span class="string">&quot;, &quot;</span> + s2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="破解方案-2"><a class="header-anchor" href="#破解方案-2"></a>破解方案</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModifyingPrivateFields</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">WithPrivateFinalField</span> <span class="variable">pf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WithPrivateFinalField</span>();</span><br><span class="line">        System.out.println(pf);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> pf.getClass().getDeclaredField(<span class="string">&quot;i&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.setInt(pf,<span class="number">47</span>);</span><br><span class="line">        System.out.println(pf);</span><br><span class="line"></span><br><span class="line">        f = pf.getClass().getDeclaredField(<span class="string">&quot;s1&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(pf,<span class="string">&quot;No, you&#x27;re not!&quot;</span> );</span><br><span class="line">        System.out.println(pf);</span><br><span class="line"></span><br><span class="line">        f = pf.getClass().getDeclaredField(<span class="string">&quot;s2&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(pf,<span class="string">&quot;No, you&#x27;re not!&quot;</span> );</span><br><span class="line">        System.out.println(pf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="javap查看源代码"><a class="header-anchor" href="#javap查看源代码"></a>javap查看源代码</h4>
<p>可以看到，我们能看到private字段，因此保护是没有用的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">❯ javap  -p /home/lyk/Projects/java_learning/out/production/java_learning/WithPrivateFinalField.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">Compiled</span> from <span class="string">&quot;ModifyingPrivateFields.java&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WithPrivateFinalField</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> java.lang.String s1;</span><br><span class="line">  <span class="keyword">private</span> java.lang.String s2;</span><br><span class="line">  WithPrivateFinalField();</span><br><span class="line">  <span class="keyword">public</span> java.lang.String <span class="title function_">toString</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="动态代理"><a class="header-anchor" href="#动态代理"></a>动态代理</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DynamicProxyHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object proxied;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DynamicProxyHandler</span><span class="params">(Object proxied)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.proxied = proxied;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args )</span> <span class="keyword">throws</span> Throwable</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println( <span class="string">&quot;**** proxy: &quot;</span> + proxy.getClass() + <span class="string">&quot;, method: &quot;</span> + method + <span class="string">&quot;, args: &quot;</span> + args );</span><br><span class="line">        <span class="keyword">if</span>(args != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(Object arg: args)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;    &quot;</span> + arg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(proxied, args);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleDynamicProxy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">consumer</span><span class="params">(Interface iface)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do &quot;</span> + iface);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">RealObject</span> <span class="variable">realObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RealObject</span>();</span><br><span class="line">        consumer(realObject);</span><br><span class="line">        <span class="type">Interface</span> <span class="variable">proxy</span> <span class="operator">=</span> (Interface) Proxy.newProxyInstance(</span><br><span class="line">                Interface.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Interface.class  &#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DynamicProxyHandler</span>( realObject )</span><br><span class="line">        );</span><br><span class="line">        consumer(proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在运行期动态创建一个<code>interface</code>实例的方法如下：</p>
<ol>
<li>
<p>定义一个<code>InvocationHandler</code>实例，它负责实现接口的方法调用；</p>
</li>
<li>
<p>通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Proxy.newProxyInstance()</span><br></pre></td></tr></table></figure>
<p>创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface</span><br></pre></td></tr></table></figure>
<p>实例，它需要3个参数：</p>
<ol>
<li>使用的<code>ClassLoader</code>，通常就是接口类的<code>ClassLoader</code>；</li>
<li>需要实现的接口数组，至少需要传入一个接口进去；</li>
<li>用来处理接口方法调用的<code>InvocationHandler</code>实例。</li>
</ol>
</li>
<li>
<p>将返回的<code>Object</code>强制转型为接口。</p>
</li>
</ol>
<h1 id="空对象"><a class="header-anchor" href="#空对象"></a>空对象</h1>
<p>空对象，相比<code>null</code>好处是它更靠近数据，因为对象标识的是问题空间的实体</p>
<p>（ 感觉没啥用，增加了编程的复杂性 ）</p>
]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Human Computer Interaction</title>
    <url>/2021/06/28/Human%20Computer%20Interaction/</url>
    <content><![CDATA[<p>Outline</p>
<ul>
<li>
<p>What is HCI Design?</p>
<ul>
<li>Objectives of HCI - Usability</li>
</ul>
</li>
<li>
<p>目标</p>
</li>
<li>
<p>Three factors in HCI</p>
<ul>
<li>
<p>Human</p>
</li>
<li>
<p>Computer</p>
</li>
<li>
<p>Interaction</p>
</li>
</ul>
</li>
<li>
<p>HCI Design Process</p>
</li>
<li>
<p>GUI Design</p>
</li>
</ul>
<span id="more"></span>
<h1 id="What-is-HCI-Design"><a class="header-anchor" href="#What-is-HCI-Design"></a>What is HCI Design?</h1>
<ul>
<li>Objectives of HCI - Usability</li>
</ul>
<h2 id="目标"><a class="header-anchor" href="#目标"></a>目标</h2>
<ul>
<li><code>易用性</code>, 维度为:
<ul>
<li>易学性</li>
<li>效率</li>
<li>易记性</li>
<li>出错率</li>
<li>主观满意度</li>
</ul>
</li>
</ul>
<h1 id="Three-factors-in-HCI"><a class="header-anchor" href="#Three-factors-in-HCI"></a>Three factors in HCI</h1>
<h2 id="Human"><a class="header-anchor" href="#Human"></a>Human</h2>
<h3 id="精神模型"><a class="header-anchor" href="#精神模型"></a>精神模型</h3>
<ul>
<li>
<p>精神模型是用户进行人机交互时头脑中的<code>任务模型</code></p>
</li>
<li>
<p>Try to discover your users’ <code>mental model </code>of the task your program helps them perform</p>
</li>
<li>
<p>How?</p>
<ul>
<li>Be aware of the model’s inherent <strong>metaphors</strong>, which represent conceptual components of the task</li>
</ul>
</li>
</ul>
<h3 id="差异性"><a class="header-anchor" href="#差异性"></a>差异性</h3>
<p>按用户群体的特点:</p>
<ul>
<li>新⼿⽤户</li>
<li>是对业务不熟悉的⼈，例如新员⼯或者新接触系统的⼈。为新⼿⽤户设计系统时要关注易学性，进⾏业 务导航，尽量避免出错。如果⼀个系统的⼤多数⽤户都是新⼿⽤户，整个系统的⼈机交互设计都要侧重 易学性。</li>
<li>专家⽤户
<ul>
<li>是能够熟练操作计算机完成业务任务的⼈，⼀般都是⻓时间使⽤软件系统并且计算机操作技能熟练的 ⼈。为专家⽤户设计系统时，要关注效率。如果⼀个系统的⼤多数⽤户都是专家⽤户，整个系统的⼈机 交互设计都要侧重效率。</li>
</ul>
</li>
<li>熟练⽤户
<ul>
<li>是介于新⼿⽤户和专家⽤户之间的⼈。为熟练⽤户设计⼈机交互系统要在易学性和效率之间进⾏折中。</li>
</ul>
</li>
</ul>
<h2 id="Computer"><a class="header-anchor" href="#Computer"></a>Computer</h2>
<h2 id="可视化设计"><a class="header-anchor" href="#可视化设计"></a>可视化设计</h2>
<h2 id="常见界面类型"><a class="header-anchor" href="#常见界面类型"></a>常见界面类型</h2>
<ul>
<li>
<p>从可视化设计语⾔Visual Basic开始，对可视化构件的布局就成为可视化设 计的主要⼯作。</p>
</li>
<li>
<p>常⻅的可视化构件包括：窗⼝、菜单、标签（Tab）、表单、按钮、列表、 树形控件、组合框、输⼊框等等，<code>[Cooper2007]</code>对此有详细的描述。</p>
</li>
<li>
<p><strong>可视化设计要点</strong></p>
<ul>
<li><strong>按照任务模型设计界⾯隐喻</strong>，同时不要把软件系统的内部构造机制暴露给⽤户</li>
<li>可视化设计还应该<strong>基于界⾯隐喻，尽可能地把功能和任务细节表现出来</strong></li>
</ul>
</li>
</ul>
<h2 id="Interaction"><a class="header-anchor" href="#Interaction"></a>Interaction</h2>
<h3 id="Navigation"><a class="header-anchor" href="#Navigation"></a>Navigation</h3>
<ul>
<li>
<p>好的⼈机交互设计就像⼀个服务周到的推销员，能够主动将⾃⼰的产品和服 务简明扼要地告诉⽤户，这个就是导航。</p>
</li>
<li>
<p>好的导航就像⼀个好的餐厅菜单，餐厅菜单能够帮助顾客快速地找到喜欢的 ⻝物，软件系统导航也要能帮助⽤户找到任务的⼊⼝。</p>
</li>
<li>
<p>导航的⽬的就是为⽤户提供⼀个很好的完成任务的⼊⼝，好的导航会让这个 ⼊⼝⾮常符合⼈的精神模型。</p>
</li>
<li>
<p>全局结构按照任务模型将软件产品的功能组织起来，并区分不同的重要性和主题提供给不同的⽤户。</p>
<ul>
<li>全局结构常⽤的导航控件包括窗⼝、菜单、列表、快捷⽅式、热键等等。 • 全局结构的设计主要以功能分层和任务交互过程为主要依据</li>
</ul>
</li>
<li>
<p>局部结构通过安排界⾯布局细节，制造视觉上的线索来给⽤户提供导航。</p>
<ul>
<li>局部结构常⽤的导航控件包括可视化控件布局与组合、按钮设置、⽂本颜⾊或字体⼤⼩等等。</li>
<li>局部结构的设计主要以⽤户关注的任务细节为主要依据。</li>
</ul>
</li>
</ul>
<h3 id="Feedback"><a class="header-anchor" href="#Feedback"></a>Feedback</h3>
<p><code>[Shneiderman2003]</code>总结的部分经验:</p>
<ul>
<li>⽤户喜欢较短的响应时间；</li>
<li>较⻓的响应时间（&gt;15秒）具有破坏性；</li>
<li>⽤户会根据响应时间的变化调整⾃⼰的⼯作⽅式；</li>
<li>较短的响应时间导致了较短的⽤户思考时间；</li>
<li>较快的节奏可能会提⾼效率，但也会增加出错率；</li>
<li>根据任务选择适当的响应时间：
<ul>
<li>打字、光标移动、⿏标定位：50～150毫秒
<ul>
<li>简单频繁的任务：1秒</li>
<li>普通的任务：2～4秒</li>
<li>复杂的任务：8～12秒</li>
</ul>
</li>
</ul>
</li>
<li>响应时间适度的变化是可接受的；</li>
<li><strong>意外延迟</strong>可能具有破坏性；</li>
<li>经验测试有助于设置适当的响应时间。</li>
</ul>
<h3 id="协作式设计"><a class="header-anchor" href="#协作式设计"></a>协作式设计</h3>
<ul>
<li>⼈和计算机是⼈机交互的两⽅，其中⼈的因素是⽐较固定的，⼀定时期内不 会发⽣⼤的变化，所以要让⼆者交互顺畅，就需要让计算机更多地适应⼈的 因素，这也是⼈机交互设计以⽤户为中⼼的根本原因。</li>
<li>这种调整计算机因素以更好地适应并帮助⽤户的设计⽅式被称为<code>协作式设计</code></li>
</ul>
<h3 id="设计原则"><a class="header-anchor" href="#设计原则"></a>设计原则</h3>
<h4 id="简洁设计"><a class="header-anchor" href="#简洁设计"></a>简洁设计</h4>
<h4 id="低出错率设计"><a class="header-anchor" href="#低出错率设计"></a>低出错率设计</h4>
<ul>
<li>⼈机交互设计⾸先要帮助⼈们避免犯错，尽可能设计不让⽤户犯严重错误的系统 • 具体措施包括将不适当的菜单选项功能以灰⾊显示屏蔽 • 禁⽌在数值输⼊域中出现字⺟字符</li>
<li>当错误出现时，系统还要在⼈机交互中提供简洁、有建设性、具体的指导来帮助⽤户消除错误。
<ul>
<li>填写表单时如果⽤户输⼊了⽆效的编码，那么系统应该引导他们对此进⾏修改，⽽不是要求⽤户重新填写整个表单。</li>
</ul>
</li>
<li>出错信息应当遵循以下四个简单原则<code>[Shneiderman1982]</code>：
<ol>
<li>应当使⽤清晰的语⾔来表达，⽽不要使⽤难懂的代</li>
<li>使⽤的语⾔应当精炼准确，⽽不是空泛、模糊的</li>
<li>应当对⽤户解决问题提供建设性的帮助</li>
<li>出错信息应当友好，不要威胁或责备⽤户</li>
</ol>
</li>
<li>系统还应该提供错误恢复和故障解决帮助⼿册。</li>
</ul>
<h4 id="易记性设计"><a class="header-anchor" href="#易记性设计"></a>易记性设计</h4>
<ol>
<li>
<p>减少短期记忆负担。</p>
</li>
<li>
<p>使⽤逐层递进的⽅式展示 信息。在展现复杂信息时， 可以将其分为不同层次，递 进展现越来越丰富的信息</p>
</li>
<li>
<p>使⽤直观的快捷⽅式。⼈ 的记忆具有短时记忆的特 点，时间越⻓越容易忘记。<br>
易记性设计</p>
</li>
<li>
<p>设置有意义的缺省值。有 意义的缺省值（例如⼤多数 ⽤户会选择的输⼊、特定的 场景条件等）可以帮助⽤户 减少输⼊负担，也可以帮助 ⽤户减少记忆负担</p>
</li>
</ol>
<h1 id="HCI-Design-Process"><a class="header-anchor" href="#HCI-Design-Process"></a>HCI Design Process</h1>
<h1 id="GUI-Design"><a class="header-anchor" href="#GUI-Design"></a>GUI Design</h1>
]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
      <tags>
        <tag>Software Engineering Methodology</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Toolkit</title>
    <url>/2022/09/13/Java-Toolkit/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>JDK</li>
<li>Maven</li>
</ul>
<span id="more"></span>
<h1 id="JDK"><a class="header-anchor" href="#JDK"></a>JDK</h1>
<h2 id="安装jdk"><a class="header-anchor" href="#安装jdk"></a>安装jdk</h2>
<p>mac:</p>
<p>mac建议到<a href="https://www.oracle.com/java/technologies/downloads/#java11-mac">oracle官网</a>下载jdk</p>
<p>linux一般用命令行安装，因此推荐openjdk</p>
<p>Ubuntu:</p>
<p>查找合适的openjdk版本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ubuntu</span></span><br><span class="line">apt-cache search openjdk</span><br></pre></td></tr></table></figure>
<p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure>
<ul>
<li>如果search和install都没反应，应该先更新软件源</li>
</ul>
<p>Manjaro:</p>
<p>查找合适的openjdk版本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yay search jdk</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yay install openjdk-8-jdk</span><br></pre></td></tr></table></figure>
<p>(3) 配置环境变量, 编辑如下文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>在最后一行加:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure>
<h2 id="查找JDK"><a class="header-anchor" href="#查找JDK"></a>查找JDK</h2>
<p>查看jdk版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p>查找jdk:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis java</span><br></pre></td></tr></table></figure>
<p>输出为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java: /usr/bin/java /usr/share/java /usr/share/man/man1/java.1.gz</span><br></pre></td></tr></table></figure>
<p>查看jdk真实位置（上面的都是软链接）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -l /usr/bin/java</span><br></pre></td></tr></table></figure>
<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lrwxrwxrwx 1 root root 22 Mar 30 16:07 /usr/bin/java -&gt; /etc/alternatives/java</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /etc/alternatives/java</span><br></pre></td></tr></table></figure>
<p>输出为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lrwxrwxrwx 1 root root 46 Mar 30 16:07 /etc/alternatives/java -&gt; /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以上就是jdk位置</span></span><br></pre></td></tr></table></figure>
<h2 id="配置jdk环境变量"><a class="header-anchor" href="#配置jdk环境变量"></a>配置jdk环境变量</h2>
<h3 id="linux"><a class="header-anchor" href="#linux"></a>linux</h3>
<p>对于linux:  编辑<code>/etc/profile</code>, 或 <code>~/.bashrc</code>, <code> .zshrc</code>等：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile # 这里可以选择任意的shell配置文件，</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 # 这里填jdk位置</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=./:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$PATH:$&#123;JAVA_HOME&#125;/bin</span><br></pre></td></tr></table></figure>
<p>使配置文件生效：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
<h3 id="mac"><a class="header-anchor" href="#mac"></a>mac</h3>
<p>mac的jdk安装位置和linux不同</p>
<p>查询当前的java的安装版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /Library/Java/JavaVirtualMachines</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>
<p>配置<code>.zshrc</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jdk 版本切换， on mac</span></span><br><span class="line"><span class="comment"># jdk-17.0.2.jdk   jdk1.8.0_321.jdk jdk-11.0.14.jdk </span></span><br><span class="line"><span class="built_in">export</span> JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_321.jdk/Contents/Home</span><br><span class="line"><span class="built_in">export</span> JAVA_11_HOME=/Library/Java/JavaVirtualMachines/jdk-11.0.14.jdk/Contents/Home</span><br><span class="line"><span class="built_in">export</span> JAVA_17_HOME=/Library/Java/JavaVirtualMachines/jdk-17.0.2.jdk/Contents/Home</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> jdk8=<span class="string">&#x27;export JAVA_HOME=$JAVA_8_HOME&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> jdk11=<span class="string">&#x27;export JAVA_HOME=$JAVA_11_HOME&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> jdk17=<span class="string">&#x27;export JAVA_HOME=$JAVA_17_HOME&#x27;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bash_profi</span><br></pre></td></tr></table></figure>
<p>切换jdk版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jdk11</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>
<h1 id="Maven"><a class="header-anchor" href="#Maven"></a>Maven</h1>
<p>maven配置文件位置： <code>～/.m2/settings.xml</code></p>
<p>加入阿里云仓库：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阿里云仓库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>L10 Union Find</title>
    <url>/2021/07/31/L10-Union-Find/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Dynamic Equivalence Relation
<ul>
<li>Examples</li>
<li>Definitions</li>
<li>Brute force implementations</li>
</ul>
</li>
<li>Disjoint Set
<ul>
<li>Straightforward Union-Find</li>
<li>Weight Union + Straightforward</li>
<li>Weight Union + Path-compressing Find</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="Problems"><a class="header-anchor" href="#Problems"></a>Problems</h1>
<h2 id="Minimum-Spanning-Tree"><a class="header-anchor" href="#Minimum-Spanning-Tree"></a>Minimum Spanning Tree</h2>
<ul>
<li>Kruskal's algorithm, greedy strategy
<ul>
<li>Select one edge
<ul>
<li>With the minimum weight</li>
<li>Not in the tree</li>
</ul>
</li>
<li>Evaluate this edge
<ul>
<li>This edge will <strong>NOT</strong> result in a cycle</li>
</ul>
</li>
</ul>
</li>
<li>Critical issue
<ul>
<li>How to know &quot;<strong>NO CYCLE</strong>&quot;?</li>
</ul>
</li>
</ul>
<h2 id="Maze-Generation"><a class="header-anchor" href="#Maze-Generation"></a>Maze Generation</h2>
<h2 id="Black-Pixels"><a class="header-anchor" href="#Black-Pixels"></a>Black Pixels</h2>
<h2 id="Jigsaw-Puzzle"><a class="header-anchor" href="#Jigsaw-Puzzle"></a>Jigsaw Puzzle</h2>
<h1 id="Dynamic-Equivalence-Relation"><a class="header-anchor" href="#Dynamic-Equivalence-Relation"></a>Dynamic Equivalence Relation</h1>
<ul>
<li>Equivalence
<ul>
<li>等价关系( 自反对称传递 )</li>
<li>等价类们形成了一个划分( <strong>partition</strong> )</li>
</ul>
</li>
<li>Dynamic equivalence relation
<ul>
<li>Changing in the process of computation</li>
<li><strong>IS</strong> instruction: <em>yes</em> or <em>no</em> ( in the same equivalence class )</li>
<li><strong>MAKE</strong> instruction: combining 2 equivalent classes, by relating 2 unrelated elements, and influencing the results of subsequent <strong>IS</strong> instructions.</li>
<li>Starting as equality relation</li>
</ul>
</li>
</ul>
<h2 id="Union-Find-based-Implementation"><a class="header-anchor" href="#Union-Find-based-Implementation"></a>Union-Find based Implementation</h2>
<ul>
<li>Maze Generation
<ul>
<li>Randomly delete a wall and <strong>union</strong> 2 cells</li>
<li>Loop until you <strong>find</strong> the inlet and outlet are in one equivalent class</li>
</ul>
</li>
<li>The Kruskal's algorithm
<ul>
<li><strong>Find</strong> whether u and v are  in the same equivalent class</li>
<li>If not, add the edge and <strong>union</strong> the 2 nodes</li>
</ul>
</li>
<li>Black Pixels
<ul>
<li><strong>Find</strong> black pixel groups</li>
<li>How the <strong>union</strong> of black groups increases $\alpha$</li>
</ul>
</li>
</ul>
<h2 id="Implementation：-Choices"><a class="header-anchor" href="#Implementation：-Choices"></a>Implementation： Choices</h2>
<p>n: 总元素个数，</p>
<p>m： Find / Union 指令数</p>
<ul>
<li>Matrix( relation matrix )
<ul>
<li>Space in $\Theta(n^2)$,  and worst-case cost in $O(mn)$​ (mainly for row copying for MAKE)( m 条指令，最坏情况下每条$O(n)$的代价 )</li>
</ul>
</li>
<li>Array( for equivalence class ID )
<ul>
<li>Space in $\Theta(n)$​, and worst-case cost in $O(mn)$​ (mainly for search and change for MAKE )</li>
</ul>
</li>
<li>Forest of rooted trees
<ul>
<li>A collection of disjoint sets, supporting <em>Union</em> and <em>Find</em> operations</li>
<li>Not necessary to traverse all the elements in one set</li>
</ul>
</li>
</ul>
<h2 id="Union-Find-ADT"><a class="header-anchor" href="#Union-Find-ADT"></a>Union-Find ADT</h2>
<h3 id="Using-Rooted-Tree"><a class="header-anchor" href="#Using-Rooted-Tree"></a>Using Rooted Tree</h3>
<ul>
<li>
<p><strong>IS</strong> $s_i \equiv s_j$:</p>
<ul>
<li>$t = find(s_i)$</li>
<li>$u = find(s_j)$</li>
<li>$(t == u)$​ ?</li>
</ul>
</li>
<li>
<p><strong>MAKE</strong> $s_i \equiv s_j$ :</p>
<ul>
<li>$t=find(s_i)$</li>
<li>$u = find(s_j)$</li>
<li>$union(t,u)$</li>
</ul>
</li>
<li>
<p>Critical operation： 对rooted tree 的 assignment 和 lookup，  均称做 <code>link  operation</code></p>
</li>
</ul>
<h3 id="Worst-case-Analysis"><a class="header-anchor" href="#Worst-case-Analysis"></a>Worst-case Analysis</h3>
<ul>
<li>Assuming each link operation takes $O(1)$</li>
<li>在根树极度不均衡时(变成一个链表), operations done: <em>n</em>( <code>makeSet</code>,  把每个元素实现为一个等价类),  <em>n-1</em>( <em>Union次数</em>) + <em>(m-n+1)n</em>(  共有m条指令,去掉<em>n-1</em>条,剩下的全部是<em>Find</em>,且查最深的那个), 因此是$\Theta(mn)$​</li>
<li>和蛮力策略代价一样,这是因为并查操作都太简单了,没有特殊约束.</li>
</ul>
<h3 id="Weight-Union"><a class="header-anchor" href="#Weight-Union"></a>Weight Union</h3>
<ul>
<li>Weight union( <em>wUnion</em> )
<ul>
<li>always have the tree with <em>fewer nodes</em> as subtree</li>
</ul>
</li>
<li>解决树的平衡性问题,为什么不用<em>height</em>, 而要用<em>size</em>?
<ul>
<li>其实也有用<em>height</em>的优化<em>Union</em>方案,这里没教</li>
<li>由于在用<em>size</em>的方案中, &quot;size小而height大&quot;这种反例不可能出现,所以size方案是可行的</li>
</ul>
</li>
</ul>
<h4 id="Worst-case-Analysis-2"><a class="header-anchor" href="#Worst-case-Analysis-2"></a>Worst case Analysis</h4>
<ul>
<li>任意次<em>wUnion</em>后, n个节点的根树的高度上界是 $\lfloor logn \rfloor$​</li>
<li>证明用归纳法</li>
<li>A  Union-Find program of size <em>m</em>, on a set of <em>n</em> elements, performs  $\Theta(m + n\lfloor logn \rfloor)$​​  link operations in the worst case if <em>wUnion</em> and <em>straight find</em> are used</li>
<li>Proof:
<ul>
<li>At most <em>n-1</em> <em>wUnion</em> can be done, building a tree with height at most $\lfloor logn \rfloor$</li>
<li>Then, each <em>find</em> costs at most $\lfloor logn \rfloor + 1$</li>
<li>Each <em>wUnion</em> costs in $O(1)$, so, the upper bound on the cost of any combination of <em>m wUnion/find</em> operations is the cost of <em>m find</em> operations, that is $m(\lfloor logn \rfloor + 1) \in O(n+ m\lfloor logn \rfloor)$</li>
</ul>
</li>
</ul>
<h3 id="Path-Compression-Find"><a class="header-anchor" href="#Path-Compression-Find"></a>Path Compression Find</h3>
<ul>
<li><em>cFind</em> does <strong>twice as many</strong> link operations as the <em>find</em> does for a given node in a given tree(先查一遍查到根,再查一遍,把遇到的节点都挂到根下面)</li>
</ul>
<h4 id="Worst-case-Analysis-3"><a class="header-anchor" href="#Worst-case-Analysis-3"></a>Worst case Analysis</h4>
<ul>
<li>
<p>用平摊分析, <em>cFind</em>是昂贵操作</p>
</li>
<li>
<p>(使用<em>wUnion</em>和<em>cFind</em>)代价是$O((n+m)log^*(n))$​</p>
<ul>
<li>$log^*n$的反函数是n个2叠罗汉,后者增长很快,因此前者增长很慢, 可以近似看作常数
<ul>
<li>Log-star grows extremely slowly $\lim\limits _{n \rarr \infty} { \frac {log^* n} {log ^{(p)} n}}$, <em>p</em> is any nonnegative constant​​</li>
</ul>
</li>
</ul>
</li>
<li>
<p>平摊分析的细节不讲了</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>L11 Graph Traversal</title>
    <url>/2021/08/03/L11-Graph-Traversal/</url>
    <content><![CDATA[<p>Outline：</p>
<ul>
<li><strong>General DFS/BFS Skeleton</strong></li>
<li><strong>Depth-First Search Trace</strong></li>
</ul>
<span id="more"></span>
<h1 id="General-DFS-BFS-Skeleton"><a class="header-anchor" href="#General-DFS-BFS-Skeleton"></a>General DFS/BFS Skeleton</h1>
<ul>
<li>
<p>在遍历过程中,节点会经历三种状态:</p>
<ul>
<li>
<p>白色: 节点尚未被遍历到</p>
</li>
<li>
<p>灰色: 节点已经被遍历到,但对于它的遍历尚未结束</p>
</li>
<li>
<p>黑色: 节点自身的遍历已经结束</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">dfs-<span class="built_in">wrapper</span>( 用于不连通图,可以遍历所有连通片 )</span><br><span class="line"><span class="keyword">for</span> each v in G</span><br><span class="line">	<span class="keyword">if</span> v.color = WHITE:<span class="comment">//全部染成白色</span></span><br><span class="line">			<span class="built_in">dfs</span>(G,v);</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(G, v)</span><br><span class="line">	Mark v as <span class="string">&quot;discovered&quot;</span> <span class="comment">//v被染成灰色</span></span><br><span class="line">	&lt;Preorder processing of v&gt;</span><br><span class="line">	For each vertex w that edge vw is in G:</span><br><span class="line">		If w is “undiscovered”:</span><br><span class="line">			&lt;Exploratory peocessing of edge vw&gt;</span><br><span class="line">			<span class="built_in">dfs</span>(G, w)</span><br><span class="line">			&lt;Backtrack processing of edge vw&gt;</span><br><span class="line">		Otherwise:</span><br><span class="line">			<span class="string">&quot;Check&quot;</span> vw without visiting w.</span><br><span class="line">	&lt;Postorder processing of v&gt;</span><br><span class="line">	Mark v as <span class="string">&quot;finished&quot;</span> <span class="comment">//v被染成黑色</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bfs</span>(G,s)</span><br><span class="line"> Mark s as <span class="string">&quot;discovered&quot;</span>;</span><br><span class="line"> <span class="built_in">enqueue</span>(pending, s);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">while</span>(pending is nonempty)</span><br><span class="line"> 	<span class="built_in">dequeue</span>(pending, v);</span><br><span class="line"> 	For each vertex w that edge vw is in G:</span><br><span class="line"> 		If w is <span class="string">&quot;undiscovered&quot;</span></span><br><span class="line"> 			Mark w as <span class="string">&quot;discovered&quot;</span> <span class="function"><span class="keyword">and</span> <span class="title">enqueue</span><span class="params">(pending, w)</span></span></span><br><span class="line"><span class="function">	Mark v as &quot;finished&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>图遍历算法的复杂度都是$\Theta（m+n）$​ (m为边数，n是顶点数),称为“线性时间”</li>
</ul>
<h1 id="Depth-First-Search-Trace"><a class="header-anchor" href="#Depth-First-Search-Trace"></a>Depth-First Search Trace</h1>
<p>DFS将边分为四种类型（四种染色）</p>
<ul>
<li><strong>T.E</strong>: tree edge d 当检查$u$的所有邻居时， 如果发现一个白色邻居节点$v$并对$v$ 递归地DFS,此时将边$uv$标记为TE.
<ul>
<li>在图的某个连通片内部进行遍历时，所有TE组成的子图是连通的\无环的，且包含该连通篇中所有的点。</li>
<li>如果忽略所有边的方向，则这些TE组成当前连通片的一棵生成树，称之为“ DFS树”。</li>
<li>如果以开始遍历的点为根，则从根结点指向所有叶节点的方向，就是遍历过程推进的方向，根据这一方向可以为TE的两个节点定义父子关系，父子关系传递形成祖先、后继关系（ 父子关系 == 直接的祖先 \ 后继关系 ）</li>
</ul>
</li>
<li><strong>B.E</strong>: back edge 当节点$u$的邻居 $v$  在前面的遍历过程中已经被访问到， 并且$v$ 是 $u$ 的祖先节点</li>
<li><strong>D.E</strong>: descendant edge 当节点$u$的邻居 $v$  在前面的遍历过程中已经被访问到， 并且$v$ 是 $u$ 的后继节点</li>
<li><strong>C.E</strong>: cross edge 以上三点都不是。 即$u$的邻居$v$不是白色节点，且二者无祖先或后继关系</li>
</ul>
<h2 id="Time-Relation-on-Changing-Color-DFS"><a class="header-anchor" href="#Time-Relation-on-Changing-Color-DFS"></a>Time Relation on Changing Color(DFS)</h2>
<ul>
<li>
<p>Keeping the order in which vertices are encountered for the first or last time</p>
<ul>
<li>
<p>A global integer time: 离散计数器, 初始值为$0$, 每次节点变色加一,最终值为$2n$</p>
</li>
<li>
<p>Array <em>discoverTime</em>: the $i^{th}$​​ element records the vertex $v_i$ turns into gray</p>
</li>
<li>
<p>Array <em>finishTime</em>: the $i^{th}$ element records the vertex $v_i$​​ turns into black</p>
</li>
<li>
<p>The active interval for vertex $v$, denoted as <em><strong>active(v)</strong></em>, is the duration while $v$ is gray, that is:</p>
<p><strong>active($v$​) = [ discoverTime, finishTime ]</strong></p>
</li>
</ul>
</li>
</ul>
<h3 id="Properties-of-Active-Intervals"><a class="header-anchor" href="#Properties-of-Active-Intervals"></a>Properties of Active Intervals</h3>
<ul>
<li><strong>定理4.1</strong>
<ul>
<li>
<p>$w$ 是 $v$在DFS树中的后继节点, 当且仅当active($w$)$\subset$active($v$​). 若$w \neq v$, 则此处的包含为真包含</p>
</li>
<li>
<p>$w$​​ 和 $v$​​没有祖先后继关系,当且仅当active($w$​​)和active($v$​​​)互不包含</p>
<p>If $v$ and $w$ have no ancestor/descendent relationship in the DFS forest, then their <strong>active intervals</strong> are disjoint.</p>
</li>
<li>
<p><strong>If $vw \in E_G$, then</strong></p>
<ul>
<li>$vw$ is a <strong>cross edge</strong> iff. <em>active(w)</em> entirely precedes <em>active(v)</em>.
<ul>
<li>$w$只能是黑色或灰色。 如果是黑色，其结束时间一定早于$v$的开始时间，证毕。 如果是灰色，因为是CE，因此二者无祖先后继关系，因此二者活动区间互不包含，$w$ 先被遍历，因此 $w$的活动区间在$v$之前 ？？</li>
</ul>
</li>
<li>$vw$ is a <strong>descendant edge</strong> iff. there is some third vertex $x$, such that $active(w) \subset active(x) \subset active(v)$.</li>
<li>$vw$ is a <strong>tree edge</strong> iff. $active(w) \subset active(v)$, and there is no third vertex x, such that <em>$vw$</em> is a <strong>descendant edge</strong> iff. there is some third vertex <em>x</em>, such that $active(w) \subset active(x) \subset active(v)$.</li>
<li>$vw$ is <strong>back edge</strong> $active(v)  \subset active(w)$.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Ancestor-and-Descendant"><a class="header-anchor" href="#Ancestor-and-Descendant"></a>Ancestor and Descendant</h3>
<ul>
<li>
<p><strong>[White Path Theorem]</strong> $w$ is a descendant of $v$ in a DFS tree iff. at the time $v$ is discovered( just to be changing color into gray), there is a path in $G$ from $v$ to $w$ entirely of white vertices.</p>
<p>证明:</p>
<p>充分性: 如果节点 $v$是$w$的祖先,则考察从$v$到$w$的TE组成的路径, 在$v$​刚刚被发现的时刻, 该路径是一条白色路径.</p>
<p>必要性: 已知节点$v$​到$w$​存在白色路径. 采用归纳法证明, 对白色路径长度$k$​做归纳. 初始情况, $k=0$​, 显然成立. 假设对于所有长度小于$k$​的白色路径结论成立. 下面考虑长度为$k$​的白色路径$P=v \rarr x_1 \rarr \dots \rarr x_i \dots \rarr w$​. 随着遍历的推进,假设节点$x_i$​是$P$​上第一个被遍历过程发现的节点, 基于节点$x_i$​, 将$P$​分为两小段: $P_1=v \rarr \dots \rarr x_i$​, $P_2=x_i \rarr \dots \rarr w$​. 由于$P_2$​是长度小于$k$​的白色路径, 所以$x_i$​是$w$​在遍历树中的祖先. 由定理4.1, 易知$v$​是$x_i$​在遍历树中的祖先, 则$v$​是$w$​在遍历树中的祖先</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins Tutorial</title>
    <url>/2022/05/27/Jenkins-Tutorial/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Jenkins</li>
<li>SCM</li>
<li>Access Token</li>
<li>Credentials</li>
<li>Webhook</li>
<li>slave</li>
<li>Jenkinsfile</li>
<li>日志</li>
</ul>
<span id="more"></span>
<h1 id="Jenkins"><a class="header-anchor" href="#Jenkins"></a>Jenkins</h1>
<p>Jenkins是一个开源的CICD工具</p>
<h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2>
<p>建议<a href="https://www.jenkins.io/doc/book/installing/docker/">以容器形式安装并运行jenkins</a></p>
<p>容器形式运行jenkins，需要注意jenkins的数据持久化， jenkins的数据目录为<code>/var/jenkins_home</code> ， 需要将其挂载到宿主机的某个目录</p>
<p>注意，以容器形式运行的jenkins，其<strong>主体是容器</strong>，因此后续配置SSH 公钥，SSH私钥等等操作，都是对于Jenkins容器（而非宿主机）的。 甚至Jenkins容器对宿主机的ssh登陆也需要手动配置</p>
<ol>
<li>
<p>pull镜像：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull jenkins/jenkins</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -uroot -p 8081:8080 -p 50000:50000 --name jenkins -v /home/jenkins_home:/var/jenkins_home -v /etc/localtime:/etc/localtime jenkins/jenkins</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">-d                 	 # -d:后台启动</span><br><span class="line">-u root              # 指定容器的用户</span><br><span class="line">--privileged				 # 	Running Docker in Docker currently requires privileged access to function properly. </span><br><span class="line">--name jenkins       # 容器实例名</span><br><span class="line">--restart=always     # 容器随docker自启动，因为重启docker时，默认容器都会被关闭</span><br><span class="line">-p                   # -p host_port:container_port: 指定将主机的端口映射到容器的端口</span><br><span class="line">-v                   # 映射目录（给容器挂载存储卷）</span><br><span class="line">-e                   # 指定环境变量</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">1. 将宿主机端口映射到容器端口，映射端口不要和宿主机冲突</span><br><span class="line">2. 将容器对应的数据目录映射到宿主机上（实现数据持久化）</span><br><span class="line">3. 将宿主机node、maven等前后台构建工具（环境变量）映射到容器中</span><br><span class="line">4. Jenkins镜像创建的容器自带Git工具（/usr/bin/git）</span><br><span class="line">5. Jenkins镜像创建的容器自带java环境（/usr/local/openjdk-8/bin/java）</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>接下来就可以通过浏览器访问jenkins</p>
<h2 id="登陆"><a class="header-anchor" href="#登陆"></a>登陆</h2>
<p>密码保存在容器的<code>/var/jenkins_home/secrets/initialAdminPassword</code>中，如果忘记了登录密码，可以查看该文件</p>
<h2 id="进入jenkins容器"><a class="header-anchor" href="#进入jenkins容器"></a>进入jenkins容器</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker container exec jenkins bash</span><br></pre></td></tr></table></figure>
<h1 id="Steps"><a class="header-anchor" href="#Steps"></a>Steps</h1>
<h2 id="Create-a-Jenkins-Item"><a class="header-anchor" href="#Create-a-Jenkins-Item"></a>Create a Jenkins Item</h2>
<ol>
<li>点击&quot;New Item&quot;, 选择&quot;Pipeline&quot;形式
<ul>
<li>因为我喜欢用pipeline script. 而Freestyle我还不会..</li>
</ul>
</li>
<li>进入Jenkins的 job configuration页面</li>
</ol>
<h2 id="Configure-the-Hook-Trigger"><a class="header-anchor" href="#Configure-the-Hook-Trigger"></a>Configure the Hook Trigger</h2>
<p>在<strong>Build Triggers</strong> 勾选:</p>
<ul>
<li>Github: <strong>GitHub hook trigger for GITScm polling</strong>
<ul>
<li>by selecting this trigger, this job will run whenever Jenkins receive git hub webhook request from git hub. Git hub webhook will send request according to your choices which you selected in “which events would you like to trigger this webhook” option in git hub webhooks.<br>
That’s all we have successfully configured git hub webhook for Jenkins.</li>
</ul>
</li>
<li>Gitlab:  <strong>Build when a change is pushed to GitLab. GitLab webhook URL</strong>
<ul>
<li>这需要Jenkins安装gitlab插件</li>
</ul>
</li>
</ul>
<h2 id="Configure-Webhook-on-Registry"><a class="header-anchor" href="#Configure-Webhook-on-Registry"></a>Configure Webhook on Registry</h2>
<blockquote>
<p>Webhooks are <strong>event</strong>s sent by a webhook provider to your app</p>
</blockquote>
<p>jenkins + github配置 webhook教程：<a href="https://www.decodingdevops.com/configure-github-web-hook-for-jenkins/">https://www.decodingdevops.com/configure-github-web-hook-for-jenkins/</a></p>
<p>jenkins可以暴露给github和gitlab等代码托管平台一个webhook url, 每当用户在代码托管平台触发某些事件时（比如进行了push，merge等），后者就可以给jenkins发送一个hook，让jenkins进行构建</p>
<ul>
<li>
<p>jenkins在收到SCM的hook后，会检查在jenkins上注册的SCM 仓库，如果发现某个仓库的信息和hook信息一致，jenkins的SCM插件（gitlab插件/github插件）就会去检查SCM上的仓库内容，如果该仓库内容有改动，就会发起一次build</p>
<ul>
<li>这意味着如果本次push没有对内容做更改，jenjins插件就不会检查出变动，也就不会发起构建。 对于用户来说，这意味着jenkins正常收到了hook消息，却一直无法触发构建，jenkins log中也查不到信息（GitHub Hook Log到了“Changes not found”就结束了，没有下文）， <strong>需要在job的<code>Github Hook Log</code>页面查看信息</strong>（该页面只有github插件有）</li>
</ul>
</li>
<li>
<p>Note: Jenkins默认暴露8080端口，与github通信，因此要确保8080端口开放，否则github发送的消息无法到达jenkins.</p>
<ul>
<li>由于我设置了容器的端口映射, Jenkins容器的8080端口实际被映射到了宿主机的8081端口, 因此下文的Payload URL中的端口是8081</li>
</ul>
</li>
</ul>
<h3 id="Github"><a class="header-anchor" href="#Github"></a>Github</h3>
<p>默认是<code>http://[jenkins-host-ip]:[port]/github-webhook/</code>, 也可以在配置页面override该url</p>
<p>先进入对应的仓库.</p>
<ol>
<li>
<p>click on the <strong>Settings</strong> tab</p>
</li>
<li>
<p>then click <strong>Webhooks</strong> from the left panel.</p>
</li>
<li>
<p>Now, click on the <strong>Add webhook</strong>  button at the right.</p>
</li>
<li>
<p>接下来你可以看到一个表单:</p>
<ol>
<li>
<p><strong>Payload URL</strong> : <code>http://[jenkins-host-ip]:[port]/github-webhook/</code>, 最终的Payload URL形如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://124.222.135.47:8081/github-webhook/</span><br></pre></td></tr></table></figure>
<ul>
<li>Jenkins域名必须是可被Github可访问到的, 所以一般都是公网IP</li>
<li>也可以在配置页面override该url</li>
</ul>
</li>
<li>
<p><strong>Content type</strong>:  pick <strong>application/json</strong></p>
</li>
<li>
<p>Leave the rest of the options as they are, with the <strong>Just the push event</strong> option selected. For simplicity, I said before that GitHub would call Jenkins only when there’s a push in the repo. If you want to configure other actions, you’ll have to select <strong>Let me select individual events</strong>, but for now, let’s keep it simple.</p>
</li>
<li>
<p>Finally, click on the green <strong>Add webhook</strong> button.</p>
</li>
</ol>
</li>
<li>
<p>现在已经Webhook配置完毕了. 每当仓库被push, Github就会向设置好的Payload URL发送webhook</p>
</li>
</ol>
<h3 id="Gitlab"><a class="header-anchor" href="#Gitlab"></a>Gitlab</h3>
<p>jenkins + gitlab配置webhook很简单</p>
<ol>
<li>得到<strong>Payload URL</strong>: 之前在<strong>Build Triggers ** 勾选</strong>Build when a change is pushed to GitLab. GitLab webhook URL: [xxx] **时就可以得到Payload URL
<ul>
<li>形如<code>https://JENKINS_URL/project/YOUR_JOB</code></li>
</ul>
</li>
<li>复制Payload URL</li>
<li>进入Gitlab对应仓库, 进入<strong>Settings</strong> -&gt; <strong>Webhooks</strong>,
<ul>
<li><strong>URL</strong>: 填写 Payload URL</li>
<li><strong>Secret Token</strong>: 可以不填. 配置步骤:
<ol>
<li>In the configuration of your Jenkins job, in the GitLab configuration section, select <strong>Advanced</strong>.</li>
<li>Under <strong>Secret Token</strong>, select <strong>Generate</strong>.</li>
<li>将生成的<strong>Secret Token</strong>粘贴到Gitlab的<strong>Secret Token</strong></li>
</ol>
</li>
<li><strong>Trigger</strong>: 选择<strong>Push events</strong></li>
<li><strong>SSL verification</strong>: 可以勾上<strong>Enable SSL verification</strong></li>
</ul>
</li>
<li>Finally, click on the green <strong>Add webhook</strong> button.</li>
<li>To test the webhook, select <strong>Test</strong>.</li>
</ol>
<h2 id="Use-SCM"><a class="header-anchor" href="#Use-SCM"></a>Use SCM</h2>
<p>SCM就是Source Code Management， 即github/gitlab上的repository. jenkins可以用git从SCM上clone代码，并进行构建.</p>
<ul>
<li>jenkins需要SCM上clone Jenkinsfile,甚至有可能调用其他的API. 这就需要在Jenkins上[配置Credential](# Credentials)
<ul>
<li>对于SSH Key而言, 需要先在对应的Registry上配置Jenkins endpoint的公钥
<ul>
<li>注意, 由于容器和宿主机的公私钥不一样. 所以如果是以容器形式运行的jenkins, 这个“公钥”也必须是jenkins容器而非宿主机的公钥</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>我选择的Jenkinsfile形式是Pipeline, 且Jenkinsfile放在SCM中. 因此我在<strong>Pipleline</strong>区域设置:</p>
<ol>
<li>
<p><strong>Definition</strong>: <strong>Pipeline script from SCM</strong></p>
<ul>
<li>这样Jenkins就会拉取SCM中的Jenkinsfile.</li>
<li>如果选择<strong>Pipeline script</strong>, 则会在Jenkins中设置Jenkinsfile, 这样太僵硬了</li>
</ul>
</li>
<li>
<p><strong>Repositories</strong>: 指定要clone的jenkinsfile的位置（ SCM地址, 所在分支, 脚本名 ）</p>
<ol>
<li><strong>Repository URL</strong>: 使用HTTPS url和ssh url都可以</li>
<li><strong>Credentials</strong>: 指定Jenkins使用的私钥, 由于是容器形式的Jenkins ,就选择容器的私钥</li>
</ol>
</li>
<li>
<p><strong>Branches to build</strong>: 选择使用的分支, 我只用master分支</p>
<ul>
<li>
<p>注意：</p>
<p>使用github作为SCM时， 如果<code>Branches to build</code> 设为空，则必须取消lightweight checkout，详见https://issues.jenkins.io/browse/JENKINS-46588</p>
</li>
</ul>
</li>
<li>
<p><strong>Script Path</strong>: 指定SCM中的Jenkinsfile的名字</p>
<ul>
<li>注意要写全名. 比如我的脚本为: <code>Jenkinsfile-fast.groovy</code>, 则在该栏填这个名字</li>
</ul>
</li>
</ol>
<h2 id="Build-Manually"><a class="header-anchor" href="#Build-Manually"></a>Build Manually</h2>
<p>Webhook会自动触发构建, 当然也可以手动构建:</p>
<ol>
<li>click on the <strong>Build Now</strong> link</li>
</ol>
<h1 id="Access-Token"><a class="header-anchor" href="#Access-Token"></a>Access Token</h1>
<p>jenkins与SCM交互，需要配置对这些SCM的Access Token</p>
<ol>
<li>
<p>先在SCM生成Access Token</p>
<ul>
<li>github: <a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">在github生成Access Token</a></li>
<li>gitlab: 登录GitLab -&gt; 在用户头像下拉框，选择“Setting” -&gt; 点击“Access Tokens”，输入“Name”和“Expires at”，勾选“api” -&gt; 点击“Create personal access token”，生成access token，记录下此token</li>
</ul>
</li>
<li>
<p>在jenkins， 系统管理 -&gt; Manage Credentials -&gt; Stores scoped to Jenkins -&gt; 全局凭据 添加该Token作为凭据</p>
<ul>
<li>类型选择Username and password</li>
<li>在用户名中输入一个不存在的用户名</li>
<li>密码填写Personal Access Token</li>
</ul>
</li>
<li>
<p>用该凭据来连接SCM:</p>
<ul>
<li>
<p>github: “Manage Jenkins” -&gt; &quot;Configure System&quot; -&gt; GitHub， 使用刚才配置的Credential</p>
<ul>
<li>github网址：<a href="https://api.github.com">https://api.github.com</a></li>
</ul>
</li>
<li>
<p>gitlab: “Manage Jenkins” -&gt; &quot;Configure System&quot; -&gt; &quot;GitLab&quot;，使用刚才配置的Credential</p>
<ul>
<li>
<p>Gitlab host URL：<a href="https://git.nju.edu.cn/">https://git.nju.edu.cn/</a></p>
<p>我用的学校的gitlab， 所以用的是学校的gitlab的网址</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h1 id="Credentials"><a class="header-anchor" href="#Credentials"></a>Credentials</h1>
<p><a href="https://www.jenkins.io/zh/doc/book/using/using-credentials/">https://www.jenkins.io/zh/doc/book/using/using-credentials/</a></p>
<p><a href="https://blog.csdn.net/elva1087penny/article/details/115387664">https://blog.csdn.net/elva1087penny/article/details/115387664</a></p>
<p>Jenkins要调用其他服务的API, 这需要Credential( 凭据, 事实上就是一种密钥 ).</p>
<p>根据目标平台的不同, Jenkins可以使用SSH Key, Username and password, API Token 等形式的凭据</p>
<ul>
<li>Credential不仅可以用于免密登陆平台, 免密clone, 还可以调用平台的各种API</li>
</ul>
<h2 id="Credential-Type"><a class="header-anchor" href="#Credential-Type"></a>Credential Type</h2>
<p>Jenkins可以存储以下类型的credentials:</p>
<ul>
<li><strong>Secret text</strong> - API token之类的token (如GitHub个人访问token)</li>
<li><strong>Username and password</strong> - 可以为独立的字段，也可以为冒号分隔的字符串：<code>username:password</code>(更多信息请参照 <a href="https://www.jenkins.io/zh/doc/book/pipeline/jenkinsfile#handling-credentials">处理 credentials</a>),</li>
<li><strong>Secret file</strong> - 保存在文件中的加密内容</li>
<li><strong>SSH Username with private key</strong>: 需要jenkins终端已经将ssh 公钥发送给了目标主机,  以后只需要私钥就可以登录目标主机 )
<ul>
<li>Github和Gitlab都可以使用SSH Username with private key</li>
</ul>
</li>
<li><strong>Certificate</strong> - a <a href="https://tools.ietf.org/html/rfc7292">PKCS#12 证书文件</a> 和可选密码</li>
<li>此外, 通过安装第三方插件, 还可以使用别的类型的凭据:
<ul>
<li><strong>Docker Host Certificate Authentication</strong> credentials: 需要安装Docker插件</li>
<li><strong>Gitlab API Token</strong>: 同理, 使用API Token
<ul>
<li>注意, Gitlab认证不仅需要配置Credential, 还需要额外的步骤, [参见下文](#Configure Access Token)</li>
</ul>
</li>
<li><strong>Github App</strong>: 同理, 但我不知道有什么用, 也不知道怎么用. Github认证我使用的是SSH Key</li>
</ul>
</li>
</ul>
<h2 id="Add-Credential"><a class="header-anchor" href="#Add-Credential"></a>Add Credential</h2>
<p>需要<strong>Credentials</strong>插件</p>
<ol>
<li>进入<code>Manage Jenkins</code> --&gt; <code>Manage Credentials</code> --&gt; <code>Stores scoped to Jenkins</code> --&gt; <code>Global Credentials(unrestricted)</code>, 点击<code>Add Credentials</code></li>
<li>填写表单:
<ul>
<li><strong>Type</strong>: 根据不同的通信类型选择不同的凭据形式</li>
<li><strong>Scope</strong>: 选择Global</li>
<li><strong>Description</strong>: 可用于标记别名方便区别或记录凭据作用, 写上为妙</li>
<li><strong>ID</strong>: Credential的唯一标识, 会显示在项目构建时的Credentials插件选项中.
<ul>
<li>可自定义, 若为空则自动生成.</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li>对于SSH Key, 需要填写( 前提是已经在Github上配置了Jenkins的公钥 ):
<ul>
<li>Username: ssh连接采用的的用户名</li>
<li>Private Key：ssh连接所需的私钥</li>
</ul>
</li>
</ul>
<h2 id="Use-Credential"><a class="header-anchor" href="#Use-Credential"></a>Use Credential</h2>
<h1 id="API-Token"><a class="header-anchor" href="#API-Token"></a>API Token</h1>
<p>API Token是一种用于认证的密钥, 其 作用SSH Key, Username and password 一样. 可以用API Token来访问平台提供的各种服务.</p>
<h2 id="Github-2"><a class="header-anchor" href="#Github-2"></a>Github</h2>
<p>Github中的API Token称作“PAT”( Personal Access Token ).</p>
<p>Github的Credential支持SSH Key, 也支持PAT. 虽然我使用前者, 但用后者也是可行的</p>
<ul>
<li>Github API Token: 首先要[得到PAT](Get Get API Token), 然后将其[添加进Crendential](#Add Credential), 可以以两种Type添加
<ul>
<li><strong>Username and password</strong> : <code>Username</code> is the GitHub user ID and <code>Password</code> is the Password or a <a href="https://github.com/blog/1509-personal-api-tokens">personal API Token</a> (recommended).</li>
<li>However, <a href="https://developer.github.com/changes/2020-02-14-deprecating-password-auth/">use of a password with the GitHub API is now <strong>deprecated</strong></a>.</li>
<li><strong>Secret Text</strong>:
<ul>
<li>Scope: Global</li>
<li>Secret: 填写之前生成的PAT</li>
<li>ID: 写一个名字</li>
<li>Description：可以填入一些描述，如 GitHub with token</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Get-PAT"><a class="header-anchor" href="#Get-PAT"></a>Get PAT</h3>
<p><a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token">Creating a personal access token</a></p>
<ol>
<li>On Github, click <strong>Settings</strong></li>
<li>In the left sidebar, click <strong>Developer settings</strong>.</li>
<li>In the left sidebar, click <strong>Personal access tokens</strong>.</li>
<li>Click <strong>Generate new token</strong>.</li>
<li>Give your token a descriptive name.</li>
<li>To give your token an expiration, select the <strong>Expiration</strong> drop-down menu, then click a default or use the calendar picker.</li>
<li>Select the scopes, or permissions, you'd like to grant this token. To use your token to access repositories from the command line, select <strong>repo</strong>.</li>
<li>Click <strong>Generate token</strong>.
<ul>
<li><strong>Warning:</strong> Treat your tokens like passwords and keep them secret. When working with the API, use tokens as environment variables instead of hardcoding them into your programs.</li>
</ul>
</li>
</ol>
<h3 id="Use-PAT"><a class="header-anchor" href="#Use-PAT"></a>Use PAT</h3>
<p><em>For more information, see <a href="https://github.com/jenkinsci/gitlab-plugin#jenkins-to-gitlab-authentication">Jenkins-to-GitLab authentication</a>.</em></p>
<p>根据[Add Credential](# Add Credential)将之前配置的API Token配置为Credential</p>
<ul>
<li><strong>Type</strong>: <strong>Gitlab API Token</strong></li>
<li><strong>API Token</strong>: 填写之前生成的API Token</li>
</ul>
<h2 id="Gitlab-2"><a class="header-anchor" href="#Gitlab-2"></a>Gitlab</h2>
<p>Gitlab和Github一样, 可以用SSH Username with private key (这里就不演示了) 和 Gitlab API Token.</p>
<h3 id="Plugins"><a class="header-anchor" href="#Plugins"></a>Plugins</h3>
<p>Gitlab API Token</p>
<p>需要安装插件:</p>
<ul>
<li>GitLab Plugin ;</li>
<li>Gitlab Hook</li>
<li>Build Authorization Token Root</li>
</ul>
<h3 id="Get-Access-Token"><a class="header-anchor" href="#Get-Access-Token"></a>Get Access Token</h3>
<p>Create a personal access token to authorize Jenkins to access GitLab.</p>
<ol>
<li>Sign in to GitLab as the user to be used with Jenkins.</li>
<li>On the top bar, in the top right corner, select your avatar.</li>
<li>Select <strong>Edit profile</strong>.</li>
<li>On the left sidebar, select <strong>Access Tokens</strong>.</li>
<li>Select the cope.
<ul>
<li><strong>api</strong>: 选上</li>
<li><strong>read_user</strong>: 选上</li>
<li><strong>read_repository</strong>: 选上</li>
<li><strong>write_repository</strong>: 选上</li>
</ul>
</li>
<li>点击 <strong>Create a <a href="https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html">personal access token</a></strong></li>
<li>Copy the personal access token. You need it to <a href="https://docs.gitlab.com/ee/integration/jenkins.html#configure-the-jenkins-server">configure the Jenkins server</a>.</li>
</ol>
<h3 id="Configure-Access-Token"><a class="header-anchor" href="#Configure-Access-Token"></a>Configure Access Token</h3>
<p><em>For more information, see <a href="https://github.com/jenkinsci/gitlab-plugin#jenkins-to-gitlab-authentication">Jenkins-to-GitLab authentication</a>.</em></p>
<p>根据[Add Credential](# Add Credential)将之前配置的API Token配置为Credential</p>
<ul>
<li><strong>Type</strong>: <strong>Gitlab API Token</strong></li>
<li><strong>API Token</strong>: 填写之前生成的API Token</li>
</ul>
<hr>
<p>理论上讲, 这样做之后Credential配置就结束了, 但是Gitlab插件还提供了一些深层次的Jenkins集成功能, 所以需要在Jenkins中继续配置, 来开启这些功能:</p>
<ol>
<li>Select <strong>Manage Jenkins &gt; Configure System</strong>.</li>
<li>In the <strong>GitLab</strong> section, select <strong>Enable authentication for ‘/project’ end-point</strong>.</li>
<li>然后填写表单:
<ol>
<li><strong>Connection name</strong>: 自定义</li>
<li><strong>GitLab host URL</strong>: Enter the GitLab server’s URL, 比如校园网公网的gitlab: <code>https://git.nju.edu.cn/</code></li>
<li><strong>Credentials</strong>: 选择之前配置的Credential</li>
</ol>
</li>
<li>点击 <strong>Test Connection</strong>, 出现 Success, 表示成功</li>
</ol>
<h3 id="Use-API-Token"><a class="header-anchor" href="#Use-API-Token"></a>Use API Token</h3>
<ol>
<li>进入Jenkins Item的GitLab Connection, 填写GitLab Connection</li>
<li>选择Use alternative credential</li>
<li><strong>Credential</strong> : 选择之前生成的API Token</li>
</ol>
<h2 id="DockerHub"><a class="header-anchor" href="#DockerHub"></a>DockerHub</h2>
<p>我们需要Credential来<strong>log in</strong> Dockerhub, 以从Dockerhub pull或者向其push镜像</p>
<p>Dockerhub支持username-password和API Token作为Credential</p>
<h2 id="Get-API-Token"><a class="header-anchor" href="#Get-API-Token"></a>Get API Token</h2>
<ol>
<li>
<p>Get the token using the following link.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://hub.docker.com/settings/security</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Create an access token using the New Access Token button on the security page.</p>
</li>
</ol>
<hr>
<h2 id="Use-API-Token-2"><a class="header-anchor" href="#Use-API-Token-2"></a>Use API Token</h2>
<p>假设我们把username-password 或者 API Token 配置为了Credential, 就可以在jenkinsfile中使用:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">stage(<span class="string">&quot;login to dockerhub&quot;</span>)&#123;</span><br><span class="line">        withCredentials([usernamePassword(<span class="attr">credentialsId:</span> <span class="string">&#x27;DOCKERHUB_KEY&#x27;</span>, <span class="attr">passwordVariable:</span> <span class="string">&#x27;password&#x27;</span>, <span class="attr">usernameVariable:</span> <span class="string">&#x27;username&#x27;</span>)]) &#123;</span><br><span class="line">            sh <span class="string">&#x27;docker login -u $username -p $password&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Credential:<code>DOCKERHUB_KEY</code></li>
</ul>
<h1 id="Build"><a class="header-anchor" href="#Build"></a>Build</h1>
<p>Jenkins从SCM得到代码以及jenkins脚本后，就要根据脚本进行项目构建， 而项目构建不一定由jenkins主机来做。 jenkins采用master - slave模式， jenkins主机作为master，可以将代码和脚本交给slave，让脚本执行构建过程</p>
<h2 id="slave"><a class="header-anchor" href="#slave"></a>slave</h2>
<p>jenkins是master-slave模式， jenkins自身只是指挥者， 它<strong>根据jenkinsfile的内容选择slave</strong>，指挥slave运行脚本</p>
<ul>
<li>
<p>如果某台主机被设置为slave主机，jenkins会在其中安装一个agent程序。 如果jenkins选择该slave进行构建，则会ssh连接到该slave， 运行agent进程，并将代码和jenkinsfile发给它, 实现<strong>通过slave构建</strong></p>
<ul>
<li>
<p>agent程序用java编写，所以slave节点上<strong>必须有jdk</strong>, 否则无法安装agent程序，也就无法将其作为slave节点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在slave节点上</span></span><br><span class="line"></span><br><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>BTW，由于jenkins一般配合docker，所以slave节点上还要安装docker</p>
</li>
</ul>
</li>
<li>
<p>默认情况下，jenkins的slave只有一个，即jenkins自身（ 如果是容器形式的jenkins， 那就是jenkins容器作为slave ）。 可以在<code>Manage Jenkins</code> --&gt; <code>Manage Nodes and Clouds</code>中查看和配置slave节点</p>
<ul>
<li>可以看到，容器和宿主机是两个独立的实体，jenkins容器的默认slave是自身容器。在Jenkins容器眼中，宿主机和其他机器一样，jenkins把宿主机和其他机器添加为slave的步骤都相同</li>
</ul>
</li>
</ul>
<h2 id="添加slave"><a class="header-anchor" href="#添加slave"></a>添加slave</h2>
<ol start="0">
<li>
<p>由于我采用ssh方式连接到slave，jenkins主机需要先配置对slave节点的ssh免密登陆， 即把ssh <strong>public key</strong>发给slave节点：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-copy-id lyk@[slave-host]</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>​		然后在<code>Credentials</code>页面，设置一个Credential， 内容是 jenkins主机到该slave节点的ssh <strong>private key</strong></p>
<ol>
<li>
<p>进入<code>Manage Jenkins</code> --&gt; <code>Manage Nodes and Clouds</code> ， 进入添加节点页面，输入相应信息，最终进入节点的配置页面</p>
</li>
<li>
<p>在节点配置页面填写信息：</p>
<ul>
<li>
<p><strong>Labels</strong>： <strong>指定该slave的label, 在jenkinsfile中通过label来引用对应的slave</strong></p>
</li>
<li>
<p><strong>Remote root directory</strong>: jenkins agent的根目录，agent会在<strong>此目录下创建<code>workspace</code>目录，作为jenkins的工作目录</strong>，也就是构建上下文</p>
<p>这里将Remote root directory设为用户目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/home/lyk</span><br></pre></td></tr></table></figure>
<ul>
<li>这会<strong>创建<code>/home/lyk/workspace</code>目录，后续的构建都在该目录下进行</strong></li>
</ul>
</li>
<li>
<p>Launch method: jenkins master登录到slave节点的方法，只有先登录到主机，才能启动slave agent进程</p>
<p>一般通过ssh：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Launch agents via SSH</span><br></pre></td></tr></table></figure>
<p>接下来输入ssh登录到slave节点所需的信息：</p>
<ul>
<li>Host： slave节点的ip</li>
<li>Credentials：之前设置好的Credential， 即jenkins主机到该slave的ssh公钥</li>
<li>Host Key Verification Strategy： Mannually trusted Key Verification Strategy</li>
</ul>
</li>
</ul>
<p>注意：</p>
<p>主机要使用docker，需要把用户添加进docker群组，而这一步需要用户重新登陆才能生效。 但是，jenkins client是通过用户身份登陆的，而且应该是<strong>永久</strong>登陆，即使令节点&quot;Disconnect&quot;(在节点控制界面)， 依然不会断开登陆。</p>
<p>也就是说，如果在配置好slave主机的docker之前（即将用户添加至docker群组并重新登录），就令主机成为slave节点，这就会导致jenkins agent使用不了docker，报错:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Got permission denied while trying to connect to the Docker daemon socket</span><br></pre></td></tr></table></figure>
<p>解决方法是删除该节点，重新配置节点</p>
</li>
</ol>
<h1 id="Environment-Variable"><a class="header-anchor" href="#Environment-Variable"></a>Environment Variable</h1>
<ul>
<li>
<p>Jenkins<strong>内置</strong>了一系列环境变量, 它们都是<strong>global</strong>的, 即可以在所有Jenkinsfile使用, 且作用域是整个Jenkinsfile</p>
</li>
<li>
<p>用户也可以在Jenkinsfike中自定义环境变量, 它们都是local per stage的(即只在指定的stage生效).</p>
</li>
<li>
<p>用法: (前提是环境变量在作用域内)</p>
<ul>
<li>可以在Jenkinsfile中通过 <code>env</code> 关键字使用: <code>$&#123;env.BUILD_ID&#125;$</code></li>
</ul>
</li>
</ul>
<h2 id="Global-Env"><a class="header-anchor" href="#Global-Env"></a>Global Env</h2>
<h3 id="内置Env"><a class="header-anchor" href="#内置Env"></a>内置Env</h3>
<ul>
<li>
<p>可以通过<code>$&#123;YOUR_JENKINS_HOST&#125;/env-vars.html</code> 查看所有内置环境变量</p>
</li>
<li>
<p>通过执行 <code>printenv</code> shell 命令获取：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">sh <span class="string">&quot;printenv&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用Jenkins的<strong>内置</strong>环境变量时:</p>
<ul>
<li>
<p>可以不写<code>env</code>, 如:<code>$&#123;BUILD_ID&#125;</code></p>
</li>
<li>
<p>如果使用shell 命令, 甚至可以不用写 <code>&#123;&#125;</code>, 如: <code>$BUILD_ID</code></p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">stage(<span class="string">&quot;Read Env Variables&quot;</span>) &#123;</span><br><span class="line">                echo <span class="string">&quot;带 env 的读取方式：$&#123;env.BUILD_NUMBER&#125;&quot;</span></span><br><span class="line">                echo <span class="string">&quot;不带 env 的读取方式：$&#123;BUILD_NUMBER&#125;&quot;</span></span><br><span class="line">                sh <span class="string">&#x27;echo &quot;shell 中读取方式 $BUILD_NUMBER&quot;&#x27;</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>以上用法会让人困惑, 保险起见还是全部用<code>$&#123;env.BUILD_ID&#125;$</code>吧</p>
</li>
</ul>
</li>
</ul>
<h3 id="自定义Env"><a class="header-anchor" href="#自定义Env"></a>自定义Env</h3>
<p>在Jenkins→Manage Jenkins→Confiure System找到Global properties→勾选”Environment variables”选框，单击“Add”按钮，在输入框中输入变量名和变量值即可。</p>
<p>自定义全局环境变量也会被加入<code>env</code>的属性列表中</p>
<h3 id="常用Env"><a class="header-anchor" href="#常用Env"></a>常用Env</h3>
<ul>
<li>
<p>BUILD_NUMBER 构建号，累加的数字。在打包时，它可作为制品名称的一部分，比如server-${BUILD_NUMBER}.jar</p>
</li>
<li>
<p>BRANCH_NAME 多分支pipeline项目支持。当需要根据不同的分支做不同的事情时就会用到，比如通过代码将release分支发布到生产环境中、master分支发布到测试环境中。</p>
</li>
<li>
<p>BUILD_URL 当前构建的页面URL。如果构建失败，则需要将失败的构建链接放到邮件通知中，这个链接就可以是BUILD_URL</p>
</li>
<li>
<p>GIT_BRANCH 通过git拉取的源码构建的项目才会有此变量。在使用env变量时，需要注意不同类型的项目，env变量所包含的属性及其值是不一样的。比如普通pipeline任务中的GIT_BRANCH变量值为roigin/master，在多分支pipeline中GIT BRANCH变量的值为master</p>
<p>所以，在pipeline中根据分支进行不同行为的逻辑处理时，需要留意。</p>
</li>
<li>
<p>BUILD_ID 当前版本ID，与BUILD_NUMBER相同，用于在1.597+中创建的构建，但较旧版本的YYYY-MM-DD_hh-mm-ss时间戳记</p>
</li>
<li>
<p>BUILD_DISPLAY_NAME 当前版本的显示名称，默认为“＃153”</p>
</li>
<li>
<p>JOB_NAME 此构建项目的名称，如“foo”或“foo / bar”</p>
</li>
<li>
<p>JOB_BASE_NAME 此建立项目的名称将剥离文件夹路径，例如“bar / foo”的“foo”</p>
</li>
<li>
<p>BUILD_TAG: <code>jenkins- $ &#123;JOB_NAME&#125; - $ &#123;BUILD_NUMBER&#125; </code>的字符串。JOB_NAME中的所有正斜杠（/）都会用破折号（ - ）替换。方便放入资源文件，jar文件等，以方便识别</p>
</li>
<li>
<p>EXECUTOR_NUMBER 识别执行此构建的当前执行程序（在同一台计算机的执行程序中）的唯一编号。这是您在“构建执行者状态”中看到的数字，但数字从0开始，而不是1。</p>
</li>
<li>
<p>NODE_NAME 代理的名称</p>
</li>
<li>
<p>NODE_LABELS 空格分隔的节点分配的标签列表</p>
</li>
<li>
<p>WORKSPACE 分配给构建作为工作区的目录的绝对路径</p>
</li>
<li>
<p>JENKINS_HOME Jenkins主节点上分配的目录绝对路径存储数据</p>
</li>
<li>
<p>JENKINS_URL 完整的Jenkins网址，例如<a href="http://server:port/jenkins/">http://server：port/jenkins/</a> （注意：只有在系统配置中设置了Jenkins URL）</p>
</li>
<li>
<p>JOB_URL 此作业的完整URL，如<a href="http://server:port/jenkins/job/foo/">http://server：port/jenkins/job/foo/</a> （必须设置Jenkins URL）</p>
</li>
</ul>
<h2 id="Local-Env"><a class="header-anchor" href="#Local-Env"></a>Local Env</h2>
<p>在Jenkinsfile中可以通过内置函数<code>withEnc(['key=value'])</code>来自定义环境变量, 注意它们都是local per stage的:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">node(<span class="string">&#x27;!windows&#x27;</span>) &#123;</span><br><span class="line">    withEnv([<span class="string">&#x27;DISABLE_AUTH=true&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;DB_ENGINE=sqlite&#x27;</span>]) &#123;</span><br><span class="line">        stage(<span class="string">&#x27;Build&#x27;</span>) &#123;</span><br><span class="line">            echo <span class="string">&quot;Database engine is $&#123;DB_ENGINE&#125;&quot;</span></span><br><span class="line">            echo <span class="string">&quot;DISABLE_AUTH is $&#123;DISABLE_AUTH&#125;&quot;</span></span><br><span class="line">            sh <span class="string">&#x27;printenv&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><strong>这里的 = 号两侧不能有空格</strong>, 必须是 <code>key=value</code> 的形式</p>
</li>
<li>
<p>如果使用Declarerative Script, 也可以用:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">stage(<span class="string">&#x27;Build&#x27;</span>) &#123;</span><br><span class="line">  environment &#123;</span><br><span class="line">        NAME = <span class="string">&quot;RGYB&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="环境变量生效顺序"><a class="header-anchor" href="#环境变量生效顺序"></a>环境变量生效顺序</h2>
<p>安装插件：</p>
<p><a href="https://wiki.jenkins.io/display/JENKINS/Build+Environment+Plugin">https://</a><a href="https://wiki.jenkins.io/display/JENKINS/Build+Environment+Plugin">wiki.jenkins.io/display/JENKINS/Build+Environment+Plugin</a></p>
<p><a href="https://wiki.jenkins-ci.org/display/JENKINS/EnvInject+Plugin">https://</a><a href="https://wiki.jenkins-ci.org/display/JENKINS/EnvInject+Plugin">wiki.jenkins-ci.org/display/JENKINS/EnvInject+Plugin</a></p>
<p>全局环境变量 &lt; Slave 配置环境变量 &lt; Job 参数 &lt; Job injected 环境变量</p>
<p>一般不Override 全局环境变量, 否则可能出现不可预知的问题</p>
<h1 id="Jenkinsfile"><a class="header-anchor" href="#Jenkinsfile"></a>Jenkinsfile</h1>
<p>官网教程：<a href="https://www.jenkins.io/doc/book/pipeline/">https://www.jenkins.io/doc/book/pipeline/</a></p>
<p>jenkins根据jenkinsfile来进行构建，该文件有两种写法： <code>Declarative</code>和<code>pipeline script</code>, 后者使用groovy语言，表达能力比较强，推荐使用</p>
<p>pipeline script由一个个stage组成，在每个stage内执行一些指令</p>
<h2 id="选择slave"><a class="header-anchor" href="#选择slave"></a>选择slave</h2>
<p>后面会看到，jenkins由slave来负责实际的构建过程，而slave就是根据jenkinsfile选择的:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"># 选择label为<span class="keyword">volatile</span>-ai-slave的节点来构建此脚本</span><br><span class="line">node(<span class="string">&quot;volatile-ai-slave&quot;</span>) </span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="workspace"><a class="header-anchor" href="#workspace"></a>workspace</h2>
<p>jenkins会在配置slave时指定的<code>Remote root directory</code>下创建<code>workspace</code>目录,作为工作目录</p>
<ul>
<li>
<p>可以在jenkinsfile中使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def workspace = pwd()</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">echo $&#123;workspace&#125;</span><br></pre></td></tr></table></figure>
<p>输出为<code>[Remote root directory]/workspace</code></p>
</li>
</ul>
<h1 id="Jenkinsfile-Example"><a class="header-anchor" href="#Jenkinsfile-Example"></a>Jenkinsfile Example</h1>
<h1 id="Integration-with-Shell"><a class="header-anchor" href="#Integration-with-Shell"></a>Integration with Shell</h1>
<p>Many Pipeline steps also use the named-parameter syntax as a shorthand for creating a Map in Groovy, which uses the syntax <code>[key1: value1, key2: value2]</code>.</p>
<p>For convenience, when calling steps taking only one parameter (or only one mandatory parameter), the parameter name may be omitted, for example:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">sh <span class="string">&#x27;echo hello&#x27;</span> <span class="comment">/* short form  */</span></span><br><span class="line">sh([<span class="attr">script:</span> <span class="string">&#x27;echo hello&#x27;</span>])  <span class="comment">/* long form */</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Jenkins没有Terminal, 所以shell里面没法用<code>sh 'sudo [...]'</code></li>
</ul>
<p>可以利用Shell的返回值:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">sh(<span class="attr">script:</span> <span class="string">&#x27;cmd&#x27;</span>, <span class="attr">returnStdout:</span><span class="literal">true</span>)</span><br></pre></td></tr></table></figure>
<p>例如:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">LS_RESULT = <span class="string">&quot;$&#123;sh(script:&#x27;ls -lah&#x27;, returnStdout: true).trim()&#125;&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="Integration-with-Git"><a class="header-anchor" href="#Integration-with-Git"></a>Integration with Git</h1>
<p>Many Pipeline steps also use the named-parameter syntax as a shorthand for creating a Map in Groovy, which uses the syntax <code>[key1: value1, key2: value2]</code>. Making statements like the following functionally equivalent:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">git <span class="attr">url:</span> <span class="string">&#x27;git://example.com/amazing-project.git&#x27;</span>, <span class="attr">branch:</span> <span class="string">&#x27;master&#x27;</span></span><br><span class="line">git([<span class="attr">url:</span> <span class="string">&#x27;git://example.com/amazing-project.git&#x27;</span>, <span class="attr">branch:</span> <span class="string">&#x27;master&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>e.g.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">def</span> git_branch = <span class="string">&#x27;master&#x27;</span></span><br><span class="line">   <span class="keyword">def</span> git_repository = <span class="string">&#x27;git@github.com:VolatileReborn/Frontend-VolatileReborn.git&#x27;</span> <span class="comment">//Github</span></span><br><span class="line">   </span><br><span class="line">&lt;Snip&gt;</span><br><span class="line">  </span><br><span class="line">   stage(<span class="string">&#x27;clone from github into slave\&#x27;s workspace. Using branch: &#x27;</span> + <span class="string">&quot;master&quot;</span>) &#123;</span><br><span class="line">        echo <span class="string">&quot;workspace: $&#123;workspace&#125;&quot;</span></span><br><span class="line">        git <span class="attr">branch:</span> <span class="string">&quot;$&#123;git_branch&#125;&quot;</span>, <span class="attr">url:</span> <span class="string">&quot;$&#123;git_repository&#125;&quot;</span></span><br><span class="line">     </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="Integration-with-Docker"><a class="header-anchor" href="#Integration-with-Docker"></a>Integration with Docker</h1>
<p><a href="https://www.jenkins.io/doc/book/pipeline/docker/">Using Docker with Pipeline </a></p>
<p>Starting with Pipeline versions 2.5 and higher, Pipeline has built-in support for interacting with Docker from within a <code>Jenkinsfile</code>.</p>
<ul>
<li>注意, Jenkins所在主机(宿主机或者容器)必须要安装Docker</li>
</ul>
<h3 id="Customizing-the-execution-environment"><a class="header-anchor" href="#Customizing-the-execution-environment"></a>Customizing the execution environment</h3>
<p>Pipeline is designed to easily use <a href="https://docs.docker.com/">Docker</a> images as the execution environment for a single <a href="https://www.jenkins.io/doc/book/glossary/#stage">Stage</a> or the entire Pipeline. Meaning that a user can define the tools required for their Pipeline, without having to manually configure agents.</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    <span class="comment">/* Requires the Docker Pipeline plugin to be installed */</span></span><br><span class="line">    docker.image(<span class="string">&#x27;node:16.13.1-alpine&#x27;</span>).inside &#123;</span><br><span class="line">        stage(<span class="string">&#x27;Test&#x27;</span>) &#123;</span><br><span class="line">            sh <span class="string">&#x27;node --version&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Volumes"><a class="header-anchor" href="#Volumes"></a>Volumes</h3>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    <span class="comment">/* Requires the Docker Pipeline plugin to be installed */</span></span><br><span class="line">    docker.image(<span class="string">&#x27;maven:3.8.1-adoptopenjdk-11&#x27;</span>).inside(<span class="string">&#x27;-v $HOME/.m2:/root/.m2&#x27;</span>) &#123;</span><br><span class="line">        stage(<span class="string">&#x27;Build&#x27;</span>) &#123;</span><br><span class="line">            sh <span class="string">&#x27;mvn -B&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Multiple-Containers"><a class="header-anchor" href="#Multiple-Containers"></a>Multiple Containers</h3>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    <span class="comment">/* Requires the Docker Pipeline plugin to be installed */</span></span><br><span class="line"></span><br><span class="line">    stage(<span class="string">&#x27;Back-end&#x27;</span>) &#123;</span><br><span class="line">        docker.image(<span class="string">&#x27;maven:3.8.1-adoptopenjdk-11&#x27;</span>).inside &#123;</span><br><span class="line">            sh <span class="string">&#x27;mvn --version&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stage(<span class="string">&#x27;Front-end&#x27;</span>) &#123;</span><br><span class="line">        docker.image(<span class="string">&#x27;node:16.13.1-alpine&#x27;</span>).inside &#123;</span><br><span class="line">            sh <span class="string">&#x27;node --version&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Build-Image"><a class="header-anchor" href="#Build-Image"></a>Build Image</h3>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    checkout scm</span><br><span class="line">    <span class="keyword">def</span> customImage = docker.build(<span class="string">&quot;my-image:$&#123;env.BUILD_ID&#125;&quot;</span>)</span><br><span class="line">    customImage.push()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Build-with-Tag"><a class="header-anchor" href="#Build-with-Tag"></a>Build with Tag</h4>
<p>One common usage of image &quot;tags&quot; is to specify a <code>latest</code> tag for the most recently, validated, version of a Docker image. The <code>push()</code> method accepts an optional <code>tag</code> parameter, allowing the Pipeline to push the <code>customImage</code> with different tags, for example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    checkout scm</span><br><span class="line">    def customImage = docker.build(&quot;my-image:$&#123;env.BUILD_ID&#125;&quot;)</span><br><span class="line">    customImage.push()</span><br><span class="line"></span><br><span class="line">    customImage.push(&#x27;latest&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Using-Dockerfile"><a class="header-anchor" href="#Using-Dockerfile"></a>Using Dockerfile</h4>
<p>The <code>build()</code> method builds the <code>Dockerfile</code> in the current directory by default. This can be overridden by providing a directory path containing a <code>Dockerfile</code> as the second argument of the <code>build()</code> method, for example:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    checkout scm</span><br><span class="line">    <span class="keyword">def</span> testImage = docker.build(<span class="string">&quot;test-image&quot;</span>, <span class="string">&quot;./dockerfiles/test&quot;</span>) </span><br><span class="line"></span><br><span class="line">    testImage.inside &#123;</span><br><span class="line">        sh <span class="string">&#x27;make test&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Builds <code>test-image</code> from the Dockerfile found at <code>./dockerfiles/test/Dockerfile</code>.</li>
</ul>
<p>It is possible to pass other arguments to <a href="https://docs.docker.com/engine/reference/commandline/build/">docker build</a> by adding them to the second argument of the <code>build()</code> method. When passing arguments this way, the last value in the that string must be the path to the docker file and should end with the folder to use as the build context)</p>
<p>This example overrides the default <code>Dockerfile</code> by passing the <code>-f</code> flag:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    checkout scm</span><br><span class="line">    def dockerfile = &#x27;Dockerfile.test&#x27;</span><br><span class="line">    def customImage = docker.build(&quot;my-image:$&#123;env.BUILD_ID&#125;&quot;,</span><br><span class="line">                                   &quot;-f $&#123;dockerfile&#125; ./dockerfiles&quot;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Builds <code>my-image:$&#123;env.BUILD_ID&#125;</code> from the Dockerfile found at <code>./dockerfiles/Dockerfile.test</code>.</li>
</ul>
<h3 id="Push-to-Registry"><a class="header-anchor" href="#Push-to-Registry"></a>Push to Registry</h3>
<p>In order to use a custom Docker Registry, users of Scripted Pipeline can wrap steps with the <code>withRegistry()</code> method, passing in the custom Registry URL, for example:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    checkout scm</span><br><span class="line"></span><br><span class="line">    docker.withRegistry(<span class="string">&#x27;https://registry.example.com&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">        docker.image(<span class="string">&#x27;my-custom-image&#x27;</span>).inside &#123;</span><br><span class="line">            sh <span class="string">&#x27;make test&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>For a Docker Registry which requires authentication, add a &quot;Username/Password&quot; Credentials item from the Jenkins home page and use the Credentials ID as a second argument to <code>withRegistry()</code>:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    checkout scm</span><br><span class="line"></span><br><span class="line">    docker.withRegistry(<span class="string">&#x27;https://registry.example.com&#x27;</span>, <span class="string">&#x27;credentials-id&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> customImage = docker.build(<span class="string">&quot;my-image:$&#123;env.BUILD_ID&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Push the container to the custom Registry */</span></span><br><span class="line">        customImage.push()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Bugs"><a class="header-anchor" href="#Bugs"></a>Bugs</h3>
<ul>
<li><code>docker run -it ...</code>报错: the input device is not a TTY
<ul>
<li>Jenkins没有TTY, 所以不要使用<code>-it</code></li>
</ul>
</li>
</ul>
<h2 id="Frontend"><a class="header-anchor" href="#Frontend"></a>Frontend</h2>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">node(<span class="string">&quot;volatile-ai-slave&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">def</span> workspace = pwd()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> git_branch = <span class="string">&#x27;**&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> git_repository = <span class="string">&#x27;**&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> vm_ip = <span class="string">&#x27;**&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> vm_port = <span class="string">&#x27;**&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> vm_user = <span class="string">&#x27;**&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> IMAGE_NAME = <span class="string">&#x27;volatile_ai&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> IMAGE_NAME_WITH_TAG = <span class="string">&#x27;volatile_ai:latest&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> IMAGE_TO_RUN = <span class="string">&#x27;lyklove/volatile_ai:latest&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> CONTAINER_NAME = <span class="string">&#x27;volatile_ai&#x27;</span></span><br><span class="line"></span><br><span class="line">    stage(<span class="string">&#x27;clone from gitlab into slave\&#x27;s workspace&#x27;</span>) &#123;</span><br><span class="line">        echo <span class="string">&quot;workspace: $&#123;workspace&#125;&quot;</span></span><br><span class="line">        git <span class="attr">branch:</span> <span class="string">&quot;$&#123;git_branch&#125;&quot;</span>, <span class="attr">url:</span> <span class="string">&quot;$&#123;git_repository&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    stage(<span class="string">&#x27;cd to build context&#x27;</span>) &#123;</span><br><span class="line">        echo <span class="string">&quot;the context now is:&quot;</span></span><br><span class="line">        sh <span class="string">&quot;ls -al&quot;</span></span><br><span class="line">        sh <span class="string">&quot;cd $&#123;workspace&#125;&quot;</span></span><br><span class="line">        echo <span class="string">&quot;cd to build context, now the context is:&quot;</span></span><br><span class="line">        sh <span class="string">&quot;ls -al&quot;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    stage(<span class="string">&quot;build docker image&quot;</span>)&#123;</span><br><span class="line">        sh <span class="string">&quot;docker build -t $&#123;IMAGE_NAME&#125; .&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//     stage(&quot;login to dockerhub&quot;)&#123;</span></span><br><span class="line"><span class="comment">//         withCredentials([usernamePassword(credentialsId: &#x27;DOCKERHUB_KEY&#x27;, passwordVariable: &#x27;password&#x27;, usernameVariable: &#x27;username&#x27;)]) &#123;</span></span><br><span class="line"><span class="comment">//             sh &#x27;docker login -u $username -p $password&#x27;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    stage(<span class="string">&quot;push to dockerhub&quot;</span>)&#123;</span><br><span class="line"><span class="comment">//         echo &quot;begin push to dockerhub&quot;</span></span><br><span class="line">        sh <span class="string">&quot;docker image tag $&#123;IMAGE_NAME_WITH_TAG&#125; lyklove/$&#123;IMAGE_NAME_WITH_TAG&#125;&quot;</span></span><br><span class="line"><span class="comment">//         sh &quot;docker image push lyklove/$&#123;IMAGE_NAME_WITH_TAG&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&quot;clean previous image and container&quot;</span>)&#123;</span><br><span class="line">        sh <span class="string">&quot;docker container rm -f $&#123;CONTAINER_NAME&#125;&quot;</span></span><br><span class="line"><span class="comment">//         sh &quot;docker image rm $&#123;IMAGE_NAME_WITH_TAG&#125;&quot;</span></span><br><span class="line"><span class="comment">//         sh &quot;docker image rm $&#123;IMAGE_TO_RUN&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//     stage( &quot;pull image&quot; )&#123;</span></span><br><span class="line"><span class="comment">//         sh &quot;docker pull  lyklove/$&#123;IMAGE_NAME_WITH_TAG&#125;&quot;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line">    stage(<span class="string">&quot;run container&quot;</span>) &#123;</span><br><span class="line">        sh <span class="string">&quot;docker image ls&quot;</span></span><br><span class="line">        sh <span class="string">&quot;docker container run --name $&#123;CONTAINER_NAME&#125; --net=host  -d $&#123;IMAGE_TO_RUN&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">&quot;signal gitlab: deployed&quot;</span>)&#123;</span><br><span class="line">        updateGitlabCommitStatus <span class="attr">name:</span> <span class="string">&#x27;deployed&#x27;</span>, <span class="attr">state:</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Integration-with-Gitlab"><a class="header-anchor" href="#Integration-with-Gitlab"></a>Integration with Gitlab</h1>
<p><a href="https://docs.gitlab.com/ee/integration/jenkins.html">Jenkins integration </a>, 我的过程和文档上的略有不同</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Gitlab</span></span><br><span class="line">stage(<span class="string">&quot;signal github: deployed&quot;</span>)&#123;</span><br><span class="line">    echo <span class="string">&#x27;Notify GitLab&#x27;</span></span><br><span class="line">    updateGitlabCommitStatus <span class="attr">name:</span> <span class="string">&#x27;build&#x27;</span>, <span class="attr">state:</span> <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    updateGitlabCommitStatus <span class="attr">name:</span> <span class="string">&#x27;build&#x27;</span>, <span class="attr">state:</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Plugins-2"><a class="header-anchor" href="#Plugins-2"></a>Plugins</h1>
<ul>
<li>
<p>可以在 <a href="https://plugins.jenkins.io/">Jenkins plugins</a> 搜索</p>
</li>
<li>
<p>也可以在 Manage Jenkins --&gt; Manage Plugins --&gt;可选插件 中选择</p>
</li>
<li>
<p>在jenkins安装时, 勾选推荐安装的插件(包括了Git插件)</p>
</li>
<li>
<p>需要手动安装:</p>
<ul>
<li>Install the <a href="https://wiki.jenkins.io/display/JENKINS/GitLab+Plugin">Jenkins GitLab Plugin</a>.</li>
</ul>
</li>
</ul>
<ol>
<li>
<h3 id="安装GitHub-Plugin"><a class="header-anchor" href="#安装GitHub-Plugin"></a>安装GitHub Plugin</h3>
<blockquote>
<p>系统管理--&gt;插件管理--&gt;可选插件</p>
</blockquote>
<p>直接安装Github Plugin, jenkins会自动帮你解决其他插件的依赖，直接安装该插件Jenkins会自动帮你安装plain-credentials 、<a href="http://lib.csdn.net/base/git">Git</a> 、 credentials 、 github-api</p>
</li>
</ol>
<h1 id="日志"><a class="header-anchor" href="#日志"></a>日志</h1>
<p>日志是最好的debug工具， jenkins日志位于：Dashboard -&gt; System Log</p>
<h1 id="Ref"><a class="header-anchor" href="#Ref"></a>Ref</h1>
<ul>
<li><a href="https://docs.gitlab.com/ee/integration/jenkins.html">Gitlab Jenkins integration</a></li>
</ul>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
      <tags>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript Basic</title>
    <url>/2022/08/23/Javascript-Basic/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Intro</li>
<li>Basic</li>
<li>Function</li>
<li>...</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">MDN -&gt; JS</a></li>
<li><a href="https://www.liaoxuefeng.com/wiki/1022910821149312">廖雪峰 -&gt;JS</a></li>
</ul>
<h1 id="Basic"><a class="header-anchor" href="#Basic"></a>Basic</h1>
<h2 id="Object"><a class="header-anchor" href="#Object"></a>Object</h2>
<p>JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成.</p>
<p>JavaScript用一个<code>&#123;...&#125;</code>表示一个对象，键值对以<code>xxx: xxx</code>形式申明，用<code>,</code>隔开。注意，最后一个键值对不需要在末尾加<code>,</code>，如果加了，有的浏览器（如低版本的IE）将报错.</p>
<p>JS对象的属性的key是一个<strong>字符串</strong>, value可以是任意类型.</p>
<p>JS中访问不存在的属性会返回<code>undefined</code>：</p>
<h2 id="成员访问"><a class="header-anchor" href="#成员访问"></a>成员访问</h2>
<p>如果属性名包含特殊字符，就必须用<code>''</code>括起来：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> xiaohong = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小红&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;middle-school&#x27;</span>: <span class="string">&#x27;No.1 Middle School&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><code>xiaohong</code>的属性名<code>middle-school</code>不是一个有效的变量，就需要用<code>''</code>括起来。访问这个属性也无法使用<code>.</code>操作符，必须用<code>['xxx']</code>来访问：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xiaohong[&#x27;middle-school&#x27;]; // &#x27;No.1 Middle School&#x27;</span><br><span class="line">xiaohong[&#x27;name&#x27;]; // &#x27;小红&#x27;</span><br><span class="line">xiaohong.name; // &#x27;小红&#x27;</span><br></pre></td></tr></table></figure>
<p>也可以用<code>xiaohong['name']</code>来访问<code>xiaohong</code>的<code>name</code>属性，不过<code>xiaohong.name</code>的写法更简洁。我们在编写JavaScript代码的时候，属性名尽量使用标准的变量名，这样就可以直接通过<code>object.prop</code>的形式访问一个属性了。</p>
<h1 id="Function"><a class="header-anchor" href="#Function"></a>Function</h1>
<h2 id="Destructuring"><a class="header-anchor" href="#Destructuring"></a>Destructuring</h2>
<p>ES6支持解构赋值. 这是对容器、对象等对象赋值的语法糖.</p>
<p>解构赋值可以支持<strong>嵌套结构</strong>, 只需保持赋值时的嵌套的层次一致</p>
<h3 id="数组的解构赋值"><a class="header-anchor" href="#数组的解构赋值"></a>数组的解构赋值</h3>
<p>对数组:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let [x, y, z] = [&#x27;hello&#x27;, &#x27;JavaScript&#x27;, &#x27;ES6&#x27;];</span><br></pre></td></tr></table></figure>
<p>对嵌套的数组元素的解构赋值:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, [y, z]] = [<span class="string">&#x27;hello&#x27;</span>, [<span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;ES6&#x27;</span>]];</span><br></pre></td></tr></table></figure>
<p>解构赋值还可以忽略某些元素：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [, , z] = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;ES6&#x27;</span>]; <span class="comment">// 忽略前两个元素，只对z赋值第三个元素</span></span><br><span class="line">z; <span class="comment">// &#x27;ES6&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="对象的解构赋值"><a class="header-anchor" href="#对象的解构赋值"></a>对象的解构赋值</h3>
<p>对象的解构赋值是按成员名字匹配的:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">    <span class="attr">passport</span>: <span class="string">&#x27;G-12345678&#x27;</span>,</span><br><span class="line">    <span class="attr">school</span>: <span class="string">&#x27;No.4 middle school&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> &#123;name, age, passport&#125; = person;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">    <span class="attr">passport</span>: <span class="string">&#x27;G-12345678&#x27;</span>,</span><br><span class="line">    <span class="attr">school</span>: <span class="string">&#x27;No.4 middle school&#x27;</span>,</span><br><span class="line">    <span class="attr">address</span>: &#123;</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;Beijing&#x27;</span>,</span><br><span class="line">        <span class="attr">street</span>: <span class="string">&#x27;No.1 Road&#x27;</span>,</span><br><span class="line">        <span class="attr">zipcode</span>: <span class="string">&#x27;100001&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> &#123;name, <span class="attr">address</span>: &#123;city, zip&#125;&#125; = person;</span><br><span class="line">name; <span class="comment">// &#x27;小明&#x27;</span></span><br><span class="line">city; <span class="comment">// &#x27;Beijing&#x27;</span></span><br><span class="line">zip; <span class="comment">// undefined, 因为属性名是zipcode而不是zip</span></span><br><span class="line"><span class="comment">// 注意: address不是变量，而是为了让city和zip获得嵌套的address对象的属性:</span></span><br><span class="line">address; <span class="comment">// Uncaught ReferenceError: address is not defined</span></span><br></pre></td></tr></table></figure>
<ul>
<li>变量名<code>zip</code>不匹配对象的<code>address</code>属性的<code>zipcode</code>, 所以是<code>undefined</code></li>
<li><code>address</code>没有被赋值为变量</li>
</ul>
<p>如果要使用的变量名和属性名不一致，可以用下面的语法获取：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    name: &#x27;小明&#x27;,</span><br><span class="line">    age: 20,</span><br><span class="line">    gender: &#x27;male&#x27;,</span><br><span class="line">    passport: &#x27;G-12345678&#x27;,</span><br><span class="line">    school: &#x27;No.4 middle school&#x27;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 把passport属性赋值给变量id:</span><br><span class="line">let &#123;name, passport:id&#125; = person;</span><br><span class="line">name; // &#x27;小明&#x27;</span><br><span class="line">id; // &#x27;G-12345678&#x27;</span><br><span class="line">// 注意: passport不是变量，而是为了让变量id获得passport属性:</span><br><span class="line">passport; // Uncaught ReferenceError: passport is not defined</span><br></pre></td></tr></table></figure>
<p>解构赋值还可以使用默认值，这样就避免了不存在的属性返回<code>undefined</code>的问题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">    <span class="attr">passport</span>: <span class="string">&#x27;G-12345678&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果person对象没有single属性，默认赋值为true:</span></span><br><span class="line"><span class="keyword">var</span> &#123;name, single=<span class="literal">true</span>&#125; = person;</span><br><span class="line">name; <span class="comment">// &#x27;小明&#x27;</span></span><br><span class="line">single; <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>有些时候，如果变量已经被声明了，再次赋值的时候，正确的写法也会报语法错误：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明变量:</span></span><br><span class="line"><span class="keyword">let</span> x, y;</span><br><span class="line"><span class="comment">// 解构赋值:</span></span><br><span class="line">&#123;x, y&#125; = &#123; <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">200</span>&#125;;</span><br><span class="line"><span class="comment">// 语法错误: Uncaught SyntaxError: Unexpected token =</span></span><br></pre></td></tr></table></figure>
<p>这是因为JavaScript引擎把<code>&#123;</code>开头的语句当作了块处理，于是<code>=</code>不再合法。解决方法是用小括号括起来：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(&#123;x, y&#125; = &#123; <span class="attr">name</span>: <span class="string">&#x27;小明&#x27;</span>, <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">200</span>&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="应用"><a class="header-anchor" href="#应用"></a>应用</h3>
<p>假设<code>props</code>为:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">props = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Arto Hellas&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">35</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>React中:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Hello</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, age &#125; = props</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">bornYear</span> = (<span class="params"></span>) =&gt; <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getFullYear</span>() - age</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello &#123;name&#125;, you are &#123;age&#125; years old<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>So you were probably born in &#123;bornYear()&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以更加简化, 在形参中写解构赋值:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Hello</span> = (<span class="params">&#123; name, age &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="object-spread-syntax"><a class="header-anchor" href="#object-spread-syntax"></a>object spread syntax</h2>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">ref</a></p>
<p><strong>Spread syntax</strong> (<code>...</code>) allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected. In an object literal, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(...numbers));</span><br><span class="line"><span class="comment">// expected output: 6</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum.<span class="title function_">apply</span>(<span class="literal">null</span>, numbers));</span><br><span class="line"><span class="comment">// expected output: 6</span></span><br></pre></td></tr></table></figure>
<h3 id="应用-2"><a class="header-anchor" href="#应用-2"></a>应用</h3>
<p>在React中, <code>useState()</code>可以和解构赋值结合:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [clicks, setClicks] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">right</span>: <span class="number">0</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleLeftClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> newClicks = &#123; </span><br><span class="line">      <span class="attr">left</span>: clicks.<span class="property">left</span> + <span class="number">1</span>, </span><br><span class="line">      <span class="attr">right</span>: clicks.<span class="property">right</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setClicks</span>(newClicks)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleRightClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> newClicks = &#123; </span><br><span class="line">      <span class="attr">left</span>: clicks.<span class="property">left</span>, </span><br><span class="line">      <span class="attr">right</span>: clicks.<span class="property">right</span> + <span class="number">1</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setClicks</span>(newClicks)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;clicks.left&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleLeftClick&#125;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleRightClick&#125;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;clicks.right&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意到, 状态<code>clicks</code>有两部分: <code>clicks.left</code>, <code>clicks.right</code>. 每次更新其中一部分时, 还要写另一部分:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleLeftClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> newClicks = &#123; </span><br><span class="line">    <span class="attr">left</span>: clicks.<span class="property">left</span> + <span class="number">1</span>, </span><br><span class="line">    <span class="attr">right</span>: clicks.<span class="property">right</span> <span class="comment">// clicks.right没有改变, 但setter里还是要写</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">setClicks</span>(newClicks)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//handleRightClick同理</span></span><br></pre></td></tr></table></figure>
<p>这样很冗余,可以用object spread syntax来简化:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">handleLeftClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> newClicks = &#123; </span><br><span class="line">    ...clicks, </span><br><span class="line">    <span class="attr">left</span>: clicks.<span class="property">left</span> + <span class="number">1</span> </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">setClicks</span>(newClicks)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleRightClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> newClicks = &#123; </span><br><span class="line">    ...clicks, </span><br><span class="line">    <span class="attr">right</span>: clicks.<span class="property">right</span> + <span class="number">1</span> </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">setClicks</span>(newClicks)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的<code>...clicks</code>实际上被展开为:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以handleLeftClick内为例</span></span><br><span class="line"><span class="keyword">const</span> newClicks = &#123; </span><br><span class="line">    <span class="comment">//...clicks 被展开为:</span></span><br><span class="line">    <span class="attr">left</span>: xx</span><br><span class="line">    <span class="attr">right</span>: xx</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里重新声明了right属性,也就覆盖了前面的right</span></span><br><span class="line">    <span class="attr">left</span>: clicks.<span class="property">left</span> + <span class="number">1</span> </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>由于JS对象支持重复声明属性, 并且后面的属性会覆盖前面同名的属性, 这样做实际上就保留了<code>left</code>属性, 只更改<code>right</code>属性</p>
]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>L1 Model of Computation</title>
    <url>/2021/07/13/L1-Model-of-Computation/</url>
    <content><![CDATA[<p><i>There is no whiz, bang effect</i></p>
<p><i>That's made up of 1s and 0s</i></p>
<p><i>That takes a special talent</i></p>
<span id="more"></span>
<h1 id="Computer-and-Computing"><a class="header-anchor" href="#Computer-and-Computing"></a>Computer and Computing</h1>
<ul>
<li>Computing: 计算机“无所不能”的核心在于<code>01编解码</code>,这是<u>使能技术</u>
<ul>
<li>Encoding everything into <code>0</code>s and <code>1</code>s</li>
<li>Operations over <code>1</code>s and <code>0</code>s</li>
<li>Decoding the <code>1</code>s and <code>0</code> s</li>
</ul>
</li>
<li>Turing machine
<ul>
<li>An abstract/logical computer</li>
</ul>
</li>
<li>&quot;<strong>计算</strong>&quot;就是对<code>01编码</code>的信息的操作</li>
</ul>
<h1 id="Algorithm"><a class="header-anchor" href="#Algorithm"></a>Algorithm</h1>
<ul>
<li>
<p>Algorithm is the spirit of computing</p>
<ul>
<li>To solve a specific problem( so called an <code>algorithmic problem</code> )</li>
<li>Combination of basic operations 指挥一个机器做事情,把机器的操作组合好
<ul>
<li>in a precise and elegant way 要清晰,优美</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Essential issues</p>
<ul>
<li>
<p>Model of computation</p>
</li>
<li>
<p>Algorithm design</p>
</li>
<li>
<p>Algorithm analysis</p>
</li>
</ul>
</li>
</ul>
<h1 id="Model-of-Computation"><a class="header-anchor" href="#Model-of-Computation"></a>Model of Computation</h1>
<ul>
<li>Problems
<ul>
<li>Why the algorithms we learn can run  almost everywhere?</li>
<li>Why the algorithms we learn can be implemented any language?</li>
</ul>
</li>
<li>Machine- and language- independent algorithms, running on an <strong>abstract</strong> machine   算法是抽象概念,与机器\语言无关. 抽象的算法依赖于抽象的机器,这就是<strong>计算模型</strong>. 经典计算模型:
<ul>
<li>Turing machine: over-qualify</li>
<li>RAM model: simple but power</li>
</ul>
</li>
</ul>
<h2 id="The-Ram-Model-of-Computation"><a class="header-anchor" href="#The-Ram-Model-of-Computation"></a>The Ram Model of Computation</h2>
<ul>
<li>Each <i>simple operation</i> takes one time step</li>
<li>E.g., key comparison, +/-, memory access</li>
<li>Non_simple operation should be decomposed
<ul>
<li>Loop</li>
<li>Subroutine(子过程还可以递归 )</li>
</ul>
</li>
<li>Memory
<ul>
<li>Memory access is a simple operation 对存储器某个位置的访问和读写被认为是简单操作</li>
<li>Unlimited memory 我们认为RAM的内存是无限的</li>
</ul>
</li>
<li>由于建模的本质是把不重要的细节抽象掉,把精髓留下来. 所以模型建得越精细,就越难用, 建得越粗糙,丢失的信息越多,就越好用,二者有一个Trade-off. 对于本科阶段,Ram模型够用了</li>
</ul>
<h1 id="To-Create-an-Algorithm"><a class="header-anchor" href="#To-Create-an-Algorithm"></a>To Create an Algorithm</h1>
<ul>
<li>Algorithm design
<ul>
<li>Composition of simple operations, to solve an algorithm problems</li>
</ul>
</li>
<li>Algorithm analysis
<ul>
<li>Amount of work done / memory used
<ul>
<li>In the worst/ average cases</li>
</ul>
</li>
<li>Advanced issues
<ul>
<li>Optimality, approximation ratio, ...</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="Algorithm-Analysis"><a class="header-anchor" href="#Algorithm-Analysis"></a>Algorithm Analysis</h1>
<ul>
<li>
<p>How to measure</p>
<ul>
<li>
<p>Not too general 不能太粗糙</p>
<ul>
<li>Given essential indication in comparison  of algorithms</li>
</ul>
</li>
<li>
<p>Not too precise 不用那么精确</p>
<ul>
<li>Machine independent</li>
<li>Language independent</li>
<li>Programing paradigm independent</li>
<li>implementation independent</li>
</ul>
</li>
<li>
<p>Criteria</p>
</li>
<li>
<p>Critical operation</p>
</li>
<li>
<p>How many critical operation are conducted 数关键操作个数!</p>
</li>
<li>
<p>算法性能好坏由关键操作决定,辅助性操作与关键操作大致是线性关系. 所以只要关注关键操作</p>
</li>
</ul>
</li>
<li>
<table>
<thead>
<tr>
<th>Algorithm problem</th>
<th>Critical operation</th>
</tr>
</thead>
<tbody>
<tr>
<td>Sorting, selection, searching, String matching</td>
<td>Comparison(of keys)</td>
</tr>
<tr>
<td>Graph traversal</td>
<td>Processing a node</td>
</tr>
<tr>
<td>Matrix multiplication</td>
<td>Multiplication</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>Amount of work done</p>
<ul>
<li>usually depends on <i>size of the input</i> 输入规模</li>
<li>usually does not depends on size of the input only</li>
</ul>
</li>
<li>
<p>Worst -case  Complexity</p>
</li>
<li>
<p>Average-case Complexity</p>
</li>
<li>
<p>Advanced topics</p>
<ul>
<li>Lower bound(Selection)</li>
<li>Optionality(Greedy , DP)</li>
<li>Computation complexity</li>
<li>Approximate/ online / randomized algothms</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>L13 Undirected Graph</title>
    <url>/2021/08/23/L13-Undirected-Graph/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>
<p><strong>UAG的DFS树</strong></p>
</li>
<li>
<p><strong>UAG的DFS框架</strong></p>
</li>
<li>
<p><strong>UAG的DFS应用</strong></p>
<ul>
<li>
<p><strong>容错连通</strong></p>
<ul>
<li>
<p><strong>寻找割点</strong></p>
</li>
<li>
<p><strong>寻找桥</strong></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="UAG的DFS树"><a class="header-anchor" href="#UAG的DFS树"></a>UAG的DFS树</h1>
<p>UAG的遍历的主要差别就在于剔除二次遍历</p>
<ul>
<li>
<p>TE：当发现一个白色节点并递归地进行遍历时， 就将其连接的边标记为TE。 遍历过程中的TE组成遍历树， 这与DAG是类似的。 对于原本无向的边， 遍历过程为它做了定向( orientation ), 即遍历推进的方向。</p>
</li>
<li>
<p>BE： 当遍历节点$u$并发现一条边指向灰色节点$v$时, 此时有两种本质不同的情况:</p>
<p>若$vu$是TE, 则这是一次二次遍历,因而标识并剔除这一类型的遍历.</p>
<p>若$v$是$u$的某个不是父节点的祖先节点, 则将$uv$标记为BE</p>
</li>
<li>
<p>DE: 当遍历节点$u$​时, 发现一条边指向节点$v$​​时, 且$v$​是$u$​​在遍历树中的后继节点, 此时边$uv$为DE, 但这次遍历必然是二次遍历,应该被剔除. 这是因为根据DE的定义, 此时$v$不能是白色( 否则$uv$是TE ), 不能是灰色(可能是二次遍历的BE ), 因而只能是黑色, 即$v$已经结束了遍历, 它结束遍历前必然已经完成了边$vu$的遍历, 且根据$u$,$v$间的祖先后继关系, 边$vu$首次被遍历时标记为BE(可能是二次遍历的BE).</p>
</li>
<li>
<p>CE: 不存在. 因为当遍历节点$u$时,发现一条边指向节点$v$. 根据CE的定义, $u$, $v$间没有祖先后继关系,所以与上面分析类似, 节点$v$只能是黑色, 它已经完成了遍历. 所以点$v$在结束遍历前必然已经访问过边$vu$. 当从$v$出发遍历$vu$时, $u$尚未被遍历, 为白色. 所以$vu$为TE, 这和$u$, $v$间没有祖先后继关系相矛盾.</p>
</li>
</ul>
<h1 id="UAG的DFS框架"><a class="header-anchor" href="#UAG的DFS框架"></a>UAG的DFS框架</h1>
<p>对于TE的处理于DAG一致, 此外还要处理BE的情况. 根据对BE的讨论,我们必须去除指向父结点的BE. 为此, 我们记录了每个节点的父节点.</p>
<p>算法框架直接将上述两种情况外的其他情况忽略, 因为其他情况都是二次遍历, <u>不需要处理</u>. 一个邻居节点只可能有3种情况:</p>
<ul>
<li>白色: 即TE</li>
<li>灰色:
<ul>
<li>灰色且不是父结点: 需要额外处理</li>
<li>灰色且是父结点: 二次遍历</li>
</ul>
</li>
<li>黑色:
<ul>
<li>DE: 二次遍历</li>
<li>CE: 二次遍历</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">DFS_UG</span>(v, parent):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v.color := GRAY;</span><br><span class="line">&lt;Preorder processing of node v&gt;;</span><br><span class="line">foreach neighbour w of v <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">if</span> w.color = WHITE then</span><br><span class="line">		&lt;Exploratory processing of TE vw&gt;;</span><br><span class="line">		<span class="built_in">DFS_UG</span>(w,v);</span><br><span class="line">		&lt;Backtrack processing <span class="keyword">for</span> TE vw&gt;;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">if</span> w.color = GRAY <span class="keyword">and</span> w != parent then</span><br><span class="line">			&lt;Check BE vw&gt;;</span><br><span class="line">&lt;Postorder processing of node v&gt;;</span><br><span class="line">v.color := BLack;</span><br></pre></td></tr></table></figure>
<h1 id="UAG的DFS应用"><a class="header-anchor" href="#UAG的DFS应用"></a>UAG的DFS应用</h1>
<h2 id="容错连通"><a class="header-anchor" href="#容错连通"></a>容错连通</h2>
<ul>
<li><strong>定义4.7</strong> 对于连通的无向图$G$, 如果其中任意去掉$k-1$个点, 图$G$仍然连通, 则称图$G$是$k$-点连通的. 类似的, 如果图中任意去掉$k-1$条边, 图$G$仍然连通, 则称图$G$是$k$-边连通的.</li>
</ul>
<p>已知,当$k=1$时, $k$​-连通就退化为传统的无环连通. 另外, 我们更关注$k=2$​​的 特殊情况, 即去掉某个点或某条边后,剩下的图不再连通. 由此引入割点( articulation point )和桥( bridge )的概念.</p>
<ul>
<li><strong>定义4.8</strong> 对于连通的无向图$G$​, 称节点$v$​为割点, 如果去掉点$v$​后, 图$G$​不再连通; 称边$uv$​为桥, 如果去掉边$uv$​后, 图$G$​​不再连通.</li>
</ul>
<h3 id="寻找割点"><a class="header-anchor" href="#寻找割点"></a>寻找割点</h3>
<p>Brute Force: 遍历每个顶点, 检查剩下的图是否连通, 代价为$O(n(m+n))$, 这一方法源于割点的定义. 为了将代价改进到线性时间, 需要将割点的定义做等价变换.以支持更高效的找割点的算法.</p>
<p>割点的定义依赖一个<strong>全局</strong>的性质( 整个图是否连通 ), 这一性质难以高效地进行检测. 为此我们首先将割点的定义等价地变化为一个<strong>局部</strong>的性质, 利用部分节点之间的关系来完成割点的检测.</p>
<ul>
<li>
<p><strong>引理4.7</strong> ( 割点基于路径的定义 )	节点$v$为割点, 当且仅当存在节点对$w$和$x$满足节点$v$出现在$w$到$x$的每一条路径上.</p>
<p>证明略.</p>
</li>
<li>
<p><strong>引理4.8</strong> ( 割点基于DFS的定义 )	假设在一次DFS中, 节点$v$不是遍历树的根节点. 则节点$v$​为割点, 当且仅当在遍历树中, 存在节点$v$的某棵子树, 没有任何BE指向$v$的祖先节点.</p>
<p>证明:</p>
<p>必要性:	易证若节点$v$​的某棵子树,没有任何BE指向$v$​​的祖先节点, 则删掉$v$​后, 该子树将于图的其他部分断连, 所以$v$​是割点.</p>
<p>充分性: 假设节点$v$为割点, 则根据引理4.7, 存在不同于$v$的两个节点$x$和$y$满足$v$出现在$x$到$y$的每一条路径上. 首先我们发现节点$x$和$y$中至少有一个是节点$v$在遍历树中的后继节点( 可通过反证法证明.  ). 所以必有某个点在遍历树中的后继节点, 而$v$必然不是叶节点. 同样可用反证法证明, 若$v$的任意子树均有BE指向$v$的祖先节点, 此时无论$x$和$y$哪一个是$v$的后继节点( 或者都是 ), 均可构造一条从$x$到$y$的不经过$v$的路径, 这和$v$出现在$x$到$y$的每一条路径上相矛盾.</p>
<p>证毕.</p>
</li>
<li>
<p>根据引理4.8, 可以用算法操作来发现割点: 为每个节点维护一个变量<code>back</code>来判定它是否为割点:</p>
<ul>
<li>
<p>当$v$首次被发现时:<br>
$$<br>
v.back = v.discoverTime<br>
$$</p>
</li>
<li>
<p>遍历过程中遇到一条从节点$v$指向节点$w$的BE:<br>
$$<br>
v.back=min{v.back, w.discoverTime}<br>
$$</p>
</li>
<li>
<p>遍历节点$w$结束, 从$w$回退到$v$时:<br>
$$<br>
v.back=min{v.back,w.back}<br>
$$</p>
</li>
</ul>
<p>注意, $v.back$初始值为$v.discoverTime$, 且$v.back$的值只会减少. 其减少有两种情况:</p>
<ul>
<li>遍历过程遇到一条BE, 记为边$vw$. 处理完BE并回退时, $v.back$被减少为$w.discoverTime$. 由于BE指向的节点$w$是祖先节点, 所以$w.discoverTime$更小,这一更新使得$v.back$​的值减少.</li>
<li>处理完TE$vw$回退时, 如果节点$w$​的<code>back</code>值有更新( 只可能减少 ), 这一更新随着回退被传递到回退的节点.</li>
</ul>
</li>
<li>
<p>当从TE $vw$回退时, 如果$w.back \geq v.discoverTime$, 则节点$v$​​是割点.</p>
<ul>
<li>
<p><strong>定理4.5</strong>	ARTICULATION-POINT-DFS算法是正确的.</p>
<p>证明:</p>
<p>根据引理4.8, 要证明算法正确性, 只需证明当从TE $vw$回退时, 如果$w.back \geq v.discoverTime$, 则以$w$为根的某棵子树没有任何BE指向$v$的祖先节点. 根据<code>back</code>值的更新方法, 如果以$w$为根的某棵子树存在BE指向$v$的祖先, 则$v$的祖先的$discoverTime$会被赋值给$w$为根的子树中某个节点的<code>back</code>值, 	且随着遍历的回退过程, 这一$discoverTime$会以<code>back</code>遍历的方式传递给$w.back$. 由于祖先节点具有更小的$discoverTime$, 所以如果这样的一条BE存在, 则$w.back$一定小于$v.discoverTime$, 反之则说明这样的BE不存在.</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ARTICULATION-POINT-<span class="built_in">DFS</span>(v):</span><br><span class="line"></span><br><span class="line">v.color := GRAY;</span><br><span class="line">time := time + <span class="number">1</span>;</span><br><span class="line">v.discoverTime := time;</span><br><span class="line">v.back := discoverTime;</span><br><span class="line">foreach neighbour w of v <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> w.color = WHITE then</span><br><span class="line">        w.back	:=  ARTICULATION-POINT-<span class="built_in">DFS</span>(w);</span><br><span class="line">		<span class="keyword">if</span> w.back &gt;= v.discoverTime then</span><br><span class="line">            Output v as an articulation point;</span><br><span class="line">		v.back = &#123;v.back, w.back&#125;;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> vw is BE then</span><br><span class="line">            v.back = min&#123; v.back, w.discoverTime &#125;;</span><br><span class="line"><span class="keyword">return</span> back;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="寻找桥"><a class="header-anchor" href="#寻找桥"></a>寻找桥</h3>
<p>基于UAG的DFS中,只会出现TE和BE, 对于BE, 删去它后图依然是连通的( 易证 ), 因此只需关注TE.</p>
<ul>
<li>
<p><strong>引理4.9</strong> ( 桥基于DFS的定义 )	给定遍历树中的TE $uv$ ( $u$是$v$的父结点 ), $uv$是桥 当且仅当在以$v$为根的所有遍历树的子树中, 没有BE指向$v$​​的祖先节点( 不包括$v$, 包括$u$).</p>
</li>
<li>
<p>$v.back$维护方式为:</p>
<ul>
<li>
<p>当$v$首次被发现时:<br>
$$<br>
v.back = v.discoverTime<br>
$$</p>
</li>
<li>
<p>当遍历BE $vw$时,<br>
$$<br>
v.back = min{v.back,w.back}<br>
$$</p>
</li>
<li>
<p>当遍历节点$w$结束, 回退到$v$时, $v.back = min{v.back,w.back}$</p>
</li>
</ul>
</li>
<li>
<p><strong>定理4.6</strong>	BRIDGE-DFS算法是正确的.</p>
<p>证明略</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">BRIDGE-<span class="built_in">DFS</span>(u):</span><br><span class="line"></span><br><span class="line">v.color := GRAY;</span><br><span class="line">time := time + <span class="number">1</span>;</span><br><span class="line">v.discoverTime := time;</span><br><span class="line">v.back := discoverTime;</span><br><span class="line">foreach neighbour w of v <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> w.color = WHITE then</span><br><span class="line">    	v.back := min&#123; u.back, v.back &#125;;</span><br><span class="line">    	<span class="keyword">if</span> v.back &gt; u.discoverTime then</span><br><span class="line">    		Output uv as a bridge;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">if</span> uv is BE then</span><br><span class="line">			u.back := min&#123;u.back, v.discoverTime&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>L12 DAG</title>
    <url>/2021/08/04/L12-DAG/</url>
    <content><![CDATA[<p>Outline ：</p>
<ul>
<li><strong>Directed Acyclic Graph</strong>
<ul>
<li><strong>Topological order</strong></li>
<li><strong>Critical path analysis</strong></li>
</ul>
</li>
<li><strong>Strongly Connected Component（SCC）</strong>
<ul>
<li><strong>Strongly connected component and condensation</strong></li>
<li><strong>The algorithm</strong></li>
<li><strong>Leader of string connected component</strong></li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="Directed-Acyclic-Graph"><a class="header-anchor" href="#Directed-Acyclic-Graph"></a>Directed Acyclic Graph</h1>
<h2 id="Topological-order-for-G-V-E"><a class="header-anchor" href="#Topological-order-for-G-V-E"></a>Topological order for G=(V,E)</h2>
<ul>
<li>
<p><strong>Topological number</strong></p>
<ul>
<li>An assignment of distinct integer $1,2,..., n$ to the vertices of $V$</li>
<li>For every $vw \in E$​, the topological number of <em>v</em> is less than that of <em>w</em>.</li>
</ul>
</li>
<li>
<p><strong>Reverse topological order</strong></p>
<ul>
<li>
<p>Defined similarly</p>
<p>(&quot;greater than&quot;)</p>
</li>
</ul>
</li>
<li>
<p>引理： 如果$G=（V，E ）$为有向无环图，则G中必然存在拓扑排序</p>
</li>
</ul>
<h3 id="拓扑排序算法"><a class="header-anchor" href="#拓扑排序算法"></a>拓扑排序算法</h3>
<ul>
<li>
<p>在某个集合$A$ 上的关系$R$如果是自反的、反对称的和传递的，那么$R$是一个<strong>偏序</strong></p>
</li>
<li>
<p>偏序集的有向图中没有长度大于一的环</p>
</li>
<li>
<p>拓扑序要求<strong>全序且无环</strong></p>
</li>
<li>
<p>如果有向图$G=(V,E)$有环，则 $G$不存在拓扑排序</p>
</li>
<li>
<p>如果有向图$G=(V,E)$无环，则 $G$必定存在拓扑排序</p>
</li>
<li>
<p>“尽头”与DFS</p>
<ul>
<li>
<p>DFS就是沿某条路径一直往下走，直到某个“<strong>尽头</strong>”节点。</p>
</li>
<li>
<p>假设 $i \rarr j$ 表示任务$i$的执行依赖任务 $j$ 的完成，则尽头节点不依赖其他任何节点，因而对它的拓扑序号的分配从依赖关系的角度看是自由的。该分配方式不会影响其他节点的执行。 比如，对于逆拓扑序而言，只要分配当前尚未分配的最小序号。</p>
</li>
</ul>
</li>
<li>
<p>逻辑尽头</p>
<ul>
<li>当一个节点的所有后续节点均已处理完毕时， 该节点就成为逻辑上的<strong>尽头</strong>节点。
<ul>
<li>逆拓扑排序时, 逻辑尽头节点的逆拓扑序号只需要分配当前未分配序号中最小的</li>
</ul>
</li>
<li>分配拓扑序号的过程就成为不断找到逻辑结点的过程,这与DFS适合
<ul>
<li>在DFS-WRAPPER中,开始遍历之前定义一个全局变量<code>globalNum</code>, 并初始化为 <code>n+1</code></li>
<li>在DFS框架的&quot;遍历后处理&quot;处,嵌入对拓扑排序的处理:
<ul>
<li><code>globalNum := </code>globalNum` -1;</li>
<li><code>v.topoNum</code> := <code>globalNum</code>;</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">TOPO-<span class="built_in">WRAPPER</span>(G)</span><br><span class="line"></span><br><span class="line">globalNum = n+<span class="number">1</span>;</span><br><span class="line">Color all nodes WHITE;</span><br><span class="line">foreach node v in G <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">if</span> v.color = WHITE then</span><br><span class="line">		TOPO-<span class="built_in">ORDER</span>(v);</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">TOPO-<span class="built_in">ORDER</span>(v)</span><br><span class="line"></span><br><span class="line">v.color = GRAY;</span><br><span class="line">foreach neighbour w of v <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">if</span> w.color = WHITE then</span><br><span class="line">		TOPO-<span class="built_in">ORDER</span>(w);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">globalNUM := globalNum - <span class="number">1</span>;</span><br><span class="line">v.topoNum := globalNum;</span><br><span class="line">v.color = BLACK;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>判断能否形成拓扑序，除了判断全序之外，就是判断有没有环。 而判断<strong>成环等价于遍历过程中遇到了灰色节点</strong></p>
</li>
</ul>
<h2 id="Critical-path-analysis"><a class="header-anchor" href="#Critical-path-analysis"></a>Critical path analysis</h2>
<h3 id="Critical-path-in-a-Task-Graph"><a class="header-anchor" href="#Critical-path-in-a-Task-Graph"></a>Critical path  in a  Task Graph</h3>
<ul>
<li>
<p><strong>Earliest start time</strong>( <em>est</em> ) for a task <em>v</em></p>
<ul>
<li>
<p>If <em>v</em> has no dependencies, the <em>est</em> is 0</p>
</li>
<li>
<p>If <em>v</em> has dependencies, the <em>est</em> is the maximum of the <strong>earliest finish time</strong> of its dependencies.</p>
</li>
</ul>
</li>
<li>
<p><strong>Earliest finish time</strong>( left ) for a task <em>v</em></p>
<ul>
<li>For any task: <em>eft = est + duration</em></li>
</ul>
</li>
<li>
<p><strong>Critical path</strong> in a project is a sequence of tasks: $v_0, v_1,\dots,v_k$, satisfying:</p>
<ul>
<li>$v_0$ has no dependencies;</li>
<li>For any $v_i$ ( i = 1,2,...,k), $v_{i-1}$ is a dependency of $v_i$, such that <em>est</em> of $v_i$ equals <em>eft</em> of $v_{i-1}$;</li>
<li><em>eft</em> of $v_k$​​ is maximum for all tasks in the project.</li>
</ul>
</li>
<li>
<p>在DFS框架中嵌入相应处理</p>
<ul>
<li>
<p>在&quot;遍历前处理&quot;处, 初始化该节点的最早开始时间, 并初始化关键路径相关信息</p>
</li>
<li>
<p>在结束邻接节点的处理返回的时候,检查是否要更新当前节点目前已知的最早开始时间.以及是否需要更新关键路径的相关信息</p>
</li>
<li>
<p>在&quot;遍历后处理&quot;处, 当前节点的<em>est</em>已确定, 则可以计算出当前节点的<em>eft</em></p>
</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">CRITICAL-<span class="built_in">PATH</span>(v) <span class="comment">//该算法同样需要WRAPPER来调度</span></span><br><span class="line">				 <span class="comment">//逻辑尽头的est和est在其逻辑的关键路径中最小</span></span><br><span class="line"></span><br><span class="line">v.color := GRAY</span><br><span class="line">c.est := <span class="number">0</span>; v.CritDep := <span class="number">-1</span>;</span><br><span class="line">foreach neighbour w of v <span class="keyword">do</span></span><br><span class="line">	<span class="keyword">if</span> w.color = WHITE then</span><br><span class="line">		CRITICAL-<span class="built_in">PATH</span>(w);</span><br><span class="line">	<span class="keyword">if</span> w.eft &gt;= v.est then</span><br><span class="line">			v.est = w.eft <span class="comment">//求efs的最大值</span></span><br><span class="line">			v.CritDep := w;</span><br><span class="line">			</span><br><span class="line">v.eft := v.est + v.l;</span><br><span class="line">v.color := BLACK;</span><br></pre></td></tr></table></figure>
<h3 id="Analysis"><a class="header-anchor" href="#Analysis"></a>Analysis</h3>
<ul>
<li>Complexity
<ul>
<li>$\Theta(n+m)$</li>
</ul>
</li>
</ul>
<h1 id="Strongly-Connected-Component（SCC）"><a class="header-anchor" href="#Strongly-Connected-Component（SCC）"></a>Strongly Connected Component（SCC）</h1>
<h2 id="Strongly-connected-component-and-condensation"><a class="header-anchor" href="#Strongly-connected-component-and-condensation"></a>Strongly connected component and condensation</h2>
<ul>
<li>
<p>Strongly connected: 一个有向图中的节点是强连通的, 如果它们互相可达</p>
</li>
<li>
<p>condensation Graph: 把G中的每个强连通片收缩成一个点, <strong>强连通片之间</strong>的边收缩成一条有向边,则得到G的收缩图$G\darr$</p>
<ul>
<li>
<p>两个强连通片之间只能是<strong>单向</strong>可达(或者不可达)</p>
</li>
<li>
<p>condensation Graph是<strong>DAG</strong></p>
</li>
</ul>
</li>
</ul>
<h2 id="The-algorithm"><a class="header-anchor" href="#The-algorithm"></a>The algorithm</h2>
<h2 id="Leader-of-strong-connected-component"><a class="header-anchor" href="#Leader-of-strong-connected-component"></a>Leader of strong connected component</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SCC(G)</span><br><span class="line"></span><br><span class="line">Initiate the empty stack nodeStack;</span><br><span class="line"></span><br><span class="line">Perform DFS on G. In the postorder processing of each vertex v, insert the statement &quot;nodeStack.push(v)&quot;; //第一轮DFS,标记尽头,并通过栈完成排序</span><br><span class="line"></span><br><span class="line">Compute the transpose grapg Gt of G;</span><br><span class="line"></span><br><span class="line">Color all nodes WHITE;</span><br><span class="line"></span><br><span class="line">while nodeStack != empty do</span><br><span class="line">	v := nodeStack.pop();</span><br><span class="line">	Conduct DFS from v on Gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>Def:</p>
<p>For a DFS, the first vertex discovered in a strong component $S_i$​​ is called the <strong>leader</strong> of $S_i$​​, 记为$l_i$​</p>
</li>
<li>
<p>推论：</p>
<p>The leader of $S_i$ is the last vertex to finish among all vertices of $S_i$ ( <strong>since all of them in the same DFS tree</strong> )( 即: 首节点的活动区间包含同一个强连通片中所有其他节点的活动区间 )</p>
</li>
<li>
<p>引理：</p>
<ol>
<li>
<p>Each DFS tree of a digraph G contains <strong>only complete</strong> strong components of G, one or more.(即: 不可能一个强连通片中的节点一部分在某棵遍历树中,一部分不在)</p>
</li>
<li>
<p>$l_i$​在第一轮遍历中被发现时(刚刚被处理,即将被染成灰色时), 不可能有路径通向某个灰色节点</p>
<ul>
<li>
<p>Proof:</p>
<p>反证法: 设$S_i$的首节点$l_i$刚被发现时, 有一条路径通向某个灰色节点<em>x</em>. 由于$l_i$是首节点, 所以<em>x</em>必然处于图的另一个强连通片$S_j$中(而不可能在$S_i$中). 所以存在一条 $ S_i$到$S_j$的路径. 由于在$l_i$刚被发现时,节点<em>x</em>为灰色, 所以<em>x</em>为$l_i$在DFS Tree中的祖先节点. 于是存在一条 $ S_j$到$S_i$的路径,所以$ S_i$和$S_j$​是强连通的, 矛盾.</p>
</li>
</ul>
</li>
<li>
<p><em>x</em>(若有的话), 比$l_i$​先结束遍历, 即: <em>x.finishTime &lt; l.finishTime</em></p>
<ul>
<li><em>x</em>只能为白色或黑色</li>
</ul>
</li>
<li>
<p>在第二轮DFS中，当一个白色节点从栈中被POP出来时，它一定是其所在强连通片的首节点</p>
<ul>
<li>
<p>Proof</p>
<p>第二轮DFS时，一个出栈的节点$l$​为白色， 则它必然是其所在强连通片$S_i$​的第一个出栈节点（ 否则就会在$S_i$​​的其它先出栈的节点进行第二轮DFS时被染成灰色 ）。 而在第一轮DFS时，最后一个入栈的节点就是最后结束的节点。 而首节点$l_i$​的活动区间包含其他节点的活动区间， 因而必然是最后结束的节点。 所以$l$必然是$l_i$</p>
</li>
</ul>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>L17&amp;L18 DP</title>
    <url>/2021/08/12/L17-L18-DP/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li><strong>Basic Idea of Dynamic Programming(DP)</strong>
<ul>
<li>Smart scheduling of subproblems</li>
</ul>
</li>
<li><strong>Minimum Cost Matrix Multiplication</strong>
<ul>
<li>BF1, BF2</li>
<li>A DP solution</li>
</ul>
</li>
<li><strong>Weighted Binary Search Tree</strong>
<ul>
<li>The &quot;same&quot; DP with matrix multiplication</li>
</ul>
</li>
<li><strong>From the DP perspective</strong>
<ul>
<li>All-pairs shortest paths SSSP over DAG</li>
</ul>
</li>
<li><strong>More DP problems</strong>
<ul>
<li>Edit distance</li>
<li>Highway restaurants; Separating Sequence of words</li>
<li>Changing coins</li>
</ul>
</li>
<li><strong>Elements of DP</strong></li>
</ul>
<span id="more"></span>
<h1 id="Basic-Idea-of-DP"><a class="header-anchor" href="#Basic-Idea-of-DP"></a>Basic Idea of DP</h1>
<ul>
<li>Smart recursion
<ul>
<li>Compute each subproblem <strong>only once</strong></li>
</ul>
</li>
<li>Basic process of a &quot;smart&quot; recursion
<ul>
<li>Find a reverse topological order for the subproblem graph
<ul>
<li>In most cases, the order can be determined <strong>by partial knowledge</strong> of the problem.</li>
<li>General method based on DFS is available.</li>
</ul>
</li>
<li>Scheduling the subproblems according to the reverse topological order</li>
<li>Record the subproblem solutions in a dictionary.</li>
</ul>
</li>
</ul>
<h1 id="Minimum-Cost-Matrix-Multiplication"><a class="header-anchor" href="#Minimum-Cost-Matrix-Multiplication"></a>Minimum Cost Matrix Multiplication</h1>
<h2 id="BF1"><a class="header-anchor" href="#BF1"></a>BF1</h2>
<ul>
<li>总是在某个位置开始第一次乘法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mmTry1</span>(dim,len,seq)</span><br><span class="line">    <span class="keyword">if</span>(len &lt; <span class="number">3</span>) bestCost = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">        bestCost = ∞;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>; i &lt; len ; i++ )</span><br><span class="line">            c=cost of muliplication at position seq[i];</span><br><span class="line">			newSeq = seq with ith element deleted;</span><br><span class="line">			b= <span class="built_in">mmTry1</span>(dim, len<span class="number">-1</span>, newSeq);</span><br><span class="line">			bestCost=<span class="built_in">min</span>(bestCost, b+c);</span><br><span class="line">	<span class="keyword">return</span> bestCost;</span><br></pre></td></tr></table></figure>
<ul>
<li>$T(n)= (n-1)T(n-1)+n$</li>
<li>$\Theta( (n-1)! )$</li>
</ul>
<h2 id="BF2"><a class="header-anchor" href="#BF2"></a>BF2</h2>
<ul>
<li>必然在某个位置k相乘</li>
<li>BF1“总是在某个位置开始第一次乘法”，子问题规模下降过慢</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mmTry2(dim, low,high)</span><br><span class="line">	<span class="keyword">if</span>(high - low == <span class="number">1</span> ) bestCost=<span class="number">0</span>; //only one matrix</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		bestCost = ∞</span><br><span class="line">		<span class="keyword">for</span>( k = low + <span class="number">1</span>; k &lt; high; k++ )</span><br><span class="line">			a = mmyTry2(dim, low,k);</span><br><span class="line">			b = mmyTry2(dim, k, high);</span><br><span class="line">            c = cost of multiplication at position k;</span><br><span class="line">            bestCost = <span class="built_in">min</span>(bestCost,a+b+c);</span><br><span class="line">    <span class="keyword">return</span> bestCost;</span><br></pre></td></tr></table></figure>
<ul>
<li>$W(n)=2W(n-1)+n$</li>
<li>$O(2^n)$</li>
</ul>
<h2 id="A-DP-solution"><a class="header-anchor" href="#A-DP-solution"></a>A DP solution</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">matrixOrder(n,cost,last) //last记的是位置</span><br><span class="line">	for( low=n-1; low &gt; 1; low-- )//按行，从下往上填</span><br><span class="line">		for(high-low+1; high &lt;= n; high++ )//按列，从左往右填</span><br><span class="line">			Compute solution of subproblem ( low,high  ) and store it in cost[low][high] 				and last[low][high]</span><br><span class="line">			</span><br><span class="line">	return cost[0][n]</span><br><span class="line">			</span><br><span class="line">		</span><br></pre></td></tr></table></figure>
<ul>
<li>时间 $\Theta(n^3)$​</li>
<li>空间 $\Theta(n^2)$</li>
</ul>
<h1 id="Weighted-Binary-Search-Tree"><a class="header-anchor" href="#Weighted-Binary-Search-Tree"></a>Weighted Binary Search Tree</h1>
<ul>
<li>规定$A(T) = \sum\limits_{i=1}^n {p_ic_i}$​,  其中$c_i = depth(i) + 1$​， $p_i$​是节点i被访问到的概率。 如何优化WBST使得A(T)最小？</li>
</ul>
<h2 id="Problem-Rephrased"><a class="header-anchor" href="#Problem-Rephrased"></a>Problem Rephrased</h2>
<ul>
<li>Subproblem identification
<ul>
<li>The keys are in sorted order</li>
<li>Each subproblem can be identified as a pair of index (low,high)</li>
</ul>
</li>
<li>Expected solution of the subproblem
<ul>
<li>For each key $K_i$, a weight $p_i$ is associated.
<ul>
<li>$p_i$​ is the possibility that the key is searched for</li>
</ul>
</li>
<li>The subproblem (low,high) is to find the binary search tree with <strong>minimum weighted retrieval cost</strong></li>
</ul>
</li>
</ul>
<h2 id="minimum-weighted-retrieval-cost"><a class="header-anchor" href="#minimum-weighted-retrieval-cost"></a>minimum weighted retrieval cost</h2>
<ul>
<li><strong>A(low,high,r)</strong>  is the minimum weighted retrieval cost for subproblem (low,high) where $K_r$​ is chosen as the root of its BST​</li>
<li><strong>A(low,high)</strong>  is the minimum weighted retrieval cost for subproblem (low,high) over all choices of the root key</li>
<li><strong>p(low,high)</strong>, equal to $p_{low} + p_{low+1} + \dots + p_{high}$ is the weight of the subproblem (low,high)
<ul>
<li>p(low,high) is the possibility that the key searched for is in this interval.</li>
</ul>
</li>
</ul>
<h2 id="Subproblem-solutions"><a class="header-anchor" href="#Subproblem-solutions"></a>Subproblem solutions</h2>
<ul>
<li>
<p><strong>Weighted retrieval cost of a subtree</strong></p>
<ul>
<li>
<p><em>T</em> contains $K_{low}, \dots, K_{high}$​​, and the weighted retrieval cost of R is W, with <em>T</em> <strong>being a whole tree</strong>.</p>
</li>
<li>
<p>As a subtree with the root at level 1, the weighted retrieval cost of <em>T</em> will be :  $W + p(low,high)$​</p>
<ul>
<li>
<p>$p(low,high)$​是子问题并入大问题时所付出的代价（修正量）,即 “whole tree”变成子树所付出的修正量</p>
</li>
<li>
<p>$\sum\limits_{i=1}^{n}(p_i . (c_i + 1)) =  \sum\limits_{i=1}^n {p_ic_i} + \sum\limits_{i=1}^{n}p_i = W + p(low,high)$​</p>
</li>
</ul>
</li>
<li>
<p>根$K_r$​的代价是$p_{r}$​</p>
</li>
</ul>
</li>
<li>
<p>So， the recursive relations are:</p>
<p>$A(low,high,r) \ = p_r + p(low,r-1) + A(low,r-1) +  p(r+1, high) + A(r+1, high)\ = p(low,high) + A(low,r-1)+A(r+1,high)$</p>
<ul>
<li>$A(low,high) = min{ A(low,high,r) | \quad low \leq r \leq high}$</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">optimalBST</span>( prob,n,cost,root )</span><br><span class="line">	<span class="keyword">for</span>(low=n+<span class="number">1</span>; low &gt;= <span class="number">1</span>; low-- )</span><br><span class="line">		<span class="keyword">for</span>(high=low<span class="number">-1</span>; high &lt;= n; high++)</span><br><span class="line">			<span class="built_in">bestChoice</span>(prob,cost,root,low,high);</span><br><span class="line">	<span class="keyword">return</span> cost;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bestChoice</span>(prob,cost,root,low,high)</span><br><span class="line">	<span class="keyword">if</span>(high &lt; low )</span><br><span class="line">		bestCost=<span class="number">0</span>;</span><br><span class="line">		bestRoot=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		bestCost = ∞;</span><br><span class="line">	<span class="keyword">for</span>( r = low; r &lt;= high ; r++ )</span><br><span class="line">		rCost = <span class="built_in">p</span>(low,high) + cost[low][r<span class="number">-1</span>]+cost[r+<span class="number">1</span>][high];</span><br><span class="line">		<span class="keyword">if</span>(rCost &lt; bestCost)</span><br><span class="line">			bestCost = rCost;</span><br><span class="line">			bestRoot=r;</span><br><span class="line">		cost[low][high]=bestCost;</span><br><span class="line">		root[low][high]=bestRoot;</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure>
<ul>
<li>$\Theta(n^3)$</li>
</ul>
<h1 id="From-the-DP-perspective"><a class="header-anchor" href="#From-the-DP-perspective"></a>From the DP perspective</h1>
<h2 id="All-pairs-shortest-paths-SSSP-over-DAG"><a class="header-anchor" href="#All-pairs-shortest-paths-SSSP-over-DAG"></a>All-pairs shortest paths SSSP over DAG</h2>
<p>$D.dis = min{ B.dis + 1, C.dis+3 }$</p>
<h2 id="Edit-distance"><a class="header-anchor" href="#Edit-distance"></a>Edit distance</h2>
<ul>
<li>You can edit a word by
<ul>
<li><strong>I</strong>nsert, <strong>D</strong>elete, <strong>R</strong>eplace</li>
</ul>
</li>
<li>Edit distance
<ul>
<li>Minimum number of edit operations</li>
</ul>
</li>
<li>Problem
<ul>
<li>Given two strings, compute the edit distance</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">EditDistance</span>( A[<span class="number">1.</span>..m], B[<span class="number">1.</span>..m] ):</span><br><span class="line">	<span class="keyword">for</span> j=<span class="number">1</span> to n:</span><br><span class="line">		Edit[<span class="number">0</span>,j] =j;</span><br><span class="line">	<span class="keyword">for</span> i=<span class="number">1</span> to m:</span><br><span class="line">		Edit[i,<span class="number">0</span>] = i;</span><br><span class="line">		<span class="keyword">for</span> j=<span class="number">1</span> to n:</span><br><span class="line">			<span class="keyword">if</span> A[i] = B[j]</span><br><span class="line">				Edit[i,j] = min &#123; Edit[i<span class="number">-1</span>,j],Edit[i,j<span class="number">-1</span>]+<span class="number">1</span>,Edit&#123;i<span class="number">-1</span>,j<span class="number">-1</span>&#125; &#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				Edit[i,j] = min &#123; Edit[i<span class="number">-1</span>,j],Edit[i,j<span class="number">-1</span>]+<span class="number">1</span>,Edit&#123;i<span class="number">-1</span>,j<span class="number">-1</span>&#125; + <span class="number">1</span> &#125;</span><br><span class="line">	<span class="keyword">return</span> Edit[m,n]</span><br></pre></td></tr></table></figure>
<h2 id="Highway-restaurants"><a class="header-anchor" href="#Highway-restaurants"></a>Highway restaurants</h2>
<ul>
<li>
<p><strong>Highway restaurants</strong></p>
<ul>
<li>n possible locations on a straight line
<ul>
<li>$m_1,m_2,m_3,\dots,m_n$</li>
</ul>
</li>
<li>At most one restaurant at one location
<ul>
<li>Expected profit for location <em>i</em> is $p_{i}$</li>
</ul>
</li>
<li>Any two restaurants should be at least <em>k</em> miles apart</li>
</ul>
</li>
<li>
<p><strong>How to arrange the restaurants</strong></p>
<ul>
<li>To obtain the maximum expected profit</li>
</ul>
</li>
<li>
<p>The recursion</p>
<ul>
<li>P(j): the max profit achievable using only first j locations 只开若干个餐厅,其中最大序号为j, 所获得的利润
<ul>
<li>P(0) = 0</li>
</ul>
</li>
<li>prev[j]: largest index before j and k miles away</li>
</ul>
</li>
</ul>
<p>$$<br>
P(j) = max( p_j + P(prev[j]),P(j-1) )<br>
$$</p>
<ul>
<li>One dimension DP algorithm
<ul>
<li>Fill in P[0],P[1], ... , P[n]</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(First compute the prev[.] array)  //预处理</span><br><span class="line">i = 0</span><br><span class="line">for j = 1 to n:</span><br><span class="line">	while m_&#123;i+1&#125; &lt;= m_&#123;j&#125; - l: // m[i]是第i个餐厅的位置</span><br><span class="line">		i = i+1;</span><br><span class="line">	prev[j] = i; // 预处理结束</span><br><span class="line">	</span><br><span class="line">(Now the DP begins)</span><br><span class="line">P[0]=0;</span><br><span class="line">for j = 1 to n:</span><br><span class="line">	P[j] = max( p_j + P[prev[j]], P[j-1] );</span><br><span class="line">return P[n];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Separating-Sequence-of-words"><a class="header-anchor" href="#Separating-Sequence-of-words"></a>Separating Sequence of words</h2>
<ul>
<li>
<p>Words into lines:</p>
<ul>
<li>Word-length $w_1, w_2, \dots, w_n$ and line-width: <strong>W</strong></li>
</ul>
</li>
<li>
<p>Basic constraint</p>
<ul>
<li>If $w_i, w_{i+1}, \dots, w_j$ are in one line, then $w_i, w_{i+1}, \dots, w_j \leq W$</li>
</ul>
</li>
<li>
<p>Penalty for one line: some function of X, X is:</p>
<ul>
<li>0 for the last line in a paragraph, and</li>
<li>$W-(w_i, w_{i+1}, \dots, w_j)$ for other lines</li>
</ul>
</li>
<li>
<p>The problem</p>
<ul>
<li>How to make the penalty of the paragraph, which is the sum of the penalties of individual lines, minimized</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LineBreakDP</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i = n; i &gt;= <span class="number">1</span>; i--:</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">all</span> words through w_i to w_n can be put into one line then:</span><br><span class="line">		Penalty[i] = <span class="number">0</span>;</span><br><span class="line">		&lt;put <span class="built_in">all</span> words through i yo n <span class="keyword">in</span> one line&gt;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		<span class="keyword">for</span> i=<span class="number">1</span>; w_i + ... + w_&#123;i+k-<span class="number">1</span>&#125; &lt;= W; k++:</span><br><span class="line">			calculate the penalty Cost_&#123;cur&#125; of putting words <span class="keyword">in</span> this line;</span><br><span class="line">			minCost = <span class="built_in">min</span>&#123;minCost,Cost_&#123;cur&#125; + Penalty[ i+k ]&#125;;</span><br><span class="line">			&lt;Updating k_&#123;<span class="built_in">min</span>&#125;, which records the k part that produced the minimun penalty&gt;;</span><br><span class="line">			&lt;Put words i through i + k_&#123;<span class="built_in">min</span>&#125;&gt; - <span class="number">1</span> on one line;</span><br><span class="line">	Penalty = minCost;</span><br></pre></td></tr></table></figure>
<h3 id="Analysis-of-LineBreakDP"><a class="header-anchor" href="#Analysis-of-LineBreakDP"></a>Analysis of LineBreakDP</h3>
<ul>
<li>Each subproblem is identified by only one integer <em>k</em>, for (<em>k</em>,<em>n</em>)
<ul>
<li>Number of vertex in the subproblem graph: at most <em>n</em></li>
<li>So, in <strong>DP</strong> version, the recursion is executed at most <em>n</em> times.</li>
</ul>
</li>
<li>So, the running time is in $\Theta(Wn)$
<ul>
<li>The loop is executed at most <strong>W/2</strong> times. //每个单词后都有空格,标点</li>
<li>In fact, W, the line width, is usually a constant. So, $\Theta(n)$</li>
<li>The extra space for the dictionary is $\Theta(n)$</li>
</ul>
</li>
</ul>
<h2 id="Changing-coins"><a class="header-anchor" href="#Changing-coins"></a>Changing coins</h2>
<ul>
<li>
<p>How to pay a given amount of money?</p>
</li>
<li>
<p>贪心不行</p>
</li>
</ul>
<h3 id="Subproblems"><a class="header-anchor" href="#Subproblems"></a>Subproblems</h3>
<ul>
<li>
<p><strong>Assumptions</strong></p>
<ul>
<li>Given <em>n</em> different denotations</li>
<li>A coin of denomination <em>i</em> has $d_{i}$​ units  面额为<em>i</em>的硬币代表了$d_{i}$的金钱</li>
<li>The amount to be paid: <em>N</em></li>
</ul>
</li>
<li>
<p>Subproblems [i,j]</p>
<ul>
<li>The minimum number of coins required to pay an amount  of <em>j</em> units, using only coins of denominations 1 to <em>i</em>.</li>
</ul>
</li>
<li>
<p>The problem</p>
<ul>
<li>Figure out subproblems [ n, N ] ( as c[n, N] )</li>
</ul>
</li>
<li>
<p>易得:</p>
</li>
<li>
<p>c[i,0] is 0 for all <em>i</em></p>
</li>
<li>
<p>$c[i,j]=min{c[i-1,j], 1+ c[1+c[i,j-d_i]}$</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">( <span class="type">int</span> N, <span class="type">int</span> n, <span class="type">int</span>[] coin)</span></span></span><br><span class="line"><span class="function">    <span class="type">int</span> denomination[] </span>= [d_1, d_2, ..., d_n];</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        coin[i,<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=N;j++)</span><br><span class="line">            <span class="keyword">if</span>( i == <span class="number">1</span> &amp;&amp; j &lt;denomination[i] ) coin[i,j] = + ∞; <span class="comment">//只有一个硬币且面额大于所需金额,不满足</span></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>( i == <span class="number">1</span> ) coin[i,j] = <span class="number">1</span> + coin[<span class="number">1</span>, j - denomination[<span class="number">1</span>]];<span class="comment">//只有一个硬币,其面额小于等于所需金额</span></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(j &lt; denomination[i]) coin[i,j] = coin[i<span class="number">-1</span>,j];<span class="comment">//不止一个硬币,最后一枚的面额大于所需金额, 则剔除这枚硬币</span></span><br><span class="line">			<span class="keyword">else</span> coin[i,j] = <span class="built_in">min</span>( coin[i<span class="number">-1</span>,j], <span class="number">1</span> + coin[j-denomination[i]] );</span><br><span class="line">	<span class="keyword">return</span> coin[n,N];</span><br></pre></td></tr></table></figure>
<h1 id="Elemens-of-DP"><a class="header-anchor" href="#Elemens-of-DP"></a>Elemens of DP</h1>
<h2 id="Principle-of-Optimality"><a class="header-anchor" href="#Principle-of-Optimality"></a>Principle of Optimality</h2>
<ul>
<li>重叠子问题</li>
<li>蛮力找最优</li>
<li>Optimal substructure: 大问题的最优解必然由小问题的最优解组合而成.
<ul>
<li>Given an optimal sequence of decisions, each <strong>subsequence</strong> must be <strong>optimal</strong> by itself</li>
<li>Positive example: shortest path</li>
<li>Counter example: longest (simple) path</li>
<li><strong>DP relies on the principle of optimality</strong></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>L14 MST</title>
    <url>/2021/08/11/L14-MST/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Optimization Problem</li>
<li>Greedy Strategy</li>
</ul>
<span id="more"></span>
<h1 id="Greedy-Strategy-for-Optimization-Problems"><a class="header-anchor" href="#Greedy-Strategy-for-Optimization-Problems"></a>Greedy Strategy for Optimization Problems</h1>
<ul>
<li>Coin change Problem
<ul>
<li>[candidates] a finite set of coins, of 1,5,10 and 25 units, with enough number for each value</li>
<li>[constraints] Pay an exact amount by a selected set of coins</li>
<li>[optimization] a smallest possible number of coins in the selected set</li>
</ul>
</li>
<li>Solution by Greedy Strategy</li>
<li>For each selection. choose the highest-valued coin as possible.</li>
</ul>
<h2 id="Greedy-Fails-Sometimes"><a class="header-anchor" href="#Greedy-Fails-Sometimes"></a>Greedy Fails Sometimes</h2>
<p>We have to pay 15 in total</p>
<ul>
<li>If the available types of coins are {1,5,12}
<ul>
<li>The greedy choice is {12,1,1,1}</li>
<li>But the smallest coins is {5,5,5}</li>
</ul>
</li>
<li>If the available types of coins are {1,5,10,25}
<ul>
<li>The greedy choice is always correct</li>
</ul>
</li>
</ul>
<h2 id="Greedy-Strategy"><a class="header-anchor" href="#Greedy-Strategy"></a>Greedy Strategy</h2>
<ul>
<li>Expanding the partial solution <strong>step by step</strong></li>
<li>In each step, a selection is made from a  set of candidates. The choice made must be:
<ul>
<li>[<strong>Feasible</strong>] it has to satisfy the problem's constraints</li>
<li>[<strong>Locally optimal</strong>] it has to be the best local choice among all feasible choices on the step</li>
<li>[<strong>Irrevocable</strong>] the choice can't be revoked in subsequent steps</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set greedy( set candidate )</span><br><span class="line">	set  S =  空集；</span><br><span class="line">	while not solution(S) and candidate =  空集</span><br><span class="line">		select locally  optimizing x from candidate;</span><br><span class="line">		candidate = candidate - &#123;x&#125;;</span><br><span class="line">		if feasible(x) then S = S ∪ &#123;x&#125;;</span><br><span class="line">	if solution(S) then return S</span><br><span class="line">		else return(&quot;no solution&quot;)</span><br></pre></td></tr></table></figure>
<h1 id="Undirected-Weighted-Graph-and-MST"><a class="header-anchor" href="#Undirected-Weighted-Graph-and-MST"></a>Undirected Weighted Graph and MST</h1>
<p>求无向有权图G的最小生成树（默认G是连通图，对于非连通图，分别求连通片的MST即可）</p>
<ul>
<li>图G的<strong>生成树</strong>T是其子图，满足
<ol>
<li>T包含图G的所有顶点（即恰好有n-1条边）</li>
<li>T是连通无环图，即一棵树</li>
</ol>
</li>
<li>若T是图G的生成树， 且图中不存在其他比T的权小的生成树， 则称T为G的<strong>最小生成树</strong></li>
</ul>
<h2 id="Greedy-Algorithms-for-MST"><a class="header-anchor" href="#Greedy-Algorithms-for-MST"></a>Greedy Algorithms for MST</h2>
<ul>
<li>Prim's algorithm
<ul>
<li>Difficult selecting: &quot;best local optimization means <strong>no cycle and small weight under limitation</strong>&quot;</li>
<li>Easy checking: doing nothing</li>
</ul>
</li>
<li>Kruskal's algorithm:
<ul>
<li>Easy selecting: smallest in primitive meaning</li>
<li>Difficult checking: <strong>no cycle</strong></li>
</ul>
</li>
</ul>
<h1 id="Prim-s-algorithm"><a class="header-anchor" href="#Prim-s-algorithm"></a>Prim's algorithm</h1>
<p>选顶点</p>
<h2 id="Correctness"><a class="header-anchor" href="#Correctness"></a>Correctness</h2>
<ul>
<li>归纳法</li>
</ul>
<h2 id="MST-Property"><a class="header-anchor" href="#MST-Property"></a>MST Property</h2>
<ul>
<li>
<p>A spanning tree <em>T</em> of a connected, weighted graph has MST property if and only if for any non-tree edge <em>uv</em>, $T \or {uv}$​​ contains a cycle in which <em>uv</em> is <strong>one of</strong> the maximum-weight edge.(  生成树再加一条边（这样一定会成环）<em>uv</em>时， <em>uv</em> 一定大于等于生成树中的所有边)</p>
</li>
<li>
<p><strong>All the spanning trees having MST property have the same weight.</strong></p>
<ul>
<li>Proof： 归纳法</li>
</ul>
</li>
<li>
<p>In a connected, weighted graph $G = (V,E, W)$, a  tree <em>T</em> is a minimum, spanning tree if and only if <em>T</em> has the MST property.</p>
<ul>
<li>Proof: 略</li>
</ul>
</li>
<li>
<p>Prim算法总能够得到图G的最小生成树</p>
<ul>
<li>Proof： 暂时没看懂</li>
</ul>
</li>
</ul>
<h2 id="实现"><a class="header-anchor" href="#实现"></a>实现</h2>
<p>Main Procedure:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">primMST(G, n)</span><br><span class="line">	initialize the priority pq as empty;</span><br><span class="line">	Select vertex s to start the tree;</span><br><span class="line">    Set its candidate edge to ( -1, s, 0 );</span><br><span class="line">    insert(pq, s, 0 );</span><br><span class="line">    while( pq is not empty )</span><br><span class="line">    	v= getMin(pq); deleteMin(pq);</span><br><span class="line">    	add the candidate edge of v to the tree;</span><br><span class="line">    	updateFringe( pq, G, v );</span><br><span class="line">    return;</span><br></pre></td></tr></table></figure>
<p>Updating the Queue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">updateFringe( pq, G, v )</span><br><span class="line">	for all vertices w adjcent to v // 2m loops</span><br><span class="line">		newWgt = w(v,w);</span><br><span class="line">		if w.status is unseen then</span><br><span class="line">			Set its candidate edge to (v, b, newWgt );</span><br><span class="line">			insert( pq, w, newWgt )</span><br><span class="line">		else</span><br><span class="line">			if newWgt &lt; getPriority(pq, w)</span><br><span class="line">			Revise its candidate edge to (v, w, newWgt )</span><br><span class="line">			decreaseKey( pq, w, newWgt )</span><br></pre></td></tr></table></figure>
<h2 id="Complexity"><a class="header-anchor" href="#Complexity"></a>Complexity</h2>
<ul>
<li>
<p>Operations on ADT priority queue:( for a graph with n vertices and m edges )</p>
<ul>
<li>insert: n;</li>
<li>getMin: n</li>
<li>deleteMin: n</li>
<li>decreaseKey: m( appears in <em>2m</em> loops, but execute at most <em>m</em>  )</li>
</ul>
</li>
<li>
<p>So,( 抽象化代价 )<br>
$$<br>
T(n,m) = O(nT(getMin)+nT(deleteMin+insert)+mT(decreaseKey)<br>
$$</p>
</li>
<li>
<p>Implementing priority queue using array. we can get $\Theta(n^2 + m)$</p>
</li>
</ul>
<h1 id="Kruskal-s-algorithm"><a class="header-anchor" href="#Kruskal-s-algorithm"></a>Kruskal's algorithm</h1>
<p>选边</p>
<h2 id="Correctness-2"><a class="header-anchor" href="#Correctness-2"></a>Correctness</h2>
<p>归纳法</p>
<h2 id="实现-2"><a class="header-anchor" href="#实现-2"></a>实现</h2>
<p>判断加入一条边<em>uv</em>后是否成环，即判断<em>uv</em>两点是否连通，用<strong>并查集</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kruskalMST( G, n, F )//outline</span><br><span class="line">	int count;</span><br><span class="line">	Build a minimizing priority queue pq, of edges of G, prioritized by weight.</span><br><span class="line">	Initilize a Nuion-Find structure, sets , in which each vertex of S is in its own set.</span><br><span class="line">	</span><br><span class="line">	F = 空集；</span><br><span class="line">	 while( isEmpty(pq) == false )</span><br><span class="line">	 	vwEdge = getMin(pq); deleteMin(pq);</span><br><span class="line">	 	int vSet = find(sets, vwEdge.from);</span><br><span class="line">	 	int wSet = find(sets, vwEdge.to);</span><br><span class="line">	 	if( vSet != wSet )</span><br><span class="line">	 		Add vwEdge to F;</span><br><span class="line">	 		union( sets, vSet, wSet )</span><br><span class="line">	 return</span><br></pre></td></tr></table></figure>
<h2 id="Complexity-2"><a class="header-anchor" href="#Complexity-2"></a>Complexity</h2>
<ul>
<li>$\Theta(mlogm)$   (并查集代价忽略不计)</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>L15 Path in Graph</title>
    <url>/2021/08/11/L15-Path-in-Graph/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>
<p>Single-source shortest paths( SSSP )</p>
<ul>
<li>Dijkstra algorithm by example</li>
<li>Priority queue-based implementation</li>
<li>Proof of correctness</li>
</ul>
</li>
<li>
<p>All-pairs shortest paths( APSP )</p>
<ul>
<li>Shortest path and transitive closure</li>
<li>Warshall algorithm for <strong>transitive closure</strong>
<ul>
<li>BF1, BF2, BF3 =&gt; Warshall algorithm</li>
<li>Floyd algorithm for shortest paths</li>
</ul>
</li>
</ul>
<span id="more"></span>
</li>
</ul>
<h1 id="Single-source-shortest-paths"><a class="header-anchor" href="#Single-source-shortest-paths"></a>Single-source shortest paths</h1>
<h2 id="Dijkstra-algorithm"><a class="header-anchor" href="#Dijkstra-algorithm"></a>Dijkstra algorithm</h2>
<ul>
<li>懂得都懂</li>
<li>不能有负权边</li>
</ul>
<h2 id="Priority-queue-based-implementation"><a class="header-anchor" href="#Priority-queue-based-implementation"></a>Priority queue-based implementation</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">shortestPaths</span><span class="params">( EdgeList[] adjinfo, <span class="type">int</span> n, <span class="type">int</span> s, <span class="type">int</span>[] parent, <span class="type">float</span>[] fringeWgt )</span></span></span><br><span class="line"><span class="function">    <span class="type">int</span>[] status </span>= <span class="keyword">new</span> <span class="type">int</span>[n+<span class="number">1</span>];</span><br><span class="line">	MinPQ pq = <span class="built_in">create</span>( n, status, parent, fringeWgt );</span><br><span class="line"></span><br><span class="line">	<span class="built_in">insert</span>( pq, s, <span class="number">-1</span>, <span class="number">0</span> );</span><br><span class="line">	<span class="keyword">while</span>( <span class="built_in">isEmpty</span>(pq) == <span class="literal">false</span> )</span><br><span class="line">        <span class="type">int</span> v = <span class="built_in">getMin</span>(pq);</span><br><span class="line">		<span class="built_in">deleteMin</span>(pq);</span><br><span class="line">		<span class="built_in">updateFringe</span>( pq, adjinfo[v], v );</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">updateFringe</span><span class="params">( MinPQ pq, EdgeList adjinfoOfV, <span class="type">int</span> v )</span></span></span><br><span class="line"><span class="function">    <span class="type">float</span> myDist </span>= pq.fringeWgt[v];</span><br><span class="line">	EdgeList remAdj;</span><br><span class="line">	remAdj = adjInfoOfV;</span><br><span class="line">	<span class="keyword">while</span>( remAdj != nil )</span><br><span class="line">		EdgeInfo wInfo = <span class="built_in">first</span>( remAdj );</span><br><span class="line">		<span class="type">int</span> w = wInfo.to;</span><br><span class="line">		<span class="type">float</span> newDist = myDist + wInfo.weight;</span><br><span class="line">		<span class="keyword">if</span>( pq.status[w] == unseen )</span><br><span class="line">            <span class="built_in">insert</span>( pq, w, v, newDist );</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>( pq.status[w] = fringe )</span><br><span class="line">            <span class="keyword">if</span>( newDist &lt; <span class="built_in">getPriority</span>( pq, w ) )</span><br><span class="line">                <span class="built_in">decreaseKey</span>( pq. w. v. newDist );</span><br><span class="line">		remAdj = <span class="built_in">rest</span>(remAdj);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">            </span><br></pre></td></tr></table></figure>
<h2 id="correctness"><a class="header-anchor" href="#correctness"></a>correctness</h2>
<ul>
<li>归纳法 + 反证</li>
</ul>
<h2 id="The-Dijkstra-Skeleton"><a class="header-anchor" href="#The-Dijkstra-Skeleton"></a>The  Dijkstra Skeleton</h2>
<ul>
<li>Single-source shortest path( SSSP )</li>
<li>SSSP  + node weight constraint
<ul>
<li>E.g. in routing</li>
</ul>
</li>
<li>SSSP + capacity constraint
<ul>
<li>The &quot;pipe problem&quot;</li>
<li>The &quot;electric vehicle problem&quot;</li>
</ul>
</li>
</ul>
<h1 id="All-pairs-shortest-paths"><a class="header-anchor" href="#All-pairs-shortest-paths"></a>All-pairs shortest paths</h1>
<ul>
<li>For <strong>all</strong> pairs of vertices in a graph, say, <em>u</em>, <em>v</em>:
<ul>
<li>Is there a path from <em>u</em> to <em>v</em>?</li>
<li>What is the shortest path from <em>u</em> to <em>v</em>?</li>
</ul>
</li>
<li>Reachability as a (reflexive) transitive closure of the adjacency relation
<ul>
<li>Which can be represented as a bit matrix</li>
</ul>
</li>
</ul>
<h2 id="Warshall-algorithm-for-transitive-closure"><a class="header-anchor" href="#Warshall-algorithm-for-transitive-closure"></a>Warshall algorithm for transitive closure</h2>
<h3 id="Warshall-algorithm"><a class="header-anchor" href="#Warshall-algorithm"></a>Warshall algorithm</h3>
<ul>
<li>
<p>BF0:  对每个点用Dijkstra</p>
</li>
<li>
<p>BF1： Shortcut Algorithm $O(n^4)$​</p>
</li>
<li>
<p>BF2:  Emurate all edges (x,v) $O(n^2m)$</p>
<ul>
<li>v as the destination</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">While any entry of R changed</span><br><span class="line">	for every edge(x,v)</span><br><span class="line">		r_uv = r_uv ∪ ( r_ux  ∩ r_xv )</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>BF3: Length of the Path  $O(n^4)$​</p>
<ul>
<li>Recursion
<ul>
<li>Reachable via at most k edges</li>
</ul>
</li>
<li>Enumeration
<ul>
<li>Enumerate all path length</li>
<li>Enumerate all sources and destinations</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for k=1 to n-1</span><br><span class="line">	for all vertices u</span><br><span class="line">		for all vertices v</span><br><span class="line">			for all vertices x pointing to v</span><br><span class="line">				r_&#123;uv&#125;^k = r_&#123;uv&#125;^&#123;k-1&#125; ∪ ( r_&#123;ux&#125;^&#123;k-1&#125; ∩ r_&#123;xv&#125; )</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>Warshall Algorithm</p>
<ul>
<li>$O(n^3)$</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">simplTransitiveClosure</span><span class="params">( boolean[][] A, <span class="type">int</span> n, boolean[][] R )</span></span></span><br><span class="line"><span class="function">    <span class="type">int</span> i,j,k</span>;</span><br><span class="line">	Copy A to R;</span><br><span class="line">	Set all main diagonal entries, r_&#123;ii&#125;, to <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">while</span>( any entry of R changed during one complete pass )</span><br><span class="line">        <span class="keyword">for</span>( k=<span class="number">1</span>; k &lt;= n ; k++ )</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=n;j++)</span><br><span class="line">                    r_&#123;ij&#125; = r_&#123;ij&#125; ∪ ( r_&#123;ik&#125;∩ r_&#123;kj&#125; )</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Correctness-of-the-Warshall-Algorithm"><a class="header-anchor" href="#Correctness-of-the-Warshall-Algorithm"></a>Correctness of the Warshall Algorithm</h4>
<ul>
<li>归纳法</li>
</ul>
<h2 id="Floyd-algorithm-for-shortest-paths"><a class="header-anchor" href="#Floyd-algorithm-for-shortest-paths"></a>Floyd algorithm for shortest paths</h2>
<ul>
<li>和求可达性一模一样</li>
<li>Basic formula:</li>
</ul>
<p>$$<br>
D^{(0)}[i][j] = w_{ij} \<br>
D^{(k)}[i][j]= min( D^{(k-1)}[i][j], D^{(k-1)}[i][k] + D^{(k-1)}[k][j] )<br>
$$</p>
<ul>
<li>
<p>Floyd algorithm是一个框架，不只是一个算法</p>
</li>
<li>
<p>不能有<strong>负权环</strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>L19&amp;L20 NP</title>
    <url>/2021/08/13/L19-L20-NP/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li><strong>Decision Problem</strong></li>
<li><strong>The class P</strong></li>
<li><strong>The class NP</strong></li>
<li><strong>Reduction between problems</strong></li>
<li><strong>NP-Complete Problems</strong></li>
<li><strong>Other advanced topics</strong></li>
</ul>
<span id="more"></span>
<h1 id="Decision-Problem"><a class="header-anchor" href="#Decision-Problem"></a>Decision Problem</h1>
<ul>
<li><strong>Statement of a decision problem</strong>
<ul>
<li>Part 1: instance description defining the input</li>
<li>Part2: question stating the actual yes-or-no question</li>
</ul>
</li>
<li><strong>A decision problem is a mapping from all possible inputs into the set {yes, no}</strong></li>
</ul>
<h2 id="Optimization-vs-Decision"><a class="header-anchor" href="#Optimization-vs-Decision"></a>Optimization vs. Decision</h2>
<ul>
<li>Usually, an optimization problem can be rephrased as a decision problem.
<ul>
<li>优化问题往往比判定问题难</li>
</ul>
</li>
<li>If the decision problem can't be solved in <strong>polynomial time</strong>, then the corresponding optimization problem can't be either.</li>
<li>Often, it can be proved that the decision can be solved in **polynomial time ** <u>if and only if</u> the corresponding optimization problem can. （ 通常， 判定问题在多项式时间可解当且仅当优化问题在多项式时间可解）</li>
</ul>
<h2 id="Some-Typical-Decision-Problems"><a class="header-anchor" href="#Some-Typical-Decision-Problems"></a>Some Typical Decision Problems</h2>
<ul>
<li><strong>Graph coloring</strong>
<ul>
<li>Given a undirected graph G and a positive integer <em>k</em>, is there a coloring of G using at most <em>k</em> colors?</li>
</ul>
</li>
<li><strong>Job scheduling with penalties</strong>
<ul>
<li>Given a group of jobs, each with its execution duration, deadline and penalty for missing the deadline, and a nonnegative integer <em>k</em>, is there a schedule with the total penalty bounded by <em>k</em>?</li>
</ul>
</li>
<li><strong>Bin packing</strong>
<ul>
<li>Given <em>k</em> bins each of capacities one, and <em>n</em> objects with size $s_1,\dots,s_n$, (where $s_{i}$ is a rational number in (0,1] ). Do the <em>n</em> objects fit in <em>k</em> bins?</li>
</ul>
</li>
<li><strong>Knapsack</strong>
<ul>
<li>Given a knapsack of capacity C, <em>n</em> objects with sizes $s_1, \dots, s_n$ and &quot;profits&quot; $p_1, \dots, p_n$, and a positive integer <em>k</em>. Is there a subset of the <em>n</em> objects that fits in the knapsack and has total profit at least <em>k</em>?
<ul>
<li>( <strong>Subset sum</strong>  as a simplified version )</li>
</ul>
</li>
</ul>
</li>
<li><strong>CNF-Satisfiability</strong>
<ul>
<li>Given a CNF formula, is there a truth assignment that satisfied it?</li>
</ul>
</li>
<li><strong>Hamiltonian cycles or Hamiltonian paths</strong></li>
<li><strong>Traveling salespersion</strong>
<ul>
<li>带权完全图，问是否存在总权小于 <em>k</em> 的哈密尔顿回路？</li>
</ul>
</li>
</ul>
<h2 id="Theory-of-NP-Completeness"><a class="header-anchor" href="#Theory-of-NP-Completeness"></a>Theory of NP-Completeness</h2>
<ul>
<li>What it <strong>cannot</strong> do
<ul>
<li>Provide a method of obtaining polynomial time algorithms for those &quot;hard&quot; problems.  不能为难问题提出高效解</li>
<li>Negate  the existence of algorithms of polynomial complexity for those problems. 不能否定难问题的高效解的存在</li>
</ul>
</li>
<li>What it <strong>can</strong> do
<ul>
<li>Show that many of the problems for which there is no known polynomial time algorithm are computationally related.  可以给问题难度分档</li>
</ul>
</li>
</ul>
<h1 id="The-class-P"><a class="header-anchor" href="#The-class-P"></a>The class P</h1>
<ul>
<li><strong>A <u>polynomially</u> bounded <u>algorithm</u></strong>
<ul>
<li>is one with its <strong>worse-case</strong> complexity bounded by a polynomial function of the input size</li>
</ul>
</li>
<li><strong>A <u>polynomially</u> bounded <u>problem</u></strong>
<ul>
<li>is one for which there is a polynomially bounded algorithm.
<ul>
<li>&quot;bounded&quot;： 问题只要小于等于多项式时间。 如O(logn)不是多项式，但是小于多项式，这也算多项式可解</li>
</ul>
</li>
</ul>
</li>
<li><strong>The <u>class P</u> is the class of decision problems that are polynomially bounded</strong></li>
</ul>
<h2 id="Notes-one-the-class-P"><a class="header-anchor" href="#Notes-one-the-class-P"></a>Notes one the class P</h2>
<ul>
<li><strong>Class P has a too broad coverage</strong></li>
<li><strong>However</strong>
<ul>
<li>The problem not in P must be extremely expensive and probably impossible to solve in practice.</li>
<li>The problems in P have nice &quot;closure&quot; properties for algorithm integration.</li>
<li>The property of being in P is <strong>independent of the particular formal model of computation used</strong>.</li>
</ul>
</li>
</ul>
<h1 id="The-class-NP"><a class="header-anchor" href="#The-class-NP"></a><strong>The class NP</strong></h1>
<ul>
<li>
<p><strong>A polynomial bounded  nondeterministic algorithm</strong>( 非确定性算法, 就是猜一个解并验证这个解 )</p>
<ul>
<li>$O(p(n))$ time for some polynomial function $p(n)$</li>
<li><strong>For all</strong> possible executions</li>
</ul>
</li>
<li>
<p><strong>The class NP</strong></p>
<ul>
<li>is the class of decision problems for which there is a polynomial bounded nondeterministic algorithm.</li>
</ul>
</li>
<li>
<p><strong>NP means Non-deterministic P</strong></p>
<ul>
<li>From &quot;deterministic&quot; to &quot;non-deterministic&quot;</li>
<li>From &quot;solve a problem&quot; to “verify the answer of a problem&quot;</li>
</ul>
</li>
<li>
<p><strong>What does NP indicate?</strong></p>
<ul>
<li>Harder problems</li>
<li><strong>Not too hard</strong>
<ul>
<li>At least, you can quickly understand the answer</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Proof-of-Being-in-NP"><a class="header-anchor" href="#Proof-of-Being-in-NP"></a>Proof of Being in NP</h2>
<p>先猜一个解； 对于任意一个猜的解，你都能够验证yes or no, 如果这两个步骤都必定能够在多项式时间内结束，则该问题为NP( NP不是Not P ! )</p>
<ul>
<li>
<p><strong>Graph coloring is in NP</strong></p>
<ul>
<li>Phase1 - Guess a certificate
<ul>
<li>Description of the input and the certificate</li>
</ul>
</li>
<li>Guess2 - Verify the certificate
<ul>
<li>There are <em>n</em> colors listed: $c_1,c_2,\dots,c_n$ ( not necessarily different )</li>
<li>Each $c_i$ is in the range $1,\dots,k$​  //颜色在范围内</li>
<li>Scan the list of edges to see if a conflict exists //颜色有无冲突</li>
</ul>
</li>
<li>Phase1 and 2 in polynomial time</li>
</ul>
</li>
<li>
<p><strong>CLIQUE is in NP</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">nodeteClique</span><span class="params">( graph G, <span class="type">int</span> n, <span class="type">int</span> k )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	S = <span class="built_in">genCertif</span>(); <span class="comment">// in O(n)</span></span><br><span class="line">    <span class="keyword">if</span>( S is a clique of size k )	Output <span class="string">&quot;accept&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> Output <span class="string">&quot;reject&quot;</span>; <span class="comment">// in O(k^2)</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>SAT</strong></p>
<p>略</p>
</li>
</ul>
<h2 id="Relation-between-P-and-NP"><a class="header-anchor" href="#Relation-between-P-and-NP"></a>Relation between  P and NP</h2>
<ul>
<li>
<p>An deterministic algorithm for a decision problem is a special  case of a nondeterministic algorithm, which means: $P \subset NP$​（已证明）</p>
</li>
<li>
<p>Intuition implies that <strong>NP</strong> is much larger than <strong>P</strong>. 直觉和经验告诉我们P<strong>真包含</strong>于NP， 但目前没人能证明</p>
<ul>
<li>The number of possible <em>s</em> is exponential in <em>n</em>.</li>
<li>No one problem in <strong>NP</strong> has been proved not in <strong>P</strong>.</li>
</ul>
</li>
</ul>
<h1 id="Reduction-between-problems"><a class="header-anchor" href="#Reduction-between-problems"></a>Reduction between problems</h1>
<ul>
<li>
<p>归约： reduce P to Q. 通过解决Q来间接解决P</p>
<ul>
<li>把P的输入转换为Q的合法输入</li>
<li>并验证正确性（符合Specification）</li>
</ul>
</li>
<li>
<p>&quot;P多项式时间归约到Q&quot;  记为 $P \leq_P Q$​​.</p>
<ul>
<li>如果解决了Q，根据归约，能够解决P</li>
<li>如果解决了P，还不能根据归约解决Q</li>
<li>这说明<strong>Q更难</strong></li>
<li>若Q问题多项式时间可解，可证明P问题也是多项式时间可解。 证明略</li>
<li>$\leq_P$ 是可传递的。（通过多项式的封闭性可证）</li>
</ul>
</li>
</ul>
<h1 id="NP-Complete-Problems"><a class="header-anchor" href="#NP-Complete-Problems"></a>NP-Complete Problems</h1>
<h2 id="Definition"><a class="header-anchor" href="#Definition"></a>Definition</h2>
<ul>
<li>
<p>A  problem Q is <strong>NP-hard</strong> if <strong>every</strong> problem P in <strong>NP</strong> is reducible to Q, that is $P \leq_P Q$​.</p>
<p>（which means that Q is at least as hard as any problem in <strong>NP</strong> ）</p>
<ul>
<li>比所有NP都难或者一样难，但是难度上不封顶，甚至可以不属于NP（ 比如不可判定问题 ）</li>
</ul>
</li>
<li>
<p>A problem Q is <strong>NP-complete</strong> if it is <strong>in NP</strong> and is <strong>NP-hard</strong>( which means that Q is at most as hard as to be solved by a polynomially bounded nondeterministic algorithm  )</p>
</li>
</ul>
<h3 id="P-and-NP-Revisited"><a class="header-anchor" href="#P-and-NP-Revisited"></a>P and NP - Revisited</h3>
<ul>
<li>Intuition implies that <strong>NP</strong> is a much larger set than <strong>P</strong>
<ul>
<li>No one problem in <strong>NP</strong> has been proved not in <strong>P</strong>.</li>
</ul>
</li>
<li>If any <strong>NP - completed</strong> problem is in <strong>P</strong>, then **NP = P **
<ul>
<li>Which means that every problems in <strong>NP</strong> can be reducible to a problem in <strong>P</strong></li>
</ul>
</li>
</ul>
<h2 id="Proof-of-NP-Completeness"><a class="header-anchor" href="#Proof-of-NP-Completeness"></a>Proof of NP-Completeness</h2>
<ul>
<li>Knowledge ： P is  NPC</li>
<li>Task: to prove that Q is NPC</li>
<li>Approach: to reduce P to Q
<ul>
<li>已知 For any $R \in NP$, $ R \le_P P$​ ​</li>
<li>Show $P \le_P Q$</li>
<li>Then $R \le_P Q$, by transitivity of reductions</li>
<li>Done. Q is NP-complete ( given that Q has been proven in NP ) 即通过传递性证明Q是NP-hard, 而Q是否为NP需要另外证明</li>
</ul>
</li>
<li>该证明需要知道一个<strong>最初的NPC</strong>
<ul>
<li>SAT问题, 由<em>Cook</em>提出</li>
</ul>
</li>
</ul>
<h3 id="Satisfiability-Problem"><a class="header-anchor" href="#Satisfiability-Problem"></a>Satisfiability Problem</h3>
<ul>
<li><strong>CNF</strong></li>
<li><strong>CNF-SAT problem</strong></li>
<li><strong>a special case: 3-SAT</strong>
<ul>
<li>子句中的布尔量永远小于等于3 (  永远小于等于二 则成为2-SAT)</li>
</ul>
</li>
</ul>
<h3 id="Example-Prove-CLIQUE-is-NPC"><a class="header-anchor" href="#Example-Prove-CLIQUE-is-NPC"></a>Example: Prove CLIQUE is NPC</h3>
<ul>
<li>把3-SAT的输入转换成图作为CLIQUE 的输入,并证明3-SAT的输出(即只能个语句是否为True)等价于CLIQUE的输出</li>
</ul>
<h3 id="Known-NP-Complete-Problems"><a class="header-anchor" href="#Known-NP-Complete-Problems"></a>Known NP-Complete Problems</h3>
<p>Ref: <em>Computer and Intractability: A guide to the Theory of  NP-Completeness,Freeman,1979</em></p>
<h1 id="Other-advanced-topics"><a class="header-anchor" href="#Other-advanced-topics"></a>Other advanced topics</h1>
<h2 id="Advanced-algorithms"><a class="header-anchor" href="#Advanced-algorithms"></a>Advanced algorithms</h2>
<h3 id="Approximation"><a class="header-anchor" href="#Approximation"></a>Approximation</h3>
<ul>
<li>
<p><strong>Make modification on the problem</strong></p>
<ul>
<li>Restrictions on the input</li>
<li>Change the criteria for the output</li>
<li>Find new abstractions for a practical situation</li>
</ul>
</li>
<li>
<p><strong>Find approximate solution</strong></p>
<ul>
<li>Approximation algorithm</li>
<li><u>Bound of the errors</u></li>
</ul>
</li>
<li>
<p>应用: Bin Packing Problem</p>
</li>
</ul>
<h3 id="Randomized-Algorithm"><a class="header-anchor" href="#Randomized-Algorithm"></a>Randomized Algorithm</h3>
<ul>
<li><strong>Mote Carlo</strong>
<ul>
<li>Always finish in time</li>
<li>The answer may be incorrect</li>
</ul>
</li>
<li><strong>Las Vegas</strong>
<ul>
<li>Always return the correct answer</li>
<li>The running time varies a lot</li>
</ul>
</li>
</ul>
<h3 id="Online-Algorithm"><a class="header-anchor" href="#Online-Algorithm"></a>Online Algorithm</h3>
<ul>
<li><strong>The main difference</strong>
<ul>
<li>Offline algorithm: you can obtain all your input in advance</li>
<li>Online Algorithm: you must cope with unpredictable inputs</li>
</ul>
</li>
<li><strong>How to analyze an online algorithm</strong>
<ul>
<li>Competitive analysis: the performance of an online algorithm is compared to that of an optimal offline algorithm</li>
</ul>
</li>
</ul>
<h3 id="Distributed-Algorithm"><a class="header-anchor" href="#Distributed-Algorithm"></a>Distributed Algorithm</h3>
<ul>
<li>Model of distributed computation</li>
</ul>
<h2 id="Advanced-computation-models"><a class="header-anchor" href="#Advanced-computation-models"></a>Advanced computation models</h2>
<h3 id="Distributed-Data"><a class="header-anchor" href="#Distributed-Data"></a>Distributed Data</h3>
<ul>
<li>External memory model</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>L2 Asymptotics</title>
    <url>/2021/07/13/L2-Asymptotics/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li><strong>How to Compare Two Algorithms</strong></li>
<li><strong>Brute  Force  by Iteration</strong></li>
<li><strong>Brute  Force  by Recursion</strong></li>
</ul>
<span id="more"></span>
<h1 id="How-to-Compare-Two-Algorithms"><a class="header-anchor" href="#How-to-Compare-Two-Algorithms"></a>How to Compare Two Algorithms</h1>
<ul>
<li>Algorithm analysis, with <i>simplification</i>
<ul>
<li>Measure the cost by the number of <strong>critical operations</strong></li>
<li>Large input size only</li>
<li>Essential part only
<ul>
<li>Only the leading term in$ f(n)$ is considered</li>
<li>Constant coefficients are ignored</li>
</ul>
</li>
</ul>
</li>
<li>Capturing the essential part in the cost in a mathematical way
<ul>
<li>Asymptotic <strong>growth rate</strong> of $f(n)$</li>
</ul>
</li>
</ul>
<h2 id="Relative-Growth-Rate"><a class="header-anchor" href="#Relative-Growth-Rate"></a>Relative Growth Rate</h2>
<ul>
<li>
<p>$O(g):$​​ functions that grows no faster than $g$​</p>
<ul>
<li>$O(g(n))={f(n): 存在常数c&gt;0和n_0&gt;0,满足0\leq f(n) \leq cg(n)对所有n \geq n_0均成立}$​</li>
<li>$f(n)=O(g(n)) \quad iff \quad \lim\limits_{n \rarr \infty} \frac{f(n)}{g(n)}=c&lt;\infty$</li>
</ul>
</li>
<li>
<p>$o(g)$: 不快于$g$且与$g$有层次上的差距</p>
<ul>
<li>$o(g(n))={f(n): 对任意常数c&gt;0, 均存在常数n_0&gt;0,满足0\leq f(n) &lt; cg(n)对所有n \geq n_0均成立}$​​​</li>
<li>$f(n)=o(g(n)) \quad iff \quad \lim\limits_{n \rarr \infty} \frac{f(n)}{g(n)}=0$​</li>
</ul>
</li>
<li>
<p>$\Omega(g)$: functions that grow at least as fast as $g$​</p>
<ul>
<li>$\Omega(g(n))={f(n): 存在常数c&gt;0和n_0&gt;0,满足0 \leq cg(n)\leq f(n) 对所有n \geq n_0均成立}$</li>
<li>$f(n)=\Omega(g(n)) \quad iff \quad \lim\limits_{n \rarr \infty} \frac{f(n)}{g(n)}=c&gt;0(c也可以为\infty)$​</li>
</ul>
</li>
<li>
<p>$\omega$: 不慢于$g$且与$g$有层次上的差距</p>
<ul>
<li>$\omega(g(n))={f(n): 对任意常数c&gt;0,均存在常数n_0&gt;0,满足0 \leq cg(n) &lt; f(n) 对所有n \geq n_0均成立}$​</li>
<li>$f(n)=\omega(g(n)) \quad iff \quad \lim\limits_{n \rarr \infty} \frac{f(n)}{g(n)}=\infty$​​</li>
</ul>
</li>
<li>
<p>$\Theta(g):$​​ ... the same rate as $g$​​. (处于同一水平) ( $O$和$\Omega$的交集 )</p>
<ul>
<li>$\Theta(g(n))={f(n): 存在常数c_1&gt;0,c_2&gt;0和n_0&gt;0,满足0 \leq c_1g(n)\leq f(n) \leq c_2g(n) 对所有n \geq n_0均成立}$</li>
<li>$f(n)=\Theta(g(n)) \quad iff \quad \lim\limits_{n \rarr \infty} \frac{f(n)}{g(n)}=c&gt;0(0&lt;c&lt;\infty)$​​</li>
</ul>
</li>
<li>
<p>$\theta$: 不存在， $o$​和$\omega$​的交集是空集</p>
</li>
</ul>
<h1 id="Brute-Force-by-Iteration"><a class="header-anchor" href="#Brute-Force-by-Iteration"></a>Brute  Force  by Iteration</h1>
<ul>
<li>
<p>Max-sum Subsequence</p>
<ul>
<li>
<p>蛮力是$O(n^3)$,  改进一下是$O（n^2）$​，用分治改进是$O（nlogn）$</p>
</li>
<li>
<p>A linear Algorithm: O(n)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ThisSum = MaxSum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>( j = <span class="number">0</span> ; j &lt; N ; j++ )</span><br><span class="line">&#123;</span><br><span class="line">	ThisSum += A[j];</span><br><span class="line">	<span class="keyword">if</span>( ThisSum &gt; MaxSum )</span><br><span class="line">		MaxSum = ThisSum;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>( ThisSum &lt; <span class="number">0</span> )</span><br><span class="line">		ThisSum = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Return MaxSum</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h1 id="Brute-Force-by-Recursion"><a class="header-anchor" href="#Brute-Force-by-Recursion"></a>Brute  Force  by Recursion</h1>
<ul>
<li>
<p>蛮力策略大智若愚，可以以此为跳板进行改进</p>
</li>
<li>
<p><strong>Job Scheduling</strong></p>
<ul>
<li>Brute force recursion
<ul>
<li>Select job 'a'</li>
<li>Case 1: the result does not contain 'a'
<ul>
<li>Recursion on $J \setminus {a}$​​</li>
</ul>
</li>
<li>Case 2: the result contains 'a'
<ul>
<li>Recursion on  $J \setminus {a} \setminus {$​ tasks overlapping with $ a}$​</li>
</ul>
</li>
</ul>
</li>
<li>Further improvements
<ul>
<li>Dynamic programming(L16)</li>
<li>Greedy algorithms( L14 )</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Matrix Chain Multiplication</strong></p>
<ul>
<li>Solutions
<ul>
<li>Brute force recursion(L16)
<ul>
<li>BF1</li>
<li>BF2</li>
</ul>
</li>
<li>Dynamic programming(L16)
<ul>
<li>Based on brute force recursion 2</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>L3 Recursion</title>
    <url>/2021/07/15/L3-Recursion/</url>
    <content><![CDATA[<p>Outline</p>
<ul>
<li><strong>Recursion in algorithm design</strong>
<ul>
<li><strong>The divide and conquer strategy</strong></li>
<li><strong>Proving the correctness of recursive procedures</strong></li>
</ul>
</li>
<li><strong>Solving recurrence equations</strong>
<ul>
<li><strong>Some elementary techniques</strong></li>
<li><strong>Master theorem</strong></li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="Recursion-in-algorithm-design"><a class="header-anchor" href="#Recursion-in-algorithm-design"></a>Recursion in algorithm design</h1>
<h2 id="Divide-and-Conquer"><a class="header-anchor" href="#Divide-and-Conquer"></a>Divide and Conquer</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">The general pattern <span class="comment">//分治的伪代码</span></span><br><span class="line">solve(I)</span><br><span class="line">	n = size(I);</span><br><span class="line">	<span class="keyword">if</span>(n&lt;=smallSize)</span><br><span class="line">		solution=directlySolve(I)</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		divide I into I1, ..., Ik;</span><br><span class="line">		<span class="keyword">for</span> each i ∈ &#123;<span class="number">1</span>, ..., k&#125;</span><br><span class="line">			Si = solve( Ii );</span><br><span class="line">		solution = combine(S1, ..., Sk)</span><br><span class="line">	<span class="keyword">return</span> solution</span><br></pre></td></tr></table></figure>
<ul>
<li>The  BF recursion  蛮力递归
<ul>
<li>Problem size: often decreases linearly
<ul>
<li>&quot;n, n-1, n-2, ...&quot;</li>
</ul>
</li>
</ul>
</li>
<li>The D &amp; C recursion 分治递归
<ul>
<li>Problem size: often decreases exponentially 指数速度降低
<ul>
<li>&quot;n, n/2, n/4, n/8, ...&quot;</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="笨展开"><a class="header-anchor" href="#笨展开"></a>笨展开</h2>
<ul>
<li><code>Smooth定理</code></li>
</ul>
<h2 id="Guess-and-Prove"><a class="header-anchor" href="#Guess-and-Prove"></a>Guess and Prove</h2>
<ul>
<li>
<p>本质上是数学归纳法</p>
</li>
<li>
<p>$T(n)= b T(\frac n c) + f(n)$</p>
<ul>
<li>$b$​ : b个子问题</li>
<li>$c$​ : 每个子问题的规模 (  实际的<code>n/c</code> 不一定等于<code>b</code> )</li>
<li>$f(n)$​ :  包含了划分的代价和combine的代价</li>
</ul>
</li>
</ul>
<h2 id="Recursion-Tree"><a class="header-anchor" href="#Recursion-Tree"></a>Recursion  Tree</h2>
<ul>
<li>
<p>Node</p>
<ul>
<li>None-leaf
<ul>
<li>Non-recursive cost</li>
<li>Recursive cost</li>
</ul>
</li>
<li>Leaf
<ul>
<li>Base case</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Edge</p>
<ul>
<li>Recursion</li>
</ul>
</li>
<li>
<p>Solution by row-sums  (等比序列)</p>
<ul>
<li>Increasing geometric series: 第一个节点</li>
<li>Constant: $f(n) . log(n)$ : 每一层加起来是$f(n)$, 总共有$logn$​层</li>
<li>Decreasing geometric series: 最后一层节点</li>
</ul>
</li>
<li>
<p><strong>Master Theorem</strong>: Loosening the restrictions on $f(n)$</p>
<p>令$a$, $b$ 为常数， 且$a \geq1$​和$b&gt;1$, $f(n)$为一定义于非负整数上的函数, $T(n)$为定义于非负整数上的递归函数:<br>
$$<br>
T(n)=aT(\frac n b)+f(n)<br>
$$<br>
递归式中的$\frac n b$指的是$\lfloor \frac n b  \rfloor$或$\lfloor \lceil \frac n b  \rceil$</p>
<ul>
<li>
<p>如果存在某个常数 $\varepsilon&gt;0$,使得$f(n)=O(n^{log_b^{a-\varepsilon}})$, 则$T(n)=\Theta(n^{log_b a})$​</p>
</li>
<li>
<p>如果$f(n)=\Theta(n^{log_b a}), 则$$T(n)=\Theta(n^{log_b a}logn)$​</p>
</li>
<li>
<p>如果存在某个常数 $\varepsilon&gt;0$​​,使得$f(n)=\Omega(n^{log_b^{a+\varepsilon}})$​​, 且存在某个常数$c$​ ( $c&lt;1$​ ), 使得对所有充分大的$n$​, $af(\frac n b) \leq cf(n)$​, 则$T(n)=\Theta(f(n))$​​</p>
</li>
<li>
<p>Master定理未能覆盖所有情况</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>L4 QuickSort</title>
    <url>/2021/07/21/L4-QuickSort/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>
<p><strong>Inversion</strong></p>
</li>
<li>
<p><strong><code>InsertionSort</code></strong></p>
</li>
<li>
<p><strong>Analysis of <code>InsertionSort</code></strong></p>
</li>
<li>
<p><strong><code>QuickSort</code></strong></p>
</li>
<li>
<p><strong>Analysis of <code>QuickSort</code></strong></p>
</li>
</ul>
<span id="more"></span>
<h1 id="Inversion"><a class="header-anchor" href="#Inversion"></a>Inversion</h1>
<ul>
<li><strong>Definition: Inversion</strong>
<ul>
<li>$&lt;x_i, x_j&gt;$  is an <i>inversion</i> if $x_i &gt; x_j$ , but $i &lt; j$</li>
<li>Sorting == Eliminating inversions</li>
</ul>
</li>
</ul>
<h1 id="InsertionSort"><a class="header-anchor" href="#InsertionSort"></a><code>InsertionSort</code></h1>
<h2 id="Worst-Case"><a class="header-anchor" href="#Worst-Case"></a>Worst Case</h2>
<ul>
<li><i>Local comparison</i> is done between is done between two adjacent elements</li>
<li>At most <strong>one</strong> inversion is removed by a <i>local comparison</i></li>
<li>There do exist inputs with <i>n(n-1)/2</i> inversions, such as ( n, n-1, ...., 3, 2, 1 ) （最坏情况，inversion最多）</li>
<li><strong>The worst-case behavior of any sorting algorithm that remove at most one inversion per key comparison must in $\Omega(n^2)$​​​</strong></li>
</ul>
<h2 id="Average-Case"><a class="header-anchor" href="#Average-Case"></a>Average Case</h2>
<ul>
<li>
<p>Computing the average number of inversions in inouts of size n ( n &gt; 1 ):</p>
<ul>
<li>
<p>Transpose:<br>
$$<br>
x_1, x_2,x_3,\dots,x_{n-1},x_n \<br>
x_n,x_{n-1},\dots,x_3,x_2,x_1<br>
$$</p>
</li>
<li>
<p>For any    $i, j\quad(1 \leq j \leq i \leq n)$​ , the inversion $( x_i, x_j )$ is in exactly one sequence in a transpose pair</p>
</li>
<li>
<p>The number of inversions (xi, xj) on <i>n</i> distinct integers is <i>n(n-1)/2</i></p>
</li>
<li>
<p>So, the average number of inversions in all possible inputs is <i>n(n-1)/4</i>, since exactly <i>n(n-1)/2</i> inversions appear in each transpose pair.</p>
</li>
<li>
<p><strong>The average behavior of any sorting algorithm that remove at most one inversion per key comparison  must in $\Omega(n^2)$</strong></p>
</li>
</ul>
</li>
</ul>
<h1 id="QuickSort"><a class="header-anchor" href="#QuickSort"></a><code>QuickSort</code></h1>
<ul>
<li>每次递归，<code>pivot</code>的位置一定是对的</li>
</ul>
<h2 id="Worst-Case-a-Paradox"><a class="header-anchor" href="#Worst-Case-a-Paradox"></a>Worst Case: a Paradox</h2>
<ul>
<li>
<p>For a range of <i>k</i> positions, <i>k - 1</i> keys are compared with the pivot( one is vacant )</p>
<ul>
<li>
<p>if the pivot is the smallest, than the &quot;large&quot; segment has all the remaining <i>k - 1</i>, and the small segment is empty 最坏情况,每次问题的规模只减少1, 每次PARTITION代价是O(n)</p>
</li>
<li>
<p>If the elements in the array to be sorted has already ascending order( the <strong>Goal</strong> ), then the number os comparison that Partition has to do is:</p>
<p>$n - 1 + n - 2 + ... + 1 = n(n-1)/2 ∈ O(n^2)$​</p>
</li>
<li>
<p>考虑到所有输入等概率的情况,最坏情况的出现概率是很低的.</p>
</li>
</ul>
<p>所有元素只跟pivot比,左右两边里的任意两两之间没有比过. 这样才能用递归来分析</p>
</li>
</ul>
<h2 id="Analysis"><a class="header-anchor" href="#Analysis"></a>Analysis</h2>
<p>3种方法</p>
<ul>
<li>Guess and Prove 归纳法</li>
<li>Directly solve</li>
<li>Indication random variable</li>
</ul>
<h2 id="Space-Complexity"><a class="header-anchor" href="#Space-Complexity"></a>Space Complexity</h2>
<ul>
<li>Good news:
<ul>
<li>Partition is in-place  不占用额外的空间</li>
</ul>
</li>
<li>Bad news:
<ul>
<li>In the worst case, the depth of recursion will be <i>n - 1</i></li>
<li>So, the largest size of recursion stack will be in O(n)</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>L5 HeapSort</title>
    <url>/2021/07/21/L5-HeapSort/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>
<p><strong>Heap</strong></p>
</li>
<li>
<p><strong>HeapSort</strong></p>
</li>
<li>
<p><strong>FixHeap</strong></p>
</li>
<li>
<p><strong>ConstructHeap</strong></p>
</li>
<li>
<p><strong>Accelerated HeapSort</strong></p>
</li>
</ul>
<span id="more"></span>
<h1 id="Heap"><a class="header-anchor" href="#Heap"></a><code>Heap</code></h1>
<ul>
<li>定义：一棵二叉树满足
<ul>
<li>堆结构特性： 即 是一课完全二叉树</li>
<li>堆偏序特性： 堆节点中存储的元素满足父结点的值大于所有子节点的值（左右子节点的值之间的大小关系无要求）</li>
</ul>
</li>
<li>堆的最大元素必然位于堆顶。</li>
</ul>
<h1 id="FixHeap"><a class="header-anchor" href="#FixHeap"></a><code>FixHeap</code></h1>
<ul>
<li>堆顶元素被取走后，整个堆的结构特性和偏序特性均被破坏，但堆的这两个特性是正交的，我们可以先修复结构特性，再修复偏序特性。在修复时，我们面临的不是一个被任意破坏的堆，而只是一个被“<strong>局部</strong>”破坏的堆，即： 堆顶元素被取走，但堆的左右子树仍然是一个合法的堆。</li>
<li>对于堆结构特性的修复，只需<u>取最底层最右边的元素，放在堆顶位置</u></li>
<li>修复完结构特性后，我们面对的是一个满足<u>堆结构</u>的二叉树，其左右子树均是一个合法的堆, 只是其根节点的值与其两个（边界情况下可能只有一个）子节点的值不满足偏序特性的要求，为此，需要：
<ol>
<li>将父结点的值与子节点的值比较，假设左子节点最大，则将父结点与左子点交换位置。 此时，父节点和右子树均满足了<u>堆偏序</u></li>
<li>左子树由于引入了新的根节点,可能不满足偏序特性. 为此,需要对左子树递归地进行上述修复过程</li>
</ol>
</li>
<li>由于堆的修复只会在高度严格递减的一系列子树上进行, 所以修复过程一定会终止,且次数不会超过树的高度. 由于堆的高度为$O(logn)$, 每次修复的比较次数为<code>O(1)</code>(最多为2次),所以堆修复的代价为$O(logn)$</li>
</ul>
<h1 id="ConstructHeap"><a class="header-anchor" href="#ConstructHeap"></a><code>ConstructHeap</code></h1>
<ul>
<li>
<p>假设有一颗满足<u>堆结构特性</u>的二叉树,但树中每个节点所存储的值的大小关系完全是杂乱的,我们需要使书中所有父子节点间均满足堆的偏序特性,基于堆修复操作,递归实现:</p>
<ol>
<li>从根部开始堆的构建,因为堆的左右子树必然还是堆. 此时如果堆的左右子树均是一个合法的堆,那么最多只是根节点有局部破坏,用<code>FixHeap</code>处理</li>
<li>对堆结构的左右子树,只需递归地将它们构建成合法的堆</li>
</ol>
</li>
<li>
<p>建堆的代价即堆修复代价的总和： $ W(n) = O(n)$</p>
</li>
</ul>
<h1 id="堆的实现"><a class="header-anchor" href="#堆的实现"></a>堆的实现</h1>
<ul>
<li>堆中的父子节点下标满足如下关系:
<ul>
<li>$PARENT(i) = \lfloor \frac i  2 \rfloor$</li>
<li>$LEFT(i) = 2i$</li>
<li>$RIGHT(i) = 2i + 1$</li>
</ul>
</li>
<li>Proof: 略</li>
</ul>
<h1 id="HeapSort"><a class="header-anchor" href="#HeapSort"></a><code>HeapSort</code></h1>
<ul>
<li>
<p>复杂度 $W(n) = O(nlogn)$​​ ; $A(n) = O(nlogn)$​</p>
</li>
<li>
<p>可以用堆实现<code>PRIORITY QUEUE</code></p>
</li>
</ul>
<h1 id="Accelerated-HeapSort"><a class="header-anchor" href="#Accelerated-HeapSort"></a><code>Accelerated HeapSort</code></h1>
<ul>
<li>采用折半查找, 子元素不和父元素比较,只和兄弟元素比较,比较完后与父元素交换,即父元素直接下沉. 元素每次下沉到剩余高度一半的时候,和PQRENT比较一次(由于只有一个父元素,比较次数为1),若大于父元素,则上浮, 否则递归执行上述操作( 继续下沉,比较... )</li>
<li>这样做基于的假设是: 对于一个很深的堆,<code>FixHeap</code>时,替换而来的根元素极有可能比两个子元素都要小,因此不用将根元素带入比较,以减少一次比较次数.</li>
</ul>
<h2 id="Extension"><a class="header-anchor" href="#Extension"></a>Extension</h2>
<ul>
<li>堆可以扩展为 n-way ,这样的堆会变胖变矮</li>
<li>一般来说, 如果堆的上浮操作比较多,那么堆越胖越好.
<ul>
<li>上浮只需一次操作,由于堆变矮了,还能减少上浮次数</li>
</ul>
</li>
<li>若堆的下沉操作比较多,那么堆越瘦越好
<ul>
<li>堆越瘦,每次比较的操作数越少,极限情况是二叉树,三个元素只需比较两次</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>L6 MergeSort</title>
    <url>/2021/07/22/L6-MergeSort/</url>
    <content><![CDATA[<p>Oultline</p>
<ul>
<li><code>MergeSort</code>
<ul>
<li>Worst-case analysis of <code>MergeSort</code></li>
<li>More than sort: the <code>MergeSort</code> D&amp;C</li>
</ul>
</li>
<li>Lower Bounds for <i>comparison-based sorting</i> ( <code>nlogn</code> )
<ul>
<li>Worst-case ( <code>Omega(nlogn)</code> )</li>
<li>Average-case (<code>nlogn - 1.443n</code> )</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="MergeSort"><a class="header-anchor" href="#MergeSort"></a><code>MergeSort</code></h1>
<h2 id="Space-Complexity-of-Merge"><a class="header-anchor" href="#Space-Complexity-of-Merge"></a>Space Complexity of Merge</h2>
<ul>
<li>A algorithm is &quot;in space&quot;
<ul>
<li>If the extra space it has to use is in Omega(1)</li>
</ul>
</li>
<li>Merge is <strong>not</strong> an in place algorithm
<ul>
<li>Since it needs O(n) extra space to store the merged sequence during the merging process</li>
</ul>
</li>
</ul>
<h2 id="Worst-case-Complexity-of-MergeSort"><a class="header-anchor" href="#Worst-case-Complexity-of-MergeSort"></a>Worst  case Complexity of <code>MergeSort</code></h2>
<ul>
<li>Observations
<ul>
<li>Worst case is that comparison is conducted between A[k-1] and B[m-1]</li>
<li>After each comparison, one element is inserted into Array C, <strong>at least</strong></li>
<li>After entering Array C ,  an element will never be compared again</li>
<li>After last comparison, at least two elements( the two just compared ) have not yet been moved to Array C. So at most <i>n - 1</i> comparisons are done.</li>
</ul>
</li>
<li><strong>In worst case, <i>n - 1</i> comparisons are done, where  n = k + m</strong></li>
</ul>
<h2 id="Optimality-of-Merge"><a class="header-anchor" href="#Optimality-of-Merge"></a>Optimality of Merge</h2>
<ul>
<li>
<p>Any algorithm to merge two sorted arrays, each containing k = m = n/2 entries, by comparison of keys, does <strong>at least</strong>(如果算法笨的话可能有重复比较)  <i>n - 1</i> comparisons <strong>in the worst case</strong>.</p>
<ul>
<li>
<p>Choose keys so that:</p>
<p>b0 &lt; a0 &lt; b1 &lt; a1 &lt; ... &lt; bi &lt; ai&lt; bi+1,..., &lt; bm-1 &lt; ak-1</p>
</li>
<li>
<p>Then the algorithm must  compare ai with bi for every i in [ 0, m - 1 ], and must compare ai with bi+1 for every i in [0, m - 1], so there are <i>n - 1</i> comparisons</p>
</li>
</ul>
</li>
<li>
<p>先考虑最好情况,也就是两边数组大小不一样的时候,一个数组全部比完了,那么另一个数组的剩余部分就在这次比较后全部插入辅助数组中, 比较次数小于 <i>n - 1</i></p>
</li>
<li>
<p>反之,最坏情况就是&quot;其中一个数组比完了&quot;这个情况不发生,也就是两个数组一直比到最后, 也就是两个数组的最后一个元素相互比较( &quot;comparison is conducted between A[k-1] and B[m-1]&quot; ), 这就要求k = m = n/2</p>
</li>
<li>
<p>可能有人会疑惑, 如果两数组大小极度不均衡,但是较小数组的最后一个元素远大于较大数组的所有元素,这不也是比到最后吗? 也是 <i>n - 1 </i> 吗? 为什么最坏情况的构造里, 还要要求 k = m = n/2 呢?</p>
<ul>
<li>因为对于这种情况,对于较小的数组,完全可以用折半查找来插入,不需要归并了.</li>
</ul>
</li>
</ul>
<h2 id="Worst-case-Analysis-of-MergeSort"><a class="header-anchor" href="#Worst-case-Analysis-of-MergeSort"></a>Worst case Analysis of <code>MergeSort</code></h2>
<ul>
<li>The recurrence equation for <code>MergeSort</code>
<ul>
<li><code>W(n) = W( floor( n/2 ) ) + W( cell( n/2 ) ) + n - 1 (或者O(n))</code></li>
<li>W (1) = 0</li>
</ul>
</li>
<li>The <i>Master Theorem</i> applies for the equation, so:
<ul>
<li><strong>W(n) ∈ <code>Omega(nlogn)</code></strong></li>
</ul>
</li>
<li>精细分析, 得出 <i>W(n) = nlogn - ( alpha - log alpha )n + 1</i>
<ul>
<li><i>cell( nlogn  - n + 1 ) &lt;= W(n) &lt;= cell( nlogn - 0.914n)</i></li>
</ul>
</li>
</ul>
<h2 id="The-MergeSort-D-C"><a class="header-anchor" href="#The-MergeSort-D-C"></a>The <code>MergeSort</code> D&amp;C</h2>
<ul>
<li>
<p>Counting the number of inversions</p>
<ul>
<li>Brute force: O(n2)  蛮力做法</li>
<li>Can we use divide &amp; conquer
<ul>
<li>In <code>O(nlogn)</code> =&gt; combination in O(n)</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>MergeSort</code> as the **carrier ** 用归并排序做</p>
<ul>
<li>
<p>Sorted subarrays</p>
<ul>
<li>A[ 0... k-1] and B[ 0 ... m-1 ]</li>
</ul>
</li>
<li>
<p>Compare the <i>left</i> and the <i>right</i> elements</p>
<ul>
<li>
<p>A[i] vs. B[j]</p>
</li>
<li>
<p>if A[i] &gt; B[j]</p>
<ul>
<li>
<p>(i,j) is an inversion</p>
</li>
<li>
<p>For all i'  &gt; j</p>
<p>( i' , j) are inversions ( i' &gt; i )</p>
</li>
<li>
<p>B[j] is selected</p>
</li>
</ul>
</li>
<li>
<p>if A[i]] &lt; B[j]</p>
<ul>
<li>No inversions found</li>
<li>A[i] is selected</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="Lower-Bounds-for-i-comparison-based-sorting-i"><a class="header-anchor" href="#Lower-Bounds-for-i-comparison-based-sorting-i"></a>Lower Bounds for <i>comparison-based sorting</i></h1>
<ul>
<li>Upper bound, e.g., <strong>worst-case cost</strong>  给定一个算法，输入不同，复杂度有一个上界（比如worst-case）
<ul>
<li>For <strong>any</strong> possible input, the cost of the <strong>specific</strong> algorithm A is no more than the <i>upper bound</i>
<ul>
<li><i>Max{ Cost( i ) | i is an input }</i></li>
</ul>
</li>
</ul>
</li>
<li>Lower bound, e.g., comparison-based sorting  比如，对于所有可能的算法，每个算法都有一个worst-case, 这是个上界，对所有上界取下界,就是worst-case的下界。相应的， 所有可能的算法的所有可能的期望值，也就是average-case复杂度，的下界，就是average-case复杂度的下界
<ul>
<li>For <strong>any</strong> possible( comparison-based ) sorting algorithm A, the worst-case is no less than the <i>lower bound</i>
<ul>
<li><i>Min{ Worst-case(a) | a is an algorithm }</i></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Decision-Tree-for-Sorting"><a class="header-anchor" href="#Decision-Tree-for-Sorting"></a>Decision Tree for Sorting</h2>
<ul>
<li>Decision tree is a <strong>2-tree</strong>( assuming no same keys )</li>
<li>The action of Sort on a particular input corresponds to following on path in its decision tree from the root to leaf associated to the specific output</li>
<li>Decision tree  是刻画所有 <i>comparison-based</i> 的排序的数学工具</li>
</ul>
<h2 id="Characterizing-the-Decision-Tree"><a class="header-anchor" href="#Characterizing-the-Decision-Tree"></a>Characterizing the Decision Tree</h2>
<ul>
<li>
<p>For a sequence of <i>n</i> distinct elements, there are <i>n!</i> different permutation</p>
<ul>
<li>
<p>叶节点是所有可能的输出,这是n个输入元素的所有可能的排列,因此是n!</p>
</li>
<li>
<p>So, the decision tree has at least <i>n!</i> leaves, and exactly n! leaves can be reached from the root</p>
</li>
<li>
<p>So, for the purpose of lower bounds evaluation, we use trees with exactly n! leaves.</p>
</li>
</ul>
</li>
<li>
<p>The number of comparison done in the <strong>worst case</strong> is the <strong>height</strong> of the tree</p>
</li>
<li>
<p>The <strong>average</strong> number of comparison done is the <strong>average</strong> of lengths of all paths from the root  to a leaf.</p>
</li>
<li>
<p>变成了离散数学问题</p>
</li>
</ul>
<h2 id="Lower-Bound-for-Worst-Case"><a class="header-anchor" href="#Lower-Bound-for-Worst-Case"></a>Lower Bound for Worst Case</h2>
<ul>
<li><strong>Theorem</strong>: Any algorithm to sort <i>n</i> items by comparisons of keys must do at least <code>cell(log n!)</code>. or approximately <code>cell(  nlogn - 1.443n)</code>, key comparisons in the worst case.
<ul>
<li>Lemma: let <i>L</i> be the number of leaves in a binary tree and h be its height. Then L &lt;= 2^h   可用归纳法证明
<ul>
<li>即高度为h，  h &gt;= log L , L = n！,   所以  h &gt;= log( n! )</li>
</ul>
</li>
<li>log( n! ) &gt;= ... &gt;= log( (n/2)^ (n/2) ) = n/2log(n/2) ∈ <strong>Omega( nlogn )</strong></li>
</ul>
</li>
<li>因此，worst-case的下界为<code>nlogn</code></li>
</ul>
<h2 id="External-Path-Length-EPL"><a class="header-anchor" href="#External-Path-Length-EPL"></a>External Path Length( EPL )</h2>
<ul>
<li><strong>EPL --- sum of path length to every leaf</strong>
<ul>
<li>The  EPL <i>t</i> is recursively defined as follows:</li>
<li>[Base case] 0 for a  single external node</li>
<li>[Recursion] <i>t</i> is non-leaf with sub-trees <i>L</i> and <i>R</i>, then the sum of:
<ul>
<li>The external path length of <i>L</i></li>
<li>the number of external node of <i>L</i> ( 每个完整的树作为子树时,节点的深度都要下沉1,所以递归合并时每个叶节点对应的路径长度都要加一 )</li>
<li>The external path length of <i>R</i></li>
<li>the number of external node of <i>R</i></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Lower-Bound-for-Average-Behavior"><a class="header-anchor" href="#Lower-Bound-for-Average-Behavior"></a>Lower Bound for Average Behavior</h2>
<ul>
<li>
<p>Since a decision tree with <i>L</i> leaves is a 2-tree,  the average path length from the root to leaf is <i>epl / L</i></p>
</li>
<li>
<p>Recall that <strong><i>epl</i> &gt;= <i>L log( L )</i></strong></p>
</li>
<li>
<p>每个输出对应的概率是 1 / L , 而所有代价的总和是<i>epl</i>, 所以平均情况复杂度在所有可能的输入等概率的前提下,是 <i>epl/L</i>, 因此求average case的下界,就是求<i>epl</i>的下界</p>
</li>
<li>
<p><strong>Theorem</strong>: The average number of comparisons done by an algorithm to sort <i>n</i> items by comparison of keys is at least <i>log(n!)</i>, which is about <i> nlogn - 1.443n </i></p>
</li>
<li>
<p>More Balanced 2-tree, Less EPL</p>
<ul>
<li>设一棵 决策树有两个节点,高度分别为h , k, h - k &gt; 1( 即该树不平衡 ).  高度为h的节点有两个叶节点, 高度k的节点没有叶节点( 由于是2-tree, 不可能只有一个叶子节点 )</li>
<li>Assuming that <i>h - k &gt; 1</i>&gt;, when calculating <i>epl</i> , h + h + k is replaced by<i> ( h - 1 ) + 2( k + 1 )</i>. the net change in <i>epl</i> is k - h + 1 &lt; 0, that is , the <i>epl</i> decreases</li>
<li>因此,求<i>epl</i>的下界,就是求最平衡的树的<i>epl</i>, 最平衡的二叉树就是`完美二叉树. 由此可证明:  <strong><i>epl</i> &gt;= <i>L log( L )</i></strong></li>
</ul>
</li>
</ul>
<h1 id="MergeSort-Has-Optimal-Average-Performance"><a class="header-anchor" href="#MergeSort-Has-Optimal-Average-Performance"></a><code>MergeSort</code> Has Optimal Average Performance</h1>
<ul>
<li>The <strong>average</strong> number of comparisons done by an algorithm to sort <i>n</i> items by comparison of keys is at least about <i>nlogn - 1.443n</i></li>
<li>The <strong>worst</strong> complexity of <code>MergeSort</code> is in <code>Omega(nlogn)</code>( 之前已证 )</li>
<li>So, <code>MergeSort</code> is optimal as for its average performance
<ul>
<li>首先, 归并排序的worst-case是<code>nlogn</code>, 而average-case必定小于等于worst-case, 即 <code>MergeSort</code>的average=case的上界是<code>nlogn</code>. 作为一个comparison sorting, 由于comparison sorting的average-case的下界是<code>nlogn</code>. 因此<code>MergeSort</code>的average-case的下界是<code>nlogn</code>. 夹逼得出, 所以<code>MergeSort</code>的average-case就是<code>nlog</code>级别</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>L7 Selection</title>
    <url>/2021/07/24/L7-Selection/</url>
    <content><![CDATA[<p>Outline</p>
<ul>
<li>Lower bound and <strong>adversary argument</strong></li>
<li>Selection - select the <em>median</em>
<ul>
<li>Expected linear time</li>
<li>Worst-case linear time</li>
</ul>
</li>
<li>A Lower bound for Finding the Median</li>
</ul>
<span id="more"></span>
<h1 id="Lower-bound-and-adversary-argument"><a class="header-anchor" href="#Lower-bound-and-adversary-argument"></a>Lower bound and adversary argument</h1>
<ul>
<li>Adversary argument： 对一个算法而言是worst-case的input.</li>
<li>Adversary strategy: 指导你构造<code>adversary argument</code>的策略</li>
</ul>
<h2 id="Finding-max-and-min"><a class="header-anchor" href="#Finding-max-and-min"></a>Finding max and min</h2>
<ul>
<li>
<p>对n个元素，找出最大和最小</p>
<ul>
<li>Brute force： 先n-1次comparison找出最大， 拿出该元素，对其余n-1个元素进行n-2次comparison找出最小</li>
</ul>
</li>
<li>
<p>The strategy</p>
<ul>
<li>Pair up the keys, and do <i>n/2</i> comparisons( if <i>n</i> odd, having E[n] uncompared ) 把数组一分为二，两两比较. 最大元素肯定在大的那边，最小元素肯定在小的那边</li>
<li>Doing findMax for larger key set and findMin for small key set respectively( if <i>n</i> odd, E[n] included in both sets )</li>
</ul>
</li>
<li>
<p>Number of comparisons</p>
<ul>
<li>
<p>For even <i>n</i>:<br>
$$<br>
n/2 + 2(n/2 - 1) = 3n/2 - 2<br>
$$</p>
</li>
<li>
<p>For odd n:</p>
</li>
</ul>
<p>$$<br>
（n-1）/2 + 2( (n-1)/2 - 1 + 1 ) = \rceil 3n/2 \rceil - 2<br>
$$</p>
</li>
</ul>
<p>现在用<code>adversary argument</code>证明这个问题的下界是 $\frac32n - 2$​</p>
<h3 id="Unit-of-Information"><a class="header-anchor" href="#Unit-of-Information"></a>Unit of Information</h3>
<ul>
<li>Max and Min
<ul>
<li>That <em>x</em> is <em>max</em> can only be known when it is sure sure that every key other than <em>x</em> has <u>lost some comparison</u></li>
<li>That <em>y</em> is <em>min</em> can only be known when it is sure sure that every key other than <em>y</em> has <u>win some comparison</u></li>
</ul>
</li>
<li>Each win or loss is counted as one unit of information
<ul>
<li><em>Any</em> algorithm must have at least <em>2n - 2</em> units of information to be sure of specifying the <em>max</em> and <em>min</em>.</li>
<li>因此，算法至少要获取 <em>2n - 2</em> 个信息元</li>
</ul>
</li>
</ul>
<h3 id="Adversary-Strategy"><a class="header-anchor" href="#Adversary-Strategy"></a>Adversary Strategy</h3>
<ul>
<li>
<p>Construct an input to force the algorithm to do more comparisons as possible <em>构造一个输入,使得获取</em>2n - 2* 个信息元需要花费尽可能多的比较</p>
<ul>
<li>To give away as few as possible units of new information with each comparison
<ul>
<li>It can be achieved that 2 units of new information are given away only when the status is N,N</li>
<li>It is <strong>always</strong> possible to give adversary response for other status so that at most one new unit of  information is given away, <strong>without any inconsistencies</strong></li>
<li>So, the <strong>Lower bound</strong> is $n/2 + n - 2 $ ( for even n)</li>
</ul>
</li>
</ul>
<p>$$<br>
n/2 \times 2 + ( n - 2 ) \times 1 = 2n - 2 (信息元)<br>
$$</p>
<ul>
<li>对所有算法而言,面对这个(adversary argument的)输入, 要尽可能少地比较,来凑足 2n-2个信息元. 算法最多能进行 $\frac {n}2$ 次信息元为2的比较, 而对于剩下的 n - 2 个信息元,算法只能进行信息元为1的比较</li>
</ul>
</li>
<li>
<p>The principle: let the key win if it never lose, or, let the key lose if it never win, and <strong>change one value if necessary</strong></p>
</li>
</ul>
<h2 id="Finding-2-nd-max"><a class="header-anchor" href="#Finding-2-nd-max"></a>Finding 2^nd^ max</h2>
<ul>
<li>Brute force - using FindMax twice
<ul>
<li>$2n-3$ comparisons</li>
</ul>
</li>
<li>For a better algorithm
<ul>
<li>Collect some useful information from the first FindMax</li>
</ul>
</li>
<li>Observations
<ul>
<li>The key which <strong>loses to a key other than max</strong>  can not be the 2^nd^ largest key</li>
<li>To check &quot;whether you lose to max?&quot;</li>
</ul>
</li>
</ul>
<h3 id="Analysis"><a class="header-anchor" href="#Analysis"></a>Analysis</h3>
<ul>
<li>
<p>Any algorithm that finds <em>secondLargest</em> must also find <em>max</em> before (  <strong>n - 1</strong> )</p>
</li>
<li>
<p>The <em>secondLargest</em> can only be in those which lose directly to <em>max</em></p>
</li>
<li>
<p>On its path along which bubbling uo to the root of tournament tree, <em>max</em> beat $\lceil logn \rceil$ keys at most( 根据锦标赛树的数据结构可以证明 )</p>
</li>
<li>
<p>Pick up  <em>secondLargest</em> (依然用FindMax)</p>
</li>
<li>
<p>Total cost: $ n + \lceil logn \rceil - 2$​</p>
</li>
<li>
<p>下面解释为什么该算法是最优</p>
</li>
</ul>
<h3 id="Weight-Key"><a class="header-anchor" href="#Weight-Key"></a>Weight Key</h3>
<ul>
<li>
<p>Assigning a weight <em>w(n)</em> to each key</p>
<ul>
<li>The initial values are all 1.</li>
</ul>
</li>
<li>
<p>Adversary strategy</p>
</li>
</ul>
<h4 id="Lower-Bound-by-Adversary-Details"><a class="header-anchor" href="#Lower-Bound-by-Adversary-Details"></a>Lower Bound by Adversary: Details</h4>
<ul>
<li>
<p>Note: the sum of weights is always <em>n</em></p>
</li>
<li>
<p>Let <em>x</em> is <em>max</em>, then <em>x</em> is the only nonzero weighted key, that is $w(x) = n$​.</p>
</li>
<li>
<p>By the adversary rules:<br>
$$<br>
w_k(x) \le 2w_{k - 1}(x)<br>
$$</p>
</li>
<li>
<p>So, $K \le \lceil logn\rceil$​</p>
<ul>
<li>注意,之前算法的$\lceil logn\rceil$是从锦标赛树的数学性质得出的, 而这里的$\lceil logn\rceil$是下界证明</li>
</ul>
</li>
<li>
<p>所以该问题的下界是$ n + \lceil logn \rceil - 2$</p>
</li>
</ul>
<h2 id="Finding-the-Median-the-Strategy"><a class="header-anchor" href="#Finding-the-Median-the-Strategy"></a>Finding the Median: the Strategy</h2>
<ul>
<li>Observation
<ul>
<li>If we can partition the problem the set of keys into 2 subsets: S1, S2, such that any key in S1 is smaller that that of S2, the median must located in the set with more elements
<ul>
<li>Adjusting the Rank</li>
</ul>
</li>
</ul>
</li>
<li>Divide-and-Conquer</li>
</ul>
<h3 id="Partitioning-Larger-and-Smaller"><a class="header-anchor" href="#Partitioning-Larger-and-Smaller"></a>Partitioning: Larger and Smaller</h3>
<ul>
<li>
<p><strong>average-case O(n)</strong></p>
</li>
<li>
<p>Dividing the array to be considered into two subsets: &quot;small&quot;  and &quot;large&quot;, the one with more elements will be processed recursively 运用快排的思想进行分析，只对median所在的那侧进行递归</p>
</li>
<li>
<p>平均情况复杂度分析和快排一样，由于每次只对一侧进行递归， 所以在“所有输入各不相同，所有可能的输入等概率出现”的情况下，平均情况复杂度为：（ 在此情况下pivot在中间 ）<br>
$$<br>
n + n/2 + n/4 + \cdots \in O(n)<br>
$$</p>
</li>
</ul>
<h3 id="Partition-improved-the-strategy"><a class="header-anchor" href="#Partition-improved-the-strategy"></a>Partition improved: the strategy</h3>
<ul>
<li><strong>worst-case O(n)</strong></li>
<li>方法和解释见书上</li>
</ul>
<p>$ W(n) &lt;= 6( \frac n 5 ) + W( \frac n 5 ) + 4r + W(7R + 2)$</p>
<ul>
<li>分析见书上</li>
</ul>
<h3 id="Lower-Bound-by-Adversary"><a class="header-anchor" href="#Lower-Bound-by-Adversary"></a>Lower Bound by Adversary</h3>
<h4 id="Crucial-Comparison"><a class="header-anchor" href="#Crucial-Comparison"></a>Crucial Comparison</h4>
<ul>
<li>A crucial comparison
<ul>
<li>Establishing the relation of some <em>x</em> to the median</li>
</ul>
</li>
<li>Def( for a comparison involving a key <em>x</em> )
<ul>
<li><strong>Crucial Comparison for x</strong>: the first comparison between <em>x</em> and <em>y</em>, for some *y * &gt;= median, or <em>x</em> &lt; <em>y</em> for some <em>y</em> &lt;= median</li>
<li><strong>Non-Crucial Comparison for x</strong>: the first comparison between <em>x</em> and <em>y</em>, where <em>x</em> &gt; median and  <em>y</em> &lt; median, or vise versa</li>
</ul>
</li>
</ul>
<h1 id="Lower-Bound-for-Selection-Median-Problem"><a class="header-anchor" href="#Lower-Bound-for-Selection-Median-Problem"></a>Lower Bound for Selection Median Problem</h1>
<ul>
<li>
<p>Theorem:</p>
<ul>
<li>Any algorithm to find the <strong>median</strong> of n keys ( for odd n 偶数情况更复杂,但没什么新思想,所以不考虑 ) by comparison of keys must  do at least $3n/2 - 3/2$​​ comparisons in the worst case</li>
</ul>
</li>
<li>
<p>Argument</p>
<ul>
<li>
<p>Adversary strategy构造这样一个输入: 中位数在最后, 而前N-1个元素,在两两比较时,比较的结果不能与之前的结果构成传递关系( 即 不会出现x &gt; y, y &gt; z,使得你可以节省一次x和z的比较 ),</p>
<ul>
<li>算法对前N - 1个元素,要比较至少 ( N-1 )/ 2 次( 即两两都是没比过的元素进行比较,一共 (N - 1 )/ 2  组 ), 而最后一个树(它是中位数)需要和前N-1个元素比较,这就是最坏情况</li>
</ul>
</li>
</ul>
</li>
<li>
<p>$ \frac {n - 1}  2 + n - 1 = \frac {3n} 2 - \frac 3 2$</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>L8 logn search</title>
    <url>/2022/09/26/L8-logn-search/</url>
    <content><![CDATA[<h1 id="Binary-Search-Generalized"><a class="header-anchor" href="#Binary-Search-Generalized"></a>Binary Search Generalized</h1>
<p>Outline：</p>
<ul>
<li>Red-Black Tree</li>
</ul>
<span id="more"></span>
<h1 id="Balanced-Binary-Search-Tree"><a class="header-anchor" href="#Balanced-Binary-Search-Tree"></a>Balanced Binary Search Tree</h1>
<h2 id="binary-search-tree"><a class="header-anchor" href="#binary-search-tree"></a>binary search tree</h2>
<ul>
<li>Def
<ul>
<li>2-Tree</li>
<li>左子树的所有值比根节点小，右子树的所有值比根节点大（如果properly drawn的话，会很清楚 ）</li>
</ul>
</li>
</ul>
<h2 id="Red-Black-Tree"><a class="header-anchor" href="#Red-Black-Tree"></a>Red-Black Tree</h2>
<ul>
<li>Def (基于二叉搜索树，附加一些性质)
<ul>
<li>If T is a <strong>binary search tree</strong> in which each node has a color, red or black, and  all external nodes are black, then T is a <strong>red-black tree</strong> if and only if:
<ul>
<li>[Color constraint] No red node has a red child</li>
<li>[Black height constraint] The <strong>black length</strong> of all external paths from a given node <em>u</em> is the same(the black height of <em>u</em>)</li>
<li>The root is black</li>
</ul>
</li>
<li><strong>Almost</strong>-red-black tree(ARB tree)
<ul>
<li>Root is red, satisfying the other constraints</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Recursive-Definition-of-RBT"><a class="header-anchor" href="#Recursive-Definition-of-RBT"></a>Recursive Definition of RBT</h3>
<p>(a red black tree of black height  <em>h</em> is denoted as $RB_h$</p>
<ul>
<li>Def:
<ul>
<li>An external node is an $RB_0$​ tree, and the node is black.</li>
<li>A binary tree is an $ARB_h$( $h \ge 1$ )tree if:
<ul>
<li>Its root is red,and</li>
<li>Its left and right subtrees are each an $RB_{h-1}$ tree.</li>
</ul>
</li>
<li>A binary tree is an $RB_h$ tree if:
<ul>
<li>Its root is black, and</li>
<li>Its left and right subtrees are each either an $RB_{h-1}$​ tree or an $ARB_{h}$​ tree.​</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Properties-of-Red-Black-Tree"><a class="header-anchor" href="#Properties-of-Red-Black-Tree"></a>Properties of Red-Black Tree</h3>
<ul>
<li>The <strong>black height</strong> of any $RB_h$ tree or $ARB_h$ is well-defined and is <em>h</em>.</li>
<li>Let <em>T</em> be an $RB_h$ tree, then:
<ul>
<li><em>T</em> has at most $2^h-1$ internal black nodes.</li>
<li><em>T</em> has at most $4^h-1$ in internal nodes.</li>
<li>The depth of any black node is at most twice its black depth.</li>
</ul>
</li>
<li>Let A be an $ARB_h$ tree, then:
<ul>
<li><em>A</em> has at least $2^h-2$ internal black nodes.</li>
<li><em>A</em> has at most $\frac{4^h}{2}-1$ internal nodes.</li>
<li>The depth of any black node is at most twice its black depth.</li>
</ul>
</li>
</ul>
<h3 id="Bound-on-Depth-of-Node-in-RBT"><a class="header-anchor" href="#Bound-on-Depth-of-Node-in-RBT"></a>Bound on Depth of Node in RBT</h3>
<ul>
<li>Let <em>T</em> be a red-black tree with <em>n</em> internal nodes. Then no node has black depth greater than $log(n+1)$, which means that the height of <em>T</em> in the usual sense is at most $2log(n+1)$​.
<ul>
<li>Proof:</li>
<li>Let <em>h</em> be the black height of <em>T</em>. The number of internal nodes, <em>n</em>, is at least the number of internal black nodes, which is at least $2^h-1$​, so $h \le log(n+1)$​​. The node with greatest depth is some external node. All external nodes are with black depth <em>h</em>. So, the depth is at most $2h$​.</li>
</ul>
</li>
</ul>
<h2 id="Deletion"><a class="header-anchor" href="#Deletion"></a>Deletion</h2>
<ul>
<li>Logical: 删除节点的内容</li>
<li>Structural：删除节点，整棵树做修复</li>
</ul>
<h3 id="Complexity-of-Operations-on-RBT"><a class="header-anchor" href="#Complexity-of-Operations-on-RBT"></a>Complexity of Operations on RBT</h3>
<ul>
<li>With reasonable implementation
<ul>
<li>A new node can be inserted correctly in a red-black tree with <em>n</em> nodes in $\Theta(logn)$​ time in the worst-case</li>
<li>Repairs for deletion do $O(1)$ structural changes, but may do $O(logn)$color changes</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>L9 Hashing</title>
    <url>/2021/08/02/L9-Hashing/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>The searching problem
<ul>
<li>The ambition of hashing</li>
</ul>
</li>
<li>Hashing
<ul>
<li>Brute force table: direct addressing</li>
<li>Basic idea of hashing</li>
</ul>
</li>
<li>Collision Handling for Hashing
<ul>
<li>Closed address hashing</li>
<li>Open address hashing</li>
</ul>
</li>
<li>Amortized Analysis
<ul>
<li>Array doubling</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="The-searching-problem"><a class="header-anchor" href="#The-searching-problem"></a>The searching problem</h1>
<h2 id="Cost-for-Searching"><a class="header-anchor" href="#Cost-for-Searching"></a>Cost for Searching</h2>
<ul>
<li>Brute force
<ul>
<li>$O(n)$</li>
</ul>
</li>
<li>Balanced BST
<ul>
<li>$O(logn)$</li>
</ul>
</li>
<li><strong>Hashing --- almost constant time</strong>
<ul>
<li>$O( 1 + \alpha)$</li>
</ul>
</li>
<li>&quot;Mission impossible&quot;
<ul>
<li>$O(1)$​</li>
</ul>
</li>
</ul>
<h1 id="Hashing"><a class="header-anchor" href="#Hashing"></a>Hashing</h1>
<ul>
<li>universe of keys: 所有可能的键</li>
<li>actual keys：实际的键</li>
</ul>
<h2 id="Brute-force-table-direct-addressing"><a class="header-anchor" href="#Brute-force-table-direct-addressing"></a>Brute force table: direct addressing</h2>
<ul>
<li>给所有 universe keys 都分配一个位置。 用超多的空间</li>
</ul>
<h2 id="Basic-idea-of-hashing"><a class="header-anchor" href="#Basic-idea-of-hashing"></a>Basic idea of hashing</h2>
<ul>
<li>Index distribution
<ul>
<li>Hash Function $H(x) = k$</li>
</ul>
</li>
<li>Collision handling</li>
</ul>
<h1 id="Collision-Handling-for-Hashing"><a class="header-anchor" href="#Collision-Handling-for-Hashing"></a>Collision Handling for Hashing</h1>
<ul>
<li>规定<em>m</em>为哈希表大小， <em>n</em>为表中元素个数</li>
</ul>
<h2 id="Closed-address-hashing"><a class="header-anchor" href="#Closed-address-hashing"></a>Closed address hashing</h2>
<ul>
<li>
<p>也称为Chaining</p>
</li>
<li>
<p>Each address is a <strong>linked list</strong></p>
</li>
<li>
<p>Insert to the head of the list( 链表不是常数时间寻址 )</p>
</li>
<li>
<p>Assumption - simple uniform hashing</p>
<ul>
<li>For $j=0,1,2,\dots, m-1$​​, the average length of the list at $E[j]$​​​ is <em>n/m</em></li>
</ul>
</li>
</ul>
<h3 id="Unsuccessful-Search"><a class="header-anchor" href="#Unsuccessful-Search"></a>Unsuccessful Search</h3>
<ul>
<li>
<p>The average cost for an unsuccessful search</p>
<ul>
<li>
<p>Any key that is not in the table is equally likely to hash to any of the <em>m</em> address</p>
</li>
<li>
<p>Total cost $\Theta(1+n/m)$​</p>
<ul>
<li>
<p>The average cost to determine that the key is not in the $E[h(k)]$ is the cost to search to the end of the list, which is <em>n/m</em></p>
</li>
<li>
<p><em>1</em>是算哈希， <em>n/m</em>是链表平均长度</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Successful-Search"><a class="header-anchor" href="#Successful-Search"></a>Successful Search</h3>
<ul>
<li>
<p>For successful search( assuming that $x_i$ is the $i^{th}$  element inserted into the table, $i=1,2,\dots,n$ )</p>
<ul>
<li>
<p>For each <em>i</em>, the probability of that $x_i$​ is searched is <em>1/n</em></p>
</li>
<li>
<p>For a specific $x_i$​​, the number of elements examined in a successful search is <em>t+1</em>, where <em>t</em> is the number of elements inserted into the same list as $x_i$, <strong>after</strong> $x_i$​​​​​​ has been inserted(即链表里在该元素之前的元素的个数).<br>
$$<br>
1 + \frac 1 n \sum\limits_{i=1}^{n}{(1+t)}<br>
$$</p>
</li>
<li>
<p>And for any <em>j</em>, the probability of that $x_j$ is inserted into the same list of $x_i$ is <em>1/m</em>. So, the cost is:</p>
<p>$$<br>
1 + \frac 1 n \sum\limits_{j=i+1}^{n}{\frac 1 m}<br>
$$</p>
</li>
</ul>
</li>
<li>
<p>The average cost of a successful search:</p>
<ul>
<li>Define $\alpha = n/m$ as <em>load factor</em>, The average cost of a successful search is:<br>
$$<br>
\frac 1 n { ( 1 + \sum\limits_{j = i + 1}^n {\frac 1 m} )} = 1 + \frac 1 {nm} {\sum\limits_{i = 1}^n {(n-i)}} = 1 + \frac 1 {nm} \sum_{i=1}^{n-1}i = 1 + \frac {n-1} {2m} = 1 + \frac \alpha 2 - \frac \alpha {2n} = \Theta( 1 + \alpha )<br>
$$</li>
</ul>
</li>
</ul>
<h2 id="Open-address-hashing"><a class="header-anchor" href="#Open-address-hashing"></a>Open address hashing</h2>
<ul>
<li>All elements  are stored in the  hash table
<ul>
<li>No linked list is used</li>
<li>The <em>load factor</em> $\alpha$ can't be larger than 1</li>
</ul>
</li>
<li>Collision is settled by &quot;rehashing&quot;
<ul>
<li>A function is used to get a new hashing address for each collided address
<ul>
<li>The hash table slots are <em>probed</em> successively, until a valid location is found.</li>
</ul>
</li>
</ul>
</li>
<li>Th probe sequence can be seen as a permutation of $(0,1,2,\dots,m-1)$</li>
</ul>
<h3 id="Commonly-Used-Probing"><a class="header-anchor" href="#Commonly-Used-Probing"></a>Commonly Used Probing</h3>
<ul>
<li>
<p>Linear probing:</p>
<ul>
<li>Given an ordinary hash function <em>h'</em>, which is called an auxiliary hash function, the hash function is:( clustering may occur )<br>
$$<br>
h(k,i) = (h'(k)+i)\quad mod \quad m \quad ( i = 0,1, \dots, m-1 )<br>
$$</li>
</ul>
</li>
<li>
<p>Quadratic Probing:</p>
<ul>
<li>Given auxiliary function <em>h'</em> and nonzero auxiliary constant $c_1$ and $c_2$​, the hash function is: (secondary clustering may occur)<br>
$$<br>
h(k,i) = (h'(k)+c_1 i + c_2 i^2)\quad mod \quad m \quad ( i = 0,1, \dots, m-1<br>
$$</li>
</ul>
</li>
<li>
<p>Double hashing:</p>
<ul>
<li>Given auxiliary functions <em>h_1</em> and <em>h_2</em>, the hash function is:<br>
$$<br>
h(k,i) = (h_1(k)+i h_2(k))\quad mod \quad m \quad ( i = 0,1, \dots, m-1<br>
$$</li>
</ul>
</li>
</ul>
<h4 id="Equally-Likely-Permutations"><a class="header-anchor" href="#Equally-Likely-Permutations"></a>Equally Likely Permutations</h4>
<ul>
<li>Assumption
<ul>
<li>Each key is equally likely to have any of the <em>m!</em> permutations of $(1,2,\dots,m)$​ as​ its probe sequence</li>
</ul>
</li>
<li>Note
<ul>
<li>Both linear and quadratic probing have only <em>m</em> distinct probe sequence, as determined by the first probe.(m个格子的合法排列)</li>
</ul>
</li>
</ul>
<h3 id="Unsuccessful-Search-2"><a class="header-anchor" href="#Unsuccessful-Search-2"></a>Unsuccessful Search</h3>
<ul>
<li>
<p>The average number of probes in an unsuccessful search is at most $1/(1-\alpha )$​ $(\alpha = n/m &lt; 1)$</p>
<ul>
<li>
<p>Assuming uniform hashing</p>
<p>The probability of  the first probed position being  occupied is <em>n/m</em>, and that of the $j^{th}(j&gt;1)$ position occupied is $\frac {n-j+1}{m-j+1}$​​. So the probability of the number of probed no less than <em>i</em> will be:(概率论知识)<br>
$$<br>
\frac n m \cdot \frac {n-1} {m-1} \cdot {n-1} {m-2} \cdots \cdot \frac {n-i+2} {m-i+2} \le { (\frac n m )}^{i-1} = \alpha ^{i-1}<br>
$$</p>
<p>The average number of probe is: $\sum\limits _{i=1} ^ \infty {\alpha ^ {i - 1}} = \sum\limits _{i=0} ^ \infty {\alpha ^ {i }} = \frac {1} {1-\alpha}$​ （其实上界是m，因为一共m个格子。 这里做了放大，但这个放大得到的上界还是比较 tight的）</p>
</li>
</ul>
</li>
</ul>
<h3 id="Successful-Search-2"><a class="header-anchor" href="#Successful-Search-2"></a>Successful Search</h3>
<ul>
<li>
<p>The average number of probes in an successful search is at most $\frac  1 \alpha ln \frac 1 {1-\alpha}$ ($\alpha = n /m &lt;1$​)​</p>
<ul>
<li>
<p>Assuming uniform hashing</p>
<p>To search for the $(i+1)^{th}$ inserted element in the table, the cost is the same as that for inserting it when there are just <em>i</em> elements in the table. At that time, $\alpha = \frac i m$. So the cost is( 用 unsuccessful的结论 )  $\frac 1 {1- \frac i m}$ = $\frac m {m-i}$​,<br>
$$<br>
\frac 1 n \sum\limits_{i=0}^{n-1} \frac m {m-i} = \frac m n \sum\limits _{i=0}^{n-1} \frac 1 {m-i} = \frac 1 \alpha \sum\limits _{i=m-n+1}^{m} \frac 1 i \le \frac 1 \alpha \int _{m-n} ^m {\frac {dx} x} = \frac 1 \alpha ln \frac m {m-n} = \frac 1 \alpha ln \frac 1 {1-\alpha}<br>
$$</p>
</li>
</ul>
</li>
</ul>
<h1 id="Amortized-Analysis"><a class="header-anchor" href="#Amortized-Analysis"></a>Amortized Analysis</h1>
<h2 id="Array-doubling"><a class="header-anchor" href="#Array-doubling"></a>Array doubling</h2>
<ul>
<li>顾名思义</li>
</ul>
<h3 id="Worst-case-Analysis"><a class="header-anchor" href="#Worst-case-Analysis"></a>Worst-case Analysis</h3>
<ul>
<li>
<p>For <em>n</em> execution of insertion operations</p>
<ul>
<li>Note that the expansion is required during the $i^{th}$​ operation only if $i = 2^{th}$​, and the cost of the $i^{th}$​ operation $ c_i = i $​( if <em>i - 1</em> is exactly the power of 2 ) or $c_i = 1 $ ​(otherwise)​</li>
</ul>
<p>So the total cost is: $\sum\limits <em>{i=1} ^n c</em>{i} \le n + \sum\limits _{j=0} ^{\lfloor logn \rfloor} 2^j &lt; n + 2n = 3n$</p>
</li>
</ul>
<h3 id="Amortized-Analysis-Why"><a class="header-anchor" href="#Amortized-Analysis-Why"></a>Amortized Analysis- Why?</h3>
<ul>
<li>Unusually expensive operations</li>
<li>Relation between expensive and usual operations
<ul>
<li>Each piece of the doubling cost corresponds to some previous insert</li>
</ul>
</li>
</ul>
<h3 id="Amortized-Analysis-How"><a class="header-anchor" href="#Amortized-Analysis-How"></a>Amortized Analysis- How?</h3>
<ul>
<li>
<p><strong>Amortized equation:</strong></p>
<p><em>amortized cost = actual cost + accounting cost</em></p>
</li>
<li>
<p>Design goals for accounting cost</p>
<ul>
<li>In <strong>any</strong> legal sequence of operations, the sum of the accounting costs is <strong>nonnegative</strong></li>
<li>The amortized cost of each operation is fairly regular, in spite of the wide fluctuate possible for the actual cost of individual operations</li>
</ul>
</li>
<li>
<p>Examples:</p>
<ol>
<li>Multi-pop Stacks</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th>Amortized</th>
<th>Actual</th>
<th>Accounting</th>
</tr>
</thead>
<tbody>
<tr>
<td>Push</td>
<td>2</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Multi-pop</td>
<td>0</td>
<td>k</td>
<td>-k</td>
</tr>
</tbody>
</table>
<ul>
<li>相当于每个元素在出生的时候就要记下它死亡的时候的代价</li>
</ul>
<ol start="2">
<li>Binary Counter</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th>Amortized</th>
<th>Actual</th>
<th>Account</th>
</tr>
</thead>
<tbody>
<tr>
<td>Set 1</td>
<td>2</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>Set 0</td>
<td>0</td>
<td>1</td>
<td>-1</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h3 id="Amortized-Analysis-Array-Doubling"><a class="header-anchor" href="#Amortized-Analysis-Array-Doubling"></a>Amortized Analysis - Array Doubling</h3>
<table>
<thead>
<tr>
<th></th>
<th>Amortized</th>
<th>Actual</th>
<th>Account</th>
</tr>
</thead>
<tbody>
<tr>
<td>Insert ( normal )</td>
<td>3</td>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>Insert ( doubling )</td>
<td>3</td>
<td>k+1</td>
<td>-k + 2</td>
</tr>
</tbody>
</table>
<ul>
<li><em>k</em> is the number of elements upon doubling</li>
<li><em>-k+2</em>: 清除前k个元素的代价, 新插入的元素要付出2的代价</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Lexical Analysis</title>
    <url>/2022/09/13/Lexical-Analysis/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Intro</li>
<li>Language</li>
<li>Pattern</li>
<li>Token</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<ul>
<li>
<p><strong>lexical analysis</strong>: 词法分析器( Lexical Analyser, or <strong>Scanner</strong> )将源程序按字符流读入, 按照模式匹配映射成一个个 lexeme( <strong>词素</strong> ), 再将lexeme转化成如下形式的token( <strong>词法单元</strong> ):</p>
<p><strong>&lt; token-name, attribute-value &gt;</strong></p>
<ul>
<li>当一串字符能模式匹配多个词素时, 必须通过属性来传递附加的信息。</li>
<li>token-name 表示某种词法单位的抽象符号. 语法分析器通过token-name即可确定token sequence的结构</li>
<li>attribute-value 指向符号表的一项, 用于语义分析和代码生成</li>
</ul>
</li>
<li>
<p>Scanner由Parser调用, 需要的时候不断读取读入并生成Token</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Compilers/Lexical%20Analysis/Interaction%20with%20Parser.png" alt="Interaction with Parser"></p>
</li>
</ul>
<h1 id="Language"><a class="header-anchor" href="#Language"></a>Language</h1>
<ul>
<li>
<p>字母表: 一个有限的符号集合</p>
<ul>
<li>二进制 {0, 1}</li>
<li>ASCII</li>
<li>Unicode</li>
<li>典型的字母表包括字母、数位和标点符号</li>
</ul>
</li>
<li>
<p>串: 字母表中符号组成的一个有穷序列</p>
<ul>
<li>
<p>$|s|$: 串<em>s</em>的长度</p>
</li>
<li>
<p>$\epsilon$: 长度为0的串, 空串</p>
</li>
</ul>
</li>
<li>
<p>语言:给定字母表上一个任意的<u>可数</u>的串的集合.</p>
<ul>
<li>语法正确的C程序的集合, 英语, 汉语</li>
</ul>
</li>
<li>
<p>和串有关的术语(banana)</p>
<ul>
<li>前缀: 从串的尾部删除0个或多个符号后得到的串 (ban、banana、 ε)</li>
<li>后缀: 从串的开始处删除0个或多个符号后得到的串 (nana、banana、ε)</li>
<li>子串: 删除串的某个前缀和某个后缀得到的串 (banana、nan、 ε)</li>
<li>真前缀, 真后缀, 真子串:既不等于原串，也不等于空 串的前缀、后缀、子串</li>
<li>子序列: 从原串中删除0个或者多个符号后得到的串 (baan)</li>
</ul>
</li>
<li>
<p>串的运算:</p>
<ul>
<li>连接(concatenation): x和y的连接的就是把y附加到x的后面形成的串, 记作xy
<ul>
<li>x=dog, y=house, xy=doghouse</li>
</ul>
</li>
<li>指数运算(幂运算): $s_0=\epsilon$ , $s_1=s$ , $s_i=s^{i-1}s$
<ul>
<li>$x$=dog , $x^0$=ε , $x^1$=dog , $x^3$=dogdogdog</li>
</ul>
</li>
</ul>
</li>
<li>
<p>语言上的运算:</p>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Def</th>
</tr>
</thead>
<tbody>
<tr>
<td>L和M的并</td>
<td>$L \cup M = { s \</td>
</tr>
<tr>
<td>L和M的连接</td>
<td>$LM = {st \</td>
</tr>
<tr>
<td>L的Kleene闭包</td>
<td>$L^* = \cup_{i=0}^\infty L^i$</td>
</tr>
<tr>
<td>L的正闭包</td>
<td>$L^+ = \cup_{i=1}^\infty L^i$</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h1 id="Pattern"><a class="header-anchor" href="#Pattern"></a>Pattern</h1>
<ul>
<li>Parser对输入的字符串进行<strong>模式匹配</strong>, 得到lexeme</li>
<li>模式( <strong>Pattern</strong> )可以用<a href="https://lyk-love.cn/2022/09/11/Regular-Expression/"><strong>正则表达式</strong>( Regular Expression )</a>来表示.
<ul>
<li>面对复杂的语言时, 正则也会变得极其复杂, 为此可以用<a href="https://lyk-love.cn/2022/09/11/Finite-Machine/">NFA或DFA</a>来表示模式.</li>
</ul>
</li>
<li>可以证明, 正则, NFA, DFA是等价的, 可以<a href="https://lyk-love.cn/2022/03/26/Transformation%20of%20RE,%20NFA,%20DFA/?highlight=transfor">相互转换</a></li>
</ul>
<h2 id="保留字和标识符的识别"><a class="header-anchor" href="#保留字和标识符的识别"></a>保留字和标识符的识别</h2>
<p>在很多程序设计语言中，保留字也符合标识符的模式, 识别标识符的状态转换图也会识别保留字.</p>
<p>解决方法:</p>
<ul>
<li>在符号表中预先填写保留字，并指明它们不是普通标识符</li>
<li>为关键字/保留字建立单独的状态转换图. 并设定保留字的优先级高于标识符</li>
</ul>
<h1 id="Token"><a class="header-anchor" href="#Token"></a>Token</h1>
<table>
<thead>
<tr>
<th>Token</th>
<th>Description</th>
<th>Lexeme Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>if</td>
<td>字符i, f</td>
<td>if</td>
</tr>
<tr>
<td>else</td>
<td>字符e, l, s, e</td>
<td>else</td>
</tr>
<tr>
<td>comparison</td>
<td>&lt;, &gt;, &lt;=, !=等比较运算符</td>
<td>&lt;=, !=</td>
</tr>
<tr>
<td>id</td>
<td>字母开头的字母/数字串</td>
<td>Po, score, D2</td>
</tr>
<tr>
<td>number</td>
<td>任何数字常量</td>
<td>3.1415, 0, 6.02e42</td>
</tr>
<tr>
<td>literal</td>
<td>在<code>&quot;&quot;</code>之间, 除<code>&quot;&quot;</code>以外的任何字符</td>
<td>&quot;core dumped&quot;</td>
</tr>
</tbody>
</table>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<p>字符串<code>E = M * C ** 2</code>对应的Token:</p>
<ul>
<li><code>&lt;id, 指向符号表中</code>E<code>的条目的指针&gt;</code></li>
<li><code>&lt;assign_op&gt;</code></li>
<li><code>&lt;id, 指向符号表中</code>M<code>的条目的指针&gt;</code></li>
<li><code>&lt;mult_op&gt;</code></li>
<li><code>&lt;id, 指向符号表中C的条目的指针&gt;</code></li>
<li><code>&lt;exp_op&gt;</code></li>
<li><code>&lt;number, 整数值2&gt;</code></li>
</ul>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Compilers</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Programming</title>
    <url>/2022/05/05/Linux-Programming/</url>
    <content><![CDATA[<p>Outline：</p>
<ul>
<li>Linux文件操作api</li>
</ul>
<span id="more"></span>
<h1 id="Linux-File"><a class="header-anchor" href="#Linux-File"></a>Linux File</h1>
<h2 id="File-types"><a class="header-anchor" href="#File-types"></a>File types</h2>
<p>从细节来说，文件类型分为:</p>
<ul>
<li>regular file</li>
<li>character special file： 与设备进行交互的文件，按字符IO，如终端文件tty</li>
<li>block special file: 同上，但是按块IO</li>
<li>管道文件/fifo ： 用于进程间通信</li>
<li>socket：表示一个socket连接</li>
<li>symbolic link：符号链接</li>
<li>directory (  目录也是一种文件，我们只是把目录和文件分开讨论 )</li>
</ul>
<h2 id="File-Structure"><a class="header-anchor" href="#File-Structure"></a>File  Structure</h2>
<p>File  Structure:</p>
<ul>
<li>Byte stream;</li>
<li>no particular internal structure</li>
</ul>
<h2 id="FIle-Descripter"><a class="header-anchor" href="#FIle-Descripter"></a>FIle Descripter</h2>
<p>Linux中的文件描述符和文件指针FILE *的区别什么？</p>
<ol>
<li>文件描述符：在Linux系统中打开文件就会获得文件描述符，它是很小的正整数。每个进程在PCB(Process Control Block)中保存着一份文件描述表，文件描述符就是这个文件描述符的索引，每个表项都有一个指向已打开文件的指针。</li>
<li>文件指针：C语言中使用文件指针作为I/O的句柄，文件指针指向进程用户区中的一个被称为FILE结构的数据结构。FILE结果包括一个缓冲区和一个文件描述符。而文件描述符是文件描述符表的一个索引，因此从某种意义上文件指针就是句柄的句柄</li>
</ol>
<h2 id="Basic-I-O-System-Calls"><a class="header-anchor" href="#Basic-I-O-System-Calls"></a>Basic I/O System Calls</h2>
<ul>
<li>File descriptor</li>
<li>Basic I/O:
<ul>
<li>open/creat, close, read, write, lseek</li>
<li>dup/dup2</li>
<li>fcntl</li>
<li>ioctl</li>
</ul>
</li>
</ul>
<h2 id="File-descriptor"><a class="header-anchor" href="#File-descriptor"></a>File descriptor</h2>
<p>File descriptor:</p>
<ul>
<li>A small non-negative integer
<ul>
<li><code>int fd;</code></li>
</ul>
</li>
<li><strong>是thread local的</strong></li>
<li>在UNIX中用于访问文件,  也可以将它作为指向文件对象的指针</li>
<li>in <code>&lt;unistd.h&gt;</code>
<ul>
<li><strong>STDIN_FILENO: 0</strong></li>
<li><strong>STDOUT_FILENO : 1</strong></li>
<li><strong>STDERR_FILENO: 2</strong></li>
</ul>
</li>
<li>进程总是会打开0,1,2这三个文件描述符</li>
</ul>
<p>General steps of file operation:</p>
<ol>
<li>open</li>
<li>read/write</li>
<li>[lseek]</li>
<li>close</li>
</ol>
<h2 id="File-Name-Suffix"><a class="header-anchor" href="#File-Name-Suffix"></a>File Name Suffix</h2>
<table>
<thead>
<tr>
<th>suffix</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>.c</td>
<td>C source code which must be preprocessed</td>
</tr>
<tr>
<td>.i</td>
<td>C source code which should not be preprocessed</td>
</tr>
<tr>
<td>.cc.cp.cpp.CPP. c++ .C .cxx</td>
<td>C++sourcecodewhichmustbepreprocessed</td>
</tr>
<tr>
<td>.ii</td>
<td>C++ source code which should not be preprocessed</td>
</tr>
<tr>
<td>.h</td>
<td>C or C++ header file to be turned into a precompiled header</td>
</tr>
<tr>
<td>.H .hh</td>
<td>C++ header file to be turned into a precompiled header</td>
</tr>
<tr>
<td>.s</td>
<td>Assembler code</td>
</tr>
<tr>
<td>.S</td>
<td>Assembler code which must be preprocessed</td>
</tr>
<tr>
<td>.o</td>
<td>Object file</td>
</tr>
<tr>
<td>.a</td>
<td>Static library file (archive file)</td>
</tr>
<tr>
<td>.so</td>
<td>Dynamic library file (shared object)</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="File-Permission"><a class="header-anchor" href="#File-Permission"></a>File Permission</h2>
<table>
<thead>
<tr>
<th>Perm</th>
<th>File</th>
<th>Directory</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>User can read contents of file</td>
<td>User can list the contents of the directory</td>
</tr>
<tr>
<td>w</td>
<td>User can change contents of file</td>
<td>User can change the contents of the directory</td>
</tr>
<tr>
<td>x</td>
<td>User can execute file as a command</td>
<td>User can cd to directory and can use it in PATH</td>
</tr>
<tr>
<td>SUID</td>
<td><strong>Program runs with effective user ID of owner</strong></td>
<td></td>
</tr>
<tr>
<td>SGID</td>
<td>Program runs with effective group ID of owner</td>
<td>Files created in directory inherit the same group ID as the directory</td>
</tr>
<tr>
<td>Sticky bit</td>
<td></td>
<td>Only the owner of the file and the owner of the directory may delete files in this directory</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th><strong>mode</strong></th>
<th><strong>含义</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>S_IRUSR (00400)</td>
<td>Read by owner</td>
</tr>
<tr>
<td>S_IWUSR (00200)</td>
<td>Write by owner</td>
</tr>
<tr>
<td>S_IXUSR (00100)</td>
<td>Execute by owner</td>
</tr>
<tr>
<td>S_IRWXU(00700)</td>
<td>Read, write and execute by owner</td>
</tr>
<tr>
<td>S_IRGRP (00040)</td>
<td>Read by group</td>
</tr>
<tr>
<td>S_IWGRP (00020)</td>
<td>Write by group</td>
</tr>
<tr>
<td>S_IXGRP (00010)</td>
<td>Execute by group</td>
</tr>
<tr>
<td>S_IRWXG (00070)</td>
<td>Read, write and execute by group</td>
</tr>
<tr>
<td>S_IROTH (00004)</td>
<td>Read by others</td>
</tr>
<tr>
<td>S_IWOTH (00002)</td>
<td>Write by others</td>
</tr>
<tr>
<td>S_IXOTH (00001)</td>
<td>Execute by others</td>
</tr>
<tr>
<td>S_IRWXO (00007)</td>
<td>Read, write and execute by others</td>
</tr>
<tr>
<td>S_ISUID(04000)</td>
<td>Set user ID on execution</td>
</tr>
<tr>
<td>S_ISGID(02000)</td>
<td>Set group ID on execution</td>
</tr>
<tr>
<td>S_ISVTX(01000)</td>
<td>Saved-text bit (sticky bit)</td>
</tr>
</tbody>
</table>
<p>Example: testing file permission:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (buf.st_mode &amp; S_IRUSR)</span><br><span class="line">	<span class="built_in">printf</span>(“readable by owner”);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">printf</span>(“unreadable by owner”);</span><br></pre></td></tr></table></figure>
<h3 id="umask"><a class="header-anchor" href="#umask"></a>umask</h3>
<p><code> umask</code>：  文件权限屏蔽字,  是用户在建立文件或目录时需要减掉的权限</p>
<ul>
<li>
<p><strong>file persission = mode &amp; ~umask</strong></p>
</li>
<li>
<p>命令行工具：<code> umask</code></p>
<ul>
<li><code>umask -S</code>:  以符号形式显示</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ umask //表明group和others没有2（写）权限</span><br><span class="line">022</span><br><span class="line"></span><br><span class="line">//或者</span><br><span class="line">❯ umask -S </span><br><span class="line">u=rwx,g=rx,o=rx</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="type">mode_t</span> <span class="title function_">umask</span><span class="params">(<span class="type">mode_t</span> mask)</span>; <span class="comment">//为进程设置文件存取权限屏蔽字，并返回以前的值</span></span><br></pre></td></tr></table></figure>
<p>Regular files:</p>
<table>
<thead>
<tr>
<th>permissions</th>
<th>symbol</th>
<th>number</th>
</tr>
</thead>
<tbody>
<tr>
<td>default permissions</td>
<td><code>rw-rw-rw-</code></td>
<td>666</td>
</tr>
<tr>
<td>umask</td>
<td><code>----w--w-</code></td>
<td>022</td>
</tr>
<tr>
<td>resulting permissions</td>
<td><code>rw-r--r--</code></td>
<td>644</td>
</tr>
</tbody>
</table>
<p>Directories:</p>
<table>
<thead>
<tr>
<th>permissions</th>
<th>symbol</th>
<th>number</th>
</tr>
</thead>
<tbody>
<tr>
<td>default permissions</td>
<td><code>rwxrwxrwx</code></td>
<td>777</td>
</tr>
<tr>
<td>umask</td>
<td><code>----w--w-</code></td>
<td>022</td>
</tr>
<tr>
<td>resulting permissions</td>
<td><code>rwxr-xr-x</code></td>
<td>755</td>
</tr>
</tbody>
</table>
<h3 id="access-function"><a class="header-anchor" href="#access-function"></a>access function</h3>
<p>按实际用户ID和实际组ID测试文件存取权限</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">access</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> mode)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Return: 0 if success; -1 if failure</li>
<li>Parameter‏ <code>mode</code>:
<ul>
<li><code>R_OK</code></li>
<li><code>W_OK</code></li>
<li><code>X_OK</code></li>
<li><code>F_OK</code></li>
</ul>
</li>
</ul>
<h3 id="chmod-fchmod-functions"><a class="header-anchor" href="#chmod-fchmod-functions"></a>chmod/fchmod functions</h3>
<p>Change permissions of a file:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">chmod</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">mode_t</span> mode)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fchmod</span><span class="params">(<span class="type">int</span> fildes, <span class="type">mode_t</span> mode)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Return: 0 if success; -1 if failure</li>
</ul>
<h2 id="File-Attribute"><a class="header-anchor" href="#File-Attribute"></a>File Attribute</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">stat</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">dev_t</span> st_dev; <span class="comment">//device 文件的设备编号</span></span><br><span class="line">  <span class="type">ino_t</span> st_ino; <span class="comment">//inode 文件的i-node</span></span><br><span class="line">  <span class="type">mode_t</span> st_mode; <span class="comment">//protection 文件的类型和存取的权限</span></span><br><span class="line">  <span class="type">nlink_t</span> st_nlink; <span class="comment">//number of hard links 连到该文件的硬链接数目, 刚建立的文件值为1.</span></span><br><span class="line">  <span class="type">uid_t</span> st_uid; <span class="comment">//user ID of owner 文件所有者的用户识别码</span></span><br><span class="line">  <span class="type">gid_t</span> st_gid; <span class="comment">//group ID of owner 文件所有者的组识别码</span></span><br><span class="line">  <span class="type">dev_t</span> st_rdev; <span class="comment">//device type 若此文件为装置设备文件, 则为其设备编号</span></span><br><span class="line">  <span class="type">off_t</span> st_size; <span class="comment">//total size, in bytes 文件大小, 以字节计算</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> st_blksize; <span class="comment">//blocksize for filesystem I/O 文件系统的I/O 缓冲区大小.</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> st_blocks; <span class="comment">//number of blocks allocated 占用文件区块的个数, 每一区块大小为512 个字节.</span></span><br><span class="line">  <span class="type">time_t</span> st_atime; <span class="comment">//time of lastaccess 文件最近一次被存取或被执行的时间, 一般只有在用mknod、utime、read、write 与tructate 时改变.</span></span><br><span class="line">  <span class="type">time_t</span> st_mtime; <span class="comment">//time of last modification 文件最后一次被修改的时间, 一般只有在用mknod、utime 和write 时才会改变</span></span><br><span class="line">  <span class="type">time_t</span> st_ctime; <span class="comment">//time of last change i-node 最近一次被更改的时间, 此参数会在文件所有者、组、权限被更改时更新</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>shell中可以用<code>stat</code>工具</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stat far</span><br><span class="line">  File: far</span><br><span class="line">  Size: 6               Blocks: 8          IO Block: 4096   regular file</span><br><span class="line">Device: 259,8   Inode: 2536724     Links: 1</span><br><span class="line">Access: (0777/-rwxrwxrwx)  Uid: ( 1000/     lyk)   Gid: ( 1001/     lyk)</span><br><span class="line">Access: 2021-11-26 21:31:56.163748288 +0800</span><br><span class="line">Modify: 2021-11-26 21:41:07.306528022 +0800</span><br><span class="line">Change: 2021-11-26 21:59:32.375301046 +0800</span><br><span class="line"> Birth: 2021-11-26 21:31:56.163748288 +0800</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Linux-Signal"><a class="header-anchor" href="#Linux-Signal"></a>Linux Signal</h1>
<pre><code>  1. SIGHUP连接挂断
  2. SIGINT终端中断
  3. SIGKILL终止进程（此信号不能被捕获或忽略）
  4. SIGQUIT终端退出
  5. SIGTERM终止
  6. SIGCHLD子进程已经停止或退出
  7. SIGCONT继续执行暂停进程
  8. SIGSTOP停止执行（此信号不能被捕获或忽略）
  9. SIGTSTP终端挂起
</code></pre>
<h1 id="I-O系统调用"><a class="header-anchor" href="#I-O系统调用"></a>I/O系统调用</h1>
<h3 id="open-creat-Function"><a class="header-anchor" href="#open-creat-Function"></a>open/creat Function</h3>
<p>Open and possibly create a file or device</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> flags, <span class="type">mode_t</span> mode)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">creat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">mode_t</span> mode)</span>; <span class="comment">// equivalent to open with flags: O_CREAT|O_WRONLY|O_TRUNC</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Return: a new file descriptor if success; -1 if failure</li>
</ul>
<h4 id="Parameter‏”flags”"><a class="header-anchor" href="#Parameter‏”flags”"></a>Parameter‏”flags”</h4>
<p>“flags”:‏file‏ access‏ mode</p>
<ul>
<li>定义在 <code>&lt;fcntl.h&gt;</code></li>
<li>分为主标志和副标志， 主标志必须，且是互斥的，即只能选择一种。 副标志是可选的，可以选择多个</li>
<li>标志之间用<code>|</code>隔开</li>
</ul>
<table>
<thead>
<tr>
<th>主标志</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>O_RDONLY</strong></td>
<td><strong>以只读方式打开文件</strong></td>
</tr>
<tr>
<td><strong>O_WRONLY</strong></td>
<td><strong>以只写方式打开文件</strong></td>
</tr>
<tr>
<td><strong>O_RDWR</strong></td>
<td><strong>以可读写方式打开文件</strong></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>副标志</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>O_TRUNC</strong></td>
<td>**若文件存在并且以可写的方式打开时，**此标志会将文件长度清为0，而原来存于该文件的资料也会消失</td>
</tr>
<tr>
<td><strong>O_CREAT</strong></td>
<td><strong>若路径中的文件不存在则自动建立该文件</strong></td>
</tr>
<tr>
<td><strong>O_EXCL</strong></td>
<td>如果与O_CREAT同时设置，此指令会去检查文件是否存在，文件若不存在则建立该文件，否则将导致打开文件错误。此外，若O_CREAT与O_EXCL同时设置，并且将要打开的文件为符号链接，则将导致打开文件失败</td>
</tr>
<tr>
<td><strong>O_APPEND</strong></td>
<td>读写文件从文件尾部开始移动，所写入的数据追加到文件尾</td>
</tr>
</tbody>
</table>
<h4 id="Parameter‏-mode"><a class="header-anchor" href="#Parameter‏-mode"></a>Parameter‏: mode</h4>
<p>mode:  设定新建的文件的权限,    详见下文《File Permission》</p>
<h3 id="close-Funtion"><a class="header-anchor" href="#close-Funtion"></a>close Funtion</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Close a file descriptor</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">close</span><span class="params">(<span class="type">int</span> fd)</span>;</span><br><span class="line">(Return: <span class="number">0</span> <span class="keyword">if</span> success; <span class="number">-1</span> <span class="keyword">if</span> failure)</span><br></pre></td></tr></table></figure>
<p><code>open</code>系统调用：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> fd = <span class="built_in">open</span>(<span class="string">&quot;foo&quot;</span>, O_CREAT, O_WRONLY | O_TRUNC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>open</code>返回<code>file discriptor</code>,这是一个thread local的整数，在UNIX中用于访问文件。 也可以将它作为指向文件对象的指针</p>
</li>
<li>
<p>打开文件过程：</p>
<ol>
<li>检索目录,把它的外存索引节点复制到活动索引节点表。</li>
<li>根据参数<code>mode</code>核对权限,如果非法,则这次打开失败。</li>
<li>当“打开”合法时,为文件分配用户打开文件表项和系统打开文件表项,并为表项设置初值。通过指针建立这些表项与活动索引节点间的联系。把<code>fd</code>,即用户打开文件表中相应文件表项的序号返回给调用者。</li>
</ol>
</li>
<li>
<p>关闭文件过程：</p>
<ol>
<li>根据<code>fd</code>找到用户打开文件表项,再找到系统打开文件表项。释放用户打开文件表项。</li>
<li>把对应系统打开文件表项中的<code>f_count--</code>如果非“0”,说明还有进程共享这一表项,不用释放直接返回;否则释放表项</li>
<li>把活动索引节点中的<code>i_count --</code>,若不为“0”,表明还有用户进程正在使用该文件,不用释放而直接返回,否则在把该活动索引节点中的内容复制回文件卷上的相应索引节点中后,释放该活动索引节点。</li>
</ol>
</li>
<li>
<p>f_count和i_count分别反映进程动态地共享一个文件的两种方式,</p>
<ul>
<li><code>f_count</code>反映不同进程通过同一个系统打开文件表项共享<br>
一个文件的情况;</li>
<li><code>i_count</code>反映不同进程通过不同系统打开文件表项共享一<br>
个文件的情况。</li>
<li>通过两种方式,进程之间既可用相同的位移指针f_offset,<br>
也可用不同位移指针f_offset共享同一个文件。</li>
</ul>
</li>
</ul>
<h3 id="read-write-Function"><a class="header-anchor" href="#read-write-Function"></a>read/write Function</h3>
<p><code>&lt;unistd.h&gt;</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Read from a file descriptor</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br><span class="line">(返回值: )</span><br><span class="line"></span><br><span class="line"><span class="comment">//Write to a file descriptor</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> *buf, <span class="type">size_t</span> count)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>第一个参数为文件描述符</li>
<li>第二个参数指向放置结果的缓冲区</li>
<li>第三个参数是缓冲区大小</li>
<li>返回值：
<ul>
<li><code>read()</code>: 读到的字节数，若已到文件尾为0. 若出错为-1</li>
<li><code>write()</code>: 若成功为已写的字节数. 若出错为-1</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// myCat.c</span></span><br><span class="line"><span class="keyword">while</span> ((n = read(STDIN_FILENO, buf, BUFSIZE)) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (write(STDOUT_FILENO, buf, n) != n)</span><br><span class="line">		err_sys(“write error”);	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n&lt;<span class="number">0</span>)</span><br><span class="line">		err_sys(“read error”);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="例子"><a class="header-anchor" href="#例子"></a>例子</h4>
<p>使用<code>strace</code>跟踪system call</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">echo</span> hello&gt;foo</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">strace <span class="built_in">cat</span> foo</span> </span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">open(<span class="string">&quot;foo&quot;</span>, O_RDonly|O_LARGEFILE) //使用64位偏移量（ O_LARGEFILE ）</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">read</span>(3, <span class="string">&quot;hello\n&quot;</span>, 6  )</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">read</span>(3,<span class="string">&quot;&quot;</span>,4096)</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">close(3)</span></span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">prompt</span></span><br></pre></td></tr></table></figure>
<p>这是书上的输出，我自己manjaro64的打印结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">openat(AT_FDCWD, &quot;foo&quot;, O_RDONLY)       = 3</span><br><span class="line">...</span><br><span class="line">read(3, &quot;hello\n&quot;, 131072)              = 6</span><br><span class="line">write(1, &quot;hello\n&quot;, 6hello)             = 6</span><br><span class="line">read(3, &quot;&quot;, 131072)                     = 0</span><br><span class="line">munmap(0x7f90b3935000, 139264)          = 0</span><br><span class="line">close(3)                                = 0</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>省略了一些输出</p>
<ul>
<li>
<p><code>cat</code>先打开文件准备读取</p>
<ul>
<li>每个进程已经打开了三个文件： <code>std input</code>, <code>std output</code>, <code>std err</code>,其文件描述符分别为<code>0</code>，<code>1</code>，<code>2</code>。 因此<code>open</code>返回<code>3</code></li>
</ul>
</li>
<li>
<p>打开后，<code>cat</code>使用<code>read()</code> system call,</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">read</span><span class="params">(<span class="type">int</span> fd, <span class="type">void</span> * buf, <span class="type">size_t</span> count)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>第一个参数为文件描述符</li>
<li>第二个参数指向放置结果的缓冲区, <code>strace</code>显示了此时的读取结果<code>hello\n</code></li>
<li>第三个参数是缓冲区大小, 在我的电脑上是<code>139264B</code></li>
<li>返回值为其读取的字节数，这里是<code>6</code></li>
</ul>
</li>
<li>
<p>同样能看到，<code>write（）</code>针对文件描述符<code>1</code>，这是标准输出。</p>
<ul>
<li>这是<code>cat</code>要做的事，它可能直接调用<code>write（）</code>，也可能调用库例程<code>printf（）</code>，当然最终还是会调用<code>write（）</code></li>
</ul>
</li>
<li>
<p>然后，<code>cat</code>试图从文件中读取更多内容，但是文件中没有剩余字节，<code>read（）</code>返回0</p>
</li>
<li>
<p>程序知道它已经读取完了文件，因此调用<code>close（）</code>，传入相应的文件描述符（<code>3</code>），该文件因此会关闭</p>
</li>
</ul>
<h3 id="lseek-Function"><a class="header-anchor" href="#lseek-Function"></a>lseek Function</h3>
<p>不按顺序读取和写入</p>
<p>Reposition read/write file offset:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">off_t</span> <span class="title function_">lseek</span><span class="params">(<span class="type">int</span> fildes, <span class="type">off_t</span> offset, <span class="type">int</span> whence)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>Return: the resulting offset location if success; -1 if failure</p>
</li>
<li>
<p>参数 offset 的含义取决于参数 whence：</p>
<ul>
<li>如果 whence 是 SEEK_SET，文件偏移量将被设置为 offset。</li>
<li>如果 whence 是 SEEK_CUR，文件偏移量将被设置为 当前偏移量加上 offset，offset 可以为正也可以为负。</li>
<li>如果 whence 是 SEEK_END，文件偏移量将被设置为文件长度加上 offset，   offset 可以为正也可以为负。</li>
</ul>
</li>
</ul>
<p>使用<code>lseek（）</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">off_t</span> <span class="title function_">lseek</span><span class="params">(<span class="type">int</span> fildes, <span class="type">off_t</span> offset, <span class="type">int</span> whence)</span>;</span><br></pre></td></tr></table></figure>
<p>可以看到，对每个进程打开的文件，OS都会跟踪一个当前偏移量<code>offset</code>。 要么每次读写后隐式更新，要么通过<code>lssek（）</code>指定</p>
<h3 id="dup-dup2-Function"><a class="header-anchor" href="#dup-dup2-Function"></a>dup/dup2 Function</h3>
<p>dup用来复制oldfd所指的文件描述符。但复制成功时返回最小的尚未被使用的文件描述符。若有错误则返回－1，错误代码存入errno中。返回的新文件描述符和参数oldfd指向同一个文件，共享所有的锁定，读写指针，和各项权限或标志位</p>
<p>dup2可以用参数newfd指定新文件描述符的数值。若newfd已经被程序使用，系统就会将其关闭以释放该文件描述符；若newfd与oldfd相等，dup2将返回newfd，而不关闭他。dup2调用成功返回新的文件描述符，出错则返回－1</p>
<ul>
<li>
<p>Duplicate a file descriptor</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">dup</span><span class="params">(<span class="type">int</span> oldfd)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">dup2</span><span class="params">(<span class="type">int</span> oldfd, <span class="type">int</span> newfd)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Return: the new file descriptor if success; -1 if failure</li>
</ul>
</li>
<li>
<p>File sharing</p>
<ul>
<li><strong>Example: redirection</strong>, 步骤详见<em>Using Shell</em>， dup/dup2所做的就是给原有的文件描述符再分配一个复制，由于此时标准输出/输入一半已经关闭，新分配的fd一般就是标准输出/输入，这就实现了重定向</li>
</ul>
</li>
</ul>
<h3 id="fcntl-Function"><a class="header-anchor" href="#fcntl-Function"></a>fcntl Function</h3>
<p>Manipulate a file descriptor，该函数对fd的操作比较全面</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fcntl</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> cmd)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fcntl</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> cmd, <span class="type">long</span> arg)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fcntl</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> cmd, <span class="keyword">struct</span> flock *lock)</span></span>;<span class="comment">//可以对文件加锁</span></span><br><span class="line"><span class="comment">//(返回值: 若成功则依赖于cmd，若出错为-1)</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>The‏ operation‏ is‏ determined ‏by‏&quot;cmd&quot;.</li>
<li>The‏ value‏ of‏&quot;cmd&quot;
<ol>
<li><strong>F_DUPFD</strong>: Duplicate a file descriptor</li>
<li><strong>F_GETFD/F_SETFD</strong>:‏Get/set ‏the‏ file‏d escriptor's</li>
<li><strong>‏close-on exec</strong> flag：执行时是否关闭，文件描述符能否从父进程传递到子进程。</li>
<li>F_GETFL/F_SETFL:‏Get/set ‏the‏ file ‏descriptor's <strong>‏flags</strong>(并不是所有情况都可以setfl的)</li>
<li>F_GETOWN/F_SETOWN: Manage I/O availability signals(告诉当前进程是否I/O传来的信号)(不要求理解深刻)</li>
<li>F_GETLK/F_SETLK/F_SETLKW: Get/set the file lock(暂时不讲)</li>
</ol>
</li>
<li>Example：dup/dup2 and fcntl</li>
</ol>
<h4 id="cmd"><a class="header-anchor" href="#cmd"></a>cmd</h4>
<ul>
<li>
<p>The ‏value ‏of‏ <code>cmd</code>:</p>
<ul>
<li><code>F_DUPFD</code>: Duplicate a file descriptor</li>
<li><code>F_GETFD</code>/<code>F_SETFD</code>:‏Get/set‏the‏file‏descriptor‟s‏close-onexec flag.</li>
<li><code>F_GETFL</code>/<code>F_SETFL</code>:‏Get/set‏the‏file‏descriptor‟s‏flags</li>
<li><code>F_GETOWN</code>/<code>F_SETOWN</code>: Manage I/O availability signals</li>
<li><code>F_GETLK</code>/<code>F_SETLK</code>/<code>F_SETLKW</code>: Get/set the file lock</li>
</ul>
</li>
<li>
<p>Example:</p>
<ul>
<li>dup/dup2 and fcntl</li>
</ul>
</li>
</ul>
<h3 id="ioctl-Function"><a class="header-anchor" href="#ioctl-Function"></a>ioctl Function</h3>
<p>Control devices</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span>  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ioctl</span><span class="params">(<span class="type">int</span> d, <span class="type">int</span> request, ...)</span>;</span><br></pre></td></tr></table></figure>
<h3 id="fsync-Function"><a class="header-anchor" href="#fsync-Function"></a>fsync Function</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fsync</span><span class="params">(<span class="type">int</span> fildes)</span>;</span><br></pre></td></tr></table></figure>
<p>一般来说， 程序执行<code>write（）</code>系统调用时，文件系统会将写入在内存中缓冲一段时间。 要立即写入，需要<code>fsync（）</code></p>
<ul>
<li>强制写回脏数据</li>
</ul>
<h3 id="文件改名"><a class="header-anchor" href="#文件改名"></a>文件改名</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">rename</span><span class="params">(<span class="type">char</span> * oldname, <span class="type">char</span> * newname)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>rename（）</code>是原子操作</li>
</ul>
<h3 id="获取文件属性"><a class="header-anchor" href="#获取文件属性"></a>获取文件属性</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int stat(const char * file_name, struct stat *buf);</span><br></pre></td></tr></table></figure>
<p><code>stat()</code>用来将参数<code>file_name</code> 所指的文件状态, 复制到参数<code>buf </code>所指的结构中</p>
<p><code>stat</code>结构体见上文<em>File Attribute</em></p>
<h3 id="删除文件"><a class="header-anchor" href="#删除文件"></a>删除文件</h3>
<p>shell命令<code>rm</code>使用<code>unlink（）</code>系统调用删除文件：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">unlink</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * pathname)</span>;</span><br></pre></td></tr></table></figure>
<h4 id="change-ownership"><a class="header-anchor" href="#change-ownership"></a>change ownership</h4>
<p>Change ownership of a file</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">chown</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">uid_t</span> owner, <span class="type">gid_t</span> group)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fchown</span><span class="params">(<span class="type">int</span> fd, <span class="type">uid_t</span> owner, <span class="type">gid_t</span> group)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">lchown</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">uid_t</span> owner, <span class="type">gid_t</span> group)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Return: 0 if success; -1 if failure</li>
</ul>
<h3 id="目录操作"><a class="header-anchor" href="#目录操作"></a>目录操作</h3>
<p>仅仅列举函数名:</p>
<ul>
<li><code>mkdir / rmdir</code></li>
<li><code>chdir/fchdir, getcwd</code></li>
<li>Read a directory：
<ul>
<li><code>opendir/closedir</code></li>
<li><code>readdir </code></li>
<li><code>telldir </code></li>
<li><code>seekdir</code></li>
</ul>
</li>
</ul>
<h4 id="Data-structures"><a class="header-anchor" href="#Data-structures"></a>Data structures</h4>
<ul>
<li>
<p><code>DIR</code>: The data type of directory stream objects</p>
<ul>
<li>
<p><code>&lt;dirent.h&gt;</code>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">dirstream</span> <span class="title">DIR</span>;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>struct dirent:</p>
<ul>
<li>Directory item</li>
<li>Defined in <code>&lt;dirent.h&gt;</code></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">ino_t</span> d_ino; <span class="comment">/* inode number */</span></span><br><span class="line"><span class="type">char</span> d_name[NAME_MAX + <span class="number">1</span>]; <span class="comment">/* file name */</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="目录的打开、关闭、读、定位"><a class="header-anchor" href="#目录的打开、关闭、读、定位"></a>目录的打开、关闭、读、定位</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DIR *<span class="title function_">opendir</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">closedir</span><span class="params">(DIR *dir)</span>;</span><br><span class="line"><span class="keyword">struct</span> dirent *<span class="title function_">readdir</span><span class="params">(DIR *dir)</span>;</span><br><span class="line"><span class="type">off_t</span> <span class="title function_">telldir</span><span class="params">(DIR *dir)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">seekdir</span><span class="params">(DIR *dir, <span class="type">off_t</span> offset)</span>;</span><br></pre></td></tr></table></figure>
<h4 id="example"><a class="header-anchor" href="#example"></a>example</h4>
<p>A directory scanning program</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DIR *dp;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">entry</span>;</span></span><br><span class="line"><span class="keyword">if</span> ( (dp = opendir(dir)) == <span class="literal">NULL</span> )</span><br><span class="line">err_sys(…);</span><br><span class="line"><span class="keyword">while</span> ( (entry = readdir(dp)) != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">lstat(entry-&gt;d_name, &amp;statbuf);</span><br><span class="line"><span class="keyword">if</span> ( S_ISDIR(statbuf.st_mode) )</span><br><span class="line">…</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">…</span><br><span class="line">&#125;</span><br><span class="line">closedir(dp);</span><br></pre></td></tr></table></figure>
<h3 id="创建并挂载文件系统"><a class="header-anchor" href="#创建并挂载文件系统"></a>创建并挂载文件系统</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkfs()</span><br><span class="line">mount()</span><br></pre></td></tr></table></figure>
<h1 id="Standard-I-O-Library"><a class="header-anchor" href="#Standard-I-O-Library"></a>Standard I/O Library</h1>
<ul>
<li>
<p>File stream</p>
</li>
<li>
<p>Standard I/O functions</p>
</li>
</ul>
<h2 id="File-Stream"><a class="header-anchor" href="#File-Stream"></a>File Stream</h2>
<ul>
<li>Stream ‏and ‏”FILE” ‏structure:
<ul>
<li><code>FILE* fp; </code></li>
<li>Predefined pointer: stdin, stdout, stderr </li>
</ul>
</li>
<li>Buffered I/O</li>
</ul>
<h3 id="Stream-Buffering-Operations"><a class="header-anchor" href="#Stream-Buffering-Operations"></a>Stream Buffering Operations</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span> <span class="comment">// 如果引入的是标准库，就不是系统调用，系统调用的输入参数一般是文件描述符而不是流指针</span></span></span><br></pre></td></tr></table></figure>
<p>三种缓冲</p>
<ol>
<li>块缓冲（完全缓冲）</li>
<li>行缓冲</li>
<li>无缓冲</li>
</ol>
<p>setbuf用于打开或关闭流缓冲机制，参数buf指向一个长度为BUFSIZ（该常量在<code>&lt;stdio.h&gt;</code>中定义）的缓冲区；如果要关闭缓冲，则将buf设置为NULL即可:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">setbuf</span><span class="params">(FILE *stream, <span class="type">char</span> *buf)</span>;</span><br></pre></td></tr></table></figure>
<p>setvbuf用于精确地设置所需的缓冲类型</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">setvbuf</span><span class="params">(FILE *stream, <span class="type">char</span> *buf, <span class="type">int</span> mode, <span class="type">size_t</span></span></span><br><span class="line"><span class="params">size)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>mode</code>取值如下：</p>
<ul>
<li><code>_IOFBF</code>: 满缓冲</li>
<li><code>_IOLBF</code>: 行缓冲</li>
<li><code>_IONBF</code>: 无缓冲</li>
</ul>
</li>
<li>
<p>如果指定了mode为带缓冲类型，而buf却为NULL，则系统会自动分配BUFSIZ个字节的缓冲区:</p>
</li>
</ul>
<h2 id="Standard-I-O-Functions"><a class="header-anchor" href="#Standard-I-O-Functions"></a>Standard I/O Functions</h2>
<ul>
<li>Stream open/close</li>
<li>Stream read/write
<ul>
<li>每次一个字符的I/O</li>
<li>每次一行的I/O</li>
<li>直接I/O(二进制I/O)</li>
<li>格式化I/O</li>
</ul>
</li>
<li>Stream reposition</li>
<li>Stream flush</li>
</ul>
<h3 id="Stream-open-close"><a class="header-anchor" href="#Stream-open-close"></a>Stream open/close</h3>
<h4 id="Open-a-stream"><a class="header-anchor" href="#Open-a-stream"></a>Open a stream:</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">FILE *<span class="title function_">fopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">const</span> <span class="type">char</span> *mode)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fclose</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure>
<p>Parameter‏ <code>mode</code>:</p>
<ul>
<li><code>r</code>: Open text file for reading.</li>
<li><code>w</code>: Truncate file to zero length or create text file for writing.</li>
<li><code>a</code>: Open for appending.</li>
<li><code>r+</code>: Open for reading and writing.</li>
<li><code>w+</code>: Open for reading and writing. The file is created if it does not exist, otherwise it is truncated.</li>
<li><code>a+</code>: Open for reading and appending. The file is created if does not exist.</li>
</ul>
<h4 id="Close-a-stream"><a class="header-anchor" href="#Close-a-stream"></a>Close a stream</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fclose</span><span class="params">(FILE *fp)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Return: 0 if success; -1 if failure</li>
</ul>
<h3 id="character-operations"><a class="header-anchor" href="#character-operations"></a>character operations</h3>
<h4 id="input-of-a-character"><a class="header-anchor" href="#input-of-a-character"></a>input of a character</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getc</span><span class="params">(FILE *fp)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fgetc</span><span class="params">(FILE *fp)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getchar</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Result: Reads the next character from a stream and returns it as an unsigned char cast to an int, or EOF on end of file or error.</li>
</ul>
<p>Three functions:</p>
<ul>
<li><code>ferror</code></li>
<li><code>feof</code></li>
<li><code>clearerr</code></li>
</ul>
<p><code>ungetc</code> function: push a character back to a stream.</p>
<h4 id="output-of-a-character"><a class="header-anchor" href="#output-of-a-character"></a>output of a character</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">putc</span><span class="params">(<span class="type">int</span> c, FILE *fp)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> c, FILE *fp)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">putchar</span><span class="params">(<span class="type">int</span> c)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Return: the character if success; -1 if failure</li>
</ul>
<h3 id="Line-of-String-operations"><a class="header-anchor" href="#Line-of-String-operations"></a>Line of String operations</h3>
<h4 id="Input-of-a-Line-of-String"><a class="header-anchor" href="#Input-of-a-Line-of-String"></a>Input of a Line of String</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">fgets</span><span class="params">(<span class="type">char</span> *s, <span class="type">int</span> size, FILE *stream)</span>;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">gets</span><span class="params">(<span class="type">char</span> *s)</span>; <span class="comment">//not recommended.</span></span><br></pre></td></tr></table></figure>
<p><code>fgets</code>: reads in at most <strong>size-1</strong> characters from <strong>stream</strong> and stores them into the buffer pointed by <code>s</code>. <strong>Reading stops after an EOF or a new line.</strong>  A <code>\0</code> character is stored at the end of the buffer.</p>
<h4 id="Output-of-a-Line-of-String"><a class="header-anchor" href="#Output-of-a-Line-of-String"></a>Output of a Line of String</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputs</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s, FILE *stream)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">puts</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s)</span>;</span><br></pre></td></tr></table></figure>
<h3 id="Binary-Stream-Input-Output"><a class="header-anchor" href="#Binary-Stream-Input-Output"></a>Binary Stream Input/Output</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">size_t</span> <span class="title function_">fread</span><span class="params">(<span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, FILE *stream)</span>;</span><br><span class="line">size <span class="title function_">fwrite</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *ptr, <span class="type">size_t</span> size, <span class="type">size_t</span> nmemb, FILE *stream)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Return: the number of a items successfully read or written</li>
</ul>
<p>Application:</p>
<ul>
<li>
<p>Read/write a binary array:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> data[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">if</span> ( fwrite(&amp;data[<span class="number">2</span>], <span class="keyword">sizeof</span>(<span class="type">float</span>), <span class="number">4</span>, fp) != <span class="number">4</span> )</span><br><span class="line">err_sys(“fwrite‏error”);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Read/write a structure:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="type">short</span> count; <span class="type">long</span> total; <span class="type">char</span> name[NAMESIZE];</span><br><span class="line">&#125;item;</span><br><span class="line"><span class="keyword">if</span> ( fwrite(&amp;item, <span class="keyword">sizeof</span>(item), <span class="number">1</span>, fp) != <span class="number">1</span>)</span><br><span class="line">err_sys(“fwrite‏error”);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Formatted-I-O"><a class="header-anchor" href="#Formatted-I-O"></a>Formatted I/O</h3>
<p>scanf, fscanf, sscanf functions</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">scanf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fscanf</span><span class="params">(FILE *stream, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sscanf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Use fgets, then parse the string</li>
</ul>
<p>printf, fprintf, sprintf functions:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fprintf</span><span class="params">(FILE *stream, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sprintf</span><span class="params">(<span class="type">char</span> *str, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br></pre></td></tr></table></figure>
<h3 id="Reposition-a-stream"><a class="header-anchor" href="#Reposition-a-stream"></a>Reposition a stream</h3>
<p>fseek, ftell, rewind functions:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fseek</span><span class="params">(FILE *stream, <span class="type">long</span> <span class="type">int</span> offset, <span class="type">int</span> whence)</span>;</span><br><span class="line"><span class="type">long</span> <span class="title function_">ftell</span><span class="params">(FILE *stream)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rewind</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure>
<p>fgetpos, fsetpos functions ( Introduced in ANSI C):</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fgetpos</span><span class="params">(FILE *fp, <span class="type">fpos_t</span> *pos)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fsetpos</span><span class="params">(FILE *fp, <span class="type">const</span> <span class="type">fpos_t</span> *pos)</span>;</span><br></pre></td></tr></table></figure>
<h3 id="Flush-a-stream"><a class="header-anchor" href="#Flush-a-stream"></a>Flush a stream</h3>
<p>把流里的数据立刻写入文件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fflush</span><span class="params">(FILE *stream)</span>;</span><br></pre></td></tr></table></figure>
<h3 id="Stream-and-File-Descriptor"><a class="header-anchor" href="#Stream-and-File-Descriptor"></a>Stream and File Descriptor</h3>
<p>确定流使用的底层文件描述符:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fileno</span><span class="params">(FILE *fp)</span>;</span><br></pre></td></tr></table></figure>
<p>根据已打开的文件描述符创建一个流:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">FILE *<span class="title function_">fdopen</span><span class="params">(<span class="type">int</span> fildes, <span class="type">const</span> <span class="type">char</span> *mode)</span>;</span><br></pre></td></tr></table></figure>
<h3 id="Temporary-File"><a class="header-anchor" href="#Temporary-File"></a>Temporary File</h3>
<p>Create a name for a temporary file:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">tmpnam</span><span class="params">(<span class="type">char</span> *s)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>返回值: 指向唯一路径名的指针</li>
</ul>
<p>Create a temporary file:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">FILE *<span class="title function_">tmpfile</span><span class="params">(<span class="type">void</span>)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>返回值: 若成功为文件指针，若出错为NULL</li>
</ul>
<h3 id="Advanced-System-Calls"><a class="header-anchor" href="#Advanced-System-Calls"></a>Advanced System Calls</h3>
<p>Handling file attributes</p>
<ul>
<li>stat/fstat/lstat, ...</li>
</ul>
<p>Handling directory</p>
<h4 id="stat-fstat-lstat-functions"><a class="header-anchor" href="#stat-fstat-lstat-functions"></a>stat/fstat/lstat functions</h4>
<p>Get file status</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">stat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, <span class="keyword">struct</span> stat *buf)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">fstat</span><span class="params">(<span class="type">int</span> filedes, <span class="keyword">struct</span> stat *buf)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">lstat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file_name, <span class="keyword">struct</span> stat *buf)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Return: 0 if success; -1 if failure</li>
</ul>
<h4 id="struct-stat"><a class="header-anchor" href="#struct-stat"></a>struct stat</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> &#123;</span></span><br><span class="line"><span class="type">mode_t</span> st_mode; <span class="comment">/*file type &amp; mode*/</span></span><br><span class="line"><span class="type">ino_t</span> st_ino; <span class="comment">/*inode number (serial number)*/</span></span><br><span class="line"><span class="type">dev_t</span> st_rdev; <span class="comment">/*device number (file system)*/</span></span><br><span class="line"><span class="type">nlink_t</span> st_nlink; <span class="comment">/*link count*/</span></span><br><span class="line"><span class="type">uid_t</span> st_uid; <span class="comment">/*user ID of owner*/</span></span><br><span class="line"><span class="type">gid_t</span> st_gid; <span class="comment">/*group ID of owner*/</span></span><br><span class="line"><span class="type">off_t</span> st_size; <span class="comment">/*size of file, in bytes*/</span></span><br><span class="line"><span class="type">time_t</span> st_atime; <span class="comment">/*time of last access*/</span></span><br><span class="line"><span class="type">time_t</span> st_mtime; <span class="comment">/*time of last modification*/</span></span><br><span class="line"><span class="type">time_t</span> st_ctime; <span class="comment">/*time of last file status change*/</span></span><br><span class="line"><span class="type">long</span> st_blksize; <span class="comment">/*Optimal block size for I/O*/</span></span><br><span class="line"><span class="type">long</span> st_blocks; <span class="comment">/*number 512-byte blocks allocated*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="Test-macros-for-file-types"><a class="header-anchor" href="#Test-macros-for-file-types"></a>Test macros for file types</h4>
<p>Defined in <code>&lt;sys/stat.h&gt;</code></p>
<table>
<thead>
<tr>
<th>Macro</th>
<th>File type</th>
</tr>
</thead>
<tbody>
<tr>
<td>S_ISREG</td>
<td>regular file</td>
</tr>
<tr>
<td>S_ISDIR</td>
<td>directory</td>
</tr>
<tr>
<td>S_ISCHR</td>
<td>character special file</td>
</tr>
<tr>
<td>S_ISBLK</td>
<td>block special file</td>
</tr>
<tr>
<td>S_ISFIFO</td>
<td>fifo</td>
</tr>
<tr>
<td>S_ISLNK()</td>
<td>symbolic link</td>
</tr>
<tr>
<td>S_ISSOCK</td>
<td>socket</td>
</tr>
</tbody>
</table>
<h2 id="File-lock"><a class="header-anchor" href="#File-lock"></a>File lock</h2>
<p>File lock 可以保证文件的并发安全访问</p>
<p>分类：</p>
<ul>
<li>记录锁： 可以锁定文件的部分区域甚至字节</li>
<li>劝告锁
<ul>
<li>检查，加锁由应用程序自己控制</li>
</ul>
</li>
<li>强制锁
<ul>
<li>检查，加锁由内核控制</li>
<li>影响[<code>open()</code>，  <code>read()</code>，  <code>write()</code> 等</li>
</ul>
</li>
<li>共享锁： 读锁，不能加排他锁</li>
<li>排他锁：写锁，不能加读锁或其他写锁</li>
</ul>
<p>特殊类型：</p>
<ul>
<li>共享模式强制锁</li>
<li>租借锁</li>
</ul>
<h3 id="标志位"><a class="header-anchor" href="#标志位"></a>标志位</h3>
<ul>
<li>
<p><code>mount -o mand /dev/sdb7 /mnt </code></p>
</li>
<li>
<p>super_block</p>
<ul>
<li>s_flags</li>
</ul>
</li>
<li>
<p><code>MS_MANDLOCK</code></p>
</li>
</ul>
<h3 id="fcntl记录锁"><a class="header-anchor" href="#fcntl记录锁"></a>fcntl记录锁</h3>
<p>用于记录锁的fcntl函数:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">fcntl</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> cmd, <span class="keyword">struct</span> flock *lock)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>返回值: 若成功则依赖于<code>cmd</code>，若出错为-1</li>
</ul>
<h3 id="struct-flock"><a class="header-anchor" href="#struct-flock"></a>struct flock</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">flock</span>&#123;</span></span><br><span class="line">...</span><br><span class="line"><span class="type">short</span> l_type; <span class="comment">/* Type of lock: F_RDLCK, F_WRLCK, F_UNLCK */</span></span><br><span class="line"><span class="type">short</span> l_whence; <span class="comment">/* How to interpret l_start: SEEK_SET, SEEK_CUR,</span></span><br><span class="line"><span class="comment">SEEK_END */</span></span><br><span class="line"><span class="type">off_t</span> l_start; <span class="comment">/* Starting offset for lock */</span></span><br><span class="line"><span class="type">off_t</span> l_len; <span class="comment">/* Number of bytes to lock */</span></span><br><span class="line"><span class="type">pid_t</span> l_pid; <span class="comment">/* PID of process blocking our lock (F_GETLK only) */</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="cmd参数"><a class="header-anchor" href="#cmd参数"></a>cmd参数</h3>
<p>cmd参数的取值：</p>
<ul>
<li><code>F_GETLK</code>：获得文件的封锁信息</li>
<li><code>F_SETLK</code>：对文件的某个区域封锁或解除封锁</li>
<li><code>F_SETLKW</code>：功能同<code>F_SETLK</code>, wait方式</li>
</ul>
<h3 id="其它封锁命令"><a class="header-anchor" href="#其它封锁命令"></a>其它封锁命令</h3>
<p><code>lockf</code>函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/file.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">lockf</span><span class="params">(<span class="type">int</span> fd, <span class="type">int</span> cmd, <span class="type">off_t</span> len)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Live Abroad</title>
    <url>/2022/06/16/Live-Abroad/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>身份</li>
<li>生活</li>
</ul>
<span id="more"></span>
<h1 id="身份"><a class="header-anchor" href="#身份"></a>身份</h1>
<h2 id="工作签证"><a class="header-anchor" href="#工作签证"></a>工作签证</h2>
<p>工作签证属于移民签证， 美国的工作签证是要抽签的</p>
<p>从另一种视角说，如果你在某个领域很杰出，anyway都有办法留下来，比如</p>
<ol>
<li>公司会把员工relocate到加拿大，然后第二年接着抽签</li>
<li>“国家利益豁免”签证</li>
<li>“杰出人才工作签证”，要求你只能在这个领域工作，但是不需要抽签</li>
</ol>
<h2 id="绿卡"><a class="header-anchor" href="#绿卡"></a>绿卡</h2>
<p>绿卡”其实是一种特殊的签证。 intuition是，你在这里工作足够久了，于是政府说“你之后不用抽签了，也不一定要找到工作才能住在这里了；现在你只要想，就可以住在这里”</p>
<p>“但是，你需要每年在这里住满六个月才行；并且要交和公民一样的税”</p>
<h2 id="移民"><a class="header-anchor" href="#移民"></a>移民</h2>
<p>这里指的是换国籍。</p>
<p>但是，不换国籍，只拿绿卡，也只需要向美国交税，不用向中国交税，所以换国籍的优点暂时不清楚。</p>
<h1 id="生活"><a class="header-anchor" href="#生活"></a>生活</h1>
<p>整体来说比中国好</p>
<p>而且绝对没有加班</p>
<h2 id="安全性"><a class="header-anchor" href="#安全性"></a>安全性</h2>
<p>一般来说，就你日常呆的地方而言，和中国差不多安全</p>
<h2 id="交友"><a class="header-anchor" href="#交友"></a>交友</h2>
<p>随便哪个国家的都可以</p>
<h2 id="工作"><a class="header-anchor" href="#工作"></a>工作</h2>
<p>不一定在硅谷，不一定在大厂</p>
]]></content>
  </entry>
  <entry>
    <title>Linux Basic</title>
    <url>/2022/02/19/Linux-Basic/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>History</li>
<li>Hardware File Name</li>
<li>Partition</li>
<li>BIOS &amp; UEFI</li>
<li>File System</li>
</ul>
<p>介绍了Linux系统的硬件基本知识，更多内容参见我的《OS Introduction》</p>
<span id="more"></span>
<h1 id="History"><a class="header-anchor" href="#History"></a>History</h1>
<ul>
<li>Unix 的前身是由贝尔实验室(Bell lab.)的 Ken Thompson 利用汇编语言写成的, 后来在 1971-1973 年间由</li>
<li>Dennis Ritchie 以 C 程序语言进行改写,才称为 Unix。</li>
<li>1977 年由 Bill Joy 释出 BSD (Berkeley Software Distribution),这些称为 Unix-like 的操作系统。</li>
<li>1984 年由 Andrew Tanenbaum 开始制作 Minix 操作系统,该系统可以提供原始码以及软件;</li>
<li>1984 年由 Richard Stallman 提倡 GNU 计划,倡导自由软件(Free software), 强调其软件可以『自由的取得、</li>
<li>复制、修改与再发行』 ,并规范出 GPL 授权模式, 任何 GPL(General Public License)软件均不可单纯仅贩卖<br>
其软件,也不可修改软件授权。</li>
<li>1991 年由芬兰人 Linus Torvalds 开发出 Linux 操作系统。简而言之, Linux 成功的地方主要在于:Minix(Unix),<br>
GNU, Internet, POSIX 及虚拟团队的产生。符合 Open source 理念的授权相当多,比较知名的如 Apache / BSD / GPL / MIT 等。</li>
</ul>
<h2 id="Feature"><a class="header-anchor" href="#Feature"></a>Feature</h2>
<ul>
<li>Linux是藉由 Minix 操作系统开发的,， 属于 Unix like ,没有版权纠纷</li>
<li>Linux 支持 POSIX ,因此很多 Unix 上的程序可以直接在 Linux 上运作</li>
</ul>
<h1 id="Hardware-File-Name"><a class="header-anchor" href="#Hardware-File-Name"></a>Hardware File Name</h1>
<p>Linux中一切皆文件，磁盘文件名形如<code>/dev/sd[a-z]</code>，虚拟机可能会使用 <code>/dev/vd[a-z]</code></p>
<h1 id="Partition"><a class="header-anchor" href="#Partition"></a>Partition</h1>
<p>分区就是对分区表进行配置，通常分区是以Cylinder为单位的『连续』磁盘空间。 现代也可以用sector为单位</p>
<p>分区表有两种格式： MBR, GPT</p>
<h2 id="MBR"><a class="header-anchor" href="#MBR"></a>MBR</h2>
<p>MBR磁盘分区是一种使用最为广泛的分区结构，它也被称为DOS分区结构，但它并不仅仅应用于Windows系统平台，也应用于Linux，基于X86的UNIX等系统平台。它位于磁盘的0号扇区（一扇区等于512字节），是一个重要的扇区（简称MBR扇区）</p>
<p>主要分区与延伸分区最多可以有四个(硬盘的限制)<br>
延伸分区最多只能有一个(操作系统的限制)<br>
逻辑分区是由延伸分区持续切割出来的分区槽;<br>
能够被格式化后,作为数据存取的分区槽为主要分区与逻辑分区。延伸分区无法格式化;<br>
逻辑分区的数量依操作系统而不同,在 Linux 系统中 SATA 硬盘已经可以突破 63 个以上的分区限制;</p>
<h3 id="0号扇区结构"><a class="header-anchor" href="#0号扇区结构"></a>0号扇区结构</h3>
<p>在MBR分区表中，一个分区最大的容量为2T，且每个分区的起始柱面必须在这个硬盘的前2T内。你有一个3T的硬盘，根据要求你至少要把它划分为2个分区，且最后一个分区的起始扇区要位于硬盘的前2T空间内。如果硬盘太大则必须改用GPT</p>
<p>标准MBR结构：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/Linux/%20arch" alt="MBR Arch"></p>
<p>MBR扇区(0号扇区)由四部分组成：</p>
<ul>
<li>
<p>主引导记录（MBR）：一段引导代码，占MBR分区的前446字节，负责整个系统启动。如果引导代码被破坏，系统将无法启动。</p>
</li>
<li>
<p>Windows磁盘签名：占引导代码后面的4字节，是Windows初始化磁盘写入的磁盘标签，如果此标签被破坏，则系统会提示“初始化磁盘”。</p>
</li>
<li>
<p>MBR分区表：4个16字节的“磁盘分区表”(DPT), 可以分出四个主分区</p>
<ul>
<li>所谓的『分区』就是配置分区表</li>
<li>可以将一个主分区作为<strong>扩展分区</strong>， 扩展分区可以继续分出<strong>逻辑分区</strong></li>
</ul>
</li>
<li>
<p>MBR结束标志：占MBR扇区最后2个字节，一直为“55 AA”， 检验主引导记录是否有效</p>
</li>
</ul>
<h3 id="主分区（MBR）"><a class="header-anchor" href="#主分区（MBR）"></a>主分区（MBR）</h3>
<p>分区表示例，假设该硬盘的挂载文件名为<code>/dev/sda </code>， 分区的挂载文件名为<code>[硬盘文件名][分区id]</code></p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/Linux/Primary%20Partition%20Arch.png" alt="Primary Partition Arch"></p>
<p>分区的文件名为硬盘名 + 后缀</p>
<ul>
<li>
<p>例如，上述四个主分区的挂载文件名为：</p>
<p>P1:/dev/sda1<br>
P2:/dev/sda2<br>
P3:/dev/sda3<br>
P4:/dev/sda4</p>
</li>
</ul>
<p>一个硬盘，只能有4个主分区，</p>
<p>（恢复分区也占一个分区）</p>
<p>（微软引导占一个）</p>
<p>（微软OS占一个C盘分区）</p>
<p>（剩下的一个主分区可以做扩展分区，做出最多4个逻辑分区）</p>
<p>在这样的情况下，是没法双系统的，因为4个主分区已经用完了</p>
<ul>
<li>MBR用32位寻址，每个bit代表512字节，因此只能支持2T硬盘</li>
</ul>
<h3 id="扩展分区和逻辑分区"><a class="header-anchor" href="#扩展分区和逻辑分区"></a>扩展分区和逻辑分区</h3>
<p>示例： 这里有两个主分区P1,P2, P2被用作扩展分区</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/Linux/Extended%20Partion%20Arch.png" alt="Extended Partion Arch"></p>
<ul>
<li>
<p>主分区最多有4个，为了获得更多的分区，可以将一个主分区变成<strong>扩展分区</strong>，在扩展分区内进行<strong>逻辑分区</strong></p>
</li>
<li>
<p>利用扩展分区的第一个扇区，可以分出逻辑扇区， 逻辑分区的分区信息存放在<strong>扩展引导记录</strong>（<strong>EBR</strong>）中</p>
<ul>
<li>这里的EBR仅仅指EBR分区， 包括分区表和结束标志“55 AA”，<u>没有引导代码</u></li>
<li>逻辑分区位于扩展分区内，其磁柱范围也当然在扩展分区的磁柱范围内，上例中就是101-401</li>
</ul>
</li>
<li>
<p><strong>最多有1个扩展分区</strong>（OS规定）</p>
</li>
<li>
<p>[分区id]的前4都保留给主分区和扩展分区。 因此逻辑分区的分区id从5开始。上例中各分区文件名如下：</p>
<blockquote>
<p>P1:/dev/sda1<br>
P2:/dev/sda2<br>
L1:/dev/sda5<br>
L2:/dev/sda6<br>
L3:/dev/sda7<br>
L4:/dev/sda8<br>
L5:/dev/sda9</p>
</blockquote>
</li>
<li>
<p>逻辑分区的数量依操作系统而不同, 在 Linux 系统中 SATA 硬盘已经可以突破 63 个以上的分区限制</p>
</li>
</ul>
<h2 id="GPT"><a class="header-anchor" href="#GPT"></a>GPT</h2>
<p>全局唯一标识分区表（GUID Partition Table）</p>
<p>可以有很多主分区，也就不需要扩展分区和逻辑分区了</p>
<p>最大硬盘容量9.4ZB</p>
<p>缺点是浪费更多的磁盘空间</p>
<h2 id="GPT分区表结构"><a class="header-anchor" href="#GPT分区表结构"></a>GPT分区表结构</h2>
<p>简言之，前512字节保留，用于MBR。后512字节用于GPT Header，然后是分区表， 分区表在磁盘尾部又会备份一遍</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/Linux/GPT%20Arch" alt="GPT Arch"></p>
<ul>
<li>
<p>LBA0: MBR相容区块</p>
<p>前512字节（0号扇区）有个保护MBR（用于防止不识别GPT的硬盘工具错误识别并破坏硬盘中的数据），这个MBR中只有一个类型为0xEE的分区，以此来表示这块硬盘使用GPT分区表。不能识别GPT硬盘的操作系统通常会识别出一个未知类型的分区，并且拒绝对硬盘进行操作；能够识别GPT分区表的操作系统会检查保护MBR中的分区表，如果分区类型不是0xEE或者MBR分区表中有多个项，也会拒绝对硬盘进行操作</p>
</li>
<li>
<p>LBA1： GPT表头记录</p>
<p>GPT头位于GPT磁盘的第二个磁盘，也就是1号扇区，该扇区是在创建GPT磁盘时生成，GPT头会定义分区表的起始位置，分区表的结束位置、每个分区表项的大小、分区表项的个数及分区表的校验和等信息。</p>
</li>
<li>
<p>LBA2～33： 实际记录分区信息处</p>
<p>分区表位于GPT磁盘的2-33号磁盘，一共占用32个扇区，能够容纳128个分区表项。每个分区表项大小为128字节。因为每个分区表项管理一共分区，所以Windows系统允许GPT磁盘创建128个分区</p>
</li>
<li>
<p>LBA34到-34： 分区区域</p>
<p>GPT分区区域就是用户使用的分区，也是用户进行数据存储的区域。分区区域的起始地址和结束地址由GPT头定义。</p>
</li>
<li>
<p>LBA-33~-2: 分区表备份</p>
</li>
<li>
<p>LBA-1： GPT头备份</p>
<p>GPT头有一个备份，放在GPT磁盘的最后一个扇区，但这个GPT头备份并非完全GPT头备份，某些参数有些不一样。复制的时候根据实际情况更改一下即可。</p>
</li>
</ul>
<h1 id="BIOS-UEFI"><a class="header-anchor" href="#BIOS-UEFI"></a>BIOS &amp; UEFI</h1>
<p>计算机启动时，首先加载硬件驱动程序， 硬件驱动程序有：</p>
<ul>
<li>BIOS：对应分区格式MBR， 读取MBR分区
<ul>
<li>BIOS模式又称为<code>Legacy</code></li>
</ul>
</li>
<li>UEFI： 对应分区格式GPT， 读取EFI分区</li>
</ul>
<h2 id="BIOS"><a class="header-anchor" href="#BIOS"></a>BIOS</h2>
<p>BIOS是写入到主板上的一个程序。主板上还有硬件CMOS， 是记录各项硬件参数且嵌入在主板上的储存器；</p>
<ul>
<li>BIOS是开机时,计算机会执行的第一个程序</li>
</ul>
<h2 id="UEFI"><a class="header-anchor" href="#UEFI"></a>UEFI</h2>
<p>UEFI (Unified Extensible Firmware Interface) 是BIOS的进化版，也称为UEFI BIOS</p>
<ul>
<li>
<p>UEFI对应分区格式GPT, 启动后读取EFI分区（EFI system partition， aka <strong>ESP</strong>）</p>
<ul>
<li>EFI是UEFI的1.0版本</li>
</ul>
</li>
<li>
<p>UEFI用C编程，BIOS用汇编编程。 因此UEFI非常强大</p>
</li>
</ul>
<p>BIOS缺点：</p>
<ul>
<li>BIOS不知道GPT,还需要GPT 提供兼容模式才能够读写这个磁盘装置</li>
<li>BIOS仅为 16 位的程序，功能太简单</li>
</ul>
<p>UEFI 可以直接取得 GPT 的分区表,但保险起见，你最好依旧拥有BIOS boot的分区槽支持, 同时,为了与 windows 兼容,并且提供其他第三方厂商所使用的 UEFI 应用程序储存的空间,你必须要格式化一个 vfat 的文件系统, 大约提供 512MB 到 1G 左右的容量,以让其他 UEFI 执行较为方便</p>
<h3 id="ESP"><a class="header-anchor" href="#ESP"></a>ESP</h3>
<p>EFI系统分区（EFI system partition）:GPT硬盘分区模式中的系统启动分区</p>
<ul>
<li>FAT16或FAT32格式的物理分区，</li>
<li>其分区标识是EF (十六进制) 而非常规的0E或0C。</li>
<li>该分区在Windows操作系统下一般是不可见的。</li>
<li>ESP分区是一个独立于操作系统之外的分区，操作系统被引导后就不再依赖它。分区内存放引导管理程序、驱动程序、系统维护工具等。支持 EFI 模式的电脑需要从ESP启动系统，EFI固件可从ESP加载EFI启动程序和应用程序</li>
</ul>
<h1 id="boot-loader"><a class="header-anchor" href="#boot-loader"></a>boot loader</h1>
<p>boot loader用于加载OS内核， 由于每种OS的文件系统不一致，因此每种OS都有自己的boot loader</p>
<p>boot loader位于MBR中，最大只有446字节</p>
<p>常用的boot loader是grub（version2）</p>
<h2 id="位置"><a class="header-anchor" href="#位置"></a>位置</h2>
<p>每个文件系统都会保留一块启动扇区（boot sector）来安装该OS的boot loader， <strong>即OS都会默认安装一份boot loader到自己的文件系统中</strong>（位于根目录所在的文件系统的boot sector）</p>
<p>LInux安装时，可以选择将boot loader安装到MBR，如果安装了，则MBR和boot sector都会保留一份boot loader</p>
<p>Windows安装时默认会将boot loader也安装到MBR</p>
<h2 id="功能"><a class="header-anchor" href="#功能"></a>功能</h2>
<p>boot loader主要功能：</p>
<ul>
<li>加载内核文件：直接指向可开机的程序区段来启动OS</li>
<li>提供选项：用户可以选择不同启动选项</li>
<li>转交其他loader： 将启动管理功能<strong>转交给其他loader</strong></li>
</ul>
<p>选项功能使得我们可以<strong>选择不同的内核来启动</strong>，而转交功能使我们可以<strong>加载其他地方（也就是其他boot sector）的loader</strong></p>
<h2 id="多boot-loader"><a class="header-anchor" href="#多boot-loader"></a>多boot loader</h2>
<p>![image-20220504012023432](/Users/lyk/Library/Application Support/typora-user-images/image-20220504012023432.png)</p>
<p>如上图所示，我的 MBR 使用 Linux 的 grub2 这个开机管理程序，并且里面假设已经有了三个菜 单， 第一个菜单可以直接指向 Linux 的核心文件并且直接载入核心来开机;第二个菜单可以将开机管理程 控权交给 Windows 来管理，此时 Windows 的 loader 会接管开机流程，这个时候他就能够启动 windows 了。 第三个菜单则是使用 Linux 在 boot sector 内的开机管理程序，此时进入另一个grub</p>
<h2 id="多重系统"><a class="header-anchor" href="#多重系统"></a>多重系统</h2>
<p><strong>windows的loader不具有转交功能</strong>，因此不能使用windows的loader启动linux的loader，也就是说，装多系统的时候，需要先装windows，再装linux</p>
<ul>
<li>前文已提到，windows的boot loader会自动覆盖MBR扇区，那么如果后安装windows，启动扇区就被覆盖为windows的loader，而它无法转交给其他loader，即无法支持多系统</li>
</ul>
<p>A boot loader loads and starts the Linux kernel</p>
<ul>
<li>Can pass boot parameters to the Linux kernel, such as <strong>device information</strong></li>
<li>Can optionally load an Initial Root Disk</li>
<li>Can boot other operating systems as well </li>
</ul>
<p>Common Boot loaders:</p>
<ul>
<li>LILO: Linux Loader</li>
<li>GRUB: Grand Unified Boot Loader </li>
</ul>
<p>Generally configured in <code>/dev/sda</code>, unless other boot loader is usd（存疑）</p>
<h2 id="LILO"><a class="header-anchor" href="#LILO"></a>LILO</h2>
<p>LILO:</p>
<ul>
<li>
<p>A Program that configures the MBR according to the configuration file.</p>
<p>Must be run as root with the lilo command.</p>
</li>
</ul>
<p>lilo command Syntax:</p>
<ul>
<li><code>lilo [-v] [-v] [-C config-file] [-t] </code></li>
<li>Configuration file: <code>/etc/lilo.conf</code></li>
</ul>
<h2 id="GRUB"><a class="header-anchor" href="#GRUB"></a>GRUB</h2>
<p>目前都是grub2</p>
<p>grub是主流的boot loader程序，由于MBR扇区太小，最大才446字节，因此grub的配置文件没有放在MBR，而是放在<code>/boot/grub</code></p>
<p>详见《GRUB》</p>
<p>GRUB</p>
<ul>
<li>Program stored in MBR (first stage) and in /boot/grub (1.5th and second stage)</li>
<li>Understand file system structure; no need to activate a configuration as with LILO </li>
<li>Configuration file <code>/boot/grub/grub.conf </code></li>
<li>Installed in MBR with <code>grub-install</code></li>
</ul>
<h1 id="kernel"><a class="header-anchor" href="#kernel"></a>kernel</h1>
<p>内核文件:<code>/boot/vmlinuz</code></p>
<p>内核源代码：<code>/usr/src/linux</code></p>
<h1 id="模块"><a class="header-anchor" href="#模块"></a>模块</h1>
<p>内核模块：<code>/lib/modules/$(uname -r)/kernel</code></p>
<p>模块文件都以<code>.ko</code>为后缀</p>
<p>Linux发行版一般都会将非必要的且可以编译为模块的内核功能编译成模块， 比如各种设备驱动程序.</p>
<p>linux内核可以动态加载内核模块，内核接管系统后，会尝试检测硬件并<strong>挂载根目录</strong>，来取得内核模块，这样才能利用它们提供的设备加载功能</p>
<ul>
<li>不能把<code>/lib</code>和<code>/</code>放在不同的硬盘分区</li>
<li>由于担心影响到磁盘内的文件系统，启动过程中根目录一般以只读的形式挂载</li>
<li>因此，如果遇到OS不支持的新硬件，要么重新编译内核，并加入该硬件的驱动程序源码； 要么将该硬件的驱动程序编译成模块，在启动时加载该模块</li>
</ul>
<h2 id="模块依赖"><a class="header-anchor" href="#模块依赖"></a>模块依赖</h2>
<p>一个模块A引用另一个模块B所导出的符号，则加载模块A之前必须先加载模块B，这称为模块依赖</p>
<p>模块依赖关系存放在<code>/lib/modules/$(uname -r)/modules.dep</code>， 要生成该文件，需要用<code>depmod</code></p>
<h3 id="depmod"><a class="header-anchor" href="#depmod"></a>depmod</h3>
<p><code>depmod [-adeisvV][-m &lt;文件&gt;][--help][模块名称]</code></p>
<ul>
<li>不加任何参数：分析当前内核的模块依赖(模块位于<code>/lib/modules/$(uname -r)/kernel</code>)，并重新写入<code>modules.dep</code></li>
<li><code>-A</code>:  查找比 <code>modues.dep</code> 内还要新的模块，找到了才会更新<code>modules.dep</code></li>
</ul>
<ul>
<li><code>-a</code>: 检查所有模块，如果命令中没有文件名称，这个选项默认是开启的</li>
<li><code>-e</code>: 显示出目前已加载的不可执行的模块</li>
<li><code>-n</code>: 将结果 <code>modules.dep</code> 和各种映射文件输出到标准输出( <code>stdout</code> )，而不是写到<code>modules.dep</code></li>
</ul>
<h2 id="模块操作"><a class="header-anchor" href="#模块操作"></a>模块操作</h2>
<h3 id="查看模块"><a class="header-anchor" href="#查看模块"></a>查看模块</h3>
<p>列出模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; lsmod</span><br><span class="line">Module                  Size  Used by</span><br><span class="line">ip6table_filter        16384  0</span><br><span class="line">ip6_tables             32768  1 ip6table_filter</span><br><span class="line">xt_recent              24576  0</span><br><span class="line">binfmt_misc            24576  1</span><br></pre></td></tr></table></figure>
<p>显示内容有：</p>
<ul>
<li>模块名称</li>
<li>模块大小</li>
<li>依赖该模块的模块</li>
</ul>
<p>查看模块信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">modinfo kernel_module</span><br></pre></td></tr></table></figure>
<ul>
<li>参数可以是模块名，也可以是模块文件名</li>
</ul>
<h3 id="加载-删除模块"><a class="header-anchor" href="#加载-删除模块"></a>加载/删除模块</h3>
<p>加载/删除模块推荐使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">modprobe [模块名]</span><br></pre></td></tr></table></figure>
<ul>
<li>查找<code>modules.dep</code>的内容，得到模块依赖性，并加载模块</li>
</ul>
<p>选项有：</p>
<ul>
<li>
<p>默认是加载模块</p>
</li>
<li>
<p><code>-c</code>： 列出目前系统所有的模块（信息更多）</p>
</li>
<li>
<p><code>-f</code>: 强制加载该模块</p>
</li>
<li>
<p><code>-r</code>: 删除模块</p>
</li>
</ul>
<p>普通方法：不会分析依赖树，因此很比较麻烦</p>
<ul>
<li>加载模块：<code>insmod [模块文件名]</code></li>
<li>删除模块: <code>rmmod [模块名/模块文件名]</code></li>
</ul>
<h2 id="模块与普通程序的区别"><a class="header-anchor" href="#模块与普通程序的区别"></a>模块与普通程序的区别</h2>
<table>
<thead>
<tr>
<th></th>
<th>C程序</th>
<th>Linux模块</th>
</tr>
</thead>
<tbody>
<tr>
<td>所在空间</td>
<td>user mod</td>
<td>kernel mode</td>
</tr>
<tr>
<td>入口</td>
<td>main()</td>
<td>module_init()指定;</td>
</tr>
<tr>
<td>出口</td>
<td>无</td>
<td>module_exit()指定;</td>
</tr>
<tr>
<td>运行方式</td>
<td>直接运行</td>
<td>inmod</td>
</tr>
<tr>
<td>调试方式</td>
<td>gdb</td>
<td>kdbug, kdb, kgdb等</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>注意点：</p>
<ul>
<li>不能使用C库来开发模块</li>
<li>没有内存保护机制</li>
<li>小内核栈</li>
<li>要考虑并发</li>
</ul>
<h2 id="模块example"><a class="header-anchor" href="#模块example"></a>模块example</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">hello_init</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">	printk(KERN_INFO <span class="string">&quot;Hello world\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">hello_exit</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">	printk(KERN_INFO <span class="string">&quot;Goodbye world\n&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(hello_init); </span><br><span class="line">module_exit(hello_exit);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>static int __init hello_init(void)</code></li>
<li><code>static void __exit hello_exit(void)</code>
<ul>
<li>Static：声明该函数作用域为当前文件，因为这种函数在特定文件之外没有其它意义</li>
<li><code>__init</code>: 标记该函数只在初始化期间使用。模块装载后，将 该函数占用的内存空间释放</li>
<li><code>–  __exit</code>: 标记该代码仅用于模块卸载</li>
</ul>
</li>
<li>Init/exit
<ul>
<li>宏: <code>module_init</code>/<code>module_exit</code></li>
<li>声明模块初始化及清除函数所在的位置</li>
<li>装载和卸载模块时，内核可以自动找到相应的函数
<ul>
<li><code>module_init(hello_init); </code></li>
<li><code>module_exit(hello_exit);</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="模块传参"><a class="header-anchor" href="#模块传参"></a>模块传参</h2>
<p>有些模块需要传递一些参数</p>
<ul>
<li>
<p>参数在模块加载时传递</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nsmod hello.ko test=2</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在模块代码中， 需要使用<code>module_param</code>宏来声明:  <code>module_param(变量名称，类型, 访问许可掩码)</code></p>
</li>
<li>
<p>支持的参数类型<br>
Byte, short, ushort, int, uint, long, ulong, bool, charp Array (module_param_array(name, type, nump, perm))</p>
</li>
</ul>
<p>example</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/kernel.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/module.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/moduleparam.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> test; </span><br><span class="line">module_param(test, <span class="type">int</span>, <span class="number">0644</span>);<span class="comment">//参数声明</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __init <span class="title function_">hello_init</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    printk(KERN_INFO “Hello world test=%d \n” , test);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __exit <span class="title function_">hello_exit</span><span class="params">(<span class="type">void</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;Goodbye world\n&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>); </span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;Test&quot;</span>); </span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;xxx&quot;</span>); </span><br><span class="line"></span><br><span class="line">module_init(hello_init); </span><br><span class="line">module_exit(hello_exit);</span><br></pre></td></tr></table></figure>
<h2 id="模块导出符号"><a class="header-anchor" href="#模块导出符号"></a>模块导出符号</h2>
<p>如果一个模块需要向其他模块导出符号(方法或全局变量)，需要使用:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">EXPORT_SYMBOL(name); </span><br><span class="line">EXPORT_SYMBOL_GPL(name);</span><br></pre></td></tr></table></figure>
<ul>
<li>符号必须在模块文件的全局部分导出，不能在函数部分导出。 更多信息可参考 &lt;linux/module.h&gt;文件</li>
</ul>
<p>• Modules仅可以使用由Kernel或者其他Modules导出的符号, 不能使用Libc</p>
<p>• <code>/proc/kallsyms </code>: 保存了所有导出的符号</p>
<h2 id="模块通信example"><a class="header-anchor" href="#模块通信example"></a>模块通信example</h2>
<p>本实例通过两个模块来介绍模块之间的通信。 模块add_sub提供了两个导出函数add_integer() 和sub_integer()，分别完成两个数字的加法和减 法。模块test用来调用模块add_sub提供的两个 方法，完成加法或者减法操作。</p>
<ul>
<li>1.add_sub模块</li>
<li>2.test模块 • 3.编译模块</li>
</ul>
<p><code>add_sub.h</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _ADD_SUB_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _ADD_SUB_H</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="title function_">add_integer</span><span class="params">(<span class="type">long</span> a,longb)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="title function_">sub_integer</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b)</span> ;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>add_sub：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/ init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;l inux /module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;add_sub.h&quot;</span></span></span><br><span class="line"><span class="type">long</span> <span class="title function_">add_integer</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> sub <span class="title function_">integer</span> <span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EXPORT <span class="title function_">SYMBOL</span><span class="params">(add_integer)</span> ;</span><br><span class="line">EXPORT <span class="title function_">SYMBOL</span><span class="params">(sub_integer)</span> ;</span><br><span class="line">MODULELICENSE (<span class="string">&quot;Dual BSD/GPL&quot;</span>) ;</span><br></pre></td></tr></table></figure>
<h2 id="模块编译"><a class="header-anchor" href="#模块编译"></a>模块编译</h2>
<p>Makefile:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">obj-m := hello.o</span><br><span class="line">all:</span><br><span class="line">	make -C /lib/modules/$(shell uname -r)/build M=$(shell pwd) modules</span><br><span class="line">clean:</span><br><span class="line">	make -C /lib/modules/$(shell uname -r)/build M=$(shell pwd) clean</span><br></pre></td></tr></table></figure>
<p>Module includes more files</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">obj-m:=hello.o</span><br><span class="line"></span><br><span class="line">hello-objs := a.o b.o</span><br></pre></td></tr></table></figure>
<h1 id="Initial-RAM-Filesystem"><a class="header-anchor" href="#Initial-RAM-Filesystem"></a>Initial RAM Filesystem</h1>
<p>由于内核启动时需要挂载根目录，来加载其中的设备驱动程序。 假设根目录所在的设备为SATA硬盘，linux需要SATA的驱动才能读取SATA盘并挂载根目录，可是取得SATA的驱动又需要先读取SATA盘，挂载根目录。 为了解决这个问腿，boot loader不仅会读取内核文件， 还会读取一个虚拟文件系统文件(<code>/boot/initramfs.img</code>， 名称在不同的OS中可能不同 )，该文件会被读取到内存中并解压缩成一个根目录，并提供一个程序，通过该程序来加载启动过程中所需要的内核模块（比如上文提到的SATA驱动），然后initramfs会被释放，并挂载实际的根目录文件系统，接着内核会调用systemd来开始后续的正常启动流程</p>
<ul>
<li>当然你可以将必须的驱动直接编译到内核中，也就避免了上述的矛盾，不需要initramfs了</li>
</ul>
<p>initrd:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkinitrd /boot/initrd.img $(uname  r)</span><br></pre></td></tr></table></figure>
<p>initramfs:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkinitramfs  o /boot/initrd.img $(uname -r)</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">update-initramfs -u</span><br></pre></td></tr></table></figure>
<h1 id="Linux设备"><a class="header-anchor" href="#Linux设备"></a>Linux设备</h1>
<p>Linux系统将设备分为3种类型，对应三种驱动</p>
<ul>
<li>字符设备 -- Character Driver</li>
<li>块设备 -- Block Driver</li>
<li>网络接口设备 -- Network Driver</li>
</ul>
<h2 id="设备驱动的加载过程"><a class="header-anchor" href="#设备驱动的加载过程"></a>设备驱动的加载过程</h2>
<p>以字符设备驱动为例，它的加载过程是：</p>
<ol>
<li>申请设备号：包括主设备号码和次设备号</li>
<li>定义文件操作结构体<code>file_operations</code></li>
<li>创建并初始化定义结构体cdev
<ol>
<li>cdev结构体描述字符设备</li>
<li>该结构体是所有字符设备的抽象，其包含了大量字符设备所共有的特性。</li>
</ol>
</li>
<li>将cdev注册到系统，并和对应的设备号绑定</li>
<li>在/dev文件系统中用mknod创建设备文件，并将该文件绑定到设备号上
<ol>
<li>设定设备号:<code>device=scull</code></li>
<li>定义主设备号:<code>major=15</code></li>
<li>用户可以通过访问<code>/dev/scull</code>来访问当前的驱动设备</li>
</ol>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mknod /dev/$&#123;device&#125;0 c $major 0</span><br></pre></td></tr></table></figure>
<h2 id="mknod"><a class="header-anchor" href="#mknod"></a>mknod</h2>
<p>mknod: Create block or character device special files.</p>
<ul>
<li>
<p>Create a block device:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mknod path/to/device_file b major_device_number minor_device_number</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Create a character device:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mknod path/to/device_file c major_device_number minor_device_number</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Create a FIFO (queue) device:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mknod path/to/device_file p</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Create a device file with default SELinux security context:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mknod -Z path/to/device_file type major_device_number minor_device_number</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mknod /dev/zero15 c 1 5</span><br></pre></td></tr></table></figure>
<p>意思是创建一个字符型设备文件<code>/dev/zero15 </code>, 设备号为：主设备号5， 副设备号1</p>
<h2 id="设备号"><a class="header-anchor" href="#设备号"></a>设备号</h2>
<p>一个字符设备或者块设备都有一个主设备号和次设备号</p>
<p>• 主设备号和次设备号统称为设备号。 主设备号用来表示一个特定的<strong>驱动程序</strong></p>
<p>• 次设备号用来表示使用该驱动程序的各<strong>设备</strong></p>
<h3 id="申请和释放设备号"><a class="header-anchor" href="#申请和释放设备号"></a>申请和释放设备号</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">register_chrdev_region</span><span class="params">(<span class="type">dev_t</span> first, <span class="type">unsigned</span> <span class="type">int</span> count, <span class="type">char</span> *name)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">alloc_chrdev_region</span><span class="params">(<span class="type">dev_t</span> *dev, <span class="type">unsigned</span> <span class="type">int</span> firstminor, <span class="type">unsigned</span> <span class="type">int</span> count, <span class="type">char</span> *name)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">unregister_chrdev_region</span><span class="params">(<span class="type">dev_t</span> first, <span class="type">unsigned</span> <span class="type">int</span> count)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="cdev结构体"><a class="header-anchor" href="#cdev结构体"></a>cdev结构体</h2>
<p>在linux内核中使用cdev结构体来描述 字符设备。该结构体是所有字符设备的抽象，其包含了大量字符设备所共有的特性</p>
<p>cdev结构体的初始化:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> *<span class="title">my_cdev</span> =</span> cdev_alloc();</span><br><span class="line">my_cdev-&gt;ops = &amp;my_fops;</span><br><span class="line"><span class="type">void</span> <span class="title function_">cdev_init</span><span class="params">(<span class="keyword">struct</span> cdev *cdev, <span class="keyword">struct</span> file_operations *fops)</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">scull_dev</span> &#123;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">scull</span> <span class="title">qset</span> *<span class="title">data</span>;</span> <span class="comment">/* Pointer to first quantum set */</span></span><br><span class="line">   <span class="type">int</span> quantum; <span class="comment">/* the current quantum size */</span></span><br><span class="line">   <span class="type">int</span> qset; <span class="comment">/* the current array size */</span></span><br><span class="line">   <span class="type">unsigned</span> <span class="type">long</span> size; <span class="comment">/* amount of data stored here */</span></span><br><span class="line">   <span class="type">unsigned</span> <span class="type">int</span> access_ key; <span class="comment">/* used by sculluid and scullpriv */</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">semaphore</span> <span class="title">sem</span>;</span> <span class="comment">/* mutual exclus ion semaphore */</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">cdev</span>;</span><span class="comment">/* Char device structure*/</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="设备注册"><a class="header-anchor" href="#设备注册"></a>设备注册</h3>
<ul>
<li>
<p>将设备注册到系统中:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">cdev_add</span><span class="params">(<span class="keyword">struct</span> cdev *dev, <span class="type">dev_t</span> num, <span class="type">unsigned</span> <span class="type">int</span> count)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>释放一个已经注册的设备:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">cdev_del</span><span class="params">(<span class="keyword">struct</span> cdev *dev)</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="proc"><a class="header-anchor" href="#proc"></a>/proc</h1>
<ul>
<li>/proc文件系统是内核模块和系统交互的两种主要方式之一</li>
<li>/proc文件系统是一个伪文件系统。</li>
<li>通过/proc，可以用标准Unix系统调用(比如open()、 read()、write()、 ioctl()等等)<strong>访问进程地址空间</strong></li>
<li>用户和应用程序可以通过/proc得到系统的信息，并可以改变内核的某些参数</li>
<li>可以用于调试程序或者获取指定进程状态</li>
</ul>
<ul>
<li>create_proc_entry(): 创建一个文件</li>
<li>proc_symlink();: 创建符号链接</li>
<li>proc_mknod(): 创建设备文件</li>
<li>proc_mkdir(): 创建目录</li>
<li>remove_proc_entry(): 删除文件或目录</li>
</ul>
<h1 id="OS启动过程"><a class="header-anchor" href="#OS启动过程"></a>OS启动过程</h1>
<p>从开机到启动OS的过程为：</p>
<ol>
<li>
<p>BIOS:开机时主动加载，BIOS会通过加载CMOS中的信息，得到主机的硬件配置信息（包括启动设备的查找顺序、硬盘的大小与类型、系统时间...）; 得到这些信息后，BIOS会进行启动自我检测（ Power-on Self Test, POST ）, 然后开始执行硬件的初始化、设置PnP设备，再<strong>定义出可启动的设备顺序</strong>，接下来开始读取启动设备的MBR，其中安装了boot loader程序</p>
<ul>
<li>这里的MBR泛指启动扇区，GPT也有MBR扇区</li>
</ul>
</li>
<li>
<p>MBR： BIOS读取MBR，<strong>注意，每块硬盘的第一个扇区都是MBR扇区，所以如果有多个硬盘，也就是多个启动设备的话，读取的应该是“第一个启动设备的MBR”</strong>（ 之前已经定义好了启动设备的顺序）</p>
</li>
<li>
<p>boot loader： BIOS加载MBR的boot loader程序，该程序用于读取kernel，将kernel解压缩到内存中; boot loader同时还会读取<code>initramfs</code>来加载一些必要的驱动，并挂载根目录</p>
<ul>
<li>BIOS通过硬件的INT13中断来读取MBR，因此，只要BIOS能检测到硬盘，就一定能读取MBR（其中的内容就是boot loader）</li>
<li>内核驱动位于根目录的<code>/lib/modules</code>，则内核需要先挂载根目录才能取得这些驱动，但是内核没有驱动又无法读取硬盘、挂载根目录。 因此boot loader除了读取内核，还要读取<code>initramfs</code>，后者会加载必要的驱动，来挂载根目录</li>
</ul>
</li>
<li>
<p>kernel + initramfs：kernel先通过<code>initramfs</code>来加载必要的驱动程序，挂载根文件系统，并加载其中的驱动程序，然后测试硬件，获取硬件信息，此时硬件已经准备就绪了</p>
<ul>
<li>kernel使用自己的检测程序测试硬件， 不一定使用BIOS检测到的信息。这意味着内核此时已经接管BIOS的工作</li>
</ul>
</li>
<li>
<p>systemd：内核调用第一个程序<code>systemd</code></p>
</li>
</ol>
<h1 id="VFS"><a class="header-anchor" href="#VFS"></a>VFS</h1>
<p>VFS（Virtual Filesystem Switch）：虚拟文件系统或虚拟文件系统转换，是Linux文件系统的虚拟化，位于内核态，将底层异构的文件系统转换为统一的文件系统，使得可以通过统一的Posix接口访问</p>
<ul>
<li>作为文件系统的抽象，VFS只存在于内存</li>
<li>VFS起源于Unix， 所以VFS适用于所有Unix like OS</li>
<li>VFS的整体组织与前文提到的VVFS相同，分为超级块、inode等</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Persistence/VFS%20Arch.png" alt="VFS Arch"></p>
<h2 id="分层"><a class="header-anchor" href="#分层"></a>分层</h2>
<p>VFS在整个Linux系统中的分层视图如下：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Persistence/VFS%20Layer.png" alt="VFS Layer"></p>
<p>Linux系统的User<strong>使用GLIBC（POSIX标准、GUN C运行时库）作为应用程序的运行时库</strong>，然后通过OS转换为系统调用SCI（system-call interface），SCI是操作系统内核定义的系统调用接口，这层抽象允许<strong>用户程序的I/O操作转换为内核的接口调用</strong>。VFS提供了一个抽象层，将POSIX API接口与不同存储设备的具体接口实现进行了分离，使得底层的文件系统类型、设备类型对上层应用程序透明。</p>
<h2 id="接口适配示例"><a class="header-anchor" href="#接口适配示例"></a>接口适配示例</h2>
<p>用户写入文件时，使用POSIX标准的write接口，然后陷入kernel mode，调用<code>sys_write()</code>系统调用（属于SCI层）。然后VFS层接受到该调用，转换为对给定文件系统、给定设备的操作</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Persistence/VFS%20Function%20Call%20workflow.png" alt="VFS Function Call workflow"></p>
<h2 id="跨设备-文件系统示例"><a class="header-anchor" href="#跨设备-文件系统示例"></a>跨设备/文件系统示例</h2>
<p>下面中，用户通过cp命令进行文件拷贝，用户不需要关心底层文件系统的实现，只需要通过VFS抽象层实现对不同文件系统的读写操作：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Persistence/VFS%20example.png" alt="VFS example"></p>
<h2 id="VFS支持的系统调用"><a class="header-anchor" href="#VFS支持的系统调用"></a>VFS支持的系统调用</h2>
<p>上述示例中提到VFS也有自己的文件模型，用来支持操作系统的系统调用。下面是VFS抽象模型支持的所有Linux系统调用：</p>
<ul>
<li>文件系统相关：mount, umount, umount2, sysfs,  statfs,  fstatfs,  fstatfs64, ustat</li>
<li>目录相关：chroot，pivot_root，chdir，fchdir，getcwd，mkdir，rmdir，getdents，getdents64，readdir，link，unlink，rename，lookup_dcookie</li>
<li>链接相关：readlink，symlink</li>
<li>文件相关：chown， fchown，lchown，chown16，fchown16，lchown16，hmod，fchmod，utime，stat，fstat，lstat，acess，oldstat，oldfstat，oldlstat，stat64，lstat64，lstat64，open，close，creat，umask，dup，dup2，fcntl， fcntl64，select，poll，truncate，ftruncate，truncate64，ftruncate64，lseek，llseek，read，write，readv，writev，sendfile，sendfile64，readahead</li>
</ul>
<h2 id="VFS支持的文件系统"><a class="header-anchor" href="#VFS支持的文件系统"></a>VFS支持的文件系统</h2>
<ul>
<li>Disk-based 文件系统：Ext2, ext3, ReiserFS，Sysv, UFS, MINIX, VxFS，VFAT, NTFS，ISO9660 CD-ROM, UDF DVD，HPFS, HFS, AFFS, ADFS,</li>
<li>Network 文件系统：NFS, Coda, AFS, CIFS, NCP</li>
<li>特殊文件系统：/proc，/tmpfs等</li>
</ul>
<h1 id="Linux目录结构"><a class="header-anchor" href="#Linux目录结构"></a>Linux目录结构</h1>
<ul>
<li><code>/bin</code>:系统的二进制文件，比如各种命令</li>
<li><code>/boot</code>： 包含了启动所需的文件，如boot loader</li>
<li><code>/dev</code>:  设备对应的虚拟文件</li>
<li><code>/etc</code>: 系统和软件的配置文件</li>
<li><code>/lib</code>： 必要的共享库文件和内核模块</li>
<li><code>/media</code>: 外部设备通用挂载点的父目录</li>
<li><code>/mnt</code>: 临时文件系统的挂载点的父目录</li>
<li><code>/opt</code>：额外的软件包安装目录</li>
<li><code>/sbin</code>:只有管理员可以使用的命令的二进制文件，是与系统相关的命令，如<code>reboot</code>,<code>shutdown</code>等</li>
<li><code>/srv</code>: 系统提供的有关服务的数据</li>
<li><code>/usr</code>: Unix System Resources, 用于存放共享、只读的数据，子目录包括<code>/bin</code>, <code>/etc</code>, <code>/lib</code>, <code>/tmp</code>等，与根目录下的同名目录相比，<code>/usr</code>下的目录的数据是用于用户安装的软件的，而不是系统自带的。 还有<code>/include</code>, <code>/src</code>等目录，存放系统编程所需的头文件和源码等</li>
<li><code>/home</code>: 用户的家目录的父目录</li>
<li><code>/root</code>: root用户的家目录</li>
</ul>
<h1 id="包管理工具"><a class="header-anchor" href="#包管理工具"></a>包管理工具</h1>
<p>以<code>apt-get</code>为例，Ubuntu采用集中式软件仓库，<code>apt</code>从<code>/etc/apt/sources.list</code>中找到镜像站点地址, 从<code>package.gz</code>中获取所有包信息。 <code>apt</code>在本地存有一份软件包的信息索引，可以检测软件列表和软件依赖</p>
<p>apt在安装时安装软件和相应依赖</p>
<h1 id="File-System"><a class="header-anchor" href="#File-System"></a>File System</h1>
<h2 id="Windows"><a class="header-anchor" href="#Windows"></a>Windows</h2>
<p>普通磁盘：</p>
<ul>
<li>
<p>NTFS</p>
</li>
<li>
<p>比NTFS更早：fat32（磁盘最大32G,单个文件最大4G）, fat16</p>
</li>
</ul>
<p>U盘：exfat</p>
<h2 id="Linux"><a class="header-anchor" href="#Linux"></a>Linux</h2>
<p>ext1,2,3,4</p>
<p>如果不指定挂载，那么子目录就在父目录所在的分区上</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Lossless and Lossy Comprehension</title>
    <url>/2022/08/15/Lossless-and-Lossy-Comprehension/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Lossless and Lossy Compression</li>
<li>Comparison Between the two</li>
<li>PNG</li>
<li>AVIF</li>
<li>WebP</li>
<li>JPEG XL</li>
</ul>
<span id="more"></span>
<h1 id="Lossless-and-Lossy-Compression"><a class="header-anchor" href="#Lossless-and-Lossy-Compression"></a>Lossless and Lossy Compression</h1>
<ul>
<li>
<p>Lossless Comporession: 就是可逆的压缩, 压缩文件可以被解压为原文件</p>
<ul>
<li>
<p>流行的无损压缩方法:</p>
<ul>
<li>普通文件: ZIP, RAR</li>
<li>Web中的JS和CSS文件: GZIP</li>
<li>图像: <strong>PNG</strong></li>
</ul>
</li>
<li>
<p>无损压缩适合:logos, screenshots, charts, and graphics.</p>
<p>因为这些图片都有着<strong>连续的色块</strong>, 可以用类似<a href="https://en.wikipedia.org/wiki/Run-length_encoding">Run-Length Encoding (RLE)</a>的算法来压缩.</p>
</li>
</ul>
</li>
<li>
<p>Lossy Comporession: 在压缩时会损失一些信息, 但是压缩效果比无损压缩好很多</p>
<ul>
<li>流行的有损压缩方法:
<ul>
<li>JPEG,  lossy WebP</li>
</ul>
</li>
<li>有损压缩适合处理照片. 因为损失一些细节并不能被用户看出. 但是它不适合图表( graphics )之类的有连续色块的图像, 在这些图像上损失一点细节都会被用户察觉</li>
</ul>
</li>
</ul>
<h1 id="Comparison-Between-the-two"><a class="header-anchor" href="#Comparison-Between-the-two"></a>Comparison Between the two</h1>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/Lossless%20and%20Lossy%20Comprehension/Lossless%20and%20Lossy%20ComprehensionComparison%20Between%20the%20Lossless%20and%20Lossy.png" alt="Comparison Between the Lossless and Lossy"></p>
<p>如上“可回收图案”有大量连续色块. 用无损压缩PNG压缩到3KB, 其效果远好于无损压缩的JPEG的3KB, 甚至略好于JPEG的24KB.</p>
<p>这证明了对于Graphics等图片, 无损压缩的优势</p>
<h1 id="PNG"><a class="header-anchor" href="#PNG"></a>PNG</h1>
<ul>
<li>PNG ( <a href="https://en.wikipedia.org/wiki/Portable_Network_Graphics">Portable Network Graphics</a> ): 最古老的图像格式之一. 基于<a href="https://en.wikipedia.org/wiki/Deflate">DEFLATE compression algorithm</a>, 并且有一个颜色筛选器.
<ul>
<li>可以把PNG的DEFLATE算法替换成Google的 <a href="https://en.wikipedia.org/wiki/Zopfli">Zopfli</a>算法, 后者压缩效果更好, 但消耗时间更长</li>
<li>PNG format is supported by all browsers.</li>
</ul>
</li>
<li>背景: 1996年发布, 旨在取代GIF. PNG拥有24-bit color (8 bits per channel) and an alpha channel. 而 GIF 只有24种颜色和一个透明度值</li>
</ul>
<h2 id="优化步骤"><a class="header-anchor" href="#优化步骤"></a>优化步骤</h2>
<p>有许多<a href="https://www.cyberciti.biz/faq/linux-unix-optimize-lossless-png-images-with-optipng-command/">PNG优化工具</a>: <a href="http://advsys.net/ken/utils.htm">PNGOUT</a>, <a href="http://optipng.sourceforge.net/">OptiPNG</a>, and Rust-based <a href="https://github.com/shssoichiro/oxipng">OxiPNG</a></p>
<ol>
<li>
<p>I compressed PNG files using OxiPNG v5.0.0, using the maximum possible optimization level with the following command:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">oxipng /path/to/input/image.png --out /path/to/output/image.png --opt max --strip safe</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>I also optimized the same set of images using the Zopfli compression which takes a really long time but results in even smaller files.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">oxipng /path/to/input/image.png --out /path/to/output/image.png --opt max --strip safe --zopfli</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>PNG优化效果很一般, OXIPNG能优化12%左右. 开启<code>--zopfli</code>后优化时间大幅提升, 但最终效果也只有18%. 总的来说, PNG除了支持度比较高之外没什么优势. 要降低图片大小, 与其使用PMG + 优化, 不如直接使用其他图片格式( 无损的WebP和无损的JPEG XL )</p>
<h1 id="AVIF"><a class="header-anchor" href="#AVIF"></a>AVIF</h1>
<ul>
<li>AVIF( <a href="https://en.wikipedia.org/wiki/AV1#AV1_Image_File_Format_(AVIF)">AV1 Image File Format</a> ): 基于AV1 video codec( codec = encoder + decoder, 编解码器 )的新图像格式. <strong>同时支持无损和有损压缩</strong></li>
<li>AVIF is supported in recent versions of Google Chrome and can be enabled in Firefox by using a configuration flag.</li>
<li>AVIF有许多advanced features: high bit depth, HDR ...</li>
</ul>
<h2 id="压缩步骤"><a class="header-anchor" href="#压缩步骤"></a>压缩步骤</h2>
<p>压缩工具是avifenc from <a href="https://github.com/AOMediaCodec/libavif">libavif</a></p>
<p>With avifencv0.9.1I, used the lowest possible speed to get the best compression.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">avifenc --lossless --speed 0 /path/to/input/image.png /path/to/output/image.avif</span><br></pre></td></tr></table></figure>
<p>无损和有损的AVIF压缩效果都很一般,不推荐</p>
<h1 id="WebP"><a class="header-anchor" href="#WebP"></a>WebP</h1>
<ul>
<li><a href="https://en.wikipedia.org/wiki/WebP">WebP</a>:  Google在2008年发布了基于VP8 video codec的有损WebP; 又在2012年发布了不基于VP8 video codec的无损WebP0.3</li>
<li>While lossy WebP is limited to 4:2:0 Chroma subsampling which discards some color information, lossless WebP will retain all original image data.</li>
<li>WebP is now supported by all major browsers <u>except Safari</u></li>
</ul>
<h2 id="压缩步骤-2"><a class="header-anchor" href="#压缩步骤-2"></a>压缩步骤</h2>
<p>For WebP, I used the official cwebp tool, version 1.2.0. For best compression, I defined quality of 100 and method 6.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cwebp /path/to/input/image.png -o /path/to/output/image.webp -q 100 -m 6 -lossless</span><br></pre></td></tr></table></figure>
<p>Lossless WebP压缩效果暴打PMG, 其大小能降低大约41%, 压缩速度也很快. WebP的支持度也很高. <strong>强烈推荐使用WebP</strong></p>
<h1 id="JPEG-XL"><a class="header-anchor" href="#JPEG-XL"></a>JPEG XL</h1>
<ul>
<li><a href="https://en.wikipedia.org/wiki/JPEG_XL">JPEG XL</a>:  JPEG XL是JPEG( aka JPG )格式的后继, 它相当于两种图像格式的结合: <a href="https://github.com/google/pik">Pik</a> developed by Google  +  <a href="https://github.com/cloudinary/fuif">FUIF</a> (Free Universal Image Format) developed by Cloudinary. <strong>同时支持无损和有损压缩</strong></li>
<li>JPEG XL is supported in Chrome and Firefox, but it’s not enabled by default. Support for the format must be enabled by using a feature flag.</li>
</ul>
<h2 id="压缩步骤-3"><a class="header-anchor" href="#压缩步骤-3"></a>压缩步骤</h2>
<p>Pik使用的CLI tool是<code>cjxl</code>, 再开启<code>--modular</code>选项就可以添加FUIF格式</p>
<p>To compress JPEG XL files, I used the official cjxl tool, version 0.3.7_1.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cjxl /path/to/input/image.png /path/to/output/image.jxl --modular --quality 100 --speed 9 -E 3 </span><br></pre></td></tr></table></figure>
<ul>
<li><code>-E</code> flag: means &quot;extra arguments&quot;, I used the value 3, which is recommended for best compression. Using this option shaved off a few kilobytes from the file size while the image took a bit longer to compress.</li>
</ul>
<p>JEPG XL的压缩效果略好于WebP, 二者详细对比见<a href="https://nginx-v5qibj75pa-ew.a.run.app/blog/is-webp-really-better-than-jpeg">这篇文章</a></p>
]]></content>
      <categories>
        <category>Potpourri</category>
      </categories>
  </entry>
  <entry>
    <title>Love, Death and Robots</title>
    <url>/2022/09/26/Love-Death-and-Robots/</url>
    <content><![CDATA[<p>Sorted by episode</p>
<span id="more"></span>
<h1 id="桑尼的优势"><a class="header-anchor" href="#桑尼的优势"></a>桑尼的优势</h1>
<p>打斗太帅。这种竞技场格斗，怪物绕着墙壁爬呀爬的画面好像在影视中一再出现。 比如暗黑3。 当然还有《刺杀小说家》，最后Boss战里，Boss也是打着打着爬墙上去了。 不过《刺杀小说家》是烂片，烂到我不想吐槽（它居然是路阳拍的，曾导演《绣春刀。。》。 看来中国又堕落了一个导演）</p>
<p>这集就是展现技术力的，画面很酷，最后的激情戏，主角做到一半头突然被刺穿的一幕挺惊悚的。 结局也能想到，在赛博时代，人的“身体”其实是个逻辑概念，“我”不一定在“我”这个身体里。 这种关于赛博时代人的肉体和思维分离的考虑也在爱死机的好几集中出现。</p>
<h1 id="三个机器人"><a class="header-anchor" href="#三个机器人"></a>三个机器人</h1>
<p>轻松的讽刺篇。 末日后三个机器人旅行人类城市的故事。 三“人”在篮球馆吵吵闹闹，背景中挂着一个吊死的女孩，这幕格外讽刺和戏谑。 只有人类会造出各种恐怖的玩意儿专门用来把同类弄死。</p>
<h1 id="证人"><a class="header-anchor" href="#证人"></a>证人</h1>
<p>循环叙事，技术力超强，美术也很好。 关于凶手在街上追逐一个裸体女人的故事，还有恋物癖性俱乐部的脱衣舞，未来式的香港城市。 其实画面已经隐喻了这是个梦 --- 歪曲的马路线（主角内心）、粉色的灯牌（女生嘛）、俱乐部中人们扭曲且模糊的脸（说明这些人在主角心中都一个样，主角对他们没什么印象） 、俱乐部墙上屏幕中的“Leash”字样（暗示主角讨厌俱乐部环境，她想要逃脱）。</p>
<p>拿了三项艾美奖哟，导演很厉害。</p>
<h1 id="机动装甲"><a class="header-anchor" href="#机动装甲"></a>机动装甲</h1>
<p>本以为是外星的植物大战僵尸，没想到是星际殖民的故事。人类---农夫们才是星球的殖民者，而怪物是原住民。 人类的殖民地（农庄）在这个星球上就像一个个脓包一样，绝妙的讽刺。</p>
<h1 id="噬魂者"><a class="header-anchor" href="#噬魂者"></a>噬魂者</h1>
<p>考古队挖到德古拉发现它怕猫，侥幸逃脱后发现自己来到德古拉老巢的故事，最后肯定团灭啦φ(゜▽゜*)♪ 有个很变态的肢解镜头。 德古拉怕小猫咪也挺好玩的。 如果硬说有什么教育意义的话，就是告诫人们不要自以为是，乱挖危险的坟墓。 否则尽管运气好有小猫咪，面对几百只德古拉也只能等死。</p>
<h1 id="当酸奶统治世界"><a class="header-anchor" href="#当酸奶统治世界"></a>当酸奶统治世界</h1>
<p>超好笑。 讽刺人统治世界还不如酸奶。 酸奶问总统要俄亥俄州，总统不给， 酸奶说你不给我们就去找中国，他们答应给我们一个省，总统听了马上就答应了。 笑死了哈哈哈。</p>
<p>人被酸奶统治后，发现日子过得反而越来越好，最后酸奶们只花了极短的时间就实现了科技跃迁，前往外太空了。 人类却担忧：“没有酸奶的统治我们该怎么办呀QAQ”，从统治到被统治的这一反转，讽刺了人类政府和人类种族的无能。</p>
<p>酸奶们的太空飞船是酸奶盒形状的哟。</p>
<h1 id="裂缝之外"><a class="header-anchor" href="#裂缝之外"></a>裂缝之外</h1>
<p>类似缸中之脑，不过外星人也是出于好心。 床戏很好看[]~(￣▽￣)~*</p>
<h1 id="狩猎愉快"><a class="header-anchor" href="#狩猎愉快"></a>狩猎愉快</h1>
<p>“我想狩猎，狩猎那些以为能够支配我们的男人，那些作奸犯科，却美其名曰进步的男人。”</p>
<p>讲外国对中国的殖民，借女权来讲中国的屈辱历史，毕竟女性的遭遇就是当时中国的一个缩影。 这片能上爱死机也反映了外国友人并非啥都不懂，人家也知道殖民主义是不对的。 夜幕下小狐狸的身影在楼宇间跳动，分不清它的躯体是机械还是血肉。</p>
<h1 id="The-Dump"><a class="header-anchor" href="#The-Dump"></a>The Dump</h1>
<p>垃圾堆成精了。</p>
<p>该片也讽刺了那些“上流人物”，他们瞧不起住在垃圾堆里的底层人民，殊不知自己才是制造垃圾的那方。</p>
<h1 id="Shape-Shifters"><a class="header-anchor" href="#Shape-Shifters"></a>Shape Shifters</h1>
<p>讲战争对人性的异化，那些能变身狼人而获得更强战力的士兵反而被其他士兵恐惧和排挤，认为他们是怪物，不是“自己人”。讽刺种族问题吧，能力再强也有的是办法排挤你。 变异士兵的处境和越战老兵很像，当初被派出去保家卫国，回来后还要被本国人骂“baby killer”，而主导这一切的政客高高在上。</p>
<h1 id="Helping-Hand"><a class="header-anchor" href="#Helping-Hand"></a>Helping Hand</h1>
<p>动画版《地心引力》，歌颂人的勇气和坚强的，看着太疼了ORZ</p>
<h1 id="Fish-Night"><a class="header-anchor" href="#Fish-Night"></a>Fish Night</h1>
<p>既然人死后灵魂能在屋子里徘徊，那这些鱼啊水木啊死后，它们的灵魂能在这片昔日的大海存留吗？</p>
<p>超浪漫的一集，话说大海死后有没有灵魂？</p>
<h1 id="Lucky-13"><a class="header-anchor" href="#Lucky-13"></a>Lucky 13</h1>
<p>外星战争，飞机有灵，完了。</p>
<h1 id="Zima-Blue"><a class="header-anchor" href="#Zima-Blue"></a>Zima Blue</h1>
<p>超爱的一集，美术很好看。</p>
<p>讲艺术的一集，和我的理解不谋而合。 <strong>艺术就是世界观</strong>，你在艺术中想描绘的世界就是你认知的世界。 起初我们是模仿世界，对现实模仿得越来越像；后来是认知世界，对世界的各方各面进行探索，无所不包；最后是解构世界----归根到底，我们的“世界”永远是我们“认知”的世界，客观的世界只有被认知成为主观的世界才能进入我们的心灵，因此到了这一阶段，艺术就开始注重于内心世界的建构了，外在世界只是为内心世界的建设提供原材料而已。</p>
<p>艺术家Zima起初只是个清洗泳池的小机器人，经过一代代主人的改造，才成为了拥有完备功能和智力的AI。 他的艺术的变化就是他世界观的变化，起初是模仿世界（画人像），后来不断探索世界（画星空），到后来回归自我，探索自己认知世界的方式（画蓝色块块，其实是泳池瓷砖的颜色，它作为泳池机器人时醒来第一眼就是这个）。最后Zima回归本源，有人理解是“生命的终点是回归起点”，我不太能理解这话是什么意思， 我对Zima此举的理解是它想要回到生命最初的状态，来体验那种纯粹地认知世界的过程。</p>
<h1 id="Blind-Spot"><a class="header-anchor" href="#Blind-Spot"></a>Blind Spot</h1>
<p>意识存档，可备份的意识还是主人吗？身为计算机学生好像不应该问这个问题。。。。毕竟意识就是一连串电波编码（我猜的，如有不对请指正）。 编码这种东西，当然不具备唯一性，所以完全可以存在两串一模一样的编码，不存在谁是主人的问题。</p>
<h1 id="Ice-Age"><a class="header-anchor" href="#Ice-Age"></a>Ice Age</h1>
<p>冰箱里有个微缩文明不断轮回。 小文明进行到现实世界的21世纪时突然爆发了核战争也是很讽刺，不过核战争后人类文明没有灭亡，反而进一步进化了，也算是对未来的美好祝愿吧。</p>
<p>其实我认为核战争早晚会爆发，一个文明想要不断进步就必须经历越来越惨烈的战争，否则科技无法跳跃式发展。 没有两次大战，我们说不定还活在蒸汽时代呢。</p>
<h1 id="Alternative-Histories"><a class="header-anchor" href="#Alternative-Histories"></a>Alternative Histories</h1>
<p>如果历史能被改变，我们会不会过上不一样的日子？ 显然不会，本片以戏谑的手法告诉人们，历史是不会以个人为转移的，哪怕你能以各种手法提前杀死希特勒，二战依然会爆发。 不过虽然历史大势不会改变，对于个人和某个团体而言，历史的细微变动确实能影响他们的际遇。 比如，如果希特勒是被俄国人杀死，俄国说不定能成为现在最强大的国家。</p>
<h1 id="The-Secret-War"><a class="header-anchor" href="#The-Secret-War"></a>The Secret War</h1>
<p>黑红军的，技术力挺好。</p>
]]></content>
      <categories>
        <category>Art</category>
      </categories>
      <tags>
        <tag>Movie</tag>
      </tags>
  </entry>
  <entry>
    <title>ML Start Guide</title>
    <url>/2022/06/16/ML-Start-Guide/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>学习路线</li>
<li>经验</li>
<li>行业前景</li>
<li>就业</li>
</ul>
<span id="more"></span>
<h1 id="学习路线"><a class="header-anchor" href="#学习路线"></a>学习路线</h1>
<h2 id="Book"><a class="header-anchor" href="#Book"></a>Book</h2>
<ul>
<li>西瓜书</li>
<li>《动手学深度学习》 + <a href="https://www.bilibili.com/video/BV18h411r7Z7?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=f293ba57058847ba700ac500c350b997">李沐的深度学习课</a></li>
</ul>
<h2 id="Course"><a class="header-anchor" href="#Course"></a>Course</h2>
<p>之前提到的李沐的DL课</p>
<p><a href="https://c.d2l.ai/stanford-cs329p/">斯坦福2021秋季·实用机器学习</a></p>
<h2 id="Articles"><a class="header-anchor" href="#Articles"></a>Articles</h2>
<p>github搜awesome … learning基本都有论文整理，要看最近几年的</p>
<p>例如：</p>
<p><a href="https://github.com/yassouali/awesome-semi-supervised-learning">https://github.com/yassouali/awesome-semi-supervised-learning</a></p>
<p><a href="https://github.com/jindongwang/transferlearning#5transfer-learning-scholars-%E8%91%97%E5%90%8D%E5%AD%A6%E8%80%85">https://github.com/jindongwang/transferlearning#5transfer-learning-scholars-著名学者</a></p>
<h3 id="Conference"><a class="header-anchor" href="#Conference"></a>Conference</h3>
<p>以下均属于CCF A</p>
<p>ML大会：</p>
<ul>
<li>icml</li>
<li>neurips</li>
<li>iclr</li>
</ul>
<p>稍微水一点：</p>
<ul>
<li>aaai</li>
<li>IJCAI</li>
</ul>
<h3 id="Journal"><a class="header-anchor" href="#Journal"></a>Journal</h3>
<ul>
<li>JMLR： 注重理论+应用，强调算法必须有理论解释</li>
<li>TPAMI： 文章看上去繁杂，没什么理论，但注重实验效果好</li>
<li>COLT：不要看。全是理论，涉及优化，PAC学习理论等</li>
</ul>
<h2 id="Math"><a class="header-anchor" href="#Math"></a>Math</h2>
<p>对于CV，NLP这些方向，不需要什么数学。 对于纯ML，也就是关注ML本身问题的领域，需要懂线代和概率论，以及一些一些ML理论。</p>
<p>总结： 前期不需要很强的数学基础，线代+概率论已经足够</p>
<ul>
<li>为了保险，还是把数分、泛函、拓扑、统计、数理逻辑、凸优化全学了吧。 不过这是高阶需求，可以慢慢来</li>
</ul>
<h1 id="经验"><a class="header-anchor" href="#经验"></a>经验</h1>
<p>个人的经验是深度和广度同时并存。深度是找个方向把前沿（16年后至今的）的方法看一遍，广度是从知乎或者其他综述看看其他的方向有哪些经典重要的方法</p>
<p>推荐的方向：弱监督学习和迁移学习、图学习、自监督学习</p>
<ul>
<li>这些都是比较大的方向，还能再细化。比如弱监督有噪声学习，部分标记学习，主动学习等；迁移学习有领域自适应，领域泛化等</li>
</ul>
<h1 id="行业前景"><a class="header-anchor" href="#行业前景"></a>行业前景</h1>
<p>应用基本是深度学习。 包括CV， NLP，推荐算法等</p>
<p>CV和NLP已经卷烂了。 ML和CV、NLP是纵向、横向的关系</p>
<p>整个CS都在衰败，ML也不例外。 尽管如此，ML依然是CS领域最有前景的学科，ML完蛋就代表CS也完蛋了</p>
<h1 id="就业"><a class="header-anchor" href="#就业"></a>就业</h1>
<h2 id="工业界"><a class="header-anchor" href="#工业界"></a>工业界</h2>
<p>算法工程师，要求顶会论文。 工作就是调整模型甚至调参，希望以后能改变吧。</p>
<h2 id="学术界"><a class="header-anchor" href="#学术界"></a>学术界</h2>
<p>extreamly hard</p>
<p>博士毕业7篇A的一作才能去东南当个讲师</p>
<p>留南大当讲师起码10篇</p>
]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
  </entry>
  <entry>
    <title>MYSQL Management</title>
    <url>/2022/04/10/MYSQL-Management/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Mysql Management</li>
<li>Mysql Database Management</li>
<li>Mysql Table Management</li>
</ul>
<span id="more"></span>
<h1 id="Mysql-Management"><a class="header-anchor" href="#Mysql-Management"></a>Mysql Management</h1>
<ul>
<li><strong>USE *数据库名*</strong> :<br>
选择要操作的Mysql数据库，使用该命令后所有Mysql命令都只针对该数据库。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use RUNOOB;</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>SHOW DATABASES:</strong><br>
列出 MySQL 数据库管理系统的数据库列表。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> DATABASES;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Database           <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> information_schema <span class="operator">|</span>fuke</span><br><span class="line"><span class="operator">|</span> RUNOOB             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> cdcol              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> onethink           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> performance_schema <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> phpmyadmin         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> test               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> wecenter           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> wordpress          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><strong>SHOW TABLES:</strong><br>
显示指定数据库的所有表，使用该命令前需要使用 use 命令来选择要操作的数据库。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use RUNOOB;</span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> TABLES;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_runoob <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="operator">|</span> employee_tbl     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> runoob_tbl       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> tcount_tbl       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>SHOW COLUMNS FROM *数据表*:</strong><br>
显示数据表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> COLUMNS <span class="keyword">FROM</span> runoob_tbl;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> Field           <span class="operator">|</span> Type         <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="operator">|</span> runoob_id       <span class="operator">|</span> <span class="type">int</span>(<span class="number">11</span>)      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> runoob_title    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">255</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> runoob_author   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">255</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> submission_date <span class="operator">|</span> <span class="type">date</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------------+------+-----+---------+-------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>SHOW INDEX FROM *数据表*:</strong><br>
显示数据表的详细索引信息，包括PRIMARY KEY（主键）。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> runoob_tbl;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Table</span>      <span class="operator">|</span> Non_unique <span class="operator">|</span> Key_name <span class="operator">|</span> Seq_in_index <span class="operator">|</span> Column_name <span class="operator">|</span> <span class="keyword">Collation</span> <span class="operator">|</span> <span class="keyword">Cardinality</span> <span class="operator">|</span> Sub_part <span class="operator">|</span> Packed <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Index_type <span class="operator">|</span> Comment <span class="operator">|</span> Index_comment <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line"><span class="operator">|</span> runoob_tbl <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>  <span class="operator">|</span>            <span class="number">1</span> <span class="operator">|</span> runoob_id   <span class="operator">|</span> A         <span class="operator">|</span>           <span class="number">2</span> <span class="operator">|</span>     <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>   <span class="operator">|</span>      <span class="operator">|</span> BTREE      <span class="operator">|</span>         <span class="operator">|</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>SHOW TABLE STATUS [FROM db_name] [LIKE 'pattern'] \G:</strong><br>
该命令将输出Mysql数据库管理系统的性能及统计信息。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS  <span class="keyword">FROM</span> RUNOOB;   # 显示数据库 RUNOOB 中所有表的信息</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">from</span> RUNOOB <span class="keyword">LIKE</span> <span class="string">&#x27;runoob%&#x27;</span>;     # 表名以runoob开头的表的信息</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">from</span> RUNOOB <span class="keyword">LIKE</span> <span class="string">&#x27;runoob%&#x27;</span>\G;   # 加上 \G，查询结果按列打印</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="创建用户帐户"><a class="header-anchor" href="#创建用户帐户"></a>创建用户帐户</h2>
<p><code>CREATE USER</code>:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> user_account IDENTIFIED <span class="keyword">BY</span> password;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>user_account</code>: 格式为<code>username@hostname</code></p>
<ul>
<li>
<p><code>localhost</code>: 只允许从本机连接</p>
</li>
<li>
<p><code>%</code>: 相当于通配, <strong>但是不能匹配到 <code>locahost</code></strong></p>
<ul>
<li>
<p>例如,要允许<code>mysqladmin</code>用户帐户从<code>yiibai.com</code>主机的任何子域连接到数据库服务:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> mysqladmin@<span class="string">&#x27;%.yiibai.com&#x27;</span></span><br><span class="line">IDENTIFIED <span class="keyword">by</span> <span class="string">&#x27;mypassword&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>如果只写<code>username@%</code>, 则相当于允许 <code>locahost</code>外的所有ip</p>
</li>
<li>
<p>也就是说, <code>username@%</code>和<code>username@localhost</code>是两个用户!</p>
</li>
</ul>
</li>
<li>
<p>可以不写hostname, 此时相当于<code>%</code></p>
</li>
</ul>
</li>
<li>
<p><code>password</code>: 在<code>IDENTIFIED BY</code>子句中指定.</p>
<ul>
<li><code>password</code>必须是明文, 它会被MySQL加密</li>
<li>空密码就是<code>IDENTIFIED BY ''</code></li>
</ul>
</li>
<li>
<p>新创建的用户只能登录到mysql, 没有其他权限</p>
</li>
<li>
<p>要注意引号<code>''</code>, 特别当用户帐户包含特殊字符(如<code>_</code>或<code>%</code>)时, 比如, 如果你写了<code>&quot;username@hostname&quot;</code>, 这其实是一整个username, 而没有包含hostname, 而hostname会被默认设置为<code>%</code></p>
</li>
<li>
<p>这样的用户帐户，MySQL将创建一个<code>username@hostname</code>的用户，并允许用户从任何主机进行连接，这可能不是您预期的。</p>
</li>
</ul>
<h2 id="导出-入数据库"><a class="header-anchor" href="#导出-入数据库"></a>导出/入数据库</h2>
<p>导出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -u [user] [database_name] &gt; [filename].sql</span><br></pre></td></tr></table></figure>
<p>导入:</p>
<figure class="highlight plaintext"><figcaption><span>y</span></figcaption><table><tr><td class="code"><pre><span class="line">mysql&gt; source c:\temp\mysqlsampledatabase.sql</span><br></pre></td></tr></table></figure>
<h2 id="给用户授权"><a class="header-anchor" href="#给用户授权"></a>给用户授权</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT ALL ON *.* TO &#x27;super&#x27;@&#x27;localhost&#x27; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>ON *.*</code>: 表示MySQL中的所有数据库和所有对象</p>
<ul>
<li><code>.</code>之前的部分表示数据库, <code>.</code>后面的部分表示表, 例如<code>database.table</code>, <code>testdb.offices</code>等等</li>
</ul>
</li>
<li>
<p><code>WITH GRANT OPTION</code>: 允许<code>super@localhost</code>向其他用户授予权限</p>
</li>
</ul>
<p>授权后需要刷新权限:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flush privileges</span><br></pre></td></tr></table></figure>
<h2 id="查看用户权限"><a class="header-anchor" href="#查看用户权限"></a>查看用户权限</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show grants for [user]</span><br></pre></td></tr></table></figure>
<h2 id="修改用户名和密码"><a class="header-anchor" href="#修改用户名和密码"></a>修改用户名和密码</h2>
<h3 id="在登陆MySQL的情况下"><a class="header-anchor" href="#在登陆MySQL的情况下"></a>在登陆MySQL的情况下</h3>
<h3 id="Plan-A-通过sql命令修改密码"><a class="header-anchor" href="#Plan-A-通过sql命令修改密码"></a>Plan A: 通过sql命令修改密码</h3>
<p>命令格式：set password for 用户名@localhost = password('新密码');</p>
<p>新版本mysql 命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter user 用户名@localhos identified by &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure>
<ul>
<li>如果密码为空，则不要加<code>identified by ''</code>子句</li>
</ul>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set password for root@localhost = password(&#x27;123&#x27;); </span><br><span class="line"># or</span><br><span class="line">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;123&#x27;;</span><br></pre></td></tr></table></figure>
<h3 id="Plan-B-用UPDATE直接修改user表"><a class="header-anchor" href="#Plan-B-用UPDATE直接修改user表"></a>Plan B: 用UPDATE直接修改user表</h3>
<ol>
<li>
<p>使用mysql数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql; </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>更改user表中指定用户的密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update user set password=password(&#x27;123&#x27;) where user=&#x27;root&#x27; and host=&#x27;localhost&#x27;; </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>权限刷新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="在没有登陆的情况下"><a class="header-anchor" href="#在没有登陆的情况下"></a>在没有登陆的情况下</h3>
<p><code>mysqladmin</code> 命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqladmin -u用户名 -p旧密码 password 新密码 </span><br></pre></td></tr></table></figure>
<p>例子：将root用户的密码由123456改为123</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqladmin   -u root -p 123456 password 123</span><br></pre></td></tr></table></figure>
<h1 id="MYSQL-Database-Management"><a class="header-anchor" href="#MYSQL-Database-Management"></a>MYSQL Database Management</h1>
<h3 id="MySQL创建数据库"><a class="header-anchor" href="#MySQL创建数据库"></a>MySQL创建数据库</h3>
<p>我们可以在登陆 MySQL 服务后，使用 <strong>create</strong> 命令创建数据库，语法如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE 数据库名;</span><br></pre></td></tr></table></figure>
<h3 id="drop-命令删除数据库"><a class="header-anchor" href="#drop-命令删除数据库"></a>drop 命令删除数据库</h3>
<p>drop 命令格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database &lt;数据库名&gt;;</span><br></pre></td></tr></table></figure>
<h1 id="MYSQL-Table-Management"><a class="header-anchor" href="#MYSQL-Table-Management"></a>MYSQL Table Management</h1>
<h3 id="创建表"><a class="header-anchor" href="#创建表"></a>创建表</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name (column_name column_type);</span><br></pre></td></tr></table></figure>
<p>以下例子中我们将在 RUNOOB 数据库中创建数据表runoob_tbl：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `runoob_tbl`(</span><br><span class="line">   `runoob_id` <span class="type">INT</span> UNSIGNED AUTO_INCREMENT,</span><br><span class="line">   `runoob_title` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   `runoob_author` <span class="type">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   `submission_date` <span class="type">DATE</span>,</span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY ( `runoob_id` )</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<p>实例解析：</p>
<ul>
<li>如果你不想字段为 <strong>NULL</strong> 可以设置字段的属性为 <strong>NOT NULL</strong>， 在操作数据库时如果输入该字段的数据为<strong>NULL</strong> ，就会报错。</li>
<li>AUTO_INCREMENT定义列为自增的属性，一般用于主键，数值会自动加1。</li>
<li>PRIMARY KEY关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。</li>
<li>ENGINE 设置存储引擎，CHARSET 设置编码。</li>
</ul>
<h3 id="删除表"><a class="header-anchor" href="#删除表"></a>删除表</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> table_name ;</span><br></pre></td></tr></table></figure>
<h3 id="查看表"><a class="header-anchor" href="#查看表"></a>查看表</h3>
<ul>
<li>
<p>列出当前数据库的所有表：<code>SHOW TABLES;</code></p>
</li>
<li>
<p>查看表的结构: <code>DESC [table_name]</code></p>
<ul>
<li>
<p>这里<code>DESC</code>是<code>describe</code>的缩写</p>
</li>
<li>
<p>还有个<code>DESC</code>是<code>descend</code>的缩写：</p>
<p><code>select ename,sal from emp order by sal desc; </code></p>
<ul>
<li>手动指定按照薪水由大到小排序（降序关键字<code>desc</code>）</li>
</ul>
</li>
<li>
<p>查看创建表的SQL语句：<code>SHOW CREATE TABLE [table_name];</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="插入记录"><a class="header-anchor" href="#插入记录"></a>插入记录</h3>
<p>MySQL 表中使用 <strong>INSERT INTO</strong> SQL语句来插入数据。</p>
<p>你可以通过 mysql&gt; 命令提示窗口中向数据表中插入数据，或者通过PHP脚本来插入数据。</p>
<p>以下为向MySQL数据表插入数据通用的 <strong>INSERT INTO</strong> SQL语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO table_name ( field1, field2,...fieldN )</span><br><span class="line">                       VALUES</span><br><span class="line">                       ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure>
<p>如果数据是字符型，必须使用单引号或者双引号，如：&quot;value&quot;。</p>
<p>如果数据是DATE类型， 则不需要输入连字符， 如<code>2019-08-01</code>， 则插入<code>20190721</code></p>
<h3 id="修改字段"><a class="header-anchor" href="#修改字段"></a>修改字段</h3>
<ul>
<li>
<p>如果要给<code>students</code>表新增一列<code>birth</code>，使用：</p>
<p><code>ALTER TABLE students ADD COLUMN birth VARCHAR(10) NOT NULL;</code></p>
</li>
<li>
<p>要修改birth列，例如把列名改为birthday，类型改为VARCHAR(20)：</p>
<p><code>ALTER TABLE students CHANGE COLUMN birth birthday VARCHAR(20) NOT NULL;</code></p>
</li>
<li>
<p>要删除列，使用：</p>
<p><code>ALTER TABLE students DROP COLUMN birthday;</code></p>
</li>
</ul>
<p>RENAME用于表的重命名：RENAME <NAME> 或 RENAME TO <NAME></p>
<p>MODIFY用于字段类型的修改：MODIFY COLUMN  &lt;列名&gt; &lt;类型&gt;</p>
<p>ALTER用于对字段类型、默认值的修改：ALTER COLUMN &lt;列名&gt; &lt;类型&gt;  SET DE***T &lt;默认值&gt;</p>
<p>CHANGE用于对列名及类型的修改：CHANGE COLUMN &lt;旧列名&gt; &lt;新列名&gt; &lt;类型&gt;</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>Machine Learning Intro</title>
    <url>/2022/02/16/Machine-Learning-Intro/</url>
    <content><![CDATA[<p>Outline</p>
<ul>
<li>基本术语</li>
<li>模型评估和选择</li>
</ul>
<span id="more"></span>
<h1 id="Basic-Term"><a class="header-anchor" href="#Basic-Term"></a>Basic Term</h1>
<h2 id="Data"><a class="header-anchor" href="#Data"></a>Data</h2>
<p>令$D = { x_1,x_2,..,x_m }$表示包含m个示例的数据集，每个示例由d个属性描述，则每个示例$x_i={ x_{i1}, x_{i2}, \dots, x_{id} }$是d维样本空间中的一个向量，$x_i \in \chi$, 其中$x_{ij}$是样本$x_i$在第j个属性的取值</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Artificial%20Intelligence/%E6%95%B0%E6%8D%AE%E9%9B%86.png" alt="data set"></p>
<ul>
<li>
<p>上面的每条record就是一个<strong>示例</strong>（instance）或<strong>样本</strong>（ sample ）</p>
</li>
<li>
<p>上面的每个field称为一个<strong>属性</strong>（ attribute ）或<strong>特征</strong>（ feature ）,属性的取值就是属性值</p>
</li>
<li>
<p><strong>属性空间</strong>（attribute value）、<strong>样本空间</strong>( sample  space )、<strong>输入空间</strong>： 属性张成的空间，记为$\chi$</p>
</li>
<li>
<p><strong>标记空间</strong>、<strong>输出空间</strong>： 标记张成的空间，记为 $\gamma $</p>
</li>
<li>
<p>如果把属性作为坐标轴，每个示例都对应特征空间的一个点，称为<strong>特征向量</strong>（  feature  vector ）， 属性个数就是样本维度</p>
</li>
<li>
<p>样例（  Example ）:  示例+标记, 用$(x_i,y_i)$表示第i个样例，其中$y_i \in \gamma$是示例$x_i$的标记， $\gamma $ 是所有标记的集合，也就是输出空间</p>
<ul>
<li>如果把标记看作对象本身的一部分，那么示例也可以看作样本</li>
</ul>
</li>
<li>
<p>训练集: 一组训练样例</p>
</li>
<li>
<p>测试集: 一组测试样例</p>
</li>
</ul>
<h2 id="Task"><a class="header-anchor" href="#Task"></a>Task</h2>
<p>根据标记的取值情况</p>
<ul>
<li>分类任务:标记为离散值
<ul>
<li>二分类:例如(好瓜,坏瓜)(正类,反类)(+1,-1)</li>
<li>多分类:例如(冬瓜,南瓜,西瓜)</li>
</ul>
</li>
<li>回归任务:标记为连续值
<ul>
<li>例如,瓜的成熟度S</li>
</ul>
</li>
<li>聚类任务:标记为空值,对示例进行自动分组( 即，要分的组也不知道)
<ul>
<li>例如,本地瓜,外地瓜</li>
</ul>
</li>
</ul>
<p>建立一个从输入空间 $\chi$到输出空间$\gamma$的映射：$f : \ x \rightarrow y$, 对二分类任务，通常令$\gamma = {-1,+1}$  或${0,1}$；对多分类任务，   $|\gamma|=2$; 对回归任务， $\gamma = R$</p>
<p>根据标记的完整情况</p>
<ul>
<li>(有)监督学习:所有示例都有标记
<ul>
<li>分类、回归</li>
</ul>
</li>
<li>无监督学习:所有示例都没有标记
<ul>
<li>聚类</li>
</ul>
</li>
<li>半监督学习:少量示例有标记,大量示例没标记</li>
<li>噪音标记学习:标记有,但是不完全准确</li>
</ul>
<h2 id="Goal"><a class="header-anchor" href="#Goal"></a>Goal</h2>
<p>机器学习技术的根本目标就是泛化能力</p>
<p>最理想的机器学习技术是学习到<strong>概念</strong>(人类学习,可理解的)</p>
<ul>
<li>比如，“好瓜是某种色泽，某种根蒂，某种敲声的瓜“这样的<strong>概念</strong>，但是，未来是不确定的，你可能遇到没见过的瓜</li>
</ul>
<p>但是现实中很困难,因此很多时候机器学习采用的是黑盒模型</p>
<h2 id="假设空间"><a class="header-anchor" href="#假设空间"></a>假设空间</h2>
<ul>
<li>
<p>假设空间( hypothesis space )：所有假设组成的空间。</p>
<ul>
<li>学习就是在假设空间中搜索的过程，搜索目标是找到与训练集匹配的假设</li>
</ul>
</li>
<li>
<p>版本空间（ version space ）： 假设空间的子集，与训练集一致的假设集合</p>
</li>
<li>
<p>归纳偏好：学习过程中对某种类型假设的偏好称作归纳偏好</p>
<ul>
<li>”到底从版本空间中选择哪一个假设“</li>
<li>可以认为是假设空间（事实上是版本空间）中对假设进行选择的启发式方法</li>
<li>真实假设可以不在版本空间中，因为版本空间只是符合了训练集的假设</li>
</ul>
</li>
</ul>
<h2 id="NFL定理"><a class="header-anchor" href="#NFL定理"></a>NFL定理</h2>
<p>No Free Lunch： 因为未来数据是不知道的,总有一种未来数据的分布让你失败</p>
<h1 id="模型评估与选择"><a class="header-anchor" href="#模型评估与选择"></a>模型评估与选择</h1>
<h2 id="误差"><a class="header-anchor" href="#误差"></a>误差</h2>
<p>“错误率”： 分类错误的样本数占样本总数的比例</p>
<p>精度： ，1 - 错误率</p>
<p>误差： 学习器的实际预测输出与样本的真实输出之间的差异</p>
<p>训练误差或<strong>经验误差</strong>： 学习器在训练集上的误差</p>
<p>测试误差或<strong>泛化误差</strong>： 学习器在新样本上的误差</p>
<h2 id="过拟合-欠拟合"><a class="header-anchor" href="#过拟合-欠拟合"></a>过拟合&amp; 欠拟合</h2>
<ul>
<li>
<p>过拟合： 模型把训练样本学得“太好”时，把训练样本自身的一些特点当作了所有潜在样本都会具有的一般性质。这样会致使泛化性能的下降</p>
</li>
<li>
<p>欠拟合：对训练样本的一般性质尚未学好。</p>
</li>
</ul>
<h2 id="评估方法"><a class="header-anchor" href="#评估方法"></a>评估方法</h2>
<p>我们可以通过实验测试来对学习器的泛化误差进行评估并进而做出选择。 为此要选出测试集，然后以测试集上的“测试误差”来作为泛化误差的近似。 测试集要尽可能与训练集互斥</p>
<p>数据集规模有限，要分为训练集和测试集，有如下划分方法：</p>
<ul>
<li>
<p>留出法： 直接将数据集划分为两个互斥集合</p>
<ul>
<li>测试/训练集要尽可能保持数据分布的一致性</li>
</ul>
</li>
<li>
<p>交叉验证法</p>
</li>
<li>
<p>自助法</p>
</li>
</ul>
<h2 id="性能度量"><a class="header-anchor" href="#性能度量"></a>性能度量</h2>
<p>性能度量是衡量模型泛化能力的评价标准，反映了任务需求</p>
<p>回归任务：</p>
<ul>
<li>均方误差</li>
</ul>
<p>分类任务：</p>
<ul>
<li>错误率，精度</li>
<li>查准率，查全率</li>
</ul>
<p>下面主要介绍回归任务的性能度量</p>
<h3 id="错误率和精度"><a class="header-anchor" href="#错误率和精度"></a>错误率和精度</h3>
<ul>
<li>错误率是分类错误的样本数占样本总数的比例， 精度相反</li>
</ul>
<h3 id="查准率，查全率和F1"><a class="header-anchor" href="#查准率，查全率和F1"></a>查准率，查全率和F1</h3>
<p>查准率：预测出来的正例中正确的比率（分母是被认为为真的样例数）</p>
<p>查全率：正例被预测出来的比率（ 分母是确实为真的样例数 ）</p>
<p>混淆矩阵：真实标记和预测结果的组合：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Artificial%20Intelligence/confusion%20matrix.png" alt="confusion matrix"></p>
<p>注意FP被认为是正例，实际是反例</p>
<p>可以根据学习器的预测结果对样例进行排序，并逐个把样本作为正例进行预测，则可以得到查准率-查全率曲线，简称“P-R”曲线</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Artificial%20Intelligence/P-R%20curve.png" alt="P-R curve"></p>
<p>如果一个学习器的P-R曲线被另一个的完全包住，我们可以认为前者的性能小于后者，但有时会发生曲线交叉的情况，此时需要设计综合考虑P,R的度量，比如“平衡点”</p>
<p>平衡点（Break-Even Point）是曲线上“查准率=查全率”时的取值，可用于度量P-R曲线有交叉的分类器性能高低</p>
<p>BEP太简单，更常用的是F1度量：</p>
<p>$$<br>
F1 = \frac{2 \times P \times R}{P + R}<br>
$$</p>
<p>比F1更一般形式的 $F_{\beta}$:<br>
$$<br>
F_{\beta} = \frac{ 1 + \beta^2 \times P \times R}{ ( \beta^2 \times P ) + R }<br>
$$<br>
$\beta$是启发值，可以表示模型对查准/查全率的偏好</p>
<ul>
<li>$\beta = 1$: 标准 F1</li>
<li>$\beta &gt; 1$:偏重查全率</li>
<li>$\beta 《 1$: 偏重查准率</li>
</ul>
<h3 id="ROC"><a class="header-anchor" href="#ROC"></a>ROC</h3>
<p>ROC曲线纵轴是“真正例率”，横轴是“假正例率”<br>
$$<br>
TPR = \frac{ TP }{TP + FN} \<br>
FPR = \frac{FP}{TN + FP}<br>
$$</p>
<p>如果一个学习器的ROC曲线被另一个的完全包住，我们可以认为前者的性能小于后者，但有时会发生曲线交叉的情况，此时可以根据曲线下的面积大小进行比较，也就是<strong>AUC</strong>( Area Under Curve )</p>
<h3 id="AUC"><a class="header-anchor" href="#AUC"></a>AUC</h3>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Artificial%20Intelligence/AUC%20curve.png" alt="AUC curve"></p>
<p>假设AUC曲线由${(x_1,y_1), (x_2,y_2), \dots, (x_m,y_m) }$   的点按序连接而形成，则AUC可估算为：<br>
$$<br>
\mathrm{AUC} = \frac{1}{2} \sum\limits_{i=1}^{m-1}(x_{i+1} - x_i)(y_i + y_{i+1})<br>
$$<br>
AUC 衡量了样本预测的排序质量<br>
$$<br>
\mathrm{AUC} = 1 - l_{rank}<br>
$$</p>
<h3 id="代价错误敏感率"><a class="header-anchor" href="#代价错误敏感率"></a>代价错误敏感率</h3>
<p>为了权衡不同类型错误所造成的不同损失，为错误赋予“非均等代价”（unequal cost）：</p>
<p>以二分类为例：可设定一个代价矩阵（cost matrix）</p>
<table>
<thead>
<tr>
<th>真实类别</th>
<th>预测 第0类</th>
<th>结果 第1类</th>
</tr>
</thead>
<tbody>
<tr>
<td>第0类</td>
<td>0</td>
<td>$cost_{01}$</td>
</tr>
<tr>
<td>第1类</td>
<td>$cost_{10}$</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>其中用$cost_{ij}$表示将第$i$类预测为第$j$类的代价</p>
<p>在非均等代价下，我们所希望的不再是简单地最小化错误的次数，而是希望最小化<strong>总体代价</strong>（total cost）</p>
<p>（以上面二分类为例0为正例，1为负例）<strong>代价敏感率</strong>（cost-sensitive）错误率为：</p>
<p>$$<br>
E(f ; D ; \cos t)=\frac{1}{m}\left{\sum_{x_{i} \in D^{+}}\left|\left(f\left(x_{i}\right) !=y_{i}\right)^{*} \cos t_{01}+\sum_{x_{i} \in D^{-}}\right|\left(f\left(x_{i}\right)==y_{i}\right) * \cos t_{10}\right}<br>
$$<br>
$D$:数据集      $D^+$ ：正样本数据集    $D^-$:负样本数据集</p>
<p>若令$cost_{ij}$的取值不限于0,1,则可以定义出多任务分类的代价敏感性能度量</p>
<h3 id="代价曲线"><a class="header-anchor" href="#代价曲线"></a>代价曲线</h3>
<p>在非均等代价下，ROC曲线不能直接反映出学习器的期望总体代价，可以用“<strong>代价曲线</strong>”</p>
<p>代价曲线图的横轴是取值为[0, 1]的正例概率代价,<br>
$$<br>
P(+) \cos t=\frac{p^{<em>} \cos t_{01}}{p^{</em>} \cos t_{01}+(1-p) \cos t_{10}}<br>
$$<br>
$p$：样例为正例的概率</p>
<p>纵轴为取值[0, 1]的归一化代价:<br>
$$<br>
\operatorname{cost}<em>{n o r m}=\frac{F N R * P * \cos t</em>{01}+F P R <em>(1-P) * \cos t_{10}}{p^{</em>} \cos t_{01}+(1-p) * \cos t_{10}}<br>
$$</p>
<h2 id="比较检验"><a class="header-anchor" href="#比较检验"></a>比较检验</h2>
<h3 id="二项检验"><a class="header-anchor" href="#二项检验"></a>二项检验</h3>
<h3 id="T检验"><a class="header-anchor" href="#T检验"></a>T检验</h3>
<h3 id="交叉验证-T-检验"><a class="header-anchor" href="#交叉验证-T-检验"></a>交叉验证 T-检验</h3>
<h3 id="偏差与方差"><a class="header-anchor" href="#偏差与方差"></a>偏差与方差</h3>
<p>对测试样本x,令$y_D$为$x$在数据集中的标记，$y$为$x$的真实标记, $f(x;D)$为训练集 $D$上学得模型$$在$x$上的预测输出。 以回归任务为例，学习期望为：<br>
$$<br>
\bar f(x) = E_D [ f(x;D) ] \<br>
$$<br>
使用样本数目相同的不同训练集产生的方差为：<br>
$$<br>
var(x) = E_D [ ( f(x;D) - \bar f(x) )^2]<br>
$$<br>
噪声为：<br>
$$<br>
\epsilon^2 = E_D [ (y_D - y)^2 ]<br>
$$<br>
偏差定义为期望输出与真实标记的差别： $bias^2 = ( \bar f(x) - y )^2$, 为方便讨论，我们假设噪声的期望为0 ， 即$E_D [ (y_D - y)^2 ] = 0$. 对泛化误差分解：<br>
$$<br>
\begin{aligned}<br>
E(f ; D)=&amp; \mathbb{E}<em>{D}\left[\left(f(\boldsymbol{x} ; D)-y</em>{D}\right)^{2}\right] \<br>
=&amp; \mathbb{E}<em>{D}\left[\left(f(\boldsymbol{x} ; D)-\bar{f}(\boldsymbol{x})+\bar{f}(\boldsymbol{x})-y</em>{D}\right)^{2}\right] \<br>
=&amp; \mathbb{E}<em>{D}\left[(f(\boldsymbol{x} ; D)-\bar{f}(\boldsymbol{x}))^{2}\right]+\mathbb{E}</em>{D}\left[\left(\bar{f}(\boldsymbol{x})-y_{D}\right)^{2}\right] \<br>
&amp;+\mathbb{E}<em>{D}\left[2(f(\boldsymbol{x} ; D)-\bar{f}(\boldsymbol{x}))\left(\bar{f}(\boldsymbol{x})-y</em>{D}\right)\right] \<br>
=&amp; \mathbb{E}<em>{D}\left[(f(\boldsymbol{x} ; D)-\bar{f}(\boldsymbol{x}))^{2}\right]+\mathbb{E}</em>{D}\left[\left(\bar{f}(\boldsymbol{x})-y_{D}\right)^{2}\right]<br>
\end{aligned}<br>
$$</p>
<p>我们看到，<strong>泛化误差 = 方差 + 偏差 + 噪声</strong></p>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>MYSQL Basic</title>
    <url>/2022/04/10/MYSQL-Basic/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>CS Archetecture</li>
<li>Apps</li>
<li>Config</li>
<li>Concurrency Control
<ul>
<li>Lock</li>
<li>Transaction</li>
<li>MVCC</li>
</ul>
</li>
<li>Sotrage Engine</li>
</ul>
<p>ref: <em>Mysql是怎样运行的</em>, <em>高性能Mysql</em></p>
<span id="more"></span>
<h1 id="CS-Archetecture"><a class="header-anchor" href="#CS-Archetecture"></a>CS Archetecture</h1>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Database/Mysql%20Basic/CS%20Arch.png" alt="CS Arch"></p>
<ul>
<li>
<p>Mysql采用CS模式，CS之间通过TCP通信，Server默认监听3306端口，也可以手动指定</p>
<ul>
<li>如果CS都运行在同一台机器上，则默认使用Unix Socket通信， Server默认监听的Socket为<code>/var/run/mysqld/mysqld.sock</code>，也可以手动指定</li>
</ul>
</li>
<li>
<p>和Servlet一样，每当一个Client连接到Server， 后者都会创建一个线程与该Client交互，当Client退出后，该线程会被缓存起来，并被之后的Client复用</p>
</li>
<li>
<p>Server拥有一个存储引擎API，来屏蔽底层存储引擎的差异。 Server通过API和存储引擎通信</p>
</li>
</ul>
<h2 id="连接管理"><a class="header-anchor" href="#连接管理"></a>连接管理</h2>
<p>连接建立后，Mysql Server会接收到Client的请求，请求（即查询语句）是文本格式</p>
<h2 id="解析与优化"><a class="header-anchor" href="#解析与优化"></a>解析与优化</h2>
<h3 id="查询缓存"><a class="header-anchor" href="#查询缓存"></a>查询缓存</h3>
<p>由于维护缓存需要性能开销，Mysql 8.0开始已经没有查询缓存了</p>
<p>查询缓存就是对查询语句的结果做缓存，由于查询语句是文本格式，所以任何字符上的不同都会导致cache miss. 任何更新表的操作都会刷新缓存</p>
<h3 id="语法解析"><a class="header-anchor" href="#语法解析"></a>语法解析</h3>
<p>相当于编译过程</p>
<h3 id="查询优化"><a class="header-anchor" href="#查询优化"></a>查询优化</h3>
<p>优化结构生成执行计划</p>
<p>优化器不关心表的存储引擎，但后者又对查询有影响，因此优化器会请求存储引擎来提供信息</p>
<h2 id="存储引擎"><a class="header-anchor" href="#存储引擎"></a>存储引擎</h2>
<p>查看Server支持的存储引擎:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show engines</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Transactions</code>列表示是否支持事务处理</li>
<li><code>Savepoints</code>列表示是否支持事务的部分回滚</li>
</ul>
<p>指定存储引擎（默认是Innodb）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE [table_name](</span><br><span class="line">...</span><br><span class="line">)ENGINE = [engine_name]</span><br></pre></td></tr></table></figure>
<p>修改表的存储引擎：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE [table_name] ENGINE = Innodb</span><br></pre></td></tr></table></figure>
<p>查看表的存储结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW CREATE TABLE [table_name]]\G</span><br></pre></td></tr></table></figure>
<h1 id="Apps"><a class="header-anchor" href="#Apps"></a>Apps</h1>
<p>Mysql是一组程序，包括了可执行文件，shell脚本等</p>
<p>Linux下，Mysql安装目录：<code>/usr/bin</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ ls /usr/bin | grep mysql</span><br><span class="line">mysql</span><br><span class="line">mysql_config_editor</span><br><span class="line">mysql_migrate_keyring</span><br><span class="line">mysql_secure_installation</span><br><span class="line">mysql_ssl_rsa_setup</span><br><span class="line">mysql_tzinfo_to_sql</span><br><span class="line">mysql_upgrade</span><br><span class="line">mysqladmin</span><br><span class="line">mysqlanalyze</span><br><span class="line">mysqlbinlog</span><br><span class="line">mysqlcheck</span><br><span class="line">mysqld_multi</span><br><span class="line">mysqld_safe</span><br><span class="line">mysqldump</span><br><span class="line">mysqldumpslow</span><br><span class="line">mysqlimport</span><br><span class="line">mysqloptimize</span><br><span class="line">mysqlpump</span><br><span class="line">mysqlrepair</span><br><span class="line">mysqlreport</span><br><span class="line">mysqlshow</span><br><span class="line">mysqlslap</span><br></pre></td></tr></table></figure>
<ul>
<li>一般安装时会自动将这些可执行文件添加到环境变量<code>PATH</code></li>
</ul>
<h2 id="Mysql-Server"><a class="header-anchor" href="#Mysql-Server"></a>Mysql Server</h2>
<ul>
<li><code>mysqld</code>: Mysql Server程序, 运行该程序就启动了一个Mysql Server进程，但该文件一般不常用，我们一般用脚本启动
<ul>
<li><code>-P</code>: 指定Server监听的端口，默认是3306</li>
<li><code>--default-storage-engine=[engine_name]</code>: 指定默认存储引擎</li>
<li><code>--skip_networking</code>:禁止使用TCP通信，即Client无法用ip来与Server通信</li>
</ul>
</li>
<li><code>mysqld_safe</code>: 是一个Shell脚本，间接调用<code>mysqld</code>并持续监控Server的运行状态，并将Server的出错信息输出到错误日志
<ul>
<li>对于传递给<code>mysqld_safe</code>的启动选项，如果它处理不了，会被转发到<code>mysqld</code></li>
</ul>
</li>
<li><code>mysqld_nulti</code>: Shell脚本，用于启动或停止多个Server实例</li>
</ul>
<h2 id="Mysql-Client"><a class="header-anchor" href="#Mysql-Client"></a>Mysql Client</h2>
<ul>
<li>
<p><code>mysql</code>: Mysql Client程序，用法为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -h [hostname] -u [username] -p [password]</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-h</code>: Server进程所在的主机的域名or IP地址，如果Server就运行在本机，可以省略这个参数, 长参数形式为：<code>--host=[hostname]</code></li>
<li><code>-u</code>: 用户名, 长参数形式为：<code>--user=[username]</code>, 缺省则为当前Linux登陆用户</li>
<li><code>-p</code>:	密码, 长参数形式为：<code>--password=[password]</code></li>
<li><code>-P</code>: 指定需要连接的Server的端口，默认是3306</li>
</ul>
</li>
<li>
<p>退出mysql：<code>exit</code>, <code>quit</code></p>
</li>
</ul>
<h1 id="Config"><a class="header-anchor" href="#Config"></a>Config</h1>
<p>命令行指定的配置只对当次启动生效，可以在mysql配置文件里指定配置</p>
<ul>
<li>命令行的配置会覆盖配置文件的配置</li>
<li>配置文件中，个人的配置会覆盖全局的配置</li>
</ul>
<h2 id=""><a class="header-anchor" href="#"></a></h2>
<h2 id="配置文件"><a class="header-anchor" href="#配置文件"></a>配置文件</h2>
<p>Mysql配置文件位置：</p>
<ul>
<li>
<p>Global: <code>/etc/mysql/my.cnf</code></p>
</li>
<li>
<p>Personal: <code>~/.my.cnf</code></p>
</li>
</ul>
<p>配置文件分多个组， <code>[server]</code>, <code>[client]</code>, <code>[mysqld]</code>这些， 对应名字的程序/脚本启动时会读取对应组的部分， 比如<code>mysqld</code>会读取<code>[mysqld]</code>的配置， <code>mysqld_safe</code>会读取<code>[mysqld_safe]</code>，当然，<code>mysqld_safe</code>会调用<code>mysqld</code>, 因此也会间接读取<code>[mysqld]</code></p>
<ul>
<li>所有Server程序都会读取<code>[server]</code></li>
<li>所有Client程序都会读取<code>[client]</code></li>
<li>如果一个程序间接调用了另一个程序，则后者的配置也会被读取， 如 <code>mysqld_safe</code>会读取<code>[mysqld_safe]</code>，由于<code>mysqld_safe</code>会调用<code>mysqld</code>, 因此也会间接读取<code>[mysqld]</code></li>
</ul>
<h3 id="系统变量"><a class="header-anchor" href="#系统变量"></a>系统变量</h3>
<p>通过命令行和配置文件进行的配置，会被读取为系统变量，系统变量的作用域分为GLOBAL和SESSION</p>
<ul>
<li>GLOBAL：对Server有效， 每次Server启动时，根据配置来初始化GLOBAL变量</li>
<li>SESSION：对当次会话有效，即只对某个Client的连接有效。 SESSION变量在连接时根据相应GLOBAL变量的值来初始化
<ul>
<li>更改GLOBAL变量的值只会影响到之后接入的SESSION， 之前的SESSION变量不会被改变</li>
</ul>
</li>
</ul>
<p>不是所有的系统变量都具有这两种作用范围，有些只具有GLOBAL范围，如<code>max_connections</code>;有些只具有SESSION范围，<code>insert_id</code></p>
<p>有些系统变量是只读的，如<code>version</code></p>
<p>查看系统变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW [scope] VARIABLES [LIKE [pattern]]</span><br></pre></td></tr></table></figure>
<ul>
<li><code>[scope]</code>: 取值为<code>GLOBAL</code>, <code>SESSION</code>， 即查看指定作用域的变量</li>
</ul>
<h1 id="并发控制"><a class="header-anchor" href="#并发控制"></a>并发控制</h1>
<ul>
<li>
<p>每种存储引擎都可以实现自己的锁策略和锁粒度</p>
</li>
<li>
<p>Mysql Server不管理事务，事务由下层的存储引擎实现（当然这只是理论上，事实上server层可能会加table lock）</p>
</li>
<li>
<p><strong>不要使用多个存储引擎</strong>， 否则在一个事务中混合了采用多个存储引擎的表，有的支持事务，有的不支持，就会出现各种问题</p>
</li>
<li>
<p>Innodb采用两阶段锁定协议，在事务执行时随时都可以锁定，锁只有在执行<code>COMMIT</code>或<code>ROLLBACK</code>后才会释放，且所有锁都在同一时刻释放</p>
</li>
<li>
<p>InnoDB使用锁机制和MVCC进行并发控制, 并通过next-key locking防止幻读</p>
</li>
</ul>
<h2 id="Lock"><a class="header-anchor" href="#Lock"></a>Lock</h2>
<p>Innodb处理死锁的方案：将持有最少行级排他锁的事务进行回滚</p>
<p>下面介绍一些基本的锁策略:</p>
<h3 id="table-lock"><a class="header-anchor" href="#table-lock"></a>table lock</h3>
<p>Myisam使用表锁</p>
<p>存储引擎管理自己的锁，但server也可能会主动加table lock</p>
<ul>
<li>Server会对<code>ALTER TABLE</code>之类的语句使用table lock，而忽略存储引擎的锁机制</li>
</ul>
<h3 id="row-lock"><a class="header-anchor" href="#row-lock"></a>row lock</h3>
<p>Innodb使用行级锁</p>
<p>行级锁的粒度更细，对并发的支持更好，开销也更大， row lock只在存储引擎中实现，<u>与Server无关</u></p>
<h2 id="Transaction"><a class="header-anchor" href="#Transaction"></a>Transaction</h2>
<h3 id="ACID"><a class="header-anchor" href="#ACID"></a>ACID</h3>
<ul>
<li>atomicity</li>
<li>consistency: 数据库总是从一个一致性的状态转换到另一个一致性的状态</li>
<li>isolation: 一个事务在提交之前，对其他事务不可见</li>
<li>duality: 事务提交后必须被持久化（持久性也分不同的级别，没有策略能保证100%对持久性）</li>
</ul>
<h3 id="隔离级别"><a class="header-anchor" href="#隔离级别"></a>隔离级别</h3>
<ul>
<li>
<p>READ UNCOMMITTED: 事务中的修改，即使未提交， 对其他事物也是可见的。 事务可以读取未提交的数据，也称为脏读</p>
</li>
<li>
<p>READ COMMITTED: 满足了隔离性（一个事务从开始直到提交之前，所做的任何修改对其他事务不可见）， 避免了脏读，存<strong>在不可重复读、幻读问题</strong></p>
<ul>
<li>可重复读：在同一个事务中多次读取同样的记录的结果是一致的</li>
<li>MVCC对该级别的实现就是每次进行普通的select查询，都会产生一个新的快照(不同时间，当前活跃的事务不同，行记录最近一次更新的事务ID也可能不同)。相当于二级锁协议，进行读操作需要加读锁，读完就释放锁</li>
</ul>
</li>
<li>
<p>REPEATABLE READ: Mysql默认级别。 避免了脏读和不可重复读，但存在幻读（ Phantom Read ）问题</p>
<ul>
<li>
<p>幻读：当某个事物读取某个范围内的记录时， 另一个事务又在该范围插入了新的纪录， 当之前的事务再次读取该范围的记录时，会产生幻行</p>
</li>
<li>
<p>Innodb和Xtradb通过Next-Key Locks算法的间隙锁和记录锁解决了幻读</p>
</li>
<li>
<p>MVCC对该级别的实现就是在当前事务中只有第一次进行普通的select查询，才会产生快照，此后这个事务一直使用这一个快照进行查询，相当于三级锁协议，进行读操作需要加读锁，事务结束才释放</p>
</li>
</ul>
</li>
<li>
<p>SERIALIZABLE: 强制事务串行执行</p>
</li>
</ul>
<p>Mysql能识别所有隔离级别，Innodb也支持所有隔离级别</p>
<p>设置当前会话隔离级别，在下一个事务开始时生效：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br></pre></td></tr></table></figure>
<ul>
<li>可以在配置文件中设置GLOBAL的隔离级别</li>
</ul>
<h3 id="Mysql的事务"><a class="header-anchor" href="#Mysql的事务"></a>Mysql的事务</h3>
<p>Mysql默认采用自动提交模式，每个查询都是一个事务， 可以修改<code>AUTOCOMMIT</code>变量来启用/禁用该模式</p>
<ul>
<li>禁用自动提交后， 所有查询都在一个事务中，直到显示地执行<code>COMMIT</code>提交或<code>ROLLBACK</code>回滚</li>
<li>该模式对不支持事务的表，如Myisam, Memory等， 没有影响</li>
</ul>
<p>某些命令在执行前会强制执行<code>COMMIT</code>提交当前的事务</p>
<ul>
<li><code>ALTER TABLE</code>, <code>LOCK TABLE</code></li>
</ul>
<h3 id="事务日志"><a class="header-anchor" href="#事务日志"></a>事务日志</h3>
<p>事务日志采用追加方式，这样日志就在磁盘中占用连续的区域，写日志非常快</p>
<p>预写式日志：先写入日志，再写入数据，两次写磁盘</p>
<h2 id="MVCC"><a class="header-anchor" href="#MVCC"></a>MVCC</h2>
<p>ref: <a href="https://blog.csdn.net/qq_41008202/article/details/105559613">MVCC</a></p>
<p>Multi Version Concurrency Control: 多版本并发控制，支持MVCC的数据库表中<strong>每一行数据都可能存在多个版本</strong>，对数据库的任何修改的提交都不会直接覆盖之前的数据，而是产生一个新的版本与老版本共存，通过读写数据时<strong>读不同的版本来避免加锁阻塞</strong>（写写还是要阻塞等待，因为事务对数据进行更新时会加上排他锁)，MVCC的具体实现依赖于存储引擎，这里只介绍Innodb的MVCC</p>
<ul>
<li>实现：在每个表中添加三个隐藏字段以及事务在查询时创建快照（read view），以及建立数据版本链(Undo log)</li>
<li>InnoDB支持多版本数据，<strong>在更新或者删除数据时，并不会立马删除原有行记录，而是将旧版本存入回滚段中的Undo log内，并通过回滚指针形成一个数据链，可以通过这个指针访问链上的历代数据版本</strong>，正是这种机制使得数据库数据产生了多个版本，为通过MVCC进行快照读提供了可能</li>
<li>并不是所有的查询都是进行快照读，使用普通的select 语句进行查询时会生成快照，进行快照读；使用select … lock in share mode，select … for update，insert，update，delete 语句等语句进行查询或者更新时还是会使用锁机制，进行锁阻塞。</li>
<li>使用MVCC的作用(意义)是非阻塞的解决了事务读写冲突，提高了并发性能</li>
<li>MVCC工作在READ COMMITED和REPEATABLE READ两种隔离级别下</li>
</ul>
<h3 id="三个隐藏字段"><a class="header-anchor" href="#三个隐藏字段"></a>三个隐藏字段</h3>
<p>InnoDB会为每个使用InnoDB存储引擎的表添加三个隐藏字段，用于实现数据多版本以及聚集索引：</p>
<ul>
<li>
<p>A 6-byte <code>DB_TRX_ID</code> field: 对该行的最后一次插入/更新的事务号， 删除也是一种更新，只是标记一下该行的deleted bit</p>
<ul>
<li>设置删除位并不会真的进行物理删除，当InnoDB丢弃为删除而编写的更新撤消日志记录时，它才会物理删除相应的行及其索引记录。此删除操作称为清除，速度非常快</li>
<li>这意味着<strong>每行都有一个事务号</strong></li>
</ul>
</li>
<li>
<p>A 7-byte <code>DB_ROLL_PTR</code> field:  called the roll pointer. The roll pointer <strong>points to an undo log record</strong> written to the rollback segment. If the row was updated, the undo log record contains the information necessary to rebuild the content of the row before it was updated.   回滚指针，指向当前记录行的undo log信息(存储该数据的前一个版本)</p>
</li>
<li>
<p>A 6-byte <code>DB_ROW_ID</code> field:  随着新行插入而单调递增的行ID。InnoDB使用聚簇索引，数据存储是以聚簇索引字段的大小顺序进行存储的，当表没有主键或唯一非空索引时，innodb就会使用这个行ID自动产生聚簇索引。如果表有主键或唯一非空索引，聚簇索引就不会包含这个行ID了。该字段跟MVCC关系不大</p>
</li>
</ul>
<h3 id="Read-View"><a class="header-anchor" href="#Read-View"></a>Read View</h3>
<p>read view是读视图，其实就是一种快照，里面记录了系统中当前活跃事务的ID以及相关信息，主要用途是用来做可见性判断，判断当前事务是否有资格访问该行数据(详情下解)。read view有多个变量，这里只介绍关键部分：</p>
<ul>
<li>
<p><code>trx_ids</code>: 活跃事务列表，也就是Read View开始创建时<strong>其他未提交的活跃事务的ID列表</strong>。例如事务A在创建read view(快照)时，数据库中事务B和事务C还没提交或者回滚结束事务，此时trx_ids就会将事务B和事务C的事务ID记录下来</p>
</li>
<li>
<p><code>low_limit_id</code>： 目前出现过的最大的事务ID+1，即下一个将被分配的事务ID</p>
</li>
<li>
<p><code>up_limit_id</code>： 活跃事务列表trx_ids中最小的事务ID，如果trx_ids为空，则up_limit_id 为 low_limit_id，虽然该字段名为up_limit,但在trx_ids中的活跃事务号是降序的，所以最后一个为最小活跃事务ID</p>
<ul>
<li>如果当前行的事务号小于<code>up_limit_id</code>, 则说明该行的最后一次更新在当前的Read View中最早的事务开始之前已经提交了</li>
</ul>
</li>
<li>
<p><code>creator_trx_id</code>： 当前创建read view的事务的ID</p>
</li>
</ul>
<h3 id="Undo-log"><a class="header-anchor" href="#Undo-log"></a>Undo log</h3>
<p>Undo log中存储老版本数据，当一个事务需要读取记录行时，如果当前记录行不可见，可以通过roll pointer顺着undo log链找到满足其可见性条件的记录行版本</p>
<p>在InnoDB里，undo log分为如下两类：</p>
<ol>
<li><code>insert undo log</code> : 事务对insert新记录时产生的undo log, 只在事务回滚时需要, 并且在事务提交后就可以立即丢弃。</li>
<li><code>update undo log</code> : 事务对记录进行delete和update操作时产生的undo log，不仅在事务回滚时需要，快照读也需要，只有当数据库所使用的快照中不涉及该日志记录，对应的回滚日志才会被purge线程删除</li>
</ol>
<p>Purge线程：上文提到了InnoDB删除一个行记录时，并不是立刻物理删除，而是将该行数据的DB_TRX_ID字段更新为做删除操作的事务ID，并将删除位deleted_bit设置为true(已删除)，将其放入update undo log中。为了节省磁盘空间，<u>InnoDB有专门的purge线程来清理deleted_bit为true的记录</u>。purge线程自己也维护了一个read view，如果某个记录的deleted_bit为true，并且DB_TRX_ID相对于purge线程的read view可见，那么这条记录一定是可以被安全清除的。</p>
<h3 id="MVCC更新行的原理"><a class="header-anchor" href="#MVCC更新行的原理"></a>MVCC更新行的原理</h3>
<p>MVCC机制下实现更新还是会用到排他锁，但由于我们读的时候可以通过快照读，读多个版本避免了使用共享锁，因此可以使得读事务不会因为写事务阻塞。MVCC的优越性在于事务需要读行记录的时候不会因为有事务在更新该行记录而阻塞,事务在写行记录时也不会因为有事务在读数据而阻塞。</p>
<p>更新原理: 假设我现在需要修改行记录A,他们的修改过程如下，</p>
<ol>
<li>MVCC更新行记录A时会先用排他锁锁住该行记录A；</li>
<li>然后将该行记录复制到update undo log中，生成旧版本行记录B；</li>
<li>使行记录A的回滚指针指向这条旧版本B，再在行记录A中修改用户需要修改的字段，并将DB_TRX_ID字段更新为更新这条记录的事务ID；</li>
<li>最后提交事务。(用户需要修改的字段指的是业务字段，比如我们要修改name等)</li>
</ol>
<p>通过回滚指针，形成了一条当前行记录指向历代旧版本行记录的链表，通过这条链表，我们就可以查询该行记录的多个旧版本:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Database/Mysql%20Basic/undo%20log.png" alt="undo log"></p>
<h3 id="MVCC查询行的原理"><a class="header-anchor" href="#MVCC查询行的原理"></a>MVCC查询行的原理</h3>
<p>InnoDB中，事务在第一次进行普通的select查询时，会创建一个read view(快照)，用于可见性判断，事务只能查询到行记录对于事务来说可见的数据版本。可见性判断是通过行记录的DB_TRX_ID(最近一次插入/更新/删除该行记录的事务ID)以及read view中的变量比较来判断。</p>
<p>查询过程如下:</p>
<ol>
<li>
<p>如果 $\mathrm{DB \underline{ } TRX \underline{ }ID} &lt; \mathrm{up\underline{ }limit \underline{ } id}$</p>
<p>表明这个行记录最近一次更新在当前事务创建快照之前就已经提交了，该记录行的值对当前事务是可见的，当前事务可以访问该行记录，跳到步骤(4)。</p>
</li>
<li>
<p>如果$\mathrm{DB \underline{ } TRX \underline{ }ID} \ge \mathrm{low \underline{ } limit \underline{ } id}$</p>
<p>表明这个行记录最近一次更新是快照创建之后才创建的事务完成的，该记录行的值对当前事务是不可见的，当前事务不可以访问该行记录。因此当前事务只能访问比该行记录更旧的数据版本。通过该记录行的 DB_ROLL_PTR 指针，找到更旧一版的行记录，取出更旧一版的行记录的事务号DB_TRX_ID，然后跳到步骤(1)重新判断当前事务是否有资格访问该行记录。</p>
</li>
<li>
<p>如果$\mathrm{up\underline{ }limit \underline{ } id} \le \mathrm{DB \underline{ } TRX \underline{ }ID} &lt; \mathrm{low \underline{ } limit \underline{ } id} $</p>
<p>则表明对这个行记录最近一次更新的事务可能是活跃列表中的事务也可能是已经成功提交的事务(事务ID号大的事务可能会比ID号小的事务先进行提交)，比如说初始时有5个事务在并发执行，事务ID分别是1001~1005，1004事务完成提交，1001事务进行普通select的时候创建的快照中活跃事务列表就是1002、1003、1005。因此up_limit_id就是1002， low_limit_id就是1006。对于这种情况，我们需要在活跃事务列表中进行遍历(因为活跃事务列表中的事务ID是有序的，因此用二分查找)，确定DB_TRX_ID是否在活跃事务列表中。</p>
<ol>
<li>若不在，说明对这个行记录最近一次更新的事务是在创建快照之前提交的事务，此行记录对当前事务是可见的，也就是说当前事务有资格访问此行记录，跳到步骤(4)。</li>
<li>若在，说明对这个行记录最近一次更新的事务是当前活跃事务，在快照创建过程中或者之后完成的数据更新，此行记录对当前事务是不可见的(若可见则会造成脏读、不可重复读等问题)。因此当前事务只能访问该行记录的更旧的版本数据。通过该记录行的 <code>DB_ROLL_PTR</code> 指针，找到更旧一版的行记录，取出更旧一版的行记录的事务号<code>DB_TRX_ID</code>，然后跳到步骤(1)重新判断当前事务是否有资格访问该行记录。</li>
</ol>
</li>
<li>
<p>可以访问，将该行记录的值返回</p>
</li>
</ol>
<h3 id="当前读和快照读"><a class="header-anchor" href="#当前读和快照读"></a>当前读和快照读</h3>
<p>快照读:使用普通的select 语句进行查询时会生成快照，进行快照读，快照读不会上锁，根据可见性判断，来决定是读取该行记录的最新版本还是旧版本。(只有使用普通的select语句进行查询才会用到快照读，才享受到了MVCC机制的读写非阻塞的优越性)</p>
<p>当前读:使用select … lock in share mode，select … for update，insert，update，delete 语句等语句进行查询或者更新时，会使用相应的锁进行锁定，查询到的肯定数据库中该行记录的最新版本。</p>
<h3 id="示例"><a class="header-anchor" href="#示例"></a>示例</h3>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Database/Mysql%20Basic/MVCC%20example.png" alt="MVCC example"></p>
<h1 id="存储引擎-2"><a class="header-anchor" href="#存储引擎-2"></a>存储引擎</h1>
<p>Mysql将每个数据库（即schema）保存为数据目录下的一个字目录，创建表时，会在数据库字目录下创建一个和表同名的<code>.frm</code>文件保存表的定义</p>
<p>查看表的相关信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show table status like &#x27;[pattern]&#x27;\G;</span><br></pre></td></tr></table></figure>
<p>或者查看<code>INFORMATION_SCHEMA</code></p>
<table>
<thead>
<tr>
<th>功能</th>
<th>MylSAM</th>
<th>MEMORY</th>
<th>InnoDB</th>
<th>Archive</th>
</tr>
</thead>
<tbody>
<tr>
<td>存储限制</td>
<td>256TB</td>
<td>RAM</td>
<td>64TB</td>
<td>None</td>
</tr>
<tr>
<td>支持事务</td>
<td>No</td>
<td>No</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>支持全文索引</td>
<td>Yes</td>
<td>No</td>
<td>No</td>
<td>No</td>
</tr>
<tr>
<td>支持树索引</td>
<td>Yes</td>
<td>Yes</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>支持哈希索引</td>
<td>No</td>
<td>Yes</td>
<td>No</td>
<td>No</td>
</tr>
<tr>
<td>支持数据缓存</td>
<td>No</td>
<td>N/A</td>
<td>Yes</td>
<td>No</td>
</tr>
<tr>
<td>支持外键</td>
<td>No</td>
<td>No</td>
<td>Yes</td>
<td>No</td>
</tr>
</tbody>
</table>
<h2 id="Innodb"><a class="header-anchor" href="#Innodb"></a>Innodb</h2>
<p>Mysql默认的存储引擎</p>
<p>Innodb的数据存储在tablespace中，tablespace是由Innodb管理的黑盒</p>
<h2 id="Myisam"><a class="header-anchor" href="#Myisam"></a>Myisam</h2>
<p>不支持事务和行级锁，只使用表锁</p>
<p>Myisam将表分别存储为数据文件(<code>.myd</code>)和索引文件(<code>.myi</code>)</p>
<p>Myisam可以创建压缩表，如果对表不再进行修改操作，那么可以讲该表压缩.这可以极大地减少空间占用</p>
<ul>
<li>工具：<code>myisampack</code></li>
<li>压缩表也支持索引，但索引是只读的</li>
<li>压缩表是按行压缩的，不是整表压缩。因此解压也只需要解压某些行</li>
</ul>
<h2 id="CSV"><a class="header-anchor" href="#CSV"></a>CSV</h2>
<p>可以将CSV文件和Mysql的表做转换</p>
<h2 id="Memory"><a class="header-anchor" href="#Memory"></a>Memory</h2>
<p>所有数据都在内存，没有磁盘IO</p>
<ul>
<li>即重启后数据会丢失，但表结构会保留</li>
</ul>
<p>支持Hash索引</p>
<p>使用table lock，并发程度低</p>
<p>Mysql的临时表一般是Memoey表</p>
<ul>
<li>临时表是使用<code>CREATE TEMPORARY TABLE</code>创建的表，可以采用任何存储引擎，Memory只是默认采用的存储引擎</li>
</ul>
<h2 id="转换表的引擎"><a class="header-anchor" href="#转换表的引擎"></a>转换表的引擎</h2>
<ol>
<li>
<p>ALTER TABLE</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE [table-name] ENGINE=[engine-name]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>先将表导出（<code>mysqldump</code>），然后修改sql文件的CREATE TABLE语句的存储引擎选项，还要修改表名（因为同一个数据库不允许重名的表）</p>
</li>
<li>
<p>创建一个新的存储引擎的表，然后用INSERT...SELECT来导入数据</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>My Programming Principles</title>
    <url>/2022/08/14/My-Programming-Principles/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>一些吐槽</li>
<li>Programming Language</li>
<li>Testing</li>
<li>Infrasturcture</li>
<li>Open Source Dev</li>
</ul>
<span id="more"></span>
<h1 id="一些吐槽"><a class="header-anchor" href="#一些吐槽"></a>一些吐槽</h1>
<h2 id="硬件"><a class="header-anchor" href="#硬件"></a>硬件</h2>
<ul>
<li>我讨厌面向机器编程</li>
<li>在上世纪90年代, 1G RAM要1w多美金, 前人为了省钱而使用各种奇技淫巧情有可原. 问题在于这些“奇技淫巧”传承下来形成了一个庞大的代码库, 甚至被纳入了C/CPP开发的最佳实践. 现代硬件已经十分发达了. 再去搞这些东西不是搞笑么. 不过只要从事该领域总会遇到这些东西, 惹不起我还躲不起么. 所以我死也不干硬件/OS/高性能领域. 也不会在这方面写任何项目</li>
</ul>
<h2 id="语言"><a class="header-anchor" href="#语言"></a>语言</h2>
<h3 id="C-CPP"><a class="header-anchor" href="#C-CPP"></a>C/CPP</h3>
<p>C/CPP代码是我见过的最丑陋最离谱的代码:</p>
<ul>
<li>Macro编程: Macro编程在我看来根本不能算编程, Macro编程就是一坨大便.</li>
<li>结构体操作( in C): C的结构体可以有很多离奇的内存操作. 我指的不是内存对奇, 而是大量的指针运算, 这玩意儿结合Macro之后, 在语法上就是乱七八糟的一堆. 有些人觉得很秀, 我只觉得不安全而且恶心</li>
<li>元编程: 模板根本不能调试, 而且我也不知道元编程有什么用.</li>
<li>诡异的语法: C/CPP的Technical Debt大到难以想象. 许多上古代码库都在语法边缘疯狂试探,  鬼知道后代编译器能不能兼容.  Linux内核代码至今无法用clang编译, 就是因为里面有很离谱的语法. 当然gcc和linux有着阴险的交易, 居然兼容了这种语法, 这更让我恶心了</li>
</ul>
<p>上述问题在几乎所有大型C/CPP库都普遍存在, 让我十分厌恶.</p>
<p>当然C/CPP本身还有很多丑陋之处:</p>
<ul>
<li>C/CPP生态惨不忍睹,连个<strong>包管理工具都没有</strong>,开发体验很迷.</li>
<li>一大堆Technical Debt; CPP backward compatibility又保留了大量上古语法, 而且越积越多. 这些技术债和上古语法混杂在一起, 让人在开发时没有<strong>最佳实践</strong>. 不知道用哪些库, 也不知道用哪些特性, 甚至异常都不知道该不该用
<ul>
<li>其实我很好奇CPP真的能向后兼容C么, 据我所知G++对于C的语法比GCC要严格, 某些GCC能过的C代码, G++根本编译不过. 那我用G++编译一个C++混着上述“G++编译不过的C代码”的文件, 应该也不能成功啊</li>
</ul>
</li>
<li>CPP发展很慢,委员会操作成谜. <a href="https://thenewstack.io/google-launches-carbon-an-experimental-replacement-for-c/">Google锐评</a>为&quot;The language’s evolution is also stymied by a <strong>bureaucratic committee process</strong>&quot;</li>
<li>memory safety: 其实我不反感CPP的指针操作, 相反我很喜欢它, 因为十分符合直觉. 指针只是一种机制, 用不用得好取决于个人. 在我看来,只要编程有最佳实践, 照着实践原则来, 就不会发生这种问题. 然而CPP刚好又没有最佳实践, 大家想怎么写怎么写, 水平参差不齐. 这才是memory safety problem的根源</li>
</ul>
<h3 id="JVM语言"><a class="header-anchor" href="#JVM语言"></a>JVM语言</h3>
<ul>
<li>JAVA: 其实我觉得JAVA很简洁. 因为语法很简单. 当然它肯定不够现代, 不过对我来讲, JAVA == SpringBoot == CURD, 就是一个干活的工具罢了. 能用并且可靠就行</li>
<li>Scala: 用过, 感觉很厉害, 但是又感觉没啥用. 语法新一点又不能当饭吃. 毕竟它的对手是语法上没有什么大问题的JAVA, Scala的新语法不是什么杀手级的特性</li>
<li>Kotlin: 我的评价是呵呵. Kotlin这辈子也就这样了. 不过哪天Pivoto大发善心把SpringBoot移植到Kotlin,我还是很愿意试一下的</li>
</ul>
<h3 id="Go-Carbon-Rust"><a class="header-anchor" href="#Go-Carbon-Rust"></a>Go/Carbon/Rust</h3>
<ul>
<li>Go: 语法让人感觉很丑. 这可能是我们看C like的代码太多, 养成了习惯的缘故. 此外Go倒是没什么缺点. Go最大的优势是许多云原生基础设施都是Go写的, 这刚好是我感兴趣的领域之一</li>
<li>Carbon: 没发布,但我希望能做好</li>
<li>Rust: 这个东西.... 就我个人来说, 我希望它被Carbon取代. Rust很伟大, 很新. 但我认为它和Carbon只能活一个. 毕竟二者定位差的不是很多.</li>
</ul>
<h3 id="脚本语言"><a class="header-anchor" href="#脚本语言"></a>脚本语言</h3>
<ul>
<li>Python: 写脚本没有缺点. 当然一些涉及底层的脚本还得用Go写. Python最大的问题是开发者, 许多论文的代码都没有把依赖写清楚.  Python进行重量级开发表现惨不忍睹, 但由于没人用Python进行重量级开发, 所以这个问题不存在.</li>
<li>Bash: 垃圾. 连 <code>[[]]</code>和<code>[[[]]]</code>都有区别</li>
<li>Ts/JS: 我会在后文详细吐槽这二者. 有人说Ts/Js不只是脚本语言,而是个前后端通用语言. 我觉得和笑话没什么分别</li>
</ul>
<h2 id="OS"><a class="header-anchor" href="#OS"></a>OS</h2>
<p>我讨厌OS开发,原因有:</p>
<ul>
<li>如前所述, OS和硬件关系很密切, 而且C/CPP的丑陋代码在Linux中广泛存在. 我忍受不了这样的开发</li>
<li>Linux已经是上世纪的古董了. 本质上我们还处于计算机科学的石器时代, 我们使用的是古老的Linux, 命令行工具使用的是古老的Unix CommandLine, shell是目前看来特别垃圾的bash, bash script的语法现在看来简直是惨不忍睹, 基础设施的编程语言是古老且臃肿且丑陋且缺乏统一的现代设计的C/CPP. 总而言之, 现代CS的大部分问题都不是人的问题, 是CS世界发展缓慢的问题. 写Shell很痛苦, 不是因为程序员不行, 是Shell本身就是个该被淘汰的垃圾语言. C/CPP, OS 等等同理. 是世界的原始, 造成了人的痛苦. 对此我的对策是慢慢等. 等新的编程语言接替C/CPP, 等到有人用新的编程语言来开发包括OS在内的一切基础设施, 让基础设施开发变得体验更好. 在这个美好的未来来临之前, 我不想参与任何的硬件和OS开发</li>
</ul>
<h2 id="测试"><a class="header-anchor" href="#测试"></a>测试</h2>
<ol>
<li>提高代码质量唯一可行的手段不是写测试，而是反复的提炼自己的思维，写简单清晰的代码</li>
<li>“测试能帮助后来人”的误区, 测试对于后来人的作用，并不是你有些人想象的那么大。创造清晰的代码才是解决这个问题的关键。</li>
<li>最优雅的程序往往也是最高效的</li>
</ol>
<h1 id="Programming-Language"><a class="header-anchor" href="#Programming-Language"></a>Programming Language</h1>
<p>综上所述, 我自己的项目开发都需要选择新的语言,保证代码的简洁优雅和现代.</p>
<ul>
<li>
<p>基础设施: Go. 首先,我不干硬件和OS开发, 但有可能做一些基础设施(编译器, 服务器, JVM, Docker, 网络协议)的开发, 不可避免地会接触一点底层和Linux. 因此我需要的是一个和<strong>硬件没有关系的,又有一定底层能力的, 语法和工具链足够现代</strong>的语言, 我选择Go.</p>
</li>
<li>
<p>OS/硬件: Carbon. 虽然嘴上说不干, 但困难并不会随着我的逃避而消失. 首先C是不可能的, 我需要的是一个在<strong>功能上完美替代CPP的现代语言</strong>. 我选择Carbon. 当然Carbon目前还没发布, 但我目前也没干OS/硬件, 等我干这个领域的时候, 希望Carbon能成长起来吧(有人说Carbon最终只会是另一个Kotlin, 但我巴不得Carbon能彻底取代CPP)</p>
</li>
<li>
<p>算法: CPP. 算法不需要复杂的语法特性, 有指针和容器库就够了. 虽然CPP很垃圾,但那是建立在庞大混乱的生态和稀奇古怪的语法上. 自己写算法不需要面对这些问题. 就把CPP当作C + OOP + STL就够了</p>
</li>
<li>
<p>小脚本: Python. 随时随地写点小脚本. 自己写脚本没有性能和平台要求, 一切以简介优雅为主. 没事儿干谁会写Shell</p>
</li>
<li>
<p>AI算法: Python</p>
</li>
<li>
<p>区块链: 这个都用DSL的, solidity之类的. 目前我没啥时间做区块链,先搁置吧</p>
</li>
<li>
<p>APP:</p>
<ul>
<li>
<p>后端Java: 自己做APP,核心关注点肯定是功能, 其次就是前端. 其余部分(尤其是后端)怎么简单怎么来就好, 反正全是CURD, 也学不到东西. SpringBoot方便省事, 甚至有低代码工具可以让我不写后端的话我也会欣然接受.</p>
<ul>
<li>我也对Ruby做过调研,据说这玩意儿又老又笨重, 所以不考虑了.</li>
<li>Python Flask和FastAPI个人体验就是个笑话. Python根本没法写业务代码. 动态弱类型的代码安全性惨不忍睹. 写来写去最后Python后端还是写成了Java的样子</li>
</ul>
</li>
<li>
<p>前端: 最好的用户体验需要Hybrid开发, 即安卓原生 + 框架了. 我没有iOS设备, 所以暂时不考虑iOS原生</p>
<ul>
<li>
<p>框架React/React Native: 我又不是职业前端,我不想在前端浩如烟海的生态中浪费时间, 选择够自己用的工具集就行了.  对于魔术代码, 只有我理解了其底层实现我才用得放心, 但again, 我又不是职业前端, 没那么多时间看底层代码, 所以Vue我是不考虑的. React轮子比较多,写法也比较符合后端直觉.</p>
<ul>
<li>BTW, Vue的一码多端我好像没听说有很好的方案. 只知道一个uniapp, 它被我的同学评价为一坨垃圾</li>
<li>对于一码多端还有一个选择是Flutter, 不过我都会React了,暂时没必要学它</li>
</ul>
</li>
<li>
<p>语言Ts:  Ts.... 我不想评价, 在我看来它就是一坨冒着热气的大便, 但是Js连大便都不如, 我没得选择. 虽然Ts宣传JS + 类型系统, 不过一门新语言实际上肯定会带来许多新特性, 当然了, 其中唯一值得我说的就是类型系统. 我到现在也没搞明白TS类型系统的设计思想是啥. 感觉非常非常复杂, Interface,Type和Class区别是什么. 类型窄化又是干嘛的, 为啥要使用结构等价来判断类型, 为啥会有any这种奇怪的类型. 总之,要么是Ts设计太现代, 我经验太浅不足以充分认知; 要么就是Ts设计者脑子出问题了, 纯炫技. 而且Ts开发非常非常难受, 类型后置+大量箭头表达式+范型使得代码丑陋至极. 维护起来特别恶心</p>
</li>
<li>
<p>CSS有很多选择, LESS和Tailwind. 这个取决于我要的样式效果复不复杂.</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="Testing"><a class="header-anchor" href="#Testing"></a>Testing</h1>
<p>对于企业来讲, 测试是必须的, 甚至TDD也情有可原.  但测试本质上是用来防止人多和人蠢的  , 我自己开发还写个锤子测试.</p>
<h1 id="Infrasturcture"><a class="header-anchor" href="#Infrasturcture"></a>Infrasturcture</h1>
<p>目前我掌握的Docker, K8S/Docker Swarm, Jenkins配合工作的挺好的. 不需要更改</p>
<h1 id="Open-Source-Dev"><a class="header-anchor" href="#Open-Source-Dev"></a>Open Source Dev</h1>
<p>开源项目最重要的是兴趣/需求, 其次是规划.</p>
<p>需求这个东西, 如果有的话,早就去创业了. 大部分情况下都是没有什么重大需求的, 所以就日常写一些有趣味的小项目就好了.</p>
<p>对于规划来讲,很多开源库文档里面第一件事就是Define the vision. 毕竟开源项目成功靠的是坚持, 是积少成多. 没有清晰可靠的规划是写不完一个项目的.</p>
<h1 id="Some-Experience"><a class="header-anchor" href="#Some-Experience"></a>Some Experience</h1>
<p>对于一些小项目, 在出现了很奇怪复杂的错误时, 与其花时间Debug, 不如直接重开, 关键文件复制进来就完事儿了.</p>
<h1 id="Some-Quotes"><a class="header-anchor" href="#Some-Quotes"></a>Some Quotes</h1>
<ol>
<li>研究物理的人如果遇到不理解的事情，总是可以责怪上帝，世界这么复杂不是你的错。但是如果你的程序有问题，那就找不到替罪羊了。0就是0，1就是1，就是你把它搞砸了。</li>
<li>当没有计算机的时候，编程不是问题。当有了比较弱的计算机时，编程成了中等程度的问题。现在我们有了巨大的计算机，编程就成了巨大的问题。</li>
<li>为什么这么少的人追求优雅？这就是现实。如果说优雅也有缺点的话，那就是你需要艰巨的工作才能得到它，需要良好的教育才能欣赏它。</li>
<li>工程师和设计师都有巨人主义情节，喜欢构建庞然大物，对很多人来说这是一种永无止境的诱惑.</li>
<li>副作用这种东西，其实是根本的，有用的。对于这一点，我喜欢跟人这样讲：在计算机和电子线路最开头发明的时候，所有的线路都是“纯”的，因为逻辑门和导线没有任何记忆数据的能力。后来有人发明了触发器（flip-flop），才有了所谓“副作用”。是副作用让我们可以存储中间数据，从而不需要把所有数据都通过不同的导线传输到需要的地方。没有副作用的语言，就像一个没有无线电，没有光的世界，所有的数据都必须通过实在的导线传递，这许多纷繁的电缆，必须被正确的连接和组织，才能达到需要的效果。我们为什么喜欢 WiFi，4G 网，Bluetooth，这也就是为什么一个语言不应该是“纯”的。</li>
<li>开源项目可以塑造一个人.  很多人没有意识到这一点，一般都是作者塑造作品，但是有些作品可以塑造作者. 你做着做着，变成了跟原来不一样的人</li>
<li>真的想做一个项目，那就开始得越快越好。早点做出有价值的成果，你会吸引到客户；如果做不出来，你就可以早点放弃，节省自己的时间，并了解哪里行不通</li>
</ol>
<h1 id="JS笑话"><a class="header-anchor" href="#JS笑话"></a>JS笑话</h1>
<ol>
<li>
<p>JavaScript的优点是可以写任何东西, 缺点是你真的会用它去写这些东西.</p>
</li>
<li>
<p>JS非常糟糕，以至于实际上所有JavaScript程序员都必须使用linter (例如<br>
JSLint或ESLint)。尽管近年来ECMAScrint经历了许多许多改进，但委员会无法完全消除JavaScript最严重的错误。所以问问自已这个问题:<strong>还有什么其他现代编程语言如此糟糕</strong><br>
<strong>以至于为了安全起见最推荐使用linter?</strong></p>
</li>
<li>
<p>A: I hate Go, its ugly!</p>
<p>B: You want to talk about ugly? Look at JavaScript!</p>
</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
  </entry>
  <entry>
    <title>Neuroscience L1</title>
    <url>/2022/03/23/Neuroscience-L1/</url>
    <content><![CDATA[<p>Ref:</p>
<p><em>NEUROSCIENCE --- DALE PURVES</em></p>
<span id="more"></span>
<h1 id="AI与神经科学"><a class="header-anchor" href="#AI与神经科学"></a>AI与神经科学</h1>
<ul>
<li>
<p>人工智能不能照搬神经科学（ CREATE, NOT MIMIC ）</p>
</li>
<li>
<p>注意“力”（ ATTENTION ）</p>
<ul>
<li>现有的CNN模型通过快速地扫描图像，逐步将注意力转移到图像中的下一个位置</li>
</ul>
</li>
<li>
<p>注意力亦指向意识内部（ SPOTLIGHT）</p>
<ul>
<li>内容寻址</li>
</ul>
</li>
<li>
<p>注意力亦指向意识内部（ IMAGE）</p>
<ul>
<li>
<p>generative models</p>
</li>
<li>
<p>系统以增量的方式构建图像， 每次只关注“心理画布”的一部分</p>
</li>
</ul>
</li>
<li>
<p>情景记忆（ EPISODIC MEMORY ）</p>
</li>
<li>
<p>智能行为要依赖多种记忆系统</p>
</li>
</ul>
<pre><code>* 基于强化的记忆系统(reinforcement-based mecanisms)

* 基于实例的记忆系统( instance- based mecanisms )， 也称为情景记忆
</code></pre>
<h1 id="神经科学基本概念"><a class="header-anchor" href="#神经科学基本概念"></a>神经科学基本概念</h1>
<ul>
<li>
<p>基因 ( <em>gene</em> )和基因组( <em>genomics</em> )</p>
<ul>
<li>基因：DNA序列</li>
<li>基因组：某个物种或个体的全部DNA序列</li>
</ul>
</li>
<li>
<p>基因型( <em>genotype</em> )和表型( <em>phenotype</em> )</p>
<ul>
<li>
<p>基因型为表型编码，但不能决定表型</p>
</li>
<li>
<p>基因型本身不能解释大脑的运作</p>
</li>
</ul>
</li>
<li>
<p>Orginization of the human nervous system</p>
<ul>
<li>中枢神经系统( <em>central nervous system</em>, CNS )和外部神经系统( <em>peripheral nervous system</em>, PNS )</li>
<li>Internal and external encironment→ 感受器  →  中枢神经系统  →  运动组件（第一部分由内脏神经系统和肠道神经系统组成， 第二部分由运动神经系统组成 ） → Effections</li>
</ul>
</li>
<li>
<p>CELLULAR DIVERSITY IN THE NERVOUS SYSTEM</p>
<ul>
<li>高尔基染色法
<ul>
<li>只能染一部分神经元</li>
</ul>
</li>
<li>尼式染色</li>
</ul>
</li>
<li>
<p>神经元细胞</p>
<ul>
<li><em>Soma</em>（ 细胞胞体 ）</li>
<li><em>Axon</em>（ 轴突 ）
<ul>
<li>发出信息</li>
</ul>
</li>
<li><em>Dendrite</em> （ 树突 ）
<ul>
<li>接收信息</li>
</ul>
</li>
<li><em>Spine</em>（ 树突脊 ）</li>
</ul>
</li>
<li>
<p>GLIA（ 胶质细胞， 非神经元细胞 ）</p>
<ul>
<li><em>Astrocyte</em>（ 星型胶质细胞 ）</li>
<li><em>Oligodendrocyte</em> ( 寡突胶质细胞 )</li>
<li><em>Microglia</em>（ 小胶质细胞 ）</li>
</ul>
</li>
<li>
<p>NEURAL CIRCUIT( 神经环路 )</p>
<ul>
<li>Sensor neuron</li>
<li>Motor neuron（ 运动神经元 ）</li>
<li>Interneuron( 中间神经元 )</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Natural Science</category>
      </categories>
      <tags>
        <tag>Neuroscience</tag>
      </tags>
  </entry>
  <entry>
    <title>Modularity</title>
    <url>/2021/06/27/Modularity/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Modularity</li>
<li>Information Hiding</li>
</ul>
<span id="more"></span>
<h1 id="Modularity"><a class="header-anchor" href="#Modularity"></a>Modularity</h1>
<ul>
<li>Computer systems are not monolithic:   计算机系统并非铁板一块, 它是可分的, 通常由大量互相交互的<code>模块</code>组成
<ul>
<li>they are usually composed of multiple, interacting modules.</li>
</ul>
</li>
<li><code>Modularity</code> has long been seen as a key to cheap, high quality software.</li>
<li>The goal of <strong>system design</strong> is to decide:
<ul>
<li>– what the modules are;</li>
<li>– what the modules should be;</li>
<li>– how the modules interact with one-another.</li>
</ul>
</li>
</ul>
<h2 id="history"><a class="header-anchor" href="#history"></a>history</h2>
<ul>
<li>萌芽
<ul>
<li>Wirth1971; Parnas1972;</li>
</ul>
</li>
<li>形成
<ul>
<li>Stevens1974; Parnas1978; Parnas1985</li>
</ul>
</li>
<li>发展</li>
<li>Eder1992; Hitz1995;</li>
<li>反思</li>
<li>McConnell1996; Demarco2002</li>
</ul>
<p>具体内容blabla一大堆,自己去看吧(っ °Д °;)っ</p>
<h2 id="Module"><a class="header-anchor" href="#Module"></a>Module</h2>
<p>What is a module?</p>
<ul>
<li>Common view: a piece of code. Too limited.</li>
<li>Compilation unit, including related declarations and interface 编译单元, 包括相关的声明和接口, 这是狭隘的看法</li>
<li><code>David Parnas</code>: a unit of work.  工作单元</li>
<li><strong>Collection of programming units</strong> (procedures, classes, etc.)
<ul>
<li>with a well-defined <strong>interface and purpose</strong> within the entire system</li>
<li>that can be <strong>independently</strong> assigned to a developer</li>
</ul>
</li>
</ul>
<h2 id="模块化的作用"><a class="header-anchor" href="#模块化的作用"></a>模块化的作用</h2>
<ul>
<li><strong>Management</strong>: Partition the overall development effort 对整个开发过程做划分
<ul>
<li>– Divide and conquer 分治策略(计算机经典思想无处不在)</li>
</ul>
</li>
<li><strong>Evolution</strong>: Decouple parts of a system so that changes to one part are isolated from changes to other parts 对系统进行解耦, 使得对一个部分的改变不会影响其他部分
<ul>
<li>Principle of directness (clear allocation of requirements to modules, ideally one requirement (or more) maps to one module) 一个需求对应一个模块</li>
<li>Principle of continuity/locality (small change in requirements triggers a change to one module only) 小型改动只需对一个模块做修改</li>
</ul>
</li>
<li><strong>Understanding</strong>: Permit system to be understood
<ul>
<li>as composition of mind-sized chunks, e.g., the 7±2 Rule 把系统分成人脑可以理解的一个个区块</li>
<li>with one issue at a time, e.g., principles of locality, encapsulation, separation of concerns 使得人脑同一时间只需处理一个问题,</li>
<li>Key issue: what criteria to use for modularization?</li>
<li><strong>Information Hiding</strong></li>
</ul>
</li>
</ul>
<h1 id="Interface-Implementation"><a class="header-anchor" href="#Interface-Implementation"></a>Interface &amp;&amp; Implementation</h1>
<ul>
<li>The interface is <u>the visible surface of the capsule</u>
<ul>
<li>describes the essential characteristics of objects of the class which are visible to the exterior world</li>
</ul>
</li>
<li>The implementation is hidden in the capsule.
<ul>
<li>The implementation hiding means that data can only be manipulated, that is updated, within the class, but it does not mean hiding interface data.</li>
</ul>
</li>
</ul>
<h2 id="Interface"><a class="header-anchor" href="#Interface"></a>Interface</h2>
<ul>
<li>Interface as a contract - whatever is published by a module that
<ul>
<li>Provided interface: clients of the module can depend on and</li>
<li>Required interface: the module can depend on from other modules</li>
</ul>
</li>
<li>Syntactic interfaces
<ul>
<li>How to call operations
<ul>
<li>List of operation signatures</li>
<li>Sometimes also valid orders of calling operations</li>
</ul>
</li>
</ul>
</li>
<li>Semantic interfaces
<ul>
<li>What the operations do, e.g.,
<ul>
<li>Pre- and post-conditions</li>
<li>Use cases</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="⾯向对象中的接⼝"><a class="header-anchor" href="#⾯向对象中的接⼝"></a>⾯向对象中的接⼝</h3>
<ul>
<li>对象之间交互的消息（⽅法名）</li>
<li>消息中的所有参数</li>
<li>消息返回结果的类型</li>
<li>与状态⽆关的不变量</li>
<li>需要处理的异常</li>
</ul>
<h2 id="Interface-vs-Implementation"><a class="header-anchor" href="#Interface-vs-Implementation"></a>Interface vs. Implementation</h2>
<ul>
<li>Users and implementers of a module have different views of it.</li>
<li><strong>Interface</strong>: user’s view of a module.</li>
<li>describes only what a user needs to know to use the module</li>
<li>makes it easier to understand and use</li>
<li>describes what services the module provides, but not how it’s able to provide them</li>
<li>只提供用户需要的服务, 但不提供实现</li>
</ul>
<h2 id="类的职责"><a class="header-anchor" href="#类的职责"></a>类的职责</h2>
<ul>
<li>
<p>什么是职责</p>
<ul>
<li>类或对象维护⼀定的状态信息</li>
<li><u>基于状态履行行为职能的能⼒</u></li>
</ul>
</li>
<li>
<p>职责的来源</p>
<ul>
<li>职责来源于需求,</li>
</ul>
</li>
<li>
<p>职责的体现</p>
</li>
<li>
<p>封装Information Hiding</p>
</li>
</ul>
<h1 id="Information"><a class="header-anchor" href="#Information"></a>Information</h1>
<ul>
<li><strong>Information -&gt;secrets</strong></li>
<li>what’s a “secret”? -&gt; <strong>Change</strong>
<ul>
<li>Representation of data  信息的表示</li>
<li>Properties of a device, other than required properties  设备的属性</li>
<li>Implementation of world models  整个模型的实现</li>
<li>Mechanisms that support policies 支持策略的机制</li>
</ul>
</li>
</ul>
<h2 id="容易更改的架构元素"><a class="header-anchor" href="#容易更改的架构元素"></a>容易更改的架构元素</h2>
<ul>
<li><strong>hardware dependencies</strong> 硬件设备的依赖(还有外部的软件系统,经常变)
<ul>
<li>External software system</li>
</ul>
</li>
<li><strong>input and output formats</strong> 输入和输出的格式
<ul>
<li>DB, Internet, UI, …</li>
</ul>
</li>
<li><strong>nonstandard language features and library routines</strong>; 非标准语言特性和库子程序,比如各大os
<ul>
<li>Platform: os, middleware, framework…</li>
</ul>
</li>
<li><strong>difficult design and implementation areas</strong> 包含复杂决策和实现的模块(尤其是那些写得很简陋的)
<ul>
<li>especially areas that might be developed poorly and require redesign or reimplementation;</li>
<li>Complex…, monitor, exception, log, … 异常类, log类等等</li>
</ul>
</li>
<li><strong>complex data structures</strong>, data structures that are used by more than one class, or data structures you haven’t designed to your satisfaction;
<ul>
<li>Separate model from logic</li>
</ul>
</li>
<li><strong>complex logic</strong>, which is almost as likely to change as complex data structures; 复杂的逻辑, 如果其依赖的数据结构变了, 那这部分基本也要变
<ul>
<li>Algorithm, schedule, time-critical, performance-critical, …</li>
</ul>
</li>
<li><strong>global variables</strong>, which are probably never truly needed, but which always benefit from being hidden behind access routines; 全局变量, 尽量别用
<ul>
<li>Data Access Routines</li>
</ul>
</li>
<li><strong>data-size constraints</strong> such as array declarations and loop limits; 数据大小的约束, 比如数组声明, 循环不变式之类</li>
<li>and <strong>business rules</strong> such as the laws, regulations, policies, and procedures that are embedded into a computer system.</li>
</ul>
<h2 id="Information-Hiding"><a class="header-anchor" href="#Information-Hiding"></a>Information Hiding</h2>
<ul>
<li>
<p>Try to <strong>localize future change</strong></p>
<ul>
<li>Hide system details likely to change independently  把容易独立改变的系统细节隐藏起来</li>
<li>Separate parts that are likely to have a different rate of change 区分不同有改变速率的部分</li>
<li>Expose in interfaces assumptions unlikely to change 把不可能改变的假设暴露在接口中</li>
</ul>
</li>
<li>
<p>the most common kind of secret is a design decision that you think might <strong>change</strong>.</p>
</li>
<li>
<p>You then <strong>separate</strong> each design secret by assigning it to its own class, subroutine, or other design unit.</p>
</li>
<li>
<p>Next you <strong>isolate</strong> (encapsulate) each secret so that if it does change, the change doesn’t affect the rest of the program.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
      <tags>
        <tag>Software Engineering Methodology</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience L2</title>
    <url>/2021/09/17/Neuroscience-L2/</url>
    <content><![CDATA[<ul>
<li>
<p>电信号: 感受器电位. 突触电位, 动作电位</p>
<ul>
<li>
<p>唤能： 机械刺激转换成电位变化</p>
</li>
<li>
<p>信息传递: 动作电位可以沿着轴突长距离传输</p>
</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="Electrical-Potentials-across-Nerve-Cell-Membranes"><a class="header-anchor" href="#Electrical-Potentials-across-Nerve-Cell-Membranes"></a>Electrical Potentials across Nerve Cell Membranes</h1>
<ul>
<li>
<p>膜电位（  <em>membrane potential</em> ）： 跨神经元膜的点位， 通常规定细胞外的电压值为0.</p>
<ul>
<li>用。<code>Vm</code>表示, 其可用插入细胞质的<strong>微电极</strong>测量</li>
</ul>
</li>
<li>
<p>细胞膜: 磷脂双分子层. 以脂质,蛋白质和少量糖为主要成分的半透性的膜.</p>
<ul>
<li>相似相溶原理: 疏水性的分子, 离子可以通过, 水溶性的不行. 分子量比较小的分子也可能通过</li>
</ul>
</li>
<li>
<p>离子转运体( <em>Ion transporters</em> ): 是一类跨膜蛋白分子所形成的, 可以耗费能量来实现特定粒子<strong>逆浓度梯度</strong>跟电位梯度的跨膜转运, 也被称为<strong>离子泵</strong></p>
</li>
<li>
<p>离子通道( <em>Ion channels</em> ): 跨膜通道蛋白分子是具有离子选择性的门控通道, 可以允许特定例子<strong>顺浓度梯度</strong>运输</p>
</li>
<li>
<p>静息电位( <em>Resting Potential</em> )当细胞膜未收到人为刺激,处在静息态时,细胞膜两侧存在电位差, 其存在于细胞膜内外两侧的<strong>外正内负</strong>的电位差, 该电位在安静状态基本保持不变, 神经元静息膜电位通常为-65<code>mV</code>(  不同细胞的静息膜电位不一样 )</p>
<ul>
<li>静息状态下,要维持<strong>电势能的储备</strong>: 离子转运体利用ATP水解产生的能量(高能磷酸键), 来跨膜转运带电粒子( 将钠离子带到细胞外,钾离子带到细胞内) . 这是个耗能的过程( 消耗了ATP的<code>30%</code> ),进行了电势能的储备, 将离子逆浓度(逆电势差)运输.</li>
</ul>
</li>
<li>
<p>离子平衡电位: 由于膜的半透性和选择性, 膜的两侧也具有电荷差</p>
<ul>
<li>
<p>在静息状态下,神经元膜由于钾通道的存在而对K^+^有高通透性, K^+^顺其浓度梯度的跨膜迁移使得神经元内负电荷增加; 由于磷脂双分子层很薄( 7-8<code>nm</code> ), 因此, 神经元内的负电荷和膜外的正电荷因相互吸引从而分布在细胞膜的两侧了最终静息膜电位趋向于K^+^的平衡电位, -80<code>mV</code></p>
<ul>
<li>
<p>细胞内:</p>
<ul>
<li>[K]高</li>
<li>[Na]低, 静息膜离子通透率P~K+~为P~Na+~的40倍</li>
<li>[Cl]低</li>
<li>[Ca]低</li>
</ul>
</li>
<li>
<p>除了K^+^, 其他离子通道也有开放. 因此静息膜电位是-65<code>mV</code></p>
</li>
</ul>
</li>
<li>
<p>极化( <em>polarization</em> ):  安静时细胞膜两侧处于外正内负的状态</p>
</li>
<li>
<p>超极化( <em>hyperpolarization</em> ):    膜的极化状态增强</p>
</li>
<li>
<p>去极化( <em>depolarization</em> ):    膜的极化状态减弱</p>
</li>
<li>
<p>反极化( <em>reverse polarization</em> ): 去极化至零电位后膜电位进一步变为正值, 使膜电位的极性与原来的极化状态相反</p>
</li>
<li>
<p>超射(<em>overshot</em>): 膜电位高于零电位的部分</p>
</li>
<li>
<p>复极化( <em>repolarization</em> ): 去极化后再向静息电位方向恢复的过程</p>
</li>
<li>
<p>阈值( <em>threshold potential</em> ): 去极化时, 钠离子进入, 使膜去极化, 细胞膜内表面电位减小, 但是去极化触发动作电位的产生必须达到一定的<strong>临界膜电位水平</strong>, 称为<strong>阈值</strong>, 膜电位去极化超过阈值就会产生<strong>动作电位</strong>, 这也叫做动作电位的&quot;<strong>全或无</strong>&quot;</p>
</li>
<li>
<p>上升相: 钠离子通道打开, 钠离子在离子驱动力下流入细胞, 趋于钠平衡电位</p>
</li>
<li>
<p>下降相: 钠离子通道关闭, 膜电位为正, 驱使钾离子外流, 趋于钾平衡电位</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Natural Science</category>
      </categories>
      <tags>
        <tag>Neuroscience</tag>
      </tags>
  </entry>
  <entry>
    <title>Nvim Developing Environment</title>
    <url>/2022/08/18/Nvim-Developing-%20Environment/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Nvim</li>
<li>Nvim Config</li>
<li>LspInstall</li>
<li>Dap</li>
<li>Keybinds</li>
</ul>
<span id="more"></span>
<h1 id="Nvim"><a class="header-anchor" href="#Nvim"></a>Nvim</h1>
<h2 id="Nvim-vs-VSCode"><a class="header-anchor" href="#Nvim-vs-VSCode"></a>Nvim vs VSCode</h2>
<p>Nvim和VSCode是两个主流的编辑器/IDE.</p>
<ul>
<li>VS Code’s use of <a href="https://www.electronjs.org/">Electron</a> makes it available on all major platforms. This is how <a href="https://github.com/features/codespaces">GitHub Codespaces</a> or <a href="https://www.gitpod.io/">Gitpod</a> can access to the entire VS Code ecosystem. See <a href="https://console.dev/interviews/gitpod-christian-weichel/">our interview with GitPod’s Chief Architect / Head of Engineering</a> about how important this has been.
<ul>
<li>虽然微软团队对VSCode的Electron做了很多魔改, 极大地提升了性能, 但依然使得我个人感觉很不舒服</li>
</ul>
</li>
<li>Nvim更快</li>
</ul>
<h2 id="Features"><a class="header-anchor" href="#Features"></a>Features</h2>
<ul>
<li><strong>Performance:</strong> 🚀 Very fast.</li>
<li><strong>Syntax highlighting:</strong> Neovim 0.5 now includes <a href="https://github.com/nvim-treesitter/nvim-treesitter">Treesitter</a> and supports  <a href="https://github.com/neovim/nvim-lspconfig">LSP</a>, but still requires some config.</li>
<li><strong>Customizable:</strong> ✅ Large ecosystem of plugins and themes.</li>
<li><strong>Cross-platform:</strong> Linux ✅ Windows ✅ macOS ✅</li>
</ul>
<h2 id="Config"><a class="header-anchor" href="#Config"></a>Config</h2>
<ul>
<li>
<p>Neovim设置全局配置文件,需要在<code>/etc/profile</code>添加：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export VIM=/usr/share/nvim</span><br><span class="line">export PATH=&quot;$PATH:$VIM/sysinit.vim&quot;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>有可能会出现这种情况：</p>
<blockquote>
<p>直接使用 nvim ... 打开文件时一切正常，配置也生效;<br>
但当你使用 sudo nvim ... 打开文件时，配置文件并没有生效</p>
</blockquote>
<p>出现这种情况的原因是：当你使用 sudo命令的时候，用户的身份切换了（默认是root）,此时你的环境变量也被重置了，系统当然就找不到你的配置文件。</p>
<p>解决的方案大致有2种：</p>
<ol>
<li>使用 sudo -E nvim ... 打开文件 （最快速的方法，不过每次都需要加上 -E, 有点麻烦）</li>
<li>修改 sudo 的配置文件: /etc/sudoers(如果用nvim打开是空文件的话，可以试一下用vim 或者 visudo打开，后面就不细说了，超纲了)</li>
</ol>
</li>
</ul>
<h1 id="Nvim-Config"><a class="header-anchor" href="#Nvim-Config"></a>Nvim Config</h1>
<p>使用<a href="https://github.com/ayamir/nvimdots/">ayamir的Nvim配置</a>,  它集成了大量插件, 包括Nvim + LSP + Dap.</p>
<p>其配置文件位于<code>~/.config/nvim/lua</code></p>
<h2 id="Config-Install"><a class="header-anchor" href="#Config-Install"></a>Config Install</h2>
<p><a href="https://github.com/ayamir/nvimdots/wiki/Prerequisites">https://github.com/ayamir/nvimdots/wiki/Prerequisites</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># for neovim python module</span><br><span class="line">pip install neovim --user</span><br><span class="line"></span><br><span class="line"># clone</span><br><span class="line">git clone git@github.com:ayamir/nvimdots.git ~/.config/nvim</span><br><span class="line"></span><br><span class="line"># sync plugins(maybe need multiple times)</span><br><span class="line">nvim +PackerSync</span><br></pre></td></tr></table></figure>
<h2 id="Structure"><a class="header-anchor" href="#Structure"></a>Structure</h2>
<p><code>init.lua</code> is the kernel config file. It requires configuration in <code>lua</code> directory.</p>
<ul>
<li><code>lua</code> directory contains 3 parts.
<ul>
<li><code>core</code> directory contains base configuration of neovim.</li>
<li><code>keymap</code> directory contains keybindings of plugins.</li>
<li><code>modules</code> directory contains 5 parts.
<ul>
<li><code>completion</code> directory contains code completion's configuration.</li>
<li><code>editor</code> directory contains plugins' configuration about editing.</li>
<li><code>lang</code> directory contains plugins' configuration about specific language.</li>
<li><code>tools</code> directory contains telescope and its extensions' configuration.</li>
<li><code>ui</code> directory contains plugins' configuration about ui.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Usage"><a class="header-anchor" href="#Usage"></a>Usage</h2>
<ul>
<li>
<p>已经集成了<a href="https://github.com/williamboman/nvim-lsp-installer">nvim-lsp-installer</a>, 只需手动安装对应语言的language server.</p>
<ul>
<li>
<p>lsp-installer默认安装的html LSP有问题, 需要手动安装新的:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i -g vscode-html-languageserver-bin</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>For <a href="https://github.com/nvim-treesitter/nvim-treesitter#supported-languages">nvim-treesitter</a>, ensure installed parsers are configured <a href="https://github.com/ayamir/nvimdots/blob/f593682b349f69a468bfeb6cd1eb87f810b8a37f/lua/modules/editor/config.lua#L19-L37">here</a>, you can add or remove parsers on your own demand.</p>
</li>
<li>
<p>For <a href="https://github.com/mattn/efm-langserver">efm-langserver</a>, you need to install itself and format/lint tools manually.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install clang</span><br><span class="line">brew install eslint</span><br><span class="line">go install golang.org/x/tools/...@latest</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>
<p>You can use <code>FormatToggle</code> command to enable/disable format-on-save which is enabled by default.</p>
</li>
<li>
<p>Also, you can disable format-on-save for specific workspace by add its absolute path in <code>format_disabled_dirs.txt</code> in new line.</p>
</li>
<li>
<p>You can use <code>:checkhealth</code> command to check whether all modules works or not.</p>
</li>
<li>
<p><strong>Please ensure all of tools installed above can be found in <code>PATH</code></strong>.</p>
</li>
<li>
<p>You can configure these tools in your own habit like <code>.eslintrc.js</code> and <code>.prettierrc.json</code>.</p>
<p>Recommanded way to set <strong>PATH</strong> variable is export it in your <code>~/.profile</code> like this:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LOCAL_BIN=<span class="string">&quot;<span class="variable">$HOME</span>/.local/bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> GOROOT=<span class="string">&quot;/usr/lib/go&quot;</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="string">&quot;<span class="variable">$HOME</span>/go&quot;</span></span><br><span class="line"><span class="built_in">export</span> GOBIN=<span class="string">&quot;<span class="variable">$HOME</span>/go/bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HS_BIN=<span class="string">&quot;<span class="variable">$HOME</span>/.cabal/bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> NPM_BIN=<span class="string">&quot;<span class="variable">$HOME</span>/.npm-global/bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> KT_BIN=<span class="string">&quot;<span class="variable">$HOME</span>/.kotlin/bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> RS_BIN=<span class="string">&quot;<span class="variable">$HOME</span>/.cargo/bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="string">&quot;/usr/lib/jvm/default&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> BENTO_BIN=<span class="string">&quot;<span class="variable">$HOME</span>/.local/share/bento4/bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> ROFI_BIN=<span class="string">&quot;<span class="variable">$HOME</span>/.config/rofi/bin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$LOCAL_BIN</span>:<span class="variable">$GOBIN</span>:<span class="variable">$HS_BIN</span>:<span class="variable">$NPM_BIN</span>:<span class="variable">$RS_BIN</span>:<span class="variable">$JAVA_HOME</span>:<span class="variable">$BENTO_BIN</span>:<span class="variable">$ROFI_BIN</span>:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Customize"><a class="header-anchor" href="#Customize"></a>Customize</h2>
<p><a href="https://github.com/ayamir/nvimdots/wiki/Usage">https://github.com/ayamir/nvimdots/wiki/Usage</a></p>
<p>nvim添加插件, 需要用<a href="https://github.com/wbthomason/packer.nvim">packaer.nvim</a></p>
<h1 id="LspInstall"><a class="header-anchor" href="#LspInstall"></a>LspInstall</h1>
<p><a href="https://github.com/williamboman/nvim-lsp-installer#available-lsps">https://github.com/williamboman/nvim-lsp-installer#available-lsps</a></p>
<h2 id="Commands"><a class="header-anchor" href="#Commands"></a>Commands</h2>
<ul>
<li><code>:LspInstallInfo</code> - opens a graphical overview of your language servers</li>
<li><code>:LspInstall [--sync] [server] ...</code> - installs/reinstalls language servers. Runs in a blocking fashion if the <code>--sync</code> argument is passed (only recommended for scripting purposes).</li>
<li><code>:LspUninstall [--sync] &lt;server&gt; ...</code> - uninstalls language servers. Runs in a blocking fashion if the <code>--sync</code> argument is passed (only recommended for scripting purposes).</li>
<li><code>:LspUninstallAll [--no-confirm]</code> - uninstalls all language servers</li>
<li><code>:LspInstallLog</code> - opens the log file in a new tab window</li>
<li><code>:LspPrintInstalled</code> - prints all installed language servers</li>
</ul>
<h1 id="Dap"><a class="header-anchor" href="#Dap"></a>Dap</h1>
<p><a href="https://github.com/mfussenegger/nvim-dap">Official Repositoty</a></p>
<p>nvim-dap is a Debug Adapter Protocol client, or &quot;debugger&quot;, or &quot;debug-frontend&quot;.</p>
<p>With the help of a debug adapter it can:</p>
<ol>
<li>Launch an application to debug</li>
<li>Attach to running applications to debug them</li>
<li>Set breakpoints and step through code</li>
<li>Inspect the state of the application</li>
</ol>
<p>Dap插件的配置代码位于: <code>~/.config/nvim/lua/modules/editor/plugins.lua</code>, 我们不需要改动.</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">editor[<span class="string">&quot;rcarriga/nvim-dap-ui&quot;</span>] = &#123;</span><br><span class="line">	opt = <span class="literal">false</span>,</span><br><span class="line">	<span class="built_in">config</span> = conf.dapui,</span><br><span class="line">	requires = &#123;</span><br><span class="line">		&#123; <span class="string">&quot;mfussenegger/nvim-dap&quot;</span>, <span class="built_in">config</span> = conf.dap &#125;,</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="string">&quot;Pocco81/dap-buddy.nvim&quot;</span>,</span><br><span class="line">			opt = <span class="literal">true</span>,</span><br><span class="line">			cmd = &#123; <span class="string">&quot;DIInstall&quot;</span>, <span class="string">&quot;DIUninstall&quot;</span>, <span class="string">&quot;DIList&quot;</span> &#125;,</span><br><span class="line">			commit = <span class="string">&quot;24923c3819a450a772bb8f675926d530e829665f&quot;</span>,</span><br><span class="line">			<span class="built_in">config</span> = conf.dapinstall,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="Structure-2"><a class="header-anchor" href="#Structure-2"></a>Structure</h2>
<p>You'll need to install and configure a debug adapter per language. See</p>
<ul>
<li><a href="https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt">:help dap.txt</a></li>
<li>the <a href="https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation">Debug-Adapter Installation</a> wiki</li>
<li><code>:help dap-adapter</code></li>
<li><code>:help dap-configuration</code></li>
</ul>
<p>A debug adapter is a facilitator between nvim-dap (the client), and a language-specific debugger:</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">DAP-Client ----- Debug Adapter ------- Debugger ------ Debugee</span><br><span class="line">(nvim-dap)  |   (per language)  |   (per language)    (your app)</span><br><span class="line">            |                   |</span><br><span class="line">            |        Implementation specific communication</span><br><span class="line">            |        Debug adapter and debugger could be the same process</span><br><span class="line">            |</span><br><span class="line">     Communication via the Debug Adapter Protocol</span><br></pre></td></tr></table></figure>
<p>adapter 示例:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">dap.adapters.python = &#123;</span><br><span class="line">	<span class="built_in">type</span> = <span class="string">&quot;executable&quot;</span>,</span><br><span class="line">	command = <span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;HOME&quot;</span>) .. <span class="string">&quot;/.local/share/nvim/dapinstall/python/bin/python&quot;</span>,</span><br><span class="line">	args = &#123; <span class="string">&quot;-m&quot;</span>, <span class="string">&quot;debugpy.adapter&quot;</span> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>configurations 示例:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">dap.configurations.python = &#123;</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">-- The first three options are required by nvim-dap</span></span><br><span class="line">		<span class="built_in">type</span> = <span class="string">&quot;python&quot;</span>, <span class="comment">-- the type here established the link to the adapter definition: `dap.adapters.python`</span></span><br><span class="line">		request = <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">		name = <span class="string">&quot;Launch file&quot;</span>,</span><br><span class="line">		<span class="comment">-- Options below are for debugpy, see https://github.com/microsoft/debugpy/wiki/Debug-configuration-settings for supported options</span></span><br><span class="line"></span><br><span class="line">		program = <span class="string">&quot;$&#123;file&#125;&quot;</span>, <span class="comment">-- This configuration will launch the current file if used.</span></span><br><span class="line">		pythonPath = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">			<span class="comment">-- debugpy supports launching an application with a different interpreter then the one used to launch debugpy itself.</span></span><br><span class="line">			<span class="comment">-- The code below looks for a `venv` or `.venv` folder in the current directly and uses the python within.</span></span><br><span class="line">			<span class="comment">-- You could adapt this - to for example use the `VIRTUAL_ENV` environment variable.</span></span><br><span class="line">			<span class="keyword">local</span> cwd = vim.fn.getcwd()</span><br><span class="line">			<span class="keyword">if</span> vim.fn.executable(cwd .. <span class="string">&quot;/venv/bin/python&quot;</span>) == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">				<span class="keyword">return</span> cwd .. <span class="string">&quot;/venv/bin/python&quot;</span></span><br><span class="line">			<span class="keyword">elseif</span> vim.fn.executable(cwd .. <span class="string">&quot;/.venv/bin/python&quot;</span>) == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">				<span class="keyword">return</span> cwd .. <span class="string">&quot;/.venv/bin/python&quot;</span></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="keyword">return</span> <span class="string">&quot;/usr/bin/python&quot;</span></span><br><span class="line">			<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">end</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Usage-2"><a class="header-anchor" href="#Usage-2"></a>Usage</h2>
<p>A typical debug flow consists of:</p>
<ul>
<li>Setting breakpoints via <code>:lua require'dap'.toggle_breakpoint()</code>.</li>
<li>Launching debug sessions and resuming execution via <code>:lua require'dap'.continue()</code>.</li>
<li>Stepping through code via <code>:lua require'dap'.step_over()</code> and <code>:lua require'dap'.step_into()</code>.</li>
<li>Inspecting the state via the built-in REPL: <code>:lua require'dap'.repl.open()</code> or using the widget UI (<code>:help dap-widgets</code>)</li>
</ul>
<p>See <a href="https://github.com/mfussenegger/nvim-dap/blob/master/doc/dap.txt">:help dap.txt</a>, <code>:help dap-mapping</code> and <code>:help dap-api</code>.</p>
<h2 id="Specific-Daps"><a class="header-anchor" href="#Specific-Daps"></a>Specific Daps</h2>
<ul>
<li>
<p>具体语言的Dap配置代码位于: <code>~/.config/nvim/lua/modules/editor/config.lua</code>.</p>
</li>
<li>
<p>具体语言的Dap的安装文档: <a href="https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation">Doc</a></p>
</li>
</ul>
<p>ayamir默认配置好了许多Dap, 大部分情况下我们只需安装对应的依赖, 让ayamir的代码生效即可.</p>
<h3 id="C-C-Rust-via-lldb-vscode"><a class="header-anchor" href="#C-C-Rust-via-lldb-vscode"></a>C/C++/Rust (via lldb-vscode)</h3>
<p>ayamir用的就是<code>lldb-vscode</code>, 只需要自己自己下载<code>lldb-vscode</code>, 确保其能够在命令行调用, 再在ayamir的配置代码里把<code>lldb-vscode</code>的路径改为自己的路径即可:</p>
<ol>
<li>
<p>install:</p>
<p><code>lldb-vscode</code>是LLVM的一个包, 只需安装LLVM, 并配置到环境变量即可</p>
</li>
<li>
<p>找到LLVM的路径,将其<code>bin</code>目录配置到<code>PATH</code>, 这样该目录下的子命令( 包括<code>lldb-vscode</code> )就可以在命令行调用了. 这一步也是在安装LLVM的时候做的</p>
</li>
<li>
<p><code>lldb-vscode</code> 在LLVM目录下, 太曲折了. 我们弄一个符号链接. 注意,  注意一般OS的软件都放在<code>/usr/bin</code>,但Mac不允许在<code>/usr/bin</code>随意操作( ln会报错&quot;Operation not permitted&quot; ), 因此我的软件链接放在<code>/usr/local/bin</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /opt/homebrew/opt/llvm/bin/lldb-vscode /usr/bin/lldb-vscode</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改代码中的路径:</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"># ~/.<span class="built_in">config</span>/nvim/lua/modules/editor</span><br><span class="line">	dap.adapters.lldb = &#123;</span><br><span class="line">		<span class="built_in">type</span> = <span class="string">&quot;executable&quot;</span>,</span><br><span class="line">		</span><br><span class="line">		command = <span class="string">&quot;/usr/local/bin/lldb-vscode&quot;</span>, # 改到自己的路径</span><br><span class="line">		name = <span class="string">&quot;lldb&quot;</span>,</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Go"><a class="header-anchor" href="#Go"></a>Go</h3>
<p>默认配置代码不需要改动, 只需安装依赖:</p>
<ol>
<li>
<p>Install delve:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">go install github.com/go-delve/delve/cmd/dlv@latest</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Install vscode-go:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/golang/vscode-go</span><br><span class="line"><span class="built_in">cd</span> vscode-go</span><br><span class="line">npm install</span><br><span class="line">npm run compile</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Keybinds"><a class="header-anchor" href="#Keybinds"></a>Keybinds</h1>
<p><a href="https://github.com/ayamir/nvimdots/wiki/Keybindings">https://github.com/ayamir/nvimdots/wiki/Keybindings</a></p>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Editor</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL Data Manipulation</title>
    <url>/2022/09/26/MySQL%20Data%20Manipulation/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>SELECT</li>
<li>ORDER BY</li>
<li>...</li>
</ul>
<p>Mysql语法简介</p>
<span id="more"></span>
<h1 id="MYSQL-DATA-MANIPULATION"><a class="header-anchor" href="#MYSQL-DATA-MANIPULATION"></a>MYSQL DATA MANIPULATION</h1>
<h2 id="SELECT"><a class="header-anchor" href="#SELECT"></a>SELECT</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT select_list</span><br><span class="line">FROM table_name;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>;</code>是可选的，表明一条语句的结束</li>
<li>SQL是大小写不敏感的，因此<code>SELECT0</code>，<code>FROM</code>这些关键字可大写可小写</li>
<li><code>SELECT</code>的结果称为一个结果集</li>
<li>如果SELECT的参数是空行（连NULL都没有)，会返回NULL。</li>
</ul>
<h3 id="Returning-n-Random-Records-from-a-Table"><a class="header-anchor" href="#Returning-n-Random-Records-from-a-Table"></a>Returning n Random Records from a Table</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select ename, job</span><br><span class="line">	from emp</span><br><span class="line">order by rand() limit 5</span><br></pre></td></tr></table></figure>
<h3 id="Transforming-Nulls-into-Real-Values"><a class="header-anchor" href="#Transforming-Nulls-into-Real-Values"></a>Transforming Nulls into Real Values</h3>
<p>Use the function COALESCE to substitute real values for nulls:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select coalesce(comm, 0)</span><br><span class="line">	from emp</span><br></pre></td></tr></table></figure>
<p>COALESCE 接受至少一个参数，返回第一个非空参数。 如果comm为null,则返回0</p>
<p>或者：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select case</span><br><span class="line">		when comm is not null then comm</span><br><span class="line">		else 0</span><br><span class="line">		end</span><br><span class="line">	from emp</span><br></pre></td></tr></table></figure>
<h2 id="ORDER-BY"><a class="header-anchor" href="#ORDER-BY"></a>ORDER BY</h2>
<p>默认是<code>ASC</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">   select_list</span><br><span class="line">FROM </span><br><span class="line">   table_name</span><br><span class="line">ORDER BY </span><br><span class="line">   column1 [ASC|DESC], </span><br><span class="line">   column2 [ASC|DESC],</span><br><span class="line">   ...;</span><br></pre></td></tr></table></figure>
<p>ORDER BY的参数一般是字段，当然也可以是列号， 但后一种方式不推荐</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    CONCAT(firstName,&#x27; &#x27;,lastName) fullname</span><br><span class="line">FROM</span><br><span class="line">    employees </span><br><span class="line">UNION SELECT </span><br><span class="line">    CONCAT(contactFirstName,&#x27; &#x27;,contactLastName)</span><br><span class="line">FROM</span><br><span class="line">    customers</span><br><span class="line">ORDER BY 1; # 采用列号（第一列）</span><br></pre></td></tr></table></figure>
<h2 id="WHERE"><a class="header-anchor" href="#WHERE"></a>WHERE</h2>
<p><img data-src="https://www.mysqltutorial.org/wp-content/uploads/2021/07/MySQL-Where.svg" alt=" MySQL WHERE"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    select_list</span><br><span class="line">FROM</span><br><span class="line">    table_name</span><br><span class="line">WHERE</span><br><span class="line">    search_condition;</span><br></pre></td></tr></table></figure>
<p>The <code>search_condition</code> is a combination of one or more expressions using the logical operator <code>AND</code>, <code>OR</code> and <code>NOT</code>.</p>
<p>In MySQL, a predicate is a Boolean expression that evaluates to <code>TRUE</code>, <code>FALSE</code>, or <code>UNKNOWN</code>.</p>
<p>The <code>SELECT</code> statement will include any row that satisfies the <code>search_condition</code> in the result set.</p>
<p>Besides the <code>SELECT</code> statement, you can use the <code>WHERE</code> clause in the <code>UPDATE</code> or <a href="https://www.mysqltutorial.org/mysql-delete-statement.aspx"><code>DELETE</code></a> statement to specify which rows to update or delete.</p>
<p>When executing a <code>SELECT</code> statement with a <code>WHERE</code> clause, MySQL evaluates the <code>WHERE</code> clause after the <code>FROM</code> clause and before the <code>SELECT</code> and <code>ORDER BY</code> clauses:</p>
<h3 id="BETWEEN"><a class="header-anchor" href="#BETWEEN"></a>BETWEEN</h3>
<p><code>expression BETWEEN low AND high</code></p>
<h3 id="LIKE"><a class="header-anchor" href="#LIKE"></a>LIKE</h3>
<p>The <code>LIKE</code> operator evaluates to <code>TRUE</code> if a value matches a specified pattern.</p>
<p>To form a pattern, you use the <code>%</code> and <code>_</code> wildcards.</p>
<ul>
<li><strong>The <code>%</code> wildcard matches any string of zero or more characters</strong></li>
<li><strong>the <code>_</code> wildcard matches any single character.</strong></li>
</ul>
<p>The following query finds the employees whose last names end with the string <code>'son'</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    firstName, </span><br><span class="line">    lastName</span><br><span class="line">FROM</span><br><span class="line">    employees</span><br><span class="line">WHERE</span><br><span class="line">    lastName LIKE &#x27;%son&#x27;</span><br><span class="line">ORDER BY firstName;</span><br></pre></td></tr></table></figure>
<h3 id="IN"><a class="header-anchor" href="#IN"></a>IN</h3>
<p>The <code>IN</code> operator returns <code>TRUE</code> if a value matches any value in a list.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">value IN (value1, value2,...)</span><br></pre></td></tr></table></figure>
<p>The following example uses the <code>WHERE</code> clause with the <code>IN</code> operator to find employees who locate in the office with office code 1.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    firstName, </span><br><span class="line">    lastName, </span><br><span class="line">    officeCode</span><br><span class="line">FROM</span><br><span class="line">    employees</span><br><span class="line">WHERE</span><br><span class="line">    officeCode IN (1 , 2, 3)</span><br><span class="line">ORDER BY </span><br><span class="line">    officeCode;</span><br></pre></td></tr></table></figure>
<h3 id="IS-NULL"><a class="header-anchor" href="#IS-NULL"></a>IS NULL</h3>
<p>To check if a value is <code>NULL</code> or not, you use the <code>IS NULL</code> operator, not the equal operator (<code>=</code>). The <code>IS NULL</code> operator returns <code>TRUE</code> if a value is <code>NULL</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">value IS NULLCode language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>In the database world, <code>NULL</code> is a marker that indicates that a value is missing or unknown. And NULL is not equivalent to the number 0 or an empty string.</p>
</blockquote>
<p>对应的，还有<code>IS NOT NULL</code></p>
<h2 id="LIMIT"><a class="header-anchor" href="#LIMIT"></a>LIMIT</h2>
<p>注意： <code>limit</code>作用于结果集产生的最后，在<code>order by</code>之后，所以要先<code>order by</code>, 再 <code>lmit</code></p>
<p>The <code>LIMIT</code> clause is used in the <code>SELECT</code> statement to constrain the number of rows to return.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    select_list</span><br><span class="line">FROM</span><br><span class="line">    table_name</span><br><span class="line">LIMIT [offset,] row_count; ( OR LIMIT row_count OFFSET offset; )</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>The <code>offset</code> specifies the offset of the first row to return. OFFSET从0开始计数，缺省也为0</p>
</li>
<li>
<p>The <code>row_count</code> specifies the maximum number of rows to return.</p>
</li>
<li>
<p><code>LIMIT</code>子句对于超过其范围的行，会返回空行而不是<code>NULL</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select salary from `Employee` limit 1 offset 1</span><br><span class="line"># 如果Employee只有一行，则该查询返回空行：</span><br><span class="line">+--------+</span><br><span class="line">| salary |</span><br><span class="line">+--------+</span><br><span class="line">+--------+</span><br><span class="line"># 不会返回null</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>可以和<code>ORDER BY</code>结合：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    select_list</span><br><span class="line">FROM </span><br><span class="line">    table_name</span><br><span class="line">ORDER BY </span><br><span class="line">    sort_expression</span><br><span class="line">LIMIT offset, row_count;</span><br></pre></td></tr></table></figure>
<p>示例： get the highest or lowest rows</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    customerNumber, </span><br><span class="line">    customerName, </span><br><span class="line">    creditLimit</span><br><span class="line">FROM</span><br><span class="line">    customers</span><br><span class="line">ORDER BY creditLimit DESC</span><br><span class="line">LIMIT 5;</span><br></pre></td></tr></table></figure>
<ul>
<li>First, the <code>ORDER BY</code> clause sorts the customers by credits in high to low.</li>
<li>Then, the <code>LIMIT</code> clause returns the first 5 rows.</li>
</ul>
<h2 id="IS-NULL-2"><a class="header-anchor" href="#IS-NULL-2"></a>IS NULL</h2>
<p>To test whether a value is <code>NULL</code> or not, you use the  <code>IS NULL</code> operator. Here’s the basic syntax of the <code>IS NULL</code> operator:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">value IS NULLCode language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>If the value is <code>NULL</code>, the expression returns true. Otherwise, it returns false.</p>
<p>Note that MySQL does not have a built-in <a href="https://www.mysqltutorial.org/mysql-boolean/"><code>BOOLEAN</code></a> type. It uses the <a href="https://www.mysqltutorial.org/mysql-int/"><code>TINYINT(1)</code></a> to represent the <code>BOOLEAN</code> values i.e.,  true means 1 and false means 0.</p>
<p>Because the <code>IS NULL</code> is a comparison operator, you can use it anywhere that an operator can be used e.g., in the <a href="https://www.mysqltutorial.org/mysql-select-statement-query-data.aspx"><code>SELECT</code></a> or <a href="https://www.mysqltutorial.org/mysql-where/"><code>WHERE</code></a> clause.</p>
<p>See the following example:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NULL</span>,  <span class="comment">-- 0</span></span><br><span class="line">       <span class="number">0</span> <span class="keyword">IS</span> <span class="keyword">NULL</span>,  <span class="comment">-- 0</span></span><br><span class="line">       <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NULL</span>; <span class="comment">-- 1Code language: SQL (Structured Query Language) (sql)</span></span><br></pre></td></tr></table></figure>
<p>To check if a value is not <code>NULL</code>, you use <code>IS NOT NULL</code> operator:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">value</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>Code <span class="keyword">language</span>: <span class="keyword">SQL</span> (Structured Query <span class="keyword">Language</span>) (<span class="keyword">sql</span>)</span><br></pre></td></tr></table></figure>
<p>This expression returns true (1) if the value is not <code>NULL</code>. Otherwise, it returns false (0).</p>
<p>Consider the following example:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 1</span></span><br><span class="line">       <span class="number">0</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">-- 1</span></span><br><span class="line">       <span class="keyword">NULL</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>; <span class="comment">-- 0Code language: SQL (Structured Query Language) (sql)</span></span><br></pre></td></tr></table></figure>
<h2 id="SELECT-DISTINCT"><a class="header-anchor" href="#SELECT-DISTINCT"></a>SELECT DISTINCT</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DISTINCT</span><br><span class="line">    select_list</span><br><span class="line">FROM</span><br><span class="line">    table_name</span><br><span class="line">WHERE </span><br><span class="line">    search_condition</span><br><span class="line">ORDER BY </span><br><span class="line">    sort_expression;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>DISTINCT</code>:   从选出的行中选择唯一的</li>
<li>如果<code>DISTINCT</code>后面跟多个字段，就会将这些字段作为一个整体来判断唯一性</li>
<li>MYSQL认为所有NULL都是相等的，因此多个NULL在DISTINCT后只剩下一个</li>
</ul>
<p><img data-src="/home/lyk/Pictures/assets_for_hexo/DataBase/DISTINCT" alt="distinct"></p>
<h2 id="Alias"><a class="header-anchor" href="#Alias"></a>Alias</h2>
<p><strong>在一次查询中重复引用一个表名会引发ERROR</strong>， 因此要定义别名</p>
<p>列别名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">   [column_1 | expression] [AS] descriptive_name</span><br><span class="line">FROM table_name;</span><br><span class="line"></span><br><span class="line">//如果别名有空格，需要用引号括起来：‘descriptive name’</span><br></pre></td></tr></table></figure>
<p>表达式别名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">   CONCAT_WS(&#x27;, &#x27;, lastName, firstname) [AS] `Full name`</span><br><span class="line">FROM</span><br><span class="line">   employees;</span><br></pre></td></tr></table></figure>
<p>表别名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">table_name [AS] table_alias</span><br></pre></td></tr></table></figure>
<h2 id="JOIN"><a class="header-anchor" href="#JOIN"></a>JOIN</h2>
<p>A join is a method of linking data between one (<a href="http://www.mysqltutorial.org/mysql-self-join/">self-join</a>) or more tables based on values of the common column between the tables.</p>
<p>MySQL supports the following types of joins:</p>
<ol>
<li><a href="https://www.mysqltutorial.org/mysql-inner-join.aspx">Inner join</a></li>
<li><a href="https://www.mysqltutorial.org/mysql-left-join.aspx">Left join</a></li>
<li><a href="https://www.mysqltutorial.org/mysql-right-join/">Right join</a></li>
<li><a href="https://www.mysqltutorial.org/mysql-cross-join/">Cross join</a></li>
</ol>
<p>To join tables, you use the cross join, inner join, left join, or right join clause. The join clause is used in the <code>SELECT</code> statement appeared after the <code>FROM</code> clause.</p>
<p>Note that MySQL hasn’t supported the <code>FULL OUTER JOIN</code> yet.</p>
<p>Join会创建一个包含原本两方所有字段的新行，并加入结果集</p>
<h3 id="INNER-JOIN"><a class="header-anchor" href="#INNER-JOIN"></a>INNER JOIN</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column_list</span><br><span class="line">FROM table_1</span><br><span class="line">INNER JOIN table_2 ON join_condition;</span><br></pre></td></tr></table></figure>
<p>The inner join clause compares each row from the first table with every row from the second table.</p>
<p>将左边的每一行与右边的所有行匹配</p>
<p>只有两边的行同时满足，才会被join</p>
<p>如果两张表中作为条件来比较的字段相同，那么可以用<code> USING</code>来替代<code>ON</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using(id)</span><br><span class="line">#  等价于</span><br><span class="line">on a.id=b.id</span><br></pre></td></tr></table></figure>
<h3 id="LEFT-JOINmysql-join-left-join"><a class="header-anchor" href="#LEFT-JOINmysql-join-left-join"></a>LEFT JOIN<img data-src="https://www.mysqltutorial.org/wp-content/uploads/2019/08/mysql-join-left-join.png" alt="mysql join - left join"></h3>
<p>对于左边的一行，如果右边的行都不满足条件，依然会创建出新行，只不过新行中，原来的右边的行的字段的对应值为NULL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    c.customerNumber, </span><br><span class="line">    c.customerName, </span><br><span class="line">    o.orderNumber, </span><br><span class="line">    o.status</span><br><span class="line">FROM</span><br><span class="line">    customers c</span><br><span class="line">LEFT JOIN orders o </span><br><span class="line">    ON c.customerNumber = o.customerNumber</span><br><span class="line">WHERE</span><br><span class="line">    orderNumber IS NULL;</span><br></pre></td></tr></table></figure>
<h3 id="RIGHT-JOIN"><a class="header-anchor" href="#RIGHT-JOIN"></a>RIGHT JOIN</h3>
<p>从右边的行中选择，将右边的每一行与左边的所有行匹配。 如果左边的所有行都不满足条件，那么依然创建出新行，新行中左边行的字段值为NULL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column_list </span><br><span class="line">FROM table_1 </span><br><span class="line">RIGHT JOIN table_2 ON join_condition;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://www.mysqltutorial.org/wp-content/uploads/2019/08/mysql-join-right-join.png" alt="mysql join - right join"></p>
<h3 id="CROSS-JOIN"><a class="header-anchor" href="#CROSS-JOIN"></a>CROSS JOIN</h3>
<p>没有查询条件，产生笛卡尔积</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT select_list</span><br><span class="line">FROM table_1</span><br><span class="line">CROSS JOIN table_2;</span><br></pre></td></tr></table></figure>
<h3 id="Self-Join"><a class="header-anchor" href="#Self-Join"></a>Self Join</h3>
<p>一个表和自己做join, 因为同一次查询中不能重复引用同一张表，因此必须定义别名</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    CONCAT(m.lastName, &#x27;, &#x27;, m.firstName) AS Manager,</span><br><span class="line">    CONCAT(e.lastName, &#x27;, &#x27;, e.firstName) AS &#x27;Direct report&#x27;</span><br><span class="line">FROM</span><br><span class="line">    employees e</span><br><span class="line">INNER JOIN employees m ON </span><br><span class="line">    m.employeeNumber = e.reportsTo</span><br><span class="line">ORDER BY </span><br><span class="line">    Manager;</span><br></pre></td></tr></table></figure>
<h2 id="GROUP-BY"><a class="header-anchor" href="#GROUP-BY"></a>GROUP BY</h2>
<p><img data-src="https://www.mysqltutorial.org/wp-content/uploads/2021/07/MySQL-Group-By.svg" alt="MySQL GROUP BY"></p>
<p>The <code>GROUP BY</code> clause <strong>returns one row for each group</strong>.</p>
<p>可以和聚合函数结合。 不结合聚合函数的<code>GROUP BY</code>和<code>SELECT DISTINCT</code>是类似的</p>
<p>MYSQL8.0后不会对<code>GROUP BY</code>的结果集进行排序</p>
<p>The <code>GROUP BY</code> clause is often used with an aggregate function to perform calculations and return a single value for each subgroup.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    status, </span><br><span class="line">    SUM(quantityOrdered * priceEach) AS amount</span><br><span class="line">FROM</span><br><span class="line">    orders</span><br><span class="line">INNER JOIN orderdetails </span><br><span class="line">    USING (orderNumber)</span><br><span class="line">GROUP BY </span><br><span class="line">    status;</span><br></pre></td></tr></table></figure>
<p>可以按多个字段<code>group by</code>，用逗号分隔:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    gender, university,</span><br><span class="line">    <span class="built_in">count</span>(device_id) <span class="keyword">as</span> user_num,</span><br><span class="line">    <span class="built_in">avg</span>(active_days_within_30) <span class="keyword">as</span> avg_active_days,</span><br><span class="line">    <span class="built_in">avg</span>(question_cnt) <span class="keyword">as</span> avg_question_cnt</span><br><span class="line"><span class="keyword">from</span> user_profile</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> gender, university # 多个字段</span><br></pre></td></tr></table></figure>
<h2 id="HAVING"><a class="header-anchor" href="#HAVING"></a>HAVING</h2>
<p><img data-src="https://www.mysqltutorial.org/wp-content/uploads/2021/07/MySQL-Having.svg" alt="MySQL Having"></p>
<p>The <code>HAVING</code> clause is often used with the <code>GROUP BY</code> clause to filter groups based on a specified condition. If you omit the <code>GROUP BY</code> clause, the <code>HAVING</code> clause behaves like the <code>WHERE</code> clause.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    select_list</span><br><span class="line">FROM </span><br><span class="line">    table_name</span><br><span class="line">WHERE </span><br><span class="line">    search_condition</span><br><span class="line">GROUP BY </span><br><span class="line">    group_by_expression</span><br><span class="line">HAVING </span><br><span class="line">    group_condition;</span><br></pre></td></tr></table></figure>
<h2 id="ROLLUP"><a class="header-anchor" href="#ROLLUP"></a>ROLLUP</h2>
<h2 id="Subquery"><a class="header-anchor" href="#Subquery"></a>Subquery</h2>
<p>子查询必须用括号括起来， 可以作为表达式，用在任何需要表达式的地方</p>
<p>子查询如果用在<code>FROM</code>子句，则返回的结果集是一张临时表，被称为“导出表”， 导出表一定要有别名， 好作为一张表被引用</p>
<h3 id="WHERE-2"><a class="header-anchor" href="#WHERE-2"></a>WHERE</h3>
<p>子查询用在<code>WHERE</code>子句， 一般是和聚合函数的结合， 将聚合函数的结果返回， 然后在WHERE中进行<code>条件运算</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    customerNumber, </span><br><span class="line">    checkNumber, </span><br><span class="line">    amount</span><br><span class="line">FROM</span><br><span class="line">    payments</span><br><span class="line">WHERE</span><br><span class="line">    amount = (SELECT MAX(amount) FROM payments);</span><br></pre></td></tr></table></figure>
<h4 id="IN-NOT-IN"><a class="header-anchor" href="#IN-NOT-IN"></a>IN &amp; NOT IN</h4>
<p>如果子查询返回不止一个结果（即不止一行）， 那还可以用来作为<code>[NOT] IN</code>的参数，在<code>WHERE</code>子句中进行条件运算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    customerName</span><br><span class="line">FROM</span><br><span class="line">    customers</span><br><span class="line">WHERE</span><br><span class="line">    customerNumber NOT IN (SELECT DISTINCT</span><br><span class="line">            customerNumber</span><br><span class="line">        FROM</span><br><span class="line">            orders);</span><br></pre></td></tr></table></figure>
<h3 id="FROM"><a class="header-anchor" href="#FROM"></a>FROM</h3>
<p>子查询作为派生表，必须要有别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    MAX(items), </span><br><span class="line">    MIN(items), </span><br><span class="line">    FLOOR(AVG(items))</span><br><span class="line">FROM</span><br><span class="line">    (SELECT </span><br><span class="line">        orderNumber, COUNT(orderNumber) AS items</span><br><span class="line">    FROM</span><br><span class="line">        orderdetails</span><br><span class="line">    GROUP BY orderNumber) AS lineitems;</span><br></pre></td></tr></table></figure>
<h3 id="correlated-subquery"><a class="header-anchor" href="#correlated-subquery"></a>correlated subquery</h3>
<p>子查询可以是独立的，一共只执行一次；也可以是关联的， 外层查询的每处理一行就执行一次：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    productname, </span><br><span class="line">    buyprice</span><br><span class="line">FROM</span><br><span class="line">    products p1</span><br><span class="line">WHERE</span><br><span class="line">    buyprice &gt; (SELECT </span><br><span class="line">            AVG(buyprice)</span><br><span class="line">        FROM</span><br><span class="line">            products</span><br><span class="line">        WHERE</span><br><span class="line">            productline = p1.productline)</span><br></pre></td></tr></table></figure>
<h3 id="EXISTS-NOT-EXISTS"><a class="header-anchor" href="#EXISTS-NOT-EXISTS"></a>EXISTS &amp; NOT EXISTS</h3>
<p>子查询就是表达式，因此用在<code>[NOT] EXISTS</code> 子句中时，子查询只会返回一个BOOL值：</p>
<ul>
<li>只要子查询返回至少一行，就返回TRUE,否则返回FALSE</li>
<li>一般而言，作为<code>EXISTS</code>参数的子查询都是关联查询，这样才能和外层查询联系起来， 否则如果是独立查询， 每次计算时都返回固定的BOOL值，没什么意义</li>
</ul>
<p>The following query finds sales orders whose total values are greater than 60K.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    orderNumber, </span><br><span class="line">    SUM(priceEach * quantityOrdered) total</span><br><span class="line">FROM</span><br><span class="line">    orderdetails</span><br><span class="line">        INNER JOIN</span><br><span class="line">    orders USING (orderNumber)</span><br><span class="line">GROUP BY orderNumber</span><br><span class="line">HAVING SUM(priceEach * quantityOrdered) &gt; 60000;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://www.mysqltutorial.org/wp-content/uploads/2013/02/MySQL-subquery-exists.png" alt="img"></p>
<p>It returns 3 rows, meaning that there are three sales orders whose total values are greater than 60K.</p>
<p>You can use the query above as a correlated subquery to find customers who placed at least one sales order with the total value greater than 60K by using the <code>EXISTS</code> operator:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    customerNumber, </span><br><span class="line">    customerName</span><br><span class="line">FROM</span><br><span class="line">    customers</span><br><span class="line">WHERE</span><br><span class="line">    EXISTS( SELECT </span><br><span class="line">            orderNumber, SUM(priceEach * quantityOrdered)</span><br><span class="line">        FROM</span><br><span class="line">            orderdetails</span><br><span class="line">                INNER JOIN</span><br><span class="line">            orders USING (orderNumber)</span><br><span class="line">        WHERE</span><br><span class="line">            customerNumber = customers.customerNumber</span><br><span class="line">        GROUP BY orderNumber</span><br><span class="line">        HAVING SUM(priceEach * quantityOrdered) &gt; 60000);</span><br></pre></td></tr></table></figure>
<h2 id="Derived-Tables"><a class="header-anchor" href="#Derived-Tables"></a>Derived Tables</h2>
<p>派生表就是用在<code>SELECT</code>子句的子查询， 该子查询返回一张表（属于临时表）， 并一定具有别名以被引用</p>
<h3 id="例子"><a class="header-anchor" href="#例子"></a>例子</h3>
<p>Suppose you have to classify the customers who bought products in 2003 into 3 groups: <code>platinum</code>, <code>gold</code>, and <code>silver</code>. And you need to know the number of customers in each group with the following conditions:</p>
<ul>
<li>Platinum customers who have orders with the volume greater than 100K.</li>
<li>Gold customers who have orders with the volume between 10K and 100K.</li>
<li>Silver customers who have orders with the volume less than 10K.</li>
</ul>
<p>To form this query, you first need to put each customer into the respective group using <code>CASE</code> expression and <code>GROUP BY</code> clause as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    customerNumber,</span><br><span class="line">    ROUND(SUM(quantityOrdered * priceEach)) sales,</span><br><span class="line">    (CASE</span><br><span class="line">        WHEN SUM(quantityOrdered * priceEach) &lt; 10000 THEN &#x27;Silver&#x27;</span><br><span class="line">        WHEN SUM(quantityOrdered * priceEach) BETWEEN 10000 AND 100000 THEN &#x27;Gold&#x27;</span><br><span class="line">        WHEN SUM(quantityOrdered * priceEach) &gt; 100000 THEN &#x27;Platinum&#x27;</span><br><span class="line">    END) customerGroup</span><br><span class="line">FROM</span><br><span class="line">    orderdetails</span><br><span class="line">        INNER JOIN</span><br><span class="line">    orders USING (orderNumber)</span><br><span class="line">WHERE</span><br><span class="line">    YEAR(shippedDate) = 2003</span><br><span class="line">GROUP BY customerNumber;</span><br></pre></td></tr></table></figure>
<p>The following is the output of the query:</p>
<p>Then, you can use this query as the derived table and perform grouping as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    customerGroup, </span><br><span class="line">    COUNT(cg.customerGroup) AS groupCount</span><br><span class="line">FROM</span><br><span class="line">    (SELECT </span><br><span class="line">        customerNumber,</span><br><span class="line">            ROUND(SUM(quantityOrdered * priceEach)) sales,</span><br><span class="line">            (CASE</span><br><span class="line">                WHEN SUM(quantityOrdered * priceEach) &lt; 10000 THEN &#x27;Silver&#x27;</span><br><span class="line">                WHEN SUM(quantityOrdered * priceEach) BETWEEN 10000 AND 100000 THEN &#x27;Gold&#x27;</span><br><span class="line">                WHEN SUM(quantityOrdered * priceEach) &gt; 100000 THEN &#x27;Platinum&#x27;</span><br><span class="line">            END) customerGroup</span><br><span class="line">    FROM</span><br><span class="line">        orderdetails</span><br><span class="line">    INNER JOIN orders USING (orderNumber)</span><br><span class="line">    WHERE</span><br><span class="line">        YEAR(shippedDate) = 2003</span><br><span class="line">    GROUP BY customerNumber) cg</span><br><span class="line">GROUP BY cg.customerGroup;    </span><br></pre></td></tr></table></figure>
<p>The query returns the customer groups and the number of customers in each.</p>
<h2 id="EXISTS"><a class="header-anchor" href="#EXISTS"></a>EXISTS</h2>
<p>The <code>EXISTS</code> operator is a Boolean operator that returns either true or false. The <code>EXISTS</code> operator is often used to test for the existence of rows returned by the <a href="https://www.mysqltutorial.org/mysql-subquery/">subquery</a>.</p>
<p>The following illustrates the basic syntax of the <code>EXISTS</code> operator:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    select_list</span><br><span class="line">FROM</span><br><span class="line">    a_table</span><br><span class="line">WHERE</span><br><span class="line">    [NOT] EXISTS(subquery);Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>If the subquery returns at least one row, the <code>EXISTS</code> operator returns true, otherwise, it returns false.</p>
<p>In addition, the <code>EXISTS</code> operator terminates further processing immediately once it finds a matching row, which can help improve the performance of the query.</p>
<p>The <code>NOT</code> operator negates the <code>EXISTS</code> operator. In other words, the <code>NOT EXISTS</code> returns true if the subquery returns no row, otherwise it returns false.</p>
<p>Note that you can use <code>SELECT *</code>, <code>SELECT column</code>, <code>SELECT a_constant</code>, or anything in the subquery. The results are the same because MySQL ignores the select list appeared in the <code>SELECT</code> clause.</p>
<h2 id="UNION"><a class="header-anchor" href="#UNION"></a>UNION</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column_list</span><br><span class="line">UNION [DISTINCT | ALL]</span><br><span class="line">SELECT column_list</span><br><span class="line">UNION [DISTINCT | ALL]</span><br><span class="line">SELECT column_list</span><br></pre></td></tr></table></figure>
<p><code>UNION</code>的参数也是一张表（由<code>SELECT</code>子句产生），但不是派生表，因此不需要别名</p>
<p><code>UNION</code>将两张表垂直地并起来， 而<code>JOIN</code>将两张表水平地并起来：</p>
<p><img data-src="https://www.mysqltutorial.org/wp-content/uploads/2009/12/MySQL-UNION-vs-JOIN.png" alt="MySQL UNION vs JOIN"></p>
<p>要将多张表<code>UNION</code>起来，作为<code>UNION</code>主语的SELECT和宾语的SELECT子句的对应字段的数量和顺序必须相同， 类型也必须相容</p>
<p>比如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    firstName, # 最终结果集的字段名，使用的是<span class="keyword">UNION</span>主语的<span class="keyword">SELECT</span>子句的字段名</span><br><span class="line">    lastName</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line"><span class="keyword">UNION</span> </span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    contactFirstName, # 字段名不同无所谓，但是类型，顺序，数量必须相同</span><br><span class="line">    contactLastName</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    customers;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>UNION</code>默认是<code>UNION DISTINCT</code>； 要保留重复的行，需要使用<code>UNION ALL</code></p>
</li>
<li>
<p><code>UNION</code>后产生的大表的字段名用的是<code>UNION</code>主语的<code>SELECT</code>的字段名</p>
</li>
<li>
<p>使用<code>ORDER BY</code>对产生的大表的行进行排序</p>
<ul>
<li>注意， UNION宾语的那张子表里不需要排序</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    concat(firstName,&#x27; &#x27;,lastName) fullname</span><br><span class="line">FROM</span><br><span class="line">    employees </span><br><span class="line">UNION SELECT </span><br><span class="line">    concat(contactFirstName,&#x27; &#x27;,contactLastName)</span><br><span class="line">FROM</span><br><span class="line">    customers</span><br><span class="line">ORDER BY fullname;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="MINUS"><a class="header-anchor" href="#MINUS"></a>MINUS</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT select_list1 </span><br><span class="line">FROM table_name1</span><br><span class="line">MINUS </span><br><span class="line">SELECT select_list2 </span><br><span class="line">FROM table_name2;</span><br></pre></td></tr></table></figure>
<p>Unfortunately, MySQL does not support <code>MINUS</code> operator. However, you can use <a href="https://www.mysqltutorial.org/mysql-join/">join</a> to emulate it.</p>
<p>To emulate the <code>MINUS</code> of two queries, you use the following syntax:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    select_list</span><br><span class="line">FROM </span><br><span class="line">    table1</span><br><span class="line">LEFT JOIN table2 </span><br><span class="line">    ON join_predicate</span><br><span class="line">WHERE </span><br><span class="line">    table2.column_name IS NULL; </span><br></pre></td></tr></table></figure>
<h2 id="INSERT"><a class="header-anchor" href="#INSERT"></a>INSERT</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span>(c1,c2,...)</span><br><span class="line"><span class="keyword">VALUES</span> (v1,v2,...);</span><br></pre></td></tr></table></figure>
<ul>
<li>The number of columns and values must be the same. In addition, the positions of columns must be corresponding with the positions of their values</li>
</ul>
<p>To <a href="https://www.mysqltutorial.org/mysql-insert-multiple-rows/">insert multiple rows</a> into a table using a single <code>INSERT</code> statement, you use the following syntax:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">table</span>(c1,c2,...)</span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">   (v11,v12,...),</span><br><span class="line">   (v21,v22,...),</span><br><span class="line">    ...</span><br><span class="line">   (vnn,vn2,...);</span><br></pre></td></tr></table></figure>
<h3 id="insert-using-default-value"><a class="header-anchor" href="#insert-using-default-value"></a>insert using default value</h3>
<p>If you want to insert a default value into a column, you have two ways:</p>
<ul>
<li>Ignore both the column name and value in the <code>INSERT</code> statement.</li>
<li>Specify the column name in the <code>INSERT INTO</code> clause and use the <code>DEFAULT</code> keyword in the <code>VALUES</code> clause.</li>
</ul>
<p>The following example demonstrates the second way:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO tasks(title,priority)</span><br><span class="line">VALUES(&#x27;Understanding DEFAULT keyword in INSERT statement&#x27;,DEFAULT);Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>In this example, we specified the <code>priority</code> column and the  <code>DEFAULT</code> keyword.</p>
<p>Because the default value for the column <code>priority</code> is 3 as declared in the table definition:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">priority TINYINT NOT NULL DEFAULT 3Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>MySQL uses the number 3 to insert into the <code>priority</code> column.</p>
<h3 id="Inserting-dates"><a class="header-anchor" href="#Inserting-dates"></a>Inserting dates</h3>
<p>To insert a literal date value into a column, you use the following format:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;YYYY-MM-DD&#x27;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>In this format:</p>
<ul>
<li><code>YYYY</code> represents a four-digit year e.g., 2018.</li>
<li><code>MM</code> represents a two-digit month e.g., 01, 02, and 12.</li>
<li><code>DD</code> represents a two-digit day e.g., 01, 02, 30.</li>
</ul>
<p>The following statement inserts a new row to the <code>tasks</code> table with the start and due date values:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO tasks(title, start_date, due_date)</span><br><span class="line">VALUES(&#x27;Insert date into table&#x27;,&#x27;2018-01-09&#x27;,&#x27;2018-09-15&#x27;);Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>The following picture shows the contents of the <code>tasks</code> table after the insert:</p>
<p><img data-src="https://www.mysqltutorial.org/wp-content/uploads/2018/09/MySQL-INSERT-dates-into-table.png" alt="MySQL INSERT dates into table"></p>
<p>It is possible to use expressions in the <code>VALUES</code> clause. For example, the following statement adds a new task using the current date for start date and due date columns:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO tasks(title,start_date,due_date)</span><br><span class="line">VALUES(&#x27;Use current date for the task&#x27;,CURRENT_DATE(),CURRENT_DATE())Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>In this example, we used the <code>CURRENT_DATE()</code> function as the values for the <code>start_date</code> and <code>due_date</code> columns. Note that the <code>CURRENT_DATE()</code> function is a <a href="https://www.mysqltutorial.org/mysql-date-functions/">date function</a> that returns the current system date.</p>
<h2 id="Insert-Into-Select"><a class="header-anchor" href="#Insert-Into-Select"></a>Insert Into Select</h2>
<p>In the previous tutorial, you learned how to insert one or more rows into a table using the <code>INSERT</code> statement with a list of column values specified in the <code>VALUES</code> clause.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO table_name(c1,c2,...)</span><br><span class="line">VALUES(v1,v2,..);Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>Besides using row values in the <code>VALUES</code> clause, you can use the result of a <code>SELECT</code> statement as the data source for the <code>INSERT</code> statement.</p>
<p>The following illustrates the syntax of the <code>INSERT INTO SELECT</code> statement:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO table_name(column_list)</span><br><span class="line">SELECT </span><br><span class="line">   select_list </span><br><span class="line">FROM </span><br><span class="line">   another_table</span><br><span class="line">WHERE</span><br><span class="line">   condition;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>In this syntax, instead of using the <code>VALUES</code> clause, you can use a <code>SELECT</code> statement. The <code>SELECT</code> statement can retrieve data from one or more tables.</p>
<p>The <code>INSERT INTO SELECT</code> statement is very useful when you want to copy data from other tables to a table or to summary data from multiple tables into a table.</p>
<h2 id="UPDATE"><a class="header-anchor" href="#UPDATE"></a>UPDATE</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE salary</span><br><span class="line">SET</span><br><span class="line">    sex = CASE sex</span><br><span class="line">        WHEN &#x27;m&#x27; THEN &#x27;f&#x27;</span><br><span class="line">        ELSE &#x27;m&#x27;</span><br><span class="line">    END;</span><br></pre></td></tr></table></figure>
<h2 id="CASE"><a class="header-anchor" href="#CASE"></a>CASE</h2>
<p><code>CASE</code>返回一个字段值</p>
<p>case和when的参数字段都不要加别名， 别名要加在整个case子句后面，也就是<code>END</code>后面</p>
<h3 id="Simple-CASE-expression"><a class="header-anchor" href="#Simple-CASE-expression"></a>Simple CASE expression</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CASE case_value</span><br><span class="line">   WHEN when_value1 THEN statements</span><br><span class="line">   WHEN when_value2 THEN statements</span><br><span class="line">   ...</span><br><span class="line">   [ELSE else-statements]</span><br><span class="line">END CASE;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>如果没有任何一个<code>WHEN</code>子句被匹配，则进入<code>ELSE</code>子句。 <code>ELSE</code>子句是可选的， 如果省略了<code>ELSE</code>子句，则不匹配任何when时，直接返回<code>NULL</code></li>
</ul>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    first_name,</span><br><span class="line">    last_name,</span><br><span class="line">    CASE</span><br><span class="line">        WHEN salary &lt; 3000 THEN &#x27;Low&#x27;</span><br><span class="line">        WHEN salary &gt;= 3000 AND salary &lt;= 5000 THEN &#x27;Average&#x27;</span><br><span class="line">        WHEN salary &gt; 5000 THEN &#x27;High&#x27;</span><br><span class="line">    END evaluation</span><br><span class="line">FROM</span><br><span class="line">    employees;</span><br></pre></td></tr></table></figure>
<h3 id="Searched-CASE-expression"><a class="header-anchor" href="#Searched-CASE-expression"></a>Searched CASE expression</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CASE</span><br><span class="line">WHEN boolean_expression_1 THEN</span><br><span class="line">	result_1</span><br><span class="line">WHEN boolean_expression_2 THEN</span><br><span class="line">	result_2</span><br><span class="line">WHEN boolean_expression_3 THEN</span><br><span class="line">	result_3</span><br><span class="line">ELSE</span><br><span class="line">	else_result</span><br><span class="line">END;</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">    first_name,</span><br><span class="line">    last_name,</span><br><span class="line">    CASE</span><br><span class="line">        WHEN salary &lt; 3000 THEN &#x27;Low&#x27;</span><br><span class="line">        WHEN salary &gt;= 3000 AND salary &lt;= 5000 THEN &#x27;Average&#x27;</span><br><span class="line">        WHEN salary &gt; 5000 THEN &#x27;High&#x27;</span><br><span class="line">    END evaluation</span><br><span class="line">FROM</span><br><span class="line">    employees;</span><br></pre></td></tr></table></figure>
<h2 id="DERIVED-TABLE"><a class="header-anchor" href="#DERIVED-TABLE"></a>DERIVED TABLE</h2>
<p>派生表是从<a href="http://www.yiibai.com/mysql/select-statement-query-data.html">SELECT语句</a>返回的虚拟表。派生表类似于临时表，但是在<code>SELECT</code>语句中使用派生表比<a href="http://www.yiibai.com/mysql/temporary-table.html">临时表</a>简单得多，因为它不需要创建临时表的步骤。</p>
<p>**术语:***派生表*和<a href="http://www.yiibai.com/mysql/subquery.html">子查询</a>通常可互换使用。当<code>SELECT</code>语句的<code>FROM</code>子句中使用独立子查询时，我们将其称为派生表。</p>
<p>以下说明了使用派生表的查询：</p>
<p><img data-src="http://www.yiibai.com/uploads/images/201707/1907/437150722_21821.png" alt="img"></p>
<blockquote>
<p>请注意，独立子查询是一个子查询，可独立于包含该语句的执行语句。</p>
</blockquote>
<p>与子查询不同，派生表必须具有<a href="http://www.yiibai.com/mysql/alias.html">别名</a>，以便稍后在查询中引用其名称。 如果派生表没有别名，MySQL将发出以下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Every derived table must have its own alias.</span><br><span class="line">Shell</span><br></pre></td></tr></table></figure>
<p>以下说明了使用派生表的SQL语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    column_list</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">        column_list</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        table_1) derived_table_name;</span><br><span class="line"><span class="keyword">WHERE</span> derived_table_name.c1 <span class="operator">&gt;</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>aA12345678</p>
<h2 id="FUNCTION"><a class="header-anchor" href="#FUNCTION"></a>FUNCTION</h2>
<h3 id="ROUND"><a class="header-anchor" href="#ROUND"></a>ROUND</h3>
<h3 id="ROUND-X-D"><a class="header-anchor" href="#ROUND-X-D"></a>ROUND(X,D)</h3>
<p>​	此函数返回x舍入到最接近的整数。如果第二个参数，D有提供，则函数返回x四舍五入至第D位小数点。D必须是正数</p>
<h3 id="IFNULL"><a class="header-anchor" href="#IFNULL"></a>IFNULL</h3>
<p>MySQL <code>IFNULL</code>函数是MySQL控制流函数之一，它接受两个参数，如果不是<code>NULL</code>，则返回第一个参数。 否则，<code>IFNULL</code>函数返回第二个参数。</p>
<p>两个参数可以是文字值或表达式。</p>
<p>以下说明了<code>IFNULL</code>函数的语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">IFNULL(expression_1,expression_2);</span><br><span class="line"><span class="keyword">SQL</span></span><br></pre></td></tr></table></figure>
<p>如果<code>expression_1</code>不为<code>NULL</code>，则<code>IFNULL</code>函数返回<code>expression_1</code>; 否则返回<code>expression_2</code>的结果。</p>
<p><code>IFNULL</code>函数根据使用的上下文返回字符串或数字。</p>
<p>如果要返回基于<code>TRUE</code>或<code>FALSE</code>条件的值，而不是<code>NULL</code>，则应使用<a href="http://www.yiibai.com/mysql/if-function.html">IF函数</a>。</p>
<h1 id="Aggregate-Functions"><a class="header-anchor" href="#Aggregate-Functions"></a>Aggregate Functions</h1>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">function_name(<span class="keyword">DISTINCT</span> <span class="operator">|</span> <span class="keyword">ALL</span> expression)</span><br></pre></td></tr></table></figure>
<ul>
<li>use <code>DISTINCT</code> if you want to calculate based on distinct values or <code>ALL</code> in case you want to calculate all values including duplicates. The default is <code>ALL</code></li>
<li>The aggregate functions are often used with the <code>GROUP BY</code> clause to calculate an aggregate value for each group</li>
</ul>
<h2 id="AVG"><a class="header-anchor" href="#AVG"></a>AVG()</h2>
<p>The <code>AVG()</code> function calculates the average value of a set of values. It ignores NULL in the calculation.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">AVG</span>(expression)</span><br></pre></td></tr></table></figure>
<h2 id="COUNT"><a class="header-anchor" href="#COUNT"></a>COUNT()</h2>
<p>The <code>COUNT()</code> function returns the number of the value in a set.</p>
<p>For example, you can use the <code>COUNT()</code> function to get the number of products in the <code>products</code> table as shown in the following query:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> total</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    products;</span><br></pre></td></tr></table></figure>
<h2 id="SUM"><a class="header-anchor" href="#SUM"></a>SUM()</h2>
<p>The <code>SUM()</code> function returns the sum of values in a set. The <code>SUM()</code> function ignores <code>NULL</code>. If no matching row found, the <code>SUM()</code> function returns NULL.</p>
<p>To get the total order value of each product, you can use the <code>SUM()</code> function in conjunction with the <code>GROUP BY</code> clause as follows:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    productCode, </span><br><span class="line">    <span class="built_in">SUM</span>(priceEach <span class="operator">*</span> quantityOrdered) total</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    orderDetails</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> productCode</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> total <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
<h2 id="MAX"><a class="header-anchor" href="#MAX"></a>MAX()</h2>
<p>The <code>MAX()</code> function returns the maximum value in a set.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MAX(expression)Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>For example, you can use the <code>MAX()</code> function to get the highest buy price from the <code>products</code> table as shown in the following query:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT </span><br><span class="line">     MAX(buyPrice) highest_price</span><br><span class="line">FROM </span><br><span class="line">     products;</span><br></pre></td></tr></table></figure>
<h1 id="CONSTRAINTS"><a class="header-anchor" href="#CONSTRAINTS"></a>CONSTRAINTS</h1>
<h2 id="Primary-Key"><a class="header-anchor" href="#Primary-Key"></a>Primary Key</h2>
<p>When you define a primary key for a table, MySQL automatically <a href="https://www.mysqltutorial.org/mysql-index/mysql-create-index/">creates an index</a> called <code>PRIMARY</code></p>
<h3 id="1-Define-a-PRIMARY-KEY-constraint-in-CREATE-TABLE"><a class="header-anchor" href="#1-Define-a-PRIMARY-KEY-constraint-in-CREATE-TABLE"></a>1) Define a <code>PRIMARY KEY</code> constraint in <code>CREATE TABLE</code></h3>
<p>Typically, you define the primary key for a table in the <code>CREATE TABLE</code> statement.</p>
<p>If the primary key has one column, you can use the <code>PRIMARY KEY</code> constraint as a column constraint:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_name(</span><br><span class="line">    primary_key_column datatype PRIMARY KEY,</span><br><span class="line">    ...</span><br><span class="line">);Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>When the primary key has more than one column, you must use the <code>PRIMARY KEY</code> constraint as a table constraint.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_name(</span><br><span class="line">    primary_key_column1 datatype,</span><br><span class="line">    primary_key_column2 datatype,</span><br><span class="line">    ...,</span><br><span class="line">    PRIMARY KEY(column_list)</span><br><span class="line">);Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>In this syntax, you separate columns in the <code>column_list</code> by commas (,).</p>
<p>The <code>PRIMARY KEY</code> table constraint can be used when the primary key has one column:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_name ( </span><br><span class="line">    primary_key_column datatype, </span><br><span class="line">    ... ,</span><br><span class="line">    PRIMARY KEY(primary_key_column)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="Foreign-Key"><a class="header-anchor" href="#Foreign-Key"></a>Foreign Key</h2>
<p>A foreign key is a column or group of columns in a table that links to a column or group of columns in another table. The foreign key places constraints on data in the related tables, which allows MySQL to maintain referential integrity.</p>
<p>Once a foreign key constraint is in place, the foreign key columns from the child table must have the corresponding row in the parent key columns of the parent table or values in these foreign key column must be <code>NULL</code> (see the <code>SET NULL</code> action example below).</p>
<h3 id="Self-referencing-foreign-key"><a class="header-anchor" href="#Self-referencing-foreign-key"></a>Self-referencing foreign key</h3>
<p>Sometimes, the child and parent tables may refer to the same table. In this case, the foreign key references back to the primary key within the same table.</p>
<p>See the following <code>employees</code> table from the <a href="https://www.mysqltutorial.org/mysql-sample-database.aspx">sample database</a>.</p>
<p><img data-src="https://www.mysqltutorial.org/wp-content/uploads/2019/08/employees.png" alt="img"></p>
<p>The <code>reportTo</code> column is a foreign key that refers to the <code>employeeNumber</code> column which is the primary key of the <code>employees</code> table.</p>
<p>This relationship allows the <code>employees</code> table to store the reporting structure between employees and managers. Each employee reports to zero or one employee and an employee can have zero or many subordinates.</p>
<p>The foreign key on the column <code>reportTo</code> is known as a <em>recursive</em> or <em>self-referencing</em> foreign key.</p>
<h2 id="MySQL-FOREIGN-KEY-syntax"><a class="header-anchor" href="#MySQL-FOREIGN-KEY-syntax"></a>MySQL <code>FOREIGN KEY</code> syntax</h2>
<p>Here is the basic syntax of defining a foreign key constraint in the <code>CREATE TABLE</code> or <code>ALTER TABLE</code> statement:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[CONSTRAINT constraint_name]</span><br><span class="line">FOREIGN KEY [foreign_key_name] (column_name, ...)</span><br><span class="line">REFERENCES parent_table(colunm_name,...)</span><br><span class="line">[ON DELETE reference_option]</span><br><span class="line">[ON UPDATE reference_option]Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>In this syntax:</p>
<p>First, specify the name of foreign key constraint that you want to create after the <code>CONSTRAINT</code> keyword. If you omit the constraint name, MySQL automatically generates a name for the foreign key constraint.</p>
<p>Second, specify a list of comma-separated foreign key columns after the <code>FOREIGN KEY</code> keywords. The foreign key name is also optional and is generated automatically if you skip it.</p>
<p>Third, specify the parent table followed by a list of comma-separated columns to which the foreign key columns reference.</p>
<p>Finally, specify how foreign key maintains the referential integrity between the child and parent tables by using the <code>ON DELETE</code> and <code>ON UPDATE</code> clauses. The <code>reference_option</code> determines action which MySQL will take when values in the parent key columns are deleted (<code>ON DELETE</code>) or updated (<code>ON UPDATE</code>).</p>
<p>MySQL has five reference options: <code>CASCADE</code>, <code>SET NULL</code>, <code>NO ACTION</code>, <code>RESTRICT</code>, and <code>SET DEFAULT</code>.</p>
<ul>
<li><code>CASCADE</code>: if a row from the parent table is deleted or updated, the values of the matching rows in the child table automatically deleted or updated.</li>
<li><code>SET NULL</code>: if a row from the parent table is deleted or updated, the values of the foreign key column (or columns) in the child table are set to <code>NULL</code>.</li>
<li><code>RESTRICT</code>: if a row from the parent table has a matching row in the child table, MySQL rejects deleting or updating rows in the parent table.</li>
<li><code>NO ACTION</code>: is the same as <code>RESTRICT</code>.</li>
<li><code>SET DEFAULT</code>: is recognized by the MySQL parser. However, this action is rejected by both InnoDB and NDB tables.</li>
</ul>
<p>In fact, MySQL fully supports three actions: <code>RESTRICT</code>, <code>CASCADE</code> and <code>SET NULL</code>.</p>
<p>If you don’t specify the <code>ON DELETE</code> and <code>ON UPDATE</code> clause, the default action is <code>RESTRICT</code>.</p>
<h2 id="MySQL-FOREIGN-KEY-examples"><a class="header-anchor" href="#MySQL-FOREIGN-KEY-examples"></a>MySQL <code>FOREIGN KEY</code> examples</h2>
<p>Let’s <a href="https://www.mysqltutorial.org/mysql-create-database/">create a new database</a> called <code>fkdemo</code> for the demonstration.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE fkdemo;</span><br><span class="line"></span><br><span class="line">USE fkdemo;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<h3 id="RESTRICT-NO-ACTION-actions"><a class="header-anchor" href="#RESTRICT-NO-ACTION-actions"></a><code>RESTRICT</code> &amp; <code>NO ACTION</code> actions</h3>
<p>Inside the <code>fkdemo</code> database, create two tables <code>categories</code> and <code>products</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE categories(</span><br><span class="line">    categoryId INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    categoryName VARCHAR(100) NOT NULL</span><br><span class="line">) ENGINE=INNODB;</span><br><span class="line"></span><br><span class="line">CREATE TABLE products(</span><br><span class="line">    productId INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    productName varchar(100) not null,</span><br><span class="line">    categoryId INT,</span><br><span class="line">    CONSTRAINT fk_category</span><br><span class="line">    FOREIGN KEY (categoryId) </span><br><span class="line">        REFERENCES categories(categoryId)</span><br><span class="line">) ENGINE=INNODB;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>The <code>categoryId</code> in the <code>products</code> table is the foreign key column that refers to the <code>categoryId</code> column in the <code>categories</code> table.</p>
<p>Because we don’t specify any <code>ON UPDATE</code> and <code>ON DELETE</code> clauses, the default action is <code>RESTRICT</code> for both update and delete operation.</p>
<p>The following steps illustrate the <code>RESTRICT</code> action.</p>
<p>\1) <a href="https://www.mysqltutorial.org/mysql-insert-multiple-rows/">Insert two rows</a> into the <code>categories</code> table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO categories(categoryName)</span><br><span class="line">VALUES</span><br><span class="line">    (&#x27;Smartphone&#x27;),</span><br><span class="line">    (&#x27;Smartwatch&#x27;);Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>\2) <a href="https://www.mysqltutorial.org/mysql-select-statement-query-data.aspx">Select</a> data from the <code>categories</code> table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM categories;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p><img data-src="https://www.mysqltutorial.org/wp-content/uploads/2019/08/MySQL-Foreign-Key-categories-table.png" alt="img"></p>
<p>\3) <a href="https://www.mysqltutorial.org/mysql-insert-statement.aspx">Insert a new row</a> into the <code>products</code> table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO products(productName, categoryId)</span><br><span class="line">VALUES(&#x27;iPhone&#x27;,1);Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>It works because the <code>categoryId</code> 1 exists in the <code>categories</code> table.</p>
<p>\4) Attempt to insert a new row into the <code>products</code> table with a <code>categoryId</code> value does not exist in the <code>categories</code> table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO products(productName, categoryId)</span><br><span class="line">VALUES(&#x27;iPad&#x27;,3);Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>MySQL issued the following error:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error Code: 1452. Cannot add or update a child row: a foreign key constraint fails (`fkdemo`.`products`, CONSTRAINT `fk_category` FOREIGN KEY (`categoryId`) REFERENCES `categories` (`categoryId`) ON DELETE RESTRICT ON UPDATE RESTRICT)Code language: JavaScript (javascript)</span><br></pre></td></tr></table></figure>
<p>\5) Update the value in the <code>categoryId</code> column in the <code>categories</code> table to <code>100</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE categories</span><br><span class="line">SET categoryId = 100</span><br><span class="line">WHERE categoryId = 1;</span><br><span class="line">Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>MySQL issued this error:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error Code: 1451. Cannot delete or update a parent row: a foreign key constraint fails (`fkdemo`.`products`, CONSTRAINT `fk_category` FOREIGN KEY (`categoryId`) REFERENCES `categories` (`categoryId`) ON DELETE RESTRICT ON UPDATE RESTRICT)Code language: JavaScript (javascript)</span><br></pre></td></tr></table></figure>
<p>Because of the <code>RESTRICT</code> option, you cannot delete or update <code>categoryId 1</code> since it is referenced by the <code>productId</code> <code>1</code> in the <code>products</code> table.</p>
<h3 id="CASCADE-action"><a class="header-anchor" href="#CASCADE-action"></a><code>CASCADE</code> action</h3>
<p>These steps illustrate how <code>ON UPDATE CASCADE</code> and <code>ON DELETE CASCADE</code> actions work.</p>
<p>\1) <a href="https://www.mysqltutorial.org/mysql-drop-table">Drop</a> the <code>products</code> table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE products;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>\2) Create the <code>products</code> table with the <code>ON UPDATE CASCADE</code> and <code>ON DELETE CASCADE</code> options for the foreign key:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE products(</span><br><span class="line">    productId INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    productName varchar(100) not null,</span><br><span class="line">    categoryId INT NOT NULL,</span><br><span class="line">    CONSTRAINT fk_category</span><br><span class="line">    FOREIGN KEY (categoryId) </span><br><span class="line">    REFERENCES categories(categoryId)</span><br><span class="line">        ON UPDATE CASCADE</span><br><span class="line">        ON DELETE CASCADE</span><br><span class="line">) ENGINE=INNODB;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>\3) Insert four rows into the <code>products</code> table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO products(productName, categoryId)</span><br><span class="line">VALUES</span><br><span class="line">    (&#x27;iPhone&#x27;, 1), </span><br><span class="line">    (&#x27;Galaxy Note&#x27;,1),</span><br><span class="line">    (&#x27;Apple Watch&#x27;,2),</span><br><span class="line">    (&#x27;Samsung Galary Watch&#x27;,2);</span><br><span class="line">Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>\4) Select data from the <code>products</code> table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM products;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p><img data-src="https://www.mysqltutorial.org/wp-content/uploads/2019/08/MySQL-Foreign-Key-products-table.png" alt="img"></p>
<p>\5) Update <code>categoryId</code> 1 to 100 in the <code>categories</code> table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE categories</span><br><span class="line">SET categoryId = 100</span><br><span class="line">WHERE categoryId = 1;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>\6) Verify the update:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM categories;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p><img data-src="https://www.mysqltutorial.org/wp-content/uploads/2019/08/MySQL-Foreign-Key-categories-table-cascade.png" alt="img"></p>
<p>\7) Get data from the <code>products</code> table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM products;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p><img data-src="https://www.mysqltutorial.org/wp-content/uploads/2019/08/MySQL-Foreign-Key-products-table-update-cascade-.png" alt="img"></p>
<p>As you can see, two rows with value <code>1</code> in the <code>categoryId</code> column of the <code>products</code> table were automatically updated to <code>100</code> because of the <code>ON UPDATE CASCADE</code> action.</p>
<p>\8) Delete <code>categoryId</code> 2 from the <code>categories</code> table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM categories</span><br><span class="line">WHERE categoryId = 2;</span><br><span class="line">Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>\9) Verify the deletion:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM categories;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p><img data-src="https://www.mysqltutorial.org/wp-content/uploads/2019/08/MySQL-Foreign-Key-categories-table-delete-cascade.png" alt="img"></p>
<p>\10) Check the <code>products</code> table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM products;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p><img data-src="https://www.mysqltutorial.org/wp-content/uploads/2019/08/MySQL-Foreign-Key-products-table-delete-cascade.png" alt="img"></p>
<p>All products with <code>categoryId</code> 2 from the <code>products</code> table were automatically deleted because of the <code>ON DELETE CASCADE</code> action.</p>
<h3 id="SET-NULL-action"><a class="header-anchor" href="#SET-NULL-action"></a><code>SET NULL</code> action</h3>
<p>These steps illustrate how the <code>ON UPDATE SET NULL</code> and <code>ON DELETE SET NULL</code> actions work.</p>
<p>\1) Drop both <code>categories</code> and <code>products</code> tables:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS categories;</span><br><span class="line">DROP TABLE IF EXISTS products;</span><br><span class="line">Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>\2) Create the <code>categories</code> and <code>products</code> tables:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE categories(</span><br><span class="line">    categoryId INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    categoryName VARCHAR(100) NOT NULL</span><br><span class="line">)ENGINE=INNODB;</span><br><span class="line"></span><br><span class="line">CREATE TABLE products(</span><br><span class="line">    productId INT AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    productName varchar(100) not null,</span><br><span class="line">    categoryId INT,</span><br><span class="line">    CONSTRAINT fk_category</span><br><span class="line">    FOREIGN KEY (categoryId) </span><br><span class="line">        REFERENCES categories(categoryId)</span><br><span class="line">        ON UPDATE SET NULL</span><br><span class="line">        ON DELETE SET NULL </span><br><span class="line">)ENGINE=INNODB;</span><br><span class="line">Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>The foreign key in the <code>products</code> table changed to <code>ON UPDATE SET NULL</code> and <code>ON DELETE SET NULL</code> options.</p>
<p>\3) Insert rows into the <code>categories</code> table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO categories(categoryName)</span><br><span class="line">VALUES</span><br><span class="line">    (&#x27;Smartphone&#x27;),</span><br><span class="line">    (&#x27;Smartwatch&#x27;);</span><br><span class="line">Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>\4) Insert rows into the <code>products</code> table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO products(productName, categoryId)</span><br><span class="line">VALUES</span><br><span class="line">    (&#x27;iPhone&#x27;, 1), </span><br><span class="line">    (&#x27;Galaxy Note&#x27;,1),</span><br><span class="line">    (&#x27;Apple Watch&#x27;,2),</span><br><span class="line">    (&#x27;Samsung Galary Watch&#x27;,2);</span><br><span class="line">Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>\5) Update <code>categoryId</code> from 1 to 100 in the <code>categories</code> table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE categories</span><br><span class="line">SET categoryId = 100</span><br><span class="line">WHERE categoryId = 1;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>\6) Verify the update:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM categories;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p><img data-src="https://www.mysqltutorial.org/wp-content/uploads/2019/08/MySQL-Foreign-Key-categories-table-set-null.png" alt="img"></p>
<p>\7) Select data from the <code>products</code> table:</p>
<p><img data-src="https://www.mysqltutorial.org/wp-content/uploads/2019/08/MySQL-Foreign-Key-products-table-set-null.png" alt="img"></p>
<p>The rows with the <code>categoryId</code> 1 in the <code>products</code> table were automatically set to <code>NULL</code> due to the <code>ON UPDATE SET NULL</code> action.</p>
<p>\8) Delete the <code>categoryId</code> 2 from the <code>categories</code> table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE FROM categories </span><br><span class="line">WHERE categoryId = 2;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>\9) Check the <code>products</code> table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM products;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p><img data-src="https://www.mysqltutorial.org/wp-content/uploads/2019/08/MySQL-Foreign-Key-products-table-on-delete-set-null.png" alt="img"></p>
<p>The values in the <code>categoryId</code> column of the rows with <code>categoryId</code> 2 in the <code>products</code> table were automatically set to <code>NULL</code> due to the <code>ON DELETE SET NULL</code> action.</p>
<h2 id="Drop-MySQL-foreign-key-constraints"><a class="header-anchor" href="#Drop-MySQL-foreign-key-constraints"></a>Drop MySQL foreign key constraints</h2>
<p>To drop a foreign key constraint, you use the <code>ALTER TABLE</code> statement:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE table_name </span><br><span class="line">DROP FOREIGN KEY constraint_name;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>In this syntax:</p>
<ul>
<li>First, specify the name of the table from which you want to drop the foreign key after the <code>ALTER TABLE</code> keywords.</li>
<li>Second, specify the constraint name after the <code>DROP FOREIGN KEY</code> keywords.</li>
</ul>
<p>Notice that <code>constraint_name</code> is the name of the foreign key constraint specified when you created or added the foreign key constraint to the table.</p>
<p>To obtain the generated constraint name of a table, you use the <code>SHOW CREATE TABLE</code> statement:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW CREATE TABLE table_name;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>For example, to see the foreign keys of the <code>products</code> table, you use the following statement:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW CREATE TABLE products;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>The following is the output of the statement:</p>
<p><img data-src="https://www.mysqltutorial.org/wp-content/uploads/2019/09/MySQL-Foreign-Key-drop-foreign-key-constraint.png" alt="img"></p>
<p>As you can see clearly from the output, the table <code>products</code> table has one foreign key constraint: <code>fk_category</code></p>
<p>And this statement drops the foreign key constraint of the <code>products</code> table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE products </span><br><span class="line">DROP FOREIGN KEY fk_category;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>To ensure that the foreign key constraint has been dropped, you can view the structure of the products table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW CREATE TABLE products;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p><img data-src="https://www.mysqltutorial.org/wp-content/uploads/2019/09/MySQL-Foreign-Key-after-drop-foreign-key-constraint.png" alt="MySQL Foreign Key - after drop foreign key constraint"></p>
<h2 id="Disabling-foreign-key-checks"><a class="header-anchor" href="#Disabling-foreign-key-checks"></a>Disabling foreign key checks</h2>
<p>Sometimes, it is very useful to disable foreign key checks e.g., when you <a href="https://www.mysqltutorial.org/import-csv-file-mysql-table/">import data from a CSV file into a table</a>. If you don’t disable foreign key checks, you have to load data into a proper order i.e., you have to load data into parent tables first and then child tables, which can be tedious. However, if you disable the foreign key checks, you can load data into tables in any order.</p>
<p>To disable foreign key checks, you use the following statement:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET foreign_key_checks = 0;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>And you can enable it by using the following statement:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET foreign_key_checks = 1;Code language: SQL (Structured Query Language) (sql)</span><br></pre></td></tr></table></figure>
<p>In this tutorial, you have learned about the MySQL foreign key and how to create a foreign key constraint with various reference options.</p>
<h1 id="DATA-TYPES"><a class="header-anchor" href="#DATA-TYPES"></a>DATA TYPES</h1>
<h1 id="GLOBALIZARION"><a class="header-anchor" href="#GLOBALIZARION"></a>GLOBALIZARION</h1>
<h1 id="IMPORT-EXPORT"><a class="header-anchor" href="#IMPORT-EXPORT"></a>IMPORT &amp; EXPORT</h1>
<h1 id="Retrieving-records"><a class="header-anchor" href="#Retrieving-records"></a>Retrieving records</h1>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>Neuroscience L3</title>
    <url>/2021/09/08/Neuroscience-L3/</url>
    <content><![CDATA[<ul>
<li>The action potential reflects changes in <strong>membrane permeability</strong> to specific ions.</li>
<li>The Voltage Clamp Method</li>
</ul>
<span id="more"></span>
<h1 id="The-Voltage-Clamp-Method"><a class="header-anchor" href="#The-Voltage-Clamp-Method"></a>The Voltage Clamp Method</h1>
<ul>
<li>
<p>设计原理: 根离子作跨膜移动时形成了跨膜离子电流，而通透性即离子通过膜的难易程度，其膜电阻的倒数，也就是膜电导。因此，膜对某种离子通透性增大时，实际上时膜电阻变小，即膜对该离子的电导加大。根据欧姆定律，即 $I=V/R=VG$，所以，只要固定膜两侧电位差时，测出的跨膜电流的变化，就可作为膜电导变化的度量，即可了解膜通透性的改变情况。</p>
</li>
<li>
<p>内向电流是钠电流; 外向电流是钾电流</p>
<ul>
<li>用药物可以抑制钠\钾电流</li>
</ul>
</li>
<li>
<p>$I_{ion} = g_{ion}(V_m-E_ion)$​</p>
<ul>
<li>$V_m$: 钳制电压</li>
<li>$E_ion$: 平衡电压</li>
<li>$I_{ion}$: 离子电流</li>
<li>$g_{ion}$: 膜电导</li>
<li><strong>去极化会提高膜电导!</strong></li>
</ul>
</li>
<li>
<p>不应期: 发生动作电位的过程中,刺激是不会被响应的</p>
<ul>
<li>钾通道打开,钠通道失活</li>
</ul>
</li>
</ul>
<h1 id="Long-Distance-Signaling-by-Means-of-Action-Potential"><a class="header-anchor" href="#Long-Distance-Signaling-by-Means-of-Action-Potential"></a>Long-Distance Signaling by Means of Action Potential</h1>
<p>动作电位的长距离传导</p>
<ul>
<li>
<p>去极化在局部打开钠通道,产生动作电位和内向电流, 内向电流沿着轴突被动扩散, 使轴突邻近区域也发生去极化.</p>
<ul>
<li>不应期会使膜电位重新极化, 保证传播方向(不能来回传播)</li>
</ul>
</li>
<li>
<p>髓鞘: 绝缘物质,把轴突分成一个一个节点, 髓鞘不是完全包裹的. 裸露处称为郎飞结(<em>Nodes of Ranvier</em>), 与外界进行离子交换,形成动作电位.</p>
<ul>
<li><strong>髓鞘使得传导速度增加</strong>.
<ul>
<li>髓鞘的存在使得节点间距离变大( 单位时间传的距离更长 ), 因此<strong>有髓纤维的动作电位传导速度更快</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Natural Science</category>
      </categories>
      <tags>
        <tag>Neuroscience</tag>
      </tags>
  </entry>
  <entry>
    <title>OS lab1</title>
    <url>/2021/10/20/OS%20lab1/</url>
    <content><![CDATA[<p>Outline：</p>
<ul>
<li>汇编问答</li>
<li>调用约束</li>
<li>汇编避坑</li>
</ul>
<p><a href="https://cee.github.io/NASM-Tutorial/">NASM tutorial</a></p>
<p><a href="http://www.bytekits.com/nasm/find-address-and-move.html">NASM教程</a></p>
<span id="more"></span>
<h1 id="汇编问答"><a class="header-anchor" href="#汇编问答"></a>汇编问答</h1>
<p>用于OS第一次作业</p>
<ol>
<li>
<p>请简述 80x86 系列的发展历史</p>
<ul>
<li>1978年6月,intel推出第一款16位微处理器8086,采用20位地址线</li>
<li>1982年发布80286,主频提高至12MHz</li>
<li>1985年发布80386,处理器变为32位,地址线扩展至32位</li>
<li>1989年发布80486,1993年发布80586并命名为奔腾</li>
</ul>
</li>
<li>
<p>说明小端和大端的区别,并说明 80x86 系列采用了哪种方式?</p>
<ul>
<li>小端存储：<strong>数据的高字节保存在内存的高地址中，而数据的低字节保存在内存的低地址中</strong></li>
<li>大端存储反之</li>
<li>80x86采用小端存储</li>
</ul>
</li>
<li>
<p>8086 有哪五类寄存器,请分别举例说明其作用?</p>
<ul>
<li>通用寄存器：
<ul>
<li>数据寄存器: AX，BX，CX，DX
<ul>
<li>AX (Accumulator)：累加寄存器，也称之为累加器；</li>
<li>BX (Base)：基地址寄存器；</li>
<li>CX (Count)：计数器寄存器；</li>
<li>DX (Data)：数据寄存器；</li>
</ul>
</li>
<li>指针寄存器:
<ul>
<li>SP (Stack Pointer)：堆栈指针寄存器；</li>
<li>BP (Base Pointer)：基指针寄存器；</li>
</ul>
</li>
<li>变址寄存器:
<ul>
<li>SI (Source Index)：源变址寄存器；</li>
<li>DI (Destination Index)：目的变址寄存器；</li>
</ul>
</li>
</ul>
</li>
<li>控制寄存器:
<ul>
<li>IP (Instruction Pointer)：指令指针寄存器；</li>
<li>FLAG：标志寄存器；</li>
</ul>
</li>
<li>段寄存器:
<ul>
<li>CS (Code Segment)：代码段寄存器；</li>
<li>DS (Data Segment)：数据段寄存器；</li>
<li>SS (Stack Segment)：堆栈段寄存器；</li>
<li>ES (Extra Segment)：附加段寄存器；</li>
</ul>
</li>
</ul>
</li>
<li>
<p>什么是寻址?立即寻址和直接寻址的区别是什么?</p>
<ul>
<li>找到操作数的地址(从而能够取出操作数）</li>
<li>区别：
<ul>
<li>立即寻址
<ul>
<li><code>MOV AX 1234H</code></li>
<li>直接给出了操作数,事实上没有“寻址”</li>
</ul>
</li>
<li>直接寻址
<ul>
<li><code>MOV AX [1234H]</code></li>
<li>直接给出了地址1234H,用[]符号取数</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>请举例说明寄存器间接寻址、寄存器相对寻址、基址加变址寻址、相对基址加变址寻址四种方式的<br>
区别</p>
<ul>
<li>
<p>寄存器间接寻址</p>
<p><code>MOV AX [BX]</code><br>
操作数有效地址在寄存器之中(SI、DI、BX、BP)</p>
</li>
<li>
<p>寄存器相对寻址<br>
• <code>MOV AX [SI+3]</code></p>
</li>
<li>
<p>基址加变址<br>
•<code> MOV AX [BX+DI]</code><br>
• 把一个基址寄存器(BX、BP)的内容,加上变址寄存器(SI、DI)的内容。</p>
</li>
<li>
<p>相对基址加变址<br>
•<code> MOV AX [3+BX+DI]</code></p>
</li>
</ul>
</li>
<li>
<p>请分别简述 MOV 指令和 LEA 指令的用法和作用?</p>
<ul>
<li>LEA：load effective address， 将一个内存地址直接赋给目的操作数
<ul>
<li><code>lea eax,[ebx+8]</code>就是将ebx+8这个值直接赋给eax，而不是把ebx+8处的内存地址里的数据赋给eax。</li>
</ul>
</li>
<li>MOV: 与LEA相反</li>
</ul>
</li>
<li>
<p>请说出主程序与子程序之间至少三种参数传递方式</p>
<ul>
<li>
<p>利用寄存器传递参数,就是把参数放在约定的寄存器中</p>
</li>
<li>
<p>利用约定的存储单元传递参数</p>
</li>
<li>
<p>利用堆栈传递参数</p>
</li>
</ul>
</li>
<li>
<p>如何处理输入和输出,代码中哪里体现出来?</p>
<ul>
<li>宏，系统调用</li>
</ul>
</li>
<li>
<p>有哪些段寄存器</p>
<ul>
<li>见上文</li>
</ul>
</li>
<li>
<p>通过什么寄存器保存前一次的运算结果,在代码中哪里体现出来。</p>
<ul>
<li>注释里写了</li>
</ul>
</li>
<li>
<p>解释 <code>boot.asm </code>文件中, <code>org 0700h</code>的作用</p>
<ul>
<li>告诉汇编器,当前这段代码会放在07c00h处。所以,如果之后遇到需要绝对寻址的指令,那么绝对地址就是07c00h加上相对地址。</li>
<li>在第一行加上<code>org 07c00h</code>只是让编译器从相对地址07c00h处开始编译第一条指令,相对地址被编译加载后就正好和绝对地址吻合</li>
</ul>
</li>
<li>
<p>boot.bin 应该放在软盘的哪一个扇区?为什么?</p>
<ul>
<li>first</li>
<li>开机,从ROM运行BIOS程序,BIOS程序检查软盘0面0磁道1扇区,如果扇区以<code>0xaa55</code>结束,则认定为引导扇区,将其<strong>512字节</strong>的数据加载到内存的<code>07c00</code>处,然后设置PC,跳到内存07c00处开始执行代码。</li>
</ul>
</li>
<li>
<p>loader 的作用有哪些?</p>
<ul>
<li>为了突破512字节的限制,我们引入另外一个重要的文件loader.asm,引导扇区只负责把loader加载入内存并把控制权交给他,这样将会灵活得多。</li>
<li>最终,由loader将内核kernel加载入内存,才开始了真正操作系统内核的运行。
<ul>
<li>跳入保护模式
<ul>
<li>最开始的x86处理器16位,寄存器用ax, bx等表示,称为实模式。后来扩<br>
充成32位,eax,ebx等,为了向前兼容,提出了保护模式</li>
<li>必须从实模式跳转到保护模式,才能访问1M以上的内存。</li>
</ul>
</li>
<li>启动内存分⻚</li>
<li>从kernel.bin中读取内核,并放入内存,然后跳转到内核所在的<br>
开始地址,运行内核
<ul>
<li>跟boot类似,使用汇编直接在软盘下搜索kernel.bin</li>
<li>但是,不能把整个kernel.bin放在内存,而是要以ELF文件的格式读取并<br>
提取代码。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>解释 NASM 语言中<code>[ ]</code>的作用</p>
<ul>
<li>解地址</li>
</ul>
</li>
<li>
<p>解释语句 times 510-($-$$) db 0 ,为什么是 510? $ 和 $$ 分别表示什么?</p>
<ul>
<li>填充剩下的空间，使得生成的二进制代码恰好为512字节（ dw是两个字节 ）</li>
<li>$表示当前行的偏移地址, $$表示当前段的起始偏移地址,</li>
</ul>
</li>
<li>
<p>解释配置文件<code> bochsrc</code> 文件中如下参数的含义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">megs:32</span><br><span class="line">display_library: sdl</span><br><span class="line">floppya: 1_44=a.img, status=inserted</span><br><span class="line">boot: floppy</span><br></pre></td></tr></table></figure>
<ul>
<li>megs:虚拟机内存大小 (MB)</li>
<li>display_library:bochs使用的GUI库,在Ubuntu下面是sdl</li>
<li>floppya:虚拟机外设,软盘为a.img文件</li>
<li>boot:虚拟机启动方式,从软盘启动</li>
</ul>
</li>
</ol>
<h1 id="调用约束"><a class="header-anchor" href="#调用约束"></a>调用约束</h1>
<p>64 位 Linux 写一个集成了 C 语言库的程序时，你必须遵循以下的调用约束条件:</p>
<ul>
<li>传递参数时，按照从左到右的顺序，将尽可能多的参数依次保存在寄存器中。存放位置的寄存器顺序是确定的：
<ul>
<li>对于整数和指针，<code>rdi</code>，<code>rsi</code>，<code>rdx</code>， <code>rcx</code>，<code>r8</code>，<code>r9</code>。</li>
<li>对于浮点数（float 和 double 类型），<code>xmm0</code>，<code>xmm1</code>，<code>xmm2</code>， <code>xmm3</code>，<code>xmm4</code>，<code>xmm5</code>，<code>xmm6</code>，<code>xmm7</code>。</li>
</ul>
</li>
<li>剩下的参数将按照从右到左的顺序压入栈中，并在调用之后 <em>由调用函数推出栈</em> 。</li>
<li>等所有的参数传入后，会生成调用指令。所以当被调用函数得到控制权后，返回地址会被保存在 <code>[rsp]</code> 中，第一个局部变量会被保存在 <code>[rsp+8]</code> 中，以此类推。</li>
<li><strong>栈指针 <code>rsp</code> 在调用前必须进行 16 字节对齐处理</strong> 。当然，调用的过程中只会把一个 8 bytes 的返回地址推入栈中，所以当函数得到控制权时，<code>rsp</code> 并没有对齐。你需要向栈中压入数据或者从 <code>rsp</code> 减去 8 来使之对齐。</li>
<li>调用函数需要保存如下的寄存器：<code>rbp</code>，<code>rbx</code>，<code>r12</code>，<code>r13</code>，<code>r14</code>，<code>r15</code>。其他的寄存器可以自由使用。</li>
<li>被调用函数也需要保存 XMCSR 的控制位和 x87 指令集的控制字，但是 x87 指令在 64 位系统上十分少见所以你不必担心这点。</li>
<li>整数返回值存放在 <code>rax</code> 或者 <code>rdx:rax</code> 中，浮点数返回值存放在 <code>xmm0</code> 或者 <code>xmm1:xmm0</code> 中。</li>
</ul>
<h2 id="Tips"><a class="header-anchor" href="#Tips"></a>Tips</h2>
<ul>
<li>
<p>栈是由高地址向低地址增长的.</p>
</li>
<li>
<p>传递参数时，按照从左到右的顺序，将尽可能多的<strong>参数依次保存在寄存器中</strong>。存放位置的寄存器顺序是确定的：</p>
<ul>
<li>对于整数和指针，<code>rdi</code>，<code>rsi</code>，<code>rdx</code>， <code>rcx</code>，<code>r8</code>，<code>r9</code>。</li>
<li>对于浮点数（float 和 double 类型），<code>xmm0</code>，<code>xmm1</code>，<code>xmm2</code>， <code>xmm3</code>，<code>xmm4</code>，<code>xmm5</code>，<code>xmm6</code>，<code>xmm7</code>。</li>
</ul>
</li>
<li>
<p><strong>剩下的参数将按照从右到左的顺序压入栈中</strong>，并在调用之后 <em>由调用函数推出栈</em> 。</p>
</li>
<li>
<p>等所有的参数传入后，会生成调用指令。所以当被调用函数得到控制权后，<strong>返回地址会被保存在 <code>[rsp]</code> 中</strong>，<strong>第一个局部变量会被保存在 <code>[rsp-8]</code> 中，以此类推</strong>。</p>
<ul>
<li>
<p>局部变量的入栈顺序：</p>
<ul>
<li>
<p>在没有溢出保护机制下的编译时，我们可以发现，所有的局部变量入栈的顺序（准确来说是系统为局部变量申请内存中栈空间的顺序）是正向的，即哪个变量先申明哪个变量就先得到空间， 也就是说，编译器给变量空间的申请是直接按照变量申请顺序执行的。</p>
</li>
<li>
<p>在有溢出保护机制下的编译时，情况有了顺序上的变化，对于每一种类型的变量来说，栈空间申请的顺序都与源代码中相反，即<strong>哪个变量在源代码中先出现则后申请空间</strong>；而对不同的变量来说，申请的顺序也不同，有例子可以看出，int型总是在char的buf型之后申请，不管源代码中的顺序如何（这应该来源于编译器在进行溢出保护时设下的规定）。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="汇编避坑"><a class="header-anchor" href="#汇编避坑"></a>汇编避坑</h1>
<ul>
<li>慎用宏定义，它内部无法跳转和定义标签，因此无法封装复杂逻辑 ; 同时，使用时要记住宏定义内部对寄存器的更改</li>
<li>可以<code>push rax</code>, 并使用<code>al</code>, 事实上你无法<code>push al</code>，PUSH 指令只对至少16位的寄存器使用</li>
</ul>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>OS Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>OS Basic</title>
    <url>/2021/10/06/OS-Basic/</url>
    <content><![CDATA[<p>My understanding of OS</p>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<ul>
<li>appearances can be deceiving.
<ul>
<li>The program that users interact with, usually called the <strong>shell</strong> when it is text based and the GUI when it uses icons, is actually not part of the operating system, although it uses the operating system to get its work done</li>
</ul>
</li>
</ul>
<h2 id="Main-Components"><a class="header-anchor" href="#Main-Components"></a>Main Components</h2>
<h3 id="Hardware"><a class="header-anchor" href="#Hardware"></a>Hardware</h3>
<p>The hardware consists of chips, boards, disks, a keyboard, a monitor, and similar physical objects.</p>
<h3 id="Software"><a class="header-anchor" href="#Software"></a>Software</h3>
<p>On top of the hardware is the software. Most computers have two modes of operation: <strong>kernel mode</strong> and <strong>user mode</strong>.</p>
<ul>
<li>OS runs on the bare hardware and provides the base for all the other software</li>
</ul>
<h4 id="kernel-mode"><a class="header-anchor" href="#kernel-mode"></a><strong>kernel mode</strong></h4>
<ul>
<li>the most fundamental piece of software, runs in <strong>kernel mode</strong> (also called supervisor mode). In this mode it has <u>complete access</u> to all the hardware and can execute any instruction the machine is capable of executing.</li>
</ul>
<h4 id="user-mode"><a class="header-anchor" href="#user-mode"></a>user mode</h4>
<ul>
<li>
<p>The rest of the software runs in <strong>user mode</strong>, in which <u>only a subset of the machine instructions is available</u>.</p>
<ul>
<li>In particular, those instructions that affect control of the machine or do I/O )Input/Output&quot; are forbidden to user-mode programs</li>
</ul>
</li>
<li>
<p>The user interface program, <strong>shell</strong> or <strong>GUI</strong>, is the <u>lowest level of user-mode software</u>, and allows the user to start other programs</p>
<p>(shell的概念详见<em>Shell Tools</em>)</p>
</li>
<li>
<p>user mode 和 kernel mode 的区别并不严格</p>
<ul>
<li>
<p>in embedded systems (which<br>
may not have kernel mode) or interpreted systems (such as Java-based systems that use interpretation, not hardware, to separate the components).</p>
</li>
<li>
<p>Also, in many systems there are programs that run in user mode but help the operating system or perform privileged functions</p>
</li>
<li>
<p>总之， Everything running in <strong>kernel mode</strong> is clearly part of the <strong>operating system</strong>, but some programs running outside it are arguably also part of it, or at least closely associated with it</p>
</li>
</ul>
</li>
</ul>
<h1 id="WHAT-IS-OPERATING-SYSTEM"><a class="header-anchor" href="#WHAT-IS-OPERATING-SYSTEM"></a>WHAT IS OPERATING SYSTEM</h1>
<h2 id="The-OS-as-an-Extended-Machine"><a class="header-anchor" href="#The-OS-as-an-Extended-Machine"></a>The OS as an Extended Machine</h2>
<ul>
<li><strong>top-down view: operating system as primarily providing abstractions to application programs</strong>
<ul>
<li>The architecture (instruction set, memory organization, I/O, and bus structure) of most computers at the machine-language level is primitive and awkward to program, especially for input/output.即： 计算机的底层是丑陋和复杂的， 需要<strong>抽象</strong>出中间层才能方便使用</li>
</ul>
</li>
<li><strong>This abstraction is the key to managing all this complexity（圣经！）</strong>. Good abstractions turn a nearly impossible task into two manageable ones. The first is defining and implementing the abstractions. The second is using these abstractions to solve the problem at hand</li>
<li><strong>The job of the operating system is to create good abstractions and then implement and manage the abstract objects thus created</strong></li>
<li>OS的真正用户是APP(和APP开发者)， 而end users使用的是UI（shell or GUI）提供的抽象。
<ul>
<li>While the abstractions at the user interface may be <strong>similar</strong> to the ones provided by the operating system, this is not always the case.
<ul>
<li>如Windows Desktop和command prompt采用了Windows提供的相同的system abstractions。 Linux的Gnome、KDE和X Window System看起来差别很大，实际上也采用了相同的system abstractions</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="The-OS-as-a-Resource-Manager"><a class="header-anchor" href="#The-OS-as-a-Resource-Manager"></a>The OS as a Resource Manager</h2>
<ul>
<li>
<p><strong>bottom-up view: the operating system is there to manage all the pieces of a complex system</strong></p>
</li>
<li>
<p>Resource management includes <strong>multiplexing</strong> (sharing) resources in two different ways: in time and in space</p>
</li>
</ul>
<h1 id="COMPUTER-HARDWARE"><a class="header-anchor" href="#COMPUTER-HARDWARE"></a>COMPUTER HARDWARE</h1>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Basic/Computer%20Hardware%20overview.png" alt="Computer Hardware overview"></p>
<p>注意，这里只介绍现代计算机的基本结构，没有包括GPU和VRAM等组件， 也没有包括对各种存储介质的介绍( RAM, ROM, Disk)。</p>
<p>GPU的内容(不包括VRAM)详见拙著<em>GPU</em></p>
<p>存储介质(包括Cache)和VRAM的内容详见拙著<em>Computer Storage</em></p>
<h2 id="Top-view-Example"><a class="header-anchor" href="#Top-view-Example"></a>Top-view Example</h2>
<p>假设计算机中存在<code>hello</code>程序:<code>echoh hello,world</code></p>
<p>我们以在shell上输入<code>./hello</code>来执行<code>hello</code>程序为例， 在硬件视角下，程序执行步骤如下:</p>
<ol>
<li>
<p>shell程序持续运行，等待用户输入，用户输入通过I/O bus传输到I/O bridge, 再传输到<em>system bus</em>, 经过<em>bus interface</em>传输到<em>reister file</em>. 然后沿上图的方向传输到内存</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Basic/Top-view%20Example%201.png" alt="Top-view Example 1"></p>
</li>
<li>
<p>当用户输入Enter键，shell知道我们停止了输入，就把<code>hello</code>程序从磁盘中读到内存:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Basic/Top-view%20Example%202.png" alt="Top-view Example 2"></p>
</li>
<li>
<p>最后，内存中的数据被读到CPU， CPU执行该程序, 将结果输出到显示设备</p>
<ul>
<li>这一步(数据从内存传输到CPU)详见下文<em>Accessing Main Memory</em></li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Basic/Top-view%20Example%203.png" alt="Top-view Example 3"></p>
</li>
</ol>
<p>我们也可以看到，硬盘到主存的data-movement是很频繁也很耗时间的，因此诞生出了Cache，这是CPU内的存储结构，采用SRAM。</p>
<h2 id="Buses"><a class="header-anchor" href="#Buses"></a>Buses</h2>
<ul>
<li>
<p><em>bus</em>: 总线。 就是一组传输地址、数据和控制信号的电线。 总线传输数据的基本单位是<em>word</em>， 在不同的硬件实现上，<em>word</em>的大小也不同，通常是4或8 Byte</p>
<ul>
<li>基于不同的总线设计， 数据和地址可以共享总线，也可以使用不同总线。 不同设备也可以共享总线。 总线传递控制信号，来对事务进行同步。</li>
</ul>
</li>
<li>
<p>总线的类型：</p>
<ul>
<li><em>system bus</em></li>
<li><em>memory bus</em></li>
<li><em>I/O bus</em>： 被多个I/O设备共享</li>
</ul>
</li>
<li>
<p>original IBM PC最早使用了单总线架构,  为了更快的IO速度和CPU-to-memory traffic，额外的总线被引入。 形成了现代的x86系统</p>
</li>
<li>
<p>This system has many buses (e.g., cache, memory, PCIe, PCI, USB, SATA, and DMI), each with a different transfer rate and function. The operating system must be aware of all of them for configuration and management.</p>
</li>
<li>
<p>The main bus is the <strong>PCIe</strong>  bus.</p>
</li>
<li>
<p>the CPU talks to memory over a fast <strong>DDR3</strong> bus, to an external graphics device over PCIe and to all other devices via a <strong>hub</strong> over a <strong>DMI</strong> (Direct Media Interface) bus. The hub in turn connects all the other devices, using the Universal Serial Bus to talk to  USB devices, the SATA bus to interact with hard disks and DVD drives, and PCIe to transfer Ethernet frames.</p>
<ul>
<li>PCI接口的设备另外放在一个hub processor 内</li>
</ul>
</li>
<li>
<p>Moreover, each of the cores has a dedicated cache and a much larger cache that is shared between them. Each of these caches introduces another bus.<br>
每个core有一个专用cache，所有core共享一个更大的cache，每个cache拥有自己的总线</p>
</li>
<li>
<p>Intel 和 MS设计了<strong>plug and play</strong>系统，可以自动收集IO设备信息，集中分配中断优先级和I/O（设备的）寄存器地址</p>
<ul>
<li>在此之前，这些都要手动分配</li>
</ul>
</li>
</ul>
<h2 id="CPU"><a class="header-anchor" href="#CPU"></a>CPU</h2>
<h3 id="Components"><a class="header-anchor" href="#Components"></a>Components</h3>
<p>CPU是计算机指令的执行单元。 由四部分组成:</p>
<ol>
<li><em>program counter</em> (PC): 一个 <em>word-size storage (or register)</em>，也称为<strong>栈指针</strong>，永远指向当前正在执行的指令的地址</li>
<li><em>register file</em>: 一个small storage device, 由一组word-size registers组成，每个寄存器都有其独特的名字</li>
<li><em>arithmetic/logic unit</em> (ALU)： 用于计算</li>
<li><em>bus interface</em>：一组电路，用于CPU和主存之间的数据传输</li>
</ol>
<h3 id="Features"><a class="header-anchor" href="#Features"></a>Features</h3>
<ul>
<li>每个CPU都有自己特殊的指令集。ARM处理器不能执行x86程序</li>
<li>由于对内存的存取所花的时间比执行一条指令还要长，CPU内部会有寄存器。</li>
<li>许多寄存器对用户<strong>可见</strong>
<ul>
<li>PC</li>
<li>栈指针，指向内存中的栈顶。栈含有每个程序的帧。栈帧含有： 输入的参数、局部变量、没有保存进寄存器的临时变量</li>
<li>PSW(Program Status Word): 包含状态码位。 用户程序通常能读整个PSW，但仅仅只能写其中的一部分</li>
</ul>
</li>
<li>为了提供性能，CPU通常有流水线和超标量。
<ul>
<li>流水线会把底层的复杂度暴露给上层，令人头疼</li>
<li>超标量： 多个指令同时被取指和译指，然后放到一个Holding buffer里，每当一个执行单元空闲时，就去Holding buffer中找它能处理的指令。该设计的一个后果是：指令不一定按顺序执行。而执行结果能不能和顺序实现的CPU相同，取决于硬件。</li>
</ul>
</li>
<li>除了嵌入式系统中的少数，CPU都有 user mode和kernel mode. 当运行在kernel mode， CPU可以执行指令集提供的每一条指令和硬件提供的所有特性。 在
<ul>
<li>桌面机和服务器上，OS都运行在kernel mode.</li>
<li>在大部分嵌入式系统中，OS一部分运行在kernel mode, 剩余部分运行在 user mode</li>
<li>用户程序永远运行在 user mode，只能执行一小部分指令和一小部分硬件特性。  “设置PSW的mode bit以进入 kernel mode”也是被禁止的</li>
</ul>
</li>
<li>为了获得OS的服务，用户程序会发起system call,即陷入kernel并启动OS
<ul>
<li>the  TRAP  instruction switched from user mode to kernel mode and starts the OS.执行结束后，控制会返还到TRAP的下一条指令</li>
<li>计算机的trap不仅有用于执行system call的指令，还有别的</li>
</ul>
</li>
</ul>
<h3 id="CPU-Operations"><a class="header-anchor" href="#CPU-Operations"></a>CPU Operations</h3>
<p>basic cycle of CPU: 取指、译指、执行</p>
<h3 id="CPU-Instructions"><a class="header-anchor" href="#CPU-Instructions"></a>CPU Instructions</h3>
<p>抽象地说， CPU指令分为四种：</p>
<ul>
<li><em>Load:</em> 从主存中copy一个byte或word到一个寄存器里， 这会覆盖寄存器里该位置上之前的值</li>
<li><em>Store:</em> 从寄存器里copy一个byte或word到主存的某个位置，这会覆盖主存里该位置上之前的值</li>
<li><em>Operate:</em> 将两个寄存器里的值copy到ALO， 后者进行算数计算，并将结果存入一个寄存器，这会覆盖该寄存器里该位置上之前的值</li>
<li><em>Jump:</em> 该指令含有一个word， 记录了要跳转到的目标指令的位置。 CPU会copy该字段到PC，覆盖PC之前的值</li>
</ul>
<h3 id="Multithread-and-Multicore-Chips"><a class="header-anchor" href="#Multithread-and-Multicore-Chips"></a>Multithread and Multicore Chips</h3>
<ul>
<li>multithreading: 允许CPU拥有两个线程并且在<strong>纳秒</strong>级的时间里切换。 <strong>多线程并不是并行</strong>，因为同一时间还是只有一个程序在CPU上运行
<ul>
<li>如果一个程序要读取内存（花的时间比较长），那么多线程的CPU可以切换到另一个程序</li>
<li>多线程带来的问题是：每一个线程都会被OS视为独立的CPU. 考虑一个双CPU的系统，每个CPU有两个线程。当有两个线程的任务时，OS可能会把它们全部交给同一个CPU上的两个线程，而这是很浪费的</li>
</ul>
</li>
<li>许多CPU芯片上还有多个(几十个)processors or <strong>cores</strong>  使用多核芯片需要一个多处理器的OS</li>
<li>GPU拥有上千个core, 适用于许多并行执行的小规模计算， 在顺序计算上并不突出。</li>
</ul>
<h3 id="Instruction-Set"><a class="header-anchor" href="#Instruction-Set"></a>Instruction Set</h3>
<p>CPU指令集可以分为CISC和RISC两类.</p>
<p>x86和arm的那些历史就不讲了. 这里理清一些概念.</p>
<ul>
<li>
<p>arm和x86: 简单来说, arm属于RISC, 功耗较低. x86属于CISC, 性能较高.</p>
</li>
<li>
<p>x86, x86_64, amd64: x86是32位的. x86_64是x86的64位版本, amd64==x86_64</p>
</li>
<li>
<p>arm, arm64和aarh64: arm是32位的. arm64是arm的64位版本, 并且arm64和aarh64合并了, 所以arm64 == aarh64.</p>
<ul>
<li>M1的指令集就是arm64. 低功耗的移动设备和嵌入式设备基本也都是arm架构.</li>
</ul>
</li>
<li>
<p>桌面级CPU基本都是64位的, 要么是x86_64, 要么是arm64. 所以我们常说的x86, arm其实指代的是它们的64位版本, 即x86_64和arm64.</p>
</li>
</ul>
<h2 id="Main-Memeory"><a class="header-anchor" href="#Main-Memeory"></a>Main Memeory</h2>
<ul>
<li>
<p><em>main memory</em>（OR <em>system memory</em> ）：主存。 在冯诺依曼架构中，处理器( 包括ALU和Controller )与存储器进行数据交互。</p>
<ul>
<li>我们通常就用RAM来指主存。 更精确地说，主存的材质是DRAM</li>
<li>此外还存在显存(VRAM)， 宽泛地讲， 和CPU交互的是主存，和GPU交互的就是显存</li>
<li><strong>在通常的语境下，我们说的RAM都是主存，也就是和CPU交互的DRAM</strong></li>
</ul>
</li>
</ul>
<h3 id="Accessing-Main-Memory"><a class="header-anchor" href="#Accessing-Main-Memory"></a>Accessing Main Memory</h3>
<p>数据通过bus( 总线， 见下文 )在CPU和主存间传输。 每一次CPU和主存间的数据传输就是一次<em>bus transaction</em></p>
<p>整个过程的I/O类型是DMA(见下文<em>I/O Devices -&gt; I/O -&gt; DMA</em>)</p>
<ul>
<li>A <em>read transaction</em> transfers data from the main memory to the CPU.</li>
<li>A <em>write transaction</em> transfers data from the CPU to the main memory.</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Basic/Example%20bus%20structure%20that%20connects%20the%20CPU%20and%20main%20memory.png" alt="Example bus structure that connects the CPU and main memory"></p>
<p>上图展示了CPU和主存进行数据传输的基本模型。 包含了三个组件：CPU、 I/O bridge（ 是一个芯片组， 包含了<em>memory controller</em>）、主存。 CPU和 I/O bridge通过<em>system bus</em>连接，  I/O bridge和主存通过<em>memory bus</em>连接。 当然如同之前介绍的,  I/O bridge还会把<em>system bus</em>和<em>memory bus</em>连接到<em>I/O bus</em>，它由I/O设备共享</p>
<p>考虑如下指令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movq A,%rax # 将地址A指向的内容赋值给rax</span><br></pre></td></tr></table></figure>
<p>CPU的<em>bus interface</em>会开始一个<em>write transaction</em>, 步骤为:</p>
<ol>
<li>
<p>CPU将地址A放到系统总线上，  I/O bridge将该signal传递给<em>memory bus</em></p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Basic/Accessing%20Main%20Memory%20step%201.png" alt="Accessing Main Memory step 1"></p>
</li>
<li>
<p>主存感知到<em>memory bus</em>上的信号(地址A)， 从DRAM中读取A处的数据x，写进<em>memory bus</em>，  I/O bridge会将其传递给<em>system bus</em></p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Basic/Accessing%20Main%20Memory%20step%202.png" alt="Accessing Main Memory step 2"></p>
</li>
<li>
<p>主存感知到<em>memory bus</em>上的信号( 数据x )，从<em>memory bus</em>读数据，然后copy到%rax</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Basic/Accessing%20Main%20Memory%20step%203.png" alt="Accessing Main Memory step 3"></p>
</li>
</ol>
<h2 id="Disk"><a class="header-anchor" href="#Disk"></a>Disk</h2>
<ul>
<li>Disk：称为硬盘，是非易失的外部存储设备。</li>
</ul>
<h2 id="I-O-Devices"><a class="header-anchor" href="#I-O-Devices"></a>I/O Devices</h2>
<p>I/O设备的介绍详见拙著<em>Computer I/O Device</em></p>
<h3 id="I-O"><a class="header-anchor" href="#I-O"></a>I/O</h3>
<ul>
<li>
<p>IO有三种类型：</p>
<ol>
<li><strong>busy waiting</strong>：用户程序发起system call,  kernel将其转换为procedure call交给相应的driver. Driver启动IO设备并且对设备轮询。IO结束后，driver将数据（如果有的话）返回，OS将控制返还给调用者
<ul>
<li>占用了CPU的全部时间</li>
</ul>
</li>
<li><strong>interrupt</strong>：driver开启设备，要求它在完成时发出中断. At that point the driver returns. The operating system then blocks the caller if need be and looks for other work to do.</li>
<li><strong>DMA</strong>(Direct Memory Access): DMA芯片可以在避免CPU持续干预的情况下控制内存和一些controller之间的数据传输
<ul>
<li>CPU启动DMA芯片，告诉它how many bytes to transfer, the device and memory addresses involved, and the direction, and lets it go. 当DMA芯片工作结束时，会发出中断（和方法二一样）</li>
</ul>
</li>
</ol>
</li>
<li>
<p>中断的过程：</p>
<ol>
<li>driver通过向contoller的device  registers写入来告诉controller要做什么。controller然后便启动device</li>
<li>When the controller has finished reading or writing the number of bytes it has been told to transfer, it signals the interrupt controller chip <strong>using certain bus lines</strong></li>
<li>如果中断控制器准备好接受新中断（ 如果它在处理一个更高优先级的中断，就不会ready ）,it asserts a pin on the CPU chip telling it</li>
<li>中断控制器把<strong>device number</strong>放在总线上，CPU就可以read并且知道是哪个设备刚刚finished
<ul>
<li>一旦CPU决定接受中断, PC和PSW会被压栈，CPU会切换到内核态</li>
<li>The device number may be used as an index into part of memory to find the address of the interrupt handler for this device. This part of memory is called the <strong>interrupt vector</strong></li>
<li>一旦 interrupt handler启动，它就将PC和PSW出栈并保存，并向设备询问。当所有的handeller结束后，就退回到终端前执行的程序</li>
</ul>
</li>
</ol>
</li>
<li>
<p>中断可能会在其它interrupt handler运行时发生。 因此CPU可以disable interrupts and then reenable them later。当CPU disable interrupts时，设备依然持续发出中断信号，但CPU不会接受。</p>
</li>
<li>
<p>由于多个中断可能同时发生，每个设备都有（通常是静态的）中断优先级来决定在disable结束后，哪个中断先被接受。</p>
</li>
</ul>
<h2 id="Booting-the-Computer"><a class="header-anchor" href="#Booting-the-Computer"></a>Booting the Computer</h2>
<p>计算机启动时，<strong>首先加载</strong>硬件驱动程序，硬件驱动程序有BIOS和UEFI， 这里简要介绍BIOS, 详见拙著<em>Linux Hardware Basic</em></p>
<p>BIOS对应的磁盘分区格式是MBR</p>
<ul>
<li><strong>BIOS</strong>（Basic Input Output System）：PC主板上的一个程序
<ul>
<li>The BIOS contains low-level I/O software, including procedures to read the keyboard, write to the screen, and do disk I/O, among other things.</li>
<li>Nowadays, it is held in a <strong>flash RAM</strong>, which is nonvolatile but which can be updated by the operating system when bugs are found in the BIOS.</li>
</ul>
</li>
</ul>
<ol>
<li>计算机开机时，BIOS启动，它会检查RAM和键盘等基础外设的连接和响应情况
<ul>
<li>It starts out by scanning the PCIe and PCI buses to detect all the devices attached to them.</li>
<li>如果设备和上次启动时不一样，新的设备将被配置</li>
</ul>
</li>
<li>通过CMOS中的启动设备列表，BIOS找到启动设备，后者的第一个扇区将被读进内存并执行，检查该扇区是否是MBR扇区，是的话会加载其中的boot loader</li>
<li>一段boot loader程序被从MBR扇区读入， boot loader是OS提供的，因此能够读取OS的核心文件</li>
<li>boot loader读取核心文件</li>
<li>核心文件会加载OS</li>
<li>OS问询BIOS，得到配置信息，对每个设备，OS检查自己是否有对应驱动，若没有，则通知用户去下载。</li>
<li>当所有设备驱动都齐备时，OS将它们加载进kernel. 并初始化分区表，启动各种程序....(如登陆程序和GUI)</li>
</ol>
<h1 id="The-OS-Zoo"><a class="header-anchor" href="#The-OS-Zoo"></a>The OS Zoo</h1>
<h2 id="Mainframe-Operating-Systems"><a class="header-anchor" href="#Mainframe-Operating-Systems"></a>Mainframe Operating Systems</h2>
<ul>
<li>mainframes：体型巨大，高I\O capacity</li>
<li>用途：
<ul>
<li>batch： 不需要用户在场交互，即可处理程序</li>
<li>transaction processing,</li>
<li>and timesharing</li>
</ul>
</li>
<li><strong>Timesharing</strong> systems，允许许多远程用户同时登陆一台主机处理任务, such as querying a big database.</li>
<li>正被UNIX的各种变体（如LINUX）取代</li>
</ul>
<h2 id="Server-Operating-Systems"><a class="header-anchor" href="#Server-Operating-Systems"></a>Server Operating Systems</h2>
<ul>
<li>
<p>They serve multiple users at once over a network and allow the users to share hardware and software resources.</p>
</li>
<li>
<p>Typical server operating systems are Solaris, FreeBSD, Linux and Windows Server 201x.</p>
</li>
</ul>
<h2 id="Multiprocessor-Operating-Systems"><a class="header-anchor" href="#Multiprocessor-Operating-Systems"></a>Multiprocessor Operating Systems</h2>
<ul>
<li>把多个CPU连接称为一个系统。属于server OS的变体，增加了通信、连通性等功能</li>
<li>Many popular operating systems, including Windows and Linux, run on multiprocessors</li>
</ul>
<h2 id="Personal-Computer-Operating-Systems"><a class="header-anchor" href="#Personal-Computer-Operating-Systems"></a>Personal Computer Operating Systems</h2>
<ul>
<li>无需多言</li>
</ul>
<h2 id="Handheld-Computer-Operating-Systems"><a class="header-anchor" href="#Handheld-Computer-Operating-Systems"></a>Handheld Computer Operating Systems</h2>
<ul>
<li>A handheld computer，又称<strong>PDA</strong>(Personal Digital Assistant),是一个可以边手持边操作的小型计算机</li>
<li>Google’s Android and Apple’s iOS</li>
</ul>
<h2 id="Embedded-Operating-Systems"><a class="header-anchor" href="#Embedded-Operating-Systems"></a>Embedded Operating Systems</h2>
<ul>
<li>和Handheld Computer OS区别在于：嵌入式OS中无法自主安装软件 ---- 软件都写在ROM里，这也意味着不需要提供app之间的保护</li>
</ul>
<h2 id="Sensor-Node-Operating-Systems"><a class="header-anchor" href="#Sensor-Node-Operating-Systems"></a>Sensor-Node Operating Systems</h2>
<ul>
<li>
<p>每个节点都是个小型计算机，通过一个基站进行无线通信</p>
</li>
<li>
<p>Each sensor node is a real computer, with a CPU, RAM, ROM, and one or more environmental sensors. It runs a small, but real operating system, usually one that is event driven, responding to external events or making measurements periodically based on an internal clock.</p>
</li>
<li>
<p>所有程序写在ROM里</p>
</li>
</ul>
<h2 id="Real-Time-Operating-Systems"><a class="header-anchor" href="#Real-Time-Operating-Systems"></a>Real-Time Operating Systems</h2>
<ul>
<li>
<p><strong>hard real-time system</strong>: actions absolutely <strong>must</strong> occur at a certain moment (or within a certain range)</p>
<ul>
<li>如工业、航空、军事</li>
</ul>
</li>
<li>
<p><strong>soft real-time system</strong>: ddl没那么死</p>
</li>
<li>
<p>The categories of handhelds, embedded systems, and real-time systems overlap considerably</p>
</li>
</ul>
<h2 id="Smart-Card-Operating-Systems"><a class="header-anchor" href="#Smart-Card-Operating-Systems"></a>Smart Card Operating Systems</h2>
<ul>
<li>没想到吧，smart card也有一个OS!
<ul>
<li>有小型CPU和ROM</li>
</ul>
</li>
<li>Some smart cards are Java oriented</li>
</ul>
<h1 id="OS-Concepts"><a class="header-anchor" href="#OS-Concepts"></a>OS Concepts</h1>
<h2 id="Processes"><a class="header-anchor" href="#Processes"></a>Processes</h2>
<ul>
<li>A process is fundamentally a container that holds all the information needed to run a program</li>
<li><strong>address space</strong>: 进程可操作的一块内存。 包括了可执行的程序、程序的数据和栈指针</li>
<li><strong>process table</strong>: an array of structures, one for each process currently in existence
<ul>
<li>大多数OS都有，储存了每个进程的所有信息,不只是地址空间</li>
</ul>
</li>
<li><strong>core image</strong>:    address space of  a ( suspended ) process</li>
<li><strong>ID</strong>:
<ul>
<li><strong>UID</strong>: each  person authorized to used a system is assigned a UID by the system administrator</li>
<li>每个进程都拥有其创建者的UID， 子进程的UID就是父进程的UID</li>
<li><strong>GID</strong>： users can be members of groups</li>
</ul>
</li>
</ul>
<h2 id="Address-Space"><a class="header-anchor" href="#Address-Space"></a>Address Space</h2>
<ul>
<li>每个进程都拥有其可操作的地址空间，而<strong>address space</strong>是和物理内存<strong>解耦</strong>（借助虚拟内存）的</li>
<li>虽然避免内存中的进程互相干扰是硬件需要提供的机制，但该机制在软件层需要由OS控制</li>
</ul>
<h2 id="File"><a class="header-anchor" href="#File"></a>File</h2>
<ul>
<li>
<p><strong>File &amp; Directory</strong>: OS把底层千奇百怪的存储设备抽象成文件系统，并使用<strong>directory</strong>概念来管理</p>
<ul>
<li>对文件和目录的许多操作都需要<code>syscall</code></li>
</ul>
</li>
<li>
<p><strong>pathname</strong>: 文件在 directory hierarchy 中有<strong>pathname</strong>, 后者最顶层是<strong>root directory</strong>, 由<code>/</code>表示。 从根目录开始的路径叫做<strong>绝对路径</strong>。 而每个进程又有自己当时的<strong>working directory</strong>， 其中的路径名不需要从根目录开始,例如对于绝对路径<code>C:\Docs\sub\javac</code>, 当前工作目录是<code>C:\Docs</code></p>
<ul>
<li>绝对路径：<code>C:\Docs\sub\javac</code></li>
<li>相对路径：<code>sub\javac</code> ; 也可写成：<code>.\sub\javac</code></li>
<li><code>.</code>表示当前目录，<code>..</code>表示上级目录</li>
</ul>
</li>
<li>
<p><strong>file descriptor</strong>在文件被读写前，它首先要被打开，此时需要检验许可，若许可成功，则系统返回一个<strong>file descriptor</strong>用于后续操作； 否则返回一个error code</p>
</li>
<li>
<p><strong>mount</strong>: 将CD-ROM上的file system挂载到root file system.</p>
<ul>
<li>此时原有节点的数据不能被访问，因为这个节点已经被挂载了。由于挂在节点一般是空节点，这一般不会造成影响</li>
</ul>
</li>
<li>
<p><strong>special file</strong>：OS将I/O设备抽象为special file ，使得它可以用处理普通文件的<code>syscall</code>来处理这类设备，special file分两种，都挂载到<code>/dev</code>目录下</p>
<ul>
<li>block special file：用于由随机寻址块组成的设备 .i.e 磁盘</li>
<li>character special file: 用于输入\输出字符流的设备 .i.e 键盘</li>
</ul>
</li>
<li>
<p><strong>pipe</strong>： 用于进程间通信的伪文件，通过它，UNIX进程间通信就像是普通的文件读写</p>
<ul>
<li>pipe的实现很像文件的实现，一个进程要想知道其输出文件是一个真实的文件还是一个pipe，只能使用<code>syscall</code></li>
</ul>
</li>
</ul>
<h2 id="Protection"><a class="header-anchor" href="#Protection"></a>Protection</h2>
<ul>
<li>
<p>protection code: each file in UNIX are protected by assigning each one a 9-bit binary protection code, which consists of three 3-bit fields, one for the owner, one for the owner's group, one for everyone else.</p>
<ul>
<li>例如<code>rwxr-x--x</code>意味着拥有者可读可写可执行， 群组可读可执行，其他人可执行</li>
</ul>
</li>
</ul>
<h1 id="Ontogeny-Recapitulates-Phylogeny"><a class="header-anchor" href="#Ontogeny-Recapitulates-Phylogeny"></a>Ontogeny Recapitulates Phylogeny</h1>
<ul>
<li>达尔文有个理论，“胚胎的成长会浮现其种族的演化”，这在计算机领域是很形象的。一个思想可能会因为技术创新而变得火热，然后湮没无闻，可思想本身是不死的。因此新技术的发展，其内核几乎总是一些“老旧”的思想。一项技术的发展所要经历的不同阶段，几乎也总是计算机发展史上的不同思想的重现</li>
<li>因此，不要歧视所谓的“obsolete idea”</li>
</ul>
<h1 id="System-Calls"><a class="header-anchor" href="#System-Calls"></a>System Calls</h1>
<ul>
<li>
<p>对<code>syscall</code>的调用一般是高度依赖于机器的，并且是汇编语言，但会提供一个<strong>procedure library</strong>来允许在高级语言中调用<code>syscall</code></p>
</li>
<li>
<p>每个单CPU的计算机同时只能处理一条指令， 如果一个user mode的程序需要system service， 它就会执行a trap instruction 来将控制权交给OS, 后者完成任务后再将控制权交还</p>
<ul>
<li>因此<code>syscall</code>和普通的procedure call没什么区别，只是前者会陷入kernel mode</li>
</ul>
</li>
<li>
<p>System call执行步骤：</p>
<ol>
<li>参数压栈</li>
<li>参数压栈</li>
<li>参数压栈</li>
<li>使用普通的procedure call调用library procedure,</li>
<li>library procedure将 system-call number放入OS所期望的地方（通常是个寄存器）</li>
<li>library procedure执行<code>TRAP</code>, 陷入kernel mode。 并从内核层的固定地址开始执行
<ul>
<li>TRAP指令和 procedure call的区别在于能陷入内核层，并且TRAP不能跳转到任意位置，只能跳转到固定位置，或者跳转到其参数中给定的位置</li>
</ul>
</li>
<li>内核层检查system-call number, 并分发给对应的handler</li>
<li>handler执行</li>
<li>handler执行完毕后，控制<em>可能会</em>交还给user space的library procedure
<ul>
<li>system call也可以阻塞caller，比如在等待用户输入时。 此时OS会去执行其它进程</li>
</ul>
</li>
<li>library procedure以通常的procedure call返回的方式返回user program</li>
<li>user program像对待任何library procedure一样，清除栈顶</li>
</ol>
</li>
</ul>
<h2 id="System-Calls-Library-Functions"><a class="header-anchor" href="#System-Calls-Library-Functions"></a>System Calls &amp; Library Functions</h2>
<p>系统调用和库函数都以C函数的形式出现</p>
<p>系统调用：</p>
<ul>
<li>Linux内核的对外接口;</li>
<li>用户程序和内核之间唯一的接口;</li>
<li>提供最小接口</li>
</ul>
<p>库函数：</p>
<ul>
<li>依赖于系统调用; 提供较复杂功能
<ul>
<li>例：标准I/O库</li>
</ul>
</li>
</ul>
<h2 id="System-Calls-for-Process-Management"><a class="header-anchor" href="#System-Calls-for-Process-Management"></a>System Calls for Process Management</h2>
<ul>
<li>
<p><code>fork</code>是POSIX中唯一的创建新进程的方法，它会创建一个和父进程完全相同的子进程，并返回子进程在父进程中的<strong>PID</strong>( PID在子进程中为0 )</p>
</li>
<li>
<p>当一条指令被输入时。shell会fork出一个新的子进程，这个子进程必须执行这条用户指令，它首先会调用<code>exec</code> system call( 实际上该system call名字不一定叫<code>exec</code> )</p>
<ul>
<li><code>exec(command,parameters,0)</code></li>
<li>其参数分别为：要执行的文件名； 参数数组的指针； 环境数组的指针</li>
<li>执行<code>exec</code>会导致该子进程的整个<strong>core image</strong>被<code>exec</code>第一个参数（即文件名）所指向的文件所替换</li>
</ul>
</li>
<li>
<p>例子：执行<code>cp file1 file2</code></p>
<ol>
<li>
<p>shell <code>fork</code>出子进程,子进程执行<code>cp</code>这个文件，将源和目的文件的名字传给它</p>
<ul>
<li>程序就是文件，<code>cp</code>既是程序，当然也是个文件</li>
</ul>
</li>
<li>
<p><code>cp</code>的内容是:</p>
<p><code>main( argc, argv, envp )</code></p>
<ul>
<li><code>argc</code>: 参数数量，包括程序名在内，这里是3</li>
<li><code>argc</code>：参数名（都是字符串）指针. <code>argv[0]</code>指向string &quot;cp&quot;</li>
<li><code>envp</code>: 环境指针， 一个string的键值对数组，这里没有环境要传递，因此是0</li>
</ul>
</li>
</ol>
</li>
<li>
<p>UNIX进程在内存中分三段：</p>
<ul>
<li><strong>text segment</strong>: i.e., the program code</li>
<li><strong>data segment</strong>: i.e., the variables 向上增长</li>
<li><strong>stack segment</strong>： 向下增长</li>
</ul>
</li>
</ul>
<h2 id="System-Calls-for-Directory-Management"><a class="header-anchor" href="#System-Calls-for-Directory-Management"></a>System Calls for Directory Management</h2>
<ul>
<li><code>mkdir</code>, <code>rmdir</code>: create and remove empty directories</li>
<li><code>link</code>: allow the same file to appear under 2 or more names
<ul>
<li>UNIX系统有一个i-node组成的表，每个i-node记录了这个文件的一些信息， 而UNIX File都有一个File number，是i-node的索引。 一个directory就是一个（ i-number, ASCII name ）pair的集合. <code>link</code>做的就是创建一个新的directory,它只有一个pair，其ASCII name可能不同，但i-number 是已有的文件的</li>
</ul>
</li>
</ul>
<h2 id="Miscellaneous-System-Calls"><a class="header-anchor" href="#Miscellaneous-System-Calls"></a>Miscellaneous System Calls</h2>
<ul>
<li><code>chmod</code>: 改变文件的九位protection code</li>
<li><code>chdir</code>: 改变文件的工作目录</li>
<li><code>kill</code></li>
</ul>
<h2 id="The-Windows-Win32-API"><a class="header-anchor" href="#The-Windows-Win32-API"></a>The Windows Win32 API</h2>
<ul>
<li>UNIX的system call和library几乎是一一对应的， 但是Windows把它们解耦了，开发者们面对的是<strong>WIn32 API</strong></li>
<li><strong>WIn32 API</strong>极其庞大和复杂，因此很难区分哪个调用了system call哪个没有</li>
</ul>
<h1 id="OS-Structure"><a class="header-anchor" href="#OS-Structure"></a>OS Structure</h1>
<h2 id="Monolithic-Systems"><a class="header-anchor" href="#Monolithic-Systems"></a>Monolithic Systems</h2>
<ul>
<li>整个OS作为一个单一程序运行在kernel mode</li>
<li>OS是一个procedures的集合， 每一个procedure都可以自由调用其它任何procedure，完全没有信息隐藏</li>
<li>当计算机启动时，不仅OS会被加载， 许多OS还支持loadable extensions,比如I/O驱动和文件系统。 它们在UNIX中称为 share libraries, 在Windows中称为DLLs</li>
</ul>
<h2 id="Layered-Systems"><a class="header-anchor" href="#Layered-Systems"></a>Layered Systems</h2>
<ul>
<li>OS由层级结构组成，每一层使用下一层的服务</li>
<li>最早是THE system,由Dijkstra研发
<ul>
<li>Layered system只是个设计目标，由于每个层最终都链接到一起，实际上整个OS是一个单一的程序</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>Layer</th>
<th>Function</th>
</tr>
</thead>
<tbody>
<tr>
<td>5</td>
<td>The operator (用户操作进程 )</td>
</tr>
<tr>
<td>4</td>
<td>User programs</td>
</tr>
<tr>
<td>3</td>
<td>I/O management  3层以上不用处理IO细节</td>
</tr>
<tr>
<td>2</td>
<td>Operator-process communication</td>
</tr>
<tr>
<td>1</td>
<td>Memory management</td>
</tr>
<tr>
<td>0</td>
<td>processor allocation and multiprogramming</td>
</tr>
</tbody>
</table>
<ul>
<li>Layered system的理念后来在MULTICS体现。 后者是由一系列同心环组成，内环拥有更大的权限，外环若要使用内环的服务，需要系统调用</li>
</ul>
<h2 id="Microkernels"><a class="header-anchor" href="#Microkernels"></a>Microkernels</h2>
<ul>
<li>Layered system的设计者可以划分kernel-user的界限，传统的Layered system全部运行在kernel，而这是不必要的。microkernel的理念是将OS分离为不同模块，其中只有一个 --- 称作microkernel 运行在内核层，其余的运行在用户层，以实现高可靠性</li>
<li>除了OS X( based on Mach microkernel ), 通常的桌面OS都不用microkernel</li>
<li>著名的有塞班和MINIX 3</li>
<li>MINIX 3的结构：
<ul>
<li>内核层： system call handler和时钟的驱动（ 因为调度器经常要与时钟交互 ）</li>
<li>用户层（从下到上）：
<ol>
<li>Drivers：各种设备驱动，由于不在内核层，因此无法直接对I/O port sapce操作，也无法直接发起I/O commands,只能构造一个structure发给内核</li>
<li>servers：为上层提供各种服务，其中有个<strong>reincarnation server</strong> 工作是检查其它server和driver的工作情况，若不正常，就自动替换，不需要任何用户干预。</li>
<li>User programs</li>
</ol>
</li>
</ul>
</li>
<li>也可将微内核的理念看作  “<em>mechanism</em>和<em>policy</em>分离”。 mechanism指的是机器自动执行的那部分， policy指的是需要用户指定的那部分， 内核层只需要管理mechanism</li>
</ul>
<h2 id="Client-Server-Model"><a class="header-anchor" href="#Client-Server-Model"></a>Client-Server Model</h2>
<p>不解释了</p>
<h2 id="Virtual-Machines"><a class="header-anchor" href="#Virtual-Machines"></a>Virtual Machines</h2>
<h2 id="VM-370"><a class="header-anchor" href="#VM-370"></a>VM/370</h2>
<ul>
<li>将multiprogramming和extended machine with a more convenient interface解耦</li>
<li>使用VM monitor（又称为hypervisor），它运行在硬件上，向上提供虚拟机。</li>
<li>虚拟机提供的不是extened machine，而是<strong>硬件</strong>， 没有任何抽象
<ul>
<li>其实虚拟机是将机器硬件抽象成了虚拟硬件提供给宿主机，实现了物理硬件的虚拟化。但是虚拟机不会给宿主机提供任何抽象API，它提供的还是硬件资源（尽管是虚拟的）。</li>
<li>这部分详见“OS VMM”，我的另一篇文章</li>
</ul>
</li>
<li>由于每个虚拟机对应一块真实的硬件，所以每个虚拟机能运行独立的OS，比如OS/360, CMS( Conversational Monitor System )等</li>
<li>当一个CMS程序发起系统调用，系统会内陷到CMS( 而不是VM/370 ), 而CMS会发起普通的硬件指令调用， 这将会内陷到VM/370， 后者执行这些指令</li>
</ul>
<h2 id="Virtual-Machine-Rediscovered"><a class="header-anchor" href="#Virtual-Machine-Rediscovered"></a>Virtual Machine Rediscovered</h2>
<ul>
<li>虚拟化的前提是CPU支持虚拟化，而许多研究使得不支持虚拟化的CPU也能虚拟化（比如x86）</li>
<li>Bochs: 解释器，使得CPU“能够”虚拟化，很慢。 后来有许多改进，这类软件称为machine simulator</li>
<li>type2 hypervisor：建立在type1 hypervisor之上，即建立在一个宿主机OS之上。而type1 hypervisor建立在纯粹的硬件上</li>
</ul>
<h2 id="Exokernels"><a class="header-anchor" href="#Exokernels"></a>Exokernels</h2>
<ul>
<li>与传统的虚拟机不同的地方在于，exokernels为每个虚拟机分配资源，虚拟机知道自己被分配了多少资源。
<ul>
<li>这就避免了建立映射的损耗。传统的虚拟机都认为自己拥有整个硬件，因此得为它们建立映射层</li>
</ul>
</li>
</ul>
<h1 id="Summary"><a class="header-anchor" href="#Summary"></a>Summary</h1>
<p>计算机科学的发展日新月异，只有刻苦坚持，才能走在别人前面</p>
<p>refs：</p>
<ul>
<li><em>Modern  Operating Systems</em></li>
<li><em>Operating Systems Three Easy pieces</em></li>
<li><em>CSAPP</em></li>
</ul>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>OS Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>OLAP</title>
    <url>/2022/08/13/OLAP/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>OLAP Database</li>
<li>Columnar Database</li>
<li>ETL vs ELT</li>
</ul>
<span id="more"></span>
<h1 id="OLAP-Database"><a class="header-anchor" href="#OLAP-Database"></a>OLAP Database</h1>
<p>OLAP数据库是数据分析领域过去几十年内常用的数据仓库，近年来已经被列数据库逐步取代。</p>
<h2 id="OLTP-VS-OLAP"><a class="header-anchor" href="#OLTP-VS-OLAP"></a>OLTP VS OLAP</h2>
<ul>
<li>OLTP: using a database to run your business
<ul>
<li>对OLTP 数据库的查询形如: &quot;one Honda Civic by Jane Doe in the London branch on the 1st of January, 2020&quot;;</li>
</ul>
</li>
<li>OLAP: using a database to understand your business
<ul>
<li>对OLAP数据库的查询形如: &quot;give me the total sales of green Honda Civics in the UK for the past 6 months&quot;</li>
</ul>
</li>
</ul>
<p>可以看到，OLAP的查询比OLTP复杂的多。 关系型数据库可以胜任OLTP， 但是对于每个OLTP查询，都可能要进行大量连表，效率很低。 而在BI( Bussiness Intelligence )中, 有着大量的OLAP查询</p>
<ul>
<li>可以看到，每一次子查询就是查询某个&quot;维度(dimention)&quot;。 比如，如果要查“找出某天某地生产的所有产品”， 那么对于“时间”、“地点”、“产品”这三个维度，就要进行三次连表，开销是不可接受的</li>
</ul>
<h2 id="What-is-OLAP-DataBase"><a class="header-anchor" href="#What-is-OLAP-DataBase"></a>What is OLAP DataBase</h2>
<p>OLAP 数据库把数据按维度组织成<strong>高维数组</strong>。 一组数据就形成了一个&quot;cube&quot;， 进行OLAP查询时复杂度只有O(1)</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Database/OLAP/OLAP%20Cube.png" alt="OLAP Cube"></p>
<ul>
<li>假如OLAP cube内存占用过大，很多OLAP数据库只会加载cube的一部分进内存，其余的放在磁盘</li>
</ul>
<h2 id="Problems"><a class="header-anchor" href="#Problems"></a>Problems</h2>
<p>OLAP数据库的问题有：</p>
<ol>
<li>每个cube只能适应一小部分的OLAP查询。 假如出现了新查询或者新的类型的数据，需要新建Cube. 比如说，对于上图的Cube，如果数据分析师想要进一步分析“省份”数据，而原有Cube没有“省份”这个维度，就得让数据工程师新建一个包含了这个维度的Cube</li>
<li>要把数据仓库中的数据转化为OLAP Cube, 需要对数据仓库进行一定的<strong>建模</strong>( 需要满足一些稀奇古怪的范式要求， 比如 <a href="https://en.wikipedia.org/wiki/Dimensional_modeling">Kimball dimensional modeling</a>, <a href="https://en.wikipedia.org/wiki/Bill_Inmon">Inmon-style</a> entity-relationship modeling, or <a href="https://en.wikipedia.org/wiki/Data_vault_modeling">data vault modeling</a> )； 并且采用大量的<strong>pipeline</strong>， 比如ETL (extract-transform-load)</li>
<li>数据分析师的工作会严重依赖数据工程师。 因为每次有新的分析，都需要数据工程师来创建新Cube。 工作效率极低。 同时数据工程师还得维护pipeline。</li>
</ol>
<h2 id="Fall-of-OLAP"><a class="header-anchor" href="#Fall-of-OLAP"></a>Fall of OLAP</h2>
<p>OLAP Cube的问题来源于它要<strong>牺牲劳动力来节省计算和存储资源</strong>。近年来，随着CPU性能提升，内存价格降低，以及<strong>列数据库</strong>的出现， OLAP已经逐步被列数据库所取代。 <strong>列数据库可以胜任OLAP workload，并且性能更高</strong>。 这样做的好处有:</p>
<ol>
<li>直接使用原数据，不做任何转化。 也就不需要那么多的pipeline和配套的工具，也不用雇那么多数据工程师了</li>
<li>既然不需要转化成OLAP Cube， 那么数据仓库设计时也不必遵循奇奇怪怪的范式</li>
<li>数据分析师不需要依赖数据工程师来创建cube了， 可以自己直接用SQL查询</li>
</ol>
<h1 id="Columnar-Database"><a class="header-anchor" href="#Columnar-Database"></a>Columnar Database</h1>
<h2 id="What-is-Columnar-Database"><a class="header-anchor" href="#What-is-Columnar-Database"></a>What is Columnar Database</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Database/OLAP/column%20store.png" alt="column store"></p>
<p>如图，列数据库把数据按列存储，特点有：</p>
<ol>
<li>对于&quot;Read only&quot;的OLAP workload(也就是有好多维度的只读查询)，这种存储方式是完美契合的，每个维度查一列就行了
<ul>
<li>同时也可以看到列数据库的缺点 --- 修改既有数据的效率非常低，因为要把该行的每一列进行一次删除。 好在OLAP workload大部分是Read Only的， 事实上很多OLAP查询根本就不允许修改原有数据</li>
</ul>
</li>
<li>由于数据按列存储，而同一列的数据一般而言格式相似，因此列数据库比行数据库更容易压缩，减少内存占用</li>
<li>因为列数据库可以更大程度地压缩，也就能腾出更多的内存来给其他进程使用。 列数据库的排序等操作因此更快</li>
</ol>
<h1 id="ETL-vs-ELT"><a class="header-anchor" href="#ETL-vs-ELT"></a>ETL vs ELT</h1>
<ul>
<li>ETL：Extract, Transform, and Load. 即将源数据库( OLTP database )的数据“提取( extract )”到专门的数据处理服务器， 后者将数据“转换( transform )”为符合要求的形式，最终结果被加载到最终的数据仓库( data warehouse )
<ul>
<li>ETL和OLAP是紧密联系的。 ETL的目的数据仓库的数据已经是“提取、转换”之后的数据了。 因此ETL具有和OLAP相同的缺点：
<ol>
<li>每次新查询都要重新ETL</li>
<li>需要专人来进行ETL</li>
<li>最糟的是，海量数据的ETL是很耗时的。 那应该在什么时候进行ETL呢？ 你可能认为可以在晚上ETL，白天工人上班的时候直接拿结果来用。 但是如果是跨国公司，某个地方的晚上是另一个地方的白天，就没法做到ETL的同步，数据也就没法同步</li>
</ol>
</li>
</ul>
</li>
<li>ELT： Extract, Load, and Transform. 随着硬件的发展，现在普遍将数据直接传输到目标数据仓库，然后数据分析师手动进行数据处理( Transform )</li>
</ul>
]]></content>
      <categories>
        <category>Potpourri</category>
      </categories>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>OS Distributed System</title>
    <url>/2021/12/07/OS-Distributed%20System/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>通信</li>
<li>NFS</li>
<li>AFS</li>
</ul>
<p>ref: <em>Operating Systems Three Easy pieces</em></p>
<span id="more"></span>
<h1 id="通信"><a class="header-anchor" href="#通信"></a>通信</h1>
<ul>
<li>现代网络核心原则： <strong>通信是不可靠的</strong></li>
<li>有可靠的传输出协议进行消息传递</li>
<li>接下来的问题是： 使用什么样的抽象进行通信</li>
</ul>
<h2 id="通信抽象"><a class="header-anchor" href="#通信抽象"></a>通信抽象</h2>
<h3 id="DSM"><a class="header-anchor" href="#DSM"></a>DSM</h3>
<ul>
<li>分布式共享内存（ <code>Distributed Shared Memory</code>  ）:   使不同机器上的同一个进程可以共享一个大的地址空间
<ul>
<li>用户访问页面时，要么页面在本机，要么发生页错误，页错误处理程序请求其他计算机，获取页面</li>
<li>属于操作系统抽象，给分布式系统提供内存抽象</li>
</ul>
</li>
<li>DSM很少被采用
<ul>
<li>不够 Robunt：假如一台机器出现故障，整个地址空间就不可用了（ 比如一个链表的一个节点消失 ）</li>
<li>性能：跨计算机访问资源开销很大，DSM系统的设计者必须小心地组织计算，以便几乎不发生任何通信， 而这与DSM的初衷（跨计算机通信）违背*</li>
</ul>
</li>
</ul>
<h3 id="RPC"><a class="header-anchor" href="#RPC"></a>RPC</h3>
<ul>
<li>DSM的失败表明： <strong>OS抽象对分布式系统来说是个糟糕的选择</strong></li>
<li><strong>PL抽象更有意义</strong>
<ul>
<li>最主要的抽象是远程过程调用（<code>Remote Procedure Call</code>）</li>
</ul>
</li>
<li>RPC的目标： 使在远程机器上执行代码的过程像调用本地函数那样直接
<ul>
<li>client： 进行过程调用</li>
<li>server： 只是定义了一些希望导出的例程。 其余的由RPC系统处理</li>
</ul>
</li>
<li>RPC系统：
<ul>
<li>存根生成器(<code>stub generator</code>), 也称为协议编译器（ <code>protocol compiler</code> ）</li>
<li>运行时库（ <code>run-time library</code> ）</li>
</ul>
</li>
</ul>
<h4 id="Stub-Generator"><a class="header-anchor" href="#Stub-Generator"></a>Stub Generator</h4>
<ul>
<li>
<p><code>Stub Generator</code>  作为中介，与client和server交互</p>
</li>
<li>
<p>目的：消除将函数和参数打包成消息的复杂度</p>
</li>
<li>
<p>协议编译器的输入：server希望导出给client的一组调用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">interface&#123;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">func1</span><span class="params">(<span class="type">int</span> arg1)</span>;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">func2</span><span class="params">(<span class="type">int</span> arg1, <span class="type">int</span> arg2)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>stub generator</code>接受这样的接口，并对 client 和 server 生成一些不同的代码片段（ <code>stub</code> ）</p>
</li>
<li>
<p><code>client stub</code>: client链接此<code>client stub</code>，调用它进行RPC,，客户端只能看到函数调用，在<code>stub</code>内部有如下操作：</p>
<ul>
<li>创建 <code>message  buffer</code> ： 一个字节数组</li>
<li>将所需信息打包到 <code>message  buffer</code>， 也称为消息的序列化（<code>serialization</code>）</li>
<li>将消息发送到目标RPC server</li>
<li>与RPC server的通信，以及使其运行所需的细节都由RPC运行时库处理</li>
<li>等待回复</li>
<li>解包返回代码和其他参数（反序列化）</li>
</ul>
</li>
<li>
<p><code>server stub</code>:</p>
<ul>
<li>解包消息，即反序列化</li>
<li>调用实际函数</li>
<li>打包结果，放入一个回复缓冲区</li>
<li>发送回复</li>
</ul>
</li>
<li>
<p>问题：</p>
<ul>
<li>一个包如何发送复杂的数据结构：比如，如何解释一个指针
<ul>
<li>通过众所周知的类型（<code>int</code>之类）</li>
<li>使用更多信息注释数据结构</li>
</ul>
</li>
<li>并发性服务器组织方式：
<ul>
<li>线程池</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Run-time-Library"><a class="header-anchor" href="#Run-time-Library"></a>Run-time Library</h4>
<p>运行时库处理RPC系统中大部分工作，这里讨论构建它时的一些困难</p>
<ul>
<li>命名问题： 如何找到远程服务
<ul>
<li>采用现有的命名系统（  <code>ip + port</code> ）</li>
</ul>
</li>
<li>RPC传输协议的构建
<ul>
<li>为了效率，很多rpc采用UDP</li>
<li>如果建立在不可靠的传输层上，RPC需要提供可靠性，比如提供超时/重试</li>
</ul>
</li>
<li>字节序：
<ul>
<li>RPC包在其消息格式中指定字节序</li>
</ul>
</li>
<li>是否向client暴露通信的异步性质，实现性能优化</li>
</ul>
<h1 id="NFS"><a class="header-anchor" href="#NFS"></a>NFS</h1>
<ul>
<li>
<p>分布式文件系统</p>
<ul>
<li>由客户端文件系统 + 文件服务器组成</li>
<li>提供对文件的透明访问</li>
</ul>
</li>
<li>
<p>Sun的NFS只是一个协议，允许不同的实现，这里讨论NFS v2</p>
</li>
<li>
<p>目的是“<strong>简单快速的服务器崩溃恢复</strong>”</p>
</li>
</ul>
<h2 id="无状态协议"><a class="header-anchor" href="#无状态协议"></a>无状态协议</h2>
<ul>
<li>NFS采用“<strong>无状态</strong>”协议: 每个client操作都包含完成请求所需的全部信息
<ul>
<li>有状态协议会在client和server间共享状态。 比如文件描述符，如果服务器发生错误，收到客户端第二次读取时将不知道<code>fd</code>指的是哪个文件</li>
<li>有状态协议很难处理客户端崩溃情况，如果client在崩溃前用掉了一个<code>fd</code>， server将无法知道什么之后收回该<code>fd</code></li>
</ul>
</li>
<li><strong>重试请求</strong>：解决服务器没有及时回复的问题</li>
<li><strong>幂等</strong>（<code>idempotent</code>）   操作： NFS的操作是幂等的，这就确保了它能简单地重试请求</li>
<li>除了<code>READ</code>, <code>LOOKUP</code>, 就连<code>WRITE</code>也是幂等的
<ul>
<li><code>WRITE</code>包含写入数据的偏移量，实现了其幂等性</li>
</ul>
</li>
<li>但是，有些操作无法幂等，比如<code>mkdir</code>，这也是NFS的bug</li>
</ul>
<h2 id="客户端缓存"><a class="header-anchor" href="#客户端缓存"></a>客户端缓存</h2>
<p>客户端缓存可以提升性能，但会导致<strong>缓存一致性问题</strong>（ <code>cache consistency problem</code> ）</p>
<ul>
<li>假设有客户端<code>C1</code>, <code>C2</code>, <code>C3</code>, 服务器<code>S</code>。 <code>C1</code>从<code>S</code>读取了文件<code>F</code>，并将副本存在本地缓存中， 而<code>C2</code>覆盖文件<code>F</code>，从未而改变其内容
<ul>
<li>问题一： <code>C2</code>将它的写入缓存一段时间再发送，而这之前如果<code>C3</code>访问<code>F</code>，得到的还是未改变的<code>F</code>，这称为<code>update visibility</code>
<ul>
<li>client实现<strong>关闭时刷新</strong><code> flush-on-close</code>（即<code>close-to-open</code>）: 当一个client写入文件并关闭文件时，将其所有更新刷新到服务器，这样<code>C3</code>从服务器你拿到的确保是最新的版本</li>
</ul>
</li>
<li>问题二： 即使<code>C2</code>立即发送其写入，<code>C1</code>的缓存依然是陈旧的（ <code> stale cache</code> ）, 此时<code>C1</code>上的程序只能读取陈旧的缓存
<ul>
<li>CLIENT在打开文件时，会先发送<code>GETATTR</code>请求到服务器，检查其是否被更改，如果是，则删除缓存并重新请求
<ul>
<li><code>GETATTR</code>返回文件信息，其中包括服务器上次修改文件的信息</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>可以想见，<code>GETATTR</code>请求会非常频繁，为此NFS设计了“属性缓存”，允许文件属性缓存在本地，3s后超时。 但这就使得NFS无法知道文件的确切版本，“陈旧缓存”问题无法彻底解决</li>
</ul>
<h2 id="写缓冲"><a class="header-anchor" href="#写缓冲"></a>写缓冲</h2>
<ul>
<li>为了确保服务器写入正确， 服务I其必须在完成写入后，才通知客户端写入成功</li>
<li>带来写入性能的瓶颈</li>
</ul>
<h1 id="AFS"><a class="header-anchor" href="#AFS"></a>AFS</h1>
<ul>
<li>
<p>原则： 在<strong>client的本地磁盘</strong>进行<strong>全文件缓存</strong></p>
<ul>
<li>后续<code>read()</code>, <code>write()</code>操作是严格本地的，被重定向到本地磁盘上</li>
<li>当然，客户端每次操作前，会发送<code>TestAuth</code>给server, 查看文件是否被修改，这类似NFS的<code>GETATTR</code>
<ul>
<li><code>AFS v2</code>引入<strong>回调</strong>， server向client承诺，当client缓存的文件被修改时， 会通知client. 这减少了网络通信</li>
</ul>
</li>
</ul>
</li>
<li>
<p>AFS也采用关闭时刷新</p>
</li>
<li>
<p>最后关闭者胜出<code> last closer win</code>: 最后一个更新该文件的client的内容会被接受</p>
<ul>
<li>AFS是基于文件的，而NFS是基于块的。 对后者而言，如果每个客户端都更新文件，会将不同的块的写入刷新到服务器，这样的文件内容没什么意义</li>
</ul>
</li>
</ul>
<h2 id="崩溃恢复"><a class="header-anchor" href="#崩溃恢复"></a>崩溃恢复</h2>
<ul>
<li>回调可能会丢失，比如该client缓存的文件被另一个client改变，服务器发送回调时，前者还在重启。
<ul>
<li>此时前者必须发送<code>TestAuth</code>来验证缓存正确性。</li>
</ul>
</li>
<li>崩溃后的服务器恢复也更复杂。 因为回调被保存在server内存中。 因此server重启后，不知道server的情况。
<ul>
<li>因此，server重启后，每个client都必须意识到server已崩溃。 比如，server重启后向每个client发送消息“不要信任你的缓存！”</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>OS Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>OS Concurrency</title>
    <url>/2021/12/20/OS-Concurrency/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Intro：
<ul>
<li>多处理器编程的困难</li>
<li>用状态机理解并发算法</li>
<li>并发控制：互斥、同步</li>
</ul>
</li>
<li>概念： 互斥</li>
<li>并发与状态机</li>
<li>Threading API</li>
<li>Lock</li>
<li>Concurrent Data Structure based on Lock</li>
<li>Conditional Variable</li>
<li>信号量</li>
<li>常见并发问题</li>
<li>基于事件的并发</li>
</ul>
<p>Ref：</p>
<ul>
<li>Operating Systems Three Easy pieces</li>
<li>JYY OS</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<p>Concurrent：exsiting, happening, or done at the <em>same</em> time. 程序的不同部分可以按不同顺序执行，且最终得到正确的结果</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//t0.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span><span class="comment">// pthread 库不是 Linux 系统默认的库，连接时需要使用静态库 libpthread.a // 在编译中要加 -lpthread参数</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>  *<span class="title function_">mythread</span><span class="params">( <span class="type">void</span> *arg )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, arg);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">( <span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span>  p1,p2;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">&quot;main:begin\n&quot;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* ch1 = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* ch2 = <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    rc = pthread_create( &amp;p1, <span class="literal">NULL</span>, mythread, ch1 ); assert(rc==<span class="number">0</span>); <span class="comment">//C语言编译器允许隐含性的将一个通用指针转换为任意类型的指针，包括const *而C＋＋不允许将const 转换为非const*，所以不能直接传入&quot;A&quot;</span></span><br><span class="line">    rc = pthread_create( &amp;p2, <span class="literal">NULL</span>, mythread, ch2 ); assert(rc==<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    rc= pthread_join( p1,<span class="literal">NULL</span> );</span><br><span class="line">    rc= pthread_join( p2,<span class="literal">NULL</span> );</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main:end\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>该程序打印结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main:begin</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">main:end</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main:begin</span><br><span class="line">B</span><br><span class="line">A</span><br><span class="line">main:end</span><br></pre></td></tr></table></figure>
<p>两次运行结果不一样</p>
<h2 id="多任务OS的并发"><a class="header-anchor" href="#多任务OS的并发"></a>多任务OS的并发</h2>
<p>（假设系统只有一个CPU）</p>
<p>OS可以同时加载多个进程</p>
<ul>
<li>
<p>每个进程都是独立的进程，互不干扰</p>
<ul>
<li>即使是root权限的进程，也不能直接访问操作系统内核的内存</li>
</ul>
</li>
<li>
<p>每隔一段时间，就切换到另一个进程</p>
</li>
</ul>
<hr>
<ul>
<li>并发性的来源： <strong>进程会调用OS的API</strong>
<ul>
<li><code>write（fd,buf,11 TiB）</code>（<code>TiB</code>宏）</li>
<li><code>write</code>的实现是OS的一部分</li>
<li><code>x86-64</code>应用程序执行<code>syscall</code>后就进入OS执行
<ul>
<li>类似中断处理程序</li>
</ul>
</li>
<li>此时OS允许<code>write</code>的同时，让另一个进程执行
<ul>
<li>如：另一个进程执行了<code>read(fd,buf,512 MiB)</code>读取同一文件</li>
<li><strong>OS代码并发了</strong>： <code>OS API</code>实现需要考虑并发
<ul>
<li>虽然进程在地址空间中是独立的，但是OS中的对象是被进程共享的</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="并发与并行的区别"><a class="header-anchor" href="#并发与并行的区别"></a>并发与并行的区别</h2>
<ul>
<li>并发： 多个执行流可以不按照一个特定的顺序执行</li>
<li>并行：允许多个执行流真正地同时执行
<ul>
<li>需要多个处理器</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>处理器数量</th>
<th>共享内存？</th>
<th>典型的并发OS</th>
<th>并发？并行？</th>
</tr>
</thead>
<tbody>
<tr>
<td>单</td>
<td>共享内存</td>
<td>OS内核/多线程程序</td>
<td>并发不并行</td>
</tr>
<tr>
<td>多</td>
<td>共享内存</td>
<td>OS内核/多线程程序/GPU Kernel</td>
<td>并发、并行</td>
</tr>
<tr>
<td>多</td>
<td>不共享内存</td>
<td>分布式系统（消息通信）</td>
<td>并发、并行</td>
</tr>
</tbody>
</table>
<h2 id="线程"><a class="header-anchor" href="#线程"></a>线程</h2>
<p>线程： A single process can contain multiple threads, all of  which  are  executing  the same  program.   These  threads <strong>share</strong> the same global memory (data and heap segments), but each thread has its own stack (automatic variables).</p>
<p>多个执行流并发/并行执行，且<strong>共享内存</strong></p>
<ul>
<li>两个执行流共享代码和所有全局变量（数据区、堆区）
<ul>
<li>i.e. C++中，数据区就是全局/静态区</li>
</ul>
</li>
<li>线程间指令的执行顺序是不确定（<em>non-deterministic</em>）的</li>
<li>共享：共享代码区(当前进程的代码)、数据区和堆，但不共享寄存器和栈</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//t1.c</span></span><br><span class="line"><span class="comment">//共享全局变量的后果</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;mythreads.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="keyword">volatile</span> <span class="type">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> * <span class="title function_">mythread</span><span class="params">( <span class="type">void</span>*arg )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">&quot;%s: begin\n&quot;</span>, (<span class="type">char</span>*)arg );</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">1e7</span>; i++ )</span><br><span class="line">        counter++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s: done\n&quot;</span>, (<span class="type">char</span>*)arg);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">( <span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span>  p1,p2;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">&quot;main:begin ( counter = %d )\n&quot;</span>, counter );</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* ch1 = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* ch2 = <span class="string">&quot;B&quot;</span>;</span><br><span class="line">    Pthread_create( &amp;p1, <span class="literal">NULL</span>, mythread, ch1 ); <span class="comment">//C语言编译器允许隐含性的将一个通用指针转换为任意类型的指针，包括const *而C＋＋不允许将const 转换为非const*，所以不能直接传入&quot;A&quot;</span></span><br><span class="line">    Pthread_create( &amp;p2, <span class="literal">NULL</span>, mythread, ch2 ); </span><br><span class="line"></span><br><span class="line">    Pthread_join( p1,<span class="literal">NULL</span> );</span><br><span class="line">    Pthread_join( p2,<span class="literal">NULL</span> );</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main:done with both ( counter = %d )\n&quot;</span>, counter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mythreads.h</span></span><br><span class="line"><span class="comment">//把API封装起来，易于使用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="comment">// #include&lt;assert.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pthread_create</span> <span class="params">(<span class="type">pthread_t</span> *__restrict __newthread,</span></span><br><span class="line"><span class="params">			   <span class="type">const</span> <span class="type">void</span>* __attr,</span></span><br><span class="line"><span class="params">			   <span class="type">void</span> *(*__start_routine) (<span class="type">void</span> *),</span></span><br><span class="line"><span class="params">			   <span class="type">void</span> *__restrict __arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    pthread_create( __newthread, __attr, __start_routine, __arg );</span><br><span class="line">&#125;</span><br><span class="line"> <span class="type">void</span> <span class="title function_">Pthread_join</span><span class="params">(<span class="type">pthread_t</span> __th, <span class="type">void</span> **__thread_return)</span></span><br><span class="line"> &#123;</span><br><span class="line">     pthread_join( __th, __thread_return );</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="type">void</span> *<span class="title function_">Malloc</span><span class="params">(<span class="type">unsigned</span> size)</span></span><br><span class="line"> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main:begin ( counter = 0 )</span><br><span class="line">A: begin</span><br><span class="line">B: begin</span><br><span class="line">A: done</span><br><span class="line">B: done</span><br><span class="line">main:done with both ( counter = 12275324 )</span><br></pre></td></tr></table></figure>
<p>可以看到结果不是200000, 而是12275324</p>
<p>再运行一次：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main:begin ( counter = 0 )</span><br><span class="line">A: begin</span><br><span class="line">B: begin</span><br><span class="line">B: done</span><br><span class="line">A: done</span><br><span class="line">main:done with both ( counter = 10467369 )</span><br></pre></td></tr></table></figure>
<p><strong>两次运行的结果都不一样！</strong></p>
<h2 id="多处理器编程的困难"><a class="header-anchor" href="#多处理器编程的困难"></a>多处理器编程的困难</h2>
<ul>
<li>原子性： 即使是<code>i++</code>，也会被分成几个指令</li>
<li>顺序性：<strong>代码</strong>的编译器优化</li>
<li>可见性： <strong>CPU</strong>可以不按顺序执行指令。没有前后依赖就会被优化（并行执行）</li>
</ul>
<h3 id="并发术语"><a class="header-anchor" href="#并发术语"></a>并发术语</h3>
<ul>
<li>临界区( <code>critical section</code> )： 访问共享资源的一段代码</li>
<li>竞态条件( <code>race condition</code> )： 多个执行线程大致同时进入进阶区时，都试图更新共享资源的情况</li>
<li>不确定性( <code>indeterminate</code> )： 程序含有竞态条件，其输出不确定</li>
<li>同步原语( <code>synchronization primitive</code> ):硬件提供指令，在其上构建同步原语,实现<strong>原子性</strong></li>
<li>互斥原语( <code>mutual exclusion</code> )： 线程应该使用互斥原语，以保证只有一个线程进入临界区，从而避免出现竞态，并产生确定的程序输出</li>
</ul>
<h1 id="概念：互斥"><a class="header-anchor" href="#概念：互斥"></a>概念：互斥</h1>
<p>互斥（mutual exclusion）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">...</span><br><span class="line">&#125;lock_tl</span><br><span class="line"><span class="type">void</span> <span class="title function_">lock</span><span class="params">(<span class="type">lock_t</span> *lk)</span>;<span class="comment">//试图获得锁的独占访问，成功获得后返回</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">unlock</span><span class="params">(<span class="type">lock_t</span> *lk)</span>;<span class="comment">//释放锁的独占空间</span></span><br></pre></td></tr></table></figure>
<p>我们假设CPU有三种指令：</p>
<ol>
<li>load： mem -&gt; reg</li>
<li>store: reg -&gt; mem</li>
<li>本地计算： 线程的寄存器做一些计算，结果存入寄存器</li>
</ol>
<h2 id="共享内存上互斥的困难"><a class="header-anchor" href="#共享内存上互斥的困难"></a>共享内存上互斥的困难</h2>
<ul>
<li>
<p>load和store的缺陷（一个只能看，一个只能写）</p>
</li>
<li>
<p>现代处理器load/store可能在执行时被乱序</p>
</li>
</ul>
<h1 id="并发与状态机"><a class="header-anchor" href="#并发与状态机"></a>并发与状态机</h1>
<h2 id="程序-有限状态机-有向图"><a class="header-anchor" href="#程序-有限状态机-有向图"></a>程序 = 有限状态机 = 有向图</h2>
<p>图论是理解程序的重要工具</p>
<p>不确定(non-deterministic)的指令可能有多个状态</p>
<ul>
<li>
<p>获取处理器的”时间戳“用于精确定时</p>
<ul>
<li><code>rdtsc/rdtscp</code></li>
</ul>
</li>
<li>
<p>机器提供的”真“随机数</p>
<ul>
<li><code>rdrand</code></li>
</ul>
</li>
<li>
<p><code>syscall</code></p>
<ul>
<li>一般用于唯一不确定性的来源</li>
<li><code>read</code></li>
</ul>
</li>
</ul>
<h2 id="状态机模型：应用"><a class="header-anchor" href="#状态机模型：应用"></a>状态机模型：应用</h2>
<ul>
<li>在硬件上的应用： 高性能处理器实现
<ul>
<li>超标量处理器
<ul>
<li>同一时间执行多条指令</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Time-Travel-Debugging"><a class="header-anchor" href="#Time-Travel-Debugging"></a>Time - Travel Debugging</h3>
<ul>
<li>
<p>程序执行随时间渐进：$s_0 \rarr s_1 \rarr \dots$​</p>
</li>
<li>
<p>记录所有$s_i$的开销太大（$s_i$​由内存和寄存器组成）</p>
</li>
<li>
<p><strong>记录初始状态，和每条指令前后状态的diff</strong></p>
</li>
<li>
<p><code>si/rsi</code></p>
</li>
</ul>
<h3 id="Record-Replay"><a class="header-anchor" href="#Record-Replay"></a>Record &amp; Replay</h3>
<p>确定的程序不需要任何记录，只需要再执行一次</p>
<ul>
<li>只需记录non-deterministic指令的<strong>效果</strong>（side-effect），就可实现重放</li>
</ul>
<h1 id="线程间通信ITC"><a class="header-anchor" href="#线程间通信ITC"></a>线程间通信ITC</h1>
<p>(1)通信线程位于同一个进程中，共享相同的地址空间</p>
<p>(2)通信线程位于不同的进程中，拥有不同的地址空间</p>
<h2 id="相同进程"><a class="header-anchor" href="#相同进程"></a>相同进程</h2>
<p>对于情况(1)，线程间的通信可以直接通过<em>访问共享的地址空间</em>实现信息交换</p>
<h2 id="不同进程"><a class="header-anchor" href="#不同进程"></a>不同进程</h2>
<p>对于情况(2), 采用进程间通信IPC</p>
<p>• IPC机制主要包括:信号(Signal)、管道(Pipe)、信号量、共享内存(Shared Memory)、消息队列(Message Queue)、套接字(Socket)</p>
<p>• 与线程间通信机制不同，进程间通信机制需要打破进程间地址空间的隔离</p>
<p>某些OS发行版(.其实就是欧拉 )增加的IPC机制：共享内存， 消息通信</p>
<ul>
<li>共享内存是一种在进程间高效地传递大量信息的通信方式。但在共享内存机制下，信息的发送方不关心信息由谁接收，而信息的接收方也不关心信息是由谁发送的，这存在安全隐患。</li>
<li>消息传递允许进程不必通过共享内存区来实现通信，而是通过交换消息的方式来实现通信。消息 传递关注信息的发送者不接收者，通过使用内核拷贝传递的信息，完成进程间的信息传递</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Concurrency/shared%20memory.png" alt="image-20220408144852516"></p>
<h1 id="Threading-API"><a class="header-anchor" href="#Threading-API"></a>Threading API</h1>
<p><code>man  -k pthread</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//p212, 线程API</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;mythreads.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">myarg_t</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">&#125;<span class="type">myarg_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">myret_t</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;<span class="type">myret_t</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> * <span class="title function_">mythread</span><span class="params">( <span class="type">void</span>*arg )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">myarg_t</span> *m = (<span class="type">myarg_t</span> *)arg;</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">&quot;args: %d %d\n&quot;</span>,  m -&gt; a, m -&gt; b );</span><br><span class="line">    <span class="type">myret_t</span> *r = Malloc(<span class="keyword">sizeof</span>( <span class="type">myret_t</span> ));</span><br><span class="line">    r -&gt; x = <span class="number">1</span>;</span><br><span class="line">    r -&gt; y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">void</span>*) r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">( <span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span>  p;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="type">myret_t</span> *m; <span class="comment">//将返回值打包</span></span><br><span class="line">    <span class="type">myarg_t</span> args;<span class="comment">//将参数打包</span></span><br><span class="line"></span><br><span class="line">    args.a = <span class="number">10</span>;</span><br><span class="line">    args.b = <span class="number">20</span>;</span><br><span class="line">    Pthread_create( &amp;p, <span class="literal">NULL</span>, mythread, &amp;args ); </span><br><span class="line">    Pthread_join( p, ( <span class="type">void</span> **) &amp;m );<span class="comment">//将线程返回值赋给m</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;returned: %d %d\n&quot;</span>, m -&gt; x, m -&gt; y );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">args: 10 20</span><br><span class="line">returned: 1 2</span><br></pre></td></tr></table></figure>
<h2 id="线程创建"><a class="header-anchor" href="#线程创建"></a>线程创建</h2>
<p><code> &lt;pthread.h&gt;</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Create a new thread, starting with execution of START-ROUTINE</span></span><br><span class="line"><span class="comment">   getting passed ARG.  Creation attributed come from ATTR.  The new</span></span><br><span class="line"><span class="comment">   handle is stored in *NEWTHREAD.  */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">pthread_create</span> <span class="params">(<span class="type">pthread_t</span> *__restrict __newthread, <span class="comment">//线程的指针</span></span></span><br><span class="line"><span class="params">			   <span class="type">const</span> <span class="type">pthread_attr_t</span> *__restrict __attr, <span class="comment">//线程具有的属性，包括栈大小，优先级等。 一般传入NULL</span></span></span><br><span class="line"><span class="params">			   <span class="type">void</span> *(*__start_routine) (<span class="type">void</span> *),<span class="comment">//线程要运行的函数的指针，接受void*参数，返回 void* //可以自由更改参数/返回类型</span></span></span><br><span class="line"><span class="params">			   <span class="type">void</span> *__restrict __arg)</span> __THROWNL __<span class="title function_">nonnull</span> <span class="params">((<span class="number">1</span>, <span class="number">3</span>))</span>;<span class="comment">//函数的参数，可传入结构体，以实现传入多个参数</span></span><br></pre></td></tr></table></figure>
<h2 id="线程完成"><a class="header-anchor" href="#线程完成"></a>线程完成</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Make calling thread wait for termination of the thread TH.  The</span></span><br><span class="line"><span class="comment">   exit status of the thread is stored in *THREAD_RETURN, if THREAD_RETURN</span></span><br><span class="line"><span class="comment">   is not NULL.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   This function is a cancellation point and therefore not marked with</span></span><br><span class="line"><span class="comment">   __THROW.  */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">pthread_join</span> <span class="params">(<span class="type">pthread_t</span> __th, <span class="type">void</span> **__thread_return)</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第一个参数是线程的指针</span></span><br><span class="line"><span class="comment">第二个参数是线程运行的函数的返回值的指针</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="锁"><a class="header-anchor" href="#锁"></a>锁</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//上锁和解锁</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">pthread_mutex_lock</span> <span class="params">(<span class="type">pthread_mutex_t</span> *__mutex)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">pthread_mutex_unlock</span> <span class="params">(<span class="type">pthread_mutex_t</span> *__mutex)</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//锁必须初始化，两种方式</span></span><br><span class="line"><span class="type">pthread_mutex_t</span> lock = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line">pthread_mutex_init(*lock, <span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//锁使用完后必须销毁</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">pthread_mutex_destroy</span> <span class="params">(<span class="type">pthread_mutex_t</span> *__mutex)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mythread.h</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">pthread_cond_t</span> <span class="type">cond_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">pthread_mutex_t</span> <span class="type">mutex_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pthread_create</span> <span class="params">(<span class="type">pthread_t</span> *__restrict __newthread,</span></span><br><span class="line"><span class="params">			   <span class="type">const</span> <span class="type">void</span>* __attr,</span></span><br><span class="line"><span class="params">			   <span class="type">void</span> *(*__start_routine) (<span class="type">void</span> *),</span></span><br><span class="line"><span class="params">			   <span class="type">void</span> *__restrict __arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> rc = pthread_create( __newthread, __attr, __start_routine, __arg );</span><br><span class="line">    assert( rc == <span class="number">0</span> );</span><br><span class="line">&#125;</span><br><span class="line"> <span class="type">void</span> <span class="title function_">Pthread_join</span><span class="params">(<span class="type">pthread_t</span> __th, <span class="type">void</span> **__thread_return)</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="type">int</span> rc = pthread_join( __th, __thread_return );</span><br><span class="line">     assert( rc == <span class="number">0</span> );</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="type">void</span> *<span class="title function_">Malloc</span><span class="params">(<span class="type">unsigned</span> size)</span></span><br><span class="line"> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="type">void</span> <span class="title function_">Pthread_mutex_lock</span><span class="params">( <span class="type">pthread_mutex_t</span> *mutex )</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="type">int</span> rc = pthread_mutex_lock(mutex);</span><br><span class="line">     assert( rc == <span class="number">0</span> );</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pthread_mutex_unlock</span><span class="params">( <span class="type">pthread_mutex_t</span> *mutex )</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="type">int</span> rc = pthread_mutex_unlock(mutex);</span><br><span class="line">     assert( rc == <span class="number">0</span> );</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pthread_mutex_init</span><span class="params">( <span class="type">pthread_mutex_t</span> *__mutex,</span></span><br><span class="line"><span class="params">			       <span class="type">const</span> <span class="type">void</span>*__mutexattr )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> rc = pthread_mutex_init(__mutex, <span class="literal">NULL</span>);</span><br><span class="line">     assert( rc == <span class="number">0</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pthread_mutex_destroy</span><span class="params">( <span class="type">pthread_mutex_t</span> *__mutex )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> rc = pthread_mutex_destroy(__mutex);</span><br><span class="line">     assert( rc == <span class="number">0</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pthread_cond_init</span><span class="params">( <span class="type">pthread_cond_t</span> *__restrict __cond,</span></span><br><span class="line"><span class="params">			      <span class="type">const</span> <span class="type">void</span>*__restrict __cond_attr )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> rc = pthread_cond_init( __cond, __cond_attr);</span><br><span class="line">     assert( rc == <span class="number">0</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">cond_destroy</span><span class="params">( <span class="type">pthread_cond_t</span> *__restrict __cond )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> rc = pthread_cond_destroy(__cond);</span><br><span class="line">     assert( rc == <span class="number">0</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pthread_cond_wait</span><span class="params">(<span class="type">pthread_cond_t</span> *__restrict __cond,</span></span><br><span class="line"><span class="params">			      <span class="type">pthread_mutex_t</span> *__restrict __mutex)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> rc = pthread_cond_wait(__cond, __mutex);</span><br><span class="line">    assert(rc ==<span class="number">0</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pthread_cond_signal</span><span class="params">(<span class="type">pthread_cond_t</span> *__cond)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> rc = pthread_cond_signal(__cond);</span><br><span class="line">    assert( rc==<span class="number">0</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用锁：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">pthread_mutex_t</span> lock;</span><br><span class="line">Pthread_mutex_init( &amp;lock ,<span class="literal">NULL</span> );<span class="comment">//初始化锁</span></span><br><span class="line"></span><br><span class="line">Pthread_mutex_lock( &amp;lock );<span class="comment">//上锁， 如果锁已经被其他线程持有，那么该调用不会返回，直到获得该锁（意味着持有该锁的线程已经将锁释放）</span></span><br><span class="line">x = x +<span class="number">1</span>;</span><br><span class="line">Pthread_mutex_unlock( &amp;lock );</span><br></pre></td></tr></table></figure>
<h2 id="条件变量"><a class="header-anchor" href="#条件变量"></a>条件变量</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Wait for condition variable COND to be signaled or broadcast.</span></span><br><span class="line"><span class="comment">   MUTEX is assumed to be locked before.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   This function is a cancellation point and therefore not marked with</span></span><br><span class="line"><span class="comment">   __THROW.  */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">pthread_cond_wait</span> <span class="params">(<span class="type">pthread_cond_t</span> *__restrict __cond,</span></span><br><span class="line"><span class="params">			      <span class="type">pthread_mutex_t</span> *__restrict __mutex)</span>;</span><br><span class="line">			      </span><br><span class="line"><span class="comment">/* Wake up one thread waiting for condition variable COND.  */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">pthread_cond_signal</span> <span class="params">(<span class="type">pthread_cond_t</span> *__cond)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//条件变量也必须初始化，与锁类似，两种方式： </span></span><br><span class="line"><span class="type">pthread_cond_t</span> cond = PTHREAD_COND_INITIALIZER;</span><br><span class="line">pthread_cond_init( __cond, __cond_attr);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//销毁也类似</span></span><br><span class="line"><span class="comment">/* Destroy condition variable COND.  */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">pthread_cond_destroy</span> <span class="params">(<span class="type">pthread_cond_t</span> *__cond)</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//mythreads.h</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pthread_cond_init</span><span class="params">( <span class="type">pthread_cond_t</span> *__restrict __cond,</span></span><br><span class="line"><span class="params">			      <span class="type">const</span> <span class="type">void</span>*__restrict __cond_attr )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> rc = pthread_cond_init( __cond, __cond_attr);</span><br><span class="line">     assert( rc == <span class="number">0</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">cond_destroy</span><span class="params">( <span class="type">pthread_cond_t</span> *__restrict __cond )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> rc = pthread_cond_destroy(__cond);</span><br><span class="line">     assert( rc == <span class="number">0</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Lock"><a class="header-anchor" href="#Lock"></a>Lock</h1>
<ul>
<li>
<p>锁的状态：</p>
<ul>
<li><code>available</code></li>
<li><code>acquired</code></li>
</ul>
</li>
<li>
<p>方法：</p>
<ul>
<li><code>lock()</code>: 尝试获取锁，如果锁是<code>available</code>，则获取锁，进入临界区</li>
<li><code>unlock()</code>: 使锁<code>available</code></li>
</ul>
</li>
<li>
<p>锁提供了最小程度的调度控制</p>
<ul>
<li>线程由OS调度， 锁让程序员获得了一些控制权</li>
</ul>
</li>
<li>
<p>通常用不同的锁保护不同的数据（ 细粒度的方案 ）</p>
</li>
</ul>
<h2 id="评价锁"><a class="header-anchor" href="#评价锁"></a>评价锁</h2>
<ul>
<li>有效性： 提供互斥</li>
<li>公平性<code>fairness</code>:  当锁可用时，是否每一个竞争线程有公平的机会抢到锁
<ul>
<li>是否有竞争锁的线程会饿死<code>starve</code>?</li>
</ul>
</li>
<li>性能<code> performance</code></li>
</ul>
<h2 id="控制中断"><a class="header-anchor" href="#控制中断"></a>控制中断</h2>
<p>最早提供的互斥解决方案之一，就是在临界区关闭中断：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">lock</span><span class="params">()</span>&#123;</span><br><span class="line">	DisableInterrupts();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unlock</span><span class="params">()</span>&#123;</span><br><span class="line">    EnableInterrupts();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假设在单CPU系统上，这段代码在临界区关闭中断，从而原子地执行，结束后又重新打开中断</p>
<ul>
<li>
<p>缺点：</p>
<ul>
<li>需要允许所有线程执行特权操作（开关中断）
<ul>
<li>即，需要信任机制不被滥用</li>
</ul>
</li>
<li>不支持多处理器
<ul>
<li>中断的开关只是对CPU而言，如果一个多个线程运行在不同CPU上，其中一个CPU关闭中断，其他CPU依然响应中断，在其上的线程依然能进入临界区</li>
</ul>
</li>
<li>关中断导致<strong>中断丢失</strong>，可能导致严重的系统问题
<ul>
<li>比如磁盘完成了读取请求，但CPU错失了该消息</li>
</ul>
</li>
</ul>
</li>
<li>
<p>因此，用<strong>关中断来实现互斥原语</strong>的情况很有限</p>
<ul>
<li>有些情况下OS自身会采用关中断的方式来保证访问数据的原子性，此时该用法是可行的，因为OS内部不存在信任问题</li>
</ul>
</li>
<li>
<p>很多人热衷于研究不依赖硬件实现的锁机制，事实证明，只需很少的硬件支持，实现锁就会容易很多</p>
</li>
</ul>
<h2 id="test-and-set"><a class="header-anchor" href="#test-and-set"></a>test-and-set</h2>
<ul>
<li>
<p><code>test-and-set instruction</code>,  也称为<code>atomic exchange</code>,  由硬件支持</p>
</li>
<li>
<p>先实现一个不依赖它的锁：</p>
</li>
</ul>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//想法是： 用一个flag来表示锁是否被占用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>  <span class="title function_">lock_t</span><span class="params">( <span class="type">int</span> flag; )</span> <span class="type">lock_t</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">( <span class="type">lock_t</span> *mutex )</span></span><br><span class="line">&#123;</span><br><span class="line">    mutex -&gt; flag = <span class="number">0</span>; <span class="comment">// 0 -&gt; lock is available</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock</span><span class="params">( <span class="type">lock_t</span> *mutex )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>( mutex -&gt; flag == <span class="number">1</span> )</span><br><span class="line">        ; <span class="comment">// spin-wait( do nothing )</span></span><br><span class="line">    mutex -&gt; flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unlock</span><span class="params">( <span class="type">lock_t</span> *mutex )</span></span><br><span class="line">&#123;</span><br><span class="line">    mutex -&gt; flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>这段代码有两个问题：</p>
<ul>
<li>
<p>正确性：</p>
<table>
<thead>
<tr>
<th>Thread`</th>
<th>Thread2</th>
</tr>
</thead>
<tbody>
<tr>
<td>( 初始时，flag == 0 )  call lock()</td>
<td></td>
</tr>
<tr>
<td>while( flag == 1 )</td>
<td></td>
</tr>
<tr>
<td>interrupt: switch to Thread2</td>
<td></td>
</tr>
<tr>
<td></td>
<td>call lock()</td>
</tr>
<tr>
<td></td>
<td>while( flag == 1 )</td>
</tr>
<tr>
<td></td>
<td><strong>flag = 1;</strong></td>
</tr>
<tr>
<td></td>
<td>interrupt: switch to Thread 1</td>
</tr>
<tr>
<td><strong>flag = 1( too ! )</strong></td>
<td></td>
</tr>
</tbody>
</table>
</li>
<li>
<p>性能问题：</p>
<ul>
<li>这个锁是<strong>自旋</strong>的，一个线程自旋等待另一个线程释放锁，浪费时间
<ul>
<li>对于单CPU，因为同一时间只有一个线程，且自旋的线程永远不会放弃CPU,本线程自旋时，持有锁的线程根本无法运行，也不可能释放锁
<ul>
<li>需要抢占式的调度器（ <code> preemptive scheduler</code> , 即不断通过时钟中断一个线程，运行其他线程 )</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="用test-and-set实现锁"><a class="header-anchor" href="#用test-and-set实现锁"></a>用test-and-set实现锁</h3>
<ul>
<li>在x86上称为 <code>xchg</code>指令，</li>
</ul>
<pre><code><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">TestAndSet</span><span class="params">( <span class="type">int</span> *old_ptr, <span class="type">int</span> new )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> old = *old_ptr;</span><br><span class="line">    *old_ptr = new;</span><br><span class="line">    <span class="keyword">return</span> old;</span><br><span class="line">&#125;<span class="comment">// 返回old_ptr指向的旧值，将old_ptr指向新值</span></span><br></pre></td></tr></table></figure>

硬件保证，上述操作是原子的
</code></pre>
<ul>
<li>
<p>可以理解为：一个厕所门上挂着钥匙(<code>0</code>)，两个用户都有一个名牌(<code>1</code>)，用户每次进出厕所，需要拿手上的东西和门上的东西交换，用户需要拿到钥匙才能进厕所。</p>
<ul>
<li>
<p>用户一拿名牌和钥匙交换，拿着钥匙进了厕所</p>
</li>
<li>
<p>用户二拿名牌交换，此时门上是名牌，用户二没有拿到钥匙，无法进厕所</p>
<ul>
<li>
<p>他会一直交换：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>( TestAndSet( &amp;lock -&gt; flag, <span class="number">1</span> ) == <span class="number">1</span> )</span><br><span class="line">	; <span class="comment">//spin</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>用户一从厕所出来，拿名牌和手上的钥匙交换，此时门上又有钥匙了</p>
</li>
</ul>
</li>
<li>
<p>缺点：</p>
<ul>
<li>如上述</li>
</ul>
</li>
<li>
<p>评价自旋锁：</p>
<ul>
<li>有效性：OK
<ul>
<li>公平性：不提供任何公平性保证( 对<code>test-and-set</code>而言 )</li>
<li>性能： 单核下很差，多核下还不错</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="compare-and-exchange"><a class="header-anchor" href="#compare-and-exchange"></a>compare-and-exchange</h2>
<ul>
<li>
<p>某些系统提供了另一个硬件原语: <code>compare-and-exchange</code>( on x86 )</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回ptr指向的旧值，将ptr指向新值（如果旧值与期望值相等的话）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">CompareAndExchange</span><span class="params">(  <span class="type">int</span> *ptr, <span class="type">int</span> expected, <span class="type">int</span> new )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> actual = *ptr;</span><br><span class="line">    <span class="keyword">if</span>( actual == expected )</span><br><span class="line">        *ptr = new;</span><br><span class="line">    <span class="keyword">return</span> actual;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该指令比<code>test-and-set</code>更强大</p>
</li>
</ul>
<h2 id="fetch-and-add"><a class="header-anchor" href="#fetch-and-add"></a>fetch-and-add</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">FetchAndAdd</span><span class="params">( <span class="type">int</span> *ptr )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> old = *ptr;</span><br><span class="line">    *ptr = old + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">lock_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> ticket;</span><br><span class="line">    <span class="type">int</span> turn;</span><br><span class="line">&#125; <span class="type">lock_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock_init</span><span class="params">( <span class="type">lock_t</span> *lock )</span></span><br><span class="line">&#123;</span><br><span class="line">    lock -&gt; ticket = <span class="number">0</span>;</span><br><span class="line">    lock -&gt; turn = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock</span><span class="params">(<span class="type">lock_t</span> *lock)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> myturn = FetchAndAdd( &amp;lock-&gt;ticket );</span><br><span class="line">    <span class="keyword">while</span>( lock-&gt; turn != myturn )</span><br><span class="line">        ; <span class="comment">//spin</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unlock</span><span class="params">( <span class="type">lock_t</span> *lock )</span></span><br><span class="line">&#123;</span><br><span class="line">    FetchAndAdd( &amp;lock-&gt; turn );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>解释：<code>ticket</code>是一个全局的号码，<code>turn</code>是全局的轮次。 每个用户从ticket得到自己的<code>turn</code>， 每交易一次，<code>ticket++</code>. 只有到达自己的turn的用户才能进入临界区，每当一个用户从临界区出来， <code>turn++</code></p>
<ul>
<li><code>myturn &lt; turn</code>的用户只能自旋</li>
</ul>
</li>
<li>
<p>本方法能保证所有线程都能抢到锁，只要一个线程获得了<code>ticket</code>，就能被调度</p>
<ul>
<li><code>test-and-set</code>无法保证</li>
</ul>
</li>
</ul>
<h2 id="自旋过多的解决方案"><a class="header-anchor" href="#自旋过多的解决方案"></a>自旋过多的解决方案</h2>
<ul>
<li>我们已经实现了有效、公平（ 借助<code>ticket</code>）的锁，但自旋会导致性能降低
<ul>
<li>自旋会重复检查一个不会改变的值，浪费CPU时间</li>
</ul>
</li>
</ul>
<h3 id="方案一-yield"><a class="header-anchor" href="#方案一-yield"></a>方案一  yield</h3>
<ul>
<li>在要自旋的时候，放弃CPU</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">lock</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span>( TestAndSet(&amp;flag, <span class="number">1</span> ) == <span class="number">1</span> )</span><br><span class="line">		yield(); <span class="comment">//give up the CPU</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>假定OS提供原语<code>yield()</code>，可以让线程从<code>running</code>变为<code>ready</code>
<ul>
<li>本质上，就是<code>deschedule</code></li>
</ul>
</li>
<li>假设100个线程竞争1个锁，该方案会<code>yield</code>99次，比自旋99次好，但仍不够完美</li>
</ul>
<h3 id="方案二-使用队列：-休眠代替自旋"><a class="header-anchor" href="#方案二-使用队列：-休眠代替自旋"></a>方案二 使用队列： 休眠代替自旋</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  <span class="title">lock_t</span> &#123;</span></span><br><span class="line"><span class="number">2</span>        <span class="type">int</span> flag;</span><br><span class="line"><span class="number">3</span>        <span class="type">int</span> guard;</span><br><span class="line"><span class="number">4</span>        <span class="type">queue_t</span> *q;</span><br><span class="line"><span class="number">5</span>    &#125; <span class="type">lock_t</span>;</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span>    <span class="type">void</span> <span class="title function_">lock_init</span><span class="params">(<span class="type">lock_t</span> *m)</span> &#123;</span><br><span class="line"><span class="number">8</span>        m-&gt;flag = <span class="number">0</span>;</span><br><span class="line"><span class="number">9</span>        m-&gt;guard = <span class="number">0</span>;</span><br><span class="line"><span class="number">10</span>       queue_init(m-&gt;q);</span><br><span class="line"><span class="number">11</span>   &#125;</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span>   <span class="type">void</span> <span class="title function_">lock</span><span class="params">(<span class="type">lock_t</span> *m)</span> &#123;</span><br><span class="line"><span class="number">14</span>       <span class="keyword">while</span> (TestAndSet(&amp;m-&gt;guard, <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line"><span class="number">15</span>           ; <span class="comment">//acquire guard lock by spinning</span></span><br><span class="line"><span class="number">16</span>       <span class="keyword">if</span> (m-&gt;flag == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="number">17</span>           m-&gt;flag = <span class="number">1</span>; <span class="comment">// lock is acquired</span></span><br><span class="line"><span class="number">18</span>           m-&gt;guard = <span class="number">0</span>;</span><br><span class="line"><span class="number">19</span>       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="number">20</span>           queue_add(m-&gt;q, gettid());</span><br><span class="line"><span class="number">21</span>           m-&gt;guard = <span class="number">0</span>;</span><br><span class="line"><span class="number">22</span>           park();</span><br><span class="line"><span class="number">23</span>       &#125;</span><br><span class="line"><span class="number">24</span>   &#125;</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">26</span>   <span class="type">void</span> <span class="title function_">unlock</span><span class="params">(<span class="type">lock_t</span> *m)</span> &#123;</span><br><span class="line"><span class="number">27</span>       <span class="keyword">while</span> (TestAndSet(&amp;m-&gt;guard, <span class="number">1</span>) == <span class="number">1</span>)</span><br><span class="line"><span class="number">28</span>           ; <span class="comment">//acquire guard lock by spinning</span></span><br><span class="line"><span class="number">29</span>       <span class="keyword">if</span> (queue_empty(m-&gt;q))</span><br><span class="line"><span class="number">30</span>           m-&gt;flag = <span class="number">0</span>; <span class="comment">// let go of lock; no one wants it</span></span><br><span class="line"><span class="number">31</span>       <span class="keyword">else</span></span><br><span class="line"><span class="number">32</span>           unpark(queue_remove(m-&gt;q)); <span class="comment">// hold lock (for next thread!)</span></span><br><span class="line"><span class="number">33</span>       m-&gt;guard = <span class="number">0</span>;</span><br><span class="line"><span class="number">34</span>   &#125;</span><br></pre></td></tr></table></figure>
<p>看不懂QAQ,为啥unpark的时候不把flag设为0啊，这样所有其他进程都无法获得锁</p>
<h1 id="Concurrent-Data-Structure-Based-on-Lock"><a class="header-anchor" href="#Concurrent-Data-Structure-Based-on-Lock"></a>Concurrent Data Structure Based on Lock</h1>
<ul>
<li>通过锁使得数据<code>thread safe</code></li>
<li>可扩展性： 理想状态下的多线程的每个线程就和单线程一样快，二者的比值就是并发方法的<strong>扩展性</strong></li>
</ul>
<h2 id="并发计数器"><a class="header-anchor" href="#并发计数器"></a>并发计数器</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  <span class="title">counter_t</span> &#123;</span></span><br><span class="line"><span class="number">2</span>        <span class="type">int</span>            value;</span><br><span class="line"><span class="number">3</span>        <span class="type">pthread_mutex_t</span> lock;</span><br><span class="line"><span class="number">4</span>    &#125; <span class="type">counter_t</span>;</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span>    <span class="type">void</span> <span class="title function_">init</span><span class="params">(<span class="type">counter_t</span> *c)</span> &#123;</span><br><span class="line"><span class="number">7</span>        c-&gt;value = <span class="number">0</span>;</span><br><span class="line"><span class="number">8</span>        Pthread_mutex_init(&amp;c-&gt;lock,  <span class="literal">NULL</span>);</span><br><span class="line"><span class="number">9</span>    &#125;</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">11</span>   <span class="type">void</span> <span class="title function_">increment</span><span class="params">(<span class="type">counter_t</span> *c)</span> &#123;</span><br><span class="line"><span class="number">12</span>       Pthread_mutex_lock(&amp;c-&gt;lock);</span><br><span class="line"><span class="number">13</span>       c-&gt;value++;</span><br><span class="line"><span class="number">14</span>       Pthread_mutex_unlock(&amp;c-&gt;lock);</span><br><span class="line"><span class="number">15</span>   &#125;</span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">17</span>   <span class="type">void</span> <span class="title function_">decrement</span><span class="params">(<span class="type">counter_t</span> *c)</span> &#123;</span><br><span class="line"><span class="number">18</span>       Pthread_mutex_lock(&amp;c-&gt;lock);</span><br><span class="line"><span class="number">19</span>       c-&gt;value--;</span><br><span class="line"><span class="number">20</span>       Pthread_mutex_unlock(&amp;c-&gt;lock);</span><br><span class="line"><span class="number">21</span>   &#125;</span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">23</span>   <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">counter_t</span> *c)</span> &#123;</span><br><span class="line"><span class="number">24</span>       Pthread_mutex_lock(&amp;c-&gt;lock);</span><br><span class="line"><span class="number">25</span>       <span class="type">int</span> rc = c-&gt;value;</span><br><span class="line"><span class="number">26</span>       Pthread_mutex_unlock(&amp;c-&gt;lock);</span><br><span class="line"><span class="number">27</span>       <span class="keyword">return</span> rc;</span><br><span class="line"><span class="number">28</span>   &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>性能一般</li>
</ul>
<h2 id="扩展并发计数器"><a class="header-anchor" href="#扩展并发计数器"></a>扩展并发计数器</h2>
<ul>
<li>
<p>懒惰计数器<code>sloopy counter</code>:  例如，在4CPU机器上，有四个局部计数器和一个全局计数器，每个计数器有一把锁。</p>
<ul>
<li>不同CPU上的计数器不会竞争</li>
<li>为了保持全局计数器更新，如果局部值大于阈值S，局部值就要转移到全局值（此时要获取全局锁）
<ul>
<li>阈值越大，可扩展性越好，但计时器精度更低</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  <span class="title">counter_t</span> &#123;</span></span><br><span class="line"><span class="number">2</span>        <span class="type">int</span>             global;            <span class="comment">// global count</span></span><br><span class="line"><span class="number">3</span>        <span class="type">pthread_mutex_t</span> glock;             <span class="comment">// global lock</span></span><br><span class="line"><span class="number">4</span>        <span class="type">int</span>             local[NUMCPUS];    <span class="comment">// local count (per cpu)</span></span><br><span class="line"><span class="number">5</span>        <span class="type">pthread_mutex_t</span> llock[NUMCPUS];    <span class="comment">// ... and locks</span></span><br><span class="line"><span class="number">6</span>        <span class="type">int</span>             threshold;         <span class="comment">// update frequency</span></span><br><span class="line"><span class="number">7</span>    &#125; <span class="type">counter_t</span>;</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span>    <span class="comment">// init: record threshold, init locks, init values</span></span><br><span class="line"><span class="number">10</span>   <span class="comment">//       of all local counts and global count</span></span><br><span class="line"><span class="number">11</span>   <span class="type">void</span> <span class="title function_">init</span><span class="params">(<span class="type">counter_t</span> *c, <span class="type">int</span> threshold)</span> &#123;</span><br><span class="line"><span class="number">12</span>       c-&gt;threshold = threshold;</span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span>       c-&gt;global = <span class="number">0</span>;</span><br><span class="line"><span class="number">15</span>       pthread_mutex_init(&amp;c-&gt;glock,  <span class="literal">NULL</span>);</span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">17</span>       <span class="type">int</span> i;</span><br><span class="line"><span class="number">18</span>       <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NUMCPUS; i++) &#123;</span><br><span class="line"><span class="number">19</span>           c-&gt;local[i] = <span class="number">0</span>;</span><br><span class="line"><span class="number">20</span>           pthread_mutex_init(&amp;c-&gt;llock[i],  <span class="literal">NULL</span>);</span><br><span class="line"><span class="number">21</span>       &#125;</span><br><span class="line"><span class="number">22</span>   &#125;</span><br><span class="line"><span class="number">23</span></span><br><span class="line"><span class="number">24</span>   <span class="comment">// update: usually, just grab local lock and update local amount</span></span><br><span class="line"><span class="number">25</span>   <span class="comment">//        once local count has risen by &#x27;threshold&#x27;, grab global</span></span><br><span class="line"><span class="number">26</span>   <span class="comment">//        lock and transfer local values to it</span></span><br><span class="line"><span class="number">27</span>   <span class="type">void</span> <span class="title function_">update</span><span class="params">(<span class="type">counter_t</span> *c, <span class="type">int</span> threadID, <span class="type">int</span> amt)</span> &#123;</span><br><span class="line"><span class="number">28</span>       pthread_mutex_lock(&amp;c-&gt;llock[threadID]);</span><br><span class="line"><span class="number">29</span>       c-&gt;local[threadID] += amt;               <span class="comment">// assumes amt &gt; 0</span></span><br><span class="line"><span class="number">30</span>       <span class="keyword">if</span> (c-&gt;local[threadID] &gt;= c-&gt;threshold) &#123; <span class="comment">// 局部值大于阈值，transfer to global</span></span><br><span class="line"><span class="number">31</span>           pthread_mutex_lock(&amp;c-&gt;glock);</span><br><span class="line"><span class="number">32</span>           c-&gt;global += c-&gt;local[threadID];</span><br><span class="line"><span class="number">33</span>           pthread_mutex_unlock(&amp;c-&gt;glock);</span><br><span class="line"><span class="number">34</span>           c-&gt;local[threadID] = <span class="number">0</span>;<span class="comment">//本地值清0, 注意到不会与其他cpu上的线程竞争，因此是安全的</span></span><br><span class="line"><span class="number">35</span>       &#125;</span><br><span class="line"><span class="number">36</span>       pthread_mutex_unlock(&amp;c-&gt;llock[threadID]);</span><br><span class="line"><span class="number">37</span>   &#125;</span><br><span class="line"><span class="number">38</span></span><br><span class="line"><span class="number">39</span>   <span class="comment">// get: just return global amount (which may not be perfect)</span></span><br><span class="line"><span class="number">40</span>   <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">counter_t</span> *c)</span> &#123;</span><br><span class="line"><span class="number">41</span>       pthread_mutex_lock(&amp;c-&gt;glock);</span><br><span class="line"><span class="number">42</span>       <span class="type">int</span> val = c-&gt;global;</span><br><span class="line"><span class="number">43</span>       pthread_mutex_unlock(&amp;c-&gt;glock);</span><br><span class="line"><span class="number">44</span>       <span class="keyword">return</span> val; <span class="comment">// only approximate!</span></span><br><span class="line"><span class="number">45</span>   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="并发链表"><a class="header-anchor" href="#并发链表"></a>并发链表</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>    <span class="comment">// basic node structure，单链表</span></span><br><span class="line"><span class="number">2</span>    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  <span class="title">node_t</span> &#123;</span></span><br><span class="line"><span class="number">3</span>        <span class="type">int</span>                key;</span><br><span class="line"><span class="number">4</span>        <span class="class"><span class="keyword">struct</span>  <span class="title">node_t</span>        *<span class="title">next</span>;</span></span><br><span class="line"><span class="number">5</span>    &#125; <span class="type">node_t</span>;</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span>    <span class="comment">// basic list structure (one used per list)</span></span><br><span class="line"><span class="number">8</span>    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  <span class="title">list_t</span> &#123;</span></span><br><span class="line"><span class="number">9</span>        <span class="type">node_t</span>                *head;</span><br><span class="line"><span class="number">10</span>       <span class="type">pthread_mutex_t</span>    lock;</span><br><span class="line"><span class="number">11</span>   &#125; <span class="type">list_t</span>;</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span>   <span class="type">void</span> <span class="title function_">List_Init</span><span class="params">(<span class="type">list_t</span> *L)</span> &#123;</span><br><span class="line"><span class="number">14</span>       L-&gt;head = <span class="literal">NULL</span>;</span><br><span class="line"><span class="number">15</span>       pthread_mutex_init(&amp;L-&gt;lock,  <span class="literal">NULL</span>);</span><br><span class="line"><span class="number">16</span>   &#125;</span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="number">18</span>   <span class="type">int</span> <span class="title function_">List_Insert</span><span class="params">(<span class="type">list_t</span> *L, <span class="type">int</span> key)</span> &#123;</span><br><span class="line"><span class="number">19</span>       pthread_mutex_lock(&amp;L-&gt;lock);</span><br><span class="line"><span class="number">20</span>       <span class="type">node_t</span> *new = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">node_t</span>));</span><br><span class="line"><span class="number">21</span>       <span class="keyword">if</span> (new == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="number">22</span>           perror(<span class="string">&quot;malloc&quot;</span>);</span><br><span class="line"><span class="number">23</span>           pthread_mutex_unlock(&amp;L-&gt;lock); <span class="comment">//malloc失败，记得释放锁！</span></span><br><span class="line"><span class="number">24</span>           <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// fail</span></span><br><span class="line"><span class="number">25</span>       &#125;</span><br><span class="line"><span class="number">26</span>       new-&gt;key = key;</span><br><span class="line"><span class="number">27</span>       new-&gt;next = L-&gt;head;</span><br><span class="line"><span class="number">28</span>       L-&gt;head = new;</span><br><span class="line"><span class="number">29</span>       pthread_mutex_unlock(&amp;L-&gt;lock);</span><br><span class="line"><span class="number">30</span>       <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// success</span></span><br><span class="line"><span class="number">31</span>   &#125;</span><br><span class="line"><span class="number">32</span></span><br><span class="line"><span class="number">33</span>   <span class="type">int</span> <span class="title function_">List_Lookup</span><span class="params">(<span class="type">list_t</span> *L, <span class="type">int</span> key)</span> &#123;</span><br><span class="line"><span class="number">34</span>       pthread_mutex_lock(&amp;L-&gt;lock);</span><br><span class="line"><span class="number">35</span>       <span class="type">node_t</span> *curr = L-&gt;head;</span><br><span class="line"><span class="number">36</span>       <span class="keyword">while</span> (curr) &#123;</span><br><span class="line"><span class="number">37</span>           <span class="keyword">if</span> (curr-&gt;key == key) &#123;</span><br><span class="line"><span class="number">38</span>               pthread_mutex_unlock(&amp;L-&gt;lock); <span class="comment">//在意外退出时unlock</span></span><br><span class="line"><span class="number">39</span>               <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// success</span></span><br><span class="line"><span class="number">40</span>           &#125;</span><br><span class="line"><span class="number">41</span>           curr = curr-&gt;next;</span><br><span class="line"><span class="number">42</span>       &#125;</span><br><span class="line"><span class="number">43</span>       pthread_mutex_unlock(&amp;L-&gt;lock);</span><br><span class="line"><span class="number">44</span>       <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// failure</span></span><br><span class="line"><span class="number">45</span>   &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在开头lock,结尾unlock, 注意到<code>malloc</code>失败后也要记得unlock
<ul>
<li>这种在代码中多次unlock的写法很丑陋！ 应该修改
<ul>
<li>要么出错的地方不要放在临界区</li>
<li>要么出错时break到主循环，在主循环内统一unlock</li>
</ul>
</li>
</ul>
</li>
<li>这是粗粒度的写法，可以更细粒度地优化：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">18</span>   <span class="type">int</span> <span class="title function_">List_Insert</span><span class="params">(<span class="type">list_t</span> *L, <span class="type">int</span> key)</span> &#123;</span><br><span class="line"><span class="number">19</span>      <span class="comment">//local的数据，不需要锁保护</span></span><br><span class="line"><span class="number">20</span>       <span class="type">node_t</span> *new = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">node_t</span>));</span><br><span class="line"><span class="number">21</span>       <span class="keyword">if</span> (new == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="number">22</span>           perror(<span class="string">&quot;malloc&quot;</span>);</span><br><span class="line"><span class="number">23</span>           pthread_mutex_unlock(&amp;L-&gt;lock); <span class="comment">//出错时不在临界区，无需unlock</span></span><br><span class="line"><span class="number">24</span>           <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line"><span class="number">25</span>       &#125;</span><br><span class="line"><span class="number">26</span>       new-&gt;key = key;</span><br><span class="line"><span class="number">27</span>    	<span class="comment">//just lock critical section !!!!!</span></span><br><span class="line"><span class="number">28</span>       pthread_mutex_lock(&amp;L-&gt;lock);</span><br><span class="line"><span class="number">29</span>       new-&gt;next = L-&gt;head;</span><br><span class="line"><span class="number">30</span>       L-&gt;head = new;</span><br><span class="line"><span class="number">31</span>       pthread_mutex_unlock(&amp;L-&gt;lock);</span><br><span class="line"><span class="number">32</span>       <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"><span class="number">33</span>   &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">33</span>   <span class="type">int</span> <span class="title function_">List_Lookup</span><span class="params">(<span class="type">list_t</span> *L, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    	 <span class="type">int</span> rv = <span class="number">-1</span>;<span class="comment">// success / failure</span></span><br><span class="line"><span class="number">34</span>       pthread_mutex_lock(&amp;L-&gt;lock);</span><br><span class="line"><span class="number">35</span>       <span class="type">node_t</span> *curr = L-&gt;head;</span><br><span class="line"><span class="number">36</span>       <span class="keyword">while</span> (curr) &#123;</span><br><span class="line"><span class="number">37</span>           <span class="keyword">if</span> (curr-&gt;key == key) &#123;</span><br><span class="line"><span class="number">38</span>               rv=<span class="number">0</span>;</span><br><span class="line"><span class="number">39</span>               <span class="keyword">break</span>; <span class="comment">// 跳出主循环，在主循环内统一unlock ！！！</span></span><br><span class="line"><span class="number">40</span>           &#125;</span><br><span class="line"><span class="number">41</span>           curr = curr-&gt;next;</span><br><span class="line"><span class="number">42</span>       &#125;</span><br><span class="line"><span class="number">43</span>       pthread_mutex_unlock(&amp;L-&gt;lock);</span><br><span class="line"><span class="number">44</span>       <span class="keyword">return</span> rv; <span class="comment">// now both success and failure</span></span><br><span class="line"><span class="number">45</span>   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="扩展链表"><a class="header-anchor" href="#扩展链表"></a>扩展链表</h2>
<ul>
<li>过手锁<code>hand-overohand locking</code>: 每个节点都有一个锁，替代之前整个链表一个锁，遍历链表时，首先抢占下一个节点的锁，然后释放当前节点的锁
<ul>
<li>开销巨大，未必比单锁快</li>
</ul>
</li>
<li>注意控制流的变化导致函数返回和退出，这种情况下要<strong>记得释放锁</strong></li>
</ul>
<h2 id="并发队列"><a class="header-anchor" href="#并发队列"></a>并发队列</h2>
<p>粗粒度的锁很简单，接下来使用细粒度的锁</p>
<ul>
<li>对队列头和尾各设置一个锁
<ul>
<li>因为出队只访问<code>head</code>锁， 入队只访问<code>tail</code>锁， 两把锁使得出队和入对可以并发执行</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  <span class="title">node_t</span> &#123;</span></span><br><span class="line"><span class="number">2</span>        <span class="type">int</span>                 value;</span><br><span class="line"><span class="number">3</span>        <span class="class"><span class="keyword">struct</span>  <span class="title">node_t</span>     *<span class="title">next</span>;</span></span><br><span class="line"><span class="number">4</span>    &#125; <span class="type">node_t</span>;</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span>    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  <span class="title">queue_t</span> &#123;</span></span><br><span class="line"><span class="number">7</span>        <span class="type">node_t</span>            *head;</span><br><span class="line"><span class="number">8</span>        <span class="type">node_t</span>            *tail;</span><br><span class="line"><span class="number">9</span>        <span class="type">pthread_mutex_t</span>    headLock;</span><br><span class="line"><span class="number">10</span>       <span class="type">pthread_mutex_t</span>    tailLock;</span><br><span class="line"><span class="number">11</span>   &#125; <span class="type">queue_t</span>;</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">13</span>   <span class="type">void</span> <span class="title function_">Queue_Init</span><span class="params">(<span class="type">queue_t</span> *q)</span> &#123;</span><br><span class="line"><span class="number">14</span>       <span class="type">node_t</span> *tmp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">node_t</span>));</span><br><span class="line"><span class="number">15</span>       tmp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="number">16</span>       q-&gt;head = q-&gt;tail = tmp;</span><br><span class="line"><span class="number">17</span>       pthread_mutex_init(&amp;q-&gt;headLock,  <span class="literal">NULL</span>);</span><br><span class="line"><span class="number">18</span>       pthread_mutex_init(&amp;q-&gt;tailLock,  <span class="literal">NULL</span>);</span><br><span class="line"><span class="number">19</span>   &#125;</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">21</span>   <span class="type">void</span> <span class="title function_">Queue_Enqueue</span><span class="params">(<span class="type">queue_t</span> *q, <span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="number">22</span>       <span class="type">node_t</span> *tmp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">node_t</span>));</span><br><span class="line"><span class="number">23</span>       assert(tmp != <span class="literal">NULL</span>);</span><br><span class="line"><span class="number">24</span>       tmp-&gt;value = value;</span><br><span class="line"><span class="number">25</span>       tmp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="number">26</span></span><br><span class="line"><span class="number">27</span>       pthread_mutex_lock(&amp;q-&gt;tailLock);<span class="comment">//入队只访问`tail`锁</span></span><br><span class="line"><span class="number">28</span>       q-&gt;tail-&gt;next = tmp;</span><br><span class="line"><span class="number">29</span>       q-&gt;tail = tmp;</span><br><span class="line"><span class="number">30</span>       pthread_mutex_unlock(&amp;q-&gt;tailLock);</span><br><span class="line"><span class="number">31</span>   &#125;</span><br><span class="line"><span class="number">32</span></span><br><span class="line"><span class="number">33</span>   <span class="type">int</span> <span class="title function_">Queue_Dequeue</span><span class="params">(<span class="type">queue_t</span> *q, <span class="type">int</span> *value)</span> &#123;</span><br><span class="line"><span class="number">34</span>       pthread_mutex_lock(&amp;q-&gt;headLock);<span class="comment">//出队只访问`head`锁</span></span><br><span class="line"><span class="number">35</span>       <span class="type">node_t</span> *tmp = q-&gt;head;</span><br><span class="line"><span class="number">36</span>       <span class="type">node_t</span> *newHead = tmp-&gt;next;</span><br><span class="line"><span class="number">37</span>       <span class="keyword">if</span> (newHead == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="number">38</span>           pthread_mutex_unlock(&amp;q-&gt;headLock);</span><br><span class="line"><span class="number">39</span>           <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// queue was empty，这种写法（在子控制流unlock）很丑陋，应该像之前《重写并发链表》的 List_Lookup() 一样改造</span></span><br><span class="line"><span class="number">40</span>       &#125;</span><br><span class="line"><span class="number">41</span>       *value = newHead-&gt;value;</span><br><span class="line"><span class="number">42</span>       q-&gt;head = newHead;</span><br><span class="line"><span class="number">43</span>       pthread_mutex_unlock(&amp;q-&gt;headLock);</span><br><span class="line"><span class="number">44</span>       <span class="built_in">free</span>(tmp);</span><br><span class="line"><span class="number">45</span>       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">46</span>   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="并发散列表"><a class="header-anchor" href="#并发散列表"></a>并发散列表</h2>
<ul>
<li>每个元素都是一个并发链表，也称为“散列桶”
<ul>
<li>每个散列桶都有一个锁</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>    <span class="meta">#<span class="keyword">define</span> BUCKETS (101)</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span>    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  <span class="title">hash_t</span> &#123;</span></span><br><span class="line"><span class="number">4</span>        <span class="type">list_t</span> lists[BUCKETS];</span><br><span class="line"><span class="number">5</span>    &#125; <span class="type">hash_t</span>;</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span>    <span class="type">void</span> <span class="title function_">Hash_Init</span><span class="params">(<span class="type">hash_t</span> *H)</span> &#123;</span><br><span class="line"><span class="number">8</span>        <span class="type">int</span> i;</span><br><span class="line"><span class="number">9</span>        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; BUCKETS; i++) &#123;</span><br><span class="line"><span class="number">10</span>           List_Init(&amp;H-&gt;lists[i]);</span><br><span class="line"><span class="number">11</span>       &#125;</span><br><span class="line"><span class="number">12</span>   &#125;</span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">14</span>   <span class="type">int</span> <span class="title function_">Hash_Insert</span><span class="params">(<span class="type">hash_t</span> *H, <span class="type">int</span> key)</span> &#123;</span><br><span class="line"><span class="number">15</span>       <span class="type">int</span> bucket = key % BUCKETS;</span><br><span class="line"><span class="number">16</span>       <span class="keyword">return</span> List_Insert(&amp;H-&gt;lists[bucket], key);</span><br><span class="line"><span class="number">17</span>   &#125;</span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">19</span>   <span class="type">int</span> <span class="title function_">Hash_Lookup</span><span class="params">(<span class="type">hash_t</span> *H, <span class="type">int</span> key)</span> &#123;</span><br><span class="line"><span class="number">20</span>       <span class="type">int</span> bucket = key % BUCKETS;</span><br><span class="line"><span class="number">21</span>       <span class="keyword">return</span> List_Lookup(&amp;H-&gt;lists[bucket], key);</span><br><span class="line"><span class="number">22</span>   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="Conclusion"><a class="header-anchor" href="#Conclusion"></a>Conclusion</h2>
<ul>
<li>Knuth定律： <strong>避免不成熟的优化</strong>
<ul>
<li>先最简单的方案，也就是加大锁（ <code>big kernel lock, BKL. in linux kernel</code> ）开始， 如果有性能问题再改进</li>
</ul>
</li>
<li>控制流变化时记得获取和释放锁</li>
<li>增加并发并不一定能提高性能
<ul>
<li>过手锁</li>
</ul>
</li>
</ul>
<h1 id="Conditional-Variable"><a class="header-anchor" href="#Conditional-Variable"></a>Conditional Variable</h1>
<ul>
<li>
<p>条件变量： 一个显式<strong>队列</strong>， 当<code>condition</code>不满足时，线程把自己加入队列，<code>waiting</code>该条件。 当另外某个线程改变该<code>condition</code>时，就可以<strong>唤醒</strong><code>signal</code>一个或者多个（假唤醒）等待线程，让它们继续执行</p>
<ul>
<li>
<p><code>wait(  mutex )</code>: 该函数假定在<code>wait()</code>时， <code>mutex</code>是上锁状态。 <code>wait()</code>的职责是释放锁， 并让调用进程休眠（原子地）。 当线程被唤醒时（在另外某个线程<code>signal</code>它之后）它重新获取锁，再返回调用者</p>
<ul>
<li>
<p>这样使得<code>wait()</code>写起来很方便：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> Pthread_mutex_lock(&amp;m);</span><br><span class="line"> <span class="keyword">while</span>(done==<span class="number">0</span>)</span><br><span class="line">    Pthread_cond_wait(&amp;c,&amp;m);<span class="comment">//wait释放锁，线程进入休眠。 当被signal时，wait获取锁，再返回调用者。 不用手写unlock\lock了</span></span><br><span class="line">Pthread_mutex_unlock(&amp;m);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>总结：<code>signal</code>和<code>wait</code>时总是持有锁 + 需要状态变量</p>
<ul>
<li><code>wait()</code>的语义强制要求调用时已经持有锁，因此不需要操心</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;mythreads.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> done = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">pthread_mutex_t</span> m = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"><span class="type">pthread_cond_t</span> c = PTHREAD_COND_INITIALIZER;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="type">void</span> <span class="title function_">thr_exit</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line">     Pthread_mutex_lock(&amp;m);</span><br><span class="line">     done = <span class="number">1</span>;</span><br><span class="line">     Pthread_cond_signal(&amp;c);</span><br><span class="line">     Pthread_mutex_unlock(&amp;m);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="type">void</span> <span class="title function_">thr_join</span><span class="params">()</span></span><br><span class="line"> &#123;</span><br><span class="line">     Pthread_mutex_lock(&amp;m);</span><br><span class="line">     <span class="keyword">while</span>(done==<span class="number">0</span>)<span class="comment">// 推荐使用while循环而不是if,原因之后解释</span></span><br><span class="line">        Pthread_cond_wait(&amp;c,&amp;m);</span><br><span class="line">    Pthread_mutex_unlock(&amp;m);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> * <span class="title function_">child</span><span class="params">( <span class="type">void</span>*arg )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">&quot;child\n&quot;</span> );</span><br><span class="line">    thr_exit();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">( <span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span>  p;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;parent: begin\n&quot;</span>);</span><br><span class="line">    Pthread_create(&amp;p, <span class="literal">NULL</span>,child, <span class="literal">NULL</span>);</span><br><span class="line">    thr_join();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;parent: end\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>情况一： parent创建出子进程后，自己继续运行（假设单核），然后马上调用<code>thr_join()</code> 等待子进程，此时它会先获取锁，检查子进程是否完成（还没有），然后调用<code>wait()</code>，让自己休眠。 子线程最终得以运行，打印出“child”， 并调用<code>thr_exit()</code>唤醒父进程， 而<code>exit()</code>原子地设置<code>done</code>，向父进程<code>signal</code>， 最后父进程会运行，从<code>wait()</code>返回并持有锁， 释放锁， 打印出“parent: end”</li>
<li>情况二：子进程创建后立刻运行， 设置<code>done = 1</code>， 调用<code>signal()</code>唤醒其他线程（这里没有其他线程），然后结束。 副进程运行后，调用<code>thr_join()</code>时，发现<code>done</code>已经为1了，就直接返回</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">parent: begin</span><br><span class="line">child</span><br><span class="line">parent: end</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>状态变量<code>done</code>是<strong>必要</strong>的</p>
<p>假如没有：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">thr_exit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Pthread_mutex_lock(&amp;m);</span><br><span class="line">    Pthread_cond_signal(&amp;c);</span><br><span class="line">    Pthread_mutex_unlock(&amp;m);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">thr_join</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   Pthread_mutex_lock(&amp;m);</span><br><span class="line">   Pthread_cond_wait(&amp;c,&amp;m);</span><br><span class="line">   Pthread_mutex_unlock(&amp;m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>假如子线程立刻运行，且调用<code>thr_exit</code>，此时子进程<code>signal()</code>，条件变量上没有睡眠的线程。 父线程运行时，就会调用<code>wait（）</code>并卡在这里，没有线程会<code>signal（）</code>它</li>
</ul>
</li>
<li>
<p>发信号和等待时加锁也是必要的</p>
<p>假如没有：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">thr_exit</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    done = <span class="number">1</span>;</span><br><span class="line">    Pthread_cond_signal(&amp;c);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="type">void</span> <span class="title function_">thr_join</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(done==<span class="number">0</span>)<span class="comment">// 推荐使用while循环而不是if,原因之后解释</span></span><br><span class="line">       Pthread_cond_wait(&amp;c,&amp;m);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<ul>
<li>如果父进程调用<code>thr_join()</code>,检查<code>done = 0</code>，试图睡眠，然而在调用<code>wait（）</code>前被中断（因为没有锁，此时其它进程就可以操纵临界区）， 子进程修改变量为1,发出<code>signal（）</code>，此时没有睡眠进程。 父进程再次运行时，就会卡在<code>wait()</code>，没有线程可以唤醒它</li>
</ul>
</li>
</ul>
<h2 id="生产者-消费者（有界缓冲区）问题"><a class="header-anchor" href="#生产者-消费者（有界缓冲区）问题"></a>生产者/消费者（有界缓冲区）问题</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//30_7.c</span></span><br><span class="line"><span class="type">cond_t</span> cond;</span><br><span class="line"><span class="type">mutex_t</span> mutex;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">producer</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> loops = (<span class="type">int</span>) arg;</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>; i &lt; loops; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        Pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">1</span>)</span><br><span class="line">            Pthread_cond_wait(&amp;cond,&amp;mutex);</span><br><span class="line">        put(i);</span><br><span class="line">        Pthread_cond_signal(&amp;cond);</span><br><span class="line">        Pthread_mutex_unlock(&amp;mutex);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">consumer</span><span class="params">( <span class="type">void</span> *arg )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span> loops = (<span class="type">int</span>) arg;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; loops; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        <span class="keyword">while</span>( count == <span class="number">0</span> )<span class="comment">//必须用while,不能用if</span></span><br><span class="line">            pthread_cond_wait(&amp;cond,&amp;mutex);</span><br><span class="line">        <span class="type">int</span> tmp = get();</span><br><span class="line">        Pthread_cond_signal(&amp;cond);</span><br><span class="line">        Pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        ptrintf(<span class="string">&quot;%d\n&quot;</span>,tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>假设使用<code>if</code>:  假设有两个消费者$T_{c1}$和，$T_{c2}$ 生产者$T_{p}$,
<ul>
<li>若$T_{c1}$先运行，卡在<code>wait</code>， 接着$T_p$运行，在缓冲区放一个数字，然后<code>signal</code>唤醒$T_{c1}$， 生产者继续循环，直到发现缓冲区满后睡眠</li>
<li>此时如果$T_{c2}$抢先执行，消费了缓冲区里的值，然后$T_{c1}$从<code>wait</code>处恢复运行，调用<code>get</code>，此时发生error！</li>
<li>原因在于，生产者<code>signal</code>唤醒了$T_{c1}$， 但是没有保证$T_{c1}$立即执行 （或者说，没有保证$T_{c1}$执行之前，缓冲区没有再发生变化）
<ul>
<li><code>signal</code>的这种语义称为<code>Mesa</code>语义</li>
</ul>
</li>
</ul>
</li>
<li>解决方案是： <strong>始终使用<code>while</code></strong>，这样当$T_{c1}$醒来时，会再次检查<code>count==0</code>，发现为缓冲区0则继续<code>wait</code>。这样就避免了error</li>
</ul>
<h3 id="使用两个条件变量"><a class="header-anchor" href="#使用两个条件变量"></a>使用两个条件变量</h3>
<ul>
<li>上述代码依然有问题： 假设$T_{c1}$和$T_{c2}$先运行，都卡在<code>wait</code>， $T_{p}$开始运行，往缓冲区放入一个值，发出<code>signal</code>， 继续循环，直到发现缓冲区满后睡眠</li>
<li>$T_{c1}$醒来，消费了这个值，然后在该条件上<code>signal</code>，注意，此时理应唤醒$T_{p}$， 但事实上有可能唤醒$T_{c2}$</li>
<li>假如唤醒$T_{c2}$，因为缓冲区为空， 它会卡在<code>wait</code>，<strong>此时三个线程都处于睡眠</strong></li>
<li>原因在于， <strong><code>signal</code>没有指向性</strong>， 消费者不应唤醒消费者，只应该唤醒生产者</li>
<li>解决方案：使用两个条件变量， 生产者睡在<code>empty</code>， 消费者睡在<code>fill</code>
<ul>
<li>由此也看出，<strong>线程唤醒需要满足什么条件，它就应该睡在哪个条件变量上</strong>，这是<strong>条件变量的命名方式</strong>
<ul>
<li>比如消费者需要缓冲区<code>fill</code>才能醒来，因此该条件变量就命名为<code>fill</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//30_8.c</span></span><br><span class="line"><span class="type">cond_t</span> empty,fill;</span><br><span class="line"><span class="type">mutex_t</span> mutex;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">producer</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> loops = (<span class="type">int</span>) arg;</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>; i &lt; loops; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        Pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">1</span>)</span><br><span class="line">            Pthread_cond_wait(&amp;empty,&amp;mutex);</span><br><span class="line">        put(i);</span><br><span class="line">        Pthread_cond_signal(&amp;fill);</span><br><span class="line">        Pthread_mutex_unlock(&amp;mutex);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">consumer</span><span class="params">( <span class="type">void</span> *arg )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span> loops = (<span class="type">int</span>) arg;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; loops; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        <span class="keyword">while</span>( count == <span class="number">0</span> )</span><br><span class="line">            pthread_cond_wait(&amp;fill,&amp;mutex);</span><br><span class="line">        <span class="type">int</span> tmp = get();</span><br><span class="line">        Pthread_cond_signal(&amp;empty);</span><br><span class="line">        Pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        ptrintf(<span class="string">&quot;%d\n&quot;</span>,tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="最终版本"><a class="header-anchor" href="#最终版本"></a>最终版本</h4>
<ul>
<li>这是最终版本，生产者只有缓冲区满了的时候才会睡眠
<ul>
<li>因此信号量命名为<code>empty</code>有点名不符实（ <code>fill</code>也是如此，事实上缓冲区有一个值就可以唤醒消费者了 ）</li>
<li>对<code>get()</code>和<code>put()</code>的调用保证上了锁</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//30_9.c  生产者消费者问题最终版</span></span><br><span class="line"><span class="type">int</span> buffer[MAX];</span><br><span class="line"><span class="type">int</span> fill_ptr = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> use_ptr = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    buffer[fill_ptr] = value;</span><br><span class="line">    fill_ptr = (fill_ptr+<span class="number">1</span>)%MAX;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get</span><span class="params">()</span><span class="comment">//拿取use_ptr指向的值，use_ptr++</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tmp = buffer[use_ptr];</span><br><span class="line">    use_ptr = (use_ptr+<span class="number">1</span>)%MAX;</span><br><span class="line">    count--;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">cond_t</span> empty,fill;</span><br><span class="line"><span class="type">mutex_t</span> mutex;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">producer</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> loops = (<span class="type">int</span>) arg;</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>; i &lt; loops; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        Pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        <span class="keyword">if</span>(count == MAX)</span><br><span class="line">            Pthread_cond_wait(&amp;empty,&amp;mutex);</span><br><span class="line">        put(i);</span><br><span class="line">        Pthread_cond_signal(&amp;fill);</span><br><span class="line">        Pthread_mutex_unlock(&amp;mutex);       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">consumer</span><span class="params">( <span class="type">void</span> *arg )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span> loops = (<span class="type">int</span>) arg;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; loops; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        <span class="keyword">while</span>( count == <span class="number">0</span> )</span><br><span class="line">            pthread_cond_wait(&amp;fill,&amp;mutex);</span><br><span class="line">        <span class="type">int</span> tmp = get();</span><br><span class="line">        Pthread_cond_signal(&amp;empty);</span><br><span class="line">        Pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        ptrintf(<span class="string">&quot;%d\n&quot;</span>,tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="覆盖条件"><a class="header-anchor" href="#覆盖条件"></a>覆盖条件</h2>
<ul>
<li><code>signal</code>只会唤醒一个线程</li>
<li>考虑一个内存分配程序。 当没有空闲内存时， $T_{c1}$和$T_{c2}$各自<code>allocate</code>1000和10字节。 它们都因此卡在<code>wait</code>
<ul>
<li>此时$T_{p}$ <code>free</code>了50字节，它发出signal，此时有可能唤醒的是$T_{c1}$， 后者因为内存不够，依然继续睡眠</li>
<li>上述代码因此无法正常工作</li>
</ul>
</li>
<li>解决方案是采用广播的signal, 即<code>pthread_cond_broadcast()</code> 代替<code>pthread_cond_signal</code>,唤醒所有等待线程，这个条件变量称为<strong>广播条件<code>covering condition</code></strong>
<ul>
<li>会影响性能</li>
<li>该方案虽然很笨，但有时很有用</li>
<li>当然，<code>30_8.c</code>的代码也可以采用此解决方案。 但我当时有更好的办法（用两个条件变量）</li>
</ul>
</li>
</ul>
<h1 id="信号量"><a class="header-anchor" href="#信号量"></a>信号量</h1>
<ul>
<li>
<p>def： 有一个整数值的对象，可以用<code>sem_wait()</code>和<code>sem_post()</code>操作（ in Posix ）</p>
<ul>
<li>因此要初始化</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="type">sem_t</span> s;</span><br><span class="line">sem_init(&amp;s, <span class="number">0</span> , <span class="number">0</span>); 第二个参数一般设为<span class="number">0</span>,表示该信号量在同一个进程的多个线程内贡献</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sem_wait</span><span class="params">(<span class="type">sem_t</span> *s)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//decrement the value of semaphore s by one</span></span><br><span class="line">    <span class="comment">//wait if value of semaphore s is a negative</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_post</span><span class="params">(<span class="type">sem_t</span> *s)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//increment the value of semaphore s by one</span></span><br><span class="line">    <span class="comment">//if there are one or more threads waiting, wake one</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>在这个实现中， 信号量的值为负数时，该值就是等待线程的个数</p>
</li>
<li>
<p><strong>信号量有时很难设计，此时还是使用条件变量更靠谱</strong></p>
</li>
</ul>
<h2 id="二值信号量（锁）"><a class="header-anchor" href="#二值信号量（锁）"></a>二值信号量（锁）</h2>
<ul>
<li>可以把信号量作为锁(<strong>其值设为1</strong>)</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">sem_t</span> m;</span><br><span class="line">sem_init(&amp;m, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">//下文解释为何是1</span></span><br><span class="line"></span><br><span class="line">sem_wait(&amp;m);</span><br><span class="line"><span class="comment">//critical section</span></span><br><span class="line">sem_post(&amp;m);</span><br></pre></td></tr></table></figure>
<ul>
<li>假设有两个线程，$T_{1}$调用<code>sem_wait()</code>，将信号量值减为0, 因为0不是负数，因此$T_{c1}$从<code>wait</code>返回并继续，它可以自由进入临界区， 若没有其他线程尝试获取锁，当$T_{1}$调用<code>sem_post()</code>时，会将信号重置为1</li>
<li>如果$T_{1}$持有锁时，$T_{2}$尝试获取锁（即调用<code>sem_wait()</code>），此时它会将信号量减为<code>-1</code>。然后卡在这里。 $T_{1}$再次运行，执行<code>sem_post()</code>，  将信号量值增加到0,唤醒等待的线程（$T_{2}$），然后$T_{2}$就能获取锁
<ul>
<li>当$T_{2}$执行结束时，执行<code>sem_post()</code>，  将信号量值增加到1</li>
</ul>
</li>
</ul>
<h2 id="信号量用作条件变量"><a class="header-anchor" href="#信号量用作条件变量"></a>信号量用作条件变量</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">sem_t</span> s;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">child</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;child\n&quot;</span>);</span><br><span class="line">    sem_post(&amp;s);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    sem_init( &amp;s, <span class="number">0</span>, <span class="number">0</span> );<span class="comment">//信号量设为0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;parent: begin\n&quot;</span>);</span><br><span class="line">    <span class="type">pthread_t</span> c;</span><br><span class="line">    Pthread_create(c, <span class="literal">NULL</span>, child, <span class="literal">NULL</span>);</span><br><span class="line">    sem_wait(&amp;s); <span class="comment">// wait here for child</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;parent: end\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">parent: begin</span><br><span class="line">child</span><br><span class="line">parent: end</span><br></pre></td></tr></table></figure>
<ul>
<li>考虑两种情况：
<ol>
<li>子进程没有先运行，父进程先调用<code>sem_wait()</code>,将信号量减为-1,父进程卡在<code>wait</code>， 然后子进程运行，调用<code>sem_post()</code>，信号量增加为0,唤醒父线程</li>
<li>子线程在父线程调用<code>sem_post()</code>之前就运行结束，结果正常</li>
</ol>
</li>
</ul>
<h2 id="生产者-消费者（有界缓冲区）问题-2"><a class="header-anchor" href="#生产者-消费者（有界缓冲区）问题-2"></a>生产者/消费者（有界缓冲区）问题</h2>
<p>考虑用信号量实现生产者/消费者问题：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> buffer[MAX];</span><br><span class="line"><span class="type">int</span> fill_ptr = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> use_ptr = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    buffer[fill_ptr] = value;</span><br><span class="line">    fill_ptr = (fill_ptr+<span class="number">1</span>)%MAX;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get</span><span class="params">()</span><span class="comment">//拿取use_ptr指向的值，use_ptr++</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tmp = buffer[use_ptr];</span><br><span class="line">    use_ptr = (use_ptr+<span class="number">1</span>)%MAX;</span><br><span class="line">    count--;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">sem_t</span> empty,fill;</span><br><span class="line"><span class="comment">// mutex_t mutex;</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">producer</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> loops = (<span class="type">int</span>) arg;</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>; i &lt; loops; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        sem_wait(&amp;empty);</span><br><span class="line">        put(i);</span><br><span class="line">        sem_post(&amp;fill);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">consumer</span><span class="params">( <span class="type">void</span> *arg )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span> loops = (<span class="type">int</span>) arg;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; loops; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        sem_wait(&amp;fill);</span><br><span class="line">        <span class="type">int</span> tmp = get();</span><br><span class="line">        sem_post(&amp;empty);</span><br><span class="line">        ptrintf(<span class="string">&quot;%d\n&quot;</span>,tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这段代码的问题在于： 对假设MAX大于1,此时可以有两个生产者（$T_1$, $T_2$）同时调用<code>put()</code>，如果$T_1$先放入数据，然后在更新计时器时中断，$T_2$运行，它会在该位置再放入一个值，发生error
<ul>
<li>这是因为在MAX&gt;1时，信号量的使用不能保证<code>put（）</code>的原子性</li>
</ul>
</li>
<li>解决方案：上锁</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> buffer[MAX];</span><br><span class="line"><span class="type">int</span> fill_ptr = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> use_ptr = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    buffer[fill_ptr] = value;</span><br><span class="line">    fill_ptr = (fill_ptr+<span class="number">1</span>)%MAX;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get</span><span class="params">()</span><span class="comment">//拿取use_ptr指向的值，use_ptr++</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tmp = buffer[use_ptr];</span><br><span class="line">    use_ptr = (use_ptr+<span class="number">1</span>)%MAX;</span><br><span class="line">    count--;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">sem_t</span> empty,fill,mutex;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">producer</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> loops = (<span class="type">int</span>) arg;</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>; i &lt; loops; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        sem_wait(&amp;mutex);</span><br><span class="line">        sem_wait(&amp;empty);</span><br><span class="line">        put(i);</span><br><span class="line">        sem_post(&amp;mutex);</span><br><span class="line">        sem_post(&amp;fill);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">consumer</span><span class="params">( <span class="type">void</span> *arg )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span> loops = (<span class="type">int</span>) arg;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; loops; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        sem_wait(&amp;mutex);</span><br><span class="line">        sem_wait(&amp;fill);</span><br><span class="line">        <span class="type">int</span> tmp = get();</span><br><span class="line">        sem_post(&amp;empty);</span><br><span class="line">        sem_post(&amp;mutex);</span><br><span class="line">        ptrintf(<span class="string">&quot;%d\n&quot;</span>,tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    sem_init(&amp;empty, <span class="number">0</span>, MAX);</span><br><span class="line">    sem_init(&amp;fill, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    sem_init(&amp;mutex, <span class="number">0</span>, <span class="number">1</span>);<span class="comment">// mutex = 1 because it is a lock</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>这段代码依然有问题： 因为在<code>fill</code>和<code>empty</code>上睡着时没有释放锁（传统的<code>pthread_wait</code>是会释放锁的，但是这里是用信号量实现的锁）。 因此消费者在<code>fill</code>上睡着时，二值信号量锁<code>mutex</code>没有释放，生产者试图对<code>mutex</code>调用<code>sem_wait</code>也被卡住。</p>
<ul>
<li>消费者等待在<code>full</code>，持有<code>mutex</code>， 生产者可以signal <code>fill</code>，却在等待<code>mutex</code>，发生了<strong>死锁</strong></li>
</ul>
</li>
<li>
<p>解决方案： 把对<code>mutex</code>的获取和释放调整为紧挨着临界区</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> buffer[MAX];</span><br><span class="line"><span class="type">int</span> fill_ptr = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> use_ptr = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    buffer[fill_ptr] = value;</span><br><span class="line">    fill_ptr = (fill_ptr+<span class="number">1</span>)%MAX;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get</span><span class="params">()</span><span class="comment">//拿取use_ptr指向的值，use_ptr++</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tmp = buffer[use_ptr];</span><br><span class="line">    use_ptr = (use_ptr+<span class="number">1</span>)%MAX;</span><br><span class="line">    count--;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">sem_t</span> empty,fill,mutex;</span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">producer</span><span class="params">(<span class="type">void</span> *arg)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> loops = (<span class="type">int</span>) arg;</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>; i &lt; loops; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        sem_wait(&amp;empty);</span><br><span class="line">        sem_wait(&amp;mutex);</span><br><span class="line">        put(i);</span><br><span class="line">        sem_post(&amp;mutex);</span><br><span class="line">        sem_post(&amp;fill)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">consumer</span><span class="params">( <span class="type">void</span> *arg )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>; </span><br><span class="line">    <span class="type">int</span> loops = (<span class="type">int</span>) arg;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; loops; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        sem_wait(&amp;fill);</span><br><span class="line">        sem_wait(&amp;mutex);</span><br><span class="line">        <span class="type">int</span> tmp = get();</span><br><span class="line">        sem_post(&amp;mutex);</span><br><span class="line">        sem_post(&amp;empty);</span><br><span class="line">        ptrintf(<span class="string">&quot;%d\n&quot;</span>,tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    sem_init(&amp;empty, <span class="number">0</span>, MAX);</span><br><span class="line">    sem_init(&amp;fill, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    sem_init(&amp;mutex, <span class="number">0</span>, <span class="number">1</span>);<span class="comment">// mutex = 1 because it is a lock</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="读者-写者锁"><a class="header-anchor" href="#读者-写者锁"></a>读者 --- 写者锁</h2>
<ul>
<li>读写锁更加灵活，因为查找操作不会更改临界区</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">rwlock_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">sem_t</span> lock; <span class="comment">// binary sephamore, basic lock</span></span><br><span class="line">    <span class="type">sem_t</span> writelock;<span class="comment">//used to allow ONE writer or MANY readers</span></span><br><span class="line">    <span class="type">int</span> readers;<span class="comment">// count of readers reading in critical section</span></span><br><span class="line">&#125;<span class="type">rwlock_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rwlock_init</span><span class="params">( <span class="type">rwlock_t</span> *rw )</span></span><br><span class="line">&#123;</span><br><span class="line">    rw -&gt; readers = <span class="number">0</span>;</span><br><span class="line">    sem_init( &amp;rw -&gt; lock, <span class="number">0</span>, <span class="number">1</span> );</span><br><span class="line">    sem_init( &amp;rw -&gt; writelock, <span class="number">0</span>, <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rwlock_acquire_readlock</span><span class="params">(<span class="type">rwlock_t</span> *rw)</span></span><br><span class="line">&#123;</span><br><span class="line">    sem_wait(&amp;rw-&gt;lock);</span><br><span class="line">    rw -&gt; readers++;</span><br><span class="line">    <span class="keyword">if</span>(rw-&gt;readers == <span class="number">1</span>)</span><br><span class="line">        sem_post( &amp;rw -&gt;writelock ); <span class="comment">// last reader releases writelock</span></span><br><span class="line">    sem_post(&amp;rw -&gt; lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rwlock_release_readlock</span><span class="params">(<span class="type">rwlock_t</span> *rw)</span></span><br><span class="line">&#123;</span><br><span class="line">    sem_wait(&amp;rw-&gt;lock);</span><br><span class="line">    rw -&gt; readers--;</span><br><span class="line">    <span class="keyword">if</span>( rw -&gt; readers == <span class="number">0</span> )</span><br><span class="line">        sem_post( rw -&gt; writelock );<span class="comment">// last reader releases writelock</span></span><br><span class="line">    sem_post(&amp;rw-&gt;lock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rwlock_acquire_writelock</span><span class="params">(<span class="type">rwlock_t</span> *rw)</span></span><br><span class="line">&#123;</span><br><span class="line">    sem_wait(&amp;rw-&gt; writelock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rwlock_release_writelock</span><span class="params">(<span class="type">rwlock_t</span> *rw )</span></span><br><span class="line">&#123;</span><br><span class="line">    sem_post(&amp;rw -&gt; writelock);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>想要获取写锁的进程，需要等待所有的读者都结束</li>
<li>缺点：读者很容易饿死写者</li>
</ul>
<h2 id="哲学家就餐问题"><a class="header-anchor" href="#哲学家就餐问题"></a>哲学家就餐问题</h2>
<p>最简单的解决方案：破除依赖， 就是修改某个哲学家的取餐叉顺序</p>
<h2 id="如何实现信号量"><a class="header-anchor" href="#如何实现信号量"></a>如何实现信号量</h2>
<p>用锁和条件变量实现信号量：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;mythreads.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Zem_t</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="type">pthread_cond_t</span> cond;</span><br><span class="line">    <span class="type">pthread_mutex_t</span> lock;</span><br><span class="line">&#125;Zem_t;</span><br><span class="line"></span><br><span class="line"><span class="comment">//only one thread can call this</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Zem_init</span><span class="params">(Zem_t *s, <span class="type">int</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">    s -&gt; value = value;</span><br><span class="line">    Pthread_cond_init(&amp;s-&gt;cond,<span class="literal">NULL</span>);</span><br><span class="line">    Pthread_mutex_init(&amp;s-&gt;lock,<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Zem_wait</span><span class="params">(Zem_t *s)</span></span><br><span class="line">&#123;</span><br><span class="line">    Pthread_mutex_lock(&amp;s-&gt;lock);</span><br><span class="line">    <span class="keyword">while</span>( s-&gt;value &lt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Pthread_cond_wait( &amp;s-&gt;cond, &amp;s-&gt;lock );</span><br><span class="line">    &#125;</span><br><span class="line">    s -&gt;value--;<span class="comment">//注意到这里是先检查是否为非正数，再递减</span></span><br><span class="line">    Pthread_mutex_unlock(&amp;s-&gt;lock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Zem_post</span><span class="params">(Zem_t *s)</span></span><br><span class="line">&#123;</span><br><span class="line">    Pthread_mutex_lock(&amp;s-&gt;lock);</span><br><span class="line">    s -&gt; value++;</span><br><span class="line">    Pthread_cond_signal( &amp;s -&gt; cond );</span><br><span class="line">    Pthread_mutex_unlock(&amp;s-&gt;lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意到<code>wait</code>是先检查是否为非正数，再递减，这使得信号量值永远不会小于0
<ul>
<li>这也是linux的实现</li>
</ul>
</li>
<li>用信号量来实现锁和条件变量相当困难</li>
</ul>
<h1 id="常见并发问题"><a class="header-anchor" href="#常见并发问题"></a>常见并发问题</h1>
<h2 id="非死锁缺陷"><a class="header-anchor" href="#非死锁缺陷"></a>非死锁缺陷</h2>
<ul>
<li>
<p>违反原子性缺陷：给共享变量的访问加锁</p>
</li>
<li>
<p>违反顺序缺陷：使用条件变量，强制顺序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//...</span></span><br><span class="line">Pthread_mutex_lock(&amp;mutex);</span><br><span class="line"><span class="keyword">while</span>( inited == = )</span><br><span class="line">    Pthread_Cond_wait( &amp;cond, &amp;mutex );</span><br><span class="line"><span class="comment">//operations to critical section</span></span><br><span class="line">Pthread_mutex_unlock(&amp;mutex);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="死锁缺陷"><a class="header-anchor" href="#死锁缺陷"></a>死锁缺陷</h2>
<ul>
<li>模块化和锁不是很契合</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>T1</th>
<th>T2</th>
<th>T3</th>
<th>T4</th>
</tr>
</thead>
<tbody>
<tr>
<td>L1</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
<td>N</td>
</tr>
<tr>
<td>L2</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
</tr>
</tbody>
</table>
<ul>
<li>系统形成死锁的四个必要条件
<ol>
<li>互斥条件(mutual exclusion):系统中存在临界资源,进程应互斥地使用这些资源</li>
<li>占有和等待条件(hold and wait):进程请求资源得不到满足而等待时,不释放已占有的资源</li>
<li>不剥夺条件(no preemption):已被占用的资源只能由属主释放,不允许被其它进程剥夺</li>
<li>循环等待条件(circular wait):存在循环等待链,其中,每个进程都在链中等待下一个进程所持有的资源,造成这组进程永远等待</li>
</ol>
</li>
</ul>
<h3 id="循环等待"><a class="header-anchor" href="#循环等待"></a>循环等待</h3>
<ul>
<li>细致地设计锁策略，有序加锁</li>
</ul>
<h3 id="持有并等待"><a class="header-anchor" href="#持有并等待"></a>持有并等待</h3>
<ul>
<li>任何线程抢锁之前要先抢一个全局锁，这样保证了抢锁的原子性(抢锁时不会有其他进程切入)
<ul>
<li>如：假如线程1需要<code>lock1</code>和<code>lock2</code>， 而线程二需要<code>lock2</code>和<code>lock1</code>。线程1获得<code>lock1</code>后不会被打断，能继续获得<code> lock2</code>，执行完毕，释放这两个锁，线程二继续执行。</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">lock(prevection);<span class="comment">//global lock</span></span><br><span class="line">lock(L1);</span><br><span class="line">lock(L2);</span><br><span class="line">...</span><br><span class="line">unlock(prevention);</span><br></pre></td></tr></table></figure>
<h3 id="非抢占"><a class="header-anchor" href="#非抢占"></a>非抢占</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">top:</span><br><span class="line">lock(L1);</span><br><span class="line"><span class="keyword">if</span>(trylock(L2)==<span class="number">-1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       unlock(L1);</span><br><span class="line">	<span class="keyword">goto</span>(top);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>同样是实现了原子地抢占锁
<ul>
<li>如果<code>L2</code>没抢到，那么会释放<code>L1</code></li>
</ul>
</li>
<li>会导致活锁（ <code>livelock</code>）
<ul>
<li>两个线程可能一直重复这一序列，又同时都抢锁失败
<ul>
<li>假如线程1持有<code>lock1</code>，等待<code>lock2</code>( 因此该线程一直try - fail)， 而线程二持有<code>lock2</code>，等待<code>lock1</code>,线程1在试图获得<code>lock2</code>时被中断，线程2获得<code>lock2</code>，试图获得<code>lock1</code>，此时发生活锁</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="互斥"><a class="header-anchor" href="#互斥"></a>互斥</h3>
<ul>
<li>通过无等待（wait-free）数据结构避免互斥</li>
</ul>
<h3 id="通过调度避免死锁"><a class="header-anchor" href="#通过调度避免死锁"></a>通过调度避免死锁</h3>
<p>线程对锁的需求：</p>
<table>
<thead>
<tr>
<th></th>
<th>T1</th>
<th>T2</th>
<th>T3</th>
<th>T4</th>
</tr>
</thead>
<tbody>
<tr>
<td>L1</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
<td>N</td>
</tr>
<tr>
<td>L2</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>N</td>
</tr>
</tbody>
</table>
<ul>
<li>只要T1和T2不同时运行就不会发生死锁
<ul>
<li>T3只用到一把锁，因此可以和其它线程并发执行，不会死锁</li>
</ul>
</li>
<li>可以强制T2在T1之后运行</li>
<li>这种保守的方案很明显会降低性能</li>
</ul>
<h3 id="检查和恢复"><a class="header-anchor" href="#检查和恢复"></a>检查和恢复</h3>
<ul>
<li>允许死锁偶尔发生，检查到死锁时再采取行动（重启电脑）</li>
<li>太摆烂了。。。</li>
</ul>
<h1 id="基于事件的并发（Advanced）"><a class="header-anchor" href="#基于事件的并发（Advanced）"></a>基于事件的并发（Advanced）</h1>
<p>事件循环：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    events = getEvents();</span><br><span class="line">    <span class="keyword">for</span>( e in events )</span><br><span class="line">    &#123;</span><br><span class="line">        processEvent(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>因为事件是原子的，一次只处理一个事件不需要考虑线程切换。 而且如上所见，我们可以对事件调度进行<strong>显式控制</strong></li>
<li>这意味着事件是阻塞的，有巨大的性能开销，需要引入异步的事件处理，再加上多CPU时，并行的事件处理复杂度相当于多线程。 因此给予事件的并发并不比基于线程的简单。</li>
<li>这部分内容很庞大，我不想在C编程上倾注太多时间，因此放在JAVA等语言的并发中讲。</li>
</ul>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>OS Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>OS PROCESSES AND THREADS</title>
    <url>/2021/10/23/OS-PROCESSES-AND-THREADS/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Processes</li>
<li>Programs == Processes</li>
<li>Threads(  只写到这两部分  )</li>
<li>Interprocess Communication</li>
<li>Scheduling</li>
<li>Classical IPC problems</li>
<li>Summary</li>
</ul>
<p>ref:</p>
<ul>
<li><em>Modern Operation Systems</em></li>
<li><em>OS Lesson --- 蒋炎岩</em></li>
</ul>
 <span id="more"></span>
<h1 id="Processes"><a class="header-anchor" href="#Processes"></a>Processes</h1>
<ul>
<li>
<p><strong>multiprogramming</strong>: CPU switch from program to program</p>
</li>
<li>
<p>difference between a <strong>process</strong> and a <strong>program</strong> : 想象一个厨师做菜:</p>
<ul>
<li>program: recipe. That is, an algorithm expressed in some suitable notation.</li>
<li>processor: the chef</li>
<li>input data: the ingredients</li>
<li>process: the activity consisting of the chef reading the recipe, fetching the ingredients, and making the food</li>
</ul>
</li>
<li>
<p>一个程序若运行两次，那么就是两个进程</p>
</li>
</ul>
<h2 id="Process-Creation"><a class="header-anchor" href="#Process-Creation"></a>Process Creation</h2>
<ul>
<li>
<p>Four principle events cause processes to be created：</p>
<ol>
<li>System initialization
<ul>
<li>进程可分为foreground和background，前者与用户交互，后者又称为<strong>daemon</strong>,运行在后台</li>
</ul>
</li>
<li>Execution of a process-creation system call by a running process</li>
<li>A user request to create a new process
<ul>
<li>在交互式系统中，用户输入命令或者点击图标，都能创造进程并在里面运行程序</li>
</ul>
</li>
<li>Initiation of a batch job
<ul>
<li>只针对批处理系统，用户向系统提交batch jobs,系统若有空余资源，则接受任务，创建一个新进程来运行它，自身则继续接受输入队列中的下一个任务</li>
</ul>
</li>
</ol>
</li>
<li>
<p>UNIX中，进程创建只有一种办法： <code>fork</code>. fork后父子进程拥有相同的资源（包括memory image, environment strings, open files）. 子进程然后执行<code>execve</code>或其他系统调用来改变自身的memory image 并运行新的程序。</p>
<ul>
<li><code>fork</code> - <code>execve</code>分两步的目的是让子进程在<code>fork</code>后，<code>execve</code>前将父进程的输入和输出重定向</li>
</ul>
</li>
<li>
<p>Win中， <code>CreateProcess</code>完成了<code>fork</code> - <code>execve</code>这两步</p>
</li>
<li>
<p>进程创建后，父子进程各自的address  space独立</p>
<ul>
<li>UNIX：子进程的initial address space 是父进程的copy,然而这块内存是<strong>copy-on-write</strong>的。 每当二者之一要改变该内存，这块内存都会先copy,以确保改变只针对各自进程的private memory</li>
<li>WIN：父子进程的 address space 一开始就是不同的</li>
</ul>
</li>
</ul>
<h3 id="Process-Termination"><a class="header-anchor" href="#Process-Termination"></a>Process Termination</h3>
<ul>
<li>Four conditions:
<ol>
<li>Normal exit(voluntary)
<ul>
<li>当进程结束其任务时，会发起系统调用通知OS来结束它</li>
<li>GUI进程被点击X而关闭也属于这类</li>
</ul>
</li>
<li>Error exit(voluntary)
<ul>
<li>输入错误，比如没找到文件</li>
</ul>
</li>
<li>Fatal error(involuntary)
<ul>
<li>程序错误</li>
</ul>
</li>
<li>Killed by another process(involuntary)
<ul>
<li><code>kill</code> in UNIX. killer需要对killee有一定权限</li>
<li>在有些系统中，杀死进程会将其所有子进程也杀死，UNIX和WIN都不这么做</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="Process-Hierarchies"><a class="header-anchor" href="#Process-Hierarchies"></a>Process Hierarchies</h2>
<ul>
<li>UNIX：a process and all of its children and further descendants together form a process group.
<ul>
<li>e.g.  一个keyboard signal会发给与这个keyboard相关的process group的所有成员，每个成员可以独立地处理signal</li>
<li>当UNIX开机时， 一个<code>init</code>进程会存在于boot image,<code>init</code>读取一个记录了有多少terminal的文件，为每个terminal <code>fork</code>一个新进程，新进程等待用户login in,若login in成功，则该进程执行一个shell等待用户输入命令，命令又会创建新的进程。 整个系统的所有进程就形成了以<code>init</code>为根节点的树</li>
</ul>
</li>
<li>WINDOWS：不存在进程层次结构。 父进程会拥有子进程的<strong>handler</strong>，它可用来控制子进程，但handler可被自由传递，因此不存在层次结构</li>
</ul>
<h2 id="Process-States"><a class="header-anchor" href="#Process-States"></a>Process States</h2>
<ul>
<li>进程等待输入时，会被block</li>
<li>3 states：
<ol>
<li>Running( actually using the CPU at that instant )</li>
<li>Ready( runnable; temporarily stopped to let another process to run )</li>
<li>Blocked( unable to run until some external event happens)
<ul>
<li>当所需的事件发生时，会转为Ready</li>
</ul>
</li>
</ol>
</li>
<li>OS的Process model（只是逻辑上的）:
<ul>
<li>Schedule: 位于最底层，处理所有的中断和进程处理细节</li>
<li>Processes: 位于Scheduler之上。OS的其余部分都被组织为process形式</li>
</ul>
</li>
</ul>
<h2 id="Implementation-of-Processes"><a class="header-anchor" href="#Implementation-of-Processes"></a>Implementation of Processes</h2>
<ul>
<li>
<p>To implement process model, the OS maintains a <strong>process table</strong>, with one entry per process.   每个entry存储了该进程被切换后要恢复所需的全部信息</p>
</li>
<li>
<p>每个I/O类都对应一个<strong>interrupt vector</strong>，指向其handler的地址</p>
</li>
<li>
<p>中断发生时，先由硬件来保存pc，等信息，然后计算机跳转到interrupt vector指向的内存，硬件的工作至此结束。接下来是软件的工作，先用汇编程序保存寄存器，设置栈指针，然后C程序执行相应的任务（for the specific interrupt type)，当其工作结束后，一些进程应该已经进入ready（因为它们所需的event发生了），接下来调度器决定接下来运行哪个进程。然后控制交还给汇编程序，加载新的进程：</p>
<ol>
<li>Hardware stacks program counter, etc.</li>
<li>Hardware loads new program counter from interrupt vector</li>
<li>.Assembly-language procedure saves registers</li>
<li>Assembly-language procedure sets up new stack]</li>
<li>C interrupt service runs( typically reads and buffs input )</li>
<li>Scheduler decides which process is to run next.</li>
<li>C procedures returns to the assembly code.</li>
<li>Assembly-language procedure starts up new current process.</li>
</ol>
</li>
<li>
<p>CPU usage: ( probabilistic view ):</p>
<p>CPU utilization = $1 - p^n$</p>
<ul>
<li><em>p</em>: CPU用于I/O等待的时间占比</li>
<li><em>n</em>: 进程数</li>
<li>$p^n$: <em>n</em>个进程全都等待I/O的概率</li>
<li>假设电脑拥有8GB内存，2GB用于OS, 每个user program占2GB， CPU I/O等待概率为80%， 则其CPU使用率为$1 - 0.8^3 $</li>
</ul>
</li>
</ul>
<h1 id="Programs"><a class="header-anchor" href="#Programs"></a>Programs</h1>
<ul>
<li>
<p>程序就是可执行的二进制文件</p>
<ul>
<li>
<p>Linux支持多种可执行文件格式</p>
</li>
<li>
<p>ELF( Executable Linkable Format)是其中最常用的</p>
<ul>
<li>.o .out都是ELF</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim a.c                                                                     </span><br><span class="line">gcc -c a.c  // 汇编并编译                                 </span><br><span class="line">file a.o                                                                   </span><br><span class="line">a.o: ELF 64-bit LSB relocatable, x86-64, version 1 (SYSV), not stripped //可见.o是ELF</span><br><span class="line">gcc a.o  //链接                                </span><br><span class="line">file ./a.out                               </span><br><span class="line">./a.out: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=e37d8d4cf587a2d3d1a245cbd8443a8fe4f0a453, for GNU/Linux 4.4.0, not stripped</span><br><span class="line">//可见.oou是ELF</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="ELF文件"><a class="header-anchor" href="#ELF文件"></a>ELF文件</h2>
<p>我们主要讨论ELF文件</p>
<p>查看当前所有进程：</p>
<p><code>ps -ax  | less</code></p>
<ul>
<li>
<p>linux的所有面临都是文件，<code>vim /bin/ls</code> ,可以看到其内容（二进制部分显示异常，但可以看到字符串常量， 命令的说明都是字符串常量）</p>
</li>
<li>
<p><code>xxd</code>可以看到文件以“7f 45 4c 46”（即 x7f ELF）开头</p>
<p>i.e. <code>xxd /bin/ls | less  </code></p>
</li>
</ul>
<h3 id="解析ELF文件"><a class="header-anchor" href="#解析ELF文件"></a>解析ELF文件</h3>
<ul>
<li>
<p><code>readelf</code></p>
<ul>
<li><code>-h</code>：查看header（元数据）</li>
<li><code>-l</code>：查看程序运行</li>
<li>如果需要用代码解析，<code>/usr/include/elf.h 提供了定义 </code></li>
</ul>
</li>
<li>
<p>尝试写一段最小的不依赖标准库的代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> <span class="comment">//hello.c</span></span></span><br><span class="line">  <span class="number">2</span> <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">  3 &#123;</span><br><span class="line">  <span class="number">4</span>     <span class="built_in">printf</span>(<span class="string">&quot;Hello world!\n&quot;</span>);                                                                                    </span><br><span class="line">  <span class="number">5</span> &#125;     </span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>如果<code>gcc -o hello.out hello.c</code>（编译并链接）， 再<code> ./hello.out</code>，能正常输出结果。</p>
</li>
<li>
<p>如果</p>
<p><code>gcc -c hello.c</code> 后</p>
<p><code>ld hello.o  </code>,会报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ld: warning: cannot find entry symbol _start; defaulting to 0000000000401000</span><br><span class="line">ld: hello.o: in function `main&#x27;:</span><br><span class="line">hello.c:(.text+0xf): undefined reference to `puts&#x27;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>首先， <code>puts</code>函数是编译器优化的结果（我们没有用<code>puts</code>，用的是<code>printf</code>）</p>
<ul>
<li>编译器在<code>-o0</code>下依然会进行一些编译优化：</li>
</ul>
</li>
<li>
<p><code>_start</code>是linker默认的入口，入口可以用<code>-e</code>指定，如<code>ld -e main hello.o</code>，就不会有<code>——start</code>的报错</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>如果</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span>                                                                                              </span></span><br><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"> &#123;&#125;</span><br><span class="line">          </span><br></pre></td></tr></table></figure>
<p><code>gcc -c hello.c  </code></p>
<p><code>objdump -d hello.o</code>（查看二进制代码）</p>
<p><code>ld -e main hello.o </code>，没有报错，链接成功</p>
<p><code>file a.out</code>，得到<code>a.out: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped</code>，确实是ELF文件</p>
<p><code>./a.out  </code>，得到<code>segmentation fault</code>，还是报错。</p>
<p><strong>因为标准库为我们做了很多工作！</strong></p>
</li>
</ul>
<h3 id="gdb调试"><a class="header-anchor" href="#gdb调试"></a>gdb调试</h3>
<ul>
<li>
<p>gdb调试</p>
<ul>
<li>
<p><code>r</code>: 运行</p>
</li>
<li>
<p><code>starti</code>从第一条指令开始执行程序</p>
</li>
<li>
<p><code>layout asm</code>更方便地查看汇编</p>
</li>
<li>
<p><code>si</code>单步执行</p>
</li>
<li>
<p><code>bt</code>（backtrace），查看调用栈</p>
</li>
<li>
<p><code>info register</code>查看寄存器状态</p>
</li>
<li>
<p><code>info inferiors</code>:显示所有进程</p>
</li>
<li>
<p><code>!cat /proc/[pid]/maps</code>: 内存映射信息</p>
</li>
<li>
<p><code>！ [instruction]</code>:执行shell命令</p>
</li>
</ul>
</li>
<li>
<p><code>objdump -d a.out</code>： <code>0000000000401000 &lt;main&gt;:</code>，</p>
<p><code>readelf -a hello.out | less </code>： <code> Entry point address:        0x401000</code></p>
<p>二者一致</p>
</li>
<li>
<p>OS<strong>加载程序，并初始化运行环境</strong>，从<code>_start</code>开始运行</p>
<p><code>starti</code>: <code>0x00007ffff7fce090 in _start () from /lib64/ld-linux-x86-64.so.2</code>,这个库是OS的</p>
<p><code>info inferiors</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> Num  Description       Connection           Executable        </span><br><span class="line">* 1    process 7669      1 (native)           /home//a.out </span><br></pre></td></tr></table></figure>
<p><code>!pmap 7669</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">7669:   /home/a.out</span><br><span class="line">0000555555554000      4K r---- a.out</span><br><span class="line">0000555555555000      4K r-x-- a.out</span><br><span class="line">0000555555556000      4K r---- a.out</span><br><span class="line">0000555555557000      8K rw--- a.out   //加载好了a.out</span><br><span class="line">00007ffff7fc7000     16K r----   [ anon ]</span><br><span class="line">00007ffff7fcb000      8K r-x--   [ anon ]</span><br><span class="line">00007ffff7fcd000      4K r---- ld-2.33.so</span><br><span class="line">00007ffff7fce000    144K r-x-- ld-2.33.so</span><br><span class="line">00007ffff7ff2000     36K r---- ld-2.33.so</span><br><span class="line">00007ffff7ffb000     16K rw--- ld-2.33.so //加载好了ld-2.33.so</span><br><span class="line">00007ffffffde000    132K rw---   [ stack ]</span><br><span class="line">ffffffffff600000      4K --x--   [ anon ]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>OS先加载好了a.out，<a href="http://xn--ld-2-fy8f00dhw5t.33.so">再加载ld-2.33.so</a>，ld-2.33.so是OS提供的最初始的加载器，它会加载libc，再调用libc的初始化，再调用main</p>
</li>
<li>
<p>main的开始/结束并不是程序的开始/结束！</p>
<p>利用gcc的<code>__attribute__</code>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> <span class="comment">//a.c</span></span></span><br><span class="line">  <span class="number">2</span> </span><br><span class="line">  <span class="number">3</span> __attribute__((constructor))<span class="type">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="number">4</span>     <span class="built_in">printf</span>(<span class="string">&quot;Hello,World!\n&quot;</span>);                                                                                    </span><br><span class="line">  <span class="number">5</span> &#125;</span><br><span class="line">  <span class="number">6</span> </span><br><span class="line">  <span class="number">7</span> __attribute__((destructor))<span class="type">void</span> <span class="title function_">goodbye</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="number">8</span>     <span class="built_in">printf</span>(<span class="string">&quot;Bye,cruel OS World!\n&quot;</span>);</span><br><span class="line">  <span class="number">9</span> &#125;</span><br><span class="line"> <span class="number">10</span> </span><br><span class="line"> <span class="number">11</span> <span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">                      </span><br></pre></td></tr></table></figure>
<p><code>gcc a.c</code></p>
<p><code>./a.out</code></p>
<p>得到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello,World!</span><br><span class="line">Bye,cruel OS World!</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="strace"><a class="header-anchor" href="#strace"></a>strace</h3>
<p>strace - trace system calls and signals</p>
<ul>
<li>
<p><code>strace ./a.out</code></p>
</li>
<li>
<p><code>strace</code> 在系统调用执行之前就能显示它</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">write(1, &quot;Hello,World!\n&quot;, 13Hello,World!)          = 13</span><br></pre></td></tr></table></figure>
<p>后面的“Hello,World!”是系统调用的结果</p>
</li>
</ul>
<p>用<code>strace</code>查看之前的a.c</p>
<ul>
<li>
<p><code>strace</code>输出到标准错误输出， 可以用<code>strace ./a.out &gt; /dev/null </code>将标准输出丢弃（这样就不会看到系统调用<code>write</code>的结果）可以看到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">write(1, &quot;Hello,World!\nBye,cruel OS World!&quot;..., 33) = 33</span><br></pre></td></tr></table></figure>
<p>两个<code>write</code>合成了一个</p>
<ul>
<li><code>/dev/null</code>下的所有文件都会被丢弃</li>
</ul>
</li>
</ul>
<h3 id="gcc"><a class="header-anchor" href="#gcc"></a>gcc</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.c --&gt; (preprocess) ---&gt; .i ---&gt; (compile) ---&gt; .s ---&gt;(assembly) ---&gt; .o ---&gt; (link) ---&gt; .out</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>strace -f gcc a.c 2&gt;&amp;1 | grep execve  </code>查看<code>execve</code>系统调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//太长了</span><br></pre></td></tr></table></figure>
<p>gcc：</p>
<ol>
<li>
<p>先调用<code>cc1</code>（编译器，c到汇编）</p>
</li>
<li>
<p>再调用<code>as</code>（汇编器，实际上gcc会检索多个as，找到可用的那个）</p>
</li>
<li>
<p>再调用<code>collect2</code>（收集构造函数和析构函数，并生成它们的调用函数; 然后负责链接）</p>
</li>
<li>
<p>再调用<code>ld</code></p>
</li>
</ol>
</li>
</ul>
<h3 id="GUI"><a class="header-anchor" href="#GUI"></a>GUI</h3>
<ul>
<li>GUI和普通程序没什么不同
<ul>
<li>使用 <code>strace xedit \bin\ls</code>，鼠标不断移动，看系统调用栈的变化</li>
</ul>
</li>
</ul>
<h1 id="Threads"><a class="header-anchor" href="#Threads"></a>Threads</h1>
<ul>
<li>进程可拥有多个线程，所有线程共享进程的address space</li>
<li>进程是竞争关系，线程是合作关系</li>
</ul>
<h2 id="Thread-Usage"><a class="header-anchor" href="#Thread-Usage"></a>Thread Usage</h2>
<ul>
<li>
<p>线程的优势：</p>
<ul>
<li>线程可以共享进程的address space</li>
<li>线程比进程更轻量，创建和摧毁也更容易</li>
</ul>
</li>
<li>
<p>（单核下）Web server中， 一个dispatcher负责接受请求，并分发给相应的worker thread, 当worker thread被阻塞时（比如等待磁盘操作），其他线程可以执行，比如dispatcher,它可以继续接受请求</p>
</li>
<li>
<p>3 Designs to construct a server</p>
<table>
<thead>
<tr>
<th>Model</th>
<th>Characteristics</th>
</tr>
</thead>
<tbody>
<tr>
<td>Threads</td>
<td>Parallelism, blocking system calls</td>
</tr>
<tr>
<td>Single-threaded process</td>
<td>No parallelism, blocking system calls( 系统在阻塞时无法接受请求 )</td>
</tr>
<tr>
<td>Finite-state machine</td>
<td>Parallelism, nonblocking system calls ,interrupts</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h2 id="The-Classical-Thread-Model"><a class="header-anchor" href="#The-Classical-Thread-Model"></a>The Classical Thread Model</h2>
<ul>
<li>
<p>The  Thread Model is based on 2 independent concepts: <strong>resource grouping</strong> and <strong>execution</strong></p>
</li>
<li>
<p>Process用于资源分组， 而 Thread用于执行</p>
<ul>
<li>当一个线程打开一个文件，其他线程可以使用该文件。 这是合理的，因为进程才是资源分配的单位，这些线程都在一个进程下</li>
<li>each thread has its own stack</li>
</ul>
</li>
</ul>
<h2 id="POSIX-Threads"><a class="header-anchor" href="#POSIX-Threads"></a>POSIX Threads</h2>
<ul>
<li>UNIX 线程标准库: <strong>Pthreads</strong></li>
</ul>
<h2 id="Implementing-Threads-in-User-Space"><a class="header-anchor" href="#Implementing-Threads-in-User-Space"></a>Implementing Threads in User Space</h2>
<p>有两种实现线程的方式：user space and the kernel</p>
<p>将线程放入user  space，kernel不知道线程的存在，kernel只面对单线程的进程</p>
<ul>
<li>
<p>可以在不支持多线程的OS上运行，因为kernel面对的都是单线程的进程</p>
</li>
<li>
<p>每个进程拥有run-time system,which is a collection of procedures that manage threads. 每个进程拥有各自的 <strong>thread table</strong></p>
</li>
<li>
<p>进程运行在run-time system上层</p>
</li>
<li>
<p>thread table在run-time system内</p>
</li>
<li>
<p>当线程执行可能使其阻塞的任务时，它会发起run-time system procedure，后者查看该进=线程是否应该被阻塞，若是，则保存其（线程自己的）寄存器，并在thread table里找到并加载新的ready的线程，并新线程的寄存器载入机器的寄存器。 这些都在用户层进行，避免了陷入内核层的开销</p>
</li>
<li>
<p>缺点：</p>
<ul>
<li>阻塞式系统调用很难实现
<ul>
<li><strong>没看懂</strong></li>
</ul>
</li>
<li>当一个进程发生<strong>page fault</strong>( 数据在硬盘中，而不在内存中 )时，OS会阻塞整个进程（因为OS眼中进程都是单线程的，它认为是这个线程发生了page fault），此时其他线程都无法运行</li>
<li>在一个线程中没有clock signal( interrupt )， 因此无法对线程的使用时间进行调度，因此除非一个运行时的线程主动退出，否则其他线程无法运行</li>
</ul>
</li>
</ul>
<h2 id="Implementing-Threads-in-the-Kernel"><a class="header-anchor" href="#Implementing-Threads-in-the-Kernel"></a>Implementing Threads in the Kernel</h2>
<p>没有run-time system, kernel有一个thread table记录<strong>所有线程</strong>（而非每个进程一个thread table），新线程的创建需要system call</p>
<ul>
<li>
<p>所有可能阻塞线程的调用都被实现为系统调用</p>
<ul>
<li>当一个线程阻塞时，kernel可以运行该进程下的另一个线程，<strong>也可以运行其他进程的线程</strong>。 而在user space版的实现中，一个run-time system只能运行其自己的进程下的进程</li>
</ul>
</li>
<li>
<p>由于创建和摧毁线程的代价高昂，在这个视线里广泛采用线程复用技术</p>
<ul>
<li>当线程被摧毁时，它只是被标记为 not runnable, 它的结构体没有被销毁</li>
</ul>
</li>
<li>
<p>当一个线程发生page fault,OS可以切换到该进程的另一个线程</p>
</li>
</ul>
<h2 id="Hybrid-Implementations"><a class="header-anchor" href="#Hybrid-Implementations"></a>Hybrid Implementations</h2>
<ul>
<li>kernel面对kernel-level线程，而这些线程可能拥有多个user-level线程</li>
<li>可以在不支持多线程的OS上运行</li>
</ul>
<h2 id="Scheduler-Activations"><a class="header-anchor" href="#Scheduler-Activations"></a>Scheduler Activations</h2>
<p>让Threads in the user space拥有in kernel的功能，又能不失去太多性能的方案之一</p>
<ul>
<li>
<p>当一个thread阻塞时，没有必要通知内核，由run-time system处理</p>
</li>
<li>
<p>为每个进程分配一个虚拟cpu,让run-time system将线程分配给虚拟cpu</p>
</li>
<li>
<p>当kernel知道一个thread阻塞时，它会告知run-time system, 让后者进行线程切换。 当线程又恢复到ready， kernel也会告知run-time system</p>
<ul>
<li>“告知”机制被称为<strong>upcall</strong></li>
</ul>
</li>
<li>
<p>该方法的问题在于：upcall的原理是下层使用了上层的服务，违反了OS分层的原则</p>
</li>
</ul>
<h2 id="Pop-Up-Threads"><a class="header-anchor" href="#Pop-Up-Threads"></a>Pop-Up Threads</h2>
<ul>
<li>当分布式系统接收到一个message时，它会创建一个 brand new thread来处理该message
<ul>
<li>传统方法是，令一个thread一直等待请求。 而pop-up让OS直接创建新Thread,新进程<strong>没有任何数据</strong>，因此创建的开销非常小</li>
</ul>
</li>
</ul>
<h2 id="Making-Single-Threaded-Code-Multithreaded"><a class="header-anchor" href="#Making-Single-Threaded-Code-Multithreaded"></a>Making Single-Threaded Code Multithreaded</h2>
<p>我们假设采用in user space的实现方案</p>
<ul>
<li>
<p>困难：</p>
<ul>
<li>
<p>全局变量的数据竞争</p>
</li>
<li>
<p>库函数不全都是reentrant. 比如假设向一块buffer内写入数据，此时切换到另一个thread,修改了buffer,在回到原tread,此时就会发生错误。write函数并不确保可重入</p>
<ul>
<li>方案
<ol>
<li>重写库函数， 不是个good idea</li>
<li>对每个procedure传入一个jacket,用一些位数来表明正在被使用的库函数。如果要切换到的新进程要使用原进程的库函数，而原进程的库函数还没有结束，该切换就被禁止。 这个方案极大地限制了并行</li>
</ol>
</li>
</ul>
</li>
<li>
<p>线程各自的stack的管理， 由于kernel不知道多thread的存在（它们都在user space），那么很难在内存中正确地管理各个thread的stack</p>
</li>
</ul>
</li>
<li>
<p>以上困难并非不可克服，但它们揭示了：在已有系统内加入多线程机制而不对系统本身做出改变是不可能的</p>
</li>
</ul>
<h1 id="Interprocess-Communication"><a class="header-anchor" href="#Interprocess-Communication"></a>Interprocess Communication</h1>
<p>TODO 急的话请催一催我QAQ</p>
<h1 id="Scheduling"><a class="header-anchor" href="#Scheduling"></a>Scheduling</h1>
<h1 id="Classical-IPC-problems"><a class="header-anchor" href="#Classical-IPC-problems"></a>Classical IPC problems</h1>
<h1 id="Summary"><a class="header-anchor" href="#Summary"></a>Summary</h1>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>OS Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>OS Page Sheduling Algorithm</title>
    <url>/2022/04/17/OS-Page-Sheduling-Algorithm/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>各种页面调度算法...</li>
</ul>
<span id="more"></span>
<h1 id="OPT算法-Belady算法"><a class="header-anchor" href="#OPT算法-Belady算法"></a>OPT算法(Belady算法)</h1>
<p>当要调入新页面时，替换掉距现在最长时间后再访问的页</p>
<p>OPT是页面替换算法的理想情况，无法实现，但可以用来衡量其他算法</p>
<p>[<img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/OPT.png" alt="OPT"></p>
<h1 id="FIFO算法"><a class="header-anchor" href="#FIFO算法"></a>FIFO算法</h1>
<p>略</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/FIFO.png" alt="img"></p>
<p><strong>FIFO算法的Belady异常</strong>：更多的页框导致了更高的缺页率，页框为3和4的时候</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/Belady%E5%BC%82%E5%B8%B8.png" alt="Belady异常"></p>
<h1 id="LRU算法"><a class="header-anchor" href="#LRU算法"></a>LRU算法</h1>
<p>淘汰<strong>最近最少用</strong>的那一页，即那些刚被使用过的页面，可以马上还要被使用到</p>
<ul>
<li>LRU算法实现比较困难</li>
</ul>
<p>[<img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/LRU.png" alt="LRU"></p>
<h1 id="LFU算法"><a class="header-anchor" href="#LFU算法"></a>LFU算法</h1>
<p>LFU: lest frequent usage, 最不常用</p>
<ol>
<li>淘汰最近一段时间内<strong>访问次数较少</strong>的页面，对OPT的模拟性比LRU更好</li>
<li>算法过程：基于时间间隔中断，并给每一页设置一个计数器，时间间隔中断发生后，所有计数器清0，每访问页1次就给计数器加1，选择计数最小的页面淘汰</li>
</ol>
<h1 id="CLOCK算法"><a class="header-anchor" href="#CLOCK算法"></a>CLOCK算法</h1>
<p>每个页面设置一个<strong>访问位</strong>，再将内存中的页面都通过链接指针链接成一个循环队列， 设置一个指针指向下一个换页位置</p>
<p>工作流程</p>
<ol>
<li>页调入内存时，其访问位置为1，指针前移（如果内存之前没有页，现在调入一页，那么指针指向下一页）</li>
<li>访问内存的页时，无论该页的访问位是1还是0，都将其访问位置为1，指针不动（因为没有增加新页）</li>
<li>内存已满，又有页要调入内存（即要淘汰页面）时，从指针当前指向的页开始扫描循环队列
<ol>
<li>把所遇到的引用标志位是1的页面的访问位清0并跳过</li>
<li>把所遇到的引用标志位是0的页面淘汰，并换页，<strong>指针前移</strong></li>
</ol>
</li>
</ol>
<p>CLOCK算法的例子</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/CLOCK.png" alt="CLOCK"></p>
<blockquote>
<p>灰色和星号代表1，蓝色和无星号代表0</p>
</blockquote>
<h1 id="局部最佳页面替换算法-MIN"><a class="header-anchor" href="#局部最佳页面替换算法-MIN"></a>局部最佳页面替换算法(MIN)</h1>
<p>假设进程在时刻t访问某页面，如果该页面不在内存中，导致一次缺页，把该页面装入一个空闲页帧。不论发生缺页与否，算法在每一步要考虑引用串，如果该页面在时间$[t, t + \tau ]$内未被再次引用，那么就移出；否则，该页被保留在进程驻留集中</p>
<ul>
<li>$\tau$为一个系统常量，间隔$[t, t + \tau ]$称作滑动窗口 。下面的示例中$\tau = 3$</li>
<li>间隔是闭区间</li>
</ul>
<p>示例，假设t0时刻内存中已有页P4， 此时进程要访问P4:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/WS.png" alt="img"></p>
<ul>
<li>注意， 在t时刻遇到Px，时，要将其添加到驻留集（因为滑动窗口有左闭区间t，因此t时刻遇到的页一定不会在下一时刻被淘汰），那添加到驻留集的时间肯定是下一时刻（t+1）</li>
</ul>
<h1 id="工作集置换算法-WS"><a class="header-anchor" href="#工作集置换算法-WS"></a>工作集置换算法(WS)</h1>
<p>工作集算法是局部最佳页面替换算法的模拟实现，<strong>不向前查看页面引用串，而是基于程序局部性原理向后看</strong></p>
<p>工作集也就是向后看的滑动窗口( 记为$[t-\Delta, t]$ ) 所看到的页面集合， 记为$W[t-\Delta, t]$</p>
<ul>
<li>$\Delta$是系统常量,称为&quot;工作集窗口尺寸&quot;. 工作集中所包含的页面数目称为&quot;工作集尺寸&quot;</li>
<li>下面的示例中Δ=3</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/WS.png" alt="WS"></p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>OS Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>OS Thread Sheduling Algorithm</title>
    <url>/2022/04/17/OS-Thread-Sheduling-Algorithm/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>workload</li>
<li>scheduling metrics</li>
<li>处理器调度层次</li>
<li>各种算法...</li>
</ul>
<span id="more"></span>
<h1 id="workload"><a class="header-anchor" href="#workload"></a>workload</h1>
<ul>
<li>Def: a fully-operational scheduling discipline</li>
<li>为了方便下面各种算法的说明， 我们目前对work load做出如下假设：
<ol>
<li>每个工作运行相同的时间（工作就是进程）</li>
<li>所有的工作同时到达</li>
<li>一旦开始，所有工作保持运行直到完成</li>
<li>所有工作只使用CPU（即，不执行IO操作）</li>
<li>所有工作的运行时间已知</li>
</ol>
</li>
</ul>
<h1 id="scheduling-metrics"><a class="header-anchor" href="#scheduling-metrics"></a>scheduling metrics</h1>
<ul>
<li>性能指标：
<ul>
<li>周转时间： 任务完成 - 任务到达</li>
<li>响应时间：任务首次运行（服务时间） - 任务到达
<ul>
<li>用于度量<strong>交互性</strong>，因为分时系统的用户会面对终端，这要求终端交互性好</li>
</ul>
</li>
</ul>
</li>
<li>公平</li>
</ul>
<h1 id="处理器调度层次"><a class="header-anchor" href="#处理器调度层次"></a>处理器调度层次</h1>
<ul>
<li>高级调度（长程调度、作业调度）: 决定能否加入到执行的进程池中</li>
<li>中级调度（平衡负载调度）： 决定主存中的可用进程集合</li>
<li>低级调度（短程调度、 进程调度）：决定哪个进程占用处理器执行</li>
</ul>
<h1 id="优化周转时间算法"><a class="header-anchor" href="#优化周转时间算法"></a>优化周转时间算法</h1>
<p>用于批处理作业。下述三个算法都面向“周转时间”，但是当衡量其“响应时间”时，下述算法表现都不好。 对于SJF而言，只要短进程源源不断来,<br>
长进程就饿死</p>
<h2 id="FCFS"><a class="header-anchor" href="#FCFS"></a>FCFS</h2>
<ul>
<li>First Come First Service: 非抢占,直到某个进程运行结束,依次调度接下来的,偏爱长作业
<ul>
<li>推翻假设1后（可能出现长作业），该算法fail</li>
</ul>
</li>
</ul>
<h2 id="SJF"><a class="header-anchor" href="#SJF"></a>SJF</h2>
<ul>
<li>Shortest Job First: 非抢占，先运行最短的任务
<ul>
<li>再推翻假设2,运行进程不同时到达，此时短任务可能会晚到达，由于算法非抢占，短任务必须等待长任务执行完，该算法fail</li>
</ul>
</li>
</ul>
<h2 id="STCF"><a class="header-anchor" href="#STCF"></a>STCF</h2>
<ul>
<li>Shortest Time-to-Completion First: 最短完成时间优先: 抢占式SJF,推翻了假设3</li>
</ul>
<h1 id="优化响应时间算法"><a class="header-anchor" href="#优化响应时间算法"></a>优化响应时间算法</h1>
<p>用于分时系统</p>
<h2 id="RR"><a class="header-anchor" href="#RR"></a>RR</h2>
<ul>
<li>Round Robin:抢占,time slice结束时,当前进程放入就绪队列,然后切换到队列中的下个进程
<ul>
<li>“抢占”是指进程之间。 在同一time slice内，进程不抢占</li>
<li>time slice必须是时钟中断周期的倍数</li>
<li>time slice太短也不好，因为context switch有成本</li>
</ul>
</li>
<li>该算法在“周转时间”表现不佳</li>
</ul>
<h2 id="结合IO的STCF"><a class="header-anchor" href="#结合IO的STCF"></a>结合IO的STCF</h2>
<ul>
<li>推翻假设4,现在运行程序执行IO。此时假设有两个工作A和B,每项占用<code>50ms</code>CPU，但每A运行<code>10ms</code>会发起<code>10ms</code>的IO请求，而B只使用CPU</li>
<li>此时可以把A的每个<code>10ms</code>工作视为独立的工作，因此系统先调度<code>10ms</code>的A，然后调度<code>50ms</code>的B，而<code>10ms</code>后新的A会提交，因此会抢占B执行，这样做实现了overlap</li>
<li>overlap： 一个进程在另一个进程等待IO时使用CPU</li>
</ul>
<h2 id="MLFQ"><a class="header-anchor" href="#MLFQ"></a>MLFQ</h2>
<p>推翻假设5后，进程运行时间不可知，之前的算法失效</p>
<ul>
<li>
<p>Multi-Level Feedback:多级反馈调度:  <strong>抢占式</strong>,每当进程被抢占时就降级</p>
<ul>
<li>建立多个不同优先级的就绪进程队列，多个就绪进程队列之间按照优先级调度</li>
<li>高优先级的就绪进程, 分配的时间片短</li>
<li>同一就绪进程队列中的进程的优先数和时间片相同, 按照FCFS调度</li>
<li>工作进入系统时放在最高优先级</li>
<li>一旦工作用完了其在某一层中的时间片，它就被抢占，自己移入低一级队列
<ul>
<li>进程只有被抢占后才降级，因此如果一共只有一个进程，该进程不会降级</li>
</ul>
</li>
</ul>
</li>
<li>
<p>problem： 如果短工作不断到来，长进程可能饿死</p>
<ul>
<li>改进： 经过一段时间S, 将系统中所有工作重新加入最高优先级队列</li>
</ul>
</li>
</ul>
<h2 id="比例份额"><a class="header-anchor" href="#比例份额"></a>比例份额</h2>
<p>确保每个工作获得一定比例的CPU时间，实现公平性</p>
<p>份额调度最大的缺点在于难以确定份额，即依赖假设5</p>
<h2 id="彩票调度"><a class="header-anchor" href="#彩票调度"></a>彩票调度</h2>
<ul>
<li>每个进程持有一定数量的彩票，该进程的彩票数占总彩票数的百分比代表它占有某个资源的份额</li>
<li>CPU每个时间片随即抽取一个数，拥有该数对应彩票的进程会被调度一个时间片
<ul>
<li>例如工作A和B分别有75, 25个彩票，对应数字0 - 74, 75 - 99.</li>
<li>OS抽取数字序列为：63, 85, 70, 39, 76, 17, 95</li>
<li>工作调度次序为：A, B, A, A, B, A, B</li>
</ul>
</li>
<li><strong>随机</strong>， 优点是实现简单，不依赖任何全局量</li>
<li>PROBLEM：基于概率，因此有可能出现异常情况</li>
</ul>
<h2 id="步长调度"><a class="header-anchor" href="#步长调度"></a>步长调度</h2>
<ul>
<li>每个进程都具有步长(<code>stride</code>), 和一个行程（<code>pass</code>）值。
<ul>
<li>步长： 一个大数 / 进程的彩票数</li>
<li>初始时所有行程值为0</li>
</ul>
</li>
<li>每次调度当前具有最小行程值的进程，每当进程运行一个时间片后后， 行程值 += 步长
<ul>
<li>进程在时间片内不被抢占</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">current = remove_min(<span class="built_in">queue</span>); <span class="comment">//pick client with min pass</span></span><br><span class="line">schedule(current);<span class="comment">// use resource for quantum</span></span><br><span class="line">current -&gt; pass += current -&gt; stride;<span class="comment">// compute next pass using stride</span></span><br><span class="line">insert( <span class="built_in">queue</span>, current );<span class="comment">// put back into the queue</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>例子：假设A,B,C彩票数分别为100,50,250, 其步长值分别为100, 200, 40</p>
<ol>
<li>
<p>初始时所有步长为零，随即调度工作，假设A被调度，执行一个时间片，更新其行程值为100. 然后选择B, 运行后更新其行程值为200； 然后选择C,运行后更新其行程值为40</p>
</li>
<li>
<p>然后算法选择最小的工作，它会再调度2次C, C的行程值增加到120. 然后调度A ...</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>行程值（A） （步长 = 100）</th>
<th>行程值（A） （步长 = 100）</th>
<th>行程值（A） （步长 = 100）</th>
<th>被调度进程</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>A</td>
</tr>
<tr>
<td>100</td>
<td>0</td>
<td>0</td>
<td>B</td>
</tr>
<tr>
<td>100</td>
<td>200</td>
<td>0</td>
<td>C</td>
</tr>
<tr>
<td>100</td>
<td>200</td>
<td>40</td>
<td>C</td>
</tr>
<tr>
<td>100</td>
<td>200</td>
<td>80</td>
<td>C</td>
</tr>
<tr>
<td>100</td>
<td>200</td>
<td>120</td>
<td>A</td>
</tr>
<tr>
<td>200</td>
<td>200</td>
<td>120</td>
<td>C</td>
</tr>
<tr>
<td>200</td>
<td>200</td>
<td>160</td>
<td>C</td>
</tr>
</tbody>
</table>
<p>可以看到，在这段时间内， A, B, C分别调度2, 1， 4次，与其彩票数占比相符合</p>
</li>
<li>
<p>彩票调度只能在概率上实现比例（因此有概率翻车），而步长调度可以直接控制比例</p>
</li>
<li>
<p>PROBLEM： 步长调度需要维护全局状态：行程值。 如果中途有新进程加入，则新进程的行程值为0,它会独占CPU</p>
</li>
</ul>
<h2 id="HRRN"><a class="header-anchor" href="#HRRN"></a>HRRN</h2>
<ul>
<li>HRRN(highest response radio next)高响应比优先**: 非抢占式**
<ul>
<li>响应比 = (等待时间+服务时间) / 服务时间</li>
</ul>
</li>
</ul>
<h1 id="多处理器调度"><a class="header-anchor" href="#多处理器调度"></a>多处理器调度</h1>
<p>缓存一致性：</p>
<ul>
<li>一种方案： 总线窥探（<code>bus snooping</code>）: 每个缓存都监听链接所有缓存和内存的总线，在发现内存访问。</li>
</ul>
<p>同步问题：</p>
<ul>
<li>加锁</li>
</ul>
<p>缓存亲和度：</p>
<ul>
<li>同意进程在同一CPU运行时，由于有cache而运行得快</li>
</ul>
<h2 id="SQMS"><a class="header-anchor" href="#SQMS"></a>SQMS</h2>
<ul>
<li>
<p>单队列调度（Single-Queue Multiprocessor Scheduling）：所有工作放入一个全局的单调队列。每个CPU从队列中拿取工作</p>
<ul>
<li>当然，可以将工作以时间片为单位存储进队列，这样CPU每次都运行一个time slice的工作</li>
</ul>
</li>
<li>
<p>缓存亲和度问题：  假设有CPU 0-3, 队列中工作序列为A,B,C,D,E, 则：</p>
<table>
<thead>
<tr>
<th>CPU0</th>
<th>CPU1</th>
<th>CPU2</th>
<th>CPU3</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>B</td>
<td>C</td>
<td>D</td>
</tr>
<tr>
<td>E</td>
<td>A</td>
<td>B</td>
<td>C</td>
</tr>
<tr>
<td>D</td>
<td>E</td>
<td>A</td>
<td>B</td>
</tr>
<tr>
<td>C</td>
<td>D</td>
<td>E</td>
<td>A</td>
</tr>
<tr>
<td>可以看到亲和度很差</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</li>
</ul>
<h2 id="MQMS"><a class="header-anchor" href="#MQMS"></a>MQMS</h2>
<ul>
<li>多队列调度（Multi-Queue Multiprocessor Scheduling）: 每个CPU拥有自己的队列。 不同队列可以采用不同的调度规则。OS依据一些启发式规则将新工作放入某个队列
<ul>
<li>每个CPU之间调度相互独立</li>
</ul>
</li>
</ul>
<h1 id=""><a class="header-anchor" href="#"></a></h1>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>OS Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>OS VMM</title>
    <url>/2021/11/27/OS-VMM/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>虚拟化CPU</li>
<li>虚拟化内存</li>
<li>总结</li>
</ul>
<p>ref: <em>Operating Systems Three Easy pieces</em></p>
<span id="more"></span>
<h1 id="虚拟化CPU"><a class="header-anchor" href="#虚拟化CPU"></a>虚拟化CPU</h1>
<ul>
<li>
<p>VMM采用<code>limited directed execction</code>来运行虚拟机</p>
<ul>
<li>即： VMM跳转到第一条指令的地址，并让OS开始运行</li>
</ul>
</li>
<li>
<p>多个虚拟机在一个CPU上<code>multiplexing</code>，需要执行<code>machine switch</code>，这类似进程的<code>context switch</code></p>
<ul>
<li><code>machine switch</code>流程：VMM必须
<ol>
<li>保存整个OS的机器状态（ incluing registers, PC, 并且和上下文切换不同， VMM还要保存所有的特权硬件的状态 ）</li>
<li>恢复待运行OS的机器状态</li>
<li>然后跳转到待运行OS的PC</li>
</ol>
</li>
</ul>
</li>
<li>
<p>特权指令直接控制机器，因此VMM不允许OS直接执行特权指令。事实上VMM会先接受系统调用，然后将该系统调用<strong>转发</strong>给OS，后者返回后前者也随之返回。</p>
<ol>
<li>
<p>当user program发出系统调用时，由于VMM控制了机器，因此VMM会陷入kernel mode</p>
</li>
<li>
<p>VMM跳转到OS的<code>trap handler</code>，并让OS处理该system call</p>
<ul>
<li>VMM知道OS的<code>trap handler</code>的位置，因为OS启动时会通过特权指令来安装自己的<code>trap handler</code>，因此会陷入VMM,此时VMM会记录该<code>trap handler</code>在内存中的位置</li>
</ul>
</li>
<li>
<p>OS完成后会通过<code>return</code>返回,这也是system call, 因此VMM真正从<code>trap</code>返回</p>
<ul>
<li><code>return</code>: 在X86上是<code>iret</code></li>
</ul>
</li>
</ol>
</li>
<li>
<p>由于guest OS不可以无限制地访问硬件，因此它不能处于kernel mode。 一般而言，guest OS会处于某种特权更小的kernel mode</p>
</li>
</ul>
<h2 id="执行系统调用：-traditional"><a class="header-anchor" href="#执行系统调用：-traditional"></a>执行系统调用： traditional</h2>
<ol>
<li>进程： 发出system call，陷入OS</li>
<li>硬件： 切换到kernel mode,跳转到<code>trap handler</code>
<ul>
<li>如前所述，OS启动时，会利用特权指令安装<code>trap handler</code>，因此硬件知道<code>trap handler</code>的地址</li>
</ul>
</li>
<li>OS： 在kernel mode处理system call, 从<code>trap</code>返回</li>
<li>硬件：切换到user mode</li>
<li>进程：继续执行</li>
</ol>
<h2 id="执行系统调用：with-Virtualization"><a class="header-anchor" href="#执行系统调用：with-Virtualization"></a>执行系统调用：with  Virtualization</h2>
<ol>
<li>进程： 发出system call，陷入OS</li>
<li>VMM：事实上进程陷入的是VMM, VMM将该system call转发给guest OS的<code>trap handler</code></li>
<li>OS： 在kernel mode处理system call, 从<code>trap</code>返回（调用特权指令）</li>
<li>VMM：知道OS尝试返回，VMM真正从<code>trap</code>返回</li>
<li>进程：继续执行</li>
</ol>
<h1 id="虚拟化内存"><a class="header-anchor" href="#虚拟化内存"></a>虚拟化内存</h1>
<ul>
<li>
<p>OS将物理内存抽象为地址空间，使得每个进程有自己私有地址空间的假象</p>
<ul>
<li>OS 页表： VPN to PFN</li>
</ul>
</li>
<li>
<p>VMM将机器内存抽象为物理内存，使OS有自己完全掌握机器内存的假象</p>
<ul>
<li>
<p>即： VMM管理OS的物理到机器内存映射</p>
</li>
<li>
<p>VMM页表：PFN to MFN（ 机器帧号 ）</p>
</li>
</ul>
</li>
<li>
<p>硬件TLB： 当TLB未命中时，OS必须参与处理未命中</p>
</li>
</ul>
<h2 id="TLB未命中流程：-traditional"><a class="header-anchor" href="#TLB未命中流程：-traditional"></a>TLB未命中流程： traditional</h2>
<ul>
<li>OS TLB和VMM TLB都是TLB的软件管理程序，这里所指的TLB是硬件TLB</li>
</ul>
<ol>
<li>进程： 从内存加载。 TLB未命中。 <code>TRAP</code></li>
<li>OS：OS TLB 未命中处理程序：
<ul>
<li>从VA提取VPN</li>
<li>查找页表</li>
<li>如果存在且有效，则取得PFN,更新TLB</li>
<li>从<code>TRAP返回</code></li>
</ul>
</li>
<li>进程： 继续执行，返回到导致<code>trap</code>的PC. 指令重试，导致TLB命中</li>
</ol>
<h2 id="TLB未命中流程：-with-Virtualization"><a class="header-anchor" href="#TLB未命中流程：-with-Virtualization"></a>TLB未命中流程： with  Virtualization</h2>
<ul>
<li>由于VMM是机器的所有者，因此TLB未命中时， VMM会<code>TRAP</code>，它会立即跳转到OS TLB未命中处理程序。</li>
<li>OS TLB查找页表，并<strong>尝试</strong>在TLB中安装VPN - PFN映射。 这也是一种特权指令，导致又一次<code>TRAP</code>VMM.</li>
<li>此时，VMM给TLB事实上安装 <strong>VPM - MFN</strong> 映射（ 而不是 VPN - PFN映射）</li>
</ul>
<hr>
<ol>
<li>进程： 从内存加载。 TLB未命中。 <code>TRAP</code></li>
<li>VMM ： ：事实上进程陷入的是VMM,。 VMM TLB未命中处理程序调用OS TLB 未命中处理程序</li>
<li>OS：OS TLB 未命中处理程序：
<ul>
<li>从VA提取VPN</li>
<li>查找页表</li>
<li>如果存在且有效，则取得PFN,更新TLB，这是特权操作，导致<code>TRAP</code></li>
</ul>
</li>
<li>VMM：OS TLB陷入VMM, VMM用 VPM - MFN映射来更新TLB。 跳回OS</li>
<li>OS： 从<code>TRAP</code>返回</li>
<li>VMM：看到OS返回的特权指令， VMM真正返回</li>
<li>进程： 继续执行，返回到导致<code>trap</code>的PC. 指令重试，导致TLB命中</li>
</ol>
<h2 id="硬件管理的TLB"><a class="header-anchor" href="#硬件管理的TLB"></a>硬件管理的TLB</h2>
<p>之前讲的都是软件管理的TLB，之前文章提到，也有硬件管理的TLB</p>
<ul>
<li>硬件管理TLB时，硬件在TLB miss时遍历页表并更新TLB ， VMM没有机会参与其中，因此无法在此时建立VPM - MFN映射</li>
<li>作为替代，VMM必须监视OS对每个页表的更改，并保留一个影子页表<code>shadow page table</code>. 它维护进程的<strong>虚拟地址到机器地址</strong>的映射。 每当os尝试安装进程的OS级页表时，VMM就会安装进程的影子页表，然后硬件将虚拟地址转换为机器地址，OS注意不到上述替换的发生
<ul>
<li>也就是：OS页表里面存的是<code>VPN - MFN</code>映射。 硬件根据这个映射去物理内存（事实上是机器内存）寻找。</li>
<li>之前软件管理TLB时， <code>VPN - MFN</code>映射存在TLB上， 硬件根据这个映射去物理内存（事实上是机器内存）寻找。</li>
</ul>
</li>
</ul>
<h1 id="总结"><a class="header-anchor" href="#总结"></a>总结</h1>
<ul>
<li>
<p>VMM的关键是<strong>扩展<code>limited directed execction</code>概念，让VMM能够介入TRAP</strong></p>
</li>
<li>
<p>VMM能够完全控制机器资源的分配方式</p>
</li>
<li>
<p>之前《现代操作系统》提到，VMM事实上<strong>将物理资源直接分配给内存，没有任何抽象</strong>。这话也没错。 在内存虚拟化层面，VMM偷偷把物理地址替换为了机器地址，OS确实在对物理硬件进行操作（他只是不知道这个映射; CPU虚拟化层面也类似。</p>
<ul>
<li>
<p>相比OS将物理硬件抽象为文件系统等漂亮的API, VMM仅仅将硬件资源抽象为虚拟的硬件资源，</p>
<p>这两种资源使用上是一样的，因此“不是那么抽象”</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>OS Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>OS Virtualization</title>
    <url>/2022/04/17/OS-Virtualization/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>CPU虚拟化</li>
<li>内存虚拟化</li>
</ul>
<span id="more"></span>
<h1 id="CPU-Virtualization"><a class="header-anchor" href="#CPU-Virtualization"></a>CPU Virtualization</h1>
<h2 id="进程"><a class="header-anchor" href="#进程"></a>进程</h2>
<ul>
<li>
<p><strong>进程是虚拟化的CPU</strong></p>
</li>
<li>
<p>进程映像包括:</p>
<ul>
<li>进程控制块( PCB)</li>
<li>进程程序块</li>
<li>进程数据块</li>
<li>内核栈
<ul>
<li>在<code>x86</code>上，执行<code>TRAP</code>时， CPU会将一些寄存器保存到该进程的内核栈上， 从<code>TRAP</code>返回将弹出这些值，并恢复<code>user mode</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>进程三状态图：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/Thread%20Status.png" alt="Thread Status"></p>
</li>
<li>
<p>Linux父进程与子进程在终止时没有相互依赖关系。即爹死了儿子也可以活着, 只是其父进程变为<code>init</code>进程( init 进程是系统的第一个进程，PID=1)</p>
</li>
</ul>
<h2 id="进程API"><a class="header-anchor" href="#进程API"></a>进程API</h2>
<p>注意，<code>fork()</code>和<code>exec()</code>是分离的，这使得程序可以在<code>fork()</code>之后，<code>exec()</code>之前运行代码，最典型的例子是shell的workflow，参见<em>Using Shell</em></p>
<h3 id="fork（）"><a class="header-anchor" href="#fork（）"></a>fork（）</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5_1.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">&quot;hello world (pid: %d)\n&quot;</span>, (<span class="type">int</span>) getpid()  );</span><br><span class="line">    <span class="type">int</span> rc = fork();</span><br><span class="line">    <span class="keyword">if</span>(rc &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>( <span class="built_in">stderr</span>, <span class="string">&quot;fork failed \n&quot;</span> );</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rc == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello, I am child (pid: %d)\n&quot;</span>, (<span class="type">int</span>)getpid());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello, I am parent of %d (pid: %d)\n&quot;</span>, rc, (<span class="type">int</span>)getpid() );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello world (pid: 5951)</span><br><span class="line">hello, I am child (pid: 5957)</span><br><span class="line">hello, I am parent of 5957 (pid: 5951)</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>fork()</code>创建进程</p>
</li>
<li>
<p>子进程不会从<code> main()</code>开始执行，而是从<code>fork()</code>处返回，就像它自己调用了<code>fork()</code></p>
</li>
<li>
<p>子进程几乎完全拷贝了父进程，拥有和父进程相同的地址空间，寄存器，PC等，但它从<code>fork()</code>获得的返回值不同</p>
</li>
<li>
<p><code>fork()</code>返回值：</p>
<ul>
<li>
<p>ERRORS： -1</p>
</li>
<li>
<p>子进程： 0</p>
</li>
<li>
<p>父进程：  新创建的子进程的PID</p>
</li>
</ul>
</li>
</ul>
<h3 id="wait（）"><a class="header-anchor" href="#wait（）"></a>wait（）</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5_2.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">&quot;hello world (pid: %d)\n&quot;</span>, (<span class="type">int</span>) getpid()  );</span><br><span class="line">    <span class="type">int</span> rc=fork();</span><br><span class="line">    <span class="keyword">if</span>(rc &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>( <span class="built_in">stderr</span>, <span class="string">&quot;fork failed \n&quot;</span> );</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rc == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello, I am child (pid: %d)\n&quot;</span>, (<span class="type">int</span>)getpid());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> wc = wait(<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello, I am parent of %d (wc: %d) (pid: %d)\n&quot;</span>, rc, wc, (<span class="type">int</span>)getpid() );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello world (pid: 6747)</span><br><span class="line">hello, I am child (pid: 6762)</span><br><span class="line">hello, I am parent of 6762 (wc: 6762) (pid: 6747)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>wait()</code>会在子进程运行结束后才返回</li>
<li>如果父进程先运行，它会马上调用<code>wait()</code></li>
</ul>
<h3 id="exec（）"><a class="header-anchor" href="#exec（）"></a>exec（）</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5_3.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>( <span class="string">&quot;hello world (pid: %d)\n&quot;</span>, (<span class="type">int</span>) getpid()  );</span><br><span class="line">    <span class="type">int</span> rc = fork();</span><br><span class="line">    <span class="keyword">if</span>(rc &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>( <span class="built_in">stderr</span>, <span class="string">&quot;fork failed \n&quot;</span> );</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rc == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello, I am child (pid: %d)\n&quot;</span>, (<span class="type">int</span>)getpid());</span><br><span class="line">        <span class="type">char</span> *myargs[<span class="number">3</span>];</span><br><span class="line">        myargs[<span class="number">0</span>] = strdup(<span class="string">&quot;wc&quot;</span>);<span class="comment">//program: &quot;wc&quot;(word count)</span></span><br><span class="line">        myargs[<span class="number">1</span>] = strdup(<span class="string">&quot;5_3.c&quot;</span>);<span class="comment">//argument: file to count</span></span><br><span class="line">        myargs[<span class="number">2</span>] = <span class="literal">NULL</span>; <span class="comment">// marks end of array</span></span><br><span class="line">        execvp( myargs[<span class="number">0</span>], myargs );</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;this shouldn&#x27;t print put&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> wc = wait(<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello, I am parent of %d (wc: %d) (pid: %d)\n&quot;</span>, rc, wc, (<span class="type">int</span>)getpid() );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello world (pid: 7615)</span><br><span class="line">hello, I am child (pid: 7634)</span><br><span class="line"> 32  98 810 5_3.c</span><br><span class="line">hello, I am parent of 7634 (wc: 7634) (pid: 7615)</span><br></pre></td></tr></table></figure>
<p><code>exec()</code>:  replaces the current process image with a new process imag. 将当前进程的内容替换为不同的程序（<code>wc</code>）</p>
<ul>
<li>对<code>exec()</code>的成功调用永远不会返回，因为子进程的内容是新的程序</li>
<li><code>execvp(const char *file, char *const argv[])</code>: one of <code>exec()</code> family
<ul>
<li>The initial argument for these functions is the name of a file that is to be executed.</li>
<li>The <strong>char</strong> *<strong>const</strong> <strong>argv[]</strong> argument is an array of pointers to null-terminated strings that represent the argument list available to  the new  program.  The first argument, by convention, should point to the <u>filename associated with the file being executed</u>.  The array of pointers <strong>must</strong> be terminated by a null pointer.( 因此有<code>arg[2] = NULL</code> )</li>
</ul>
</li>
</ul>
<h2 id="插叙-Shell"><a class="header-anchor" href="#插叙-Shell"></a>插叙 Shell</h2>
<ul>
<li><code>fork()</code>和<code>exec()</code>分离, 使得程序可以在<code>fork()</code>之后, <code>exec()</code>之前运行代码.</li>
</ul>
<h2 id="Limited-directed-execution"><a class="header-anchor" href="#Limited-directed-execution"></a>Limited directed execution</h2>
<p>OS首先（在启动时）设置<code>trap table</code>并开启时钟中断 （都是特权操作），然后仅在受限模式下运行进程。 只在执行特权操作，或者当进程需要切换时，才需要OS干预</p>
<h3 id="OS重获CPU控制权"><a class="header-anchor" href="#OS重获CPU控制权"></a>OS重获CPU控制权</h3>
<p>如果一个进程在CPU上运行，那么OS无法运行。 因此OS需要重获CPU的控制权</p>
<ul>
<li>等待系统调用： 进程通过<code>syscall</code>主动放弃CPU, 比如<code>yield</code></li>
<li>时钟中断： 时钟设备可以产生中断，产生中断时，当前进程停止，OS中的 interrupt handler运行，此时OS重获CPU控制权
<ul>
<li>硬件在发生中断时需要为当前进程保存状态</li>
</ul>
</li>
</ul>
<h3 id="context-switch"><a class="header-anchor" href="#context-switch"></a>context switch</h3>
<p>上下文切换（ <code>context switch</code>）: OS获得控制权后，需要觉得是否切换进程，如果要切换，那么需要上下文切换</p>
<ul>
<li>OS为当前进程保存状态，并为即将执行的进程恢复状态
<ul>
<li>&quot;状态&quot;: 寄存器，在该进程的内核栈中</li>
<li>事实上，除了寄存器，cache, TLB和其他硬件的状态也被切换，因此context switch的成本可能非常高昂</li>
</ul>
</li>
<li>本质上是为了确保最后从陷阱返回时，不是返回到之前运行的进程，而是继续执行另一个进程</li>
</ul>
<h2 id="插叙-系统调用"><a class="header-anchor" href="#插叙-系统调用"></a>插叙 系统调用</h2>
<ul>
<li>我们对系统调用的调用，实际上是对C lib中对应函数的函数调用，这些函数遵循了内核的调用约定（如将参数推到栈，执行<code>TRAP</code>，返回控制权等）实现了系统调用。 当然，这些C lib中的函数是汇编写的</li>
</ul>
<h2 id="插叙-中断"><a class="header-anchor" href="#插叙-中断"></a>插叙 中断</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/Interruption.png" alt="Interruption"></p>
<blockquote>
<p>在指令执行周期最后增加一个微操作，以响应中断，CPU在完成执行阶段后，如果允许中断，则进入中断阶段</p>
</blockquote>
<p>中断处理过程：</p>
<ol>
<li>保护CPU状态</li>
<li>分析被中断进程的PSW中断码字段，识别中断源</li>
<li>分别处理发生的中断事件</li>
</ol>
<h2 id="Thread-Scheduling"><a class="header-anchor" href="#Thread-Scheduling"></a>Thread Scheduling</h2>
<p>详见<em>OS Thread Sheduling Algorithm</em></p>
<h1 id="Memory-Virtualization"><a class="header-anchor" href="#Memory-Virtualization"></a>Memory Virtualization</h1>
<p>计算机的physical memory可以被虚拟化virtual memory. 由硬件<strong>MMU</strong>( Memory Management Unit ) 和 OS 共同实现.</p>
<p>虚拟化后,   <u>physical address space(PAS)</u>被映射为<u>virtual address space (VAS)</u>. <strong>程序使用的只是virtual address</strong>, 在底层由MMU和OS将其转换为physical address, 即需要**[address translation](#Address Translation)**:</p>
<p>$$<br>
\operatorname{MAP}: \mathrm{VAS} → \mathrm{PAS} \cup \emptyset<br>
$$<br>
where<br>
$$<br>
\begin{equation}</p>
<p>\operatorname{MAP}(A)=</p>
<p>\left{<br>
\begin{array}{lr}<br>
A^{\prime},\text{if data at virtual addr. A are present at physical addr. A′ in PAS} \<br>
\emptyset, \text{if data at virtual addr. A are not present in physical memory}<br>
\end{array}<br>
\right.<br>
\end{equation}<br>
$$</p>
<ul>
<li>程序使用的只是virtual address, 因此我们常说的<strong>Address space</strong> 是VAS</li>
<li>一个使用VAS的例子是: 我们编写和编译程序时<u>假定内存从0开始</u></li>
</ul>
<h2 id="Address-Space"><a class="header-anchor" href="#Address-Space"></a>Address Space</h2>
<h3 id="Address-Space-of-Linux-process"><a class="header-anchor" href="#Address-Space-of-Linux-process"></a>Address Space of Linux process</h3>
<ul>
<li>
<p><code>ld</code>, <code>ls</code>等命令实际上会调用<code>execve( /usr/bin/COMMAND )</code></p>
<ul>
<li><code>execve()</code>只接受绝对路径</li>
</ul>
</li>
<li>
<p>进程的地址空间 == 内存中若干连续的“段”</p>
</li>
<li>
<p><code>mmap</code>可以将内存中的某一段映射到文件中的某一段</p>
<ul>
<li>
<p>进程中的代码和数据是<code>mmap</code>从内存中映射的</p>
</li>
<li>
<p>可以接受文件描述符</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">mmap</span><span class="params">(<span class="type">void</span> *addr, <span class="type">size_t</span> len, <span class="type">int</span> prot, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">           <span class="type">int</span> fildes, <span class="type">off_t</span> off)</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>查看进程的地址空间： <code>pmap</code></p>
<ul>
<li>动态链接的程序比静态链接的小，并且链接得快， 用<code>pmap</code>分别查看其内容:
<ul>
<li>静态链接程序的地址空间中有其链接库的内容（二进制文件的代码、数据、bss等）</li>
<li>动态链接程序的地址空间中只有其链接库的指针</li>
<li>可以看到地址空间的高位有三个段：<code>vvar</code>, <code>vdso</code>, <code>vsyscall</code>，用于<code>virtual system call</code>
<ul>
<li><code>virtual system call</code>: 不陷入内核的系统调用</li>
</ul>
</li>
</ul>
</li>
<li><code>pmap</code>实际上打印了<code>/proc/PID/maps</code>的一部分信息
<ul>
<li>通过<code>strace pmap XX</code>可以看到<code>pmap</code>调用了<code>openat( XX, \proc\PID\maps )</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Segmaentation"><a class="header-anchor" href="#Segmaentation"></a>Segmaentation</h2>
<p>在MMU中引入不止一个基址/界限寄存器对，而是给每个逻辑段一对，这可以将每个段独立地载入物理内存。 由于只有已用的内存才在物理内存中分配空间，因此可以容纳巨大的地址空间</p>
<ul>
<li>段：在内存空间中的一段连续定长（段有段界限）区域</li>
<li>引用非法地址就会引发段错误</li>
<li>分段会造成外部碎片</li>
</ul>
<p>示例：该地址空间内分为代码, 堆, 栈三段, 然后映射到物理内存</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/Segmentation.png" alt="Segmentation"></p>
<ul>
<li>假设要引用虚拟地址100（在代码段中），MMU将代码段基址加上偏移量（100）得到实际的地址100 + 32KB = 32868</li>
<li>假设要引用虚拟地址4200（在堆中），因为堆在虚拟地址4K开始，那么物理地址中的偏移量其实是4200 - 4K, 所以物理地址应该是 4200 - 4K + 34KB</li>
<li>硬件还需要知道段的增长方向，因为有些段，如栈就是反向增长的。（哪些段会往哪边增长，这可以通过增加标记位，也可以约定俗成）假设要引用虚拟地址15KB（在栈中），地址空间中的偏移是1KB，这意味着栈增长了1KB，而物理内存中栈基址是28KB，增长1KB（反向地）就是27KB。因此对应物理内存27KB</li>
<li>访问非法的地址就会报segmentation fault</li>
</ul>
<p>示例：按如上的计算方式，我们需要知道段段基址，那自然就需要先知道段号，一般会在地址空间中分出高位表示段号。 假设地址空间为14位，前两位表示段号</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"># 段号掩码，二进制<span class="number">11</span>刚好过滤出前两位段号</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SEG_MASK 0x3000</span></span><br><span class="line"></span><br><span class="line"># 段内偏移所在的位数</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SEG_SHIFT 12</span></span><br><span class="line"></span><br><span class="line"># 段内偏移的掩码，二进制的<span class="number">0xFFF</span>刚好过滤出后十二位的段内偏移</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OFFSET_MASK 0xFFF</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Bound[]; # 段界限寄存器</span><br><span class="line"><span class="type">int</span> Base[]; # 段基址寄存器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//得到段号</span></span><br><span class="line">SegmentNum = ( VirtualAddress &amp; SEG_MASK ) &gt;&gt; SEG_SHIFT;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到段内偏移</span></span><br><span class="line">Offset = VirtualAddress &amp; OFFSET_MASK;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( Offset &gt;=  Bound[ SegmentNum ]  )</span><br><span class="line">&#123;</span><br><span class="line">    RaiseException（ PROTECTION_FAULT ）；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  	<span class="comment">//得到物理地址</span></span><br><span class="line">    PhysicalAddr = Base[ Segment ] + Offset;</span><br><span class="line">  	<span class="comment">//访问该地址</span></span><br><span class="line">    Register = AccessMemory( PhysicalAddr );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="共享"><a class="header-anchor" href="#共享"></a>共享</h3>
<p>可以增加几位保护位，来表示段的权限，比如可以将代码段标记为只读， 同样的代码就可以被多个进程共享</p>
<h2 id="Free-Space-Management"><a class="header-anchor" href="#Free-Space-Management"></a>Free Space Management</h2>
<p>由于分段会把内存分为不同大小的单元（即不规则的<strong>内存块</strong>），造成外部碎片，因此需要空闲空间管理算法对内存进行管理</p>
<ul>
<li>这里我们只讨论解决外部碎片（即分段）的空闲空间管理算法，假定算法管理的是一块块连续的字节区域（即内存块）</li>
<li>这里只考虑堆中的内存分配，即<code>malloc</code>，<code>free</code>操作</li>
</ul>
<h3 id="空闲列表"><a class="header-anchor" href="#空闲列表"></a>空闲列表</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node_t</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;<span class="type">node_t</span>;</span><br></pre></td></tr></table></figure>
<p>空闲列表就是一个链表，每个节点都记录了一块没有被分配的空间，假设有下面的 30 字节的堆:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/free%20list%20heap.png" alt="free list heap"></p>
<p>这个堆对应的空闲列表会有两个元素，一个描述第一个 10 字节的空闲区域(字节 0~9)， 一个描述另一个空闲区域(字节 20~29):</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/free%20list%201.png" alt="free list 1"></p>
<p>很明显，任何大于 10 字节的分配请求都会失败(返回 NULL)，因为 没有足够的连续可用空间。 如果是小于10B的请求，那么就从列表的某个节点（比如第二个）中分割一块内存</p>
<p>但是，对于这个(小)堆，如果应用程序调用 free(10)，归还堆中间的空间，空闲列表会变成：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/free%20list%202.png" alt="free list 2"></p>
<p>尽管整个堆现在完全空闲，但它似乎被分割成了 3 个 10 字节的区域。这时， 如果用户请求 20 字节的空间，简单遍历空闲列表会找不到这样的空闲块，因此返回失败. 为此，空闲列表应该能自动<strong>合并</strong>：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/free%20list%203.png" alt="free list 3"></p>
<h3 id="头块"><a class="header-anchor" href="#头块"></a>头块</h3>
<p>头块：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  <span class="title">header_t</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">int</span> magic;</span><br><span class="line">&#125;<span class="type">header_t</span>;</span><br></pre></td></tr></table></figure>
<p><code>free(void* ptr)</code>函数没有指定块大小的参数，因为它假定，对于给定的指针，内存分配库可以确定要释放空间的大小，从而将其放回free list</p>
<ul>
<li>
<p>一般这通过分配<strong>头块</strong>来实现。 每次分配内存块时，在其前面分配一个头块，保存额外信息，这样在（通过指针，也就是内存块起始位置）释放该内存块的时候，通过查询指针前面的头块，就知道了内存块的信息，比如大小，然后根据这些信息来释放内存块（头块也顺便被释放）</p>
<ul>
<li>当然，这意味着malloc/free时，分配/释放的的内存大小，是想要分配/释放给用户的内存大小 + 头块大小</li>
</ul>
<p>整体逻辑如下（假定内存从低位向高位分配，所以头块在内存块的前面）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">free</span><span class="params">(<span class="type">void</span> *ptr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">header_t</span> *header_ptr = (<span class="type">void</span>*)ptr - <span class="keyword">sizeof</span>(<span class="type">header_t</span>); <span class="comment">// 根据分配给用户的内存指针，减去头块大小，获得头块的指针</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取头块的信息</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放头块和内存块</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="头块-空闲列表的实现"><a class="header-anchor" href="#头块-空闲列表的实现"></a>头块 + 空闲列表的实现</h3>
<p>假定要管理4KB的内存块，它是个堆，先初始化堆，加入空闲列表的头节点（free list的节点大小是8B）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">node_t</span> *head = mmap( <span class="literal">NULL</span>, <span class="number">4096</span>, PRPT_READ | PROT_WRITE, MAP_ANON | MAP_PRIVATE, <span class="number">-1</span>, <span class="number">0</span> );</span><br><span class="line">head -&gt; size = <span class="number">4096</span> - <span class="keyword">sizeof</span>(<span class="type">node_t</span>);</span><br><span class="line">head -&gt; next = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>执行这段代码之后，free list的状态只有一个节点，记录的空闲大小为 4088（因为已经分配了一个free list的节点，占了8B）</li>
<li>head 指针指向这块区域的起始地址， 假设<strong>位于16KB</strong>(尽管任何虚拟地址都可以)。堆看起来如图 17.3 所示</li>
<li>假设有一个 100 字节的内存请求。为了满足这个请求，库首先要找到一个足够大小的块。因为目前只有一个 4088 字节的块，所以选中这个块。然后，这个块被分割(split) 为两块:一块足够满足请求(以及头块，如前所述)，一块是剩余的空闲块。假设记录头块为 8 个字节(一个整数记录大小，一个整数记录幻数)，堆中的空间如图 17.4 所示</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/free%20list%20implementation%201.png" alt="free list implementation 1"></p>
<p>至此，对于 100 字节的请求，库从原有的一个空闲块中分配了 <strong>108</strong> 字节，返回指向它的一个指针(在上图中用 ptr 表示)，并在其之前连续的 8 字节中记录头块信息，供未来的 free()函数使用。同时将列表中的空闲节点缩小为 3980 字节(4088−108)。</p>
<p>之后的内存分配以此类推</p>
<p>如果用户程序通过 <code>free(ptr)</code>归还一些内存，那无非是让head指向<code>ptr - 8</code>,读取8字节的头块，得到要释放的内存信息，然后释放头块+紧跟的内存块：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/free%20list%20implementation%202.png" alt="free list implementation 2"></p>
<ul>
<li>这个堆的起始地址是16KB</li>
<li>假设要<code>free(16500)</code>（ 即16384( 16KB ) + 前一块的108 ），也就是图上的<code>sptr</code>指针, 则令head指向sptr前的头块，得到sptr（开头的）内存块的信息，然后删除头块和sptr内存块</li>
</ul>
<h2 id="Paging"><a class="header-anchor" href="#Paging"></a>Paging</h2>
<p>分页将进程的地址空间分割成固定大小的单元，称为page, 并将物理内存也分割成相同的固定大小的单元，称为frame, 每个frame装一个page, 将page和frame编号</p>
<ul>
<li>虚拟页号( virtual page number, VPN ): 因为地址空间都属于虚拟内存（虚拟空间），因此称为“虚拟”页号</li>
<li>物理帧号( physical frame number, PFN ): 因为帧都处于物理内存（物理空间）中，因此称为“物理”帧号</li>
</ul>
<p>分页视角下的地址空间为:</p>
<ul>
<li>
<p><strong>虚拟地址 = VPN + 页内偏移</strong></p>
</li>
<li>
<p><strong>物理地址 = PFN + 页框内偏移</strong></p>
<ul>
<li>稍后我们会看到, 虚拟地址(VA, virtual address) 到 物理地址( PA, hysical address )的转换其实只需要转换VPN到PFN, 偏移量是不变的. 因此<strong>页内偏移 = 页框内偏移</strong></li>
</ul>
</li>
</ul>
<p>在分页机制下, <strong>每个进程都有一个页表(page table)</strong>, 页表就是页表项的列表. 每个<strong>页表项</strong>( page table entry, PTE )存储了一个page到 frame 的映射（即虚拟页号到物理页号到映射）</p>
<ul>
<li><strong>页表项的索引就等于VPN</strong>， 比如VPN为2， 那就对应着页表中下标为2的PFN.</li>
<li>因此, PTE是不包含VPN的, PTE只包含PFN和一些控制位.</li>
</ul>
<p>一个Page和一个Frame是大小相等的, 由于整个内存(or 物理地址空间)都被划分成了一个个Frame或者Page, 所以Frame/Page都从0开始.</p>
<ul>
<li>在十进制下:
<ul>
<li>Frame的起始地址 = PFN * page_size</li>
<li>Page的起始地址 = VPN * page_size</li>
</ul>
</li>
<li>在二进制下:
<ul>
<li>Frame的起始地址 = <code>[PFN:offset]</code>, <code>offset</code>为全0</li>
<li>Page的起始地址 =<code>[VPN:offset]</code>, <code>offset</code>为全0</li>
</ul>
</li>
</ul>
<p>页表基址寄存器（ PTBR, page table base register ）: 存储了页表的起始位置的物理地址，用于访问PTE：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 得到VPN</span></span><br><span class="line">VPN = ( VirtualAddress &amp; VPN_MASK ) &gt;&gt; SHIFT;</span><br><span class="line"></span><br><span class="line"><span class="comment">// VPN就是PTE的索引，得到PTE在页表中的偏移，加上页表的起始地址，就是该PTE的物理地址</span></span><br><span class="line">PTEAddr = PageTableBaseRegister + (VPN + <span class="keyword">sizeof</span>(PTE));</span><br></pre></td></tr></table></figure>
<p>只要查询页表，找到PTE（VPN就是PTE的下标），读取PTE，将VPN转换为PFN，再加上业内偏移，就得到了物理地址：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/virtual%20address%20to%20physical%20address.png" alt="virtual address to physical address"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">offset = VirtualAddress &amp; OFFSET_MASK PhysAddr = (PFN &lt;&lt; SHIFT) | offset</span><br><span class="line"><span class="comment">// Extract the VPN from the virtual address</span></span><br><span class="line">VPN = (VirtualAddress &amp; VPN_MASK) &gt;&gt; SHIFT</span><br><span class="line"></span><br><span class="line"><span class="comment">// Form the address of the page-table entry (PTE)</span></span><br><span class="line">PTEAddr = PTBR + (VPN * <span class="keyword">sizeof</span>(PTE))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fetch the PTE</span></span><br><span class="line">PTE = AccessMemory(PTEAddr)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// Check if process can access the page </span></span><br><span class="line"><span class="keyword">if</span> (PTE.Valid == False)</span><br><span class="line">	RaiseException(SEGMENTATION_FAULT)</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (CanAccess(PTE.ProtectBits) == False)</span><br><span class="line">    RaiseException(PROTECTION_FAULT)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="comment">// Access is OK: form physical address and fetch it offset = VirtualAddress &amp; OFFSET_MASK</span></span><br><span class="line">	PhysAddr = (PTE.PFN &lt;&lt; PFN_SHIFT) | offset</span><br><span class="line">	Register = AccessMemory(PhysAddr)</span><br></pre></td></tr></table></figure>
<h3 id="段页式"><a class="header-anchor" href="#段页式"></a>段页式</h3>
<p>段页式就是将分段和分页结合，给进程的每个逻辑段分配一个页表。 此时段基址寄存器指向的就不是段的物理基址，而是段对应的页表的物理基址</p>
<p>示例， 假设 32 位虚拟地址空间包含 4KB 页面，并且地址空间分为 4 个段。在这个例子中，我们只使用 3 个段:代码，堆，栈</p>
<p>用地址空间的前两位表示段号。假设 00 是未使用的段，01 是代 码段，10 是堆段，11 是栈段。因此，虚拟地址如下所示:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/segment%20plus%20page.png" alt="segment plus page"></p>
<p>当进程正在运行时，每个段的基址寄存器都包含该段的线性页表的物理地址。因此，系统中的每个进程现在都有 3 个与其关联的页表。在上下文切换时，必须更改这些寄存器，以反映新运行进程的页表的位置。</p>
<p>在 TLB 未命中时(假设硬件管理的 TLB，即硬件负责处理 TLB 未命中)，硬件使用分段位(SN)来确定段号（也确定了要用哪个基址和界限寄存器对）。然后硬件将段基址寄存器中的物理地址（就是页表的物理地址）与 VPN 结合起来， 形成页表项(PTE)的地址:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">SN = (VirtualAddress &amp; SEG_MASK) &gt;&gt; SN_SHIFT </span><br><span class="line">VPN = (VirtualAddress &amp; VPN_MASK) &gt;&gt; VPN_SHIFT </span><br><span class="line">AddressOfPTE = Base[SN] + (VPN * <span class="keyword">sizeof</span>(PTE))</span><br></pre></td></tr></table></figure>
<h3 id="多级页表"><a class="header-anchor" href="#多级页表"></a>多级页表</h3>
<p>多级页表就是把页表本身也分页，每个页就是页表的sublist.对页表页，用页目录( page directory )来管理，页目录的每一项就是页目录项（.page directory entry， PDE ）, 它存储了<strong>虚拟页号 - 页帧号的</strong>映射，以及对应页表页的有效位。 我们只讨论两级页表，更高级的页表可以以此类推</p>
<ul>
<li>注意，这里“虚拟页号 - 页帧号映射“中的页帧号，指的是<strong>页表页的所在的页帧号</strong>。因为页表分页了，每一页自然就是物理内存中的物理帧，PDE就是将虚拟页号转换成页表页的物理帧号，根据虚拟页号来读取页表页。 因此，实际上<strong>PDE是“VPN - 页表页”的映射</strong></li>
<li>“有效位”是面向页表页的，而一个页表页“有效”，指的是该页表页（就是PTE的集合）中至少一个PTE有效。 反之，一个无效的页表页就是所有PTE都无效，该页表页会被分配PDE，但不会再</li>
<li>好处是，假设一个页表有100项，可以每10项一页，分10页， 其中有七页都无效（即70个PTE都为空），按照传统的页表，我依然要分配100项的空间，但是按照多级页表，只需要为三页（30项）分配空间</li>
</ul>
<p>//TODO</p>
<h3 id="反向页表"><a class="header-anchor" href="#反向页表"></a>反向页表</h3>
<p>传统页表是每个进程一个，而反向页表是整个系统一个。每个PTE带有所属进程的标识符。 要搜索反向页表，需要借助散列表等数据结构</p>
<p># TODO</p>
<h2 id="Address-Translation"><a class="header-anchor" href="#Address-Translation"></a>Address Translation</h2>
<p>我们以分页作为虚拟化手段, 解释地址转换的过程:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/Memory%20Virtualization/Address%20translation%20with%20a%20page%20table.png" alt="Address translation with a page table"></p>
<h3 id="Symbol-table"><a class="header-anchor" href="#Symbol-table"></a>Symbol table</h3>
<p>Summary of address translation symbols:</p>
<ul>
<li>
<p>Basic parameters:</p>
<table>
<thead>
<tr>
<th>Symbol</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>$N = 2^n$</td>
<td>Number of addresses in virtual address space</td>
</tr>
<tr>
<td>$M = 2^m$</td>
<td>Number of addresses in physical address space</td>
</tr>
<tr>
<td>$P = 2^p$</td>
<td>Page size (bytes)</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>Components of a virtual address (VA)</p>
<table>
<thead>
<tr>
<th>Symbol</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>VPO</td>
<td>Virtual page offset (bytes)</td>
</tr>
<tr>
<td>VPN    $M = 2^m$</td>
<td>Virtual page number</td>
</tr>
<tr>
<td>TLBI</td>
<td>TLB index</td>
</tr>
<tr>
<td>TLBT</td>
<td>TLB tag</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>Components of a physical address (PA):</p>
<table>
<thead>
<tr>
<th>Symbol</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>PPO</td>
<td>Physical page offset (bytes)</td>
</tr>
<tr>
<td>PPN</td>
<td>Physical page number</td>
</tr>
<tr>
<td>CO</td>
<td>Byte offset within cache block</td>
</tr>
<tr>
<td>CI</td>
<td>Cache index</td>
</tr>
<tr>
<td>CT</td>
<td>Cache tag</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h3 id="Process"><a class="header-anchor" href="#Process"></a>Process</h3>
<h4 id="Page-Hit"><a class="header-anchor" href="#Page-Hit"></a>Page Hit</h4>
<p>如果Page hit, 即PTE正确地存在页表中, 则:</p>
<ol>
<li>CPU生成一个virtual address, 送给MMU处理</li>
<li>MMU根据VPN, 从cache/main memory中查找PTE</li>
<li>The cache/main memory returns the PTE to the MMU.</li>
<li>MMU根据PTE的内容(VPN - PFN的mapping), 组合出physical address, 然后送给cache/main memory.</li>
<li>The cache/main memory returns the requested data word to the processor.</li>
</ol>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/Memory%20Virtualization/Address%20translation%20Page%20hit.png" alt="Address translation Page hit"></p>
<p>此时Address Translation是纯硬件的(CPU, MMU).</p>
<h4 id="Page-Fault"><a class="header-anchor" href="#Page-Fault"></a>Page Fault</h4>
<p>如果发生了page fault( MMU发现PTE的valid bit为false ), 则会由硬件和OS(负责中断)共同处理:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/Memory%20Virtualization/Address%20translation%20Page%20fault.png" alt="Address translation Page fault"></p>
<p>1~3. 和之前的步骤1~3一样,</p>
<ol start="4">
<li>MMU发现PTE是invalid的, so the MMU triggers an exception, which transfers control in the CPU to a <u>page fault</u> exception handler in the operating system kernel.</li>
<li>The fault handler identifies a victim page in physical memory, and if that page has been modified, pages it out to disk.</li>
<li>The fault handler pages in the new page and <u>updates the PTE in memory</u>.</li>
<li>和其他异常中断一样, the fault handler返回原进程, CPU <strong>replay</strong>那条之前引起page fault的指令, 将virtual address再次送给MMU, 但由于此时的PTE已经存储在页表中了, 因此这是个<strong>page hit</strong>. 之后的过程就如之前page hit的情况</li>
</ol>
<h3 id="Integrating-Caches-and-VM"><a class="header-anchor" href="#Integrating-Caches-and-VM"></a>Integrating Caches and VM</h3>
<p>采用虚拟化后, 指令执行就多了一次VA -&gt; PA的映射, 对于分页来说, 也就是查询页表. 为了提高效率, 考虑到内存访问的Locality, 我们采用Cache的思想, 把常用的PTE存入一个Cache, 不需要每次都查页表了.</p>
<p>The main idea is that <strong>the address translation occurs <u>before</u> the cache lookup</strong>.</p>
<ul>
<li>Cache属于内存系统一部分, <strong>面对的是Physical Address, cache对于物理地址是透明的</strong>.</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/Memory%20Virtualization/Integrating%20VM%20with%20a%20physically%20addressed%20cache.png" alt="Integrating VM with a physically addressed cache."></p>
<h3 id="TLB"><a class="header-anchor" href="#TLB"></a>TLB</h3>
<p>TLB( Translation Lookaside Buffer )就是上面思想的一个实现, 它是种特殊的cache, OS把一部分常用的<strong>PTE</strong>存入TLB. 通过查TLB, 得到</p>
<h4 id="TLB-Organization"><a class="header-anchor" href="#TLB-Organization"></a>TLB Organization</h4>
<p>TLB一般是set associative cache(详见<a href="https://lyk-love.cn/2022/12/01/Cache-Memory/">Cache Memory</a>). 在TLB视角下, virtual address被划分如下:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/Memory%20Virtualization/TLB%20Organization.png" alt="TLB Organization"></p>
<ul>
<li>注意: <strong>和main memory cache不同, TLB划分的是虚拟地址, 而不是物理地址</strong></li>
<li>在TLB视角下, VPN部分的高位存储tag, 低位存储set index; <strong>VPO部分似乎没有用???</strong></li>
<li>TLB是set associative cache, TLBE(TLB Entry)作为cache line, 里面也不会存储组号. 由于TLBE一般也不会存储标志位, 因此TLBE大小 = Tag大小 + PTE大小</li>
<li>TLB 即为快表，快表只是慢表(Page)的小小副本，因此 TLB 命中，必然 Page 也命中，而当 Page 命中，TLB 则未必命中.</li>
</ul>
<h4 id="Address-Translation-Using-TLB"><a class="header-anchor" href="#Address-Translation-Using-TLB"></a>Address Translation Using TLB</h4>
<p>使用TLB后, Address Translation过程如下:</p>
<ol>
<li>
<p>对每次内存访问，OS先查看TLB，看是否有期望的转换映射.</p>
</li>
<li>
<p>有的话（TLB hit）就直接得到了PFN，不需要查页表. 没有的话( TLB miss )就继续**查页表, **</p>
<ol>
<li>**如果PTE Valid, 则进入步骤3. **</li>
<li><strong>如果PTE Invalid, 则从外部存储中得到PTE, 更新页表, 再重试查TLB的指令, 接着TLB会继续miss, 但查页表时会得到PTE Valid, 进入步骤3</strong>.</li>
<li><strong>更新TLB, 并得到PFN, 拼接出PA</strong>.</li>
</ol>
<ul>
<li>可以看到, TLB 要么hit, 要么会有连续两次miss被年过半百</li>
</ul>
</li>
<li>
<p>用PA来进行后续的内存访问( main memory cache, main memory, disk ...)</p>
</li>
</ol>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/Memory%20Virtualization/Address%20Translation%20with%20TLB.png" alt="Address Translation with TLB"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">VPN = (VirtualAddress &amp; VPN_MASK) &gt;&gt; SHIFT </span><br><span class="line">(Success, TlbEntry) = TLB_Lookup(VPN)</span><br><span class="line"><span class="keyword">if</span> (Success == True) <span class="comment">// TLB Hit</span></span><br><span class="line">	<span class="keyword">if</span> (CanAccess(TlbEntry.ProtectBits) == True) <span class="comment">//查TLB控制位，看该TLB项是否有效</span></span><br><span class="line">		Offset = VirtualAddress &amp; OFFSET_MASK </span><br><span class="line">		PhysAddr = (TlbEntry.PFN &lt;&lt; SHIFT) | Offset 		<span class="comment">//得到物理地址</span></span><br><span class="line">		AccessMemory(PhysAddr)</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line"> 		RaiseException(PROTECTION_FAULT) <span class="number">10</span> <span class="comment">//该TLB项无效，进入异常处理程序，其实一般就是进入下一步的页表读取步骤</span></span><br><span class="line"> 	</span><br><span class="line"><span class="comment">// TLB Miss，进入常规的页表读取步骤</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	PTEAddr = PTBR + (VPN * <span class="keyword">sizeof</span>(PTE)) </span><br><span class="line">  PTE = AccessMemory(PTEAddr)</span><br><span class="line">	<span class="keyword">if</span> (PTE.Valid == False) </span><br><span class="line">	RaiseException(SEGMENTATION_FAULT)</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (CanAccess(PTE.ProtectBits) == False) </span><br><span class="line">		RaiseException(PROTECTION_FAULT)</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		TLB_Insert(VPN, PTE.PFN, PTE.ProtectBits) RetryInstruction()</span><br></pre></td></tr></table></figure>
<h5 id="TLB-Hit"><a class="header-anchor" href="#TLB-Hit"></a>TLB Hit</h5>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/Memory%20Virtualization/TLB%20hit.png" alt="TLB hit"></p>
<h5 id="TLB-Miss"><a class="header-anchor" href="#TLB-Miss"></a>TLB Miss</h5>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/Memory%20Virtualization/TLB%20miss.png" alt="TLB miss"></p>
<h4 id="Memory-Access-Using-TLB"><a class="header-anchor" href="#Memory-Access-Using-TLB"></a>Memory Access Using TLB</h4>
<p>采用TLB后, 完整的内存访问过程如下:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/Memory%20Virtualization/Memory%20Access%20using%20TLB.png" alt="Memory Access using TLB"></p>
<h4 id="TLB-Refresh"><a class="header-anchor" href="#TLB-Refresh"></a>TLB Refresh</h4>
<ul>
<li>TLB存放了PTE集合，PTE只对页表有效，页表只对所属的进程有效，因此<strong>TLB只对所属进程有效</strong>. <strong>context switch时，要刷新TLB</strong>
<ul>
<li>刷新TLB会导致每次上下文切换后，都会有大量TLB miss， 为此，TLB实际上会<u>存储多个进程（即多个页表）的PTE，并增加一个地址空间标识符字段（相当于PID），不同进程的PTE就用地址空间标识符来区分</u></li>
</ul>
</li>
<li>除此之外，TLB项还有一些其他的控制位，比如有效位
<ul>
<li>TLB的有效位和页表的有效位不同，<strong>如果PTE无效，表面该页没有被进程申请使用，访问该页是非法的；而TLB项无效，仅仅表明该TLB项不是有效的地址映射</strong></li>
</ul>
</li>
</ul>
<h2 id="虚拟内存"><a class="header-anchor" href="#虚拟内存"></a>虚拟内存</h2>
<p>通过设置交换空间，可以将内存容量（在逻辑上）扩大，用户看到的不是实际内存大小，而是虚拟内存大小</p>
<h3 id="交换空间"><a class="header-anchor" href="#交换空间"></a>交换空间</h3>
<p>可以在磁盘上分配一块空间用于用于物理页的移入和移出，这称为swap space，当然我们会假设OS以页为单位对swap space读取/写入</p>
<p>示例，假设一个 4 页的物理内存和一个 8 页的交换空间。3 个进程(进程 0、进程 1 和进程 2)主动共享物理内存。但 3 个中的每一个， 都只有一部分有效页在内存中，剩下的在硬盘的交换空间中。第 4 个进程(进程 3)的所有页都被交换到硬盘上，很明显它目前没有运行。有一块交换空间是空闲的。可以看出，使用交换空间让系统假装内存比实际物理内存更大：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Virtualization/swap%20space.png" alt="swap space"></p>
<h3 id="page-fault"><a class="header-anchor" href="#page-fault"></a>page fault</h3>
<p>页错误实际上不算错误，页错误意思是找到的页不在物理内存中，需要从磁盘中换出来，但这个访问本身对用户来说是合法的。 Anyway，页错误的处理流程是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">PFN = FindFreePhysicalPage()</span><br><span class="line"><span class="keyword">if</span> (PFN == <span class="number">-1</span>) <span class="comment">// no free page found</span></span><br><span class="line">	PFN = EvictPage() <span class="comment">// os必须为将要换入的页找到一个物理帧，如果没有这样的物理帧，我们将踢出一些 物理页 </span></span><br><span class="line">DiskRead(PTE.DiskAddr, pfn) <span class="comment">// sleep (waiting for I/O)</span></span><br><span class="line">PTE.present = True</span><br><span class="line">PTE.PFN = PFN</span><br><span class="line">RetryInstruction()</span><br><span class="line"></span><br><span class="line"><span class="comment">// update page table with present // bit and translation (PFN)</span></span><br><span class="line"><span class="comment">// retry instruction</span></span><br></pre></td></tr></table></figure>
<h3 id="内核虚拟内存空间"><a class="header-anchor" href="#内核虚拟内存空间"></a>内核虚拟内存空间</h3>
<p><strong>内核虚拟空间是每个用户地址空间的一部分</strong></p>
<p>可以把一部分页表放在内核的虚拟内存中，不会随着context switch而刷新，这样就提升了速度，也减少了用户空间的内存压力</p>
<ul>
<li>放在内核虚拟空间的页表不会被切换，这也意味着其寄存器（基址/界限寄存器）不会被刷新</li>
</ul>
<h2 id="Questions"><a class="header-anchor" href="#Questions"></a>Questions</h2>
<blockquote>
<p>Q: 假设一个分页虚拟存储系统的虚拟地址为 40 位，物理地址为 36 位，页大小为 16KB，按字节编址。 若页表中的有效位、存储保护位、修改位、使用位共占 4 位，磁盘地址不在页表中。则该存储系统 中每个程序的页表大小为多少(单位:MB)?</p>
<p>(说明:</p>
<p>1.假设每个程序都能使用全部的虚拟内存;</p>
<p>2.页表项的长度必须为字节的整数倍</p>
<p>)</p>
</blockquote>
<p>Answer:</p>
<blockquote>
<p>按字节编址, 故:</p>
<p>虚拟主存页面个数:2^(40-14)=2^26</p>
<p>物理主存页面数:2^(36-14)=2^22 页表项的最小长度:22+4=26</p>
<p>根据说明 2，取 32 位(4B) 页表大小:2^26*4B=256MB</p>
</blockquote>
<hr>
<p>COA2015</p>
<p>![image-20230226013719425](/Users/lyk/Library/Application Support/typora-user-images/image-20230226013719425.png)</p>
<h2 id="page-scheduling"><a class="header-anchor" href="#page-scheduling"></a>page scheduling</h2>
<p>详见<em>OS Page Sheduling Algorithm</em></p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>OS Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>OS lab3</title>
    <url>/2021/12/03/OS-lab3/</url>
    <content><![CDATA[<p>Outline</p>
<ul>
<li>问答</li>
<li>代码实现</li>
</ul>
<span id="more"></span>
<h1 id="问答"><a class="header-anchor" href="#问答"></a>问答</h1>
<p>当CPU执行了当前指令之后，在对下一条指令执行前，CPU先要判断在执行当前指令的过程中是否发生了中断或异常。如果发生了一个中断或异常，它将调用中断处理程序</p>
<h2 id="解释中断向量"><a class="header-anchor" href="#解释中断向量"></a>解释中断向量</h2>
<ul>
<li>
<p>每个中断源对应一个向量。这些向量顺序存在主存储器的特定存储区（<strong>中断向量表</strong>）</p>
</li>
<li>
<p>向量的内容：</p>
<ul>
<li>相应中断服务程序的<strong>起始地址</strong></li>
<li>处理机状态字。</li>
</ul>
</li>
<li>
<p>在响应中断时，由中断系统硬件提供向量地址，处理机根据该地址取得向量，并转入相应的中断服务程序</p>
</li>
<li>
<p>作用：</p>
<ul>
<li>把中断/异常与相应的处理方法通过IDT对应起来</li>
</ul>
</li>
</ul>
<h2 id="解释中断类型码"><a class="header-anchor" href="#解释中断类型码"></a>解释中断类型码</h2>
<ul>
<li>我们把每个中断服务程序进行编号，这个号就代表一个中断服务程序，就是中断类型码。这个中断类型码是计算机用来查找中断向量用的。</li>
<li>中断指令的一般格式为 “INT n”，其中，n被称为“中断类型码”</li>
</ul>
<h2 id="解释中断向量表"><a class="header-anchor" href="#解释中断向量表"></a>解释中断向量表</h2>
<ul>
<li>中断向量表是指中断服务程序入口地址的偏移量与段基值，一个中断向量占据<strong>4字节</strong>空间。中断向量表是8086系统内存中<strong>最低端1KB</strong>空间，它的作用就是按照中断类型号从小到大的顺序存储对应的中断向量，总共存储256个中断向量。
<ul>
<li>中断向量表在内存单元的最低处，地址空间为00000H----003FFH(0-1024B)</li>
<li>这个地址正好和中断类型码有一种对应的关系：中断类型码*4(一个中断向量所占的空间) 就等于这个中断向量的首地址。</li>
</ul>
</li>
</ul>
<h2 id="实模式下中断程序地址如何得到"><a class="header-anchor" href="#实模式下中断程序地址如何得到"></a>实模式下中断程序地址如何得到?</h2>
<ul>
<li>
<p>得到中断向量地址 -&gt; 得到中断程序地址</p>
<ul>
<li>中断类型码*4 == 中断向量的首地址。</li>
</ul>
</li>
<li>
<p>在中断处理程序中，用中断返回指令IRET （interrupt return）指令使CPU返回主程序断点继续执行；</p>
<ul>
<li>中断指令 “INT n” 和调用程序指令”CALL”很相似，它们均转入内存中其它程序段执行，执行完后再返回</li>
</ul>
</li>
</ul>
<h2 id="INT指令"><a class="header-anchor" href="#INT指令"></a>INT指令</h2>
<ol>
<li>SP（Stack Pointer 堆栈指针）中的值减2，标志位寄存器的值入栈——保存中断前的状态</li>
<li>标志位TF和IF清0——关闭中断    IF=0 ，CPU不响应外部的可屏蔽中断请求；TF=0，则处于连续工作模式</li>
<li>SP减2，把返回地址的段值（CS）推入堆栈</li>
<li>SP减2，把返回地址的偏移量（IP）推入堆栈</li>
<li>根据中断类型码n，<strong>从中断向量表中取得中断处理程序地址</strong>，取得的段地址存入CS，偏移量 存入IP。从而使CPU转入中断处理程序运行。</li>
</ol>
<h2 id="IRET指令"><a class="header-anchor" href="#IRET指令"></a>IRET指令</h2>
<ol>
<li>从堆栈中取出一字（INT指令保存的返回地址偏移量），送给 IP，然后使SP加2</li>
<li>从堆栈中取出一字（INT指令保存的返回地址段值），送给 CS，然后使SP加2</li>
<li>从堆栈中取出一字（INT指令保存的标志寄存器的值），送给 标志寄存器，然后使SP加2 IRET执行后，CPU返回到INT指令后面的一条指令</li>
</ol>
<ul>
<li>其实同函数调用call和ret相类似，在调用时保存返回地址和标志位，但同时还会设置屏蔽请求。iret时则还原调用前状态。</li>
</ul>
<h2 id="保护模式下中断程序地址如何得到"><a class="header-anchor" href="#保护模式下中断程序地址如何得到"></a>保护模式下中断程序地址如何得到?</h2>
<p>保护模式下的中断过程则较为复杂，它要借助<strong>中断门描述符</strong>来获取中断子程序这个目标段的描述符，也就是说必须经过<strong>两次查表</strong>才能获得中断服务子程序的入口地址</p>
<h3 id="得到IDT"><a class="header-anchor" href="#得到IDT"></a>得到IDT</h3>
<ul>
<li>
<p>IDT</p>
<ul>
<li>80x86系列引入一个48位的全地址寄存器（即中断描述符表寄存器<strong>IDTR</strong>）<strong>存放IDT的内存地址</strong>，因此不再限于底部1K位置</li>
<li>和GDTR一样，IDTR包含32位的基地址和16位段限，基地址定义中断描述符表IDT在存储器中的起始点，段限定义中断描述符表所占的字节个数理论上IDT表同样可以有8K项，可是因为80x86只支持256个中断，因此IDT实际上最大只能有256项（2K大小）</li>
</ul>
</li>
<li>
<p>因此只要查IDTR</p>
</li>
</ul>
<blockquote>
<p>寄存器CPU切换到保护模式之前，运行于实模式下的初始化程序必须使用LIDT指令装载中断描述符表IDT，将IDT基地址与段界值装入IDTR。如果不完成这一步操作，系统就会100%崩溃。在返回实模式或系统复位时，IDTR中自动装入<code>000000H</code>的基地址值与<code>03FFH</code>的段界值。可见实模式的<strong>中断向量表</strong>是固定在存储器的最底部，而保护模式下的<strong>IDT</strong>则是<strong>可以改变</strong>的</p>
</blockquote>
<h3 id="得到中断门"><a class="header-anchor" href="#得到中断门"></a>得到中断门</h3>
<p><strong>第一次查表</strong></p>
<ol>
<li>确定中断类型码i（在0～255之间）</li>
<li>用<code>i * 8</code>算出偏移量，读取IDT表第i项（或叫第i个门。进行有效性检查、特权级变化检查</li>
<li>当CPU执行了当前指令之后，在对下一条指令执行前，CPU先要判断在执行当前指令的过程中是否发生了中断或异常。如果发生了一个中断或异常，那么CPU将做以下事情：
<ul>
<li>确定所发生中断或异常的向量</li>
<li>通过IDTR寄存器找到IDT表，读取IDT表第i项（或叫第i个门）。进行有效性检查、特权级变化检查</li>
</ul>
</li>
<li>查中断描述符表以IDTR指定的中断描述符表的基地址为起始地址，用调用号N×8算出偏移量，即为N号中断门描述符的首地址</li>
</ol>
<h3 id="根据中断门得到中断处理程序地址"><a class="header-anchor" href="#根据中断门得到中断处理程序地址"></a>根据中断门得到中断处理程序地址</h3>
<p><strong>第二次查表</strong></p>
<ol>
<li>由上述方法得到中断门，取中断门的8个字节</li>
<li>查GDT或LDT,根据中断门中的<strong>选择子</strong>（段选择符）和偏移量得到中断处理程序入口</li>
</ol>
<h2 id="中断向量的地址如何得到"><a class="header-anchor" href="#中断向量的地址如何得到"></a>中断向量的地址如何得到?</h2>
<ul>
<li>见“实模式下中断程序地址如何得到”，</li>
</ul>
<h2 id="实模式下如何根据中断向量的地址得到中断程序地址"><a class="header-anchor" href="#实模式下如何根据中断向量的地址得到中断程序地址"></a>实模式下如何根据中断向量的地址得到中断程序地址?</h2>
<p>见“实模式下中断程序地址如何得到?”</p>
<h2 id="解释中断描述符"><a class="header-anchor" href="#解释中断描述符"></a>解释中断描述符</h2>
<ul>
<li>保护模式下的中断处理与实模式下的中断处理最大区别在于寻找中断处理代码入口的方式</li>
<li>在保护模式下，为每一个中断和异常定义了一个<strong>中断描述符</strong>，来说明中断和异常服务程序的入口地址的属性<br>
由IDT<u>取代实地址模式下的中断向量表</u></li>
<li>中断描述符除了含有中断处理程序地址信息外，还包括许多属性和类型位
<ul>
<li>每个中断描述符占用连续的<strong>8个字节</strong>，中断描述符分为三类：<strong>任务门、中断门和自陷门</strong>，CPU对不同的门有不同的处理方式</li>
</ul>
</li>
</ul>
<h3 id="ID的结构"><a class="header-anchor" href="#ID的结构"></a>ID的结构</h3>
<ul>
<li>低地址的0和1两个字节是中断代码的偏移量A15～A0； 高地址的6和7两个字节是中断代码的偏移量A31～A16；</li>
<li>2和3两个字节是段选择符，段选择符和偏移量用来形成中断服务子程序的入口地址；</li>
<li>4和5两个字节称为访问权限字节，它标识该中断描述符是否有效、服务程序的特权级和描述符的类型等信息；
<ul>
<li>I. P（present）：表示中断描述符的有效性；</li>
<li>II. DPL（descriptor privilege level）；</li>
<li>III. TYPE：指示中断描述符的不同类型</li>
</ul>
</li>
</ul>
<h2 id="中断的分类-举例不同类型的中断"><a class="header-anchor" href="#中断的分类-举例不同类型的中断"></a>中断的分类,举例不同类型的中断?</h2>
<ul>
<li>从中断源的角度分类
<ul>
<li>由计算机硬件异常或故障引起的中断，也称为<strong>内部</strong>异常中断。</li>
<li>由程序中执行了中断指令引起的中断，也称为<strong>软</strong>中断。由程序员通过INT或INT3指令触发，通常当做<code>trap</code>处理
<ul>
<li>用处：实现系统调用。</li>
</ul>
</li>
<li>外部设备（如输入输出设备）请求引起的中断，也称为<strong>外部</strong>中断或Ｉ／Ｏ中断。</li>
</ul>
</li>
<li>分类：
<ul>
<li>中断： 由CPU以外的事件引起的中断
<ul>
<li>如I/O中断、时钟中断、控制台中断等。</li>
</ul>
</li>
<li>异常：来自CPU的内部事件或程序执行中的事件引起的过程。
<ul>
<li>如由于CPU本身故障、程序故障和请求系统服务的指令引起的中断等。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="中断与异常的区别"><a class="header-anchor" href="#中断与异常的区别"></a>中断与异常的区别?</h2>
<ul>
<li>见“中断异常共同点(至少两点),不同点(至少三点)”</li>
</ul>
<h2 id="实模式和保护模式下的中断处理差别"><a class="header-anchor" href="#实模式和保护模式下的中断处理差别"></a>实模式和保护模式下的中断处理差别</h2>
<ul>
<li>见上文</li>
</ul>
<h2 id="如何识别键盘组合键-如-Shift-a-是否还有其他解决方案"><a class="header-anchor" href="#如何识别键盘组合键-如-Shift-a-是否还有其他解决方案"></a>如何识别键盘组合键(如 Shift+a)是否还有其他解决方案?</h2>
<ul>
<li>
<p>设置全局变量，每次按下就翻转其值</p>
</li>
<li>
<p>使用<code>int caps</code>记录是否要大写字符，若为<code>true</code>，则<code> column = 1</code>， 即取<code>keymap</code>中第二列的值（都是大写值）</p>
</li>
<li>
<p>左右<code>shift</code>和<code>Caps Lock</code>都会翻转<code>caps</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> caps = shift_l || shift_r; <span class="comment">//如果shift被按下，开启大写</span></span><br><span class="line"><span class="keyword">if</span> (caps_lock) &#123;</span><br><span class="line">				<span class="keyword">if</span> ((keyrow[<span class="number">0</span>] &gt;= <span class="string">&#x27;a&#x27;</span>) &amp;&amp; (keyrow[<span class="number">0</span>] &lt;= <span class="string">&#x27;z&#x27;</span>))&#123;</span><br><span class="line">					caps = !caps;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"><span class="keyword">if</span> (caps) &#123;</span><br><span class="line">				column = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="IDT-是什么-有什么作用"><a class="header-anchor" href="#IDT-是什么-有什么作用"></a>IDT 是什么,有什么作用?</h2>
<ul>
<li>中断描述符表</li>
<li>存终端描述符</li>
</ul>
<h2 id="IDT-中有几种描述符"><a class="header-anchor" href="#IDT-中有几种描述符"></a>IDT 中有几种描述符?</h2>
<ul>
<li>中断描述符分为三类：<strong>任务门、中断门和自陷门</strong></li>
</ul>
<h2 id="异常的分类"><a class="header-anchor" href="#异常的分类"></a>异常的分类?</h2>
<ul>
<li>Fault，是一种可被更正的异常，而且一旦被更正，程序可以不失连续性地继续执行。返回地址是<strong>产生fault的指令</strong>。</li>
<li>Trap，一种在发生trap的指令执行之后立即被报告的异常，它也允许程序或任务不失连续性地继续执行。返回地址是产生trap的指令<strong>之后的那条指令</strong>。</li>
<li>Abort，不总是报告精确异常发生位置的异常，不允许程序或任务继续执行，而是用来报告严重错误的</li>
</ul>
<h2 id="用户态和内核态的特权级分别是多少"><a class="header-anchor" href="#用户态和内核态的特权级分别是多少"></a>用户态和内核态的特权级分别是多少?</h2>
<ul>
<li>当中断发生在用户态（特权级为<strong>3</strong>），而中断处理程序运行在内核态（特权级为<strong>0</strong>）
<ul>
<li>特权级发生变化，会引起堆栈的更换。也就是说，从用户堆栈切换到内核堆栈。</li>
</ul>
</li>
<li>当中断发生在内核态时，即CPU在内核中运行时，则不会更换堆栈。</li>
</ul>
<h2 id="中断向量表中-每个中断有几个字节-里面的结构是什么"><a class="header-anchor" href="#中断向量表中-每个中断有几个字节-里面的结构是什么"></a>中断向量表中,每个中断有几个字节?里面的结构是什么?</h2>
<ul>
<li>起始地址：0</li>
<li>每个中断向量包含4 Bytes</li>
<li>低地址两个Byte放偏移</li>
<li>高地址两个Byte放段描述符</li>
<li>最多256个中断向量</li>
</ul>
<h2 id="中断异常共同点-至少两点-不同点-至少三点"><a class="header-anchor" href="#中断异常共同点-至少两点-不同点-至少三点"></a>中断异常共同点(至少两点),不同点(至少三点)</h2>
<h3 id="共同点"><a class="header-anchor" href="#共同点"></a>共同点</h3>
<ul>
<li>都是程序执行过程中的强制性转移，转移到相应的处理程序。</li>
<li>都是软件或者硬件发生了某种情形而通知处理器的行为</li>
</ul>
<h3 id="不同点"><a class="header-anchor" href="#不同点"></a>不同点</h3>
<ul>
<li>中断是CPU所具备的功能。通常因为“硬件”而随机发生。异常，是“软件”运行过程中的一种开发过程中没有考虑到的程序错误。</li>
<li>中断是CPU暂停当前工作，有计划地去处理其他的事情。中断的发生一般是可以预知的，处理的过程也是事先制定好的。处理中断时程序是正常运行的。 异常是CPU遇到了无法响应的工作，而后进入一种非正常状态。异常的出现表明程序有缺陷。</li>
<li>中断是异步的，异常是同步的。
<ul>
<li>中断是来自处理器外部的I/O设备的信号的结果，它不是由指令流中某条指令执行引起的，从这个意义上讲，它是异步的，是来自指令流之外的。</li>
<li>异常是执行当前指令流中的某条指令的结果，是来自指令流内部的，从这个意义上讲它们都是同步的。</li>
</ul>
</li>
<li>中断或异常的返回点
<ul>
<li>良性的如中断和trap，只是在正常的工作流之外执行额外的操作，然后继续干没干完的活。因此处理程序完了后返回到原指令流的下一条指令，继续执行。</li>
<li>恶性的如fault和abort，对于可修复fault，由于是在上一条指令执行过程中发生（是由正在执行的指令引发的）的，在修复fault之后，会重新执行该指令；至于不可修复fault或abort，则不会再返回。</li>
</ul>
</li>
<li>中断是由于当前程序无关的中断信号触发的，CPU对中断的响应是被动的，且与CPU模式无关。既可以发生在用户态，又可以发生在核心态。
<ul>
<li>异常是由CPU控制单元产生的，大部分异常发生在用户态</li>
</ul>
</li>
</ul>
<h1 id="实验"><a class="header-anchor" href="#实验"></a>实验</h1>
<p>这是我最难受的OS实验，中途遇到了很多bug,来无影去无踪，不知道怎么发生的，也不知道怎么解决的，莫名其妙地报错，过一会儿又好了QAQ 总的来说学到的东西很少</p>
<p>这里只给出代码逻辑，具体原因需要看<code>Orange's</code>第七章</p>
<ul>
<li>
<p>实验环境：bochs 2.6.1, manjaro64</p>
</li>
<li>
<p>bochsrc:</p>
<ul>
<li>更新：<code>keyboard:  keymap=/usr/share/bochs/keymaps/x11-pc-us.map</code></li>
<li>如果没有<code>vgabios.bin</code>的话，得自己下载一个。 <code>qemu</code>自带了该文件，我就使用了该路径<code>vgaromimage: file=/usr/share/qemu/vgabios.bin</code></li>
</ul>
</li>
<li>
<p>makefile：实现<code>make run</code></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">BOCHS	= bochs</span><br><span class="line">BOCHSFLAGS  = -f bochsrc</span><br><span class="line">...</span><br><span class="line"><span class="section">run:	image start_bochs</span></span><br><span class="line"><span class="section">start_bochs: </span></span><br><span class="line">	<span class="variable">$(BOCHS)</span> <span class="variable">$(BOCHSFLAGS)</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="实现逻辑"><a class="header-anchor" href="#实现逻辑"></a>实现逻辑</h2>
<ul>
<li>
<p><code>main.c</code>里定义了若干 <code>task</code>和<code>process</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.c</span></span><br><span class="line">TASK*		p_task		= task_table;</span><br><span class="line">PROCESS*	p_proc		= proc_table;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>task_table</code>中有四个<code>task</code>，其中<code>tty_task</code>最重要，负责tty显示. <code>Test[ABC]</code>定义在<code>main.c</code>中，稍后需要它们来实现清屏功能：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//global.c</span></span><br><span class="line">PUBLIC	TASK	task_table[NR_TASKS] = &#123;&#123;task_tty, STACK_SIZE_TTY, <span class="string">&quot;tty&quot;</span>&#125;,</span><br><span class="line">					&#123;TestA, STACK_SIZE_TESTA, <span class="string">&quot;TestA&quot;</span>&#125;,</span><br><span class="line">					&#123;TestB, STACK_SIZE_TESTB, <span class="string">&quot;TestB&quot;</span>&#125;,</span><br><span class="line">					&#123;TestC, STACK_SIZE_TESTC, <span class="string">&quot;TestC&quot;</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*======================================================================*</span></span><br><span class="line"><span class="comment">                               TestA： 清屏功能</span></span><br><span class="line"><span class="comment"> *======================================================================*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TestA</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="comment">/* disp_str(&quot;A.&quot;); */</span></span><br><span class="line">		<span class="keyword">if</span>( !SEARCH_MODE )</span><br><span class="line">		&#123;</span><br><span class="line">			TTY *p_tty;</span><br><span class="line">			<span class="keyword">for</span>( p_tty = TTY_FIRST; p_tty &lt; TTY_END ; p_tty++ )</span><br><span class="line">			&#123;</span><br><span class="line">				init_screen(p_tty);</span><br><span class="line">			&#125;</span><br><span class="line">			select_console(<span class="number">0</span>);</span><br><span class="line">			CLS(); <span class="comment">//清屏</span></span><br><span class="line">			milli_delay(CLS_INTERVAL); <span class="comment">//#define CLS_INTERVAL 30000</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//			milli_delay(10);</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*======================================================================*</span></span><br><span class="line"><span class="comment">                               TestB</span></span><br><span class="line"><span class="comment"> *======================================================================*/</span></span><br><span class="line"><span class="type">void</span> TestB()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0x1000</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="comment">/* disp_str(&quot;B.&quot;); */</span></span><br><span class="line">		milli_delay(<span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*======================================================================*</span></span><br><span class="line"><span class="comment">                               TestB</span></span><br><span class="line"><span class="comment"> *======================================================================*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TestC</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0x2000</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="comment">/* disp_str(&quot;C.&quot;); */</span></span><br><span class="line">		milli_delay(<span class="number">10</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>task_tty</code>会初始化各个<code>tty</code>，并循环执行<code>tty_do_read(p_tty)</code> 和<code>tty_do_write(p_tty)</code>, 这就是整个程序的输入/出入</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//tty.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*======================================================================*</span></span><br><span class="line"><span class="comment">                           task_tty</span></span><br><span class="line"><span class="comment"> *======================================================================*/</span></span><br><span class="line">PUBLIC <span class="type">void</span> <span class="title function_">task_tty</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	TTY*	p_tty;</span><br><span class="line"></span><br><span class="line">	init_keyboard();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (p_tty=TTY_FIRST;p_tty&lt;TTY_END;p_tty++) &#123;</span><br><span class="line">		init_tty(p_tty);</span><br><span class="line">	&#125;</span><br><span class="line">	select_console(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (p_tty=TTY_FIRST;p_tty&lt;TTY_END;p_tty++) &#123;</span><br><span class="line">			tty_do_read(p_tty);</span><br><span class="line">			tty_do_write(p_tty);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>tty_do_read(p_tty)</code> 调用<code>keyboard_read(p_tty)</code>，从键盘读取输入; <code>tty_do_write(p_tty)</code>从缓冲区读取字符，令<code>console</code>打印：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*======================================================================*</span></span><br><span class="line"><span class="comment">			      tty_do_read</span></span><br><span class="line"><span class="comment"> *======================================================================*/</span></span><br><span class="line">PRIVATE <span class="type">void</span> <span class="title function_">tty_do_read</span><span class="params">(TTY* p_tty)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (is_current_console(p_tty-&gt;p_console)) &#123;</span><br><span class="line">		keyboard_read(p_tty);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*======================================================================*</span></span><br><span class="line"><span class="comment">			      tty_do_write</span></span><br><span class="line"><span class="comment"> *======================================================================*/</span></span><br><span class="line">PRIVATE <span class="type">void</span> <span class="title function_">tty_do_write</span><span class="params">(TTY* p_tty)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (p_tty-&gt;inbuf_count) &#123;</span><br><span class="line">		<span class="type">char</span> ch = *(p_tty-&gt;p_inbuf_tail);</span><br><span class="line">		p_tty-&gt;p_inbuf_tail++;</span><br><span class="line">		<span class="keyword">if</span> (p_tty-&gt;p_inbuf_tail == p_tty-&gt;in_buf + TTY_IN_BYTES) &#123;</span><br><span class="line">			p_tty-&gt;p_inbuf_tail = p_tty-&gt;in_buf;</span><br><span class="line">		&#125;</span><br><span class="line">		p_tty-&gt;inbuf_count--;</span><br><span class="line"></span><br><span class="line">		out_char(p_tty-&gt;p_console, ch);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>keyboard_read(p_tty)</code>只负责读取字符，转化成<code>key</code>,并调用<code>in_process(p_tty, key)</code>处理读取的字符</p>
<p>​	*</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//keyboard.c</span></span><br><span class="line">PUBLIC <span class="type">void</span> <span class="title function_">keyboard_read</span><span class="params">(TTY* p_tty)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    in_process(p_tty, key);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>in_process(p_tty, key)</code>真正处理输入，它调用<code>put_key(p_tty, ** )</code>将输入的字符存入<strong>缓冲区</strong>， 稍后由<code>tty_do_write(p_tty)</code>读取。在里面添加逻辑，实现特殊字符的读取：</p>
<ul>
<li>这里只是读取，因此只存<code>ascii</code>码就行了
<ul>
<li><code> TAB</code>： <code>TAB</code>的<code>ascii</code>为<code>0x09</code></li>
<li>`` ESC<code>： </code>TAB<code>的</code>ascii<code>为</code>0x1B`</li>
<li>注意到这两个字符其实是<strong>可打印</strong>的，如<code>TAB（ 0x09）</code>会打印一个小点，不是我们期望的输出四个空格，因此输出的时候遇到这些字符需要特判，不能直接输出<code>ascii</code></li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//tty.c</span></span><br><span class="line">PUBLIC <span class="type">void</span> <span class="title function_">in_process</span><span class="params">(TTY* p_tty, u32 key)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">	<span class="keyword">case</span> TAB:</span><br><span class="line">		put_key(p_tty,  <span class="number">0x09</span> ); <span class="comment">//TAB</span></span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> ESC:</span><br><span class="line">		put_key(p_tty, <span class="number">0x1B</span>); <span class="comment">//ESC</span></span><br><span class="line">		<span class="keyword">break</span>;   </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//tty.c</span></span><br><span class="line"><span class="comment">/*======================================================================*</span></span><br><span class="line"><span class="comment">			      put_key</span></span><br><span class="line"><span class="comment">*======================================================================*/</span></span><br><span class="line">PRIVATE <span class="type">void</span> <span class="title function_">put_key</span><span class="params">(TTY* p_tty, u32 key)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (p_tty-&gt;inbuf_count &lt; TTY_IN_BYTES) &#123;</span><br><span class="line">		*(p_tty-&gt;p_inbuf_head) = key;</span><br><span class="line">		p_tty-&gt;p_inbuf_head++;</span><br><span class="line">		<span class="keyword">if</span> (p_tty-&gt;p_inbuf_head == p_tty-&gt;in_buf + TTY_IN_BYTES) &#123;</span><br><span class="line">			p_tty-&gt;p_inbuf_head = p_tty-&gt;in_buf;</span><br><span class="line">		&#125;</span><br><span class="line">		p_tty-&gt;inbuf_count++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>接下来是输出，<code>tty_do_write(TTY***** p_tty)</code>每次从缓冲区读取一个<code>char</code>，传给<code>out_char(p_tty-&gt;p_console, ch)</code>（在指定<code>console</code>）进行输出. 在后这种加逻辑，实现特殊字符的输出</p>
<ul>
<li>
<p><code>TAB</code>: 打印四个空格，前三个默认颜色<code>DEFAULT_CHAR_COLOR（黑底白字）</code>， 最后一个自定义颜色<code>INVISIBLE_COLOR（黑底黑字）</code>。 这样在显示上没有差别，而删除时遇到<code>INVISIBLE_COLOR</code>就连续删除四个空格</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&#x27;	&#x27;</span>: <span class="comment">// TAB:  三个空格，跟一个0x09</span></span><br><span class="line">	<span class="keyword">if</span> (p_con-&gt;cursor + <span class="number">4</span> &lt;= p_con-&gt;original_addr +</span><br><span class="line">	    p_con-&gt;v_mem_limit - <span class="number">1</span> ) &#123;</span><br><span class="line">    </span><br><span class="line">		<span class="keyword">for</span>( <span class="type">int</span> i=<span class="number">0</span>; i &lt; <span class="number">3</span>; i++ )</span><br><span class="line">		&#123;</span><br><span class="line">			*p_vmem++ = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">			*p_vmem++ = DEFAULT_CHAR_COLOR;</span><br><span class="line">			p_con-&gt;cursor++;</span><br><span class="line">		&#125;</span><br><span class="line">		*p_vmem++ = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		*p_vmem++ = INVISIBLE_COLOR;</span><br><span class="line">		p_con-&gt;cursor++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>\b</code>: 默认删除当前字符（将改字符变为空格，且颜色置为<code>INVISIBLE_COLOR</code>，光标右移一位）。 需要对<code>TAB</code>加入上述的特判</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&#x27;\b&#x27;</span>:</span><br><span class="line">	<span class="keyword">if</span> (p_con-&gt;cursor &gt; p_con-&gt;original_addr) &#123;</span><br><span class="line">		<span class="keyword">if</span>( *(p_vmem - <span class="number">1</span>) == INVISIBLE_COLOR ) <span class="comment">//TAB</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">4</span>; i++ )</span><br><span class="line">			&#123;</span><br><span class="line">				p_con-&gt;cursor--;</span><br><span class="line">				*(p_vmem<span class="number">-2</span>) = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">				*(p_vmem<span class="number">-1</span>) = DEFAULT_CHAR_COLOR;</span><br><span class="line">				p_vmem -= <span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			p_con-&gt;cursor--;</span><br><span class="line">			*(p_vmem<span class="number">-2</span>) = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">			*(p_vmem<span class="number">-1</span>) = DEFAULT_CHAR_COLOR;</span><br><span class="line">		&#125;</span><br><span class="line">    </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>ESC</code>： 第一次按<code>ESC</code>进入查找模式，输入带匹配字符串; 第二次解除查找模式，其间按<code>\n</code>需要进入匹配模式，期间忽略<code>ESC</code>之外的所有输入。</p>
<ul>
<li>解除查找模式会删除之前输入的<code>key_str</code>,所有被匹配到的文本恢复白颜色, 光标回到进入SEARCH模式时的位置</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> CHAR_ESC:<span class="comment">// ESC</span></span><br><span class="line">    </span><br><span class="line">	SEARCH_MODE = ~ SEARCH_MODE;</span><br><span class="line">	<span class="keyword">if</span>( !SEARCH_MODE ) <span class="comment">// 再按 Esc 键,之前输入的关键字被自动删除,所有文本恢复白颜色, 光标回到进入SEARCH模式时的位置</span></span><br><span class="line">	&#123;</span><br><span class="line">		restore_matched_chars( p_con, ESC_CURSOR );</span><br><span class="line">		IGNORE_INPUT = <span class="number">0</span>;<span class="comment">//恢复输入</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;<span class="comment">//进入SEARCH模式，记录此时光标位置</span></span><br><span class="line">		ESC_CURSOR = p_con -&gt; cursor;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>\n</code>: 在查找模式下，输入回车，会进入匹配模式，匹配到的字符串变为红色，并屏蔽<code>ESC</code>之外的输入</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">	<span class="keyword">if</span>( SEARCH_MODE )</span><br><span class="line">	&#123;</span><br><span class="line">		IGNORE_INPUT = <span class="number">1</span>;</span><br><span class="line">		<span class="type">char</span> key_str[<span class="number">50</span>];</span><br><span class="line">		get_key_str( key_str,p_con, ESC_CURSOR );<span class="comment">//得到key_str</span></span><br><span class="line">		<span class="type">int</span> len = p_con -&gt; cursor -  ESC_CURSOR;</span><br><span class="line">		match_chars( p_con, key_str, len );</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (p_con-&gt;cursor &lt; p_con-&gt;original_addr +</span><br><span class="line">	    	p_con-&gt;v_mem_limit - SCREEN_WIDTH) &#123;</span><br><span class="line">			p_con-&gt;cursor = p_con-&gt;original_addr + SCREEN_WIDTH * </span><br><span class="line">				((p_con-&gt;cursor - p_con-&gt;original_addr) /</span><br><span class="line">			 	SCREEN_WIDTH + <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">      </span><br><span class="line">	<span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>采用三个全局变量:</p>
<ul>
<li><code>ESC_CURSOR</code>标记第一次<code>ESC</code>对应的光标位置，当第二次输入<code>ESC</code>时解除查找模式，这之间的内容就是带匹配字符串<code>key_str</code>。 后续用<code>key_str</code>作为<strong>滑动窗口</strong>，从屏幕起始位置开始匹配</li>
<li><code>SEARCH_MODE</code>： 表示是否处于查找模式，如果为<code>true</code>，不仅意味着输入的是<code>key_str</code>，还意味着期间不能被<strong>清屏</strong></li>
<li><code>IGNORE_INPUT</code>： 只有处于查找模式且按下回车时置为<code>true</code>，期间不响应<code>ESC</code>之外的所有输入</li>
</ul>
</li>
<li>
<p>重要参数解释:</p>
<ul>
<li><code>p_con-&gt;cursor</code>: 光标位置，在最后一个字符之后</li>
<li><code>u8* p_vmem = (u8*)(V_MEM_BASE + p_con-&gt;cursor * 2)</code>: 当前光标所指向的显存位置，由于小端存储，且字符占2Byte（ 因此有 <code>cursor * 2</code>）。 一个字符的低1Byte存字符值，高1Byte存字符颜色
<ul>
<li>操作字符颜色：<code>*(p_vmem-1) = DEFAULT_CHAR_COLOR;</code></li>
<li>操作字符值：<code>*(p_vmem- 2) =' '</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>一些工具函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*======================================================================*</span></span><br><span class="line"><span class="comment">                           get_key_str</span></span><br><span class="line"><span class="comment"> *----------------------------------------------------------------------*</span></span><br><span class="line"><span class="comment"> 得到key_str</span></span><br><span class="line"><span class="comment"> *----------------------------------------------------------------------*</span></span><br><span class="line"><span class="comment"> 从esc_cursor后一位开始（避免把esc读进去），直到当前cursor</span></span><br><span class="line"><span class="comment">*======================================================================*/</span></span><br><span class="line">PRIVATE <span class="type">void</span> <span class="title function_">get_key_str</span><span class="params">( <span class="type">char</span>* key_str, CONSOLE* p_con ,<span class="type">unsigned</span> <span class="type">int</span> esc_cursor  )</span></span><br><span class="line">&#123;</span><br><span class="line">	u8* p_vmem;</span><br><span class="line">	<span class="keyword">for</span>( <span class="type">unsigned</span> <span class="type">int</span> tmp_cursor = esc_cursor+<span class="number">1</span>, i = <span class="number">0</span>  ; tmp_cursor &lt;= p_con -&gt; cursor ; tmp_cursor++ )<span class="comment">//从</span></span><br><span class="line">	&#123;</span><br><span class="line">		p_vmem = (u8*)(V_MEM_BASE + tmp_cursor * <span class="number">2</span>); <span class="comment">//指向reverse_cursor指向的位置</span></span><br><span class="line">		key_str[i++] = *(p_vmem<span class="number">-2</span>);	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*======================================================================*</span></span><br><span class="line"><span class="comment">                           match_chars </span></span><br><span class="line"><span class="comment">	匹配字符串并染色</span></span><br><span class="line"><span class="comment">	从光标初始位置，到最后一个ESC的光标位置，对该范围内所有字符进行匹配</span></span><br><span class="line"><span class="comment">*======================================================================*/</span></span><br><span class="line">PRIVATE <span class="type">void</span> <span class="title function_">match_chars</span><span class="params">(CONSOLE* p_con, <span class="type">char</span>* key_str, <span class="type">int</span> len )</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>( <span class="type">unsigned</span> <span class="type">int</span> temp_cursor = p_con -&gt; original_addr + <span class="number">1</span>; temp_cursor &lt; p_con -&gt; cursor - len ; temp_cursor++ ) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>( isMatch( temp_cursor, key_str, len  ) ) <span class="comment">//匹配成功，进行染色</span></span><br><span class="line">		&#123;</span><br><span class="line">			change_chars_color_sequenced( temp_cursor, len, MATCHED_CHAR_COLOR );</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*======================================================================*</span></span><br><span class="line"><span class="comment">			   isMatch</span></span><br><span class="line"><span class="comment"> *----------------------------------------------------------------------*</span></span><br><span class="line"><span class="comment">	从指定cursor前一位开始，匹配key_str</span></span><br><span class="line"><span class="comment"> *----------------------------------------------------------------------*</span></span><br><span class="line"><span class="comment"> *======================================================================*/</span></span><br><span class="line">PRIVATE <span class="type">int</span> <span class="title function_">isMatch</span><span class="params">( <span class="type">unsigned</span> <span class="type">int</span> cursor, <span class="type">char</span>* key_str, <span class="type">int</span> len   )</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// key_str = &quot;q&quot;;</span></span><br><span class="line">	<span class="comment">// len = 1;</span></span><br><span class="line">	<span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">	u8* p_vmem =  (u8*)(V_MEM_BASE + cursor * <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span> ; i &lt; len; i++, p_vmem+=<span class="number">2</span> )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>( *(p_vmem - <span class="number">2</span>) != key_str[i] )</span><br><span class="line">		&#123;</span><br><span class="line">			res = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*======================================================================*</span></span><br><span class="line"><span class="comment">                           delete_chars</span></span><br><span class="line"><span class="comment">*======================================================================*/</span></span><br><span class="line">PRIVATE <span class="type">void</span> <span class="title function_">delete_chars</span><span class="params">(CONSOLE* p_con, <span class="type">unsigned</span> <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">	u8* p_vmem;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> temp_cursor = p_con -&gt; cursor;</span><br><span class="line">	<span class="keyword">for</span>(  ; temp_cursor &gt; p_con -&gt; cursor - len ; temp_cursor-- )</span><br><span class="line">	&#123;</span><br><span class="line">		p_vmem = (u8*)(V_MEM_BASE + temp_cursor * <span class="number">2</span>); </span><br><span class="line">		*(p_vmem - <span class="number">1</span>) = DEFAULT_CHAR_COLOR;</span><br><span class="line">		*(p_vmem - <span class="number">2</span>) = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	p_con -&gt; cursor = temp_cursor; <span class="comment">//移动指针</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*======================================================================*</span></span><br><span class="line"><span class="comment">                           change_chars_color( CONSOLE* p_con, unsigned int len, unsigned int color )</span></span><br><span class="line"><span class="comment">*======================================================================*/</span></span><br><span class="line">PRIVATE <span class="type">void</span> <span class="title function_">change_chars_color</span><span class="params">( CONSOLE* p_con, <span class="type">unsigned</span> <span class="type">int</span> len, u8 color )</span></span><br><span class="line">&#123;</span><br><span class="line">	u8* p_vmem;</span><br><span class="line">	<span class="keyword">for</span>( <span class="type">unsigned</span> <span class="type">int</span> temp_cursor = p_con -&gt; cursor ; temp_cursor &gt; p_con -&gt; cursor - len ; temp_cursor-- )</span><br><span class="line">	&#123;</span><br><span class="line">		p_vmem = (u8*)(V_MEM_BASE + temp_cursor * <span class="number">2</span>); </span><br><span class="line">		*(p_vmem - <span class="number">1</span>) = DEFAULT_CHAR_COLOR;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*======================================================================*</span></span><br><span class="line"><span class="comment">                           change_chars_color_sequenced( unsigned int cursor, unsigned int len, unsigned int color )</span></span><br><span class="line"><span class="comment">*======================================================================*/</span></span><br><span class="line">PRIVATE <span class="type">void</span> <span class="title function_">change_chars_color_sequenced</span><span class="params">( <span class="type">unsigned</span> <span class="type">int</span> cursor, <span class="type">unsigned</span> <span class="type">int</span> len, u8 color )</span></span><br><span class="line">&#123;</span><br><span class="line">	u8* p_vmem;</span><br><span class="line">	<span class="keyword">for</span>( <span class="type">unsigned</span> <span class="type">int</span> temp_cursor =  cursor ; temp_cursor &lt;  cursor + len ; temp_cursor++ )</span><br><span class="line">	&#123;</span><br><span class="line">		p_vmem = (u8*)(V_MEM_BASE + temp_cursor * <span class="number">2</span>); </span><br><span class="line">		*(p_vmem <span class="number">-1</span> ) = color;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*======================================================================*</span></span><br><span class="line"><span class="comment">                           restore_matched_chars</span></span><br><span class="line"><span class="comment">*======================================================================*/</span></span><br><span class="line">PRIVATE <span class="type">void</span> <span class="title function_">restore_matched_chars</span><span class="params">(CONSOLE* p_con, <span class="type">unsigned</span> <span class="type">int</span> esc_cursor)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	delete_chars( p_con, p_con -&gt; cursor - esc_cursor ); <span class="comment">// 删除待匹配字符</span></span><br><span class="line">	change_chars_color( p_con, p_con -&gt; cursor - p_con -&gt; original_addr , DEFAULT_CHAR_COLOR ); <span class="comment">//恢复匹配到的字符的颜色</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>输入输出已经实现了，最后是清屏功能，由于<code>task_table</code>中的四个<code>task</code>会被四个<code>process</code>执行</p>
</li>
</ul>
<p>，只需要由一个<code>task</code>负责清屏（）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TTY_FIRST	(tty_table)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TTY_END		(tty_table + NR_CONSOLES)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLS_INTERVAL 30000</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="type">void</span> <span class="title function_">CLS</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">			disp_pos = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">80</span>*<span class="number">25</span>; i++ )</span><br><span class="line">			&#123;</span><br><span class="line">				disp_str(<span class="string">&quot; &quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			disp_pos = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*======================================================================*</span></span><br><span class="line"><span class="comment">                               TestA</span></span><br><span class="line"><span class="comment"> *======================================================================*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TestA</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="comment">/* disp_str(&quot;A.&quot;); */</span></span><br><span class="line">		<span class="keyword">if</span>( !SEARCH_MODE )</span><br><span class="line">		&#123;</span><br><span class="line">			TTY *p_tty;</span><br><span class="line">			<span class="keyword">for</span>( p_tty = TTY_FIRST; p_tty &lt; TTY_END ; p_tty++ ) <span class="comment">//这段抄书的，我也不明白意思</span></span><br><span class="line">			&#123;</span><br><span class="line">				init_screen(p_tty);</span><br><span class="line">			&#125;</span><br><span class="line">			select_console(<span class="number">0</span>);</span><br><span class="line">			CLS();</span><br><span class="line">			milli_delay(CLS_INTERVAL);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//			milli_delay(10);</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>OS Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>OS lab2</title>
    <url>/2021/11/12/OS-lab2/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>PPT内容</li>
<li>实验内容（ 附我的部分代码 ）</li>
</ul>
<span id="more"></span>
<h1 id="PPT内容"><a class="header-anchor" href="#PPT内容"></a>PPT内容</h1>
<h2 id="什么是实模式-什么是保护模式"><a class="header-anchor" href="#什么是实模式-什么是保护模式"></a>什么是实模式,什么是保护模式?</h2>
<ul>
<li>实模式就是用基地址加偏移量就可以直接拿到物理地址的模式
<ul>
<li>缺点:实模式非常不安全</li>
</ul>
</li>
<li>保护模式就是不能直接拿到物理地址的模式
<ul>
<li>需要进行地址转换</li>
<li>从80386开始,是现代操作系统的主要模式</li>
</ul>
</li>
</ul>
<h2 id="什么是选择子"><a class="header-anchor" href="#什么是选择子"></a>什么是选择子?</h2>
<ul>
<li>选择子共16位,放在段选择寄存器里</li>
<li>低2位表示请求特权级</li>
<li>第3位表示选择GDT方式还是LDT方式</li>
<li>高13位表示在描述符表中的偏移(故描述符表的项数最多是2^13)</li>
</ul>
<h2 id="什么是描述符"><a class="header-anchor" href="#什么是描述符"></a>什么是描述符?</h2>
<ul>
<li>描述符表中存储的一个元素,是一个指针</li>
</ul>
<h2 id="什么是GDT-什么是LDT"><a class="header-anchor" href="#什么是GDT-什么是LDT"></a>什么是GDT,什么是LDT?</h2>
<ul>
<li>GDT:全局描述符表,是全局唯一的。存放一些公用的描述符和包含各进程LDT首地址的描述符。</li>
<li>LDT:局部描述符表,每个进程都可以有一个。存放本进程内使用的描述符。</li>
</ul>
<h2 id="请分别说明GDTR和LDTR的结构"><a class="header-anchor" href="#请分别说明GDTR和LDTR的结构"></a>请分别说明GDTR和LDTR的结构</h2>
<ul>
<li>GDTR:48位寄存器,高32位放置GDT首地址,低16位放置GDT<br>
限长(限长决定了可寻址的大小,注意低16位放的不是选择子)</li>
<li>LDTR:16位寄存器,放置一个特殊的选择子,用于查找当前进<br>
程的LDT首地址。</li>
</ul>
<h2 id="请说明GDT直接查找物理地址的具体步骤"><a class="header-anchor" href="#请说明GDT直接查找物理地址的具体步骤"></a>请说明GDT直接查找物理地址的具体步骤</h2>
<ol>
<li>给出段选择子(放在段选择寄存器里)+偏移量</li>
<li>若选择了GDT方式,则从GDTR获取GDT首地址,用段选择<br>
子中的13位做偏移,拿到GDT中的描述符</li>
<li>如果合法且有权限,用描述符中的段首地址加上(1)中的偏移量找到物理地址。寻址结束。</li>
</ol>
<h2 id="请说明通过LDT查找物理地址的具体步骤。"><a class="header-anchor" href="#请说明通过LDT查找物理地址的具体步骤。"></a>请说明通过LDT查找物理地址的具体步骤。</h2>
<ol>
<li>给出段选择子(放在段选择寄存器中)+偏移量</li>
<li>若选择了LDT方式,则从GDTR获取GDT首地址,用LDTR中的偏移量（ LDTR内部的选择子 ）做偏移,拿到GDT中的描述符1， 它的内容是LDT的首地址</li>
<li>从描述符1中获取LDT首地址,用段选择子中的13位做偏移,拿到LDT中的描述符2</li>
<li>如果合法且有权限,用描述符2中的段首地址加上(1)中的偏移量找到物理地址。寻址结束。</li>
</ol>
<h2 id="根目录区大小一定么-扇区号是多少-为什么"><a class="header-anchor" href="#根目录区大小一定么-扇区号是多少-为什么"></a>根目录区大小一定么?扇区号是多少?为什么?</h2>
<ul>
<li>
<p>不一定， 目录区大小为<code>(RootEntCnt * 32 + BytsPerSec - 1) / BytsPerSec</code>， 即 取决于BPB中的<code>RootEntCnt</code></p>
</li>
<li>
<p>扇区号为<code>RsvdSecCnt + NumFATs * FATSz</code>， 即 引导区的扇区数 + fat表数*每个fat表所占扇区数</p>
</li>
</ul>
<h2 id="数据区第一个簇号是多少-为什么"><a class="header-anchor" href="#数据区第一个簇号是多少-为什么"></a>数据区第一个簇号是多少?为什么?</h2>
<ul>
<li>在1.44M软盘上，FAT前三个字节的值是固定的0xF0、0xFF、0xFF，用于表示这是一个应用在1.44M软盘上的FAT12文件系统。本来序号为0和1的FAT表项应该对应于簇0和簇1，但是由于这两个表项被设置成了固定值，簇0和簇1就没有存在的意义了，所以数据区就起始于簇2</li>
</ul>
<h2 id="FAT表的作用"><a class="header-anchor" href="#FAT表的作用"></a>FAT表的作用?</h2>
<ul>
<li>FAT项的值代表文件的下一个簇号</li>
</ul>
<h2 id="解释静态链接的过程"><a class="header-anchor" href="#解释静态链接的过程"></a>解释静态链接的过程</h2>
<ul>
<li>静态链接是指在编译阶段直接把静态库加入到可执行文件中去</li>
<li>空间和地址分配 ; 符号解析和重定位</li>
</ul>
<h2 id="解释动态链接的过程"><a class="header-anchor" href="#解释动态链接的过程"></a>解释动态链接的过程</h2>
<ol>
<li>动态链接器自举<br>
动态链接器本身也是一个不依赖其他共享对象的共享对象，需要完成自举。</li>
<li>装载共享对象<br>
将可执行文件和链接器自身的符号合并成为全局符号表，开始寻找依赖对象。加载对象的过程可以看做图的遍历过程；新的共享对象加载进来后，其符号将合并入全局符号表；加载完毕后，全局符号表将包含进程动态链接所需全部符号。</li>
<li>重定位和初始化<br>
链接器遍历可执行文件和共享对象的重定位表，将它们GOT/PLT中每个需要重定位的位置进行修正。完成重定位后，链接器执行.init段的代码，进行共享对象特有的初始化过程（例如C++里全局对象的构造函数）。</li>
<li>转交控制权<br>
完成所有工作，将控制权转交给程序的入口开始执行。</li>
</ol>
<h2 id="静态链接相关PPT中为什么使用ld链接而不是gcc"><a class="header-anchor" href="#静态链接相关PPT中为什么使用ld链接而不是gcc"></a>静态链接相关PPT中为什么使用ld链接而不是gcc</h2>
<ul>
<li>
<p>gcc默认动态链接， 当然也可以指定<code>-static</code>使用静态链接</p>
</li>
<li>
<p>ld也相同（ 所以这二者都可以 ）</p>
</li>
</ul>
<h2 id="linux下可执行文件的虚拟地址空间默认从哪里开始分配"><a class="header-anchor" href="#linux下可执行文件的虚拟地址空间默认从哪里开始分配"></a>linux下可执行文件的虚拟地址空间默认从哪里开始分配</h2>
<ul>
<li>
<p>事实上，入口地址的选择取决于链接器</p>
</li>
<li>
<p>The script define the following variables used by the loader <strong>ld</strong>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      TEXT_START_ADDR - the first byte of the text segment, after any</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">              headers.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      TEXT_BASE_ADDRESS - the first byte of the text segment.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">      TEXT_START_SYMBOLS - symbols that appear at the start of the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">              .text section.</span></span><br></pre></td></tr></table></figure>
<p>For example, on GNU/Linux,</p>
<p><code>/usr/lib/ldscripts/elf_x86_64.x</code> 或者<code>ld --verbose |grep SEGMENT_START</code></p>
<p>we see:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">PROVIDE (__executable_start = SEGMENT_START(&quot;text-segment&quot;, 0x400000)); \</span><br><span class="line">    . = SEGMENT_START(&quot;text-segment&quot;, 0x400000) + SIZEOF_HEADERS;</span><br></pre></td></tr></table></figure>
<p>The text-segment mapping values are:</p>
<ul>
<li><strong>0x08048000</strong> on 32 Bits</li>
<li><strong>0x400000</strong> on 64 Bits</li>
</ul>
<p>You can find out more about linker scripts by browsing the linker manual:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">info ld Scripts</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>你也可以手动指定入口地址，比如：</p>
<p><code>gcc -Wl,-Ttext-segment=0x800000 hello_world.c </code></p>
<p>which sets the entry point to 0x800000 (+ the ELF header size, which gets loaded at 0x800000 in memory) instead of the default 0x400000.</p>
</li>
<li>
<p>证据：写一个汇编文件<code>a.asm</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main:</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure>
<p><code>nasm -f elf64 a.asm</code></p>
<p><code>ld a.o</code></p>
<p><code>readelf -l a.out</code></p>
<p>可以看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Elf file type is EXEC (Executable file)</span><br><span class="line">Entry point 0x401000</span><br><span class="line">There are 2 program headers, starting at offset 64</span><br><span class="line"></span><br><span class="line">Program Headers:</span><br><span class="line">  Type           Offset             VirtAddr           PhysAddr</span><br><span class="line">                 FileSiz            MemSiz              Flags  Align</span><br><span class="line">  LOAD           0x0000000000000000 0x0000000000400000 0x0000000000400000</span><br><span class="line">                 0x00000000000000b0 0x00000000000000b0  R      0x1000</span><br><span class="line">  LOAD           0x0000000000001000 0x0000000000401000 0x0000000000401000</span><br><span class="line">                 0x0000000000000001 0x0000000000000001  R E    0x1000</span><br><span class="line"></span><br><span class="line"> Section to Segment mapping:</span><br><span class="line">  Segment Sections...</span><br><span class="line">   00     </span><br><span class="line">   01     .text </span><br></pre></td></tr></table></figure>
<p>The first (lowest) <code>LOAD</code> segment's virtual address is the default load base of the file. You can see it's <code>0x0000000000400000</code> for this file.</p>
</li>
</ul>
<h1 id="实验相关内容"><a class="header-anchor" href="#实验相关内容"></a>实验相关内容</h1>
<h2 id="思路"><a class="header-anchor" href="#思路"></a>思路</h2>
<ul>
<li>用OO方式，构建文件系统树， 对文件系统的所有操作转换为对文件系统树的操作</li>
<li>对指令的解析采用工厂模式</li>
<li>缺点是没有充分重构， 比如加入异常机制和lamda表达式，太懒了QAQ
<ul>
<li>并且，这个思路会在程序开始时加载完整个文件系统树，内存占用很高，不符合实际情况。</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fat12FileSystemTree</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ~<span class="built_in">Fat12FileSystemTree</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> root;</span><br><span class="line">        root = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">static</span> Fat12FileSystemTree *<span class="title">init</span><span class="params">( FILE *fat12, BPB *bpb, DirEntry *rootEntry)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initSystemParameters</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mountFiles</span><span class="params">( )</span></span>;<span class="comment">//将目录区的数据挂载到文件系统,构造文件树</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Node *<span class="title">searchByPath</span><span class="params">( <span class="type">const</span> string &amp;path )</span></span>;</span><br><span class="line">    <span class="function">Node *<span class="title">searchByPath</span><span class="params">( DirNode* parent, <span class="type">const</span> string &amp;path )</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span>  BytsPerSec;	<span class="comment">//每扇区字节数</span></span><br><span class="line">    <span class="type">int</span>  SecPerClus;	<span class="comment">//每簇扇区数</span></span><br><span class="line">    <span class="type">int</span>  RsvdSecCnt;	<span class="comment">//Boot记录占用的扇区数</span></span><br><span class="line">    <span class="type">int</span>  NumFATs;	<span class="comment">//FAT表个数（默认为2）</span></span><br><span class="line">    <span class="type">int</span>  RootEntCnt;	<span class="comment">//根目录最大文件数</span></span><br><span class="line">    <span class="type">int</span>  FATSz;	<span class="comment">//每个FAT表占用扇区数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> Fat12FileSystemTree *instance;</span><br><span class="line">    DirEntry *dirEntry;<span class="comment">//目录项的指针，每次fread都会被刷新</span></span><br><span class="line">    DirNode *root;</span><br><span class="line">    BPB *bpb;</span><br><span class="line">    FILE *fat12;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">Fat12FileSystemTree</span>(FILE *fat12, BPB *bpb, DirEntry *rootEntry);</span><br><span class="line">    <span class="function">DirNode *<span class="title">initRoot</span><span class="params">()</span></span>; <span class="comment">//初始化root节点，name和path均为&quot;/&quot;</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isMatch</span><span class="params">( Node* node, <span class="type">const</span> string &amp; AbsolutePath )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    void mountChildren(int startCluster, DirNode *parent);</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mountFiles</span><span class="params">( <span class="type">int</span> startClusterNum, DirNode* parent )</span></span>;<span class="comment">//递归地将数据区的数据挂载到文件系统树，对文件节点获取其内容，对目录节点进一步递归</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">mountNode</span><span class="params">( DirEntry*dirEntry, <span class="type">int</span> baseAddr, DirNode *parent )</span></span>;<span class="comment">//将给定地址的数据加载进当前目录项（ currentEntry ），再通过当前目录项创建节点</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">loadContent</span><span class="params">( <span class="type">int</span> startClus, FileNode *fileNode )</span></span>;<span class="comment">//加载文件节点的内容</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">getNextClusterNum</span><span class="params">( <span class="type">int</span> num )</span></span>;<span class="comment">//读取FAT表，获取下一个簇号</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValidNodeName</span><span class="params">(string name)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">getDirNodeName</span><span class="params">(string name)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">getFileNodeName</span><span class="params">(string name)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="主程序"><a class="header-anchor" href="#主程序"></a>主程序</h2>
<ul>
<li>注意，如果使用clion,因为clion的工作目录是上一级，那么镜像文件的路径是<code>../a.img</code>,但是用makefile的话，工作目录是当前目录，因此路径该改为<code>./a.img</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    FILE* fat12 = <span class="built_in">fopen</span>(<span class="string">&quot;../a.img&quot;</span>, <span class="string">&quot;rb&quot;</span>);	<span class="comment">//打开FAT12镜像文件</span></span><br><span class="line">    BPB *bpb = BPB::<span class="built_in">init</span>( fat12);</span><br><span class="line">    DirEntry *rootEntry = <span class="keyword">new</span> <span class="built_in">DirEntry</span>();</span><br><span class="line"></span><br><span class="line">    Fat12FileSystemTree *fileSystem = Fat12FileSystemTree::<span class="built_in">init</span>(fat12, bpb, rootEntry );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( <span class="literal">true</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">myPrint</span>(<span class="string">&quot;@lyk&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        vector&lt;string&gt; input_list = <span class="built_in">handleInput</span>();</span><br><span class="line">        string instructionName = <span class="built_in">getInstructionName</span>( input_list );</span><br><span class="line">        vector&lt;string&gt; options = <span class="built_in">getOptions</span>( input_list );</span><br><span class="line">        vector&lt;string&gt; parameters = <span class="built_in">getParameters</span>( input_list  );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Instruction *instruction = InstructionFactory:: <span class="built_in">create</span>( fileSystem, instructionName );</span><br><span class="line">        instruction -&gt; <span class="built_in">exec</span>( options, parameters );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="BPB指定字段的含义"><a class="header-anchor" href="#BPB指定字段的含义"></a>BPB指定字段的含义</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从软盘的第11Byte开始，到第35Byte, 共25Byte</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BPB</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    u16  BPB_BytsPerSec;	<span class="comment">//每扇区字节数</span></span><br><span class="line">    u8   BPB_SecPerClus;	<span class="comment">//每簇扇区数</span></span><br><span class="line">    u16  BPB_RsvdSecCnt;	<span class="comment">//Boot占用的扇区数</span></span><br><span class="line">    u8   BPB_NumFATs;	<span class="comment">//FAT表个数</span></span><br><span class="line">    u16  BPB_RootEntCnt;	<span class="comment">//根目录最大文件数</span></span><br><span class="line">    u16  BPB_TotSec16;		<span class="comment">//逻辑扇区总数</span></span><br><span class="line">    u8   BPB_Media;		<span class="comment">//介质描述符</span></span><br><span class="line">    u16  BPB_FATSz16;	<span class="comment">//每个FAT占用扇区数</span></span><br><span class="line">    u16  BPB_SecPerTrk;  <span class="comment">//	每磁道扇区数（Sector/track）</span></span><br><span class="line">    u16  BPB_NumHeads;	<span class="comment">//磁头数（面数）</span></span><br><span class="line">    u32  BPB_HiddSec;	<span class="comment">//隐藏扇区数</span></span><br><span class="line">    u32  BPB_TotSec32;	<span class="comment">//如果BPB_TotSec16为0，该值为逻辑扇区总数</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">static</span> BPB *<span class="title">init</span><span class="params">(FILE * fat12)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( instance == <span class="literal">NULL</span>  )</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="built_in">BPB</span>( fat12);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">static</span> BPB *instance;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">BPB</span>(FILE* fat12); <span class="comment">//读取boot信息</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">BPB* BPB:: instance = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">BPB:: <span class="built_in">BPB</span>(FILE* fat12 )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> check;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//BPB第11个字节处开始</span></span><br><span class="line">    check = <span class="built_in">fseek</span>(fat12, <span class="number">11</span>, SEEK_SET);</span><br><span class="line">    <span class="keyword">if</span> (check == <span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">myPrint</span>(<span class="string">&quot;fseek in fillBPB failed!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//BPB长度为25字节</span></span><br><span class="line">    check = <span class="built_in">fread</span>( <span class="keyword">this</span> , <span class="number">1</span>, <span class="number">25</span>, fat12);</span><br><span class="line">    <span class="keyword">if</span> (check != <span class="number">25</span>)</span><br><span class="line">        <span class="built_in">myPrint</span>(<span class="string">&quot;fread in fillBPB failed!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="如何进入子目录并输出-说明方法调用"><a class="header-anchor" href="#如何进入子目录并输出-说明方法调用"></a>如何进入子目录并输出(说明方法调用)</h2>
<ul>
<li>
<p>目录项结构;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//32Byte per entry, 数据区的目录项也采用此结构</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DirEntry</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">char</span> DIR_Name[Dir_Name_Length];</span><br><span class="line">    u8   DIR_Attr;		<span class="comment">//文件属性</span></span><br><span class="line">    <span class="type">char</span> Reserve[<span class="number">10</span>]; <span class="comment">//保留位，用于Win NT</span></span><br><span class="line">    u16  DIR_WrtTime;</span><br><span class="line">    u16  DIR_WrtDate;</span><br><span class="line">    u16  DIR_FstClus;	<span class="comment">//开始簇号</span></span><br><span class="line">    u32  DIR_FileSize;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>获得baseAddr。对根目录区而言，只需得到Directory Area 起始地址<code>baseAddressOfDirArea</code>，加上 项数 * 32Byte 就是<code>baseAddressForDirEntry</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> Fat12FileSystemTree:: <span class="built_in">mountFiles</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> baseAddressOfDirArea = ( RsvdSecCnt + NumFATs * FATSz ) * BytsPerSec;<span class="comment">// Directory Area 起始地址</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> baseAddressForDirEntry = baseAddressOfDirArea;<span class="comment">//目录项的起始地址</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span> ; i &lt; RootEntCnt; i++ , baseAddressForDirEntry+=<span class="number">32</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">mountNode</span>( dirEntry, baseAddressForDirEntry, root );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>获得baseAddr,对数据区而言</p>
<ul>
<li>
<p>首先得到数据区起始地址<code>baseAddressOfDataArea</code>和当前簇号<code>currentClusterNum</code></p>
</li>
<li>
<p>得到当前簇的起始地址<code>baseAddressForCurrentCluster</code>， 就是该簇第一个的baseAddr<code>baseAddressForDirEntry</code>，每次迭代读取一个目录项（32Byte）， 因此<code>baseAddr += 32</code>,</p>
</li>
<li>
<p>直到到达簇的末尾<code>baseAddressForCurrentCluster + bytesOfThisCluster</code>， 通过<code>fatValue = getNextClusterNum( currentClusterNum )</code>从fat表中得到下一个簇的簇号。</p>
</li>
<li>
<p>令<code>currentClusterNum = fatValue</code>  ， 不断迭代读取簇，直到文件结束或坏簇</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Fat12FileSystemTree::mountFiles</span><span class="params">(<span class="type">int</span> startClusterNum, DirNode *parent)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    parent-&gt;createDefaultNodes();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//数据区起始地址，即第一个簇（2号簇）的偏移字节</span></span><br><span class="line">    <span class="type">int</span> baseAddressOfDataArea = BytsPerSec * (RsvdSecCnt + FATSz * NumFATs + (RootEntCnt * <span class="number">32</span> + BytsPerSec - <span class="number">1</span>) / BytsPerSec);</span><br><span class="line">    <span class="type">int</span> fatValue = <span class="number">0</span>; <span class="comment">//fat表项的值，代表文件的下一个簇号</span></span><br><span class="line">    <span class="type">int</span> currentClusterNum = startClusterNum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( fatValue &lt; <span class="number">0xFF8</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        fatValue = <span class="built_in">getNextClusterNum</span>( currentClusterNum );<span class="comment">//查FAT表获取下一个簇号</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( fatValue == <span class="number">0xFF7</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">myPrint</span>(<span class="string">&quot;ERR 读取了坏簇\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> baseAddressForCurrentCluster = baseAddressOfDataArea + (currentClusterNum - <span class="number">2</span>)*SecPerClus*BytsPerSec;<span class="comment">//当前簇的起始地址</span></span><br><span class="line">        <span class="type">int</span> bytesOfThisCluster = SecPerClus * BytsPerSec; <span class="comment">//当前簇的长度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span>  baseAddressForDirEntry = baseAddressForCurrentCluster ;  baseAddressForDirEntry &lt; baseAddressForCurrentCluster + bytesOfThisCluster ; baseAddressForDirEntry+=<span class="number">32</span> ) <span class="comment">//baseAddressForDirEntry = 当前目录项的起始地址，不能超过该簇</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">mountNode</span>( dirEntry, baseAddressForDirEntry,parent );</span><br><span class="line">        &#125;</span><br><span class="line">        currentClusterNum = fatValue;<span class="comment">//根据fat项更新簇号</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">//该目录节点递归完毕</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>从软盘中读取目录项，并创建节点</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span>  Fat12FileSystemTree:: <span class="built_in">mountNode</span>( DirEntry* currentEntry, <span class="type">int</span> baseAddr, DirNode *parent) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fseek</span>(fat12, baseAddr, SEEK_SET) == <span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">myPrint</span>(<span class="string">&quot;fseek in mountFiles failed!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fread</span>(currentEntry, <span class="number">1</span>, <span class="number">32</span>, fat12) != <span class="number">32</span>)</span><br><span class="line">        <span class="built_in">myPrint</span>(<span class="string">&quot;fread in mountFiles failed!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function">string <span class="title">dirEntryName</span><span class="params">(&amp;(currentEntry-&gt;DIR_Name[<span class="number">0</span>]), &amp;(currentEntry-&gt;DIR_Name[Dir_Name_Length]))</span></span>;<span class="comment">///起始位置 结束长度位置 +1</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isValidNodeName</span>(dirEntryName)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;<span class="comment">//目录项名字不合法，不挂载</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        string realName;</span><br><span class="line">        <span class="keyword">if</span> (dirEntry-&gt;DIR_Attr == <span class="number">0x10</span>) <span class="comment">// directory node</span></span><br><span class="line">        &#123;</span><br><span class="line">            realName = <span class="built_in">getDirNodeName</span>(dirEntryName);</span><br><span class="line">            DirNode *child = <span class="keyword">new</span> <span class="built_in">DirNode</span>(realName, parent-&gt;AbsolutePath + realName + <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                                         currentEntry-&gt;DIR_FileSize);   <span class="comment">//新建该目录的节点</span></span><br><span class="line">            parent-&gt;children.<span class="built_in">push_back</span>(child);</span><br><span class="line">            <span class="keyword">if</span>(child-&gt;<span class="built_in">isDefaultNode</span>())<span class="comment">// . 和 ..不递归</span></span><br><span class="line">            &#123;</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                parent-&gt;dir_count++;</span><br><span class="line">                <span class="built_in">mountFiles</span>(currentEntry-&gt;DIR_FstClus, child);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span><span class="comment">// file node</span></span><br><span class="line">        &#123;</span><br><span class="line">            realName = <span class="built_in">getFileNodeName</span>(dirEntryName);</span><br><span class="line">            FileNode *child = <span class="keyword">new</span> <span class="built_in">FileNode</span>(realName, parent-&gt;AbsolutePath + realName + <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                                           currentEntry-&gt;DIR_FileSize);   <span class="comment">//新建该文件的节点</span></span><br><span class="line">            parent-&gt;children.<span class="built_in">push_back</span>(child);</span><br><span class="line">            parent-&gt;file_count++;</span><br><span class="line">            <span class="built_in">loadContent</span>(currentEntry-&gt;DIR_FstClus, child);<span class="comment">//读取文件的内容</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="如何获得指定文件的内容-即如何获得数据区的内容-比如使用指针等"><a class="header-anchor" href="#如何获得指定文件的内容-即如何获得数据区的内容-比如使用指针等"></a>如何获得指定文件的内容,即如何获得数据区的内容(比如使用指针等)</h2>
<ul>
<li>
<p>对目录节点而言， 就是上文的<code> mountNode用</code>，  用 <code>fseek</code>和<code>fread</code>不断从baseAddr开始读取目录项，用目录项的数据初始化节点</p>
</li>
<li>
<p>对文件节点而言：（ 与 <code> mountNode</code>的逻辑相同，只是懒得重构了）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> Fat12FileSystemTree :: <span class="built_in">loadContent</span>( <span class="type">int</span> startClus, FileNode  *fileNode)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> dataBase = BytsPerSec * (RsvdSecCnt + FATSz * NumFATs + (RootEntCnt * <span class="number">32</span> + BytsPerSec - <span class="number">1</span>) / BytsPerSec);</span><br><span class="line">    <span class="type">int</span> currentClus = startClus;</span><br><span class="line">    <span class="type">int</span> value = <span class="number">0</span>;		<span class="comment">//这里用value来进行不同簇的读取（超过512字节）</span></span><br><span class="line">    <span class="type">char</span> *p = fileNode -&gt; content;</span><br><span class="line">    <span class="keyword">if</span> (startClus == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (value &lt; <span class="number">0xFF8</span>) &#123;</span><br><span class="line">        value = <span class="built_in">getNextClusterNum</span>( currentClus);<span class="comment">//获取下一个簇</span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="number">0xFF7</span></span><br><span class="line">                ) &#123;</span><br><span class="line">            <span class="built_in">myPrint</span>(<span class="string">&quot;坏簇，读取失败!\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>* str = (<span class="type">char</span>*)<span class="built_in">malloc</span>(SecPerClus*BytsPerSec);	<span class="comment">//暂存从簇中读出的数据</span></span><br><span class="line">        <span class="type">char</span> *content = str;</span><br><span class="line">        <span class="type">int</span> startByte = dataBase + (currentClus - <span class="number">2</span>)*SecPerClus*BytsPerSec;</span><br><span class="line">        <span class="type">int</span> check;</span><br><span class="line">        check = <span class="built_in">fseek</span>(fat12, startByte, SEEK_SET);</span><br><span class="line">        <span class="keyword">if</span> (check == <span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">myPrint</span>(<span class="string">&quot;fseek in loadContent failed!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        check = <span class="built_in">fread</span>(content, <span class="number">1</span>, SecPerClus*BytsPerSec, fat12);<span class="comment">//提取数据</span></span><br><span class="line">        <span class="keyword">if</span> (check != SecPerClus * BytsPerSec)</span><br><span class="line">            <span class="built_in">myPrint</span>(<span class="string">&quot;fread in loadContent failed!&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> count = SecPerClus * BytsPerSec; <span class="comment">//簇的字节数</span></span><br><span class="line">        <span class="type">int</span> loop = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;<span class="comment">//读取赋值</span></span><br><span class="line">            *p = content[i];</span><br><span class="line">            p++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(str);</span><br><span class="line">        currentClus = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="如何进行C代码和汇编之间的参数传递和返回值传递"><a class="header-anchor" href="#如何进行C代码和汇编之间的参数传递和返回值传递"></a>如何进行C代码和汇编之间的参数传递和返回值传递</h2>
<ul>
<li>
<p>64位linux, 参数传递使用<code>rdi</code>, <code>rsi</code></p>
</li>
<li>
<p>注意，x64的系统调用和x32不一样，前者使用<code>syscall</code>而不是<code>int 0x80</code>，并且<code>syscall</code>的打印函数的寄存器要求也与<code>int 0x80</code>不同</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="type">void</span> _print(<span class="type">const</span> <span class="type">char</span> *, <span class="type">const</span> <span class="type">int</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myPrint</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _print(p, <span class="built_in">strlen</span>(p));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="汇编代码中对I-O的处理方式-说明指定寄存器所存值的含义"><a class="header-anchor" href="#汇编代码中对I-O的处理方式-说明指定寄存器所存值的含义"></a>汇编代码中对I/O的处理方式,说明指定寄存器所存值的含义</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">global _print</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">section .text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; 传参顺序: rdi，rsi，rdx，rcx，r8，r9</span><br><span class="line">; void print(char* s, int lenl);</span><br><span class="line">_print:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ;x64的打印函数</span><br><span class="line">    ; ; write(1, message, 13) </span><br><span class="line">    ; mov     rax, 1                  ; 1 号系统调用是写操作 </span><br><span class="line">    ; mov     rdi, 1                  ; 1 号文件系统调用是标准输出 </span><br><span class="line">    ; mov     rsi, message            ; rsi存放输出字符串的地址 </span><br><span class="line">    ; mov     rdx, 13                 ; rdx存放字符串的长度 </span><br><span class="line">    ; syscall                         ; 调用系统执行写操作 </span><br><span class="line"></span><br><span class="line">    ; 如果是x32,则打印函数为：</span><br><span class="line">	; push rax, 4</span><br><span class="line">    ; push rbx, 1</span><br><span class="line">    ; push rcx, rdi; 可以看到，存放字符串地址和长度的寄存器是rcx, rdx,与x64不同</span><br><span class="line">    ; push rdx, rsi</span><br><span class="line">    ; int 80h</span><br><span class="line">    ; ret</span><br><span class="line">    ; push rdx</span><br><span class="line">    ; push rdi</span><br><span class="line">    </span><br><span class="line">    push rdx</span><br><span class="line">    push rdi</span><br><span class="line"></span><br><span class="line">    mov rdx, rsi</span><br><span class="line">    mov rsi, rdi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    mov     rax, 1                  ; 1 号系统调用是写操作 </span><br><span class="line">    mov     rdi, 1                  ; 1 号文件系统调用是标准输出 </span><br><span class="line"></span><br><span class="line">    syscall                         ; 调用系统执行写操作 </span><br><span class="line"></span><br><span class="line">    pop rdi</span><br><span class="line">    pop rdx</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>OS Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>Once Upon a time in America</title>
    <url>/2021/08/08/Once%20Upon%20a%20time%20in%20America/</url>
    <content><![CDATA[<p><em>当我对所有的事情都厌倦的时候，我就会想到你，想到你在世界的某个地方生活着，存在着，我就愿意忍受一切。你的存在对我很重要</em></p>
<span id="more"></span>
<p>一个关于回忆的故事，主角面条被好友麦克算计入狱，整整三十五年的时间后者偷走了他的人生。面条少年时深爱的女人Deborah后来跟了麦克，面条回到纽约后见到故人，漫长的回忆，一去不返的时光横亘在他眼前，面条没有报复，他默默地离开了。</p>
<p>我对这部电影没什么感觉，因为时代不一样，我对面条的遭遇也没什么共鸣。 我认为面条的悲剧是由以下三个原因造成的：</p>
<ol>
<li>只知道爱恨情仇，没啥科学文化和艺术追求。所以他无法超脱外部环境，只能在社会这个大泥潭大染缸中越陷越深。 当面条再见到Deborah时，后者说“我们都老了”，老的不是人，而是心。人飞快的变老，就是从生活被钱、婚姻、孩子和柴米油盐充满开始的。（所以学点音乐可能有助于面条的身心健康，起码能让他“年轻”点儿，可惜莱昂内没给主角这个机会）</li>
<li>沉迷于过往，拒绝改变。电影叫《美国往事》，面条的回忆构成了这个故事。 面条放不下他的青春，放不下他的兄弟，更放不下Deborah。 在他心目中Deborah永远是那个喜欢读书、跳舞和表演，浑身发光走路带风的少女。其实当面条说出那句“当我对所有的事情都厌倦的时候，我就会想到你，想到你在世界的某个地方生活着，存在着，我就愿意忍受一切。你的存在对我很重要”时，悲剧已经注定了。 泰戈尔讲“有一天晚上我烧掉了所有的记忆，梦从此变得透明。有一天早上我扔掉了昨天的一切，从此我的脚步变得轻盈”。 回忆虽然很美好， 有时甚至是人生中最美好的。 但毕竟已经逝去了。 一天天地沉湎于此毫无意义。 人应该残酷一点，把过去都抛弃----- 只有未来才是值得考虑的。 麦克和Deborah都是只看未来的人，所以他们“成功”了，获得了名利和地位。 麦克在偷窃面条的人生时，不会在乎他和面条有过美好过往（他肯定会想到，但是他选择无视），Deborah虽然和面条有浪漫的回忆，但为了成为大明星，她最终选择成为麦克的情妇。 他们如此残酷地对待自己，让自己成为一个令当初的自己讨厌的人，所以他们成功了（不过他们的这种残忍性格其实从小就有，所以发展成这样也是注定的，从这个意义上讲，他们从来没变）。只有温柔又善良的面条失败了，他沉迷于过去，宁愿相信过去的美好，而不愿意在残酷的现实面前改变自己（不过面条坚守了初心，始终保持了童年的纯真，从这个意义上讲，他成功了）。我不是赞颂麦克的行为，替他的丑恶行为辩护，我想说的是，人对自己狠一点，向前看，是必要的， 这样才能进步，才能适应社会。 一天天地搞文艺催泪的那一套，兄弟情、不忘初心什么的，有什么意义呢？ 时间会倒转吗？ 事情可以重来吗？ 你心爱的人会回到你面前吗？不会呀！ 所以沉迷于回忆毫无意义，只能让人变得消沉。 你面条一天天地想着Deborah，十三四岁的时候想，进了监狱服刑十五年还在想， 出狱二十年了还在想，你再怎么想，Deborah能回到你身边吗？ 不能呀！ 人家Deborah现在是一个势利眼了，只跟有钱人过日子，不再是那个明媚的少女了。 面条要是单纯地想和Deborah这个人在一起，就应该出狱后想方设法，甚至不择手段（面条是个黑帮）地向上爬，用权力和金钱得到Deborah的芳心，当然，你只能得到一个“油腻”的，眼睛里没有光的Deborah。 如果面条想得到纯真美丽、走路带风的Deborah，那不好意思，你永远都找不到了，干脆断了念想吧，或者把她忘掉，这样对生活更有益。像面条这样一直念念不忘，时隔几十年还要去见人家，有什么意义呢，只能让双方更疲惫。 说到底，面条不能向前看（这是他的天性吧），是他悲剧的根本原因。他自己能保持着童年的温柔，能重情重义，不慕名利，并且以为别人也能如他这样，其实只有他没变，其他人都变了。</li>
<li>面条重情重义的性格和美国社会不适应。 其实放眼现代社会都如此，毕竟现代社会是要逼迫人不断向前看的社会，有时还要强迫你放弃某些纯真美好的东西。 如前所述，面条不是一个能做这种交易的人，因此他没法在这个社会中立足。当然， 他一个人能秉持着这份纯洁艰难地活下去，但是他没法要求别人（Deborah）也这么做，这样做要求太高了。 其实换个角度想， 面条和Deborah也不全是悲剧， 二人的性格差异就决定了他们走不到一起。 Deborah从小就是为了向上爬可以抛弃一切的，她后来委身于别人也是自己的选择，她可以为了名利而拒绝面条，这很正常，而且Deborah等了面条十五年才决定放弃，这已经很不容易了。总不能指望人家女孩等你三十五年还不变心吧，何况她当初也未必有多喜欢面条。</li>
</ol>
<p>总之，《美国往事》是上个时代的故事，人物是活在上个时代的人物，悲伤是属于上个时代的悲伤。 今天我们很难看到面条这样初心不改的人。 而麦克这样的人成为常态，甚至是我们追捧的对象（ 我指的是对自己残酷、不念旧情和向前看这些方面，至于他的不择手段和心狠手辣，在任何时代都是无法接受的。 麦克最后也自食其果领便当了）。Deborah这样的女孩的品格已经是时所罕见的了（  在21世纪有女生能等15年，太夸张了，况且Deborah是在好莱坞 ）。我们看《美国往事》，对剧中人物的命运会觉得是理所应当的，毕竟按如今的观念看，也应该是麦克这样的人成功。 面条实在……太老派了，他的思维方式也难以跳出他那个时代，他的阶层的局限性。 《美国往事》要是放到2021年，那面条出狱后应该努力学习，读个大学什么的，或者当个热心公益（ <s>运用专业知识打击黑帮</s>  ）的官员等等……而不是满脑子恩恩怨怨情情爱爱，成天想着女人和兄弟。这个世界有更伟大更美好的东西值得探索。</p>
]]></content>
      <categories>
        <category>Art</category>
      </categories>
      <tags>
        <tag>Movie</tag>
      </tags>
  </entry>
  <entry>
    <title>Optimization Methods- Lecture1</title>
    <url>/2021/09/08/Optimization-Methods-Lecture1/</url>
    <content><![CDATA[<p>ref: <a href="http://www.lamda.nju.edu.cn/chengq/course/opt2021/opt2021.html">Optimization Methods</a></p>
<p>Outline:</p>
<ul>
<li><strong>Mathematical Optimization</strong></li>
<li><strong>Least-squares</strong></li>
<li><strong>Linear Programming</strong></li>
<li><strong>Convex Optimization</strong></li>
<li><strong>Nonlinear Optimization</strong></li>
<li><strong>Summary</strong></li>
</ul>
<span id="more"></span>
<h1 id="Mathematical-Optimization"><a class="header-anchor" href="#Mathematical-Optimization"></a>Mathematical Optimization</h1>
<ul>
<li>
<p><strong>Optimization Problem</strong><br>
$$<br>
min \quad \quad f_0(x) \<br>
s.t. \quad f_i(x) \leq b_i, \quad i=1,2,\dots,n<br>
$$</p>
<ul>
<li>Optimization Variable: $x=(x_1,\dots,x_n)$</li>
<li>Objective Function: $f_0:R^n \rarr R$</li>
<li>Constraint Functions: $f_i:R^n \rarr R$​</li>
</ul>
</li>
<li>
<p>$x^*$​ is called <strong>optimal</strong> or a solution</p>
<ul>
<li>$f_i(x^*)\leq b_i$ , $i=1,\dots,m $</li>
<li>For any $z$ with $f_i(z)\leq b_i $, we have $f_0(z)\geq f_0(x^*)$</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p><strong>Linear Program</strong>  线性函数的定义<br>
$$<br>
f_i(\alpha x + \beta y) = \alpha f_i(x) + \beta f_i(y)<br>
$$</p>
<ul>
<li>For all $x,y \in R^n$ and all $\alpha, \beta \in R$​</li>
<li>$i$​ 可以为$0$​（目标函数）， 也可以为$1,2,\dots,n$​​​​( 约束函数 )。 当优化问题的目标函数和约束函数都是线性函数时， 整个问题称为<strong>线性规划（线性问题）</strong></li>
</ul>
</li>
<li>
<p><strong>Nonlinear Program</strong></p>
<ul>
<li>If the Optimization Problem is not linear</li>
</ul>
</li>
<li>
<p><strong>Convex Optimization Problem</strong><br>
$$<br>
f_i(\alpha x + \beta y) \leq \alpha f_i(x) + \beta f_i(y)<br>
$$</p>
<ul>
<li>
<p>For all $x,y \in R^n$​ and all $\alpha, \beta \in R$​ with $\alpha + \beta=1, \alpha \geq 0, \beta \geq 0$</p>
</li>
<li>
<p>线性规划是凸优化的一个特例</p>
<ul>
<li>只要求对$\alpha + \beta=1, \alpha \geq 0, \beta \geq 0$的$\alpha, \beta$成立， 实际上把条件放松了​</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Applications"><a class="header-anchor" href="#Applications"></a>Applications</h2>
<p>$$<br>
min \quad \quad f_0(x) \<br>
s.t. \quad f_i(x) \leq b_i, \quad i=1,2,\dots,n<br>
$$</p>
<ul>
<li><strong>Abstraction</strong>
<ul>
<li>$x$​ represents the choice made</li>
<li>$f_i(x) \leq b_i$ represent firm requirements that limit the possible choices</li>
<li>$f_0(x)$​ represents the cost of choosing</li>
<li>A solution corresponds to a choice that has minimum cost, among all choices that meet the requirements</li>
</ul>
</li>
</ul>
<h3 id="Portfolio-Optimization"><a class="header-anchor" href="#Portfolio-Optimization"></a>Portfolio Optimization</h3>
<ul>
<li>
<p><strong>Variables</strong></p>
<ul>
<li>$x_i$ represents the investment in the $𝑖_th$ asset</li>
<li>$x \in R$​ describes the overall portfolio allocation across the set of asset</li>
</ul>
</li>
<li>
<p><strong>Constraints</strong></p>
<ul>
<li>A limit on the budget the requirement</li>
<li>Investments are nonnegative</li>
<li>A minimum acceptable value of expected return for the whole portfolio</li>
</ul>
</li>
<li>
<p>Objective</p>
<ul>
<li>Minimize the variance of the portfolio return 投资的回报最稳定（ 也可以把目标换成期望的回报最高 ）</li>
</ul>
</li>
</ul>
<h3 id="Device-Sizing"><a class="header-anchor" href="#Device-Sizing"></a>Device Sizing</h3>
<ul>
<li><strong>Variables</strong>
<ul>
<li>$x \in R^n$​  describes the widths and lengths of the devices</li>
</ul>
</li>
<li><strong>Constraints</strong>
<ul>
<li>Limits on the device</li>
<li>Timing</li>
<li>A limit on the total area of the circuit</li>
</ul>
</li>
<li>Objective
<ul>
<li>Minimize the total power consumed by the circuit</li>
</ul>
</li>
</ul>
<h3 id="Data-Fitting"><a class="header-anchor" href="#Data-Fitting"></a>Data Fitting</h3>
<ul>
<li><strong>Variables</strong>
<ul>
<li>$x \in R^n$ describes parameters in the model</li>
</ul>
</li>
<li><strong>Constraints</strong>
<ul>
<li>Prior information</li>
<li>Required limits on the parameters (such as nonnegativity)</li>
</ul>
</li>
<li>Objective
<ul>
<li>Minimize the prediction error between the observed data and the values predicted by the model</li>
</ul>
</li>
</ul>
<h2 id="Solving-Optimization-Problems"><a class="header-anchor" href="#Solving-Optimization-Problems"></a>Solving Optimization Problems</h2>
<ul>
<li><strong>General Optimization Problem</strong>
<ul>
<li>Very difficult to solve</li>
<li>Constraints can be very complicated, the number of variables can be very large 约束复杂， 变量多</li>
<li>Methods involve some compromise, e.g., computation time, or suboptimal solution</li>
</ul>
</li>
<li><strong>Exceptions</strong>
<ul>
<li>Least-squares problems</li>
<li>Linear programming problems</li>
<li>Convex optimization problems</li>
</ul>
</li>
</ul>
<h1 id="Least-squares"><a class="header-anchor" href="#Least-squares"></a><strong>Least-squares</strong></h1>
<ul>
<li>
<p><strong>The Problem</strong><br>
$$<br>
min \quad ||Ax-b||<em>2^2 = \sum</em>{i=1}^k { (a_i^T x - b_i)^2 }<br>
$$</p>
<ul>
<li>$A \in R^{k \times n}$​ ,  $a_i^T$​ is the $i_{th}$​ row of $A,b \in R^k$​</li>
<li>$A \in R^n$​ is the optimization variable​</li>
</ul>
</li>
<li>
<p><strong>Setting the gradient to be 0</strong><br>
$$<br>
2A^T(Ax-b)=0 \<br>
\rarr \quad A^TAx = A^Tb \<br>
\rarr \quad x = (A^TA)^{-1}A^Tb<br>
$$</p>
</li>
</ul>
<hr>
<ul>
<li>
<p><strong>A Set of Linear Equations</strong><br>
$$<br>
A^TAx = A^Tb<br>
$$</p>
</li>
<li>
<p><strong>Solving least-squares problems</strong></p>
<ul>
<li>Reliable and efficient algorithms and software</li>
<li>Computation time proportional to $n^2k( A \in R^{k \times n})$ ; less if structured</li>
<li>A mature technology</li>
<li>Challenging for <strong>extremely large</strong> problems</li>
</ul>
</li>
</ul>
<h2 id="Using-Least-squares"><a class="header-anchor" href="#Using-Least-squares"></a>Using Least-squares</h2>
<ul>
<li>
<p><strong>Easy to Recognize</strong></p>
</li>
<li>
<p><strong>Weighted least-squares</strong><br>
$$<br>
\sum\limits_{i=1}^k w_i( a_i^Tx-b_i )^2<br>
$$<br>
把$w_i$移到括号里就是标准最小二乘</p>
<ul>
<li>Different importance</li>
</ul>
</li>
<li>
<p><strong>Different importance</strong><br>
$$<br>
\sum\limits_{i=1}^k ( a_i^Tx-b_i )^2 + \rho \sum\limits_{i=1}^n x_i^2<br>
$$<br>
也可化为标准最小二乘</p>
<ul>
<li>More stable，避免过拟合</li>
</ul>
</li>
</ul>
<h1 id="Linear-Programming"><a class="header-anchor" href="#Linear-Programming"></a><strong>Linear Programming</strong></h1>
<ul>
<li>
<p><strong>The Problem</strong><br>
$$<br>
min \quad c^Tx \<br>
s.t. \quad a_i^Tx \leq b_i, \quad i = 1, \dots, m<br>
$$</p>
<ul>
<li>$c,a_1,\dots,a_m \in R^n, b_1, \dots, b_m \in R$</li>
</ul>
</li>
<li>
<p><strong>Solving Linear Programs</strong></p>
<ul>
<li>No analytical formula for solution</li>
<li>Reliable and efficient algorithms and software</li>
<li>Computation time proportional to $𝑛^2𝑚$ if $ m \geq 𝑛$; less with structure</li>
<li>A mature technology</li>
<li>Challenging for <strong>extremely large</strong> problems</li>
</ul>
</li>
</ul>
<h2 id="Using-Linear-Programming"><a class="header-anchor" href="#Using-Linear-Programming"></a>Using Linear Programming</h2>
<ul>
<li><strong>Not as easy to recognize</strong></li>
<li><strong>Chebyshev Approximation Problem</strong></li>
</ul>
<p>$$<br>
min \quad \max\limits_{i=1,\dots,k} |a_i^Tx-b_i| \<br>
\iff min \quad t \quad \quad \quad s.t. \quad t = \max\limits_{i=1,\dots,k} |a_i^Tx-b_i| \<br>
\quad\quad  \quad \iff min \quad t \quad \quad \quad s.t. \quad t \geq  |a_i^Tx-b_i|, {i=1,\dots,k} ( 因为最小化，所以可以等价 )\<br>
\quad \quad \quad\iff min \quad t \quad \quad \quad s.t. \quad t \geq  |a_i^Tx-b_i|, {i=1,\dots,k} \<br>
\quad \quad \quad \quad \quad \iff min \quad t \quad \quad \quad s.t. \quad -t \leq  a_i^Tx-b_i \leq t, {i=1,\dots,k} \<br>
$$</p>
<h1 id="Convex-Optimization"><a class="header-anchor" href="#Convex-Optimization"></a>Convex Optimization</h1>
<ul>
<li>
<p><strong>Local minimizers are also global minimizers</strong></p>
</li>
<li>
<p>The Problem<br>
$$<br>
f_i(\alpha x + \beta y) \leq \alpha f_i(x) + \beta f_i(y)<br>
$$</p>
<ul>
<li>
<p>For all $x,y \in R^n$ and all $\alpha, \beta \in R$ with $\alpha + \beta=1, \alpha \geq 0, \beta \geq 0$</p>
</li>
<li>
<p>Least-squares and linear programs as special cases</p>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="Solving-Convex-Optimization-Problems"><a class="header-anchor" href="#Solving-Convex-Optimization-Problems"></a>Solving Convex Optimization Problems</h2>
<ul>
<li>No analytical solution</li>
<li>Reliable and efficient algorithms (e.g., interior-point methods)</li>
<li>Computation time (roughly) proportional to $\max{n^3,n^2m,F}$​
<ul>
<li>$F$ is cost of evaluating $f_i$​'s and their first and second derivatives</li>
</ul>
</li>
<li><strong>Almost</strong> a technology</li>
</ul>
<hr>
<ul>
<li><strong>Often difficult to recognize</strong></li>
<li><strong>Many tricks for transforming problems into convex form</strong></li>
<li><strong>Surprisingly many problems can be solved via convex optimization</strong></li>
</ul>
<h1 id="Nonlinear-Optimization"><a class="header-anchor" href="#Nonlinear-Optimization"></a><strong>Nonlinear Optimization</strong></h1>
<ul>
<li>An optimization problem when the objective or constraint functions are not linear, but not known to be convex</li>
<li>Sadly, there are no effective methods for solving the general nonlinear programming problem
<ul>
<li>Could be NP-hard</li>
</ul>
</li>
<li>We need <strong>compromise</strong></li>
</ul>
<h2 id="Local-Optimization-Methods"><a class="header-anchor" href="#Local-Optimization-Methods"></a>Local Optimization Methods</h2>
<ul>
<li>Find a point that minimizes $f_0$ among feasible points near it
<ul>
<li>The compromise is to give up seeking the optimal $x$</li>
</ul>
</li>
<li>Fast, can handle large problems
<ul>
<li>Differentiability</li>
</ul>
</li>
<li>Require initial guess</li>
<li>Provide no information about distance to (global) optimum</li>
<li>Local optimization methods are more art <strong>than technology</strong>
<ul>
<li>全凭运气</li>
</ul>
</li>
</ul>
<h2 id="Global-Optimization"><a class="header-anchor" href="#Global-Optimization"></a>Global Optimization</h2>
<ul>
<li><strong>Find the global solution</strong>
<ul>
<li>The compromise is efficiency</li>
</ul>
</li>
<li><strong>Worst-case complexity grows exponentially with problem size</strong></li>
<li><strong>Applications</strong></li>
<li>A small number of variables, where computing time is not critical</li>
<li>The value of finding the true global solution is very high</li>
</ul>
<hr>
<ul>
<li><strong>Worst-case Analysis of a high value or safety-critical system</strong>
<ul>
<li>Variables represent uncertain parameters</li>
<li>Objective function is a utility function</li>
<li>Constraints represent prior knowledge</li>
<li>If the worst-case value is acceptable, we can certify the system as safe or reliable 能证明系统可靠</li>
</ul>
</li>
<li><strong>Local optimization methods can be tried</strong>
<ul>
<li>If finding values that yield unacceptable performance, then the system is not reliable 局部优化已经发现了不可接受的值，那系统就不可靠</li>
<li>But it cannot certify the system as reliable 只能证明系统不可靠，不能证明可靠</li>
</ul>
</li>
</ul>
<h2 id="Role-of-Convex-Optimization-in-Nonconvex-Problems"><a class="header-anchor" href="#Role-of-Convex-Optimization-in-Nonconvex-Problems"></a>Role of Convex Optimization in Nonconvex Problems</h2>
<ul>
<li><strong>Initialization for local optimization</strong>
<ul>
<li>An approximate, but convex, formulation</li>
</ul>
</li>
<li><strong>Convex heuristics for nonconvex optimization</strong>
<ul>
<li>Sparse solutions (compressive sensing)</li>
</ul>
</li>
<li><strong>Bounds for global optimization</strong> 通过凸优化来找全局优化问题的下界
<ul>
<li>Relaxation 把条件松弛</li>
<li>Lagrangian relaxation</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Mathematics</category>
      </categories>
      <tags>
        <tag>Optimization Methods</tag>
      </tags>
  </entry>
  <entry>
    <title>OS Persistence</title>
    <url>/2022/04/04/OS-Persistence/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>I/O Devices</li>
<li>File</li>
<li>File System</li>
<li>Locality and FFS</li>
<li>Crush-Consistency Problem</li>
</ul>
<p>Ref: <em>OSTEP</em></p>
<span id="more"></span>
<h1 id="I-O-Devicecs"><a class="header-anchor" href="#I-O-Devicecs"></a>I/O Devicecs</h1>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Persistence/IO%20Arch.png" alt="IO Arch"></p>
<ul>
<li>CPU通过内存总线连接到内存</li>
<li>图像和其他高性能IO设备连接到常规的IO总线（如PCI）</li>
<li>最慢的设备，如键盘、鼠标等，连接到外围总线</li>
</ul>
<h2 id="I-O系统各层软件及其功能"><a class="header-anchor" href="#I-O系统各层软件及其功能"></a>I/O系统各层软件及其功能</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Persistence/IO%20Layers.png" alt="IO Layers"></p>
<h2 id="Unbuffered-I-O-Buffered-I-O"><a class="header-anchor" href="#Unbuffered-I-O-Buffered-I-O"></a>Unbuffered I/O &amp; Buffered I/O</h2>
<ul>
<li>Unbuffered I/O:
<ul>
<li>read/write -&gt;System calls</li>
<li>File descriptor</li>
<li>Not in ANSI C, but in POSIX.1 and XPG3</li>
</ul>
</li>
<li>Buffered I/O
<ul>
<li>Implemented in standard I/O library (属于库函数，而不是系统调用)</li>
<li>处理很多细节, 如缓存分配, 以优化长度执行I/O等.</li>
<li>Stream -&gt; a pointer to FILE</li>
</ul>
</li>
</ul>
<h1 id="RAID"><a class="header-anchor" href="#RAID"></a>RAID</h1>
<p>略</p>
<h1 id="File"><a class="header-anchor" href="#File"></a>File</h1>
<ul>
<li>进程是虚拟化的CPU, 地址空间是虚拟化的内存， 而文件和目录就是虚拟化的外部存储设备</li>
<li>文件：线性字节数组，每个文件都有一个低级名称：<code>inode number</code></li>
<li>目录：目录是特殊的文件，本身也有低级名称<code>inode number</code>，其内容为<code>（用户可读名字， 低级名称）</code>对的列表。
<ul>
<li>目录的每个对，即每个条目<code>dentry</code>，都指向文件或其他目录</li>
<li>目录层次结构从根目录<code>/</code>开始</li>
</ul>
</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Persistence/IO%20Layers.png" alt="File Structure"></p>
<p>Linux文件的细节详见<em>Linux Programming</em></p>
<h1 id="File-System"><a class="header-anchor" href="#File-System"></a>File System</h1>
<h2 id="整体组织"><a class="header-anchor" href="#整体组织"></a>整体组织</h2>
<p>我们实现极简版的VSFS（ <code>Very Simple File System</code> ）， VVFS与Linux的VFS（虚拟文件系统，提供了统一的文件系统模型，详见<em>Linux Basic</em>）大致相同：</p>
<ul>
<li>磁盘分块（block），文件系统由一系列块组成</li>
<li>假定有64块，每块4KB. 数据块为最后56个，inode表占5个，两种位图各占一个，超级块占一个</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Persistence/VSFS%20Disk%20Image.png" alt="VSFS Disk Image"></p>
<ul>
<li><code>superblock</code>：位于第一块， 记录关于该文件系统的信息, 包括<code>inode</code>和数据块数量，inode表的起始地址等。 和一些标识文件系统类型的<code>magic number</code></li>
<li>位图（bitmap）：记录inode或数据块是否已分配的数据结构，有<code>inode bitmap</code>和<code>data bitmap</code></li>
<li><code>inode</code>表：就是 <code>inode</code>数组</li>
<li>数据块</li>
</ul>
<table>
<thead>
<tr>
<th>超级块</th>
<th>inode bit map</th>
<th>data bitmap</th>
<th>inode table</th>
<th>datablock</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>5</td>
<td>56</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>挂载文件系统时，OS首先读取<code>superblock</code>，初始化各种参数，然后将该卷添加到文件系统树中</strong>
<ul>
<li>也就是说挂载文件系统时，超级块必定被加载到内存里</li>
</ul>
</li>
</ul>
<h3 id="文件组织：-inode"><a class="header-anchor" href="#文件组织：-inode"></a>文件组织： inode</h3>
<p>index node， named by Ken Thompson</p>
<ul>
<li>
<p><code>inode</code>：保存给定文件的元数据的结构</p>
</li>
<li>
<p><strong>由<code>inumber</code>隐式引用,</strong> 给定<code>inumber</code>，可以计算磁盘上相应节点的位置</p>
</li>
<li>
<p>假设：</p>
<ul>
<li>inode表大小为20KB（5个4KB块）</li>
<li>每个<code>inode</code>256字节，因此有80个<code>inode</code>；</li>
<li>超级块0KB开始，<code>inode map</code>从4KB开始， <code>data map</code>从8KB开始，<code>inode table</code>从12字节开始</li>
<li>要读取<code>inode number=32</code></li>
</ul>
</li>
<li>
<p>过程：</p>
<ol>
<li>
<p>先得到inode表的起始地址：<code>12KB</code></p>
</li>
<li>
<p>再加上此<code>inode</code>在表内的偏移量：<code>32 * 256B = 8192B</code>， <code>12KB + 8192B= 20KB</code></p>
</li>
<li>
<p>由于磁盘不是字节可寻址的，而是由可寻址扇区组成（512B），因此为了获取<code>inumber=32</code>的<code>inode</code>块，文件系统将请求物理节点号<code>40</code>（ <code>20KB / 512B= 40</code> ）,获得期望的<code>inode</code>块</p>
</li>
</ol>
   <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通用算法： inumber -&gt; sector number</span></span><br><span class="line">blk = ( inumber * sizeof(inode_t) )/ blockSize; <span class="comment"># 得到该inode所在的块号</span></span><br><span class="line">sector = ((blk*blockSize)+ inodeStartAddr)/ sectorSize;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="多级索引"><a class="header-anchor" href="#多级索引"></a>多级索引</h4>
<p>为了支持大文件，inode中除了直接指针外，还允许间接指针。 间接指针指向一个间接块（磁盘的数据块区域）。 假设一个块是4KB，磁盘地址空间是4Byte， 那就增加了1024个指针。 假设inode有12个直接指针和一个间接指针，则一个inode可以支持$(12+ 1 \times 1024) \times 4 \mathrm{KB}$</p>
<p>按这个逻辑，还可以分配一个二重间接块，存放指向间接块的指针， inode存放一个二重间接指针， 这个指针就可以表示$1024 \times 1024 \mathrm{KB}$</p>
<ul>
<li>
<p>注意到，使用了多级索引的文件系统的文件分配模型是一个不平衡树，这个设计的初衷是： 大部分文件都是小文件， 因此只需要对大文件进行特殊的设计， 小文件让直接指针指向就好了</p>
</li>
<li>
<p>还有一种基于链表的方法，即inode只需存储一个指向第一个块的指针， 而数据区每个数据块的末尾都会有一个指向该文件下一个数据块的指针。但是这种方式对于某些workload效果不好，比如随机访问。</p>
<ul>
<li>windows采用FAT（File Allocation Table）, 指向下一块的指针不存在当前数据块中， 而是存在FAT（位于内存）中</li>
</ul>
</li>
</ul>
<h3 id="目录组织"><a class="header-anchor" href="#目录组织"></a>目录组织</h3>
<p>目录是特殊的文件，它也有inode， 但是目录的内容（即数据块的内容）是目录条目（称为<code>dentry</code> )与该条目对应inode的映射</p>
<p>打开目录，首先是打开目录的文件描述符</p>
<p>目录基本上是一个<code>&lt;dentry， inode number&gt;</code>的列表。 其中条目名称还包括条目的记录长度（名称的总字节数 + 所有的剩余空间）和字符串长度（即条目名称的实际长度）。 每个目录还有两个额外的条目： <code>.</code>和<code>..</code> 用于表示当前目录和父目录</p>
<ul>
<li>目录就是特殊的文件， 它也有inode， 目录的数据块的内容就是以上说的<code>&lt;条目名称， inode number&gt;</code>的列表</li>
</ul>
<p>假设某目录（i number = 5）中有三个文件（foo, bar, foo bar）， i number分别为12，13和24，则dir在磁盘上的数据是：</p>
<table>
<thead>
<tr>
<th>inum</th>
<th>reclen</th>
<th>strlen</th>
<th>name</th>
</tr>
</thead>
<tbody>
<tr>
<td>5</td>
<td>4</td>
<td>2</td>
<td>.</td>
</tr>
<tr>
<td>2</td>
<td>4</td>
<td>3</td>
<td>..</td>
</tr>
<tr>
<td>12</td>
<td>4</td>
<td>4</td>
<td>foo</td>
</tr>
<tr>
<td>13</td>
<td>4</td>
<td>4</td>
<td>bar</td>
</tr>
<tr>
<td>24</td>
<td>8</td>
<td>7</td>
<td>foobar</td>
</tr>
</tbody>
</table>
<p>删除一个文件会在目录中留下一段空白空间， 一般是将该文件对应条目的inum设为一个保留的inum（例如0）</p>
<p>目录的内容虽然位于数据块，但它一般被认为是<strong>元数据</strong>， 因此在写入日志时，会被当作元数据（而不是物理数据）处理</p>
<h2 id="空闲空间管理"><a class="header-anchor" href="#空闲空间管理"></a>空闲空间管理</h2>
<p>文件系统必须记录哪些inode和数据块是空闲的，这样在分配新文件/新目录时，就可以使用空闲的inode和数据块， 这就是空闲空间管理</p>
<p>VFSFS中使用位图进行空闲空间管理， 然而也有别的方法， 比如空闲列表和B树等</p>
<ul>
<li>空闲列表：（超级块中的有一个空闲指针，指向第一个空闲块，此后每个空闲块内部都有指向下一个空闲块的指针</li>
</ul>
<h2 id="文件访问"><a class="header-anchor" href="#文件访问"></a>文件访问</h2>
<p>假设文件系统已经挂载，要读取文件<code>/foo/bar</code>, 要读取该文件（也就是该文件的数据块），需要先找到该文件的inode， <strong>文件系统必须遍历路径名，才能找到inode， 所有遍历都从文件系统的根目录开始</strong>。 即文件系统会先读入inode为2的块， 然后找到<code>/foo</code>的inumber和块，最后找到<code>/foo/bar</code>的inumber和块</p>
<ul>
<li>一般而言，根目录的inode number为2</li>
<li>这种遍历方式会导致， 访问文件导致的IO与路径长度成正比，路径上的每个目录都会被读取</li>
<li><code>read()</code>系统调用不会查询位图，因为<strong>只有要分配空间时（比如write()）才需要查询分配结构</strong></li>
</ul>
<h2 id="缓存"><a class="header-anchor" href="#缓存"></a>缓存</h2>
<p>如前所述，每次文件访问都会读取路径上的所有目录，为此可以用缓存，将数据保留在内存中， 分为读缓存和写缓存</p>
<ul>
<li>写缓存： 显然，写入数据最终必须要写入磁盘，这看上去和缓存没什么关系。然而，写缓存可以将一组写入操作编成一批（batch）, 再延迟写入， 一次延迟写入就处理一批写操作</li>
</ul>
<p>为了避免缓存，可以用<code>fsync()</code>来强制写入磁盘， 甚至可以不使用文件系统，直接使用原始磁盘接口（<code>raw disk interface</code>）来写入数据（数据库就经常这么干， 因为数据库坚持自己控制一切）</p>
<h1 id="Locality-and-FFS"><a class="header-anchor" href="#Locality-and-FFS"></a>Locality and FFS</h1>
<p><strong>内存是随机访问的，但目前为止的磁盘都是顺序访问的，OS通过抽象，把磁盘抽象成了内存，让程序以为所有空间都是随机访问的，这就导致了某些workload会导致磁盘性能不佳，因为毕竟底层是顺序访问</strong></p>
<p>解决这个问题，需要文件系统面向磁盘设计。为此，Berkley的一个小组设计了FFS（Fast File System），它将磁盘分为一些组，称为柱面组（或称为块组），将两个<strong>有关联</strong>的块放到同一分组，这样访问的时候可以提高效率</p>
<ul>
<li>举例来说，FFS将文件的inode所在块和数据块放在一起（因为这二者必定有关联），避免长时间寻道</li>
<li>“有关联”还可以建立在局部性原理上，例如，FFS将同一目录下的所有文件尽量放在一组，因为按照局部性原理，这些文件被经常一起访问</li>
</ul>
<p>由于大文件无法全部放入一个分组，因此FFS会将某些块（比如inode块）分配到一个组， 而大块房贷单独的分组。这会导致磁盘碎片化。 当然，允许的块越大，这种碎片也就越少</p>
<p>FFS的贡献：</p>
<ul>
<li>引入了面向磁盘的文件系统</li>
<li>引入了软链接</li>
<li>引入了<code>rename()</code>系统调用</li>
</ul>
<h1 id="Crush-Consistency-Problem"><a class="header-anchor" href="#Crush-Consistency-Problem"></a>Crush-Consistency Problem</h1>
<p>崩溃一致性问题 ： 更新持久数据结构时发生崩溃，解决方案有fsck和日志</p>
<p>向文件写数据时，要更新至少三个块：更新的inode（比如，要增加新的指针）， 更新的数据块和更新的数据位图</p>
<p>这三个块的写入操作，无论哪个出问题，都会导致崩溃后不一致</p>
<p>在元数据日志中，我们会看到， 解决崩溃一致性的核心，就是<strong>先写入被指对象，再写入指针对象</strong>，这样能保证数据的正确性</p>
<h2 id="示例"><a class="header-anchor" href="#示例"></a>示例</h2>
<p>示例：对于如下文件系统结构，有一个inode位图，一个数据位图，一个inode表（包含8个inode）和一个数据块表（包含8个数据块）</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Persistence/Crush%20Consistency%20example.png" alt="Crush Consistency example"></p>
<p>（ 这里inode bmap和data bmap实际指向了下标3和5，应该是图画错了 ）</p>
<p>可以看到，已经分配了一个inode（inumber=2），它在inode位图中标记， 单个分配的数据块Da（数据块4）也在数据位图（记为<code>B[v1]</code>， 表示第一个版本)）中标记， inode表示为<code>I[v1]</code>，即该inode的第一个版本，<code>I[v1]</code>的内容有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">owner						:lyk</span><br><span class="line">permissions			:read-write</span><br><span class="line">size						:1</span><br><span class="line">pointer				  :4</span><br><span class="line">pointer:				:null</span><br><span class="line">pointer:				:null</span><br><span class="line">pointer:				:null</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ul>
<li>文件大小为1 （ 有一个数据块 ）， 第一个直接指针指向块4， 且所有其他直接指针都是null</li>
</ul>
<p>假如要向文件追加内容，比如要增加一个数据块， 此时要更新至少三个块：更新的inode（比如，要增加新的指针）， 更新的数据块和更新的数据位图：</p>
<p>我们希望更新后的inode（用<code>I[v2]</code>表示）内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">owner						:lyk</span><br><span class="line">permissions			:read-write</span><br><span class="line">size						:2</span><br><span class="line">pointer				  :4</span><br><span class="line">pointer:				:5</span><br><span class="line">pointer:				:null</span><br><span class="line">pointer:				:null</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ul>
<li>更新后的数据位图(记为<code>B[v2]</code>)要变成： 00001100</li>
<li>新增的数据块记为Db</li>
</ul>
<p>我们希望最终的文件系统如下所示：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Persistence/Crush%20Consistency%20example%20expected%20result.png" alt="Crush Consistency example expected result"></p>
<p>然而，对<code>I[v2]</code>, <code>B[v2]</code>, Db 这三个块的写入操作，无论哪个出问题，都会导致崩溃后不一致</p>
<h2 id="FSCK"><a class="header-anchor" href="#FSCK"></a>FSCK</h2>
<p>File System Checker</p>
<p>一个UNIX工具，在文件系统挂载之前执行， 可以保证，fsck检查结束后，文件系统时一致的</p>
<p>fsc会检查超级块，空闲块，inode状态，inode链接等信息， 事实上，fsck会<strong>扫描整个磁盘</strong>（另一方面，出现不一致的可能只是几个数据块）， 因此fsck的代价非常大</p>
<h2 id="Journalist"><a class="header-anchor" href="#Journalist"></a>Journalist</h2>
<p>Linux的ext2文件系统没有日志 ，日志是由ext3引入的</p>
<p>带有日志的ext3文件系统如下所示：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Persistence/ext3%20with%20journalist.png" alt="ext3 with journalist"></p>
<ul>
<li>可以看到，这里对块/柱面进行了分组</li>
</ul>
<h3 id="Data-Journaling"><a class="header-anchor" href="#Data-Journaling"></a>Data Journaling</h3>
<p>数据日志就是将要更新的物理内容也写进日志里</p>
<p>对于之前的示例，加入数据日志后，文件系统的日志区域如下所示：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Persistence/data%20journaling.png" alt="data journaling"></p>
<p>这里写了五个块：</p>
<ul>
<li>事务开始TxB： 此更新的相关信息，以及事务标识符（TID）</li>
<li>物理日志： 这里占三个块，就是更新的确切物理内容</li>
<li>事务结束TxE： 也会包含TID</li>
</ul>
<p>更新文件系统分为三个步骤：</p>
<ol>
<li>
<p>日志写入： 将食物的内容（包括TxB， 元数据和数据）写入日志，等待这些写入完成</p>
</li>
<li>
<p>日志提交： 将事务提交块（包括TxE）写入日志，事务被认为已提交（committed）</p>
</li>
<li>
<p>加检查点： 将更新内容（元数据和数据）写入磁盘</p>
</li>
<li>
<p>释放： 一段时间后，通过更新日志超级块（不是主文件系统的超级块）， 在超级块中标识该事物为空闲</p>
<ul>
<li>这一步和事务的原子性没有关系，只是为了重用日志空间。日志空间如果满了，就无法提交事务了，因此日志被实现为循环数据结构，一旦事务被加检查点，文件系统就应该释放它在日志中占用的空间，允许重用日志空间
<ul>
<li>要达到这个目的有很多方法，比如在日志超级块中标记最新和最旧的事务</li>
</ul>
</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/OS/OS%20Basic/OS%20Persistence/journaling%20circyling%20journalist.png" alt="journaling circyling journalist"></p>
</li>
</ol>
<p>注意，如果将TxE在日志写入阶段一并提交（即没有日志提交步骤），那么在日志写入阶段发生崩溃时（即将以上五个块发生崩溃时），会出现问题。 因此， <strong>日志总是要分为日志写入和提交两阶段，来确日志的原子性</strong></p>
<p>崩溃恢复：</p>
<ol>
<li>如果在步骤2之前崩溃，那可以跳过这个更新（事务），因为没有该事物的日志，崩溃后的系统根本不知道这个事务的存在</li>
<li>如果在步骤3之前崩溃，系统只需要replay日志中的食物，这称为redo logging</li>
<li>如果在加检查点时发生崩溃，处理方式如步骤2</li>
</ol>
<p>缺点： 数据日志需要将待更新数据写入磁盘两次，一次写入日志空间，一次写入真正的待更新区域，这是巨大的开销，为此，我们一般使用<strong>元数据日志</strong></p>
<h3 id="Metadata-Journaling"><a class="header-anchor" href="#Metadata-Journaling"></a>Metadata Journaling</h3>
<p>元数据日志与数据日志几乎相同，但是物理数据没有写入日志，而是直接写入文件系统</p>
<p>但是，物理数据不能在事务提交后再写入文件系统，否则即使replay日志，也无法恢复数据（因为此时的日志中没有物理数据），所以，应该<strong>首先进行数据写入，这可以保证指针永远不会指向垃圾</strong>， 其核心理念是<strong>先写入被指对象，再写入指针对象</strong>：</p>
<ol>
<li>物理数据写入</li>
<li>日志元数据写入： 将开始块TxB和元数据写入日志</li>
<li>日志提交</li>
<li>加检查点元数据： 将元数据更新的内容写入文件系统</li>
<li>释放</li>
</ol>
<p>元数据日志的缺点是<strong>块复用问题</strong>， 因为目录的内容被当作元数据而不是物理数据，这意味着（在元数据日志中）<strong>目录的内容会放在日志空间</strong>。 假设某目录的内容在日志空间中占用块1000， 随后用户删除该目录，并释放块1000， 最后用户创建了新文件，并复用了块1000（此时该块位于物理数据空间）， 此时，在日志提交后，加检查点完成之前发生了崩溃，在replay阶段， 会重放日志中所有内容， 那么新文件的内容（也就是块1000）就会被恢复为目录的内容！ 这都是因为目录的内容被视作元数据，而不是物理数据，保留在日志空间</p>
<p>Linux ext3点解决方案是加入撤销（revoke）指令，在上例中，删除目录将导致revoke指令被添加到日志，在replay时，被revoke的数据（这里是目录的内容）将不会被重放</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>OS Basic</tag>
      </tags>
  </entry>
  <entry>
    <title>Optimization-Methods-Lecture2</title>
    <url>/2021/09/09/Optimization-Methods-Lecture2/</url>
    <content><![CDATA[<p>Outline：</p>
<ul>
<li><strong>Norms</strong></li>
<li><strong>Analysis</strong></li>
<li><strong>Functions</strong></li>
<li><strong>Derivatives</strong></li>
<li><strong>Linear Algebra</strong></li>
</ul>
<span id="more"></span>
<h1 id="Norms"><a class="header-anchor" href="#Norms"></a><strong>Norms</strong></h1>
<h2 id="Inner-product"><a class="header-anchor" href="#Inner-product"></a>Inner product</h2>
<ul>
<li>
<p>Inner product on R^n^<br>
$$<br>
&lt;x,y&gt;=x^Ty=\sum\limits_{i=1}^{n}x_iy_i \in R^n<br>
$$</p>
</li>
<li>
<p>Euclidean norm, or $l_2$ - norm<br>
$$<br>
||x||_2=(x^Tx)^{1/2}=(x_1^2+\dots+x_n^2)^{1/2}, x \in R^n<br>
$$</p>
</li>
<li>
<p>Cauchy-Schwartz inequality</p>
</li>
</ul>
<p>$$<br>
|x^Ty| \leq ||x||_2||y||_2,x,y \in R^n<br>
$$</p>
<ul>
<li>
<p>Angle between nonzero vectors $x,y \in R^n$<br>
$$<br>
\angle (x,y) = cos^{-1}(\frac {x^Ty}{||x||_2||y||_2}),x,y \in R^n,\angle (x,y) \in (0,\pi<br>
$$</p>
</li>
<li>
<p>Inner product on $R^{m\times n}, X,Y \in R^{m\times n} $​<br>
$$<br>
&lt;X,Y&gt;=\tr (X^TY)=\sum\limits_{i=1}^{m}\sum\limits_{j=1}^{n}X_{ij}Y_{ij}<br>
$$<br>
Here $\tr()$ denotes trace of a matrix</p>
</li>
<li>
<p>Frobenius norm of a matrix $x \in R^{m \times n}$​ 和向量的二范数对应<br>
$$<br>
||X||<em>F = (\tr(X^TX))^{1/2}=(\sum\limits</em>{i=1}^{m}\sum\limits_{j=1}^{n}X_{ij}^2)^{1/2}<br>
$$</p>
</li>
<li>
<p>Inner product on $S^n$<br>
$$<br>
&lt;X,Y&gt;=tr(XY)=\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{n}X_{ij}Y_{ij} = \sum\limits_{i=1}^{n}X_{ii}Y_{ii} + 2 \sum\limits_{i&lt;j}X_{ij}Y_{ij}<br>
$$<br>
Here $S^n$​ denotes symmetrical matrices on $R^{n \times n}$</p>
</li>
</ul>
<hr>
<h2 id="Norms-2"><a class="header-anchor" href="#Norms-2"></a>Norms</h2>
<ul>
<li>
<p><strong>A function</strong> $f: R^n \rarr R$  <strong>with dom</strong> $f = R^n$​ <strong>is called a norm if</strong></p>
<ul>
<li>$f$ is nonnegative: $f(x) \geq 0$  for all $x \in R^n$</li>
<li>$f$ is definite( 正定的 ): $f(x)=0$  only if $x=0$</li>
<li>$f$​ is homogeneous( 同质的 ): $f(tx)=|t|f(x)$ , for all $x \in R^n$​ and $t \in R$​</li>
<li>$f$ satisfies the triangle inequality: $f(x+y) \leq f(x) + f(y)$ , for all $x,y \in R^n$​</li>
</ul>
</li>
<li>
<p><strong>Distance</strong></p>
<ul>
<li>Between vectors $x$ and $y$ as the length of their difference, i.e.,<br>
$$<br>
\mathrm {dist}(x,y) = ||x-y||<br>
$$</li>
</ul>
<p>没有加下标， 表示抽象的范数</p>
<hr>
</li>
<li>
<p><strong>Unit ball</strong></p>
<ul>
<li>
<p>The set of all vectors with norm less than or equal to one,<br>
$$<br>
\Beta = {x \in R^n \mid ||x|| \leq 1}<br>
$$<br>
is called the unit ball of the norm $||\cdot||$  ( 单位球不唯一， 还需要指定一个范数 )</p>
</li>
<li>
<p>The unit ball satisfies the following properties:</p>
<ul>
<li>$\Beta$ is symmetric about the origin, i.e., $x \in \Beta$ if and only if $ -x \in \Beta $</li>
<li>$\Beta$ is convex</li>
<li>$\Beta$ is closed, bounded, and has nonempty interior</li>
</ul>
</li>
<li>
<p>Conversely, if $C \subseteq R^n$​​​ is any set satisfying these three conditions, then it is the unit ball of a norm:<br>
$$<br>
||x|| = (\sup{t \geq 0 | tx \in C})^{-1}<br>
$$</p>
</li>
</ul>
<hr>
</li>
<li>
<p>Spme common norms on $R^n$</p>
<ul>
<li>
<p>Sum-absolute-value, or $l_1$ - norm<br>
$$<br>
||x||_1 = |x|_1 + \dots + |x|_n, x \in R^n<br>
$$</p>
</li>
<li>
<p>Chebyshev or $l_\infty$ - norm<br>
$$<br>
||x||_{\infty} = \max{|x_1|, \dots, |x_n|}<br>
$$</p>
</li>
<li>
<p>$l_p$ - norm, $p \geq 1$<br>
$$<br>
||x||_p = (|x_1|^p + \dots + |x_n|^p)^{1/p}<br>
$$</p>
</li>
<li>
<p>For $P \in S_{++}^n$ ( 对称的 $n \times n$ 的正定矩阵 ), $P$ - quadratic norm is<br>
$$<br>
||x||_P = (x^TPx)^{1/2}=||P^{1/2}x||_2<br>
$$</p>
</li>
</ul>
</li>
<li></li>
</ul>
<hr>
<ul>
<li>
<p>Some common norms on $R^{m \times n}$</p>
<ul>
<li>
<p>Sum-absolute-value norm 对应向量的一范数</p>
<p>$||X||<em>\mathrm{sav} = \sum\limits</em>{i=1}^m\sum\limits_{j=1}^n |X_{ij}|$​</p>
</li>
<li>
<p>Maximum-absolute-value norm 对应向量的无穷范数<br>
$$<br>
||X||<em>{\mathrm{mav}} = \max{ |X</em>{ij}| \mid i=1, \dots,m,j=1,\dots,n }<br>
$$</p>
</li>
</ul>
</li>
<li></li>
</ul>
<hr>
<ul>
<li>
<p><strong>Equivalence of norms</strong></p>
<ul>
<li>
<p>Suppose that $||\cdot||_a$ and $||\cdot||_b$  are norms on $R^n$ ,  there exist positive constants $\alpha$ and $\beta$ ,  for all $x \in R^n$<br>
$$<br>
\alpha ||x||_a \leq ||x||_b \leq ||x||_a<br>
$$</p>
</li>
<li>
<p>if $||\cdot||$  is any norm on $R^n$ ,  then there exists a quadratic norm $||\cdot||_P$ for which<br>
$$<br>
||\cdot||_P \leq ||x|| \leq \sqrt{n}{ ||x||_P }<br>
$$</p>
</li>
</ul>
<p>holds for all $x$</p>
</li>
</ul>
<hr>
<ul>
<li>
<p><strong>Operator norms</strong>  算子范数</p>
<ul>
<li>
<p>Suppose $||\cdot||_a$ and $||\cdot||_b$  are norms on $R^m$ and $R^n$ ,  respectively. Operator norm of $X \in R^{m \times n}$ induced by  $||\cdot||_a$ and $||\cdot||<em>b$​​​  is<br>
$$<br>
||X||</em>{a,b}=\sup{||Xu||_a \mid ||u|| \leq 1}<br>
$$</p>
</li>
<li>
<p>When $||\cdot||_a$   and $||\cdot||_b$  are Euclidean norms, the operator norm of $X$ is its maximum singular value ( 最大奇异值 ) ， and is denoted  $||X||<em>2$<br>
$$<br>
||X||<em>2 = \sigma</em>{\max}(X) = ( \lambda</em>{\max}{ X^TX } )^1/2<br>
$$</p>
</li>
</ul>
<p><strong>Spectral norm</strong>( 谱范数 ) or <strong>$l_2$​ - norm</strong></p>
<ul>
<li>
<p>The norm induced by the $l_{\infty}$​​ - norm on $R^m$​ and $R^n$​​  ,   denoted $||X||<em>\infty$​ is the max-row-sum norm,<br>
$$<br>
||X||</em>\infty = \sup{ ||Xu||<em>\infty \mid ||u||</em>\infty \leq 1 } = \max_{i=1,\dots,m}\sum\limits_{j=1}^{n}|X_{ij}|<br>
$$</p>
</li>
<li>
<p>The norm induced by the $l_1$​​​ - norm on $R^m$​​​ and $R^n$​​​  ,   denoted $||X||<em>1$​​​​ is the max-column-sum norm,<br>
$$<br>
||X||<em>1 = \max</em>{j=1,\dots,n}\sum\limits</em>{i=1}^{m}|X_{ij}|<br>
$$</p>
</li>
</ul>
</li>
<li>
<p><strong>Dual norm</strong> 对偶范数</p>
<ul>
<li>
<p>Let $$||\cdot||$$ be a norm $R^n$</p>
</li>
<li>
<p>The associated dual norm, denoted $||\cdot||<em>*$ ,  is defined as<br>
$$<br>
||z||</em>* = \sup { z^Tx \mid  ||x|| \leq 1 }<br>
$$</p>
</li>
<li>
<p>We have the <strong>inequality</strong><br>
$$<br>
z^Tx \leq ||x|| ||z||<em>* \<br>
\because z^T \frac{x}{||x||} \leq \sup { z^Tx \mid ||x|| \leq 1 } = ||z||</em>* \<br>
\therefore z^Tx=z^T \frac {x}{||x||}\cdot||x|| \leq ||z||_*||x||<br>
$$</p>
</li>
<li>
<p>The dual of Euclidean norm 二范数互为对偶<br>
$$<br>
\sup {z^Tx \mid ||x||_2 \leq 1 } = ||z||_2<br>
$$</p>
</li>
<li>
<p>The dual norm of the $l_{\infty}$ norm 无穷范数的对偶是一范数， 反之亦然<br>
$$<br>
\sup {z^Tx \mid ||x||_{\infty} \leq 1 } = ||z||_1<br>
$$</p>
</li>
<li>
<p>The  dual norm of  the dual norm 对偶范数的对偶范数是其本身<br>
$$<br>
||\cdot||<em>{*</em>{*}} = ||\cdot||<br>
$$</p>
</li>
<li>
<p>The dual norm of $l_p$ - norm is the $l_q$ - norm such that<br>
$$<br>
\frac {1}{p} + \frac {1}{q} = 1<br>
$$</p>
</li>
<li>
<p>The dual of the $l_2$ - norm on $R^{m \times n}$​ is the <strong>nuclear norm</strong>( 核范数 )<br>
$$<br>
||Z||_{2*} = \sup {\tr(Z^TX) \mid ||Z|| \leq 1} \<br>
= \sigma_1(Z) + \dots + \sigma_r(Z) = \tr[ (Z^TZ)^{1/2} ]<br>
$$</p>
</li>
</ul>
</li>
</ul>
<h1 id="Analysis"><a class="header-anchor" href="#Analysis"></a>Analysis</h1>
<ul>
<li>
<p><strong>Interior and Open Set</strong></p>
<ul>
<li>
<p>An element $x \in C \subseteq R^n$ is called an interior point of $C$ if there exists an $\varepsilon &gt; 0$ for which<br>
$$<br>
{y \mid ||y-x||_2 \leq \varepsilon} \subseteq C<br>
$$<br>
i.e., there exists a ball centered at $$x$$ that lies entirely in $C$​ ( 可以用任意范数，只要找到一个范数满足即可 )</p>
</li>
<li>
<p>The set of all points interior to $C$ is called the interior of $C$ and is denoted $\mathrm{int}C$</p>
</li>
<li>
<p>A set $C$ is open if $\mathrm{int}C=C $</p>
</li>
</ul>
</li>
<li>
<p><strong>Closed Set and Boundary</strong></p>
<ul>
<li>
<p>A set $C \subseteq R^n$  is closed if its complement is open<br>
$$<br>
R^n \setminus C = { x \in R^n \mid x \notin C }<br>
$$</p>
</li>
<li>
<p>The closure of a set $C$ is defined as<br>
$$<br>
\mathrm{cl \ } {C} = R^n \setminus \mathrm{int \ }(R^n \setminus C)<br>
$$</p>
</li>
<li>
<p>The boundary of the set $C$ is defined as<br>
$$<br>
\mathrm {bd \ C} = \mathrm { cl \ } C \setminus \mathrm {int \ } C<br>
$$</p>
<ul>
<li>$C$ is closed if it contains its boundary. It is open if it contains no boundary points</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p><strong>Supremun and infimum</strong></p>
<ul>
<li>
<p>The least upper bound or supremum of the set $C$ is denoted $\sup {C}$</p>
</li>
<li>
<p>The greatest upper bound or infimum of the set $C$​ is denoted $\inf {C}$​</p>
</li>
</ul>
<p>$$<br>
\inf C = -(\sup (-C))<br>
$$</p>
</li>
</ul>
<h1 id="Functions"><a class="header-anchor" href="#Functions"></a>Functions</h1>
<ul>
<li>
<p><strong>Notation</strong><br>
$$<br>
f: A \rarr B<br>
$$</p>
<ul>
<li>$\mathrm {dom} f \subseteq A$</li>
</ul>
</li>
<li>
<p><strong>Continuity</strong></p>
<ul>
<li>A function $f:R^n \rarr R^m $​ is continuous at $𝑥 \in \mathrm{dom} \ f$​ if for all $\varepsilon &gt; 0$​ there exists a $\delta$​ such that<br>
   𝑓</li>
<li>is continuous if it is continuous at every point</li>
</ul>
</li>
<li>
<p><strong>Closed functions</strong></p>
<ul>
<li>A function $f:R^n \rarr R $​  is closed if, for each$\alpha \in R$, the sublevel set<br>
$$<br>
{x \in<br>
\mathrm{dom}f \mid f(x) \leq \alpha}<br>
$$<br>
is closed. This is equivalent to $\mathrm{epi}f={ (x,t) \in R^{n+1} \mid x \in \mathrm{dom}f, f(x) \leq t }$ is closed</li>
</ul>
</li>
</ul>
<h1 id="Derivatives"><a class="header-anchor" href="#Derivatives"></a>Derivatives</h1>
<ul>
<li>
<p><strong>Def</strong></p>
<ul>
<li>Suppose $f:R^n \rarr R $​  and $x \in \mathrm {int} \ \mathrm {dom}\ f$​​. The function $f$​ is <strong>differentiable</strong>( 可微的 ) at $x$​​ if there exists a matrix $Df(x) \in R^{m \times n}$​​ that satisfies<br>
$$<br>
\lim\limits_{z \in \mathrm{dom}f, z \neq x, z\rarr x} \frac {||f(z)-f(x)-Df(x)(z-x)||_2}{||z-x||_2}=0<br>
$$<br>
in which case we refer to $Df(x)$ <strong>derivative</strong> (or Jacobian) of $f$ at $x$</li>
</ul>
</li>
<li>
<p>$f$ is <strong>differentiable</strong> if $\mathrm{dom}f$  is open, and it is differentiable at every point</p>
</li>
</ul>
<hr>
<ul>
<li>
<p><strong>Def</strong></p>
<ul>
<li>The affine function( 仿射函数 ) of $z$​ given by<br>
$$<br>
f(x) + Df(x)(z-x)<br>
$$<br>
is called the <strong>first-order approximation</strong> of $f$​ at (or near)  $x$<br>
$$<br>
Df(x)_{ij}= \frac{\partial f_i(x)}{\partial x_j} , i=1,\dots,m,j=1,\dots,n<br>
$$</li>
</ul>
</li>
</ul>
<h2 id="Gradient"><a class="header-anchor" href="#Gradient"></a>Gradient</h2>
<ul>
<li>
<p>When <em>f</em> is real-valued (i.e., $ f:R^n \rarr R $)  the derivative $Df(x)$ is a $1 \times n$​ matrix (it is a row vector). Its transpose is called the <strong>gradient</strong> of the function:</p>
<p>$$<br>
\nabla f(x)=Df(x)^T<br>
$$<br>
which is a column vector (in $R^n$). Its components are the partial derivatives of 𝑓:<br>
$$<br>
\nabla f(x)_i=\frac{ \partial f(x) }{\partial x_i}, i=1,\dots,n<br>
$$</p>
</li>
<li>
<p>The <strong>first-order approximation</strong> of $f$​​​​ at a point $x \in \mathrm {\ {int \mathrm {\ {dom  \ x}}}} $ can be expressed as ( the affine function of $z$​ )<br>
$$<br>
f(x) + \nabla f(x)^T(z-x)<br>
$$</p>
</li>
</ul>
<h2 id="常见凸函数"><a class="header-anchor" href="#常见凸函数"></a>常见凸函数</h2>
<p>$$</p>
<p>$$</p>
<h2 id="常见凹函数"><a class="header-anchor" href="#常见凹函数"></a>常见凹函数</h2>
<ul>
<li>$log$</li>
</ul>
<h2 id="随机变量的期望"><a class="header-anchor" href="#随机变量的期望"></a>随机变量的期望</h2>
<p>概率密度函数pdf概率质量函数pmf</p>
<h2 id="高斯分布-正态分布"><a class="header-anchor" href="#高斯分布-正态分布"></a>高斯分布/正态分布</h2>
<p>$$<br>
x ~ N(\miu, \sigma^2)<br>
$$</p>
<h2 id="混合高斯分布"><a class="header-anchor" href="#混合高斯分布"></a>混合高斯分布</h2>
<p>GMM</p>
<p>样本X的每个维度$X_i$服从一个高斯分布， 假设各个维度间独立同分布</p>
<p>那么我们有混合高斯分布$Z = {Z_1, Z_2, \dots, Z_n}$， 每次从中属性中选择一个维度，计算其高斯分布， 最后计算出所有高斯分布，线性组合起来</p>
<p>两步法：</p>
<h2 id="推荐阅读"><a class="header-anchor" href="#推荐阅读"></a>推荐阅读</h2>
<p>《Convex optimization》</p>
]]></content>
      <categories>
        <category>Mathematics</category>
      </categories>
      <tags>
        <tag>Optimization Methods</tag>
      </tags>
  </entry>
  <entry>
    <title>Package Manager</title>
    <url>/2022/09/13/Package-Manager/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>For Linux</li>
<li>For OSX</li>
<li>For Languages</li>
</ul>
<span id="more"></span>
<h1 id="For-Linux"><a class="header-anchor" href="#For-Linux"></a>For Linux</h1>
<h2 id="apt"><a class="header-anchor" href="#apt"></a>apt</h2>
<p>更新软件源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get upgrade</span><br></pre></td></tr></table></figure>
<p>查看系统已安装的包：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt list --installed </span><br></pre></td></tr></table></figure>
<h2 id="pacman"><a class="header-anchor" href="#pacman"></a>pacman</h2>
<p>同步存储库数据库，并且更新系统的所有软件包，但不包括不在软件库中的“本地安装的”包：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -Syu</span><br></pre></td></tr></table></figure>
<ul>
<li><code>S</code> 代表同步</li>
<li><code>y</code> 代表更新本地存储库</li>
<li><code>u</code> 代表系统更新</li>
</ul>
<h1 id="For-OSX"><a class="header-anchor" href="#For-OSX"></a>For OSX</h1>
<h2 id="brew"><a class="header-anchor" href="#brew"></a>brew</h2>
<p>brew安装的软件位置千奇百怪, 但都会在<code>/opt/homebrew/opt</code>留下软链接</p>
<ul>
<li>事实上, brew可能把</li>
</ul>
<p>安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>查看brew版本:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew --version</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>
<p>查看安装的软件版本:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew info [name]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看某软件的可安装版本:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew search [name]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>brew可以对它安装的软件进行版本切换. 在最新的3.x版本使用<code>link</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew unlink go &amp;&amp; brew link go@1.13</span><br></pre></td></tr></table></figure>
<p>低版本的brew使用的是<code>switch</code>, here is <a href="https://babygoat.github.io/2019/06/19/Golang-mac%E4%B8%8A%E5%88%87%E6%8F%9B%E5%A4%9A%E5%80%8Bgo%E7%89%88%E6%9C%AC/">Doc</a></p>
</li>
</ul>
<hr>
<ul>
<li>
<p>查看brew安装的符号路径: 一般都位于<code>/opt/homebrew/opt</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew  --prefix &lt;package&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看brew安装的软件的实际路径:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew list &lt;package&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="For-Programing-Languages"><a class="header-anchor" href="#For-Programing-Languages"></a>For Programing Languages</h1>
<h2 id="conda"><a class="header-anchor" href="#conda"></a>conda</h2>
<p>推荐<code>miniconda</code>.</p>
<p>直接去NJU MIRROR下载, 以对应Python3.9的miniconda为例:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://mirror.nju.edu.cn/anaconda/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>
<p>对于Arm架构:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://mirror.nju.edu.cn/anaconda/miniconda/Miniconda3-py39_23.1.0-1-Linux-aarch64.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>清华源</li>
</ul>
<p>然后安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash /path/to/miniconda</span><br></pre></td></tr></table></figure>
<p>重启终端，检查安装是否成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">conda -V</span><br></pre></td></tr></table></figure>
<h3 id="换源"><a class="header-anchor" href="#换源"></a>换源</h3>
<p>conda换源建议用nju mirror,  <a href="https://mirrors.nju.edu.cn/help/anaconda">具体指导</a>. ( 其实nju源就是从<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">tuna</a>搬运的, 直接用tuna也可以)</p>
<ol>
<li>
<p>先执行 <code>conda config --set show_channel_urls yes</code> 生成用户目录下的 <code>.condarc</code> 文件( 即<code>~/.condarc</code>)</p>
</li>
<li>
<p>编辑该文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">channels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">defaults</span></span><br><span class="line"><span class="attr">show_channel_urls:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">default_channels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirror.nju.edu.cn/anaconda/pkgs/main</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirror.nju.edu.cn/anaconda/pkgs/r</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirror.nju.edu.cn/anaconda/pkgs/msys2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">custom_channels:</span></span><br><span class="line">  <span class="attr">conda-forge:</span> <span class="string">https://mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class="line">  <span class="attr">msys2:</span> <span class="string">https://mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class="line">  <span class="attr">bioconda:</span> <span class="string">https://mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class="line">  <span class="attr">menpo:</span> <span class="string">https://mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class="line">  <span class="attr">pytorch:</span> <span class="string">https://mirror.nju.edu.cn/anaconda/cloud</span></span><br><span class="line">  <span class="attr">simpleitk:</span> <span class="string">https://mirror.nju.edu.cn/anaconda/cloud</span></span><br></pre></td></tr></table></figure>
<p>即可添加 Anaconda Python 免费仓库。</p>
</li>
<li>
<p>运行 <code>conda clean -i</code> 清除索引缓存，保证用的是镜像站提供的索引。</p>
</li>
<li>
<p>运行 <code>conda create -n myenv numpy</code> 测试一下吧</p>
</li>
</ol>
<h3 id="commands"><a class="header-anchor" href="#commands"></a>commands</h3>
<p>Display Conda environment information:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda info</span><br></pre></td></tr></table></figure>
<p>list all existing  environments.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda env list</span><br></pre></td></tr></table></figure>
<p>Create a new environment</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create --name [project-env] python=3.7</span><br></pre></td></tr></table></figure>
<p><u>The environments created by Anaconda is always located in <code>~/anaconda3/envs/</code>( 对于Miniconda: <code>~/miniconda3/envs/</code>)</p>
<p><u> You may change the default location by using the following command but it is not encouraged.</u> Conda can no longer find your environment by your environment name, you will have to specify the environment’s full path to activate it every time.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create --prefix /path/project-env</span><br></pre></td></tr></table></figure>
<p>Activate your new environment:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda activate project-env</span><br></pre></td></tr></table></figure>
<p>display all packages in this environment:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda list</span><br></pre></td></tr></table></figure>
<p><code>conda list</code> also supports revision history.:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda list --revision</span><br></pre></td></tr></table></figure>
<p>remove the environment:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda env remove --name [project-env]</span><br></pre></td></tr></table></figure>
<h2 id="pip3"><a class="header-anchor" href="#pip3"></a>pip3</h2>
<p>pip是python的一个包管理工具，python2:使用<code>pip</code>, python3使用<code>pip3</code></p>
<ul>
<li>( Python3下使用<code>pip</code> 默认用的是<code>pip3</code> )</li>
</ul>
<h3 id="安装"><a class="header-anchor" href="#安装"></a>安装</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yay -S pip3</span><br></pre></td></tr></table></figure>
<p>mac用户：<code>brew intall pip3</code>相当卡， 因此要用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl bootstrap.pypa.io/get-pip.py | python3</span><br></pre></td></tr></table></figure>
<p>检查安装是否成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 --version</span><br></pre></td></tr></table></figure>
<h3 id="换源-2"><a class="header-anchor" href="#换源-2"></a>换源</h3>
<p>在 pip 命令中使用 <strong>-i</strong> 参数来指定镜像地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install numpy -i https://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>
<p>如果需要配置全局的镜像地址，需要修改配置文件:</p>
<p>Linux/Mac os 环境中，配置文件在 ~/.pip/pip.conf（如不存在创建该目录和文件）：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">mkdir ~/.pip</span><br></pre></td></tr></table></figure>
<p>打开配置文件 <strong>~/.pip/pip.conf</strong>，修改如下：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">[install]</span><br><span class="line">trusted-host = https://mirrors.aliyun.com</span><br></pre></td></tr></table></figure>
<p>查看镜像地址：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip3 config <span class="built_in">list</span>  </span><br></pre></td></tr></table></figure>
<h2 id="npm"><a class="header-anchor" href="#npm"></a>npm</h2>
<h3 id="换源-3"><a class="header-anchor" href="#换源-3"></a>换源</h3>
<p>国内优秀npm镜像：</p>
<p>淘宝npm镜像</p>
<ul>
<li>搜索地址：<a href="https://link.jianshu.com?t=http://npm.taobao.org/">http://npm.taobao.org/</a></li>
<li>registry地址：<a href="https://link.jianshu.com?t=http://registry.npm.taobao.org/">http://registry.npm.taobao.org/</a></li>
</ul>
<p>cnpmjs镜像</p>
<ul>
<li>搜索地址：<a href="https://link.jianshu.com?t=http://cnpmjs.org/">http://cnpmjs.org/</a></li>
<li>registry地址：<a href="https://link.jianshu.com?t=http://r.cnpmjs.org/">http://r.cnpmjs.org/</a></li>
</ul>
<p>1.临时使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">npm install express --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>2.持久使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>配置后可通过下面方式来验证是否成功:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Persian Lessons</title>
    <url>/2021/07/28/Persian%20Lessons/</url>
    <content><![CDATA[<p>二战期间，犹太人吉尔斯在集中营谎称自己是波斯人保命，被一位德国军官看中要求教自己波斯语。对波斯语完全不懂的吉尔斯只能凭空编出一门语言，他开始用集中营中关押的犹太人的名字作为词根，编造出上千个“波斯语”单词，军官在残暴的环境中对吉尔斯竟有了依赖，并开始袒护他，不料集中营中来了一 个真正的波斯人……</p>
<span id="more"></span>
<ul>
<li>导演，包括整部电影的制作都很厉害。画面美学非常优秀。镜头语言冷静克制，叙事节奏从容不迫，很自然地流露出大师水准。尤其是，横向对比<strong>某位中国著名导演</strong>，您的《悬崖之上》是啥玩意儿？ 谍战那么严肃的题材，到张导演手里就和儿戏一样，那镜头语言，又活泼又调皮，不知道的还以为小孩子过家家呢。分镜好听点叫教科书，不好听地说就是一股匠气，和教科书一样死板（同样的死板还有侯孝贤， 不过那位的画面更好看）。还有电影中哈尔滨不科学的繁华程度，堪比21世纪的北京和上海？整个城市街道，大小建筑，“亚细亚电影院”，特务们呆的别墅，还有特务们寻找《梅兰芳游美记》的书店，都窗明几净、<strong>一尘不染地</strong>，甚至书店的地板和家具的包浆都亮晶晶地反着光，您好歹做旧一点呀国师(～￣▽￣)～。</li>
<li>演员很好，不过这类严肃电影的演员素质都不会差到哪里去？（点名批评凯拉奈特莉）再次对比<strong>某著名导演</strong>， <strong>天天让我浩存姐演个纯洁小女孩</strong>，《一秒钟》里让她演，《悬崖之上》还让她演，人家都二十了！ 张导演大概想想借浩存姐来塑造一个黑暗年代的纯洁心灵、 用浩存姐的美丽外表来表达对未来的美好希望？ 这个套路已经用烂了啊喂！ 这些玩意儿您不是用巩俐章子怡关晓彤表现了几十年了么？ 特别是《影》里的关晓彤，典型的黑暗时代下的青年人的形象，和刘浩存在这两部里的作用简直一模一样啊，看张艺谋的电影就和做阅读理解似的，永远的公式化人物。浩存姐能唱歌会跳舞还有演技，一直就让她演个小女孩，真是浪费青春。</li>
<li>回到电影，有一处我很不解，就是旗队长因为前女友说他某方面小，就把人家送去东线的事。当时去东线面对苏军就是送死，所以他实际上因为这件事杀了前女友φ(゜▽゜*)♪ 一直以来我都以为德军只是对敌人的生命很冷漠，影片也极力表现德军在日常生活方面也是有人性的“正常人”，可是前女友说杀就杀，只能说是战争把人性极度扭曲了？ 对生命的冷酷不止体现在对犹太人，事实上是对所有人，只是后者在当时不是要迫害的对象而已。如果希特勒哪天宣布清洗一半的雅利安人，像灭霸那样，估计纳粹们依然能举起屠刀，毕竟漠视生命已经刻到骨子里了</li>
<li>情感表达之细腻，以及与镜头语言的配合之好，一度让人以为吉尔斯和科赫在谈恋爱，电影变成是犹太俘虏伪装成波斯语老师和他的纳粹军官学生谈恋爱的故事。 不过这种紧闭和高压的环境内，一方是俘虏，令一方是军官拥有绝对的暴力和权力，但俘虏又是老师，所以构成了权力的反转，随着剧情深入，军官越来越依赖于俘虏，二者的权力关系不停发生颠倒，能产生类似斯德哥尔摩的情感也很正常，导演在这方面把握得特别好。</li>
<li>吉尔斯对科赫说（编）的第一句波斯语是“你看着夕阳渐渐西沉，但当天突然变暗时，你还是会感到惊讶”， 暗示了二战的背景： 人们都看着纳粹一步步掌权，而直到魔鬼挥舞屠刀的那一刻，才蓦然发觉。</li>
<li>影片很厉害的一点是如何把严肃电影处理得那么好看， 我指的不是靠把画面做得过分美观脱离实际或者依赖演员（<strong>浩存姐</strong>等）的出众颜值，某中国导演才会那么做， <code>Vadim Perelman</code>的做法是把搞笑作为剧情的一部分,而搞笑之后就是恐怖,使得笑话也弥漫起惊悚的灰白色彩.  之前杀前女友的桥段就是一个典型.</li>
<li>德国战败前，有那么多军官想逃走,也非常出人意料。我一直以为德军都是信仰坚定钢铁意志的杀人机器呢.。原来党卫军也会害怕，也会背叛，甚至其中有不少聪明人，知道纳粹不会赢而提前准备跑路。 比如科赫军官，为了给战败之后自己能逃到德黑兰而学波斯语，当时才1942年。最后马克思向上司举报科赫逃走，没想到上司一个比一个溜得快也是够讽刺的。女助理一方面能毫不留情地把用人的手按在烧红的铁板上，只因为自己心情不好； 一方面又能和现男友吐槽自己前任， 在办公室成天摸鱼玩指甲，和现代人一模一样。可见纳粹在许多情况下和普通人没什么分别。</li>
</ul>
]]></content>
      <categories>
        <category>Art</category>
      </categories>
      <tags>
        <tag>Movie</tag>
      </tags>
  </entry>
  <entry>
    <title>Platoon</title>
    <url>/2021/08/18/Platoon/</url>
    <content><![CDATA[<p>泰勒（查理•辛饰）是越战期间的一名美国大学生，他前往越南前线去服兵役，被分到了一个步兵部队。部队里有两个人一直对他影响颇大——伊莱亚斯（威廉•达福饰）和巴恩斯（汤姆•贝伦杰饰）。他们两人对战争的看法截然不同，前者不忍残杀无辜，而后者却杀人如麻，泰勒心里非常迷惑，到底谁对战争的看法才是正确。巴恩斯展开了一场残忍的屠杀，越南整条村落都流血成河。伊莱亚斯力劝好友不要如此残暴，却遭致二人关系的裂缝。巴恩斯更怀疑伊莱亚斯向上司打小报告，友谊变为妒恨。于是，在一次丛林战争中，他背着所有人，向伊莱亚斯扣下了扳机。泰勒却洞察了这一切，他心里终于有了答案。</p>
<span id="more"></span>
<p>主演是《现代启示录》主演的儿子。这两部电影也是我心目中最伟大的电影。《现代启示录》在各方面都是登峰造极的，而《野战排》更现实，更触目惊心，因为它讲了一个在战场上非常“容易发生”的事。</p>
<p>电影最震撼的是士兵们进入越南村庄的那一幕，可怕的暴力，扭曲的人性显露出来。 那一幕又是如此真实，因为我们自己也曾被这样对待。</p>
<p>战争中是没有人性可言的，我看完后反复地在想，有没有解决这个问题的手段，有没有能让人在战争中不失去理智的手段。我想不出来。 可能“战争”本身就是非理性的，所以只要在战争中，理智一定会丧失。 那么这个问题就转化为如何避免战争了。不过我又倾向于认为战争是不可能避免的，而这些血腥和暴力（发动战争和战争中的暴行）的源头都在于人性。 如果人性能够更理智，应该能减少这类事情的发生。 如此一来人类就会变成更温和更冷静的动物，然而动物性永远是人性的一部分，所以黑暗面永远不可能消除。</p>
<p>还有一种办法，那就是剥去人类的所有动物性，其实就是剥去肉体欲望。 欲望无非是人体的各种激素水平的上升。如果脱离了肉体，那么暴力和黑暗应该就能根除。 比如说把脑子独立出来放入一个容器中，其所需的物质都定额供给。其中涉及暴力和欲望的那些激素、物质的水平，全都用硬编码写死，或者设置一个非常严格的上界。但这又引申出另一个问题： 如果人失去了欲望，那人生是为了什么？ 我觉得这不是一个问题，就生物意义上来说，人的生存不过是为了繁衍； 就精神上来说，人生的意义本来就没有答案，“为满足欲望而活着”怎么看都不是正确解。所以这个想法应该是可行的，而且我认为它就是人类（其实已经脱离了肉体上的物种概念了）的未来。 将意识序列化成为编码，这样才能得到永恒和理智。</p>
<p>​	为什么这部电影能让我一路联想到这里？ 因为看完它之后，我内心充斥着对人类的<strong>失望</strong>，极度的失望。偏偏我们都是其中的一份子，电影中的一切都在现实中发生过，且仍在发生着。 欲望在我们每个人身体内存在着，我们还引以为荣，认为这是“人类”概念的一部分。这还是正确的，因为人类就是个生物学概念。 不过想要根除这些东西，想要彻底摆脱这种丑陋、肮脏、罪恶的姿态，摆脱肉体是必须的。</p>
<p>不过，如果连罪恶也摆脱了，那么道德也不复存在，这也无关紧要。我们喜欢的不是道德，而是由遵守道德而获得的喜悦。 这种喜悦，在其他地方也能得到。</p>
<p>这部电影让人感觉，生而为人是多么羞耻的事。《现代启示录》，将人性表述得更抽象，千言万语归为一句话：</p>
<p><em>“黑暗啊，黑暗！”</em></p>
]]></content>
      <categories>
        <category>Art</category>
      </categories>
      <tags>
        <tag>Movie</tag>
      </tags>
  </entry>
  <entry>
    <title>Popular Compilers</title>
    <url>/2022/05/05/Popular%20Compilers/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>GCC</li>
<li>Clang/LLVM</li>
<li>MinGw</li>
<li>Crgwin</li>
<li>MSVC</li>
</ul>
<span id="more"></span>
<h1 id="GCC"><a class="header-anchor" href="#GCC"></a>GCC</h1>
<p><a href="https://gcc.gnu.org/">Official</a></p>
<ul>
<li>GCC： GNU Compiler Collection，是GNU开发的编译器， 用于Unix &amp;&amp; Unix like的OS
<ul>
<li>原名为GNU C Compiler，因为它原本只能处理C. 经过发展，现在的GCC已经可以处理如下语言:
<ul>
<li><a href="https://gcc.gnu.org/c99status.html">C</a>,</li>
<li><a href="https://gcc.gnu.org/projects/cxx-status.html">C++</a>,</li>
<li>Objective-C</li>
<li><a href="https://gcc.gnu.org/fortran/">Fortran</a></li>
<li>Ada</li>
<li>Go</li>
<li>D</li>
</ul>
</li>
<li>GCC是Linux和BSD家族的OS的标准编译器。 OSX用的是apple clang
<ul>
<li>一般来讲，符号链接<code>cc</code>指向了平台的默认编译器. Linux上<code>cc</code>指向gcc, OSX上指向的是clang</li>
</ul>
</li>
<li>gcc配套的调试工具是gdb, 使用的链接器是<code>ld</code>, 一般用<code>make</code>构建</li>
<li>gcc生成的代码<strong>不跨平台</strong></li>
</ul>
</li>
</ul>
<h2 id="Command-Options"><a class="header-anchor" href="#Command-Options"></a>Command Options</h2>
<p><a href="https://web.mit.edu/rhel-doc/3/rhel-gcc-en-3/invoking-gcc.html#:~:text=GCC%20Command%20Options%20When%20you%20invoke%20GCC%2C%20it,consists%20of%20object%20files%20output%20by%20the%20assembler.">官网 GCC Command Options</a></p>
<h3 id="Overall-Options"><a class="header-anchor" href="#Overall-Options"></a>Overall Options</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc [option] [file]</span><br></pre></td></tr></table></figure>
<ul>
<li>注意，<code>[option]</code>和<code>[file]</code>中间可以不加空格，比如可以<code>gcc -l[library]</code></li>
<li><code>gcc xx.c</code>默认会把文件输出到当前目录下的<code>a.out</code></li>
<li><code>gcc</code>编译cpp文件时只会默认链接C标准库，不默认链接CPP标准库. 因此编译CPP文件需要加选项<code>-lstdc++</code>, 要么就使用<code>g++</code>编译</li>
<li>编译完之后，用其他的机器调试可能是不行的，因为file的路径一般是不一样的。</li>
</ul>
<table>
<thead>
<tr>
<th>option</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-c</code></td>
<td>只汇编不链接，生成可重定向目标文件<code>.o</code></td>
</tr>
<tr>
<td><code>-S</code></td>
<td>只编译不汇编，生成汇编代码<code>.s</code></td>
</tr>
<tr>
<td><code>-E</code></td>
<td>只预处理不编译，生成预处理后文件<code>.i</code></td>
</tr>
<tr>
<td><code>-o [file]</code></td>
<td>将编译后文件输出到[file]</td>
</tr>
<tr>
<td><code>-v</code></td>
<td>打印编译器内部各编译过程的命令行信息</td>
</tr>
<tr>
<td><code>-DMACRO[=DEFN]</code></td>
<td>定义MACRO宏(针对#define)</td>
</tr>
<tr>
<td><code>--help</code></td>
<td></td>
</tr>
<tr>
<td><code>--version</code></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="Options-for-Debugging"><a class="header-anchor" href="#Options-for-Debugging"></a>Options for Debugging</h3>
<table>
<thead>
<tr>
<th>option</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-g</code></td>
<td>在每一个编译完的二进制码上打上文件名和行号的标签，供gdb使用</td>
</tr>
<tr>
<td><code>-O/On[n]</code></td>
<td>在程序编译、链接过程中进行优化处理. 0 级不优化,默认是2级. 优化和调试不兼容，所以不要同时使用-g 和-O 选项</td>
</tr>
<tr>
<td><code>-D</code></td>
<td>在预处理时添加#define指令, 比如<code>-DAA=2</code>相当于在添加了<code>#define AA 2</code></td>
</tr>
</tbody>
</table>
<ul>
<li>编译优化：
<ol>
<li>对于不同版本的gcc，<code>n</code>的取值范围及其对应的优化效果可能并不完全相同，比较典型的范围是0-2或0-3.</li>
<li>不同的优化级别对应不同的优化处理工作。例如：优化选项“-O1”主要进行线程跳转和延迟退栈两种优化；优化选项“-O2”除了完成所有的“-O1”级别的优化之外，还要进行一些额外的调整工作，例如处理器指令调度等；优化选项“-O3”则还包括循环开展和其他一些与处理器特性相关的优化工作。</li>
</ol>
</li>
<li>源代码的语句编译成的汇编码可能是多条语句，是一对多的关系</li>
<li>调试器：在执行编译后的二进制码，二进制码会被打标签，记录哪一个源代码的哪一行编译而来的。</li>
<li>调试的时候仍然使用的是本地编译好的二进制文件</li>
</ul>
<h3 id="Options-for-Directory-Search"><a class="header-anchor" href="#Options-for-Directory-Search"></a>Options for Directory Search</h3>
<table>
<thead>
<tr>
<th>option</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-Idir</code></td>
<td>在<strong>头文件</strong>的搜索路径列表中添加dir目录, 其优先级比系统头文件目录高. 如果有多个 <code>-I</code> 选项，按从左到右的顺序搜索，最后才是系统头文件目录</td>
</tr>
<tr>
<td><code>-iquotedir</code></td>
<td>和<code>-I dir</code>相同，但只对用引号括起来的头文件有效，如<code>#include &quot;file&quot;;</code></td>
</tr>
<tr>
<td><code>--sysroot dir</code></td>
<td>用 <code>dir</code> 作为头文件和库的根目录, 例如, 如果编译器正常情况下在<code>/usr/include</code> 找头文件，在 <code>/usr/lib</code> 中找库文件, 开启该选项之后，更改为<code>dir/usr/include and dir/usr/lib</code></td>
</tr>
<tr>
<td><code>-Ldir</code></td>
<td>在<strong>库文件</strong>的搜索路径列表中添加dir目录</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="Options-for-Linking"><a class="header-anchor" href="#Options-for-Linking"></a>Options for Linking</h3>
<table>
<thead>
<tr>
<th>option</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-static</code></td>
<td>只链接静态库</td>
</tr>
<tr>
<td><code>-shared</code></td>
<td>这是默认选项. 链接静态和动态库, 动态库优先</td>
</tr>
<tr>
<td><code>-l [library]</code></td>
<td>链接名为[library]的库文件. <code>-l</code>和<code>[library]</code>之间可以没有空格. 比如<code>-lm</code>就链接了名为<code>libm.a</code>的库文件</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="Options-for-Warning"><a class="header-anchor" href="#Options-for-Warning"></a>Options for Warning</h3>
<table>
<thead>
<tr>
<th>option</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-Wall</code></td>
<td>会在标准输出上打印warning信息</td>
</tr>
<tr>
<td><code>-w</code></td>
<td>关闭所有warning</td>
</tr>
<tr>
<td><code>-werror</code></td>
<td>把所有的warning信息转换为错误信息，并在warning发生时终止编译过程</td>
</tr>
</tbody>
</table>
<h3 id="Options-for-Archtecture"><a class="header-anchor" href="#Options-for-Archtecture"></a>Options for Archtecture</h3>
<table>
<thead>
<tr>
<th>option</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>-mieee-fp/-mno-ieee-fp</td>
<td>使用/不使用IEEE标准进行浮点数的比较</td>
</tr>
<tr>
<td>-msoft-float</td>
<td>输出包含浮点库调用的目标代码</td>
</tr>
<tr>
<td>-mshort</td>
<td>将int类型作为16位处理，相当于short int</td>
</tr>
<tr>
<td>-mrtd</td>
<td>强行将函数参数固定的函数用ret NUM返回，节省调用函数的一条指令</td>
</tr>
<tr>
<td>-mcpu=type</td>
<td>针对不同的CPU使用相应的CPU指令。可选择的type有i386、i486、pentium、i686等</td>
</tr>
</tbody>
</table>
<h2 id="Searching-Header-File"><a class="header-anchor" href="#Searching-Header-File"></a>Searching Header File</h2>
<p>gcc 在编译时查找头文件的顺序：</p>
<ol>
<li>
<p>先查找<code>-I</code>指定的目录</p>
</li>
<li>
<p>然后找gcc的环境变量 <code>C_INCLUDE_PATH</code>，<code>CPLUS_INCLUDE_PATH</code>，<code>OBJC_INCLUDE_PATH</code></p>
</li>
<li>
<p>再找默认目录(取决于OS，有些OS中这些目录不存在)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/include</span><br><span class="line">/usr/local/include</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>gcc的一系列自带目录, 例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/include/c++/4.8.5</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Searching-Library-File"><a class="header-anchor" href="#Searching-Library-File"></a>Searching Library File</h2>
<p>库文件就是编译好的二进制文件(<code>.o</code>)， 相比头文件，使用库文件可以避免暴露源代码，并且减少编译时间。 对库文件的链接分为静态链接和动态链接</p>
<p>gcc 在编译时查找库文件的顺序：</p>
<ol>
<li>
<p>先查找<code>-L</code>指定的目录</p>
</li>
<li>
<p>再找gcc的环境变量<code>LIBRARY_PATH</code></p>
</li>
<li>
<p>再找默认目录( 同上，取决于OS)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/lib</span><br><span class="line">/lib64</span><br><span class="line"></span><br><span class="line">/usr/lib</span><br><span class="line">/usr/lib64</span><br><span class="line"></span><br><span class="line">/usr/local/lib</span><br><span class="line">/usr/local/lib64</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="g"><a class="header-anchor" href="#g"></a>g++</h2>
<p><code>g++</code>: GNU的CPP编译器，其实就是把<code>gcc</code>的前端换掉，后端不变</p>
<ul>
<li>
<p>gcc会根据文件后缀名<code>.c/.cpp</code>将文件分别当作C/CPP来编译. <code>g++</code>统一将文件当作CPP编译</p>
</li>
<li>
<p><code>gcc</code>编译cpp文件时只会默认链接C标准库，不默认链接CPP标准库. <code>g++</code>默认页链接CPP标准库</p>
</li>
<li>
<p><code>g++</code>的命令选项和<code>gcc</code>相同</p>
</li>
</ul>
<h1 id="Clang-LLVM"><a class="header-anchor" href="#Clang-LLVM"></a>Clang/LLVM</h1>
<p><a href="https://clang.llvm.org/">Clang官网</a></p>
<ul>
<li>
<p>Clang+LLVM： LLVM是一个可以<strong>跨平台</strong>的编译器后端。 Clang是支持LLVM的编译器前端。Clang+LLVM组合是一个完整的编译器tool chain（暴打gcc）</p>
<ul>
<li>
<p>Clang：Clang是LLVM的C, Objective-C, and C++语言的前端，且也只支持这几种语言</p>
</li>
<li>
<p>Clang/LLVM使用的调试工具是<code>LLDB</code>,  链接器是<code>lld</code>, 构建工具是<code>CMAKE</code></p>
</li>
<li>
<p><strong>clang和clang++的关系相当于gcc和g++的关系</strong>，一般我们用clang++编译CPP，当然也可以用<code>clang -lstdc++</code></p>
</li>
<li>
<p>OSX上的clang是Apple Clang， 这是个clang的发行版，具体有啥区别我也不知道</p>
</li>
</ul>
</li>
</ul>
<h2 id="Clang-LLVM-vs-gcc"><a class="header-anchor" href="#Clang-LLVM-vs-gcc"></a>Clang/LLVM vs gcc</h2>
<ul>
<li>clang的调试信息非常简洁明了，gcc尽管随着不断发展，也在这方面赶上clang，但还有一定差距</li>
<li>clang/LLVM的源代码用CPP书写，结构清晰, 几乎是编译器架构的教科书。 gcc是C写的，而且用了一种类似Lisp的编程范式，有大量的元编程，非常难懂</li>
<li>对于CPP文件，clang的编译速度比gcc快。 不过对于c文件，二者没什么差别。</li>
<li>Linux内核的代码里面有很多奇奇怪怪的语法，是和gcc妥协写的，clang目前好像还不能编译linux内核。 另外，对于CPP模板元编程的报错信息，clang比gcc优雅很多</li>
</ul>
<table>
<thead>
<tr>
<th>Criteria</th>
<th>gcc</th>
<th>Clang/LLVM</th>
</tr>
</thead>
<tbody>
<tr>
<td>License</td>
<td>GNU GPL</td>
<td>Apache 2.0</td>
</tr>
<tr>
<td>Supported language standards</td>
<td>C++23 in experimental stage, C++20 fully complaint.  <a href="https://gcc.gnu.org/projects/cxx-status.html">gcc官网上的CPP标准支持情况</a></td>
<td>C++17 support available. C++20和23都只是部分支持 <a href="https://clang.llvm.org/cxx_status.html">Clang官网上的CPP标准支持情况</a></td>
</tr>
<tr>
<td>Generated Code Characteristics</td>
<td>Efficient with a lot of compiler options to play around with</td>
<td>Efficient due to the SSA form used by LLVM backend</td>
</tr>
<tr>
<td>Language independent type system</td>
<td>No</td>
<td>Yes (One of the design goal for LLVM)</td>
</tr>
<tr>
<td>Build tool</td>
<td>Make based</td>
<td>CMake</td>
</tr>
<tr>
<td>Parser</td>
<td>Previously Bison LR. Now recursive descent.</td>
<td>Hand-written recursive descent</td>
</tr>
<tr>
<td>Linker</td>
<td>LD</td>
<td>lld</td>
</tr>
<tr>
<td>Debugger</td>
<td>GDB</td>
<td>LLDB</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>查看编译器支持的CPP标准:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>                                                                                                                                                                                                using namespace std;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">//也有人会打印__STDC_VERSION__, 但这个宏不是被所有编译器支持的， 比如g++就不支持</span></span><br><span class="line">  cout &lt;&lt; __cplusplus &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clang++ test.cpp -lstdc++ -o test &amp;&amp; ./test</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">g++ test.cpp -lstdc++ -o test &amp;&amp; ./test</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>截至目前，Gcc对CPP23标准的支持只是实验性的，参见官网:</p>
<blockquote>
<p>C++23 features are available since GCC 11. To enable C++23 support, add the command-line parameter <code>-std=c++2b</code> to your <code>g++</code> command line. Or, to enable GNU extensions in addition to C++23 features, add <code>-std=gnu++2b</code>.</p>
<p><strong>Important</strong>: Because the ISO C++23 standard is still evolving, GCC's support is <strong>experimental</strong>. No attempt will be made to maintain backward compatibility with implementations of C++23 features that do not reflect the final standard.</p>
</blockquote>
</li>
</ul>
<h2 id="LLVM-Basic"><a class="header-anchor" href="#LLVM-Basic"></a>LLVM Basic</h2>
<p>创建一个C语言文件test.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hello world\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>编译生成可执行文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clang test.c -o <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>运行可执行文件</p>
</li>
<li>
<p>生成llvm字节码文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clang -O1 -emit-llvm test.c -c -o test.bc</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>生成LLVM 的汇编代码 .ll 文件(可视化字节码文件):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">clang -O1 -emit-llvm test.c -S -o test.ll</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>运行字节码文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lli test.bc</span><br></pre></td></tr></table></figure>
<p>.ll文件也可以用lli来执行</p>
</li>
<li>
<p>将 .bc 文件转化为 .ll 文件:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">llvm-dis test.bc</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将 .ll 文件转化为 .bc 文件:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">llvm-as test.ll</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>编译字节码文件为汇编文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">llc test.bc -o test.s</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将 .bc 或 .ll 文件转化为本机平台的汇编代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">llc test.bc</span><br><span class="line">llc test.ll</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>``</p>
<p>``</p>
<p><code>  </code></p>
<h1 id="MinGw"><a class="header-anchor" href="#MinGw"></a>MinGw</h1>
<p>MinGW: Minimalist GNU For Windows. Window平台的编译器, 事实上它不只是一个编译器, 还包含了Linux(事实上是GNU)的一系列工具(包括编译器GCC和开发工具gawk, bison等),  使用MinGw可以在Win上使用类似Linux的开发工具链来构建Windows应用. 而且交叉编译Linux和WIndows代码也更方便</p>
<ul>
<li>MinGw包含了一系列头文件和库文件, 允许人们在没有第三方动态链接库的情况下使用 GCC（GNU Compiler C）产生 Windows32 程序。</li>
<li></li>
<li>MinGW把源码中Unix-like OS API调用通过头文件翻译替换成相应的Windows API调用的编译环境</li>
<li>MinGW与Linux下广泛使用的GNU近乎完全兼容，这意味着，在Linux下如何编译源代码，在MinGW中也可以以完全相同的方式编译. 本质上讲，MinGw是为了给那些因为不喜欢使用Unix/Unix like而使用WIn的人一个和GNU大体相符的编译环境的</li>
</ul>
<h1 id="Cygwin"><a class="header-anchor" href="#Cygwin"></a>Cygwin</h1>
<ul>
<li>Cygwin: 一个Windows下Unix-like模拟环境，具体说就是Unix-like接口（OS API，命令行）重定向层，其目的是不修改软件源码仅重新编译就可以将Unix-like系统上的软件移植到Windows上（这个移植也许还算不上严格意义上的无缝移植）
<ul>
<li>Cygwin是让Windows拥有Unix-like环境的软件, 它里面安装了GCC, 作为其编译器</li>
<li>Cygwin可以比MingW移植更多的软件到Windows上，对Linux接口模拟比MingW全面</li>
<li>Cygwin模拟的Unix-like环境依然不是真实的Unix-like环境， 比如说，Cygwin依然只能打开exe文件，没法打开elf文件</li>
</ul>
</li>
</ul>
<h1 id="MSVC"><a class="header-anchor" href="#MSVC"></a>MSVC</h1>
<ul>
<li>MSVC: 微软开发的WIndows native的编译器和运行时, MSVC只能编译出WIndows平台的应用</li>
</ul>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
      <tags>
        <tag>Compilers</tag>
      </tags>
  </entry>
  <entry>
    <title>Programming Language Basic</title>
    <url>/2022/09/13/Programming-Language-Basic/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>The Static/Dynamic Distinction</li>
<li>Environments and States</li>
<li>Name</li>
<li>Variable</li>
<li>...</li>
</ul>
<span id="more"></span>
<h1 id="The-Static-Dynamic-Distinction"><a class="header-anchor" href="#The-Static-Dynamic-Distinction"></a>The Static/Dynamic Distinction</h1>
<p>If a language uses a policy that <u>allows the compiler to decide an issue</u> then we say that the language uses a <strong>static</strong> policy or that the issue can be decided <u>at compile time</u>.</p>
<ul>
<li>static: 某件事在编译期就被决定</li>
<li>dynamic: 在运行期就被决定</li>
</ul>
<p>以上是抽象的static/dynamic概念, 一个语言可以在一个方面是static的, 另一个方面又是dynamic的.</p>
<p>例如:</p>
<ul>
<li>
<p>对于Type System, 静态类型语言的类型在编译期就决定, 而动态类型语言的类型在运行期才能决定.</p>
<ul>
<li>事实上, 由于类型系统最受关注, 我们叙述一门语言特性的时候, 经常省略掉定语“类型系统”, 直接说“XX语言是静态/动态的”.</li>
</ul>
</li>
<li>
<p>对于变量的内存分配, 如果一个变量是静态变量( <code>static</code> variable  in Java ):</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foo</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>变量<code>x</code>的内存分配已经确定了, 所有<code>Foo</code>的instance都共享这一个变量.</p>
</li>
</ul>
<h1 id="Environments-and-States"><a class="header-anchor" href="#Environments-and-States"></a>Environments and States</h1>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Compilers/Programming%20Language%20Basic/Environments%20and%20States.png" alt="Environments and States"></p>
<ul>
<li>
<p>name就是代码文本中的变量名; variable就是程序运行时的变量, 它实际上是一块具有值的内存的location, 是一个指针; value是指针value所指向的内存的值;</p>
<ul>
<li>我们通常将variable称为左值<code>lvalue</code>; value称为右值<code>lvalue</code>.</li>
<li>因此, <strong>所有PL的变量都是引用. variable就是一个指向value的指针</strong></li>
<li>“赋值”就是建立variable-&gt;value的映射</li>
</ul>
</li>
<li>
<p>environment: 从<strong>name</strong>到<strong>variable</strong>的映射.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">1</span>;<span class="comment">//假设variable x对应内存0x1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> x = <span class="number">3</span>;<span class="comment">//假设variable x对应内存0x2</span></span><br><span class="line">	cout &lt;&lt; x &lt;&lt; endl;<span class="comment">//使用name x. 根据environment, name x绑定到局部变量0x2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>f()</code>的scope内有variable <code>0x1</code>, <code>0x2</code>, 都绑定到name x. 而在使用name x时, 根据预先设定的environment, name x被绑定到变量<code>0x2</code>, 这就是变量覆盖.</p>
<p><code>f()</code>外的name x被environment映射到变量<code>x = 31</code>.</p>
<ul>
<li>绝大多数PL的environment是<strong>动态</strong>的, 否则也无法区分同一作用域内同名的不同变量了.</li>
</ul>
</li>
<li>
<p>state: 从<strong>location</strong>到<strong>value</strong>的映射, 即<strong>赋值</strong>.</p>
<ul>
<li>
<p>大部分PL的state是<strong>动态</strong>的, 因为只有程序运行时才能得到value. 但也有<strong>编译期决定的值,</strong> 也就是静态的state, 比如const:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const a = 1000</span><br></pre></td></tr></table></figure>
<p>这里<code>a</code>的值在编译期就决定了, 是1000.</p>
</li>
<li>
<p>当然, Macro的值也是编译器决定的:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ARRAYSIZE 1000</span></span><br></pre></td></tr></table></figure>
<p>不过,macro不是变量, 只是个文本替换而已, 不能纳入name - variable - value的范畴</p>
</li>
</ul>
</li>
</ul>
<h1 id="Name"><a class="header-anchor" href="#Name"></a>Name</h1>
<h2 id="name"><a class="header-anchor" href="#name"></a>name</h2>
<ul>
<li>name: 这里的name是抽象的概念, 它指程序中的<strong>一段有意义的文本</strong>.<br>
$$<br>
\mathrm{name} = { \mathrm{variable \  name}, \mathrm{macro \  name}, \mathrm{expression \  name}, \mathrm{keyword} }<br>
$$</li>
</ul>
<h2 id="identifer"><a class="header-anchor" href="#identifer"></a>identifer</h2>
<ul>
<li>
<p>identifer: name的子集, 它的文本是<u>符号</u>形式的, 标识了一个程序中的<strong>实体</strong><br>
$$<br>
\mathrm{identifer} = { \mathrm{variable \  name}, \mathrm{macro \  name} }<br>
$$</p>
<ul>
<li>
<p>identifer不包括expression name, 因为expression name是一段文本而不是一个符号; 也不包括<code>keyword</code>, 因为<code>keyword</code>并不标识什么实体, 在编程模型中也不发挥什么作用.</p>
</li>
<li>
<p>例如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span>&#123;</span><br><span class="line">Foo foo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Bar</span> <span class="variable">bar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bar</span>();</span><br><span class="line">bar.foo; <span class="comment">//expression name</span></span><br></pre></td></tr></table></figure>
<p>这里的<code>bar</code>和<code>foo</code>都是variable name( identifer ), 但<code>bar.foo</code>是一个expression name</p>
</li>
</ul>
</li>
</ul>
<h2 id="macro-name"><a class="header-anchor" href="#macro-name"></a>macro name</h2>
<ul>
<li>macro name: macro的文本名字, 由于macro是预处理器面对的东西, 是一个文本上的替换, 对编译器是透明的, 对于程序而言不算“真正的”实体. 因此macro不属于变量, macro name也不是variable name.</li>
</ul>
<h2 id="variable-name"><a class="header-anchor" href="#variable-name"></a>variable name</h2>
<ul>
<li>
<p>variable name: 变量的文本名字, 它和identifier的唯一区别就是不含macro name.</p>
<ul>
<li>
<p>严格地说, 由于name只对编译器有用, 变量名作为一个文本, 其用处就是帮助编译器找到对应的变量. 从这个意义上讲, <u>变量名其实要包括变量的类型,</u></p>
<ul>
<li>对于普通变量:</li>
</ul>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">1</span>; </span><br><span class="line"><span class="type">double</span> y = <span class="number">0.43</span></span><br></pre></td></tr></table></figure>
<p>具体的变量名应该是<code>int x</code>, <code>double y</code></p>
<ul>
<li>对于函数, 它的变量名就是Function Signature.</li>
</ul>
</li>
<li>
<p>当然这样讲太啰嗦了, 因此通常我们就说变量名时不说类型.</p>
</li>
</ul>
</li>
</ul>
<h1 id="Variable"><a class="header-anchor" href="#Variable"></a>Variable</h1>
<ul>
<li>
<p>variable: 这里的“变量”是比较抽象的说法, 它是一块具有值的内存的location( 也就是一个地址/指针 ), 或者说左值<code>lvalue</code>. 因此任何在内存中实际存在, 或者说对程序可见的“实体”都可以称为“变量”. ( Macro在编译前就被替换了,  也无所谓什么内存, 肯定不是变量  ).</p>
</li>
<li>
<p>注意, <strong>“变量是指针”<strong>这个说法比较拗口. 所以我们一般就</strong>用变量指向的值来代表该变量</strong>, 也就是说一般省略掉“变量是指针”这一事实</p>
<ul>
<li>比如对于<code>int x = 3</code>, 我们就说<code>x</code>是个int类型的变量. 不会说“<code>x</code>是个lvalue, 它指向的rvalue是int类型的3”</li>
<li>同理, 对于<code>int *p = new Obj()</code>, 我们就说<code>p</code>是个指针变量, 不会说&quot;<code>p</code>是个lvalue, 它指向的rvalue是一个指针, 该指针又指向了对象&quot;</li>
<li>对于Java这样的“所有变量都是引用(指针)”的语言, 我们就说某某变量是个引用, 不会说“该变量是个lvalue, 它指向的rvalue是一个指针, 该指针又指向了对象”</li>
</ul>
</li>
<li>
<p>常规的“变量”:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p><code>x</code>是个变量名, 它被environment映射到一个具体的变量( OR location), 为了叙述方便, 我们通常直接说&quot;变量<code>x</code>&quot;.</p>
<ul>
<li>我们使用变量名<code>x</code>, 也就是通过它找到对应的那个<strong>变量</strong>或者说<strong>左值</strong>, 为了方便我们就将其称为<strong>变量<code>x</code></strong>,  它就是个地址, 我们需要使用它的内容, 也就是它对应的右值value.</li>
</ul>
</li>
<li>
<p><strong>函数</strong>也可以看作变量:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ARRAYSIZE 1000</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">f</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="type">int</span> x = ARRAYSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>f</code>是一个变量名, 当然严谨地说, 它的name是它的函数signature: <code>void f()</code>. 和常规的“变量”一样, 我们定义一个函数时, 会创建这个函数名对应的实体( 为了方便, 该实体就称为函数<code>f</code> ), 并为其分配内存.</p>
</li>
<li>
<p>在将类型作为first-class member的语言中, <strong>类型</strong>也可以看做变量, 例如在Zig中:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const std = @import(&quot;std&quot;);</span><br><span class="line">const assert = std.debug.assert;</span><br><span class="line"></span><br><span class="line">test &quot;types are values&quot; &#123;</span><br><span class="line">    const T1 = u8;</span><br><span class="line">    const T2 = bool;</span><br><span class="line">    assert(T1 != T2);</span><br><span class="line"></span><br><span class="line">    const x: T2 = true;</span><br><span class="line">    assert(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const std = @import(&quot;std&quot;);</span><br><span class="line"></span><br><span class="line">fn List(comptime T: type) type &#123; //类型可以作为参数和返回值传递</span><br><span class="line">    return struct &#123;</span><br><span class="line">        items: []T,</span><br><span class="line">        len: usize,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pub fn main() void &#123;</span><br><span class="line">    var buffer: [10]i32 = undefined;</span><br><span class="line">    var list = List(i32)&#123;</span><br><span class="line">        .items = &amp;buffer,</span><br><span class="line">        .len = 0,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    std.debug.print(&quot;&#123;d&#125;\n&quot;, .&#123;list.items.len&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到, Zig中所有的基本数据类型, 和用户自定义<strong>类型</strong>, 都是**<code>type</code>类型的变量**, 类型甚至可以作为参数和返回值传递. 这就把类型和变量的地位等同起来了.</p>
</li>
</ul>
<h1 id="Assignment-and-getValue"><a class="header-anchor" href="#Assignment-and-getValue"></a>Assignment and getValue</h1>
<p>变量其实是一个指针,  是一个lvalue.</p>
<ul>
<li>
<p>变量的<strong>赋值</strong>, 也就是把一个rvalue copy到变量( 即lvalue )指向的空间, 即将原有的rvalue擦除，而以一个新值来替代.</p>
<ul>
<li>为了方便, 我后面还会说“将variable A复值为value X”, 意思就是把value X copy到variable A指向的空间</li>
</ul>
</li>
<li>
<p>变量的<strong>取值</strong>, 就是把变量( 即lvalue)所指向的空间的rvalue取出来.</p>
<ul>
<li>注意, 只有lvalue可以取值, rvalue本身就是值.</li>
<li>我们所谓的“使用变量”, 其实是<strong>使用变variable向的value</strong>, 也就是lvalue对应的rvalue. 所以“使用变量”要先对变量取值</li>
</ul>
</li>
<li>
<p>例子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int x = 3; //变量赋值</span><br><span class="line"></span><br><span class="line">sum(x, 5); //使用变量</span><br></pre></td></tr></table></figure>
<ol>
<li>把rvalue 3 copy到了变量<code>x</code>指向的空间. 以后访问lvalue <code>x</code>, 得到的值就是3</li>
</ol>
</li>
</ul>
<h1 id="Declaration-Definition-and-Initialization"><a class="header-anchor" href="#Declaration-Definition-and-Initialization"></a>Declaration, Definition and Initialization</h1>
<p>声明和定义都是对变量而言. 表达式是个rvalue, 不存在“声明”, 都是“定义”.</p>
<p>对于C/CPP而言, Declaration, Definition and Initialization有明确区分, 对于其他语言就不一定了.</p>
<ul>
<li>
<p>Declaration: 使一个variable name为程序所知, 并且规定其<u>type</u></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> x; <span class="comment">// 在c/cpp中, 需要加extern来做到只声明不定义</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Definition: 真的创建该variable, 即为该变量申请一块内存.</p>
<ul>
<li>
<p>定义时, <strong>变量会被赋值</strong>, <strong>此时的赋值称为“初始化”.</strong></p>
<ul>
<li>
<p>可以手动赋值, 也就是“显示初始化”:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">1</span>; <span class="comment">// 声明并定义, 并显式初始化</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> k = <span class="number">1</span><span class="comment">//声明并定义k.  任何包含了显式初始化的声明即成为定义，这样写语法上没错，但会抵消extern的作用</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>也可以不手动赋值,则会“隐式初始化”, 其赋的值要取决于具体情况:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x; <span class="comment">// 声明并定义, 不显式初始化</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>很多时候我们把声明和定义写在一起. 为了方便, <strong>声明+定义统称为定义</strong>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>Initialization: 定义时, <strong>变量会被赋值</strong>, <strong>此时的赋值称为“初始化”</strong></p>
<ul>
<li>
<p>可以手动赋值, 也就是“显示初始化”:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">1</span>; <span class="comment">// 声明并定义, 并显式初始化</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>也可以不手动赋值,则会“隐式初始化”, 其赋的值要取决于具体情况:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x; <span class="comment">// 声明并定义, 不显式初始化</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p><strong>函数也是变量</strong>, 因此对函数的声明就是写下<strong>函数签名</strong>( 别忘了Function Signature就是函数的variable name ), 使该函数名为程序所知. 对函数的定义也就是创建该函数实体, 为函数分配内存, 并赋值, <strong>赋的“值”( rvalue )就是其函数实现</strong>.在C/CPP中, 我们经常把变量/函数的声明和定义分开</p>
</li>
</ul>
<h1 id="Parameter-and-Argument"><a class="header-anchor" href="#Parameter-and-Argument"></a>Parameter and Argument</h1>
<ul>
<li>
<p>parameter: 形式参数, 函数本身的参数</p>
</li>
<li>
<p>argument: 实际参数, 函数调用方传入的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span> <span class="comment"># argument</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">b</span>): <span class="comment"># parameter</span></span><br><span class="line">	<span class="keyword">return</span> b*<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>( f(a) )</span><br></pre></td></tr></table></figure>
<p>这里的<code>a</code>是argument, <code>b</code>是parameter</p>
</li>
<li>
<p>函数的参数是可以是lvalue(变量), 也可以是rvalue( 表达式, 常量... ).</p>
</li>
</ul>
<h1 id="Parameter-Passing"><a class="header-anchor" href="#Parameter-Passing"></a>Parameter Passing</h1>
<h2 id="Call-by-Value"><a class="header-anchor" href="#Call-by-Value"></a>Call by Value</h2>
<p>Call by Value: <strong>建立一个state, 将variable parameter映射到value argument.</strong> 即将形式参数的variable赋值为实际参数的value. 具体而言, 是将parameter的rvalue擦除, 变为argument的<strong>rvalue</strong>的copy</p>
<ul>
<li>如果argument是个variable, 即一个lvalue , 就会对其取值,得到rvalue</li>
<li>如果argument是个expression, 则会对其求值, 得到结果(rvalue)</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">3</span>;<span class="comment">//name a映射到variable a. 假设variable a = 0X432...,该地址在内存中指向value 3.</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">( <span class="type">int</span> b )</span><span class="comment">//name b映射到variable b. 假设variable b = 0X872...., 该地址在内存中指向value XXX, 这是个垃圾值.</span></span></span><br><span class="line"><span class="function">  <span class="comment">//由于是Call by Value, variable b映射到value 3. 即value XXXX被擦除, 变为了value 3.</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  Call by Value, </span><br><span class="line"> b = b * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>name <code>a</code>, <code>b</code>对应variable <code>a</code> , <code>b</code>, variable是个形如<code>0Xfafea...</code>的地址.</p>
<p>假设variable <code>a</code> , <code>b</code>为<code>0X432...</code>, <code>0X872...</code>, 前者指向value 3, 后者指向的value还没有初始化, 即<code>0X872...</code>指向的内存空间还没有初始化.</p>
<p>按值传递就是取出lvalue <code>a</code>  的rvalue( value 3), 将其copy到lvalue <code>b</code>指向的空间, 即取出<code>0X432...</code>的值3, 然后赋值到<code>0X872...</code>.</p>
<p>现在lvalue <code>b</code>指向value 3.</p>
<h2 id="Call-by-Reference"><a class="header-anchor" href="#Call-by-Reference"></a>Call by Reference</h2>
<p>Call by Reference: <strong>建立一个environment, 将name parameter映射到variable argument.</strong> 具体而言, 是将parameter的变量名, 映射到argument的变量( 前面提到了,  变量其实是指向value的指针).</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">3</span>; <span class="comment">//name a映射到variable a. 假设variable a = 0X432...</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">( <span class="type">int</span>&amp; b )</span></span>&#123; <span class="comment">//Call by Reference, name b映射到variable a = 0X432...</span></span><br><span class="line"> b = b * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因此变量名 <code>b</code>和变量名<code>a</code> 映射到同一个变量<code>a</code>. 变量名<code>b</code>仅仅是变量名<code>a</code>的别名.</p>
<h1 id="Example-Java"><a class="header-anchor" href="#Example-Java"></a>Example: Java</h1>
<p>以Java为例, Java中:</p>
<ul>
<li><strong>除了基本数据类型外, 所有variable指向的value都是某个对象的引用(也就是地址).</strong></li>
<li><strong>函数的参数传递是值传递( Call by Value )</strong>: Call by Value就是将variable parameter指向的value赋值给variable argument. 即让实际参数指向形式参数的value.</li>
</ul>
<p>因此:</p>
<p><strong>对于基本类型的变量, 它们指向的value就是具体数值( e.g. 1, 5, 1.11f, .... ), 因此“按值传递”会把具体数值赋给形式参数.</strong></p>
<p><strong>对于引用类型的变量, 它们指向的value是对一个对象的引用(或者说指针), 因此“按值传递”会把该引用赋给形式参数.</strong></p>
<p><strong>无论如何, Java中的参数传递都是按值传递.</strong></p>
<p><strong>我们常说Java中的某变量被改变了, 这个说法的详细版本是:</strong></p>
<ul>
<li><strong>对于基本类型的变量, 它指向的value被改变了.</strong></li>
<li><strong>对于引用类型的变量, 它指向的value指向的对象被改变了.</strong></li>
</ul>
<p>对于Java来说, “使用变量”指的是:</p>
<ul>
<li>对于基本类型的变量, 使用其value</li>
<li>对于引用类型的变量, 使用其value指向的对象</li>
</ul>
<p>总之都是为了叙述上的方便, 领会意思即可.</p>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<p>例如, 对于下面的代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">text</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;iphone&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">foo</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">    k = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo(num); <span class="comment">// num 没有被改变</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">foo2</span><span class="params">(StringBuilder sb)</span> &#123;</span><br><span class="line">    sb = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;iphone4&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo2(sv); <span class="comment">// str 也没有被改变</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">foo3</span><span class="params">(StringBuilder sb)</span> &#123;</span><br><span class="line">    sb.append(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo3(text); <span class="comment">// text 被改变了，变成了&quot;iphone4&quot;。</span></span><br></pre></td></tr></table></figure>
<ol>
<li>name <code>num</code> 被映射到variable <code>num</code>.  由于<code>num</code>类型是int, 是基本数据类型, 因此<strong>它指向的value就是20.</strong></li>
<li>name <code>text</code> 被映射到variable <code>text</code>. <strong>它指向的value是StringBuilder对象&quot;iphone&quot;( 记为 Object <code>o</code>)的引用</strong>.</li>
</ol>
<p>由于Java的参数传递机制是call by value,</p>
<ol>
<li><code>foo(int k)</code>的形式参数 variable <code>k</code>会被赋值为实际参数<code>num</code>的value, 即20.</li>
<li><code>foo2(StringBuilder sb) </code>和 <code>foo3(StringBuilder sb)</code> 的形式参数variable <code>sb</code>会被赋值为实际参数<code>text</code>的value, 即Object <code>o</code>的引用.</li>
<li>在<code>foo2()</code>中, variable <code>sb</code>的value被赋值为其它对象的引用. <code>foo2()</code>没有改变Object <code>o</code>.</li>
<li>在<code>foo3()</code>中, 对<code>sb</code>所指向的Object <code>o</code>进行了操作. 由于函数外部的variable <code>text</code>指向的value同样是<code>o</code>的引用, 我们在函数外就发现变量text被“改变”了, 即它指向的value指向的对象被改变了.</li>
</ol>
<h1 id="Static-Scope-and-Block-Structure"><a class="header-anchor" href="#Static-Scope-and-Block-Structure"></a>Static Scope and Block Structure</h1>
<p>绝大部分语言的Scope是<strong>静态的</strong>, 语言被组织为一个个的block:</p>
<ul>
<li>
<p>C使用花括号:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Awk使用<code>begin</code>, <code>end</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">begin</span><br><span class="line">		...</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Procedures-Functions-and-Methods"><a class="header-anchor" href="#Procedures-Functions-and-Methods"></a>Procedures, Functions and Methods</h1>
<p>我们经常把Procedure, Function和Method混用, 严格来讲它们是不同的:</p>
<ul>
<li>Function: 返回某个类型的值的函数</li>
<li>Procedure: 没有返回值的函数</li>
<li>Method: Function, 但是是某个对象的成员</li>
</ul>
<p>C中只有Function, 但是通过<code>void f()</code>, Function也就可以看做Procedure.</p>
<p>Java作为纯OO语言只有Method.</p>
<h1 id="Explicit-Access-Control"><a class="header-anchor" href="#Explicit-Access-Control"></a>Explicit Access Control</h1>
<p>OO语言会有:</p>
<ul>
<li>public</li>
<li>protected</li>
<li>private</li>
</ul>
<h1 id="Aliasing"><a class="header-anchor" href="#Aliasing"></a>Aliasing</h1>
<p>对于按引用传递的语言, 或者Java这样的类似按引用传递( 按值传递 + 变量即引用 )的语言, 由于直接传递了指向对象的指针, 因此可能会有两个变量指向同一个对象:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] cars = &#123;<span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>, <span class="string">&quot;Ford&quot;</span>, <span class="string">&quot;Mazda&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">f</span><span class="params">( String[] a, String[] b )</span>&#123;</span><br><span class="line">	a[<span class="number">0</span>] = <span class="string">&quot;Tesla&quot;</span></span><br><span class="line">	b[<span class="number">0</span>] = a[<span class="number">0</span>] + <span class="string">&quot;Haha&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种情况称为Aliasing, 分析Aliasing对于编译器的Optimization非常重要:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>对于如上语句, 只有当编译器确定<code>x</code>所引用的对象没有Aliasing时, <code>x</code>才能直接被替换为<code>2</code></p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Compilers</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Debugging</title>
    <url>/2022/08/26/Python-Debugging/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>logging</li>
<li>pdb</li>
</ul>
<span id="more"></span>
<h1 id="logging"><a class="header-anchor" href="#logging"></a>logging</h1>
<p>Python内置的<code>logging</code>模块可以非常容易地记录错误信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># err_logging.py</span><br><span class="line"></span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">def foo(s):</span><br><span class="line">    return 10 / int(s)</span><br><span class="line"></span><br><span class="line">def bar(s):</span><br><span class="line">    return foo(s) * 2</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    try:</span><br><span class="line">        bar(&#x27;0&#x27;)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        logging.exception(e)</span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">print(&#x27;END&#x27;)</span><br></pre></td></tr></table></figure>
<p>同样是出错，但程序打印完错误信息后会继续执行，并正常退出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python3 err_logging.py</span><br><span class="line">ERROR:root:division by zero</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;err_logging.py&quot;, line 13, in main</span><br><span class="line">    bar(&#x27;0&#x27;)</span><br><span class="line">  File &quot;err_logging.py&quot;, line 9, in bar</span><br><span class="line">    return foo(s) * 2</span><br><span class="line">  File &quot;err_logging.py&quot;, line 6, in foo</span><br><span class="line">    return 10 / int(s)</span><br><span class="line">ZeroDivisionError: division by zero</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<p><code>logging</code>不会抛出错误, 而且可以输出到文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import logging</span><br><span class="line"></span><br><span class="line">s = &#x27;0&#x27;</span><br><span class="line">n = int(s)</span><br><span class="line">logging.info(&#x27;n = %d&#x27; % n)</span><br><span class="line">print(10 / n)</span><br></pre></td></tr></table></figure>
<p><code>logging.info()</code>就可以输出一段文本。运行，发现除了<code>ZeroDivisionError</code>，没有任何信息。怎么回事？</p>
<p>别急，在<code>import logging</code>之后添加一行配置再试试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br></pre></td></tr></table></figure>
<p>看到输出了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python err.py</span><br><span class="line">INFO:root:n = 0</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;err.py&quot;, line 8, in &lt;module&gt;</span><br><span class="line">    print(10 / n)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>
<p>这就是<code>logging</code>的好处，它允许你指定记录信息的级别，有<code>debug</code>，<code>info</code>，<code>warning</code>，<code>error</code>等几个级别，当我们指定<code>level=INFO</code>时，<code>logging.debug</code>就不起作用了。同理，指定<code>level=WARNING</code>后，<code>debug</code>和<code>info</code>就不起作用了。这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。</p>
<p><code>logging</code>的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console和文件。</p>
<h1 id="pdb"><a class="header-anchor" href="#pdb"></a>pdb</h1>
<p>Python的调试器pdb让程序以单步方式运行，可以随时查看运行状态。我们先准备好程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># err.py</span><br><span class="line">s = &#x27;0&#x27;</span><br><span class="line">n = int(s)</span><br><span class="line">print(10 / n)</span><br></pre></td></tr></table></figure>
<p>然后启动：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python -m pdb err.py</span><br><span class="line">&gt; /Users/michael/Github/learn-python3/samples/debug/err.py(2)&lt;module&gt;()</span><br><span class="line">-&gt; s = &#x27;0&#x27;</span><br></pre></td></tr></table></figure>
<p>以参数<code>-m pdb</code>启动后，pdb定位到下一步要执行的代码<code>-&gt; s = '0'</code>。输入命令<code>l</code>来查看代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(Pdb) l</span><br><span class="line">  1     # err.py</span><br><span class="line">  2  -&gt; s = &#x27;0&#x27;</span><br><span class="line">  3     n = int(s)</span><br><span class="line">  4     print(10 / n)</span><br></pre></td></tr></table></figure>
<p>输入命令<code>n</code>可以单步执行代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(Pdb) n</span><br><span class="line">&gt; /Users/michael/Github/learn-python3/samples/debug/err.py(3)&lt;module&gt;()</span><br><span class="line">-&gt; n = int(s)</span><br><span class="line">(Pdb) n</span><br><span class="line">&gt; /Users/michael/Github/learn-python3/samples/debug/err.py(4)&lt;module&gt;()</span><br><span class="line">-&gt; print(10 / n)</span><br></pre></td></tr></table></figure>
<p>任何时候都可以输入命令<code>p 变量名</code>来查看变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(Pdb) p s</span><br><span class="line">&#x27;0&#x27;</span><br><span class="line">(Pdb) p n</span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<p>输入命令<code>q</code>结束调试，退出程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(Pdb) q</span><br></pre></td></tr></table></figure>
<p>这种通过pdb在命令行调试的方法理论上是万能的，但实在是太麻烦了，如果有一千行代码，要运行到第999行得敲多少命令啊。还好，我们还有另一种调试方法。</p>
<h2 id="pdb-set-trace"><a class="header-anchor" href="#pdb-set-trace"></a>pdb.set_trace()</h2>
<p>这个方法也是用pdb，但是不需要单步执行，我们只需要<code>import pdb</code>，然后，在可能出错的地方放一个<code>pdb.set_trace()</code>，就可以设置一个断点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># err.py</span><br><span class="line">import pdb</span><br><span class="line"></span><br><span class="line">s = &#x27;0&#x27;</span><br><span class="line">n = int(s)</span><br><span class="line">pdb.set_trace() # 运行到这里会自动暂停</span><br><span class="line">print(10 / n)</span><br></pre></td></tr></table></figure>
<p>运行代码，程序会自动在<code>pdb.set_trace()</code>暂停并进入pdb调试环境，可以用命令<code>p</code>查看变量，或者用命令<code>c</code>继续运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python err.py </span><br><span class="line">&gt; /Users/michael/Github/learn-python3/samples/debug/err.py(7)&lt;module&gt;()</span><br><span class="line">-&gt; print(10 / n)</span><br><span class="line">(Pdb) p n</span><br><span class="line">0</span><br><span class="line">(Pdb) c</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;err.py&quot;, line 7, in &lt;module&gt;</span><br><span class="line">    print(10 / n)</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>
<p>这个方式比直接启动pdb单步调试效率要高很多，但也高不到哪去。</p>
]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Module</title>
    <url>/2022/08/25/Python-Module/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Basic</li>
<li>Module Scope</li>
<li>Searching Path</li>
<li>Common Modules</li>
</ul>
<span id="more"></span>
<h1 id="Basic"><a class="header-anchor" href="#Basic"></a>Basic</h1>
<ul>
<li>
<p>一个<code>.py</code>文件就是一个模块（Module）</p>
</li>
<li>
<p>模块可以避免代码的名冲突，因此命名模块时，应尽量不要与内置函数名字冲突</p>
<ul>
<li>最好先查看系统是否已存在该模块，检查方法是在Python交互环境执行<code>import abc</code>，若成功则说明系统存在此模块。</li>
</ul>
</li>
<li>
<p>一个文件夹下有<code>__init__.py</code>，该文件夹就成为了一个包，而<code>__init__.py</code>本身就是一个模块，它的模块名就是包名</p>
</li>
<li>
<p>可以通过包来组织模块</p>
</li>
</ul>
<h1 id="Usage"><a class="header-anchor" href="#Usage"></a>Usage</h1>
<p>Python本身就内置了很多非常有用的模块，只要安装完毕，这些模块就可以立刻使用。</p>
<p>我们以内建的<code>sys</code>模块为例，编写一个<code>hello</code>的模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">&#x27; a test module &#x27;</span><br><span class="line"></span><br><span class="line">__author__ = &#x27;Michael Liao&#x27;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def test():</span><br><span class="line">    args = sys.argv</span><br><span class="line">    if len(args)==1:</span><br><span class="line">        print(&#x27;Hello, world!&#x27;)</span><br><span class="line">    elif len(args)==2:</span><br><span class="line">        print(&#x27;Hello, %s!&#x27; % args[1])</span><br><span class="line">    else:</span><br><span class="line">        print(&#x27;Too many arguments!&#x27;)</span><br><span class="line"></span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure>
<p>第1行和第2行是标准注释，第1行注释可以让这个<code>hello.py</code>文件直接在Unix/Linux/Mac上运行，第2行注释表示.py文件本身使用标准UTF-8编码；</p>
<p>第4行是一个字符串，表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释；</p>
<p>第6行使用<code>__author__</code>变量把作者写进去，这样当你公开源代码后别人就可以瞻仰你的大名；</p>
<p>以上就是Python模块的标准文件模板，当然也可以全部删掉不写，但是，按标准办事肯定没错。</p>
<p>后面开始就是真正的代码部分。</p>
<p>你可能注意到了，使用<code>sys</code>模块的第一步，就是导入该模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br></pre></td></tr></table></figure>
<p>导入<code>sys</code>模块后，我们就有了变量<code>sys</code>指向该模块，利用<code>sys</code>这个变量，就可以访问<code>sys</code>模块的所有功能。</p>
<p><code>sys</code>模块有一个<code>argv</code>变量，用list存储了命令行的所有参数。<code>argv</code>至少有一个元素，因为第一个参数永远是该.py文件的名称，例如：</p>
<p>运行<code>python3 hello.py</code>获得的<code>sys.argv</code>就是<code>['hello.py']</code>；</p>
<p>运行<code>python3 hello.py Michael</code>获得的<code>sys.argv</code>就是<code>['hello.py', 'Michael']</code>。</p>
<p>最后，注意到这两行代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    test()</span><br></pre></td></tr></table></figure>
<p>当我们在命令行运行<code>hello</code>模块文件时，Python解释器把一个特殊变量<code>__name__</code>置为<code>__main__</code>，而如果在其他地方导入该<code>hello</code>模块时，<code>if</code>判断将失败，因此，这种<code>if</code>测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。</p>
<p>我们可以用命令行运行<code>hello.py</code>看看效果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python3 hello.py</span><br><span class="line">Hello, world!</span><br><span class="line">$ python hello.py Michael</span><br><span class="line">Hello, Michael!</span><br></pre></td></tr></table></figure>
<p>如果启动Python交互环境，再导入<code>hello</code>模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">Python 3.4.3 (v3.4.3:9b73f1c3e601, Feb 23 2015, 02:52:03) </span><br><span class="line">[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; import hello</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>导入时，没有打印<code>Hello, word!</code>，因为没有执行<code>test()</code>函数。</p>
<p>调用<code>hello.test()</code>时，才能打印出<code>Hello, word!</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; hello.test()</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure>
<h1 id="Module-Scope"><a class="header-anchor" href="#Module-Scope"></a>Module Scope</h1>
<p>在一个模块中，我们可能会定义很多函数和变量，但有的函数和变量我们希望给别人使用，有的函数和变量我们希望仅仅在模块内部使用。在Python中，是通过<code>_</code>前缀来实现的。</p>
<p>正常的函数和变量名是公开的（public），可以被直接引用，比如：<code>abc</code>，<code>x123</code>，<code>PI</code>等；</p>
<p>类似<code>__xxx__</code>这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如上面的<code>__author__</code>，<code>__name__</code>就是特殊变量，<code>hello</code>模块定义的文档注释也可以用特殊变量<code>__doc__</code>访问，我们自己的变量一般不要用这种变量名；</p>
<p>类似<code>_xxx</code>和<code>__xxx</code>这样的函数或变量就是非公开的（private），不应该被直接引用，比如<code>_abc</code>，<code>__abc</code>等；</p>
<p>之所以我们说，private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量。</p>
<p>private函数或变量不应该被别人引用，那它们有什么用呢？请看例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def _private_1(name):</span><br><span class="line">    return &#x27;Hello, %s&#x27; % name</span><br><span class="line"></span><br><span class="line">def _private_2(name):</span><br><span class="line">    return &#x27;Hi, %s&#x27; % name</span><br><span class="line"></span><br><span class="line">def greeting(name):</span><br><span class="line">    if len(name) &gt; 3:</span><br><span class="line">        return _private_1(name)</span><br><span class="line">    else:</span><br><span class="line">        return _private_2(name)</span><br></pre></td></tr></table></figure>
<p>我们在模块里公开<code>greeting()</code>函数，而把内部逻辑用private函数隐藏起来了，这样，调用<code>greeting()</code>函数不用关心内部的private函数细节，这也是一种非常有用的代码封装和抽象的方法，即：</p>
<p>外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public。</p>
<h1 id="Searching-Path"><a class="header-anchor" href="#Searching-Path"></a>Searching Path</h1>
<p>当我们试图加载一个模块时，Python会在指定的路径下搜索对应的.py文件，如果找不到，就会报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import mymodule</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">ImportError: No module named mymodule</span><br></pre></td></tr></table></figure>
<p>默认情况下，Python解释器会搜索当前目录、所有已安装的内置模块和第三方模块，搜索路径存放在<code>sys</code>模块的<code>path</code>变量中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import sys</span><br><span class="line">&gt;&gt;&gt; sys.path</span><br><span class="line">[&#x27;&#x27;, &#x27;/Library/Frameworks/Python.framework/Versions/3.6/lib/python36.zip&#x27;, &#x27;/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6&#x27;, ..., &#x27;/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages&#x27;]</span><br></pre></td></tr></table></figure>
<p>如果我们要添加自己的搜索目录，有两种方法：</p>
<p>一是直接修改<code>sys.path</code>，添加要搜索的目录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import sys</span><br><span class="line">&gt;&gt;&gt; sys.path.append(&#x27;/Users/michael/my_py_scripts&#x27;)</span><br></pre></td></tr></table></figure>
<p>这种方法是在运行时修改，运行结束后失效。</p>
<p>第二种方法是设置环境变量<code>PYTHONPATH</code>，该环境变量的内容会被自动添加到模块搜索路径中。设置方式与设置Path环境变量类似。注意只需要添加你自己的搜索路径，Python自己本身的搜索路径不受影响。</p>
<h1 id="Common-Modules"><a class="header-anchor" href="#Common-Modules"></a>Common Modules</h1>
<h2 id="pandas"><a class="header-anchor" href="#pandas"></a>pandas</h2>
<p><a href="https://www.cnblogs.com/yeyuzhuanjia/p/14817744.html">read_csv()/read_table()文本文件的读取</a></p>
<h3 id="Dataframe"><a class="header-anchor" href="#Dataframe"></a>Dataframe</h3>
<p><a href="https://www.runoob.com/pandas/pandas-dataframe.html">Pandas 数据结构 - DataFrame</a></p>
<p><a href="https://www.jianshu.com/p/14c054225f03">Pandas.DataFrame 的 iterrows()方法详解</a></p>
<h2 id="argparse"><a class="header-anchor" href="#argparse"></a>argparse</h2>
<p><a href="https://blog.csdn.net/edc3001/article/details/113788716">argparse模块使用教程</a></p>
<h1 id=""><a class="header-anchor" href="#"></a></h1>
]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Basic</title>
    <url>/2022/09/26/Python%20Basic/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Basic</li>
<li>Basic Data Types</li>
<li>Function</li>
<li>Advanced Features</li>
<li>OOP</li>
<li>Error Handling</li>
</ul>
<span id="more"></span>
<h1 id="Basic"><a class="header-anchor" href="#Basic"></a>Basic</h1>
<p>ref: <a href="https://www.liaoxuefeng.com/wiki/1016959663602400">廖雪峰的教程</a></p>
<h1 id="Data-Types"><a class="header-anchor" href="#Data-Types"></a>Data Types</h1>
<p>Python3 中有六个标准的数据类型：</p>
<ul>
<li>Number（数字）</li>
<li>String（字符串）, Python中没有字符类型</li>
<li>List（列表）</li>
<li>Tuple（元组）</li>
<li>Set（集合）</li>
<li>Dictionary（字典）</li>
</ul>
<p>Python3 的六个标准数据类型中：</p>
<ul>
<li>不可变数据类型：Number, String, Tuple</li>
<li>可变数据类型：List, Dictionary, Set</li>
</ul>
<h2 id="string"><a class="header-anchor" href="#string"></a>string</h2>
<p>Python的字符串类型是<code>str</code>，是<strong>不可变</strong>的. 在内存中以Unicode表示，一个字符对应若干个字节.</p>
<p>如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code></p>
<p>Python对<code>bytes</code>类型的数据用带<code>b</code>前缀的单引号或双引号表示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = b&#x27;ABC&#x27;</span><br></pre></td></tr></table></figure>
<p>要注意区分<code>'ABC'</code>和<code>b'ABC'</code>，前者是<code>str</code>，后者虽然内容显示得和前者一样，但<code>bytes</code>的每个字符都只占用一个字节。</p>
<h3 id="编码"><a class="header-anchor" href="#编码"></a>编码</h3>
<ul>
<li>
<p>char -&gt; ascii int: <code>ord()</code></p>
</li>
<li>
<p>ascii int -&gt; char: <code>char()</code></p>
</li>
<li>
<p>str -&gt; ascii:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">text = <span class="built_in">input</span>(<span class="string">&quot;enter a string to convert into ascii values:&quot;</span>)</span><br><span class="line">ascii_values = []</span><br><span class="line"><span class="keyword">for</span> character <span class="keyword">in</span> text:</span><br><span class="line">    ascii_values.append(<span class="built_in">ord</span>(character))</span><br></pre></td></tr></table></figure>
<p>Or: 列表生成式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">to_ascii</span>(<span class="params">text</span>):</span><br><span class="line">    ascii_values = [<span class="built_in">ord</span>(character) <span class="keyword">for</span> character <span class="keyword">in</span> text] </span><br><span class="line">    <span class="keyword">return</span> ascii_values</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>对于单个字符的编码，Python提供了<code>ord()</code>函数获取字符的ascii整数表示，<code>chr()</code>函数把ascii编码转换为对应的字符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; ord(&#x27;A&#x27;)</span><br><span class="line">65</span><br><span class="line">&gt;&gt;&gt; ord(&#x27;中&#x27;)</span><br><span class="line">20013</span><br><span class="line">&gt;&gt;&gt; chr(66)</span><br><span class="line">&#x27;B&#x27;</span><br><span class="line">&gt;&gt;&gt; chr(25991)</span><br><span class="line">&#x27;文&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="字符串格式化"><a class="header-anchor" href="#字符串格式化"></a>字符串格式化</h3>
<p>使用字符串的<code>format()</code>方法，它会用传入的参数依次替换字符串内的占位符<code>&#123;0&#125;</code>、<code>&#123;1&#125;</code>……，不过这种方式写起来比%要麻烦得多：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &#x27;Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%&#x27;.format(&#x27;小明&#x27;, 17.125)</span><br><span class="line">&#x27;Hello, 小明, 成绩提升了 17.1%&#x27;</span><br></pre></td></tr></table></figure>
<h2 id="Number"><a class="header-anchor" href="#Number"></a>Number</h2>
<p>Python3 Number类型的子类型有: int, float, bool, complex( 复数 )</p>
<h3 id="int"><a class="header-anchor" href="#int"></a>int</h3>
<p>Python不存在整数溢出, 如果数字过大就会自动转换成大整数类型计算. 非常方便</p>
<p>十六进制: <code>hex()</code>: 这个函数会把int转成它的十六进制表示, 类型是str</p>
<h3 id="float"><a class="header-anchor" href="#float"></a>float</h3>
<h3 id="bool"><a class="header-anchor" href="#bool"></a>bool</h3>
<h3 id="complex"><a class="header-anchor" href="#complex"></a>complex</h3>
<h2 id="List"><a class="header-anchor" href="#List"></a>List</h2>
<ul>
<li>
<p>反转列表:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list.reverse()</span><br></pre></td></tr></table></figure>
<p>该方法没有返回值, 但是会对列表的元素进行反向排序</p>
</li>
<li>
<p>str -&gt; list:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list(&quot;hahaha&quot;)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>list -&gt; str:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&#x27;.join(list, &#x27; &#x27;)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Tuple"><a class="header-anchor" href="#Tuple"></a>Tuple</h2>
<h2 id="Set"><a class="header-anchor" href="#Set"></a>Set</h2>
<h2 id="Dictionary"><a class="header-anchor" href="#Dictionary"></a>Dictionary</h2>
<h2 id="Operators"><a class="header-anchor" href="#Operators"></a>Operators</h2>
<ul>
<li>
<p>Py内置了<code>**</code>运算符来求幂次</p>
<ul>
<li>
<p><code>pow(a,n)</code>: 求a的n次幂, 如果a和n都是int,则返回int</p>
</li>
<li>
<p><code>math.pow(a,n)</code>: 求a的n次幂, 但是会把参数转成浮点数进行运算, 浮点运算是会出错的. 对于比较大的数字, 肯定会出错, 所以不要用<code>math.pow()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import math</span><br><span class="line">&gt;&gt;&gt; 17 ** 127 % 120</span><br><span class="line">113</span><br><span class="line">&gt;&gt;&gt; math.pow(17,127) % 120 //出错了</span><br><span class="line">96.0</span><br><span class="line">&gt;&gt;&gt; pow(17,127) % 120</span><br><span class="line">113</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="Slice"><a class="header-anchor" href="#Slice"></a>Slice</h3>
<p>取一个list或tuple的部分元素是非常常见的操作。比如，一个list如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&#x27;Michael&#x27;, &#x27;Sarah&#x27;, &#x27;Tracy&#x27;, &#x27;Bob&#x27;, &#x27;Jack&#x27;]</span><br></pre></td></tr></table></figure>
<p>取前3个元素，应该怎么做？</p>
<p>笨办法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [L[0], L[1], L[2]]</span><br><span class="line">[&#x27;Michael&#x27;, &#x27;Sarah&#x27;, &#x27;Tracy&#x27;]</span><br></pre></td></tr></table></figure>
<p>之所以是笨办法是因为扩展一下，取前N个元素就没辙了。</p>
<p>取前N个元素，也就是索引为0-(N-1)的元素，可以用循环：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; r = []</span><br><span class="line">&gt;&gt;&gt; n = 3</span><br><span class="line">&gt;&gt;&gt; for i in range(n):</span><br><span class="line">...     r.append(L[i])</span><br><span class="line">... </span><br><span class="line">&gt;&gt;&gt; r</span><br><span class="line">[&#x27;Michael&#x27;, &#x27;Sarah&#x27;, &#x27;Tracy&#x27;]</span><br></pre></td></tr></table></figure>
<p>对这种经常取指定索引范围的操作，用循环十分繁琐，因此，Python提供了切片（Slice）<strong>操作符</strong>，能大大简化这种操作。</p>
<p>对应上面的问题，取前3个元素，用一行代码就可以完成切片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[0:3]</span><br><span class="line">[&#x27;Michael&#x27;, &#x27;Sarah&#x27;, &#x27;Tracy&#x27;]</span><br></pre></td></tr></table></figure>
<p><code>L[0:3]</code>表示，从索引<code>0</code>开始取，直到索引<code>3</code>为止，但不包括索引<code>3</code>。即索引<code>0</code>，<code>1</code>，<code>2</code>，正好是3个元素。</p>
<p>如果第一个索引是<code>0</code>，还可以省略：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[:3]</span><br><span class="line">[&#x27;Michael&#x27;, &#x27;Sarah&#x27;, &#x27;Tracy&#x27;]</span><br></pre></td></tr></table></figure>
<p>也可以从索引1开始，取出2个元素出来：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[1:3]</span><br><span class="line">[&#x27;Sarah&#x27;, &#x27;Tracy&#x27;]</span><br></pre></td></tr></table></figure>
<p>类似的，既然Python支持<code>L[-1]</code>取倒数第一个元素，那么它同样支持倒数切片，试试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[-2:]</span><br><span class="line">[&#x27;Bob&#x27;, &#x27;Jack&#x27;]</span><br><span class="line">&gt;&gt;&gt; L[-2:-1] // 不包括最后一个元素</span><br><span class="line">[&#x27;Bob&#x27;]</span><br></pre></td></tr></table></figure>
<p>记住倒数第一个元素的索引是<code>-1</code>。</p>
<p>注: 由于倒数第一个元素索引为-1,因此正数第一个元素索引为<code>-len(L)</code>,也就是说,<code>L[-len(L):]</code> 可以复制一个list,等价于<code>L[0:len(L)]</code>,即<code>L[:]</code>. 注意,负数访问法最右边只到<code>-1</code>,意味着不能像正数访问一样通过不存在的下标<code>len(L)</code>来完整切片. 想要完整切片,只能用缺省的方式.</p>
<p>切片操作十分有用。我们先创建一个0-99的数列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L = list(range(100))</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[0, 1, 2, 3, ..., 99]</span><br></pre></td></tr></table></figure>
<p>可以通过切片轻松取出某一段数列。比如前10个数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[:10]</span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure>
<p>后10个数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[-10:]</span><br><span class="line">[90, 91, 92, 93, 94, 95, 96, 97, 98, 99]</span><br></pre></td></tr></table></figure>
<p>前11-20个数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[10:20]</span><br><span class="line">[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]</span><br></pre></td></tr></table></figure>
<p>前10个数，每两个取一个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[:10:2]</span><br><span class="line">[0, 2, 4, 6, 8]</span><br></pre></td></tr></table></figure>
<p>所有数，每5个取一个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[::5]</span><br><span class="line">[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]</span><br></pre></td></tr></table></figure>
<p>甚至什么都不写，只写<code>[:]</code>就可以原样复制一个list：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L[:]</span><br><span class="line">[0, 1, 2, 3, ..., 99]</span><br></pre></td></tr></table></figure>
<p>tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; (0, 1, 2, 3, 4, 5)[:3]</span><br><span class="line">(0, 1, 2)</span><br></pre></td></tr></table></figure>
<p>字符串<code>'xxx'</code>也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &#x27;ABCDEFG&#x27;[:3]</span><br><span class="line">&#x27;ABC&#x27;</span><br><span class="line">&gt;&gt;&gt; &#x27;ABCDEFG&#x27;[::2]</span><br><span class="line">&#x27;ACEG&#x27;</span><br></pre></td></tr></table></figure>
<p>在很多编程语言中，针对字符串提供了很多各种截取函数（例如，substring），其实目的就是对字符串切片。Python没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单。</p>
<p>Tips:</p>
<p>反转list:<code>l = [****]    l = l[::-1]</code></p>
<h2 id="Encoding"><a class="header-anchor" href="#Encoding"></a>Encoding</h2>
<h2 id="input"><a class="header-anchor" href="#input"></a>input</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DPI = int(input(&quot;DPI = &quot;) or 400 )</span><br></pre></td></tr></table></figure>
<ul>
<li><code>input()</code>返回的是<code>str</code>, 对于数字要手动转成<code>int</code></li>
</ul>
<h2 id="Comments"><a class="header-anchor" href="#Comments"></a>Comments</h2>
<p>单行注释：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单行注释</span></span><br></pre></td></tr></table></figure>
<p>多行注释: 用三引号( <code>'</code>或<code>&quot;&quot;</code> )</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">使用三个连续的单/双引号分别作为注释的开头和结尾</span></span><br><span class="line"><span class="string">可以一次性注释多行内容或单行内容</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>注意多行注释如果作为字符串出现，就应当看作字符串，而不是注释</p>
<h2 id="条件判断"><a class="header-anchor" href="#条件判断"></a>条件判断</h2>
<p>Python中, <strong>空字符串</strong>, 空容器, 数字0都被判断为False</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">age = 3</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print(&#x27;your age is&#x27;, age)</span><br><span class="line">    print(&#x27;adult&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;your age is&#x27;, age)</span><br><span class="line">    print(&#x27;teenager&#x27;)</span><br></pre></td></tr></table></figure>
<p><code>if</code>还可以简写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if x:</span><br><span class="line">    print(&#x27;True&#x27;)</span><br></pre></td></tr></table></figure>
<h2 id="循环"><a class="header-anchor" href="#循环"></a>循环</h2>
<p>for:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:</span><br><span class="line">    sum = sum + x</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure>
<h3 id="range"><a class="header-anchor" href="#range"></a>range()</h3>
<p><code>range()</code>生成一个整数序列, 再通过<code>list()</code>函数可以转换为list. 比如<code>range(5)</code>生成的序列是从0开始小于5的整数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list(range(5))</span><br><span class="line">[0, 1, 2, 3, 4]</span><br></pre></td></tr></table></figure>
<p><code>range(101)</code>就可以生成0-100的整数序列</p>
<p>range( ) 可以倒序生成序列:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从100加到1. 每次间隔-1. 也就是说100, 然后100-1 = 99, 然后99-1 = 98, 相当于递减</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>
<h1 id="Function"><a class="header-anchor" href="#Function"></a>Function</h1>
<h2 id="定义函数"><a class="header-anchor" href="#定义函数"></a>定义函数</h2>
<p>在Python中，定义一个函数要使用<code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号<code>:</code>，然后，在缩进块中编写函数体，函数的返回值用<code>return</code>语句返回。</p>
<p>我们以自定义一个求绝对值的<code>my_abs</code>函数为例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def my_abs(x):</span><br><span class="line"></span><br><span class="line">​	if x&gt;= 0:</span><br><span class="line"></span><br><span class="line">​		return x</span><br><span class="line"></span><br><span class="line">​	else:</span><br><span class="line"></span><br><span class="line">​		return -x</span><br></pre></td></tr></table></figure>
<p>如果没有<code>return</code>语句，函数执行完毕后也会返回结果，只是结果为<code>None</code>。( Note that a return statement without a value is equivalent to <code>return None</code> )<code>return None</code>可以简写为<code>return</code>。</p>
<h3 id="空函数"><a class="header-anchor" href="#空函数"></a>空函数</h3>
<p>如果想定义一个什么事也不做的空函数，可以用<code>pass</code>语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def nop():</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<p><code>pass</code>语句什么都不做，那有什么用？实际上<code>pass</code>可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个<code>pass</code>，让代码能运行起来。</p>
<p><code>pass</code>还可以用在其他语句里，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if age &gt;= 18:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<p>缺少了<code>pass</code>，代码运行就会有语法错误。</p>
<h3 id="参数检查"><a class="header-anchor" href="#参数检查"></a>参数检查</h3>
<p><code>parameter</code>形参, <code>argument</code>实参</p>
<p>调用函数时，如果参数个数不对，Python解释器会自动检查出来，并抛出<code>TypeError</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; my_abs(1, 2)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: my_abs() takes 1 positional argument but 2 were given</span><br></pre></td></tr></table></figure>
<p>但是如果参数类型不对，Python解释器就无法帮我们检查。试试<code>my_abs</code>和内置函数<code>abs</code>的差别：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; my_abs(&#x27;A&#x27;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 2, in my_abs</span><br><span class="line">TypeError: unorderable types: str() &gt;= int()</span><br><span class="line">&gt;&gt;&gt; abs(&#x27;A&#x27;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: bad operand type for abs(): &#x27;str&#x27;</span><br></pre></td></tr></table></figure>
<p>当传入了不恰当的参数时，内置函数<code>abs</code>会检查出参数错误，而我们定义的<code>my_abs</code>没有参数检查，会导致<code>if</code>语句出错，出错信息和<code>abs</code>不一样。所以，这个函数定义不够完善。</p>
<p>让我们修改一下<code>my_abs</code>的定义，对参数类型做检查，只允许整数和浮点数类型的参数。数据类型检查可以用内置函数<code>isinstance()</code>实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def my_abs(x):</span><br><span class="line">    if not isinstance(x, (int, float)): ## </span><br><span class="line">        raise TypeError(&#x27;bad operand type&#x27;)</span><br><span class="line">    if x &gt;= 0:</span><br><span class="line">        return x</span><br><span class="line">    else:</span><br><span class="line">        return -x</span><br></pre></td></tr></table></figure>
<p>注意<code>isinstance() arg 2 must be a type or tuple of types</code>,就是说<code>(interesting,float)</code>不能用<code>[int,float]</code>代替</p>
<p>添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; my_abs(&#x27;A&#x27;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 3, in my_abs</span><br><span class="line">TypeError: bad operand type</span><br></pre></td></tr></table></figure>
<p>错误和异常处理将在后续讲到。</p>
<h2 id="The-global-statement"><a class="header-anchor" href="#The-global-statement"></a>The <code>global</code> statement</h2>
<p>If you want to assign a value to a name defined at the top level of the program (<code>i.e.</code> not inside any kind of <strong>scope</strong> such as functions or classes), then you have to tell Python that the name is not local, but it is <code>global</code>. We do this using the <code>global</code> statement. It is impossible to assign a value to a variable defined outside a function without the global statement. 在全局区域定义,在局部要使用的时候,要用<code>global</code>关键字<br>
You can use the values of such variables defined outside the function (assuming there is no variable with the same name within the function). However, this is not encouraged and should be avoided since it becomes unclear to the reader of the program as to where that variable's definition is. Using the <code>global</code> statement makes it amply clear(显式地声明,不写会报错,解释器会将这个变量看做未定义) that the variable is defined in an outermost block.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">50</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(): </span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27;x is&#x27;</span>, x) </span><br><span class="line">    x = <span class="number">2</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Changed global x to&#x27;</span>, x)</span><br><span class="line">    </span><br><span class="line">func()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Value of x is&#x27;</span>, x)</span><br></pre></td></tr></table></figure>
<p>The global statement is used to declare that <code>x</code> is a global variable - hence, <strong>when we assign a value to x inside the function, that change is reflected when we use the value of <code>x</code> in the main block</strong>. 在函数里改变了全局变量x,x的值是会更改的.<br>
You can specify more than one global variable using the same global statement e.g.</p>
<p><code>global x, y, z .</code></p>
<h2 id="Default-Argument-Values"><a class="header-anchor" href="#Default-Argument-Values"></a>Default Argument Values</h2>
<p>Only those parameters which are at the end of the parameter list can be given default argument values i.e. you cannot have a parameter with a default argument value preceding a parameter without a default argument value in the function's parameter list. This is because the values are assigned to the parameters by position. For example, def func(a, b=5) is valid, but def func(a=5, b) is not valid.</p>
<h2 id="Keyword-Arguments"><a class="header-anchor" href="#Keyword-Arguments"></a>Keyword Arguments</h2>
<p>If you have some functions with many parameters and you want to specify only some of them, then you can give values for such parameters by <em>naming</em> them - this is called <code>keyword arguments</code> - we use the name (keyword) <strong>instead of the position</strong> (which we have been using all along) to specify the arguments to the function.<br>
There are two advantages - one, using the function is easier since we do not need to worry about the order of the arguments. Two, we can give values to only those parameters to which we want to, provided that the other parameters have <em>default argument values</em>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, b=<span class="number">5</span>, c=<span class="number">10</span></span>): </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;a is&#x27;</span>, a, <span class="string">&#x27;and b is&#x27;</span>, b, <span class="string">&#x27;and c is&#x27;</span>, c)</span><br><span class="line">func(<span class="number">3</span>, <span class="number">7</span>) </span><br><span class="line">func(<span class="number">25</span>, c=<span class="number">24</span>) </span><br><span class="line">func(c=<span class="number">50</span>, a=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">$ python function_keyword.py </span><br><span class="line">a <span class="keyword">is</span> <span class="number">3</span> <span class="keyword">and</span> b <span class="keyword">is</span> <span class="number">7</span> <span class="keyword">and</span> c <span class="keyword">is</span> <span class="number">10</span> </span><br><span class="line">a <span class="keyword">is</span> <span class="number">25</span> <span class="keyword">and</span> b <span class="keyword">is</span> <span class="number">5</span> <span class="keyword">and</span> c <span class="keyword">is</span> <span class="number">24</span> </span><br><span class="line">a <span class="keyword">is</span> <span class="number">100</span> <span class="keyword">and</span> b <span class="keyword">is</span> <span class="number">5</span> <span class="keyword">and</span> c <span class="keyword">is</span> <span class="number">50</span></span><br></pre></td></tr></table></figure>
<p><strong>How it works</strong>:</p>
<p>In the second usage func(25, c=24) , the variable a gets the value of 25 due to the<strong>position</strong> of the argument. Then, the parameter c gets the value of 24 due to <strong>naming</strong> i.e. <code>keyword arguments</code>. The variable b gets the default value of 5 .</p>
<h2 id="VarArgs-parameters"><a class="header-anchor" href="#VarArgs-parameters"></a>VarArgs parameters</h2>
<p>Sometimes you might want to define a function that can take any number of parameters, i.e. variable number of arguments, this can be achieved by using the stars. 可以传入任意数量的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">total</span>(<span class="params">a=<span class="number">5</span>, *numbers, **phonebook</span>): p</span><br><span class="line">    rint(<span class="string">&#x27;a&#x27;</span>, a)</span><br><span class="line"><span class="comment">#iterate through all the items in tuple </span></span><br><span class="line"><span class="keyword">for</span> single_item <span class="keyword">in</span> numbers: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;single_item&#x27;</span>, single_item)</span><br><span class="line"><span class="comment">#iterate through all the items in dictionary </span></span><br><span class="line"><span class="keyword">for</span> first_part, second_part <span class="keyword">in</span> phonebook.items(): 		<span class="built_in">print</span>(first_part,second_part)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(total(<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,Jack=<span class="number">1123</span>,John=<span class="number">2231</span>,Inge=<span class="number">1560</span>))</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">$ python function_varargs.py </span><br><span class="line">a <span class="number">10</span></span><br><span class="line">single_item <span class="number">1</span></span><br><span class="line">single_item <span class="number">2</span> </span><br><span class="line">single_item <span class="number">3</span> </span><br><span class="line">Inge <span class="number">1560</span> </span><br><span class="line">John <span class="number">2231</span> </span><br><span class="line">Jack <span class="number">1123</span> </span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>
<p><strong>How it works</strong><br>
When we declare a starred parameter such as <code>*</code>param , then all the positional arguments from that point till the end are collected as a <code>tuple</code> called 'param'.<br>
Similarly, when we declare a double-starred parameter such as <code>**</code>param , then all the keyword arguments from that point till the end are collected as a <code>dictionary</code> called 'param'.</p>
<h2 id="解构赋值"><a class="header-anchor" href="#解构赋值"></a>解构赋值</h2>
<p>Python的列表和元组支持解构赋值.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parse</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">12</span>,<span class="string">&#x27;me&#x27;</span></span><br><span class="line">x,y = parse() <span class="comment"># 把parse()看作一个元组,默认按下标顺序赋值</span></span><br><span class="line"><span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line">输出为: <span class="number">12</span> me</span><br><span class="line">    </span><br><span class="line"><span class="comment">#---也可以这样:------------#</span></span><br><span class="line">x,y = parse[<span class="number">0</span>],parse[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(x,y)</span><br><span class="line"></span><br><span class="line">输出为: <span class="number">12</span> me</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<h2 id="说明文档"><a class="header-anchor" href="#说明文档"></a>说明文档</h2>
<p>在 Python 中可以通过 <code>help()</code>内置函数或者<code>__doc__</code>属性查看某个函数的说明文档：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 print() 内置函数的说明文档</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--- 用 help()内置函数查看说明文档 ---&#x27;</span>)</span><br><span class="line"><span class="built_in">help</span>(<span class="built_in">print</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;--- 用 __doc__ 属性查看说明文档 ---&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">print</span>.__doc__)</span><br></pre></td></tr></table></figure>
<p>函数的说明文档就是一段<strong>多行注释</strong>，位于函数内部、所有代码的最前面：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个比较数字大小的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">num_max</span>(<span class="params">num1, num2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    比较两个数字的大小</span></span><br><span class="line"><span class="string">    :param num1:形参1，数字1</span></span><br><span class="line"><span class="string">    :param num2:形参2，数字2</span></span><br><span class="line"><span class="string">    :return:大的数字，max_num = num1 if num1 &gt; num2 else num2</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    max_num = num1 <span class="keyword">if</span> num1 &gt; num2 <span class="keyword">else</span> num2</span><br><span class="line">    <span class="keyword">return</span> max_num</span><br></pre></td></tr></table></figure>
<h1 id="Advanced-Features"><a class="header-anchor" href="#Advanced-Features"></a>Advanced Features</h1>
<h2 id="迭代"><a class="header-anchor" href="#迭代"></a>迭代</h2>
<hr>
<p>如果给定一个list或tuple，我们可以通过<code>for</code>循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）。</p>
<p>在Python中，迭代是通过<code>for ... in</code>来完成的，而很多语言比如C语言，迭代list是通过下标完成的，比如Java代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (i=0; i&lt;list.length; i++) &#123;</span><br><span class="line">    n = list[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出，Python的<code>for</code>循环抽象程度要高于C的<code>for</code>循环，因为Python的<code>for</code>循环不仅可以用在list或tuple上，还可以作用在其他可迭代对象上。</p>
<p>list这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代，比如dict就可以迭代：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d = &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3&#125;</span><br><span class="line">&gt;&gt;&gt; for key in d:</span><br><span class="line">...     print(key)</span><br><span class="line">...</span><br><span class="line">a</span><br><span class="line">c</span><br><span class="line">b</span><br></pre></td></tr></table></figure>
<p>因为dict的存储不是按照list的方式顺序排列，所以，迭代出的结果顺序很可能不一样。</p>
<p>默认情况下，dict迭代的是key。如果要迭代value，可以用<code>for value in d.values()</code>，如果要同时迭代key和value，可以用<code>for k, v in d.items()</code>。</p>
<p>由于字符串也是可迭代对象，因此，也可以作用于<code>for</code>循环：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; for ch in &#x27;ABC&#x27;:</span><br><span class="line">...     print(ch)</span><br><span class="line">...</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br></pre></td></tr></table></figure>
<p>所以，当我们使用<code>for</code>循环时，只要作用于一个可迭代对象，<code>for</code>循环就可以正常运行，而我们不太关心该对象究竟是list还是其他数据类型。</p>
<p>那么，如何判断一个对象是可迭代对象呢？方法是通过collections模块的Iterable类型判断：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Iterable</span><br><span class="line">&gt;&gt;&gt; isinstance(&#x27;abc&#x27;, Iterable) # str是否可迭代</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance([1,2,3], Iterable) # list是否可迭代</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(123, Iterable) # 整数是否可迭代</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<p>最后一个小问题，如果要对list实现类似Java那样的下标循环怎么办？Python内置的<code>enumerate</code>函数可以把一个<strong>list</strong>变成索引-元素对，这样就可以在<code>for</code>循环中同时迭代索引和元素本身：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; for i, value in enumerate([&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;]):</span><br><span class="line">...     print(i, value)</span><br><span class="line">...</span><br><span class="line">0 A</span><br><span class="line">1 B</span><br><span class="line">2 C</span><br></pre></td></tr></table></figure>
<p>上面的<code>for</code>循环里，同时引用了两个变量，在Python里是很常见的，比如下面的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; for x, y in [(1, 1), (2, 4), (3, 9)]:</span><br><span class="line">...     print(x, y)</span><br><span class="line">...</span><br><span class="line">1 1</span><br><span class="line">2 4</span><br><span class="line">3 9</span><br></pre></td></tr></table></figure>
<h2 id="列表生成式"><a class="header-anchor" href="#列表生成式"></a>列表生成式</h2>
<hr>
<p>列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式。</p>
<p>举个例子，要生成list <code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</code>可以用<code>list(range(1, 11))</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list(range(1, 11))</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br></pre></td></tr></table></figure>
<p>但如果要生成<code>[1x1, 2x2, 3x3, ..., 10x10]</code>怎么做？方法一是循环：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L = []</span><br><span class="line">&gt;&gt;&gt; for x in range(1, 11):</span><br><span class="line">...    L.append(x * x)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure>
<p>但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的list：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [x * x for x in range(1, 11)]</span><br><span class="line">[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure>
<p>写列表生成式时，把要生成的元素<code>x * x</code>放到前面，后面跟<code>for</code>循环，就可以把list创建出来，十分有用，多写几次，很快就可以熟悉这种语法。</p>
<p>for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [x * x for x in range(1, 11) if x % 2 == 0]</span><br><span class="line">[4, 16, 36, 64, 100]</span><br></pre></td></tr></table></figure>
<p>还可以使用两层循环，可以生成全排列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [m + n for m in &#x27;ABC&#x27; for n in &#x27;XYZ&#x27;]</span><br><span class="line">[&#x27;AX&#x27;, &#x27;AY&#x27;, &#x27;AZ&#x27;, &#x27;BX&#x27;, &#x27;BY&#x27;, &#x27;BZ&#x27;, &#x27;CX&#x27;, &#x27;CY&#x27;, &#x27;CZ&#x27;]</span><br></pre></td></tr></table></figure>
<p>三层和三层以上的循环就很少用到了。</p>
<p>运用列表生成式，可以写出非常简洁的代码。例如，列出当前目录下的所有文件和目录名，可以通过一行代码实现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import os # 导入os模块，模块的概念后面讲到</span><br><span class="line">&gt;&gt;&gt; [d for d in os.listdir(&#x27;.&#x27;)] # os.listdir可以列出文件和目录</span><br><span class="line">[&#x27;.emacs.d&#x27;, &#x27;.ssh&#x27;, &#x27;.Trash&#x27;, &#x27;Adlm&#x27;, &#x27;Applications&#x27;, &#x27;Desktop&#x27;, &#x27;Documents&#x27;, &#x27;Downloads&#x27;, &#x27;Library&#x27;, &#x27;Movies&#x27;, &#x27;Music&#x27;, &#x27;Pictures&#x27;, &#x27;Public&#x27;, &#x27;VirtualBox VMs&#x27;, &#x27;Workspace&#x27;, &#x27;XCode&#x27;]</span><br></pre></td></tr></table></figure>
<p><code>for</code>循环其实可以同时使用两个甚至多个变量，比如<code>dict</code>的<code>items()</code>可以同时迭代key和value：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d = &#123;&#x27;x&#x27;: &#x27;A&#x27;, &#x27;y&#x27;: &#x27;B&#x27;, &#x27;z&#x27;: &#x27;C&#x27; &#125;</span><br><span class="line">&gt;&gt;&gt; for k, v in d.items():</span><br><span class="line">...     print(k, &#x27;=&#x27;, v)</span><br><span class="line">...</span><br><span class="line">y = B</span><br><span class="line">x = A</span><br><span class="line">z = C</span><br></pre></td></tr></table></figure>
<p>因此，列表生成式也可以使用两个变量来生成list：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d = &#123;&#x27;x&#x27;: &#x27;A&#x27;, &#x27;y&#x27;: &#x27;B&#x27;, &#x27;z&#x27;: &#x27;C&#x27; &#125;</span><br><span class="line">&gt;&gt;&gt; [k + &#x27;=&#x27; + v for k, v in d.items()]</span><br><span class="line">[&#x27;y=B&#x27;, &#x27;x=A&#x27;, &#x27;z=C&#x27;]</span><br></pre></td></tr></table></figure>
<p>最后把一个list中所有的字符串变成小写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [&#x27;Hello&#x27;, &#x27;World&#x27;, &#x27;IBM&#x27;, &#x27;Apple&#x27;]</span><br><span class="line">&gt;&gt;&gt; [s.lower() for s in L]</span><br><span class="line">[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;ibm&#x27;, &#x27;apple&#x27;]</span><br></pre></td></tr></table></figure>
<h3 id="if-else"><a class="header-anchor" href="#if-else"></a>if ... else</h3>
<p>使用列表生成式的时候，有些童鞋经常搞不清楚<code>if...else</code>的用法。</p>
<p>例如，以下代码正常输出偶数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [x for x in range(1, 11) if x % 2 == 0]</span><br><span class="line">[2, 4, 6, 8, 10]</span><br></pre></td></tr></table></figure>
<p>但是，我们不能在最后的<code>if</code>加上<code>else</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [x for x in range(1, 11) if x % 2 == 0 else 0]</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1</span><br><span class="line">    [x for x in range(1, 11) if x % 2 == 0 else 0]</span><br><span class="line">                                              ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>
<p>这是因为跟在<code>for</code>后面的<code>if</code>是一个筛选条件，不能带<code>else</code>，否则如何筛选？</p>
<p>另一些童鞋发现把<code>if</code>写在<code>for</code>前面必须加<code>else</code>，否则报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    [x <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">                       ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>
<p>这是因为<code>for</code>前面的部分是一个表达式，它必须根据<code>x</code>计算出一个结果。因此，考察表达式：<code>x if x % 2 == 0</code>，它无法根据<code>x</code>计算出结果，因为缺少<code>else</code>，必须加上<code>else</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> -x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line">[-<span class="number">1</span>, <span class="number">2</span>, -<span class="number">3</span>, <span class="number">4</span>, -<span class="number">5</span>, <span class="number">6</span>, -<span class="number">7</span>, <span class="number">8</span>, -<span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure>
<p>上述<code>for</code>前面的表达式<code>x if x % 2 == 0 else -x</code>才能根据<code>x</code>计算出确定的结果。</p>
<p>可见，在一个列表生成式中，<code>for</code>前面的<code>if ... else</code>是表达式，而<code>for</code>后面的<code>if</code>是过滤条件，不能带<code>else</code>。</p>
<h3 id="练习"><a class="header-anchor" href="#练习"></a>练习</h3>
<p>如果list中既包含字符串，又包含整数，由于非字符串类型没有<code>lower()</code>方法，所以列表生成式会报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>L = [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;World&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;Apple&#x27;</span>, <span class="literal">None</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> L]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;listcomp&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;int&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;lower&#x27;</span></span><br></pre></td></tr></table></figure>
<p>使用内建的<code>isinstance</code>函数可以判断一个变量是不是字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(x, <span class="built_in">str</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span>(y, <span class="built_in">str</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h2 id="生成器"><a class="header-anchor" href="#生成器"></a>生成器</h2>
<hr>
<p>通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p>
<p>所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，称为生成器：generator。</p>
<p>要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的<code>[]</code>改成<code>()</code>，就创建了一个generator：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L = [x * x for x in range(10)]</span><br><span class="line">&gt;&gt;&gt; L</span><br><span class="line">[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br><span class="line">&gt;&gt;&gt; g = (x * x for x in range(10))</span><br><span class="line">&gt;&gt;&gt; g</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at 0x1022ef630&gt;</span><br></pre></td></tr></table></figure>
<p>创建<code>L</code>和<code>g</code>的区别仅在于最外层的<code>[]</code>和<code>()</code>，<code>L</code>是一个list，而<code>g</code>是一个generator。</p>
<p>我们可以直接打印出list的每一个元素，但我们怎么打印出generator的每一个元素呢？</p>
<p>如果要一个一个打印出来，可以通过<code>next()</code>函数获得generator的下一个返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; next(g)</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; next(g)</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; next(g)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; next(g)</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; next(g)</span><br><span class="line">16</span><br><span class="line">&gt;&gt;&gt; next(g)</span><br><span class="line">25</span><br><span class="line">&gt;&gt;&gt; next(g)</span><br><span class="line">36</span><br><span class="line">&gt;&gt;&gt; next(g)</span><br><span class="line">49</span><br><span class="line">&gt;&gt;&gt; next(g)</span><br><span class="line">64</span><br><span class="line">&gt;&gt;&gt; next(g)</span><br><span class="line">81</span><br><span class="line">&gt;&gt;&gt; next(g)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>
<p>我们讲过，generator保存的是算法，每次调用<code>next(g)</code>，就计算出<code>g</code>的下一个元素的值，直到计算到最后一个元素，没有更多的元素时，抛出<code>StopIteration</code>的错误。</p>
<p>当然，上面这种不断调用<code>next(g)</code>实在是太变态了，正确的方法是使用<code>for</code>循环，因为generator也是可迭代对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; g = (x * x for x in range(10))</span><br><span class="line">&gt;&gt;&gt; for n in g:</span><br><span class="line">...     print(n)</span><br><span class="line">... </span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">9</span><br><span class="line">16</span><br><span class="line">25</span><br><span class="line">36</span><br><span class="line">49</span><br><span class="line">64</span><br><span class="line">81</span><br></pre></td></tr></table></figure>
<p>所以，我们创建了一个generator后，基本上永远不会调用<code>next()</code>，而是通过<code>for</code>循环来迭代它，并且不需要关心<code>StopIteration</code>的错误。</p>
<p>generator非常强大。如果推算的算法比较复杂，用类似列表生成式的<code>for</code>循环无法实现的时候，还可以用函数来实现。</p>
<p>比如，著名的斐波拉契数列（Fibonacci），除第一个和第二个数外，任意一个数都可由前两个数相加得到：</p>
<p>1, 1, 2, 3, 5, 8, 13, 21, 34, ...</p>
<p>斐波拉契数列用列表生成式写不出来，但是，用函数把它打印出来却很容易：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def fib(max):</span><br><span class="line">    n, a, b = 0, 0, 1</span><br><span class="line">    while n &lt; max:</span><br><span class="line">        print(b)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + 1</span><br><span class="line">    return &#x27;done&#x27;</span><br></pre></td></tr></table></figure>
<p><em>注意</em>，赋值语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a, b = b, a + b</span><br></pre></td></tr></table></figure>
<p>相当于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t = (b, a + b) # t是一个tuple</span><br><span class="line">a = t[0]</span><br><span class="line">b = t[1]</span><br></pre></td></tr></table></figure>
<p>但不必显式写出临时变量t就可以赋值。</p>
<p>上面的函数可以输出斐波那契数列的前N个数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; fib(6)</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">8</span><br><span class="line">&#x27;done&#x27;</span><br></pre></td></tr></table></figure>
<p>仔细观察，可以看出，<code>fib</code>函数实际上是定义了斐波拉契数列的推算规则，可以从第一个元素开始，推算出后续任意的元素，这种逻辑其实非常类似generator。</p>
<p>也就是说，上面的函数和generator仅一步之遥。要把<code>fib</code>函数变成generator，只需要把<code>print(b)</code>改为<code>yield b</code>就可以了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def fib(max):</span><br><span class="line">    n, a, b = 0, 0, 1</span><br><span class="line">    while n &lt; max:</span><br><span class="line">        yield b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + 1</span><br><span class="line">    return &#x27;done&#x27;</span><br></pre></td></tr></table></figure>
<p>这就是定义generator的另一种方法。如果一个函数定义中包含<code>yield</code>关键字，那么这个函数就不再是一个普通函数，而是一个generator：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f = fib(6)</span><br><span class="line">&gt;&gt;&gt; f</span><br><span class="line">&lt;generator object fib at 0x104feaaa0&gt;</span><br></pre></td></tr></table></figure>
<p>这里，最难理解的就是generator和函数的执行流程不一样。函数是顺序执行，遇到<code>return</code>语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用<code>next()</code>的时候执行，遇到<code>yield</code>语句返回，再次执行时从上次返回的<code>yield</code>语句处继续执行。</p>
<p>举个简单的例子，定义一个generator，依次返回数字1，3，5：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def odd():</span><br><span class="line">    print(&#x27;step 1&#x27;)</span><br><span class="line">    yield 1</span><br><span class="line">    print(&#x27;step 2&#x27;)</span><br><span class="line">    yield(3)</span><br><span class="line">    print(&#x27;step 3&#x27;)</span><br><span class="line">    yield(5)</span><br></pre></td></tr></table></figure>
<p>调用该generator时，首先要生成一个generator对象，然后用<code>next()</code>函数不断获得下一个返回值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; o = odd()</span><br><span class="line">&gt;&gt;&gt; next(o)</span><br><span class="line">step 1</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; next(o)</span><br><span class="line">step 2</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; next(o)</span><br><span class="line">step 3</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt; next(o)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure>
<p>可以看到，<code>odd</code>不是普通函数，而是generator，在执行过程中，遇到<code>yield</code>就中断，下次又继续执行。执行3次<code>yield</code>后，已经没有<code>yield</code>可以执行了，所以，第4次调用<code>next(o)</code>就报错。</p>
<p>回到<code>fib</code>的例子，我们在循环过程中不断调用<code>yield</code>，就会不断中断。当然要给循环设置一个条件来退出循环，不然就会产生一个无限数列出来。</p>
<p>同样的，把函数改成generator后，我们基本上从来不会用<code>next()</code>来获取下一个返回值，而是直接使用<code>for</code>循环来迭代：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; for n in fib(6):</span><br><span class="line">...     print(n)</span><br><span class="line">...</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">8</span><br></pre></td></tr></table></figure>
<p>但是用<code>for</code>循环调用generator时，发现拿不到generator的<code>return</code>语句的返回值。如果想要拿到返回值，必须捕获<code>StopIteration</code>错误，返回值包含在<code>StopIteration</code>的<code>value</code>中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; g = fib(6)</span><br><span class="line">&gt;&gt;&gt; while True:</span><br><span class="line">...     try:</span><br><span class="line">...         x = next(g)</span><br><span class="line">...         print(&#x27;g:&#x27;, x)</span><br><span class="line">...     except StopIteration as e:</span><br><span class="line">...         print(&#x27;Generator return value:&#x27;, e.value)</span><br><span class="line">...         break</span><br><span class="line">...</span><br><span class="line">g: 1</span><br><span class="line">g: 1</span><br><span class="line">g: 2</span><br><span class="line">g: 3</span><br><span class="line">g: 5</span><br><span class="line">g: 8</span><br><span class="line">Generator return value: done</span><br></pre></td></tr></table></figure>
<h2 id="迭代器"><a class="header-anchor" href="#迭代器"></a>迭代器</h2>
<hr>
<p>我们已经知道，可以直接作用于<code>for</code>循环的数据类型有以下几种：</p>
<p>一类是集合数据类型，如<code>list</code>、<code>tuple</code>、<code>dict</code>、<code>set</code>、<code>str</code>等；</p>
<p>一类是<code>generator</code>，包括生成器和带<code>yield</code>的generator function。</p>
<p>这些可以直接作用于<code>for</code>循环的对象统称为可迭代对象：<code>Iterable</code>。</p>
<p>可以使用<code>isinstance()</code>判断一个对象是否是<code>Iterable</code>对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections.abc import Iterable</span><br><span class="line">&gt;&gt;&gt; isinstance([], Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(&#x27;abc&#x27;, Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterable)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(100, Iterable)</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<p>而生成器不但可以作用于<code>for</code>循环，还可以被<code>next()</code>函数不断调用并返回下一个值，直到最后抛出<code>StopIteration</code>错误表示无法继续返回下一个值了。</p>
<p>可以被<code>next()</code>函数调用并不断返回下一个值的对象称为迭代器：<code>Iterator</code>。</p>
<p>可以使用<code>isinstance()</code>判断一个对象是否是<code>Iterator</code>对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections.abc import Iterator</span><br><span class="line">&gt;&gt;&gt; isinstance((x for x in range(10)), Iterator)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance([], Iterator)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; isinstance(&#123;&#125;, Iterator)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; isinstance(&#x27;abc&#x27;, Iterator)</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<p>生成器都是<code>Iterator</code>对象，但<code>list</code>、<code>dict</code>、<code>str</code>虽然是<code>Iterable</code>，却不是<code>Iterator</code>。</p>
<p>把<code>list</code>、<code>dict</code>、<code>str</code>等<code>Iterable</code>变成<code>Iterator</code>可以使用<code>iter()</code>函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(iter([]), Iterator)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(iter(&#x27;abc&#x27;), Iterator)</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<p>你可能会问，为什么<code>list</code>、<code>dict</code>、<code>str</code>等数据类型不是<code>Iterator</code>？</p>
<p>这是因为Python的<code>Iterator</code>对象表示的是一个数据流，Iterator对象可以被<code>next()</code>函数调用并不断返回下一个数据，直到没有数据时抛出<code>StopIteration</code>错误。可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过<code>next()</code>函数实现按需计算下一个数据，所以<code>Iterator</code>的计算是惰性的，只有在需要返回下一个数据时它才会计算。</p>
<p><code>Iterator</code>甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。</p>
<h3 id="小结"><a class="header-anchor" href="#小结"></a>小结</h3>
<p>凡是可作用于<code>for</code>循环的对象都是<code>Iterable</code>类型；</p>
<p>凡是可作用于<code>next()</code>函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列；</p>
<p>集合数据类型如<code>list</code>、<code>dict</code>、<code>str</code>等是<code>Iterable</code>但不是<code>Iterator</code>，不过可以通过<code>iter()</code>函数获得一个<code>Iterator</code>对象。</p>
<p>Python的<code>for</code>循环本质上就是通过不断调用<code>next()</code>函数实现的，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for x in [1, 2, 3, 4, 5]:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<p>实际上完全等价于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 首先获得Iterator对象:</span><br><span class="line">it = iter([1, 2, 3, 4, 5])</span><br><span class="line"># 循环:</span><br><span class="line">while True:</span><br><span class="line">    try:</span><br><span class="line">        # 获得下一个值:</span><br><span class="line">        x = next(it)</span><br><span class="line">    except StopIteration:</span><br><span class="line">        # 遇到StopIteration就退出循环</span><br><span class="line">        break</span><br></pre></td></tr></table></figure>
<h1 id="OOP"><a class="header-anchor" href="#OOP"></a>OOP</h1>
<p>面向对象编程——Object Oriented Programming，简称OOP，是一种程序设计思想。OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。</p>
<p>面向过程的程序设计把计算机程序视为一系列的命令集合，即一组函数的顺序执行。为了简化程序设计，面向过程把函数继续切分为子函数，即把大块函数通过切割成小块函数来降低系统的复杂度。</p>
<p>而面向对象的程序设计把计算机程序视为一组对象的集合，而每个对象都可以接收其他对象发过来的消息，并处理这些消息，计算机程序的执行就是一系列消息在各个对象之间传递。</p>
<p>在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（Class）的概念。</p>
<p>我们以一个例子来说明面向过程和面向对象在程序流程上的不同之处。</p>
<p>假设我们要处理学生的成绩表，为了表示一个学生的成绩，面向过程的程序可以用一个dict表示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std1 = &#123; &#x27;name&#x27;: &#x27;Michael&#x27;, &#x27;score&#x27;: 98 &#125;</span><br><span class="line">std2 = &#123; &#x27;name&#x27;: &#x27;Bob&#x27;, &#x27;score&#x27;: 81 &#125;</span><br></pre></td></tr></table></figure>
<p>而处理学生成绩可以通过函数实现，比如打印学生的成绩：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def print_score(std):</span><br><span class="line">    print(&#x27;%s: %s&#x27; % (std[&#x27;name&#x27;], std[&#x27;score&#x27;]))</span><br></pre></td></tr></table></figure>
<p>如果采用面向对象的程序设计思想，我们首选思考的不是程序的执行流程，而是<code>Student</code>这种数据类型应该被视为一个对象，这个对象拥有<code>name</code>和<code>score</code>这两个属性（Property）。如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个<code>print_score</code>消息，让对象自己把自己的数据打印出来。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    def print_score(self):</span><br><span class="line">        print(&#x27;%s: %s&#x27; % (self.name, self.score))</span><br></pre></td></tr></table></figure>
<p>给对象发消息实际上就是调用对象对应的关联函数，我们称之为对象的方法（Method）。面向对象的程序写出来就像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bart = Student(&#x27;Bart Simpson&#x27;, 59)</span><br><span class="line">lisa = Student(&#x27;Lisa Simpson&#x27;, 87)</span><br><span class="line">bart.print_score()</span><br><span class="line">lisa.print_score()</span><br></pre></td></tr></table></figure>
<p>面向对象的设计思想是从自然界中来的，因为在自然界中，类（Class）和实例（Instance）的概念是很自然的。Class是一种抽象概念，比如我们定义的Class——Student，是指学生这个概念，而实例（Instance）则是一个个具体的Student，比如，Bart Simpson和Lisa Simpson是两个具体的Student。</p>
<p>所以，面向对象的设计思想是抽象出Class，根据Class创建Instance。</p>
<p>面向对象的抽象程度又比函数要高，因为一个Class既包含数据，又包含操作数据的方法。</p>
<h2 id="类和实例"><a class="header-anchor" href="#类和实例"></a>类和实例</h2>
<p>面向对象最重要的概念就是类（Class）和实例（Instance），必须牢记类是抽象的模板，比如Student类，而实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p>
<p>仍以Student类为例，在Python中，定义类是通过<code>class</code>关键字：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<p><code>class</code>后面紧接着是类名，即<code>Student</code>，类名通常是大写开头的单词，紧接着是<code>(object)</code>，表示该类是从哪个类继承下来的，继承的概念我们后面再讲，通常，如果没有合适的继承类，就使用<code>object</code>类，这是所有类最终都会继承的类。</p>
<p>定义好了<code>Student</code>类，就可以根据<code>Student</code>类创建出<code>Student</code>的实例，创建实例是通过类名+()实现的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bart = Student()</span><br><span class="line">&gt;&gt;&gt; bart</span><br><span class="line">&lt;__main__.Student object at 0x10a67a590&gt;</span><br><span class="line">&gt;&gt;&gt; Student</span><br><span class="line">&lt;class &#x27;__main__.Student&#x27;&gt;</span><br></pre></td></tr></table></figure>
<p>可以看到，变量<code>bart</code>指向的就是一个<code>Student</code>的实例，后面的<code>0x10a67a590</code>是内存地址，每个object的地址都不一样，而<code>Student</code>本身则是一个类。</p>
<p>可以自由地给一个实例变量绑定属性，比如，给实例<code>bart</code>绑定一个<code>name</code>属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bart.name = &#x27;Bart Simpson&#x27;</span><br><span class="line">&gt;&gt;&gt; bart.name</span><br><span class="line">&#x27;Bart Simpson&#x27;</span><br></pre></td></tr></table></figure>
<p>由于类可以起到模板的作用，因此，可以在创建实例的时候，把一些我们认为必须绑定的属性强制填写进去。通过定义一个特殊的<code>__init__</code>方法，在创建实例的时候，就把<code>name</code>，<code>score</code>等属性绑上去：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br></pre></td></tr></table></figure>
<p>注意：特殊方法“<strong>init</strong>”前后分别有两个下划线！！！</p>
<p>注意到<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。</p>
<p>有了<code>__init__</code>方法，在创建实例的时候，就不能传入空的参数了，必须传入与<code>__init__</code>方法匹配的参数，但<code>self</code>不需要传，Python解释器自己会把实例变量传进去：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bart = Student(&#x27;Bart Simpson&#x27;, 59)</span><br><span class="line">&gt;&gt;&gt; bart.name</span><br><span class="line">&#x27;Bart Simpson&#x27;</span><br><span class="line">&gt;&gt;&gt; bart.score</span><br><span class="line">59</span><br></pre></td></tr></table></figure>
<p>和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量<code>self</code>，并且，调用时，不用传递该参数。除此之外，类的方法和普通函数没有什么区别，所以，你仍然可以用默认参数、可变参数、关键字参数和命名关键字参数。</p>
<h3 id="数据封装"><a class="header-anchor" href="#数据封装"></a>数据封装</h3>
<p>面向对象编程的一个重要特点就是数据封装。在上面的<code>Student</code>类中，每个实例就拥有各自的<code>name</code>和<code>score</code>这些数据。我们可以通过函数来访问这些数据，比如打印一个学生的成绩：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def print_score(std):</span><br><span class="line">...     print(&#x27;%s: %s&#x27; % (std.name, std.score))</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; print_score(bart)</span><br><span class="line">Bart Simpson: 59</span><br></pre></td></tr></table></figure>
<p>但是，既然<code>Student</code>实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在<code>Student</code>类的内部定义访问数据的函数，这样，就把“数据”给封装起来了。这些封装数据的函数是和<code>Student</code>类本身是关联起来的，我们称之为类的方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    def print_score(self):</span><br><span class="line">        print(&#x27;%s: %s&#x27; % (self.name, self.score))</span><br></pre></td></tr></table></figure>
<p>要定义一个方法，除了第一个参数是<code>self</code>外，其他和普通函数一样。要调用一个方法，只需要在实例变量上直接调用，除了<code>self</code>不用传递，其他参数正常传入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bart.print_score()</span><br><span class="line">Bart Simpson: 59</span><br></pre></td></tr></table></figure>
<p>这样一来，我们从外部看<code>Student</code>类，就只需要知道，创建实例需要给出<code>name</code>和<code>score</code>，而如何打印，都是在<code>Student</code>类的内部定义的，这些数据和逻辑被“封装”起来了，调用很容易，但却不用知道内部实现的细节。</p>
<p>封装的另一个好处是可以给<code>Student</code>类增加新的方法，比如<code>get_grade</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    def get_grade(self):</span><br><span class="line">        if self.score &gt;= 90:</span><br><span class="line">            return &#x27;A&#x27;</span><br><span class="line">        elif self.score &gt;= 60:</span><br><span class="line">            return &#x27;B&#x27;</span><br><span class="line">        else:</span><br><span class="line">            return &#x27;C&#x27;</span><br></pre></td></tr></table></figure>
<h2 id="访问限制"><a class="header-anchor" href="#访问限制"></a>访问限制</h2>
<p>在Class内部，可以有属性和方法，而外部代码可以通过直接调用实例变量的方法来操作数据，这样，就隐藏了内部的复杂逻辑。</p>
<p>但是，从前面Student类的定义来看，外部代码还是可以自由地修改一个实例的<code>name</code>、<code>score</code>属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bart = Student(&#x27;Bart Simpson&#x27;, 59)</span><br><span class="line">&gt;&gt;&gt; bart.score</span><br><span class="line">59</span><br><span class="line">&gt;&gt;&gt; bart.score = 99</span><br><span class="line">&gt;&gt;&gt; bart.score</span><br><span class="line">99</span><br></pre></td></tr></table></figure>
<p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线<code>__</code>，在Python中，实例的变量名如果以<code>__</code>开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问，所以，我们把Student类改一改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, score):</span><br><span class="line">        self.__name = name</span><br><span class="line">        self.__score = score</span><br><span class="line"></span><br><span class="line">    def print_score(self):</span><br><span class="line">        print(&#x27;%s: %s&#x27; % (self.__name, self.__score))</span><br></pre></td></tr></table></figure>
<p>改完后，对于外部代码来说，没什么变动，但是已经无法从外部访问<code>实例变量.__name</code>和<code>实例变量.__score</code>了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bart = Student(&#x27;Bart Simpson&#x27;, 59)</span><br><span class="line">&gt;&gt;&gt; bart.__name</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#x27;Student&#x27; object has no attribute &#x27;__name&#x27;</span><br></pre></td></tr></table></figure>
<p>这样就确保了外部代码不能随意修改对象内部的状态，这样通过访问限制的保护，代码更加健壮。</p>
<p>但是如果外部代码要获取name和score怎么办？可以给Student类增加<code>get_name</code>和<code>get_score</code>这样的方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    def get_name(self):</span><br><span class="line">        return self.__name</span><br><span class="line"></span><br><span class="line">    def get_score(self):</span><br><span class="line">        return self.__score</span><br></pre></td></tr></table></figure>
<p>如果又要允许外部代码修改score怎么办？可以再给Student类增加<code>set_score</code>方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    def set_score(self, score):</span><br><span class="line">        self.__score = score</span><br></pre></td></tr></table></figure>
<p>你也许会问，原先那种直接通过<code>bart.score = 99</code>也可以修改啊，为什么要定义一个方法大费周折？因为在方法中，可以对参数做检查，避免传入无效的参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    def set_score(self, score):</span><br><span class="line">        if 0 &lt;= score &lt;= 100:</span><br><span class="line">            self.__score = score</span><br><span class="line">        else:</span><br><span class="line">            raise ValueError(&#x27;bad score&#x27;)</span><br></pre></td></tr></table></figure>
<p>需要注意的是，在Python中，变量名类似<code>__xxx__</code>的，也就是以双下划线开头，并且以双下划线结尾的，是特殊变量，特殊变量是可以直接访问的，不是private变量，所以，不能用<code>__name__</code>、<code>__score__</code>这样的变量名。</p>
<p>有些时候，你会看到以一个下划线开头的实例变量名，比如<code>_name</code>，这样的实例变量外部是可以访问的，但是，按照约定俗成的规定，当你看到这样的变量时，意思就是，“虽然我可以被访问，但是，请把我视为私有变量，不要随意访问”。</p>
<p>双下划线开头的实例变量是不是一定不能从外部访问呢？其实也不是。不能直接访问<code>__name</code>是因为Python解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bart._Student__name</span><br><span class="line">&#x27;Bart Simpson&#x27;</span><br></pre></td></tr></table></figure>
<p>但是强烈建议你不要这么干，因为不同版本的Python解释器可能会把<code>__name</code>改成不同的变量名。</p>
<p>总的来说就是，Python本身没有任何机制阻止你干坏事，一切全靠自觉。</p>
<p>最后注意下面的这种<em>错误写法</em>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bart = Student(&#x27;Bart Simpson&#x27;, 59)</span><br><span class="line">&gt;&gt;&gt; bart.get_name()</span><br><span class="line">&#x27;Bart Simpson&#x27;</span><br><span class="line">&gt;&gt;&gt; bart.__name = &#x27;New Name&#x27; # 设置__name变量！</span><br><span class="line">&gt;&gt;&gt; bart.__name</span><br><span class="line">&#x27;New Name&#x27;</span><br></pre></td></tr></table></figure>
<p>表面上看，外部代码“成功”地设置了<code>__name</code>变量，但实际上这个<code>__name</code>变量和class内部的<code>__name</code>变量<em>不是</em>一个变量！内部的<code>__name</code>变量已经被Python解释器自动改成了<code>_Student__name</code>，而外部代码给<code>bart</code>新增了一个<code>__name</code>变量。不信试试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; bart.get_name() # get_name()内部返回self.__name</span><br><span class="line">&#x27;Bart Simpson&#x27;</span><br></pre></td></tr></table></figure>
<h2 id="继承和多态"><a class="header-anchor" href="#继承和多态"></a>继承和多态</h2>
<p>在OOP程序设计中，当我们定义一个class的时候，可以从某个现有的class继承，新的class称为子类（Subclass），而被继承的class称为基类、父类或超类（Base class、Super class）。</p>
<p>比如，我们已经编写了一个名为<code>Animal</code>的class，有一个<code>run()</code>方法可以直接打印：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Animal(object):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#x27;Animal is running...&#x27;)</span><br></pre></td></tr></table></figure>
<p>当我们需要编写<code>Dog</code>和<code>Cat</code>类时，就可以直接从<code>Animal</code>类继承：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Dog(Animal):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Cat(Animal):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<p>对于<code>Dog</code>来说，<code>Animal</code>就是它的父类，对于<code>Animal</code>来说，<code>Dog</code>就是它的子类。<code>Cat</code>和<code>Dog</code>类似。</p>
<p>继承有什么好处？最大的好处是子类获得了父类的全部功能。由于<code>Animial</code>实现了<code>run()</code>方法，因此，<code>Dog</code>和<code>Cat</code>作为它的子类，什么事也没干，就自动拥有了<code>run()</code>方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dog = Dog()</span><br><span class="line">dog.run()</span><br><span class="line"></span><br><span class="line">cat = Cat()</span><br><span class="line">cat.run()</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Animal is running...</span><br><span class="line">Animal is running...</span><br></pre></td></tr></table></figure>
<p>当然，也可以对子类增加一些方法，比如Dog类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Dog(Animal):</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#x27;Dog is running...&#x27;)</span><br><span class="line"></span><br><span class="line">    def eat(self):</span><br><span class="line">        print(&#x27;Eating meat...&#x27;)</span><br></pre></td></tr></table></figure>
<p>继承的第二个好处需要我们对代码做一点改进。你看到了，无论是<code>Dog</code>还是<code>Cat</code>，它们<code>run()</code>的时候，显示的都是<code>Animal is running...</code>，符合逻辑的做法是分别显示<code>Dog is running...</code>和<code>Cat is running...</code>，因此，对<code>Dog</code>和<code>Cat</code>类改进如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Dog(Animal):</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#x27;Dog is running...&#x27;)</span><br><span class="line"></span><br><span class="line">class Cat(Animal):</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#x27;Cat is running...&#x27;)</span><br></pre></td></tr></table></figure>
<p>再次运行，结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dog is running...</span><br><span class="line">Cat is running...</span><br></pre></td></tr></table></figure>
<p>当子类和父类都存在相同的<code>run()</code>方法时，我们说，子类的<code>run()</code>覆盖了父类的<code>run()</code>，在代码运行的时候，总是会调用子类的<code>run()</code>。这样，我们就获得了继承的另一个好处：多态。</p>
<p>要理解什么是多态，我们首先要对数据类型再作一点说明。当我们定义一个class的时候，我们实际上就定义了一种数据类型。我们定义的数据类型和Python自带的数据类型，比如str、list、dict没什么两样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = list() # a是list类型</span><br><span class="line">b = Animal() # b是Animal类型</span><br><span class="line">c = Dog() # c是Dog类型</span><br></pre></td></tr></table></figure>
<p>判断一个变量是否是某个类型可以用<code>isinstance()</code>判断：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(a, list)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(b, Animal)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(c, Dog)</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<p>看来<code>a</code>、<code>b</code>、<code>c</code>确实对应着<code>list</code>、<code>Animal</code>、<code>Dog</code>这3种类型。</p>
<p>但是等等，试试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(c, Animal)</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<p>看来<code>c</code>不仅仅是<code>Dog</code>，<code>c</code>还是<code>Animal</code>！</p>
<p>不过仔细想想，这是有道理的，因为<code>Dog</code>是从<code>Animal</code>继承下来的，当我们创建了一个<code>Dog</code>的实例<code>c</code>时，我们认为<code>c</code>的数据类型是<code>Dog</code>没错，但<code>c</code>同时也是<code>Animal</code>也没错，<code>Dog</code>本来就是<code>Animal</code>的一种！</p>
<p>所以，在继承关系中，如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类。但是，反过来就不行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; b = Animal()</span><br><span class="line">&gt;&gt;&gt; isinstance(b, Dog)</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<p><code>Dog</code>可以看成<code>Animal</code>，但<code>Animal</code>不可以看成<code>Dog</code>。</p>
<p>要理解多态的好处，我们还需要再编写一个函数，这个函数接受一个<code>Animal</code>类型的变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def run_twice(animal):</span><br><span class="line">    animal.run()</span><br><span class="line">    animal.run()</span><br></pre></td></tr></table></figure>
<p>当我们传入<code>Animal</code>的实例时，<code>run_twice()</code>就打印出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; run_twice(Animal())</span><br><span class="line">Animal is running...</span><br><span class="line">Animal is running...</span><br></pre></td></tr></table></figure>
<p>当我们传入<code>Dog</code>的实例时，<code>run_twice()</code>就打印出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; run_twice(Dog())</span><br><span class="line">Dog is running...</span><br><span class="line">Dog is running...</span><br></pre></td></tr></table></figure>
<p>当我们传入<code>Cat</code>的实例时，<code>run_twice()</code>就打印出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; run_twice(Cat())</span><br><span class="line">Cat is running...</span><br><span class="line">Cat is running...</span><br></pre></td></tr></table></figure>
<p>看上去没啥意思，但是仔细想想，现在，如果我们再定义一个<code>Tortoise</code>类型，也从<code>Animal</code>派生：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Tortoise(Animal):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#x27;Tortoise is running slowly...&#x27;)</span><br></pre></td></tr></table></figure>
<p>当我们调用<code>run_twice()</code>时，传入<code>Tortoise</code>的实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; run_twice(Tortoise())</span><br><span class="line">Tortoise is running slowly...</span><br><span class="line">Tortoise is running slowly...</span><br></pre></td></tr></table></figure>
<p>你会发现，新增一个<code>Animal</code>的子类，不必对<code>run_twice()</code>做任何修改，实际上，任何依赖<code>Animal</code>作为参数的函数或者方法都可以不加修改地正常运行，原因就在于多态。</p>
<p>多态的好处就是，当我们需要传入<code>Dog</code>、<code>Cat</code>、<code>Tortoise</code>……时，我们只需要接收<code>Animal</code>类型就可以了，因为<code>Dog</code>、<code>Cat</code>、<code>Tortoise</code>……都是<code>Animal</code>类型，然后，按照<code>Animal</code>类型进行操作即可。由于<code>Animal</code>类型有<code>run()</code>方法，因此，传入的任意类型，只要是<code>Animal</code>类或者子类，就会自动调用实际类型的<code>run()</code>方法，这就是多态的意思：</p>
<p>对于一个变量，我们只需要知道它是<code>Animal</code>类型，无需确切地知道它的子类型，就可以放心地调用<code>run()</code>方法，而具体调用的<code>run()</code>方法是作用在<code>Animal</code>、<code>Dog</code>、<code>Cat</code>还是<code>Tortoise</code>对象上，由运行时该对象的确切类型决定，这就是多态真正的威力：调用方只管调用，不管细节，而当我们新增一种<code>Animal</code>的子类时，只要确保<code>run()</code>方法编写正确，不用管原来的代码是如何调用的。这就是著名的“开闭”原则：</p>
<p>对扩展开放：允许新增<code>Animal</code>子类；</p>
<p>对修改封闭：不需要修改依赖<code>Animal</code>类型的<code>run_twice()</code>等函数。</p>
<p>继承还可以一级一级地继承下来，就好比从爷爷到爸爸、再到儿子这样的关系。而任何类，最终都可以追溯到根类object，这些继承关系看上去就像一颗倒着的树。比如如下的继承树：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                ┌───────────────┐</span><br><span class="line">                │    object     │</span><br><span class="line">                └───────────────┘</span><br><span class="line">                        │</span><br><span class="line">           ┌────────────┴────────────┐</span><br><span class="line">           │                         │</span><br><span class="line">           ▼                         ▼</span><br><span class="line">    ┌─────────────┐           ┌─────────────┐</span><br><span class="line">    │   Animal    │           │    Plant    │</span><br><span class="line">    └─────────────┘           └─────────────┘</span><br><span class="line">           │                         │</span><br><span class="line">     ┌─────┴──────┐            ┌─────┴──────┐</span><br><span class="line">     │            │            │            │</span><br><span class="line">     ▼            ▼            ▼            ▼</span><br><span class="line">┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐</span><br><span class="line">│   Dog   │  │   Cat   │  │  Tree   │  │ Flower  │</span><br><span class="line">└─────────┘  └─────────┘  └─────────┘  └─────────┘</span><br></pre></td></tr></table></figure>
<h3 id="静态语言-vs-动态语言"><a class="header-anchor" href="#静态语言-vs-动态语言"></a>静态语言 vs 动态语言</h3>
<p>对于静态语言（例如Java）来说，如果需要传入<code>Animal</code>类型，则传入的对象必须是<code>Animal</code>类型或者它的子类，否则，将无法调用<code>run()</code>方法。</p>
<p>对于Python这样的动态语言来说，则不一定需要传入<code>Animal</code>类型。我们只需要保证传入的对象有一个<code>run()</code>方法就可以了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Timer(object):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#x27;Start...&#x27;)</span><br></pre></td></tr></table></figure>
<p>这就是动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p>
<p>Python的“file-like object“就是一种鸭子类型。对真正的文件对象，它有一个<code>read()</code>方法，返回其内容。但是，许多对象，只要有<code>read()</code>方法，都被视为“file-like object“。许多函数接收的参数就是“file-like object“，你不一定要传入真正的文件对象，完全可以传入任何实现了<code>read()</code>方法的对象。</p>
<h2 id="获取对象信息"><a class="header-anchor" href="#获取对象信息"></a>获取对象信息</h2>
<p>当我们拿到一个对象的引用时，如何知道这个对象是什么类型、有哪些方法呢？</p>
<h3 id="使用type"><a class="header-anchor" href="#使用type"></a>使用type()</h3>
<p>首先，我们来判断对象类型，使用<code>type()</code>函数：</p>
<p>基本类型都可以用<code>type()</code>判断：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; type(123)</span><br><span class="line">&lt;class &#x27;int&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; type(&#x27;str&#x27;)</span><br><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; type(None)</span><br><span class="line">&lt;type(None) &#x27;NoneType&#x27;&gt;</span><br></pre></td></tr></table></figure>
<p>如果一个变量指向函数或者类，也可以用<code>type()</code>判断：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; type(abs)</span><br><span class="line">&lt;class &#x27;builtin_function_or_method&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; type(a)</span><br><span class="line">&lt;class &#x27;__main__.Animal&#x27;&gt;</span><br></pre></td></tr></table></figure>
<p>但是<code>type()</code>函数返回的是什么类型呢？它返回对应的Class类型。如果我们要在<code>if</code>语句中判断，就需要比较两个变量的type类型是否相同：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; type(123)==type(456)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type(123)==int</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type(&#x27;abc&#x27;)==type(&#x27;123&#x27;)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type(&#x27;abc&#x27;)==str</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type(&#x27;abc&#x27;)==type(123)</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<p>判断基本数据类型可以直接写<code>int</code>，<code>str</code>等，但如果要判断一个对象是否是函数怎么办？可以使用<code>types</code>模块中定义的常量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import types</span><br><span class="line">&gt;&gt;&gt; def fn():</span><br><span class="line">...     pass</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; type(fn)==types.FunctionType</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type(abs)==types.BuiltinFunctionType</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type(lambda x: x)==types.LambdaType</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; type((x for x in range(10)))==types.GeneratorType</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<h3 id="使用isinstance"><a class="header-anchor" href="#使用isinstance"></a>使用isinstance()</h3>
<p>对于class的继承关系来说，使用<code>type()</code>就很不方便。我们要判断class的类型，可以使用<code>isinstance()</code>函数。</p>
<p>我们回顾上次的例子，如果继承关系是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">object -&gt; Animal -&gt; Dog -&gt; Husky</span><br></pre></td></tr></table></figure>
<p>那么，<code>isinstance()</code>就可以告诉我们，一个对象是否是某种类型。先创建3种类型的对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = Animal()</span><br><span class="line">&gt;&gt;&gt; d = Dog()</span><br><span class="line">&gt;&gt;&gt; h = Husky()</span><br></pre></td></tr></table></figure>
<p>然后，判断：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(h, Husky)</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<p>没有问题，因为<code>h</code>变量指向的就是Husky对象。</p>
<p>再判断：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(h, Dog)</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<p><code>h</code>虽然自身是Husky类型，但由于Husky是从Dog继承下来的，所以，<code>h</code>也还是Dog类型。换句话说，<code>isinstance()</code>判断的是一个对象是否是该类型本身，或者位于该类型的父继承链上。</p>
<p>因此，我们可以确信，<code>h</code>还是Animal类型：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(h, Animal)</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<p>同理，实际类型是Dog的<code>d</code>也是Animal类型：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(d, Dog) and isinstance(d, Animal)</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<p>但是，<code>d</code>不是Husky类型：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(d, Husky)</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<p>能用<code>type()</code>判断的基本类型也可以用<code>isinstance()</code>判断：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance(&#x27;a&#x27;, str)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(123, int)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance(b&#x27;a&#x27;, bytes)</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<p>并且还可以判断一个变量是否是某些类型中的一种，比如下面的代码就可以判断是否是list或者tuple：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; isinstance([1, 2, 3], (list, tuple))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; isinstance((1, 2, 3), (list, tuple))</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<p>总是优先使用isinstance()判断类型，可以将指定类型及其子类“一网打尽”。</p>
<h3 id="使用dir"><a class="header-anchor" href="#使用dir"></a>使用dir()</h3>
<p>如果要获得一个对象的所有属性和方法，可以使用<code>dir()</code>函数，它返回一个包含字符串的list，比如，获得一个str对象的所有属性和方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; dir(&#x27;ABC&#x27;)</span><br><span class="line">[&#x27;__add__&#x27;, &#x27;__class__&#x27;,..., &#x27;__subclasshook__&#x27;, &#x27;capitalize&#x27;, &#x27;casefold&#x27;,..., &#x27;zfill&#x27;]</span><br></pre></td></tr></table></figure>
<p>类似<code>__xxx__</code>的属性和方法在Python中都是有特殊用途的，比如<code>__len__</code>方法返回长度。在Python中，如果你调用<code>len()</code>函数试图获取一个对象的长度，实际上，在<code>len()</code>函数内部，它自动去调用该对象的<code>__len__()</code>方法，所以，下面的代码是等价的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; len(&#x27;ABC&#x27;)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; &#x27;ABC&#x27;.__len__()</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<p>我们自己写的类，如果也想用<code>len(myObj)</code>的话，就自己写一个<code>__len__()</code>方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class MyDog(object):</span><br><span class="line">...     def __len__(self):</span><br><span class="line">...         return 100</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; dog = MyDog()</span><br><span class="line">&gt;&gt;&gt; len(dog)</span><br><span class="line">100</span><br></pre></td></tr></table></figure>
<p>剩下的都是普通属性或方法，比如<code>lower()</code>返回小写的字符串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &#x27;ABC&#x27;.lower()</span><br><span class="line">&#x27;abc&#x27;</span><br></pre></td></tr></table></figure>
<p>仅仅把属性和方法列出来是不够的，配合<code>getattr()</code>、<code>setattr()</code>以及<code>hasattr()</code>，我们可以直接操作一个对象的状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class MyObject(object):</span><br><span class="line">...     def __init__(self):</span><br><span class="line">...         self.x = 9</span><br><span class="line">...     def power(self):</span><br><span class="line">...         return self.x * self.x</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; obj = MyObject()</span><br></pre></td></tr></table></figure>
<p>紧接着，可以测试该对象的属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; hasattr(obj, &#x27;x&#x27;) # 有属性&#x27;x&#x27;吗？</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; obj.x</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt; hasattr(obj, &#x27;y&#x27;) # 有属性&#x27;y&#x27;吗？</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; setattr(obj, &#x27;y&#x27;, 19) # 设置一个属性&#x27;y&#x27;</span><br><span class="line">&gt;&gt;&gt; hasattr(obj, &#x27;y&#x27;) # 有属性&#x27;y&#x27;吗？</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; getattr(obj, &#x27;y&#x27;) # 获取属性&#x27;y&#x27;</span><br><span class="line">19</span><br><span class="line">&gt;&gt;&gt; obj.y # 获取属性&#x27;y&#x27;</span><br><span class="line">19</span><br></pre></td></tr></table></figure>
<p>如果试图获取不存在的属性，会抛出AttributeError的错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; getattr(obj, &#x27;z&#x27;) # 获取属性&#x27;z&#x27;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#x27;MyObject&#x27; object has no attribute &#x27;z&#x27;</span><br></pre></td></tr></table></figure>
<p>可以传入一个default参数，如果属性不存在，就返回默认值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; getattr(obj, &#x27;z&#x27;, 404) # 获取属性&#x27;z&#x27;，如果不存在，返回默认值404</span><br><span class="line">404</span><br></pre></td></tr></table></figure>
<p>也可以获得对象的方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; hasattr(obj, &#x27;power&#x27;) # 有属性&#x27;power&#x27;吗？</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; getattr(obj, &#x27;power&#x27;) # 获取属性&#x27;power&#x27;</span><br><span class="line">&lt;bound method MyObject.power of &lt;__main__.MyObject object at 0x10077a6a0&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; fn = getattr(obj, &#x27;power&#x27;) # 获取属性&#x27;power&#x27;并赋值到变量fn</span><br><span class="line">&gt;&gt;&gt; fn # fn指向obj.power</span><br><span class="line">&lt;bound method MyObject.power of &lt;__main__.MyObject object at 0x10077a6a0&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; fn() # 调用fn()与调用obj.power()是一样的</span><br><span class="line">81</span><br></pre></td></tr></table></figure>
<h2 id="实例属性和类属性"><a class="header-anchor" href="#实例属性和类属性"></a>实例属性和类属性</h2>
<p>由于Python是动态语言，根据类创建的实例可以任意绑定属性。</p>
<p>给实例绑定属性的方法是通过实例变量，或者通过<code>self</code>变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">s = Student(&#x27;Bob&#x27;)</span><br><span class="line">s.score = 90</span><br></pre></td></tr></table></figure>
<p>但是，如果<code>Student</code>类本身需要绑定一个属性呢？可以直接在class中定义属性，这种属性是类属性，归<code>Student</code>类所有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    name = &#x27;Student&#x27;</span><br></pre></td></tr></table></figure>
<p>当我们定义了一个类属性后，这个属性虽然归类所有，但类的所有实例都可以访问到。来测试一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class Student(object):</span><br><span class="line">...     name = &#x27;Student&#x27;</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; s = Student() # 创建实例s</span><br><span class="line">&gt;&gt;&gt; print(s.name) # 打印name属性，因为实例并没有name属性，所以会继续查找class的name属性</span><br><span class="line">Student</span><br><span class="line">&gt;&gt;&gt; print(Student.name) # 打印类的name属性</span><br><span class="line">Student</span><br><span class="line">&gt;&gt;&gt; s.name = &#x27;Michael&#x27; # 给实例绑定name属性</span><br><span class="line">&gt;&gt;&gt; print(s.name) # 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性</span><br><span class="line">Michael</span><br><span class="line">&gt;&gt;&gt; print(Student.name) # 但是类属性并未消失，用Student.name仍然可以访问</span><br><span class="line">Student</span><br><span class="line">&gt;&gt;&gt; del s.name # 如果删除实例的name属性</span><br><span class="line">&gt;&gt;&gt; print(s.name) # 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了</span><br><span class="line">Student</span><br></pre></td></tr></table></figure>
<p>从上面的例子可以看出，在编写程序的时候，千万不要对实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</p>
<h1 id="Error-Handling"><a class="header-anchor" href="#Error-Handling"></a>Error Handling</h1>
<p>Python所有的错误都是从<code>BaseException</code>类派生的，常见的错误类型和继承关系看这里：</p>
<p><a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy">https://docs.python.org/3/library/exceptions.html#exception-hierarchy</a></p>
<h2 id="try"><a class="header-anchor" href="#try"></a>try</h2>
<p>让我们用一个例子来看看<code>try</code>的机制：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(&#x27;try...&#x27;)</span><br><span class="line">    r = 10 / 0</span><br><span class="line">    print(&#x27;result:&#x27;, r)</span><br><span class="line">except ZeroDivisionError as e:</span><br><span class="line">    print(&#x27;except:&#x27;, e)</span><br><span class="line">finally:</span><br><span class="line">    print(&#x27;finally...&#x27;)</span><br><span class="line">print(&#x27;END&#x27;)</span><br></pre></td></tr></table></figure>
<p>当我们认为某些代码可能会出错时，就可以用<code>try</code>来运行这段代码，如果执行出错，则后续代码不会继续执行，而是直接跳转至错误处理代码，即<code>except</code>语句块，执行完<code>except</code>后，如果有<code>finally</code>语句块，则执行<code>finally</code>语句块，至此，执行完毕。</p>
<p>上面的代码在计算<code>10 / 0</code>时会产生一个除法运算错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try...</span><br><span class="line">except: division by zero</span><br><span class="line">finally...</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<p>从输出可以看到，当错误发生时，后续语句<code>print('result:', r)</code>不会被执行，<code>except</code>由于捕获到<code>ZeroDivisionError</code>，因此被执行。最后，<code>finally</code>语句被执行。然后，程序继续按照流程往下走。</p>
<p>如果把除数<code>0</code>改成<code>2</code>，则执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try...</span><br><span class="line">result: 5</span><br><span class="line">finally...</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<p>由于没有错误发生，所以<code>except</code>语句块不会被执行，但是<code>finally</code>如果有，则一定会被执行（可以没有<code>finally</code>语句）。</p>
<p>你还可以猜测，错误应该有很多种类，如果发生了不同类型的错误，应该由不同的<code>except</code>语句块处理。没错，可以有多个<code>except</code>来捕获不同类型的错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(&#x27;try...&#x27;)</span><br><span class="line">    r = 10 / int(&#x27;a&#x27;)</span><br><span class="line">    print(&#x27;result:&#x27;, r)</span><br><span class="line">except ValueError as e:</span><br><span class="line">    print(&#x27;ValueError:&#x27;, e)</span><br><span class="line">except ZeroDivisionError as e:</span><br><span class="line">    print(&#x27;ZeroDivisionError:&#x27;, e)</span><br><span class="line">finally:</span><br><span class="line">    print(&#x27;finally...&#x27;)</span><br><span class="line">print(&#x27;END&#x27;)</span><br></pre></td></tr></table></figure>
<p><code>int()</code>函数可能会抛出<code>ValueError</code>，所以我们用一个<code>except</code>捕获<code>ValueError</code>，用另一个<code>except</code>捕获<code>ZeroDivisionError</code>。</p>
<p>此外，如果没有错误发生，可以在<code>except</code>语句块后面加一个<code>else</code>，当没有错误发生时，会自动执行<code>else</code>语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(&#x27;try...&#x27;)</span><br><span class="line">    r = 10 / int(&#x27;2&#x27;)</span><br><span class="line">    print(&#x27;result:&#x27;, r)</span><br><span class="line">except ValueError as e:</span><br><span class="line">    print(&#x27;ValueError:&#x27;, e)</span><br><span class="line">except ZeroDivisionError as e:</span><br><span class="line">    print(&#x27;ZeroDivisionError:&#x27;, e)</span><br><span class="line">else:</span><br><span class="line">    print(&#x27;no error!&#x27;)</span><br><span class="line">finally:</span><br><span class="line">    print(&#x27;finally...&#x27;)</span><br><span class="line">print(&#x27;END&#x27;)</span><br></pre></td></tr></table></figure>
<p>Python的错误其实也是class，所有的错误类型都继承自<code>BaseException</code>，所以在使用<code>except</code>时需要注意的是，它不但捕获该类型的错误，还把其子类也“一网打尽”。比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    foo()</span><br><span class="line">except ValueError as e:</span><br><span class="line">    print(&#x27;ValueError&#x27;)</span><br><span class="line">except UnicodeError as e:</span><br><span class="line">    print(&#x27;UnicodeError&#x27;)</span><br></pre></td></tr></table></figure>
<p>第二个<code>except</code>永远也捕获不到<code>UnicodeError</code>，因为<code>UnicodeError</code>是<code>ValueError</code>的子类，如果有，也被第一个<code>except</code>给捕获了。</p>
<h2 id="raise"><a class="header-anchor" href="#raise"></a>raise</h2>
<p>因为错误是class，捕获一个错误就是捕获到该class的一个实例。因此，错误并不是凭空产生的，而是有意创建并抛出的。Python的内置函数会抛出很多类型的错误，我们自己编写的函数也可以抛出错误。</p>
<p>如果要抛出错误，首先根据需要，可以定义一个错误的class，选择好继承关系，然后，用<code>raise</code>语句抛出一个错误的实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># err_raise.py</span><br><span class="line">class FooError(ValueError):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def foo(s):</span><br><span class="line">    n = int(s)</span><br><span class="line">    if n==0:</span><br><span class="line">        raise FooError(&#x27;invalid value: %s&#x27; % s)</span><br><span class="line">    return 10 / n</span><br><span class="line"></span><br><span class="line">foo(&#x27;0&#x27;)</span><br></pre></td></tr></table></figure>
<p>执行，可以最后跟踪到我们自己定义的错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python3 err_raise.py </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;err_throw.py&quot;, line 11, in &lt;module&gt;</span><br><span class="line">    foo(&#x27;0&#x27;)</span><br><span class="line">  File &quot;err_throw.py&quot;, line 8, in foo</span><br><span class="line">    raise FooError(&#x27;invalid value: %s&#x27; % s)</span><br><span class="line">__main__.FooError: invalid value: 0</span><br></pre></td></tr></table></figure>
<p>只有在必要的时候才定义我们自己的错误类型。如果可以选择Python已有的内置的错误类型（比如<code>ValueError</code>，<code>TypeError</code>），尽量使用Python内置的错误类型。</p>
<p>最后，我们来看另一种错误处理的方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># err_reraise.py</span><br><span class="line"></span><br><span class="line">def foo(s):</span><br><span class="line">    n = int(s)</span><br><span class="line">    if n==0:</span><br><span class="line">        raise ValueError(&#x27;invalid value: %s&#x27; % s)</span><br><span class="line">    return 10 / n</span><br><span class="line"></span><br><span class="line">def bar():</span><br><span class="line">    try:</span><br><span class="line">        foo(&#x27;0&#x27;)</span><br><span class="line">    except ValueError as e:</span><br><span class="line">        print(&#x27;ValueError!&#x27;)</span><br><span class="line">        raise</span><br><span class="line"></span><br><span class="line">bar()</span><br></pre></td></tr></table></figure>
<p>在<code>bar()</code>函数中，我们明明已经捕获了错误，但是，打印一个<code>ValueError!</code>后，又把错误通过<code>raise</code>语句抛出去了，这不有病么？</p>
<p>其实这种错误处理方式不但没病，而且相当常见。捕获错误目的只是记录一下，便于后续追踪。但是，由于当前函数不知道应该怎么处理该错误，所以，最恰当的方式是继续往上抛，让顶层调用者去处理。好比一个员工处理不了一个问题时，就把问题抛给他的老板，如果他的老板也处理不了，就一直往上抛，最终会抛给CEO去处理。</p>
<p><code>raise</code>语句如果不带参数，就会把当前错误原样抛出。此外，在<code>except</code>中<code>raise</code>一个Error，还可以把一种类型的错误转化成另一种类型：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    10 / 0</span><br><span class="line">except ZeroDivisionError:</span><br><span class="line">    raise ValueError(&#x27;input error!&#x27;)</span><br></pre></td></tr></table></figure>
<p>只要是合理的转换逻辑就可以，但是，决不应该把一个<code>IOError</code>转换成毫不相干的<code>ValueError</code>。</p>
<h2 id="assert"><a class="header-anchor" href="#assert"></a>assert</h2>
<p>凡是用<code>print()</code>来辅助查看的地方，都可以用断言（assert）来替代：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def foo(s):</span><br><span class="line">    n = int(s)</span><br><span class="line">    assert n != 0, &#x27;n is zero!&#x27;</span><br><span class="line">    return 10 / n</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    foo(&#x27;0&#x27;)</span><br></pre></td></tr></table></figure>
<p><code>assert</code>的意思是，表达式<code>n != 0</code>应该是<code>True</code>，否则，根据程序运行的逻辑，后面的代码肯定会出错。</p>
<p>如果断言失败，<code>assert</code>语句本身就会抛出<code>AssertionError</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python err.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">AssertionError: n is zero!</span><br></pre></td></tr></table></figure>
<p>程序中如果到处充斥着<code>assert</code>，和<code>print()</code>相比也好不到哪去。不过，启动Python解释器时可以用<code>-O</code>参数来关闭<code>assert</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python -O err.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure>
<p>注意：断言的开关“-O”是英文大写字母O，不是数字0。</p>
<p>关闭后，你可以把所有的<code>assert</code>语句当成<code>pass</code>来看.</p>
<h1 id="注意事项"><a class="header-anchor" href="#注意事项"></a>注意事项</h1>
<h2 id="文件路径"><a class="header-anchor" href="#文件路径"></a>文件路径</h2>
<p>Python中的相对路径，是相对于<strong>当前被执行文件</strong>的路径， 举例来说， 如果<code>main.py</code> 中<code>import</code>了<code>A.py</code>, 而 <code>A.py</code>中有相对路径<code>../path</code>, 则在运行<code>main.py</code>时， 该路径实际上是相对于<code>main.py</code>的， 而如果单独运行<code>A.py</code>，该路径才是相对于<code>A.py</code>的</p>
<h1 id="小技巧"><a class="header-anchor" href="#小技巧"></a>小技巧</h1>
<h2 id="矩阵"><a class="header-anchor" href="#矩阵"></a>矩阵</h2>
<p>转置矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">two_dimensional_array</span>(<span class="params">m</span>):</span><br><span class="line">    row_nums = <span class="built_in">len</span>(m)</span><br><span class="line">    col_nums = <span class="built_in">len</span>(m[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;m = &quot;</span>, m)</span><br><span class="line">    <span class="built_in">print</span>( <span class="string">&quot;row_nums = &#123;0&#125;, col_nums = &#123;1&#125;&quot;</span>.<span class="built_in">format</span>( row_nums, col_nums ) )</span><br><span class="line">    rows = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>( <span class="number">0</span>, col_nums ):</span><br><span class="line">        tmp = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>( <span class="number">0</span>, row_nums ):</span><br><span class="line">            </span><br><span class="line">            tmp.append(m[i][j])</span><br><span class="line">            <span class="comment">#print( m[i][j] )</span></span><br><span class="line">            <span class="keyword">if</span> i == row_nums - <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(tmp)</span><br><span class="line">                rows.append(tmp)</span><br><span class="line">    res_m = [ rows[j] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>( <span class="number">0</span>, col_nums ) ]        </span><br><span class="line">    <span class="keyword">return</span> res_m</span><br><span class="line"></span><br><span class="line">//输入 [[<span class="number">1</span>, <span class="string">&#x27;j&#x27;</span>], [<span class="number">2</span>, <span class="string">&#x27;k&#x27;</span>], [<span class="number">3</span>, <span class="string">&#x27;l&#x27;</span>], [<span class="number">4</span>, <span class="string">&#x27;m&#x27;</span>], [<span class="number">5</span>, <span class="string">&#x27;n&#x27;</span>]]</span><br><span class="line">//输出 [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>]]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意：</p>
<p>python二维数组可以<code>res_m = [ rows[j] for j in range( 0, col_nums ) ] </code>创建。也就是说，列表生成式可以由元素生成列表，而这个元素本身也可以是列表，所以最后会生成一个<code>二维列表</code>。</p>
<!--more-->
<p>二维列表可以用列表生成式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = [ <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> ]</span><br><span class="line">l2 = [ <span class="string">&quot;j&quot;</span>,<span class="string">&quot;k&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;m&quot;</span>,<span class="string">&quot;n&quot;</span> ]</span><br><span class="line">l3 = [ l1,l2 ] // 方法一</span><br><span class="line">l4 = [ l3[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(l3)) ] //方法二,列表生成式</span><br><span class="line"></span><br><span class="line">l5 = [].append(l1)</span><br><span class="line">l5.append(l1)</span><br><span class="line">l5.append(l2)  // 方法三</span><br><span class="line"></span><br><span class="line">//注意, <span class="string">&quot;+&quot;</span>会把列表拼接起来, 而append()会把参数整个当作一个元素加到列表末尾</span><br><span class="line">l6 = l1  + l2 // 结果是[ <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>, <span class="string">&quot;j&quot;</span>,<span class="string">&quot;k&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;m&quot;</span>,<span class="string">&quot;n&quot;</span> ] , 可以看到仍是一维的</span><br><span class="line">   </span><br></pre></td></tr></table></figure>
<h2 id=""><a class="header-anchor" href="#"></a></h2>
]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python REGEX</title>
    <url>/2022/08/26/Python-REGEX/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>re模块</li>
<li>切分字符串</li>
<li>分组</li>
<li>贪婪匹配</li>
<li>编译</li>
</ul>
<span id="more"></span>
<h1 id="re模块"><a class="header-anchor" href="#re模块"></a>re模块</h1>
<p>Python提供<code>re</code>模块，包含所有正则表达式的功能。由于Python的字符串本身也用<code>\</code>转义，所以要特别注意：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = &#x27;ABC\\-001&#x27; # Python的字符串</span><br><span class="line"># 对应的正则表达式字符串变成：</span><br><span class="line"># &#x27;ABC\-001&#x27;</span><br></pre></td></tr></table></figure>
<p>因此我们强烈建议使用Python的<code>r</code>前缀，就不用考虑转义的问题了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = r&#x27;ABC\-001&#x27; # Python的字符串</span><br><span class="line"># 对应的正则表达式字符串不变：</span><br><span class="line"># &#x27;ABC\-001&#x27;</span><br></pre></td></tr></table></figure>
<p>先看看如何判断正则表达式是否匹配：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; re.match(r&#x27;^\d&#123;3&#125;\-\d&#123;3,8&#125;$&#x27;, &#x27;010-12345&#x27;)</span><br><span class="line">&lt;_sre.SRE_Match object; span=(0, 9), match=&#x27;010-12345&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; re.match(r&#x27;^\d&#123;3&#125;\-\d&#123;3,8&#125;$&#x27;, &#x27;010 12345&#x27;)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p><code>match()</code>方法判断是否匹配，如果匹配成功，返回一个<code>Match</code>对象，否则返回<code>None</code>。常见的判断方法就是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test = <span class="string">&#x27;用户输入的字符串&#x27;</span></span><br><span class="line"><span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">r&#x27;正则表达式&#x27;</span>, test):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;failed&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="切分字符串"><a class="header-anchor" href="#切分字符串"></a>切分字符串</h1>
<p>用正则表达式切分字符串比用固定的字符更灵活，请看正常的切分代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &#x27;a b   c&#x27;.split(&#x27; &#x27;)</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;c&#x27;]</span><br></pre></td></tr></table></figure>
<p>嗯，无法识别连续的空格，用正则表达式试试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; re.split(r&#x27;\s+&#x27;, &#x27;a b   c&#x27;)</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br></pre></td></tr></table></figure>
<p>无论多少个空格都可以正常分割。加入<code>,</code>试试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; re.split(r&#x27;[\s\,]+&#x27;, &#x27;a,b, c  d&#x27;)</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span><br></pre></td></tr></table></figure>
<p>再加入<code>;</code>试试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; re.split(r&#x27;[\s\,\;]+&#x27;, &#x27;a,b;; c  d&#x27;)</span><br><span class="line">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span><br></pre></td></tr></table></figure>
<p>如果用户输入了一组标签，下次记得用正则表达式来把不规范的输入转化成正确的数组。</p>
<h1 id="分组"><a class="header-anchor" href="#分组"></a>分组</h1>
<p>除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用<code>()</code>表示的就是要提取的分组（Group）。比如：</p>
<p><code>^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$</code>分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; m = re.match(r&#x27;^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$&#x27;, &#x27;010-12345&#x27;)</span><br><span class="line">&gt;&gt;&gt; m</span><br><span class="line">&lt;_sre.SRE_Match object; span=(0, 9), match=&#x27;010-12345&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; m.group(0)</span><br><span class="line">&#x27;010-12345&#x27;</span><br><span class="line">&gt;&gt;&gt; m.group(1)</span><br><span class="line">&#x27;010&#x27;</span><br><span class="line">&gt;&gt;&gt; m.group(2)</span><br><span class="line">&#x27;12345&#x27;</span><br></pre></td></tr></table></figure>
<p>如果正则表达式中定义了组，就可以在<code>Match</code>对象上用<code>group()</code>方法提取出子串来。</p>
<p>注意到<code>group(0)</code>永远是原始字符串，<code>group(1)</code>、<code>group(2)</code>……表示第1、2、……个子串。</p>
<p>提取子串非常有用。来看一个更凶残的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t = &#x27;19:05:30&#x27;</span><br><span class="line">&gt;&gt;&gt; m = re.match(r&#x27;^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$&#x27;, t)</span><br><span class="line">&gt;&gt;&gt; m.groups()</span><br><span class="line">(&#x27;19&#x27;, &#x27;05&#x27;, &#x27;30&#x27;)</span><br></pre></td></tr></table></figure>
<p>这个正则表达式可以直接识别合法的时间。但是有些时候，用正则表达式也无法做到完全验证，比如识别日期：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;^(0[1-9]|1[0-2]|[0-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[0-9])$&#x27;</span><br></pre></td></tr></table></figure>
<p>对于<code>'2-30'</code>，<code>'4-31'</code>这样的非法日期，用正则还是识别不了，或者说写出来非常困难，这时就需要程序配合识别了。</p>
<h1 id="贪婪匹配"><a class="header-anchor" href="#贪婪匹配"></a>贪婪匹配</h1>
<p>最后需要特别指出的是，Py的正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的<code>0</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; re.match(r&#x27;^(\d+)(0*)$&#x27;, &#x27;102300&#x27;).groups()</span><br><span class="line">(&#x27;102300&#x27;, &#x27;&#x27;)</span><br></pre></td></tr></table></figure>
<p>由于<code>\d+</code>采用贪婪匹配，直接把后面的<code>0</code>全部匹配了，结果<code>0*</code>只能匹配空字符串了。</p>
<p>必须让<code>\d+</code>采用非贪婪匹配（也就是尽可能少匹配），才能把后面的<code>0</code>匹配出来，加个<code>?</code>就可以让<code>\d+</code>采用非贪婪匹配：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; re.match(r&#x27;^(\d+?)(0*)$&#x27;, &#x27;102300&#x27;).groups()</span><br><span class="line">(&#x27;1023&#x27;, &#x27;00&#x27;)</span><br></pre></td></tr></table></figure>
<h1 id="编译"><a class="header-anchor" href="#编译"></a>编译</h1>
<p>当我们在Python中使用正则表达式时，re模块内部会干两件事情：</p>
<ol>
<li>编译正则表达式，如果正则表达式的字符串本身不合法，会报错；</li>
<li>用编译后的正则表达式去匹配字符串。</li>
</ol>
<p>如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import re</span><br><span class="line"># 编译:</span><br><span class="line">&gt;&gt;&gt; re_telephone = re.compile(r&#x27;^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$&#x27;)</span><br><span class="line"># 使用：</span><br><span class="line">&gt;&gt;&gt; re_telephone.match(&#x27;010-12345&#x27;).groups()</span><br><span class="line">(&#x27;010&#x27;, &#x27;12345&#x27;)</span><br><span class="line">&gt;&gt;&gt; re_telephone.match(&#x27;010-8086&#x27;).groups()</span><br><span class="line">(&#x27;010&#x27;, &#x27;8086&#x27;)</span><br></pre></td></tr></table></figure>
<p>编译后生成Regular Expression对象，由于该对象自己包含了正则表达式，所以调用对应的方法时不用给出正则字符串。</p>
]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python OOP Advanced</title>
    <url>/2022/08/25/Python-OOP-Advanced/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Abstract Class</li>
<li>Static Member</li>
<li>Inner Class</li>
<li><code>_slots_</code></li>
<li>@propetry</li>
<li>multi-inheritance</li>
<li>Specialize Class</li>
<li>Enum</li>
<li>metaclass</li>
</ul>
<p>绝大部分抄自<a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017501628721248">廖雪峰的教程</a></p>
<span id="more"></span>
<h1 id="抽象类"><a class="header-anchor" href="#抽象类"></a>抽象类</h1>
<h1 id="静态成员"><a class="header-anchor" href="#静态成员"></a>静态成员</h1>
<p>静态变量和静态方法都可以通过类名和对象进行访问</p>
<p>静态方法：加装饰器<code>@staticmethod</code></p>
<p>静态变量：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;docstring for ClassName&quot;&quot;&quot;</span></span><br><span class="line">    arg=<span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, arg</span>):</span><br><span class="line">        self.arg = arg</span><br><span class="line"></span><br><span class="line">obj = ClassName(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(obj.arg)</span><br><span class="line"><span class="built_in">print</span>(ClassName.arg)</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">[Finished <span class="keyword">in</span> <span class="number">0.1</span>s]</span><br></pre></td></tr></table></figure>
<h1 id="内部类"><a class="header-anchor" href="#内部类"></a>内部类</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 外部类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">## 内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">## 多级内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">InnerInner</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## 另一个内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">_Inner</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">## ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以使用self关键词来访问内部类，这样我们就可以快速创建内部类的实例，并且根据需要在外部类中执行操作。但是，我们是不能在内部类中访问外部类的。让我们看一下下面的例子：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">class Outer:</span><br><span class="line">    &quot;&quot;&quot;外部类&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        ## 实例化内部类</span><br><span class="line">        self.inner = self.Inner()</span><br><span class="line"></span><br><span class="line">    def reveal(self):</span><br><span class="line">        ## calling the &#x27;Inner&#x27; class function display</span><br><span class="line">        self.inner.inner_display(&quot;Calling Inner class function from Outer class&quot;)</span><br><span class="line"></span><br><span class="line">    class Inner:</span><br><span class="line">        &quot;&quot;&quot;内部类&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        def inner_display(self, msg):</span><br><span class="line">            print(msg)</span><br></pre></td></tr></table></figure>
<p>现在，我们来创建外部类的实例，并调用它的reveal()方法来执行内部类的方法inner_display()。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">## 创建外部类的实例对象</span><br><span class="line">outer = Outer()</span><br><span class="line">## 调用&#x27;reveal()&#x27;方法</span><br><span class="line">outer.reveal()</span><br></pre></td></tr></table></figure>
<p>让我们看看访问内部类的另一种方法，不过这种方式的效率相对低一些。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Outer().Inner().inner_display(&quot;Calling the Inner class method directly&quot;)</span><br></pre></td></tr></table></figure>
<p>如果我们想摆脱外部类的控制，在运行的时候独立地创建一个内部类的实例对象，也是可以做到的。如下面的代码所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">outer = Outer()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 实例化内部类</span></span><br><span class="line">inner = outer.Inner() <span class="comment">## inner = Outer().Inner() or inner = outer.inner</span></span><br><span class="line">inner.inner_display(<span class="string">&quot;Just Print It!&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="操作符重载"><a class="header-anchor" href="#操作符重载"></a>操作符重载</h1>
<h1 id="slots"><a class="header-anchor" href="#slots"></a>_<em>slots_</em></h1>
<p>正常情况下，当我们定义了一个class，创建了一个class的实例后，我们可以给该实例绑定任何属性和方法，这就是动态语言的灵活性。先定义class：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<p>然后，尝试给实例绑定一个属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student()</span><br><span class="line">&gt;&gt;&gt; s.name = &#x27;Michael&#x27; # 动态给实例绑定一个属性</span><br><span class="line">&gt;&gt;&gt; print(s.name)</span><br><span class="line">Michael</span><br></pre></td></tr></table></figure>
<p>还可以尝试给实例绑定一个方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def set_age(self, age): # 定义一个函数作为实例方法</span><br><span class="line">...     self.age = age</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; from types import MethodType</span><br><span class="line">&gt;&gt;&gt; s.set_age = MethodType(set_age, s) # 给实例绑定一个方法</span><br><span class="line">&gt;&gt;&gt; s.set_age(25) # 调用实例方法</span><br><span class="line">&gt;&gt;&gt; s.age # 测试结果</span><br><span class="line">25</span><br></pre></td></tr></table></figure>
<p>但是，给一个实例绑定的方法，对另一个实例是不起作用的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s2 = Student() # 创建新的实例</span><br><span class="line">&gt;&gt;&gt; s2.set_age(25) # 尝试调用方法</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#x27;Student&#x27; object has no attribute &#x27;set_age&#x27;</span><br></pre></td></tr></table></figure>
<p>为了给所有实例都绑定方法，可以给class绑定方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def set_score(self, score):</span><br><span class="line">...     self.score = score</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; Student.set_score = set_score</span><br></pre></td></tr></table></figure>
<p>给class绑定方法后，所有实例均可调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s.set_score(100)</span><br><span class="line">&gt;&gt;&gt; s.score</span><br><span class="line">100</span><br><span class="line">&gt;&gt;&gt; s2.set_score(99)</span><br><span class="line">&gt;&gt;&gt; s2.score</span><br><span class="line">99</span><br></pre></td></tr></table></figure>
<p>通常情况下，上面的<code>set_score</code>方法可以直接定义在class中，但动态绑定允许我们在程序运行的过程中动态给class加上功能，这在静态语言中很难实现。</p>
<p><strong>使用slots</strong></p>
<p>但是，如果我们想要限制实例的属性怎么办？比如，只允许对Student实例添加<code>name</code>和<code>age</code>属性。</p>
<p>为了达到限制的目的，Python允许在定义class的时候，定义一个特殊的<code>__slots__</code>变量，来限制该class实例能添加的属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    __slots__ = (&#x27;name&#x27;, &#x27;age&#x27;) # 用tuple定义允许绑定的属性名称</span><br></pre></td></tr></table></figure>
<p>然后，我们试试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student() # 创建新的实例</span><br><span class="line">&gt;&gt;&gt; s.name = &#x27;Michael&#x27; # 绑定属性&#x27;name&#x27;</span><br><span class="line">&gt;&gt;&gt; s.age = 25 # 绑定属性&#x27;age&#x27;</span><br><span class="line">&gt;&gt;&gt; s.score = 99 # 绑定属性&#x27;score&#x27;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#x27;Student&#x27; object has no attribute &#x27;score&#x27;</span><br></pre></td></tr></table></figure>
<p>由于<code>'score'</code>没有被放到<code>__slots__</code>中，所以不能绑定<code>score</code>属性，试图绑定<code>score</code>将得到<code>AttributeError</code>的错误。</p>
<p>使用<code>__slots__</code>要注意，<code>__slots__</code>定义的属性仅对当前类实例起作用，对继承的子类是不起作用的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class GraduateStudent(Student):</span><br><span class="line">...     pass</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; g = GraduateStudent()</span><br><span class="line">&gt;&gt;&gt; g.score = 9999</span><br></pre></td></tr></table></figure>
<p>除非在子类中也定义<code>__slots__</code>，这样，子类实例允许定义的属性就是自身的<code>__slots__</code>加上父类的<code>__slots__</code>。</p>
<h1 id="property"><a class="header-anchor" href="#property"></a>@property</h1>
<p>在绑定属性时，如果我们直接把属性暴露出去，虽然写起来很简单，但是，没办法检查参数，导致可以把成绩随便改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s = Student()</span><br><span class="line">s.score = 9999</span><br></pre></td></tr></table></figure>
<p>这显然不合逻辑。为了限制score的范围，可以通过一个<code>set_score()</code>方法来设置成绩，再通过一个<code>get_score()</code>来获取成绩，这样，在<code>set_score()</code>方法里，就可以检查参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def get_score(self):</span><br><span class="line">         return self._score</span><br><span class="line"></span><br><span class="line">    def set_score(self, value):</span><br><span class="line">        if not isinstance(value, int):</span><br><span class="line">            raise ValueError(&#x27;score must be an integer!&#x27;)</span><br><span class="line">        if value &lt; 0 or value &gt; 100:</span><br><span class="line">            raise ValueError(&#x27;score must between 0 ~ 100!&#x27;)</span><br><span class="line">        self._score = value</span><br></pre></td></tr></table></figure>
<p>现在，对任意的Student实例进行操作，就不能随心所欲地设置score了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student()</span><br><span class="line">&gt;&gt;&gt; s.set_score(60) # ok!</span><br><span class="line">&gt;&gt;&gt; s.get_score()</span><br><span class="line">60</span><br><span class="line">&gt;&gt;&gt; s.set_score(9999)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: score must between 0 ~ 100!</span><br></pre></td></tr></table></figure>
<p>但是，上面的调用方法又略显复杂，没有直接用属性这么直接简单。</p>
<p>有没有既能检查参数，又可以用类似属性这样简单的方式来访问类的变量呢？对于追求完美的Python程序员来说，这是必须要做到的！</p>
<p>还记得装饰器（decorator）可以给函数动态加上功能吗？对于类的方法，装饰器一样起作用。Python内置的<code>@property</code>装饰器就是负责把一个方法变成属性调用的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def score(self):</span><br><span class="line">        return self._score</span><br><span class="line"></span><br><span class="line">    @score.setter</span><br><span class="line">    def score(self, value):</span><br><span class="line">        if not isinstance(value, int):</span><br><span class="line">            raise ValueError(&#x27;score must be an integer!&#x27;)</span><br><span class="line">        if value &lt; 0 or value &gt; 100:</span><br><span class="line">            raise ValueError(&#x27;score must between 0 ~ 100!&#x27;)</span><br><span class="line">        self._score = value</span><br></pre></td></tr></table></figure>
<p><code>@property</code>的实现比较复杂，我们先考察如何使用。把一个getter方法变成属性，只需要加上<code>@property</code>就可以了，此时，<code>@property</code>本身又创建了另一个装饰器<code>@score.setter</code>，负责把一个setter方法变成属性赋值，于是，我们就拥有一个可控的属性操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student()</span><br><span class="line">&gt;&gt;&gt; s.score = 60 # OK，实际转化为s.set_score(60)</span><br><span class="line">&gt;&gt;&gt; s.score # OK，实际转化为s.get_score()</span><br><span class="line">60</span><br><span class="line">&gt;&gt;&gt; s.score = 9999</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: score must between 0 ~ 100!</span><br></pre></td></tr></table></figure>
<p>注意到这个神奇的<code>@property</code>，我们在对实例属性操作的时候，就知道该属性很可能不是直接暴露的，而是通过getter和setter方法来实现的。</p>
<p>还可以定义只读属性，只定义getter方法，不定义setter方法就是一个只读属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def birth(self):</span><br><span class="line">        return self._birth</span><br><span class="line"></span><br><span class="line">    @birth.setter</span><br><span class="line">    def birth(self, value):</span><br><span class="line">        self._birth = value</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def age(self):</span><br><span class="line">        return 2015 - self._birth</span><br></pre></td></tr></table></figure>
<p>上面的<code>birth</code>是可读写属性，而<code>age</code>就是一个<em>只读</em>属性，因为<code>age</code>可以根据<code>birth</code>和当前时间计算出来。</p>
<h1 id="多重继承"><a class="header-anchor" href="#多重继承"></a>多重继承</h1>
<p>继承是面向对象编程的一个重要的方式，因为通过继承，子类就可以扩展父类的功能。</p>
<p>回忆一下<code>Animal</code>类层次的设计，假设我们要实现以下4种动物：</p>
<ul>
<li>Dog - 狗狗；</li>
<li>Bat - 蝙蝠；</li>
<li>Parrot - 鹦鹉；</li>
<li>Ostrich - 鸵鸟。</li>
</ul>
<p>如果按照哺乳动物和鸟类归类，我们可以设计出这样的类的层次：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                ┌───────────────┐</span><br><span class="line">                │    Animal     │</span><br><span class="line">                └───────────────┘</span><br><span class="line">                        │</span><br><span class="line">           ┌────────────┴────────────┐</span><br><span class="line">           │                         │</span><br><span class="line">           ▼                         ▼</span><br><span class="line">    ┌─────────────┐           ┌─────────────┐</span><br><span class="line">    │   Mammal    │           │    Bird     │</span><br><span class="line">    └─────────────┘           └─────────────┘</span><br><span class="line">           │                         │</span><br><span class="line">     ┌─────┴──────┐            ┌─────┴──────┐</span><br><span class="line">     │            │            │            │</span><br><span class="line">     ▼            ▼            ▼            ▼</span><br><span class="line">┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐</span><br><span class="line">│   Dog   │  │   Bat   │  │ Parrot  │  │ Ostrich │</span><br><span class="line">└─────────┘  └─────────┘  └─────────┘  └─────────┘</span><br></pre></td></tr></table></figure>
<p>但是如果按照“能跑”和“能飞”来归类，我们就应该设计出这样的类的层次：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                ┌───────────────┐</span><br><span class="line">                │    Animal     │</span><br><span class="line">                └───────────────┘</span><br><span class="line">                        │</span><br><span class="line">           ┌────────────┴────────────┐</span><br><span class="line">           │                         │</span><br><span class="line">           ▼                         ▼</span><br><span class="line">    ┌─────────────┐           ┌─────────────┐</span><br><span class="line">    │  Runnable   │           │   Flyable   │</span><br><span class="line">    └─────────────┘           └─────────────┘</span><br><span class="line">           │                         │</span><br><span class="line">     ┌─────┴──────┐            ┌─────┴──────┐</span><br><span class="line">     │            │            │            │</span><br><span class="line">     ▼            ▼            ▼            ▼</span><br><span class="line">┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐</span><br><span class="line">│   Dog   │  │ Ostrich │  │ Parrot  │  │   Bat   │</span><br><span class="line">└─────────┘  └─────────┘  └─────────┘  └─────────┘</span><br></pre></td></tr></table></figure>
<p>如果要把上面的两种分类都包含进来，我们就得设计更多的层次：</p>
<ul>
<li>哺乳类：能跑的哺乳类，能飞的哺乳类；</li>
<li>鸟类：能跑的鸟类，能飞的鸟类。</li>
</ul>
<p>这么一来，类的层次就复杂了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                ┌───────────────┐</span><br><span class="line">                │    Animal     │</span><br><span class="line">                └───────────────┘</span><br><span class="line">                        │</span><br><span class="line">           ┌────────────┴────────────┐</span><br><span class="line">           │                         │</span><br><span class="line">           ▼                         ▼</span><br><span class="line">    ┌─────────────┐           ┌─────────────┐</span><br><span class="line">    │   Mammal    │           │    Bird     │</span><br><span class="line">    └─────────────┘           └─────────────┘</span><br><span class="line">           │                         │</span><br><span class="line">     ┌─────┴──────┐            ┌─────┴──────┐</span><br><span class="line">     │            │            │            │</span><br><span class="line">     ▼            ▼            ▼            ▼</span><br><span class="line">┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐</span><br><span class="line">│  MRun   │  │  MFly   │  │  BRun   │  │  BFly   │</span><br><span class="line">└─────────┘  └─────────┘  └─────────┘  └─────────┘</span><br><span class="line">     │            │            │            │</span><br><span class="line">     │            │            │            │</span><br><span class="line">     ▼            ▼            ▼            ▼</span><br><span class="line">┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐</span><br><span class="line">│   Dog   │  │   Bat   │  │ Ostrich │  │ Parrot  │</span><br><span class="line">└─────────┘  └─────────┘  └─────────┘  └─────────┘</span><br></pre></td></tr></table></figure>
<p>如果要再增加“宠物类”和“非宠物类”，这么搞下去，类的数量会呈指数增长，很明显这样设计是不行的。</p>
<p>正确的做法是采用多重继承。首先，主要的类层次仍按照哺乳类和鸟类设计：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Animal(object):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># 大类:</span><br><span class="line">class Mammal(Animal):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Bird(Animal):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"># 各种动物:</span><br><span class="line">class Dog(Mammal):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Bat(Mammal):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Parrot(Bird):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Ostrich(Bird):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<p>现在，我们要给动物再加上<code>Runnable</code>和<code>Flyable</code>的功能，只需要先定义好<code>Runnable</code>和<code>Flyable</code>的类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Runnable(object):</span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#x27;Running...&#x27;)</span><br><span class="line"></span><br><span class="line">class Flyable(object):</span><br><span class="line">    def fly(self):</span><br><span class="line">        print(&#x27;Flying...&#x27;)</span><br></pre></td></tr></table></figure>
<p>对于需要<code>Runnable</code>功能的动物，就多继承一个<code>Runnable</code>，例如<code>Dog</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Dog(Mammal, Runnable):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<p>对于需要<code>Flyable</code>功能的动物，就多继承一个<code>Flyable</code>，例如<code>Bat</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Bat(Mammal, Flyable):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<p>通过多重继承，一个子类就可以同时获得多个父类的所有功能。</p>
<h2 id="MixIn"><a class="header-anchor" href="#MixIn"></a>MixIn</h2>
<p>在设计类的继承关系时，通常，主线都是单一继承下来的，例如，<code>Ostrich</code>继承自<code>Bird</code>。但是，如果需要“混入”额外的功能，通过多重继承就可以实现，比如，让<code>Ostrich</code>除了继承自<code>Bird</code>外，再同时继承<code>Runnable</code>。这种设计通常称之为MixIn。</p>
<p>为了更好地看出继承关系，我们把<code>Runnable</code>和<code>Flyable</code>改为<code>RunnableMixIn</code>和<code>FlyableMixIn</code>。类似的，你还可以定义出肉食动物<code>CarnivorousMixIn</code>和植食动物<code>HerbivoresMixIn</code>，让某个动物同时拥有好几个MixIn：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Dog(Mammal, RunnableMixIn, CarnivorousMixIn):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<p>MixIn的目的就是给一个类增加多个功能，这样，在设计类的时候，我们优先考虑通过多重继承来组合多个MixIn的功能，而不是设计多层次的复杂的继承关系。</p>
<p>Python自带的很多库也使用了MixIn。举个例子，Python自带了<code>TCPServer</code>和<code>UDPServer</code>这两类网络服务，而要同时服务多个用户就必须使用多进程或多线程模型，这两种模型由<code>ForkingMixIn</code>和<code>ThreadingMixIn</code>提供。通过组合，我们就可以创造出合适的服务来。</p>
<p>比如，编写一个多进程模式的TCP服务，定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyTCPServer(TCPServer, ForkingMixIn):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<p>编写一个多线程模式的UDP服务，定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyUDPServer(UDPServer, ThreadingMixIn):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<p>如果你打算搞一个更先进的协程模型，可以编写一个<code>CoroutineMixIn</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyTCPServer(TCPServer, CoroutineMixIn):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<p>这样一来，我们不需要复杂而庞大的继承链，只要选择组合不同的类的功能，就可以快速构造出所需的子类。</p>
<h1 id="Specialize-Class"><a class="header-anchor" href="#Specialize-Class"></a>Specialize Class</h1>
<p>看到类似<code>__slots__</code>这种形如<code>__xxx__</code>的变量或者函数名就要注意，这些在Python中是有特殊用途的。</p>
<p><code>__slots__</code>我们已经知道怎么用了，<code>__len__()</code>方法我们也知道是为了能让class作用于<code>len()</code>函数。</p>
<p>除此之外，Python的class中还有许多这样有特殊用途的函数，可以帮助我们定制类。</p>
<h2 id="打印对象"><a class="header-anchor" href="#打印对象"></a>打印对象</h2>
<p>当我们使用 <code>print()</code> 函数在 Python 中打印对象时，<u>将调用对象的 <code>__str__()</code> 方法</u>. 如果<code>__str__()</code>未定义，则 <code>__str__()</code> 返回 <code>__repr__()</code> 方法的返回值.</p>
<ul>
<li><code>__repr__() -&gt; str</code> : 以字符串形式返回对象的可打印表示形式。默认情况下，它返回对象的类的名称和对象的地址。</li>
<li><code>__str__() -&gt; str</code>: 返回 Python 中对象的字符串版本. 如果对象不具有 <code>__str__()</code> 方法，则它返回与 <code>__repr__()</code> 方法相同的值.
<ul>
<li>我们一般重载<code>__str__()</code></li>
</ul>
</li>
</ul>
<h2 id="str"><a class="header-anchor" href="#str"></a>_<em>str_</em></h2>
<p>我们先定义一个<code>Student</code>类，打印一个实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class Student(object):</span><br><span class="line">...     def __init__(self, name):</span><br><span class="line">...         self.name = name</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; print(Student(&#x27;Michael&#x27;))</span><br><span class="line">&lt;__main__.Student object at 0x109afb190&gt;</span><br></pre></td></tr></table></figure>
<p>打印出一堆<code>&lt;__main__.Student object at 0x109afb190&gt;</code>，不好看。</p>
<p>怎么才能打印得好看呢？只需要定义好<code>__str__()</code>方法，返回一个好看的字符串就可以了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; class Student(object):</span><br><span class="line">...     def __init__(self, name):</span><br><span class="line">...         self.name = name</span><br><span class="line">...     def __str__(self):</span><br><span class="line">...         return &#x27;Student object (name: %s)&#x27; % self.name</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; print(Student(&#x27;Michael&#x27;))</span><br><span class="line">Student object (name: Michael)</span><br></pre></td></tr></table></figure>
<p>这样打印出来的实例，不但好看，而且容易看出实例内部重要的数据。</p>
<p>但是细心的朋友会发现直接敲变量不用<code>print</code>，打印出来的实例还是不好看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student(&#x27;Michael&#x27;)</span><br><span class="line">&gt;&gt;&gt; s</span><br><span class="line">&lt;__main__.Student object at 0x109afb310&gt;</span><br></pre></td></tr></table></figure>
<p>这是因为直接显示变量调用的不是<code>__str__()</code>，而是<code>__repr__()</code>，两者的区别是<code>__str__()</code>返回用户看到的字符串，而<code>__repr__()</code>返回程序开发者看到的字符串，也就是说，<code>__repr__()</code>是为调试服务的。</p>
<p>解决办法是再定义一个<code>__repr__()</code>。但是通常<code>__str__()</code>和<code>__repr__()</code>代码都是一样的，所以，有个偷懒的写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &#x27;Student object (name=%s)&#x27; % self.name</span><br><span class="line">    __repr__ = __str__</span><br></pre></td></tr></table></figure>
<h2 id="iter"><a class="header-anchor" href="#iter"></a>_<em>iter_</em></h2>
<p>如果一个类想被用于<code>for ... in</code>循环，类似list或tuple那样，就必须实现一个<code>__iter__()</code>方法，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的<code>__next__()</code>方法拿到循环的下一个值，直到遇到<code>StopIteration</code>错误时退出循环。</p>
<p>我们以斐波那契数列为例，写一个Fib类，可以作用于for循环：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Fib(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.a, self.b = 0, 1 # 初始化两个计数器a，b</span><br><span class="line"></span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self # 实例本身就是迭代对象，故返回自己</span><br><span class="line"></span><br><span class="line">    def __next__(self):</span><br><span class="line">        self.a, self.b = self.b, self.a + self.b # 计算下一个值</span><br><span class="line">        if self.a &gt; 100000: # 退出循环的条件</span><br><span class="line">            raise StopIteration()</span><br><span class="line">        return self.a # 返回下一个值</span><br></pre></td></tr></table></figure>
<p>现在，试试把Fib实例作用于for循环：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; for n in Fib():</span><br><span class="line">...     print(n)</span><br><span class="line">...</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">...</span><br><span class="line">46368</span><br><span class="line">75025</span><br></pre></td></tr></table></figure>
<h2 id="getitem"><a class="header-anchor" href="#getitem"></a>_<em>getitem_</em></h2>
<p>Fib实例虽然能作用于for循环，看起来和list有点像，但是，把它当成list来使用还是不行，比如，取第5个元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Fib()[5]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: &#x27;Fib&#x27; object does not support indexing</span><br></pre></td></tr></table></figure>
<p>要表现得像list那样按照下标取出元素，需要实现<code>__getitem__()</code>方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Fib(object):</span><br><span class="line">    def __getitem__(self, n):</span><br><span class="line">        a, b = 1, 1</span><br><span class="line">        for x in range(n):</span><br><span class="line">            a, b = b, a + b</span><br><span class="line">        return a</span><br></pre></td></tr></table></figure>
<p>现在，就可以按下标访问数列的任意一项了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f = Fib()</span><br><span class="line">&gt;&gt;&gt; f[0]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; f[1]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; f[2]</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; f[3]</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; f[10]</span><br><span class="line">89</span><br><span class="line">&gt;&gt;&gt; f[100]</span><br><span class="line">573147844013817084101</span><br></pre></td></tr></table></figure>
<p>但是list有个神奇的切片方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; list(range(100))[5:10]</span><br><span class="line">[5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure>
<p>对于Fib却报错。原因是<code>__getitem__()</code>传入的参数可能是一个int，也可能是一个切片对象<code>slice</code>，所以要做判断：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Fib(object):</span><br><span class="line">    def __getitem__(self, n):</span><br><span class="line">        if isinstance(n, int): # n是索引</span><br><span class="line">            a, b = 1, 1</span><br><span class="line">            for x in range(n):</span><br><span class="line">                a, b = b, a + b</span><br><span class="line">            return a</span><br><span class="line">        if isinstance(n, slice): # n是切片</span><br><span class="line">            start = n.start</span><br><span class="line">            stop = n.stop</span><br><span class="line">            if start is None:</span><br><span class="line">                start = 0</span><br><span class="line">            a, b = 1, 1</span><br><span class="line">            L = []</span><br><span class="line">            for x in range(stop):</span><br><span class="line">                if x &gt;= start:</span><br><span class="line">                    L.append(a)</span><br><span class="line">                a, b = b, a + b</span><br><span class="line">            return L</span><br></pre></td></tr></table></figure>
<p>现在试试Fib的切片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f = Fib()</span><br><span class="line">&gt;&gt;&gt; f[0:5]</span><br><span class="line">[1, 1, 2, 3, 5]</span><br><span class="line">&gt;&gt;&gt; f[:10]</span><br><span class="line">[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]</span><br></pre></td></tr></table></figure>
<p>但是没有对step参数作处理：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; f[:10:2]</span><br><span class="line">[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]</span><br></pre></td></tr></table></figure>
<p>也没有对负数作处理，所以，要正确实现一个<code>__getitem__()</code>还是有很多工作要做的。</p>
<p>此外，如果把对象看成<code>dict</code>，<code>__getitem__()</code>的参数也可能是一个可以作key的object，例如<code>str</code>。</p>
<p>与之对应的是<code>__setitem__()</code>方法，把对象视作list或dict来对集合赋值。最后，还有一个<code>__delitem__()</code>方法，用于删除某个元素。</p>
<p>总之，通过上面的方法，我们自己定义的类表现得和Python自带的list、tuple、dict没什么区别，这完全归功于动态语言的“鸭子类型”，不需要强制继承某个接口。</p>
<h2 id="getattr"><a class="header-anchor" href="#getattr"></a>_<em>getattr_</em></h2>
<h3 id=""><a class="header-anchor" href="#"></a></h3>
<p>正常情况下，当我们调用类的方法或属性时，如果不存在，就会报错。比如定义<code>Student</code>类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    </span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name = &#x27;Michael&#x27;</span><br></pre></td></tr></table></figure>
<p>调用<code>name</code>属性，没问题，但是，调用不存在的<code>score</code>属性，就有问题了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student()</span><br><span class="line">&gt;&gt;&gt; print(s.name)</span><br><span class="line">Michael</span><br><span class="line">&gt;&gt;&gt; print(s.score)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">AttributeError: &#x27;Student&#x27; object has no attribute &#x27;score&#x27;</span><br></pre></td></tr></table></figure>
<p>错误信息很清楚地告诉我们，没有找到<code>score</code>这个attribute。</p>
<p>要避免这个错误，除了可以加上一个<code>score</code>属性外，Python还有另一个机制，那就是写一个<code>__getattr__()</code>方法，动态返回一个属性。修改如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name = &#x27;Michael&#x27;</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, attr):</span><br><span class="line">        if attr==&#x27;score&#x27;:</span><br><span class="line">            return 99</span><br></pre></td></tr></table></figure>
<p>当调用不存在的属性时，比如<code>score</code>，Python解释器会试图调用<code>__getattr__(self, 'score')</code>来尝试获得属性，这样，我们就有机会返回<code>score</code>的值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student()</span><br><span class="line">&gt;&gt;&gt; s.name</span><br><span class="line">&#x27;Michael&#x27;</span><br><span class="line">&gt;&gt;&gt; s.score</span><br><span class="line">99</span><br></pre></td></tr></table></figure>
<p>返回函数也是完全可以的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, attr):</span><br><span class="line">        if attr==&#x27;age&#x27;:</span><br><span class="line">            return lambda: 25</span><br></pre></td></tr></table></figure>
<p>只是调用方式要变为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s.age()</span><br><span class="line">25</span><br></pre></td></tr></table></figure>
<p>注意，只有在没有找到属性的情况下，才调用<code>__getattr__</code>，已有的属性，比如<code>name</code>，不会在<code>__getattr__</code>中查找。</p>
<p>此外，注意到任意调用如<code>s.abc</code>都会返回<code>None</code>，这是因为我们定义的<code>__getattr__</code>默认返回就是<code>None</code>。要让class只响应特定的几个属性，我们就要按照约定，抛出<code>AttributeError</code>的错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, attr):</span><br><span class="line">        if attr==&#x27;age&#x27;:</span><br><span class="line">            return lambda: 25</span><br><span class="line">        raise AttributeError(&#x27;\&#x27;Student\&#x27; object has no attribute \&#x27;%s\&#x27;&#x27; % attr)</span><br></pre></td></tr></table></figure>
<p>这实际上可以把一个类的所有属性和方法调用全部动态化处理了，不需要任何特殊手段。</p>
<p>这种完全动态调用的特性有什么实际作用呢？作用就是，可以针对完全动态的情况作调用。</p>
<p>举个例子：</p>
<p>现在很多网站都搞REST API，比如新浪微博、豆瓣啥的，调用API的URL类似：</p>
<ul>
<li><a href="http://api.server/user/friends">http://api.server/user/friends</a></li>
<li><a href="http://api.server/user/timeline/list">http://api.server/user/timeline/list</a></li>
</ul>
<p>如果要写SDK，给每个URL对应的API都写一个方法，那得累死，而且，API一旦改动，SDK也要改。</p>
<p>利用完全动态的<code>__getattr__</code>，我们可以写出一个链式调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Chain(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, path=&#x27;&#x27;):</span><br><span class="line">        self._path = path</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, path):</span><br><span class="line">        return Chain(&#x27;%s/%s&#x27; % (self._path, path))</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self._path</span><br><span class="line"></span><br><span class="line">    __repr__ = __str__</span><br></pre></td></tr></table></figure>
<p>试试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Chain().status.user.timeline.list</span><br><span class="line">&#x27;/status/user/timeline/list&#x27;</span><br></pre></td></tr></table></figure>
<p>这样，无论API怎么变，SDK都可以根据URL实现完全动态的调用，而且，不随API的增加而改变！</p>
<p>还有些REST API会把参数放到URL中，比如GitHub的API：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /users/:user/repos</span><br></pre></td></tr></table></figure>
<p>调用时，需要把<code>:user</code>替换为实际用户名。如果我们能写出这样的链式调用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Chain().users(&#x27;michael&#x27;).repos</span><br></pre></td></tr></table></figure>
<p>就可以非常方便地调用API了。有兴趣的童鞋可以试试写出来。</p>
<h2 id="call"><a class="header-anchor" href="#call"></a>_<em>call_</em></h2>
<p>一个对象实例可以有自己的属性和方法，当我们调用实例方法时，我们用<code>instance.method()</code>来调用。能不能直接在实例本身上调用呢？在Python中，答案是肯定的。</p>
<p>任何类，只需要定义一个<code>__call__()</code>方法，就可以直接对实例进行调用。请看示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    def __call__(self):</span><br><span class="line">        print(&#x27;My name is %s.&#x27; % self.name)</span><br></pre></td></tr></table></figure>
<p>调用方式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; s = Student(&#x27;Michael&#x27;)</span><br><span class="line">&gt;&gt;&gt; s() # self参数不要传入</span><br><span class="line">My name is Michael.</span><br></pre></td></tr></table></figure>
<p><code>__call__()</code>还可以定义参数。对实例进行直接调用就好比对一个函数进行调用一样，所以你完全可以把对象看成函数，把函数看成对象，因为这两者之间本来就没啥根本的区别。</p>
<p>如果你把对象看成函数，那么函数本身其实也可以在运行期动态创建出来，因为类的实例都是运行期创建出来的，这么一来，我们就模糊了对象和函数的界限。</p>
<p>那么，怎么判断一个变量是对象还是函数呢？其实，更多的时候，我们需要判断一个对象是否能被调用，能被调用的对象就是一个<code>Callable</code>对象，比如函数和我们上面定义的带有<code>__call__()</code>的类实例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; callable(Student())</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; callable(max)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; callable([1, 2, 3])</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; callable(None)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; callable(&#x27;str&#x27;)</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<p>通过<code>callable()</code>函数，我们就可以判断一个对象是否是“可调用”对象。</p>
<h1 id="Enum"><a class="header-anchor" href="#Enum"></a>Enum</h1>
<p>当我们需要定义常量时，一个办法是用大写变量通过整数来定义，例如月份：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JAN = 1</span><br><span class="line">FEB = 2</span><br><span class="line">MAR = 3</span><br><span class="line">...</span><br><span class="line">NOV = 11</span><br><span class="line">DEC = 12</span><br></pre></td></tr></table></figure>
<p>好处是简单，缺点是类型是<code>int</code>，并且仍然是变量。</p>
<p>更好的方法是为这样的枚举类型定义一个class类型，然后，每个常量都是class的一个唯一实例。Python提供了<code>Enum</code>类来实现这个功能：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from enum import Enum</span><br><span class="line"></span><br><span class="line">Month = Enum(&#x27;Month&#x27;, (&#x27;Jan&#x27;, &#x27;Feb&#x27;, &#x27;Mar&#x27;, &#x27;Apr&#x27;, &#x27;May&#x27;, &#x27;Jun&#x27;, &#x27;Jul&#x27;, &#x27;Aug&#x27;, &#x27;Sep&#x27;, &#x27;Oct&#x27;, &#x27;Nov&#x27;, &#x27;Dec&#x27;))</span><br></pre></td></tr></table></figure>
<p>这样我们就获得了<code>Month</code>类型的枚举类，可以直接使用<code>Month.Jan</code>来引用一个常量，或者枚举它的所有成员：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for name, member in Month.__members__.items():</span><br><span class="line">    print(name, &#x27;=&gt;&#x27;, member, &#x27;,&#x27;, member.value)</span><br></pre></td></tr></table></figure>
<p><code>value</code>属性则是自动赋给成员的<code>int</code>常量，默认从<code>1</code>开始计数。</p>
<p>如果需要更精确地控制枚举类型，可以从<code>Enum</code>派生出自定义类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from enum import Enum, unique</span><br><span class="line"></span><br><span class="line">@unique</span><br><span class="line">class Weekday(Enum):</span><br><span class="line">    Sun = 0 # Sun的value被设定为0</span><br><span class="line">    Mon = 1</span><br><span class="line">    Tue = 2</span><br><span class="line">    Wed = 3</span><br><span class="line">    Thu = 4</span><br><span class="line">    Fri = 5</span><br><span class="line">    Sat = 6</span><br></pre></td></tr></table></figure>
<p><code>@unique</code>装饰器可以帮助我们检查保证没有重复值。</p>
<p>访问这些枚举类型可以有若干种方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; day1 = Weekday.Mon</span><br><span class="line">&gt;&gt;&gt; print(day1)</span><br><span class="line">Weekday.Mon</span><br><span class="line">&gt;&gt;&gt; print(Weekday.Tue)</span><br><span class="line">Weekday.Tue</span><br><span class="line">&gt;&gt;&gt; print(Weekday[&#x27;Tue&#x27;])</span><br><span class="line">Weekday.Tue</span><br><span class="line">&gt;&gt;&gt; print(Weekday.Tue.value)</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; print(day1 == Weekday.Mon)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; print(day1 == Weekday.Tue)</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; print(Weekday(1))</span><br><span class="line">Weekday.Mon</span><br><span class="line">&gt;&gt;&gt; print(day1 == Weekday(1))</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; Weekday(7)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">ValueError: 7 is not a valid Weekday</span><br><span class="line">&gt;&gt;&gt; for name, member in Weekday.__members__.items():</span><br><span class="line">...     print(name, &#x27;=&gt;&#x27;, member)</span><br><span class="line">...</span><br><span class="line">Sun =&gt; Weekday.Sun</span><br><span class="line">Mon =&gt; Weekday.Mon</span><br><span class="line">Tue =&gt; Weekday.Tue</span><br><span class="line">Wed =&gt; Weekday.Wed</span><br><span class="line">Thu =&gt; Weekday.Thu</span><br><span class="line">Fri =&gt; Weekday.Fri</span><br><span class="line">Sat =&gt; Weekday.Sat</span><br></pre></td></tr></table></figure>
<p>可见，既可以用成员名称引用枚举常量，又可以直接根据value的值获得枚举常量。</p>
<h1 id="metaclass"><a class="header-anchor" href="#metaclass"></a>metaclass</h1>
<h2 id="type"><a class="header-anchor" href="#type"></a>type()</h2>
<p>动态语言和静态语言最大的不同，就是函数和类的定义，不是编译时定义的，而是运行时动态创建的。</p>
<p>比方说我们要定义一个<code>Hello</code>的class，就写一个<code>hello.py</code>模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Hello(object):</span><br><span class="line">    def hello(self, name=&#x27;world&#x27;):</span><br><span class="line">        print(&#x27;Hello, %s.&#x27; % name)</span><br></pre></td></tr></table></figure>
<p>当Python解释器载入<code>hello</code>模块时，就会依次执行该模块的所有语句，执行结果就是动态创建出一个<code>Hello</code>的class对象，测试如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from hello import Hello</span><br><span class="line">&gt;&gt;&gt; h = Hello()</span><br><span class="line">&gt;&gt;&gt; h.hello()</span><br><span class="line">Hello, world.</span><br><span class="line">&gt;&gt;&gt; print(type(Hello))</span><br><span class="line">&lt;class &#x27;type&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; print(type(h))</span><br><span class="line">&lt;class &#x27;hello.Hello&#x27;&gt;</span><br></pre></td></tr></table></figure>
<p><code>type()</code>函数可以查看一个类型或变量的类型，<code>Hello</code>是一个class，它的类型就是<code>type</code>，而<code>h</code>是一个实例，它的类型就是class <code>Hello</code>。</p>
<p>我们说class的定义是运行时动态创建的，而创建class的方法就是使用<code>type()</code>函数。</p>
<p><code>type()</code>函数既可以返回一个对象的类型，又可以创建出新的类型，比如，我们可以通过<code>type()</code>函数创建出<code>Hello</code>类，而无需通过<code>class Hello(object)...</code>的定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; def fn(self, name=&#x27;world&#x27;): # 先定义函数</span><br><span class="line">...     print(&#x27;Hello, %s.&#x27; % name)</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; Hello = type(&#x27;Hello&#x27;, (object,), dict(hello=fn)) # 创建Hello class</span><br><span class="line">&gt;&gt;&gt; h = Hello()</span><br><span class="line">&gt;&gt;&gt; h.hello()</span><br><span class="line">Hello, world.</span><br><span class="line">&gt;&gt;&gt; print(type(Hello))</span><br><span class="line">&lt;class &#x27;type&#x27;&gt;</span><br><span class="line">&gt;&gt;&gt; print(type(h))</span><br><span class="line">&lt;class &#x27;__main__.Hello&#x27;&gt;</span><br></pre></td></tr></table></figure>
<p>要创建一个class对象，<code>type()</code>函数依次传入3个参数：</p>
<ol>
<li>class的名称；</li>
<li>继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法；</li>
<li>class的方法名称与函数绑定，这里我们把函数<code>fn</code>绑定到方法名<code>hello</code>上。</li>
</ol>
<p>通过<code>type()</code>函数创建的类和直接写class是完全一样的，因为Python解释器遇到class定义时，仅仅是扫描一下class定义的语法，然后调用<code>type()</code>函数创建出class。</p>
<p>正常情况下，我们都用<code>class Xxx...</code>来定义类，但是，<code>type()</code>函数也允许我们动态创建出类来，也就是说，动态语言本身支持运行期动态创建类，这和静态语言有非常大的不同，要在静态语言运行期创建类，必须构造源代码字符串再调用编译器，或者借助一些工具生成字节码实现，本质上都是动态编译，会非常复杂。</p>
<h2 id="metaclass-2"><a class="header-anchor" href="#metaclass-2"></a>metaclass</h2>
<p>除了使用<code>type()</code>动态创建类以外，要控制类的创建行为，还可以使用metaclass。</p>
<p>metaclass，直译为元类，简单的解释就是：</p>
<p>当我们定义了类以后，就可以根据这个类创建出实例，所以：先定义类，然后创建实例。</p>
<p>但是如果我们想创建出类呢？那就必须根据metaclass创建出类，所以：先定义metaclass，然后创建类。</p>
<p>连接起来就是：先定义metaclass，就可以创建类，最后创建实例。</p>
<p>所以，metaclass允许你创建类或者修改类。换句话说，你可以把类看成是metaclass创建出来的“实例”。</p>
<p>metaclass是Python面向对象里最难理解，也是最难使用的魔术代码。正常情况下，你不会碰到需要使用metaclass的情况，所以，以下内容看不懂也没关系，因为基本上你不会用到。</p>
<p>我们先看一个简单的例子，这个metaclass可以给我们自定义的MyList增加一个<code>add</code>方法：</p>
<p>定义<code>ListMetaclass</code>，按照默认习惯，metaclass的类名总是以Metaclass结尾，以便清楚地表示这是一个metaclass：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># metaclass是类的模板，所以必须从`type`类型派生：</span><br><span class="line">class ListMetaclass(type):</span><br><span class="line">    def __new__(cls, name, bases, attrs):</span><br><span class="line">        attrs[&#x27;add&#x27;] = lambda self, value: self.append(value)</span><br><span class="line">        return type.__new__(cls, name, bases, attrs)</span><br></pre></td></tr></table></figure>
<p>有了ListMetaclass，我们在定义类的时候还要指示使用ListMetaclass来定制类，传入关键字参数<code>metaclass</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyList(list, metaclass=ListMetaclass):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<p>当我们传入关键字参数<code>metaclass</code>时，魔术就生效了，它指示Python解释器在创建<code>MyList</code>时，要通过<code>ListMetaclass.__new__()</code>来创建，在此，我们可以修改类的定义，比如，加上新的方法，然后，返回修改后的定义。</p>
<p><code>__new__()</code>方法接收到的参数依次是：</p>
<ol>
<li>当前准备创建的类的对象；</li>
<li>类的名字；</li>
<li>类继承的父类集合；</li>
<li>类的方法集合。</li>
</ol>
<p>测试一下<code>MyList</code>是否可以调用<code>add()</code>方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L = MyList()</span><br><span class="line">&gt;&gt;&gt; L.add(1)</span><br><span class="line">&gt;&gt; L</span><br><span class="line">[1]</span><br></pre></td></tr></table></figure>
<p>而普通的<code>list</code>没有<code>add()</code>方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; L2 = list()</span><br><span class="line">&gt;&gt;&gt; L2.add(1)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#x27;list&#x27; object has no attribute &#x27;add&#x27;</span><br></pre></td></tr></table></figure>
<p>动态修改有什么意义？直接在<code>MyList</code>定义中写上<code>add()</code>方法不是更简单吗？正常情况下，确实应该直接写，通过metaclass修改纯属变态。</p>
<p>但是，总会遇到需要通过metaclass修改类定义的。ORM就是一个典型的例子。</p>
<p>ORM全称“Object Relational Mapping”，即对象-关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样，写代码更简单，不用直接操作SQL语句。</p>
<p>要编写一个ORM框架，所有的类都只能动态定义，因为只有使用者才能根据表的结构定义出对应的类来。</p>
<p>让我们来尝试编写一个ORM框架。</p>
<p>编写底层模块的第一步，就是先把调用接口写出来。比如，使用者如果使用这个ORM框架，想定义一个<code>User</code>类来操作对应的数据库表<code>User</code>，我们期待他写出这样的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class User(Model):</span><br><span class="line">    # 定义类的属性到列的映射：</span><br><span class="line">    id = IntegerField(&#x27;id&#x27;)</span><br><span class="line">    name = StringField(&#x27;username&#x27;)</span><br><span class="line">    email = StringField(&#x27;email&#x27;)</span><br><span class="line">    password = StringField(&#x27;password&#x27;)</span><br><span class="line"></span><br><span class="line"># 创建一个实例：</span><br><span class="line">u = User(id=12345, name=&#x27;Michael&#x27;, email=&#x27;test@orm.org&#x27;, password=&#x27;my-pwd&#x27;)</span><br><span class="line"># 保存到数据库：</span><br><span class="line">u.save()</span><br></pre></td></tr></table></figure>
<p>其中，父类<code>Model</code>和属性类型<code>StringField</code>、<code>IntegerField</code>是由ORM框架提供的，剩下的魔术方法比如<code>save()</code>全部由metaclass自动完成。虽然metaclass的编写会比较复杂，但ORM的使用者用起来却异常简单。</p>
<p>现在，我们就按上面的接口来实现该ORM。</p>
<p>首先来定义<code>Field</code>类，它负责保存数据库表的字段名和字段类型：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Field(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name, column_type):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.column_type = column_type</span><br><span class="line"></span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &#x27;&lt;%s:%s&gt;&#x27; % (self.__class__.__name__, self.name)</span><br></pre></td></tr></table></figure>
<p>在<code>Field</code>的基础上，进一步定义各种类型的<code>Field</code>，比如<code>StringField</code>，<code>IntegerField</code>等等：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class StringField(Field):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        super(StringField, self).__init__(name, &#x27;varchar(100)&#x27;)</span><br><span class="line"></span><br><span class="line">class IntegerField(Field):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        super(IntegerField, self).__init__(name, &#x27;bigint&#x27;)</span><br></pre></td></tr></table></figure>
<p>下一步，就是编写最复杂的<code>ModelMetaclass</code>了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class ModelMetaclass(type):</span><br><span class="line"></span><br><span class="line">    def __new__(cls, name, bases, attrs):</span><br><span class="line">        if name==&#x27;Model&#x27;:</span><br><span class="line">            return type.__new__(cls, name, bases, attrs)</span><br><span class="line">        print(&#x27;Found model: %s&#x27; % name)</span><br><span class="line">        mappings = dict()</span><br><span class="line">        for k, v in attrs.items():</span><br><span class="line">            if isinstance(v, Field):</span><br><span class="line">                print(&#x27;Found mapping: %s ==&gt; %s&#x27; % (k, v))</span><br><span class="line">                mappings[k] = v</span><br><span class="line">        for k in mappings.keys():</span><br><span class="line">            attrs.pop(k)</span><br><span class="line">        attrs[&#x27;__mappings__&#x27;] = mappings # 保存属性和列的映射关系</span><br><span class="line">        attrs[&#x27;__table__&#x27;] = name # 假设表名和类名一致</span><br><span class="line">        return type.__new__(cls, name, bases, attrs)</span><br></pre></td></tr></table></figure>
<p>以及基类<code>Model</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Model(dict, metaclass=ModelMetaclass):</span><br><span class="line"></span><br><span class="line">    def __init__(self, **kw):</span><br><span class="line">        super(Model, self).__init__(**kw)</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, key):</span><br><span class="line">        try:</span><br><span class="line">            return self[key]</span><br><span class="line">        except KeyError:</span><br><span class="line">            raise AttributeError(r&quot;&#x27;Model&#x27; object has no attribute &#x27;%s&#x27;&quot; % key)</span><br><span class="line"></span><br><span class="line">    def __setattr__(self, key, value):</span><br><span class="line">        self[key] = value</span><br><span class="line"></span><br><span class="line">    def save(self):</span><br><span class="line">        fields = []</span><br><span class="line">        params = []</span><br><span class="line">        args = []</span><br><span class="line">        for k, v in self.__mappings__.items():</span><br><span class="line">            fields.append(v.name)</span><br><span class="line">            params.append(&#x27;?&#x27;)</span><br><span class="line">            args.append(getattr(self, k, None))</span><br><span class="line">        sql = &#x27;insert into %s (%s) values (%s)&#x27; % (self.__table__, &#x27;,&#x27;.join(fields), &#x27;,&#x27;.join(params))</span><br><span class="line">        print(&#x27;SQL: %s&#x27; % sql)</span><br><span class="line">        print(&#x27;ARGS: %s&#x27; % str(args))</span><br></pre></td></tr></table></figure>
<p>当用户定义一个<code>class User(Model)</code>时，Python解释器首先在当前类<code>User</code>的定义中查找<code>metaclass</code>，如果没有找到，就继续在父类<code>Model</code>中查找<code>metaclass</code>，找到了，就使用<code>Model</code>中定义的<code>metaclass</code>的<code>ModelMetaclass</code>来创建<code>User</code>类，也就是说，metaclass可以隐式地继承到子类，但子类自己却感觉不到。</p>
<p>在<code>ModelMetaclass</code>中，一共做了几件事情：</p>
<ol>
<li>排除掉对<code>Model</code>类的修改；</li>
<li>在当前类（比如<code>User</code>）中查找定义的类的所有属性，如果找到一个Field属性，就把它保存到一个<code>__mappings__</code>的dict中，同时从类属性中删除该Field属性，否则，容易造成运行时错误（实例的属性会遮盖类的同名属性）；</li>
<li>把表名保存到<code>__table__</code>中，这里简化为表名默认为类名。</li>
</ol>
<p>在<code>Model</code>类中，就可以定义各种操作数据库的方法，比如<code>save()</code>，<code>delete()</code>，<code>find()</code>，<code>update</code>等等。</p>
<p>我们实现了<code>save()</code>方法，把一个实例保存到数据库中。因为有表名，属性到字段的映射和属性值的集合，就可以构造出<code>INSERT</code>语句。</p>
<p>编写代码试试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u = User(id=12345, name=&#x27;Michael&#x27;, email=&#x27;test@orm.org&#x27;, password=&#x27;my-pwd&#x27;)</span><br><span class="line">u.save()</span><br></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Found model: User</span><br><span class="line">Found mapping: email ==&gt; &lt;StringField:email&gt;</span><br><span class="line">Found mapping: password ==&gt; &lt;StringField:password&gt;</span><br><span class="line">Found mapping: id ==&gt; &lt;IntegerField:uid&gt;</span><br><span class="line">Found mapping: name ==&gt; &lt;StringField:username&gt;</span><br><span class="line">SQL: insert into User (password,email,username,id) values (?,?,?,?)</span><br><span class="line">ARGS: [&#x27;my-pwd&#x27;, &#x27;test@orm.org&#x27;, &#x27;Michael&#x27;, 12345]</span><br></pre></td></tr></table></figure>
<p>可以看到，<code>save()</code>方法已经打印出了可执行的SQL语句，以及参数列表，只需要真正连接到数据库，执行该SQL语句，就可以完成真正的功能。</p>
<p>不到100行代码，我们就通过metaclass实现了一个精简的ORM框架，是不是非常简单？</p>
]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Test</title>
    <url>/2022/08/26/Python-Test/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Unit Test</li>
<li>Doc Test</li>
<li>//TODO</li>
</ul>
<span id="more"></span>
<h1 id="Unit-Test"><a class="header-anchor" href="#Unit-Test"></a>Unit Test</h1>
<p>如果你听说过“测试驱动开发”（TDD：Test-Driven Development），单元测试就不陌生。</p>
<p>单元测试是用来对一个模块、一个函数或者一个类来进行正确性检验的测试工作。</p>
<p>比如对函数<code>abs()</code>，我们可以编写出以下几个测试用例：</p>
<ol>
<li>输入正数，比如<code>1</code>、<code>1.2</code>、<code>0.99</code>，期待返回值与输入相同；</li>
<li>输入负数，比如<code>-1</code>、<code>-1.2</code>、<code>-0.99</code>，期待返回值与输入相反；</li>
<li>输入<code>0</code>，期待返回<code>0</code>；</li>
<li>输入非数值类型，比如<code>None</code>、<code>[]</code>、<code>&#123;&#125;</code>，期待抛出<code>TypeError</code>。</li>
</ol>
<p>把上面的测试用例放到一个测试模块里，就是一个完整的单元测试。</p>
<p>如果单元测试通过，说明我们测试的这个函数能够正常工作。如果单元测试不通过，要么函数有bug，要么测试条件输入不正确，总之，需要修复使单元测试能够通过。</p>
<p>单元测试通过后有什么意义呢？如果我们对<code>abs()</code>函数代码做了修改，只需要再跑一遍单元测试，如果通过，说明我们的修改不会对<code>abs()</code>函数原有的行为造成影响，如果测试不通过，说明我们的修改与原有行为不一致，要么修改代码，要么修改测试。</p>
<p>这种以测试为驱动的开发模式最大的好处就是确保一个程序模块的行为符合我们设计的测试用例。在将来修改的时候，可以极大程度地保证该模块行为仍然是正确的。</p>
<p>我们来编写一个<code>Dict</code>类，这个类的行为和<code>dict</code>一致，但是可以通过属性来访问，用起来就像下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; d = Dict(a=1, b=2)</span><br><span class="line">&gt;&gt;&gt; d[&#x27;a&#x27;]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; d.a</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p><code>mydict.py</code>代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Dict(dict):</span><br><span class="line"></span><br><span class="line">    def __init__(self, **kw):</span><br><span class="line">        super().__init__(**kw)</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, key):</span><br><span class="line">        try:</span><br><span class="line">            return self[key]</span><br><span class="line">        except KeyError:</span><br><span class="line">            raise AttributeError(r&quot;&#x27;Dict&#x27; object has no attribute &#x27;%s&#x27;&quot; % key)</span><br><span class="line"></span><br><span class="line">    def __setattr__(self, key, value):</span><br><span class="line">        self[key] = value</span><br></pre></td></tr></table></figure>
<p>为了编写单元测试，我们需要引入Python自带的<code>unittest</code>模块，编写<code>mydict_test.py</code>如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import unittest</span><br><span class="line"></span><br><span class="line">from mydict import Dict</span><br><span class="line"></span><br><span class="line">class TestDict(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    def test_init(self):</span><br><span class="line">        d = Dict(a=1, b=&#x27;test&#x27;)</span><br><span class="line">        self.assertEqual(d.a, 1)</span><br><span class="line">        self.assertEqual(d.b, &#x27;test&#x27;)</span><br><span class="line">        self.assertTrue(isinstance(d, dict))</span><br><span class="line"></span><br><span class="line">    def test_key(self):</span><br><span class="line">        d = Dict()</span><br><span class="line">        d[&#x27;key&#x27;] = &#x27;value&#x27;</span><br><span class="line">        self.assertEqual(d.key, &#x27;value&#x27;)</span><br><span class="line"></span><br><span class="line">    def test_attr(self):</span><br><span class="line">        d = Dict()</span><br><span class="line">        d.key = &#x27;value&#x27;</span><br><span class="line">        self.assertTrue(&#x27;key&#x27; in d)</span><br><span class="line">        self.assertEqual(d[&#x27;key&#x27;], &#x27;value&#x27;)</span><br><span class="line"></span><br><span class="line">    def test_keyerror(self):</span><br><span class="line">        d = Dict()</span><br><span class="line">        with self.assertRaises(KeyError):</span><br><span class="line">            value = d[&#x27;empty&#x27;]</span><br><span class="line"></span><br><span class="line">    def test_attrerror(self):</span><br><span class="line">        d = Dict()</span><br><span class="line">        with self.assertRaises(AttributeError):</span><br><span class="line">            value = d.empty</span><br></pre></td></tr></table></figure>
<p>编写单元测试时，我们需要编写一个测试类，从<code>unittest.TestCase</code>继承。</p>
<p>以<code>test</code>开头的方法就是测试方法，不以<code>test</code>开头的方法不被认为是测试方法，测试的时候不会被执行。</p>
<p>对每一类测试都需要编写一个<code>test_xxx()</code>方法。由于<code>unittest.TestCase</code>提供了很多内置的条件判断，我们只需要调用这些方法就可以断言输出是否是我们所期望的。最常用的断言就是<code>assertEqual()</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">self.assertEqual(abs(-1), 1) # 断言函数返回的结果与1相等</span><br></pre></td></tr></table></figure>
<p>另一种重要的断言就是期待抛出指定类型的Error，比如通过<code>d['empty']</code>访问不存在的key时，断言会抛出<code>KeyError</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with self.assertRaises(KeyError):</span><br><span class="line">    value = d[&#x27;empty&#x27;]</span><br></pre></td></tr></table></figure>
<p>而通过<code>d.empty</code>访问不存在的key时，我们期待抛出<code>AttributeError</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with self.assertRaises(AttributeError):</span><br><span class="line">    value = d.empty</span><br></pre></td></tr></table></figure>
<h2 id="Run"><a class="header-anchor" href="#Run"></a>Run</h2>
<p>一旦编写好单元测试，我们就可以运行单元测试。最简单的运行方式是在<code>mydict_test.py</code>的最后加上两行代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>
<p>这样就可以把<code>mydict_test.py</code>当做正常的python脚本运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python mydict_test.py</span><br></pre></td></tr></table></figure>
<p>另一种方法是在命令行通过参数<code>-m unittest</code>直接运行单元测试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python -m unittest mydict_test</span><br><span class="line">.....</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 5 tests in 0.000s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure>
<p>这是推荐的做法，因为这样可以一次批量运行很多单元测试，并且，有很多工具可以自动来运行这些单元测试。</p>
<h2 id="setUp与tearDown"><a class="header-anchor" href="#setUp与tearDown"></a>setUp与tearDown</h2>
<p>可以在单元测试中编写两个特殊的<code>setUp()</code>和<code>tearDown()</code>方法。这两个方法会分别在每调用一个测试方法的前后分别被执行。</p>
<p><code>setUp()</code>和<code>tearDown()</code>方法有什么用呢？设想你的测试需要启动一个数据库，这时，就可以在<code>setUp()</code>方法中连接数据库，在<code>tearDown()</code>方法中关闭数据库，这样，不必在每个测试方法中重复相同的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class TestDict(unittest.TestCase):</span><br><span class="line"></span><br><span class="line">    def setUp(self):</span><br><span class="line">        print(&#x27;setUp...&#x27;)</span><br><span class="line"></span><br><span class="line">    def tearDown(self):</span><br><span class="line">        print(&#x27;tearDown...&#x27;)</span><br></pre></td></tr></table></figure>
<p>可以再次运行测试看看每个测试方法调用前后是否会打印出<code>setUp...</code>和<code>tearDown...</code>。</p>
<h1 id="Doc-Test"><a class="header-anchor" href="#Doc-Test"></a>Doc Test</h1>
<p>如果你经常阅读Python的官方文档，可以看到很多文档都有示例代码。比如<a href="https://docs.python.org/3/library/re.html">re模块</a>就带了很多示例代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import re</span><br><span class="line">&gt;&gt;&gt; m = re.search(&#x27;(?&lt;=abc)def&#x27;, &#x27;abcdef&#x27;)</span><br><span class="line">&gt;&gt;&gt; m.group(0)</span><br><span class="line">&#x27;def&#x27;</span><br></pre></td></tr></table></figure>
<p>可以把这些示例代码在Python的交互式环境下输入并执行，结果与文档中的示例代码显示的一致。</p>
<p>这些代码与其他说明可以写在注释中，然后，由一些工具来自动生成文档。既然这些代码本身就可以粘贴出来直接运行，那么，可不可以自动执行写在注释中的这些代码呢？</p>
<p>答案是肯定的。</p>
<p>当我们编写注释时，如果写上这样的注释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def abs(n):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    Function to get absolute value of number.</span><br><span class="line">    </span><br><span class="line">    Example:</span><br><span class="line">    </span><br><span class="line">    &gt;&gt;&gt; abs(1)</span><br><span class="line">    1</span><br><span class="line">    &gt;&gt;&gt; abs(-1)</span><br><span class="line">    1</span><br><span class="line">    &gt;&gt;&gt; abs(0)</span><br><span class="line">    0</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    return n if n &gt;= 0 else (-n)</span><br></pre></td></tr></table></figure>
<p>无疑更明确地告诉函数的调用者该函数的期望输入和输出。</p>
<p>并且，Python内置的“文档测试”（doctest）模块可以直接提取注释中的代码并执行测试。</p>
<p>doctest严格按照Python交互式命令行的输入和输出来判断测试结果是否正确。只有测试异常的时候，可以用<code>...</code>表示中间一大段烦人的输出。</p>
<p>让我们用doctest来测试上次编写的<code>Dict</code>类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># mydict2.py</span><br><span class="line">class Dict(dict):</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    Simple dict but also support access as x.y style.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; d1 = Dict()</span><br><span class="line">    &gt;&gt;&gt; d1[&#x27;x&#x27;] = 100</span><br><span class="line">    &gt;&gt;&gt; d1.x</span><br><span class="line">    100</span><br><span class="line">    &gt;&gt;&gt; d1.y = 200</span><br><span class="line">    &gt;&gt;&gt; d1[&#x27;y&#x27;]</span><br><span class="line">    200</span><br><span class="line">    &gt;&gt;&gt; d2 = Dict(a=1, b=2, c=&#x27;3&#x27;)</span><br><span class="line">    &gt;&gt;&gt; d2.c</span><br><span class="line">    &#x27;3&#x27;</span><br><span class="line">    &gt;&gt;&gt; d2[&#x27;empty&#x27;]</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">        ...</span><br><span class="line">    KeyError: &#x27;empty&#x27;</span><br><span class="line">    &gt;&gt;&gt; d2.empty</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">        ...</span><br><span class="line">    AttributeError: &#x27;Dict&#x27; object has no attribute &#x27;empty&#x27;</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    def __init__(self, **kw):</span><br><span class="line">        super(Dict, self).__init__(**kw)</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, key):</span><br><span class="line">        try:</span><br><span class="line">            return self[key]</span><br><span class="line">        except KeyError:</span><br><span class="line">            raise AttributeError(r&quot;&#x27;Dict&#x27; object has no attribute &#x27;%s&#x27;&quot; % key)</span><br><span class="line"></span><br><span class="line">    def __setattr__(self, key, value):</span><br><span class="line">        self[key] = value</span><br><span class="line"></span><br><span class="line">if __name__==&#x27;__main__&#x27;:</span><br><span class="line">    import doctest</span><br><span class="line">    doctest.testmod()</span><br></pre></td></tr></table></figure>
<p>运行<code>python mydict2.py</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python mydict2.py</span><br></pre></td></tr></table></figure>
<p>什么输出也没有。这说明我们编写的doctest运行都是正确的。如果程序有问题，比如把<code>__getattr__()</code>方法注释掉，再运行就会报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python mydict2.py</span><br><span class="line">**********************************************************************</span><br><span class="line">File &quot;/Users/michael/Github/learn-python3/samples/debug/mydict2.py&quot;, line 10, in __main__.Dict</span><br><span class="line">Failed example:</span><br><span class="line">    d1.x</span><br><span class="line">Exception raised:</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">      ...</span><br><span class="line">    AttributeError: &#x27;Dict&#x27; object has no attribute &#x27;x&#x27;</span><br><span class="line">**********************************************************************</span><br><span class="line">File &quot;/Users/michael/Github/learn-python3/samples/debug/mydict2.py&quot;, line 16, in __main__.Dict</span><br><span class="line">Failed example:</span><br><span class="line">    d2.c</span><br><span class="line">Exception raised:</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">      ...</span><br><span class="line">    AttributeError: &#x27;Dict&#x27; object has no attribute &#x27;c&#x27;</span><br><span class="line">**********************************************************************</span><br><span class="line">1 items had failures:</span><br><span class="line">   2 of   9 in __main__.Dict</span><br><span class="line">***Test Failed*** 2 failures.</span><br></pre></td></tr></table></figure>
<p>注意到最后3行代码。当模块正常导入时，doctest不会被执行。只有在命令行直接运行时，才执行doctest。所以，不必担心doctest会在非测试环境下执行.</p>
]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA</title>
    <url>/2022/08/24/RSA/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Intro</li>
<li>Prerequisites</li>
<li>Key Generation</li>
<li>Reliability</li>
<li>Encription &amp;&amp; Decription</li>
<li>Key Format</li>
<li>Use RSA</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<p>RSA是最著名的公钥密码体制, 由三位美国科学家Rivest，Shamir和Adleman于1976年提出, 并在1978年正式发表. 它基于数论的大数分解问题.</p>
<p>我的<a href="https://github.com/LYK-love/Lazy-Scripts/tree/master/SimpleRSA">RSA Python实现</a></p>
<h1 id="PrerequisiFtes"><a class="header-anchor" href="#PrerequisiFtes"></a>PrerequisiFtes</h1>
<h2 id="互质"><a class="header-anchor" href="#互质"></a>互质</h2>
<p>互质( coprime ): 如果两个正整数，除了 1 以外没有其他的公因数，则他们互质.</p>
<p>互质有如下结论:</p>
<ol>
<li>任意两个质数构成互质关系，比如13和61</li>
<li>若一个数是质数, 则两个数互质 == 另一个数不是前者的倍数</li>
<li>如果两个数之中，较大的那个数是质数，则两者构成互质关系，比如97和57。</li>
<li>1和任意一个自然数是都是互质关系，比如1和99。</li>
<li>p是大于1的整数，则p和p-1构成互质关系，比如57和56。</li>
<li>p是大于1的奇数，则p和p-2构成互质关系，比如17和15。</li>
</ol>
<h2 id="欧拉函数"><a class="header-anchor" href="#欧拉函数"></a>欧拉函数</h2>
<p>欧拉函数: 对于任意正整数$n$, 在小于等于n的正整数之中，与n构成互质关系的正整数个数为<br>
$$<br>
\phi(n) = n (1 - \frac{1}{p_1}) (1 - \frac{1}{p_2})…(1 - \frac{1}{p_n})<br>
$$<br>
其中, $p_i$表示 n 的不重复的质因子.</p>
<p>例如, $10 = 2 \times 5$，所以在 &lt;=10 的正整数中，与 10 互质的正整数个数为 4 个。我们可以验证一下，它们分别是 1, 3, 7, 9.</p>
<p>注意到, 如果$n$刚好是两个质数的积, 记为$n = pq$ , 则有$\phi(n) = pq(1 - \frac{1}{p})(1 - \frac{1}{q}) = (p-1)(q-1)$</p>
<h2 id="欧拉定理"><a class="header-anchor" href="#欧拉定理"></a>欧拉定理</h2>
<p>欧拉定理：如果两个正整数 $a$ 和 $n$ 互质, 则如下等式成立:<br>
$$<br>
a^{\phi(n)} \equiv 1 \pmod n<br>
$$<br>
注意到, 如果$p$为质数, 则有:<br>
$$<br>
\phi(p) = p - 1<br>
$$<br>
欧拉定理的证明比较复杂，这里就省略了.</p>
<p>例如, 7 和 10 互质, $7^{\phi(10)} = 7^4 = 2401$, 减去 1 等于 2400, 可以整除 10.</p>
<p>同理, $10^{\phi(7)} = 10^6 = 1000000$, 减去 1 等于 999999, 可以整除 7.</p>
<h2 id="费马小定理"><a class="header-anchor" href="#费马小定理"></a>费马小定理</h2>
<p>欧拉定理存在一个特殊情况：如果 $p$ 是质数，而 $a $ 不是 $p$ 的倍数，此时 $a$ 和 $p$ 必然互质. 因为$\phi(p) = p - 1$, 所以<br>
$$<br>
a^{\phi(p)} = a^{p - 1} \equiv 1 \pmod p<br>
$$<br>
这就是 <a href="https://zh.wikipedia.org/zh-hans/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86">费马小定理</a>,它是欧拉定理的特例.</p>
<h2 id="模反元素"><a class="header-anchor" href="#模反元素"></a>模反元素</h2>
<p>如果两个正整数 $a$ 和 $n$ 互质，那么一定可以找到一个正整数 $b$，使得 $ab - 1$ 被 $n$ 整除:<br>
$$<br>
ab \equiv 1 \mod n<br>
$$<br>
此时, $b$ 就叫做 $a$ 的 <a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E5%8F%8D%E5%85%83%E7%B4%A0">模反元素 </a>.</p>
<p>我们可以用欧拉定理来证明模反元素一定存在:<br>
$$<br>
a^{\phi(n)} = a \times a^{\phi(n) - 1} \equiv 1 \pmod n<br>
$$<br>
$a^{\phi(n) - 1}$就是 $a$ 相对 $n$ 的模反元素, 且 $a^{\phi(n) - 1} + kn, k \in N$ 也是 $a$ 相对 $n$ 的模反元素. 因此模反元素不唯一</p>
<h1 id="Key-Generation"><a class="header-anchor" href="#Key-Generation"></a>Key Generation</h1>
<ol>
<li>
<p>Choose two large prime numbers, $p$ and $q$ , then compute $n = pq$ . $p$ 和 $q$ 越大越好, 一般要求 $n$ 大于1024bit.</p>
</li>
<li>
<p>Compute  $z = \phi(n) = (p - 1)(q - 1)$</p>
</li>
<li>
<p>选择一个与 $z$ 互质的数 $e, e &gt; 1$</p>
<ul>
<li>The letter $e$ is used since this value will be used in encryption.</li>
<li>$e &gt; 1$: 因为后面要计算 $e$ 相对 $z$ 的模反元素, 如果$e = 1$, 则任何正整数都是$e$关于$n$d的模反元素, 也就导致 $d$ 可以取任何正整数, 算法很容易生成一个很简单的$d$ , $d$ 作为私钥就很容易被破解.</li>
</ul>
</li>
<li>
<p>计算 $e$ 相对 $z$ 的模反元素 $d$, 即使得 $ed \mod z = 1$, 即  $ed \equiv 1 \pmod {\phi(n)}$</p>
<ul>
<li>The letter $d$ is used because this value will be used in decryption.</li>
</ul>
</li>
<li>
<p>公钥就是$(n,e)$, 私钥就是$(n,d)$</p>
</li>
</ol>
<h2 id="计算模反元素-d"><a class="header-anchor" href="#计算模反元素-d"></a>计算模反元素 $d$</h2>
<p>前面已经知道, 如果两个正整数 $a$ 和 $n$ 互质, 则 $a$ 相对 $n$  的模反元素包括 $a^{\phi(n) - 1}$.  那么这里 $e$ 和 $z = {\phi(n)}$ 互质, 则模反元素$ d = e^{\phi(z) - 1} = e^{\phi({\phi(n)}) - 1}$ .</p>
<p>我们已经计算出了$z = \phi(n)$ , 它是个很大的数, 这意味着计算 $\phi[\phi(n)]$ 也很大, 导致$d = e^{\phi[\phi(n)]- 1}$是一个很高很高的幂次, 运算复杂度无法接受. 因此要换个方法求$d$</p>
<p>因为:<br>
$$<br>
ed \equiv 1 \pmod {\phi(n)}<br>
$$<br>
得到:<br>
$$<br>
ed = k\phi(n) + 1<br>
$$<br>
移项得到:<br>
$$<br>
ed - k\phi(n) = 1<br>
$$<br>
所以，这个问题转化为：已知两个数 a 和 b，求解 x 和 y 满足如下方程：<br>
$$<br>
ax + by = 1<br>
$$<br>
( $a = e, b = \phi(n)=z, x = d, y = -k$ )</p>
<p>根据 <a href="https://zh.wikipedia.org/wiki/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95">扩展欧几里得算法</a>，这个方程有解的充分必要条件是 a 和 b 互质.</p>
<p>在我们的情况中，$e$ 和 $\phi(n)$ 是互质的，所以这个方程式有解. 同时，通过扩展欧几里得算法，可以非常容易的通过迭代求解出$d$ .</p>
<h1 id="Encription-Decription"><a class="header-anchor" href="#Encription-Decription"></a>Encription &amp;&amp; Decription</h1>
<ol>
<li>
<p>被加密的消息 $m$ 是一个整数( 将字符编码为整数 ), <strong>满足 $ m &lt; n $</strong> . 如果消息太大，解读为整数以后比 n 要大，那么分段加密即可.</p>
<p>加密过程使用 $e$ , 计算密文 $c$ :<br>
$$<br>
c \equiv m^e \pmod n<br>
$$</p>
</li>
<li>
<p>解密过程使用$d$, 计算明文 $m$ :<br>
$$<br>
m \equiv c^d \pmod n<br>
$$</p>
</li>
</ol>
<p>注意到加密函数$E_{(n,e)}(m)  \equiv m^e \pmod n $,  解密函数$D_{(n,d)}(c)  \equiv m^d \pmod n $, 它们其实是一个函数在形式上都是:<br>
$$<br>
f(m, n, e) \equiv m^e \pmod n<br>
$$</p>
<p>只是加密和解密时接受的参数不同.</p>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<p>因为加密的消息 m 必须要小于 n, 并且计算密文$c \equiv m^e \pmod n$ 需要求幂, 这是个昂贵的操作. 因此在实践中, 我们不会用RSA来直接加密消息, 而是用它来加密一个对称密钥( 称为<strong>session key</strong> ), 用session key来加密消息.</p>
<p>举例来说, 假如Alice要和Bob加密通讯, 步骤为:</p>
<ol>
<li>Alice选择一个session key, 记为$K_S$</li>
<li>Alice把session key用Bob的公钥加密, 即计算$(K_S)^e$, 并发送给Bob</li>
<li>Bob收到后, 计算明文$K_S \equiv c^d \pmod n$ , 得到了$K_S$ , 现在Bog知道了共享密钥$K_S$</li>
<li>Alice和Bob然后通过$K_S$进行对称加密通信, 当然他们实现肯定约定好了对称加密算法AES/DES</li>
</ol>
<p>当然直接用RSA加密消息也是可以的, 下面演示Alice与Bob采用RSA明文加密的通信步骤</p>
<table>
<thead>
<tr>
<th>Ciphertext $c$</th>
<th>$c^d$</th>
<th>$m = c^d \pmod n$</th>
<th>Plaintext Letter</th>
</tr>
</thead>
<tbody>
<tr>
<td>17</td>
<td>4819685721067509 150915091411825223071697</td>
<td>248832</td>
<td>l</td>
</tr>
<tr>
<td>15</td>
<td>127834039403948858939111232757568359375</td>
<td>15</td>
<td>o</td>
</tr>
<tr>
<td>22</td>
<td>851643319086537701956194499721106030592</td>
<td>22</td>
<td>v</td>
</tr>
<tr>
<td>10</td>
<td>1000000000000000000000000000000</td>
<td>5</td>
<td>e</td>
</tr>
</tbody>
</table>
<p>Alice’s RSA encryption, $e$ = 5, $n = 35$</p>
<table>
<thead>
<tr>
<th>Plaintext Letter</th>
<th>$m$: numeric representation</th>
<th>$m^e$</th>
<th>Ciphertext $c \equiv m^e \pmod n$</th>
</tr>
</thead>
<tbody>
<tr>
<td>l</td>
<td>12</td>
<td>248832</td>
<td>17</td>
</tr>
<tr>
<td>o</td>
<td>15</td>
<td>759375</td>
<td>15</td>
</tr>
<tr>
<td>v</td>
<td>22</td>
<td>5153632</td>
<td>22</td>
</tr>
<tr>
<td>e</td>
<td>5</td>
<td>3125</td>
<td>10</td>
</tr>
</tbody>
</table>
<p>Bob’s RSA decryption, $d$= 29, $n$ = 35</p>
<h2 id="Proof"><a class="header-anchor" href="#Proof"></a>Proof</h2>
<p>下面证明该式:<br>
$$<br>
\begin{equation}\label{eq1}<br>
c^d \equiv m \pmod n<br>
\end{equation}<br>
$$</p>
<p>Proof:<br>
$$<br>
\because<br>
m^e \equiv c \pmod n<br>
\<br>
\therefore<br>
c = m^e - kn<br>
$$<br>
将 $c$ 代入$\eqref{eq1}$:<br>
$$<br>
(m^e - kn)^d \equiv m \pmod n<br>
$$</p>
<p>根据 <a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E9%A1%B9%E5%BC%8F%E5%AE%9A%E7%90%86">二项式定理</a>，左边展开后的每一项，除$m^{ed}$以外, 都含有$kn$, 因此, 证明上面的式子<strong>等同于证明</strong>:<br>
$$<br>
\begin{equation}\label{eq2}<br>
m^{ed} \equiv m \pmod n<br>
\end{equation}<br>
$$</p>
<p>注意到:<br>
$$<br>
\because<br>
ed \equiv 1 \pmod {\phi(n)}<br>
$$</p>
<p>$$<br>
\therefore ed = 1 + h\phi(n), h \in N<br>
$$<br>
代入$\eqref{eq2}$得到:<br>
$$<br>
\begin{equation}\label{eq3}<br>
m^{h\phi(n) + 1} \equiv m \pmod n<br>
\end{equation}<br>
$$<br>
我们要证明$\eqref{eq3}$.</p>
<p>接下来分类讨论:</p>
<ol>
<li>
<p>如果 m 和 n 互质.</p>
<p>根据欧拉定理:<br>
$$<br>
m^{\phi(n)} \equiv 1 \pmod n<br>
$$<br>
所以:<br>
$$<br>
\begin{align}<br>
m^{\phi(n)} = kn + 1, n \in N \nonumber \<br>
(m^{\phi(n)})^h = (kn + 1)^h, h \in N \nonumber<br>
\end{align}<br>
$$</p>
<p>根据二项式定理得到:<br>
$$<br>
(kn + 1)^h = (kn)^h + \complement_h^1 (kn)^{h-1} + \dots + \complement_h^{h-1} (kn) + 1<br>
$$<br>
let $k' = k^hn^{h-1} + \complement_h^1 k^{h-1}n^{h-2} + \dots$ , 得到:<br>
$$<br>
(m^{\phi(n)})^h = k’n + 1, k' \in N<br>
$$</p>
<p>也就是:<br>
$$<br>
(m^{\phi(n)})^h \equiv 1 \pmod n<br>
$$<br>
从而:<br>
$$<br>
(m^{\phi(n)})^h \times m \equiv m \pmod n<br>
$$<br>
也就是:<br>
$$<br>
m^{h \phi(n) + 1 } \equiv m \pmod n<br>
$$<br>
前面已经得到:<br>
$$<br>
ed = 1 + h\phi(n)<br>
$$<br>
所以有:<br>
$$<br>
m^{ed} \equiv m \pmod n<br>
$$</p>
<p>Q.E.D.</p>
</li>
<li>
<p>如果 $m$ 和 $n$ 不互质.</p>
<p>因为 $n$ 是质数 $p$ 和 $q$ 的乘积，<strong>此时 $m$ 必然为 $kp$ 或 $hq$</strong> ( $k,h \in N^+$ )[^1]</p>
<p>以 $m = kp$ 为例, 因为 $m &lt; n$ , 所以 $m = kp &lt; n = pq$，所以 $k &lt; q$ , 而 $q$ 是一个质数, 小于 $q$ 的所有数都与 $q$ 互质, 所以 $k$ 与 $q$ 互质.</p>
<p>同时 $kp$ 必然也与 $q$ 互质. 我们用反证法: 如果 $kp$ 和 $q$ 不互质, <strong>则 $kp$ 必然是 $q$ 的倍数</strong>[^2]. 现在 $m = kp $ 既是 $p$ 的倍数又是 $q$ 的倍数, $p, q$ 又是质数, 则 $ m = kp $ 是 $n = pq$ 的倍数, 与前提 $m &lt; n$  矛盾. 因此 $kp$ 与$q$互质.</p>
<p>由于 $kp$ 和 $q$ 互质，根据欧拉定理:<br>
$$<br>
(kp)^{q - 1} \equiv 1 \pmod q<br>
$$<br>
所以:<br>
$$<br>
(kp)^{q - 1} = tq + 1<br>
$$<br>
两边同时进行 $h(p-1)$ 次方:<br>
$$<br>
[(kp)^{q - 1}]^{h(p-1)} = (tq + 1)^{h(p-1)}<br>
$$<br>
同理根据二项式定理，右边展开除了 1 , 每一项都含有$ q$，所以得到:<br>
$$<br>
[(kp)^{q - 1}]^{h(p-1)} \equiv 1 \pmod q<br>
$$<br>
从而得到:<br>
$$<br>
[(kp)^{q - 1}]^{h(p-1)} \times kp \equiv kp \pmod q<br>
$$<br>
注意到:<br>
$$<br>
\begin{align}<br>
n = pq \nonumber \<br>
\phi(n) = n(1 - \frac{1}{p})(1 - \frac{1}{q}) == (p-1)(q-1) \nonumber<br>
\end{align}<br>
$$</p>
<p>所以:<br>
$$<br>
[(kp)^{q - 1}]^{h(p-1)} \times kp = (kp)^{h\phi(n) + 1}<br>
$$<br>
前面已经得到:<br>
$$<br>
ed = 1 + h\phi(n)<br>
$$<br>
所以有:<br>
$$<br>
(kp)^{ed} \equiv kp \pmod q<br>
$$<br>
再改写为如下形式:<br>
$$<br>
(kp)^{ed} = kp + tq<br>
$$<br>
左边 $(kp)^{ed}$ 是  $p$ 的倍数，右边 $kp$ 是 $p$ 的倍数，所以 $tq$ 必然是 $p$ 的倍数。而 $q$ 是 $p$ 互质的，因此 $t$ 必然是 $p$ 的倍数，我们记为 $t = t’p$ , 代入得到:<br>
$$<br>
(kp)^{ed} = kp + t’pq<br>
$$<br>
也就是:<br>
$$<br>
m^{ed} \equiv m \pmod n<br>
$$</p>
<p>Q.E.D</p>
</li>
</ol>
<h1 id="Reliability"><a class="header-anchor" href="#Reliability"></a>Reliability</h1>
<p>接下来我们来看为什么 RSA 是可靠的，也就是说，在得知公钥 $[n, e]$ 的情况下，怎样保证私钥 $[n,d]$ 的安全。</p>
<p>因为 $n$ 和 $e$ 是公开的，所以私钥的安全就是 $d$ 的安全，那么有没有可能在得知 $n$ 和 $e$ 的情况下，推导得出 $d$ ？</p>
<ul>
<li>因为 $ed \equiv 1 \pmod {\phi(n)}$ , 想知道 $d$ 需要知道 $e$ 和 $\phi(n)$</li>
<li>因为 $e$ 是公开的，所以想知道 $d$ 需要知道 $\phi(n) $</li>
<li>而 计算 $\phi(n) $ 需要对正整数 $n$ 进行质数分解</li>
</ul>
<p>所以， <strong>$d$ 的安全性依赖于对  $n$ 进行质数分解的难度</strong>. 大整数的质数分解目前没有很快的算法.  但是,随着量子计算的发展, RSA也不一定安全[MIT TR 2019].</p>
<h1 id="Key-Format"><a class="header-anchor" href="#Key-Format"></a>Key Format</h1>
<p>以下内容摘抄自https://cjting.me/2020/03/13/rsa/</p>
<p>我们现在来生成一对RSA秘钥看看他们的格式是怎样的，上面的几个关键数字 n, e, d 又是怎样保存的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -f rsa</span><br></pre></td></tr></table></figure>
<p>我们得到了 <code>rsa</code> 和 <code>rsa.pub</code> 文件，其中 <code>rsa</code> 是私钥，<code>rsa.pub</code> 是公钥。</p>
<p>先来看公钥，<code>rsa.pub</code> 的内容如下。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMIcdbPh0r8kftRomVX4+6HkCoZYYoWPvI7AQvcEvanZl+j2AqWEFoC8zHMXqXLlMPeE5Nt0tzLFixw9sKOhA3llc2CL4B3cJaYQ1GHI6bpSX1U1PkBtm1YaIMR+d/r22o5On/U0B4Zkmo5Ua+XI3yeYqkyCLgRWz1832IIl9dVvNSln9R89Ox1XOvuMxNnEeACcSBmnAGvY5Jykhf4TBDwwNRmqZpusqkpkfhA6Y9PvjbRNMfcDEz82VV1VeLxIg3ayC6MX5I4vXFORIzx+VbBnxwing8vQZAHj0lFNmWeOZzoh3o9k4uFCSzWezVQD9JV9xQorjsZ5AB1Zdqb1J5 cj@CJs-MacBook-Pro.local</span><br></pre></td></tr></table></figure>
<p>这个格式是 OpenSSH 公钥格式，<a href="https://tools.ietf.org/html/rfc4253#section-6.6">RFC4253</a> 中有详细的说明。简单来说，公钥分为三个部分</p>
<ul>
<li>秘钥类型：<code>ssh-rsa</code></li>
<li>PEM 编码的一段数据：<code>AAAA..b1J5</code></li>
<li>备注：<code>cj@CJs-Macbook-Pro.local</code></li>
</ul>
<p>PEM 的全称是 <a href="https://en.wikipedia.org/wiki/Base64#Privacy-enhanced_mail">Privacy Enhanced Mail</a>，是一种 Base64 编码，使用 ASCII 来编码二进制数据。</p>
<p>PEM 编码的数据是三个 <code>(length, data)</code> 数据块，<code>length</code> 为四个字节，BigEndian.</p>
<ul>
<li>第一个 data 表示秘钥类型，和公钥第一部分相同</li>
<li>第二个 data 为 RSA exponent，也就是 $e$</li>
<li>第三个 data 为 RSA modulus，也就是 $n$</li>
</ul>
<p>根据上面的知识，我们可以很容易地解析 <code>rsa.pub</code> 文件，下文中提到的 <code>rsademo</code> 程序实现了公钥解析的逻辑。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rsademo -parse rsa.pub</span><br><span class="line">OpenSSH Public Key</span><br><span class="line">  algorithm: ssh-rsa</span><br><span class="line">  e: 0x010001</span><br><span class="line">  n: 0xCC21C75B3E1D2BF247ED4689955F8FBA1E40A865862858FBC8EC042F704BDA9D997E8F602A5841680BCCC7317A972E530F784E4DB74B732C58B1C3DB0A3A103796573608BE01DDC25A610D461C8E9BA525F55353E406D9B561A20C47E77FAF6DA8E4E9FF5340786649A8E546BE5C8DF2798AA4C822E0456CF5F37D88225F5D56F352967F51F3D3B1D573AFB8CC4D9C478009C4819A7006BD8E49CA485FE13043C303519AA669BACAA4A647E103A63D3EF8DB44D31F703133F36555D5578BC488376B20BA317E48E2F5C5391233C7E55B067C708A783CBD06401E3D2514D99678E673A21DE8F64E2E1424B359ECD5403F4957DC50A2B8EC679001D5976A6F5279</span><br></pre></td></tr></table></figure>
<p>我们也可以使用 <code>openssl</code> 来解析。因为公钥是 OpenSSH 的格式，需要先转换到标准的 PEM 格式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -e -m PEM -f rsa.pub | openssl asn1parse -inform PEM</span><br><span class="line">    0:d=0  hl=4 l= 266 cons: SEQUENCE</span><br><span class="line">    4:d=1  hl=4 l= 257 prim: INTEGER           :CC21C75B3E1D2BF247ED4689955F8FBA1E40A865862858FBC8EC042F704BDA9D997E8F602A5841680BCCC7317A972E530F784E4DB74B732C58B1C3DB0A3A103796573608BE01DDC25A610D461C8E9BA525F55353E406D9B561A20C47E77FAF6DA8E4E9FF5340786649A8E546BE5C8DF2798AA4C822E0456CF5F37D88225F5D56F352967F51F3D3B1D573AFB8CC4D9C478009C4819A7006BD8E49CA485FE13043C303519AA669BACAA4A647E103A63D3EF8DB44D31F703133F36555D5578BC488376B20BA317E48E2F5C5391233C7E55B067C708A783CBD06401E3D2514D99678E673A21DE8F64E2E1424B359ECD5403F4957DC50A2B8EC679001D5976A6F5279</span><br><span class="line">  265:d=1  hl=2 l=   3 prim: INTEGER           :010001</span><br></pre></td></tr></table></figure>
<p>可以很容易地看出第一个数字是 n，第二个数字是 e，都是十六进制的表达方式。</p>
<p>私钥的内容如下。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">-----BEGIN OPENSSH PRIVATE KEY-----</span><br><span class="line">b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABFwAAAAdzc2gtcn</span><br><span class="line">NhAAAAAwEAAQAAAQEAzCHHWz4dK/JH7UaJlV+Puh5AqGWGKFj7yOwEL3BL2p2Zfo9gKlhB</span><br><span class="line">aAvMxzF6ly5TD3hOTbdLcyxYscPbCjoQN5ZXNgi+Ad3CWmENRhyOm6Ul9VNT5AbZtWGiDE</span><br><span class="line">fnf69tqOTp/1NAeGZJqOVGvlyN8nmKpMgi4EVs9fN9iCJfXVbzUpZ/UfPTsdVzr7jMTZxH</span><br><span class="line">gAnEgZpwBr2OScpIX+EwQ8MDUZqmabrKpKZH4QOmPT7420TTH3AxM/NlVdVXi8SIN2sguj</span><br><span class="line">F+SOL1xTkSM8flWwZ8cIp4PL0GQB49JRTZlnjmc6Id6PZOLhQks1ns1UA/SVfcUKK47GeQ</span><br><span class="line">AdWXam9SeQAAA9B/9/tPf/f7TwAAAAdzc2gtcnNhAAABAQDMIcdbPh0r8kftRomVX4+6Hk</span><br><span class="line">CoZYYoWPvI7AQvcEvanZl+j2AqWEFoC8zHMXqXLlMPeE5Nt0tzLFixw9sKOhA3llc2CL4B</span><br><span class="line">3cJaYQ1GHI6bpSX1U1PkBtm1YaIMR+d/r22o5On/U0B4Zkmo5Ua+XI3yeYqkyCLgRWz183</span><br><span class="line">2IIl9dVvNSln9R89Ox1XOvuMxNnEeACcSBmnAGvY5Jykhf4TBDwwNRmqZpusqkpkfhA6Y9</span><br><span class="line">PvjbRNMfcDEz82VV1VeLxIg3ayC6MX5I4vXFORIzx+VbBnxwing8vQZAHj0lFNmWeOZzoh</span><br><span class="line">3o9k4uFCSzWezVQD9JV9xQorjsZ5AB1Zdqb1J5AAAAAwEAAQAAAQEAiC1gmPXu8ApJAXk0</span><br><span class="line">/3kooLjd2Xkg7nmuPnN0t1DqyYSpiUyMkrMdrxNwINJZPdGhh4hydFX693J2GODXlxL1Dq</span><br><span class="line">A0vc9HMmeF6FUmTcdvO1YI5IgaRtxrEB15xUeSoBOfzDQqBjK7p5ZVPV72urdz2nZKj3MU</span><br><span class="line">ERk/fzRYYiDMDa9o4frPay3vc2NLSjqbrpFXTHGBYGpVoIY1R7awczBILIz+TqVZ0Awlpp</span><br><span class="line">89aU3K9K4Sbgnb6p0dcGD8FLoRI5geviLOwYbAnuELxzMrJSVC4xH6UMiLGGqm07qpB3cx</span><br><span class="line">Dd2M6jW1179bNko5qHnbsi87SYO5ms+3mRnin6I08kBogQAAAIEAlAGXHrG3+L73gXfK74</span><br><span class="line">8qoC//E97EdtjPZImAr4Ess62TTfOi3SBungRvmXtWY9s/gkimZa6BL2elyEWlwlLlllX2</span><br><span class="line">jZLbLDjRbGdEmjEwIlzF6Dlkv5EiuGzzJ06MirVuOVpWSgtI3GL+Ir8ovibHq+zz7MGPMQ</span><br><span class="line">dsqqASDZXvPn8AAACBAP/frz0gP1YC6w1ZPIcNCFgcWqfKofSwQviZGthpk04ZwwCkNu2X</span><br><span class="line">sG61MqhnsrUt2vJhMtB0khboXa1SxHO6og5duCH2Tn8uWlZsTiFAjhqOxuZwaCd2f+1tgc</span><br><span class="line">4SUpIdavJrkeLLUM+7JprdUeqGGrv9ae5vtfhEBozbwDGm3CJFAAAAgQDMO487OesMXGh2</span><br><span class="line">p2WES/pw+LxJuFqtZZY8Oy2uBNJKXNeFWXioiL4EglMLBgPz5zFkg73qMF2cTP/XFSiO8z</span><br><span class="line">q6LUJOy6FnKDPF8eo5jkaIjyLK3ue9BjF79AB2vkB5APSwNBS6Q5sryKqlaT1u3mx+45FZ</span><br><span class="line">HLB/Zl4iDn404UoMpQAAABhjakBDSnMtTWFjQm9vay1Qcm8ubG9jYWwB</span><br><span class="line">-----END OPENSSH PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<p>我并没有找到标准的格式说明文档，不过这篇博客 <a href="https://coolaj86.com/articles/the-openssh-private-key-format/">The OpenSSH Private Key Format</a> 写的很清楚，我验证了一下，是对的。</p>
<p>简单来说，除去开头和结尾的 Marker，中间部分是 Base64 编码的一段数据，数据格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;openssh-key-v1&quot;0x00    # NULL-terminated &quot;Auth Magic&quot; string</span><br><span class="line">32-bit length, &quot;none&quot;   # ciphername length and string</span><br><span class="line">32-bit length, &quot;none&quot;   # kdfname length and string</span><br><span class="line">32-bit length, nil      # kdf (0 length, no kdf)</span><br><span class="line">32-bit 0x01             # number of keys, hard-coded to 1 (no length)</span><br><span class="line">32-bit length, sshpub   # public key in ssh format</span><br><span class="line">    32-bit length, keytype</span><br><span class="line">    32-bit length, pub0</span><br><span class="line">    32-bit length, pub1</span><br><span class="line">32-bit length for rnd+prv+comment+pad</span><br><span class="line">    64-bit dummy checksum?  # a random 32-bit int, repeated</span><br><span class="line">    32-bit length, keytype  # the private key (including public)</span><br><span class="line">    32-bit length, pub0     # Public Key parts</span><br><span class="line">    32-bit length, pub1</span><br><span class="line">    32-bit length, prv0     # Private Key parts</span><br><span class="line">    ...                     # (number varies by type)</span><br><span class="line">    32-bit length, comment  # comment string</span><br><span class="line">    padding bytes 0x010203  # pad to blocksize (see notes below)</span><br></pre></td></tr></table></figure>
<p>根据上面的描述，我们会发现，其实私钥文件中完整编码了公钥的信息，所以通过私钥我们可以很容易地“恢复”出公钥文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -y -f rsa</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMIcdbPh0r8kftRomVX4+6HkCoZYYoWPvI7AQvcEvanZl+j2AqWEFoC8zHMXqXLlMPeE5Nt0tzLFixw9sKOhA3llc2CL4B3cJaYQ1GHI6bpSX1U1PkBtm1YaIMR+d/r22o5On/U0B4Zkmo5Ua+XI3yeYqkyCLgRWz1832IIl9dVvNSln9R89Ox1XOvuMxNnEeACcSBmnAGvY5Jykhf4TBDwwNRmqZpusqkpkfhA6Y9PvjbRNMfcDEz82VV1VeLxIg3ayC6MX5I4vXFORIzx+VbBnxwing8vQZAHj0lFNmWeOZzoh3o9k4uFCSzWezVQD9JV9xQorjsZ5AB1Zdqb1J5</span><br></pre></td></tr></table></figure>
<p>有了结构说明，就不难自己实现解析器了。同样，下文的 <code>rsademo</code> 程序实现了私钥的解析逻辑。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rsademo -parse rsa</span><br><span class="line">OpenSSH Private Key</span><br><span class="line">  keyType: ssh-rsa</span><br><span class="line">  n: 0xCC21C75B3E1D2BF247ED4689955F8FBA1E40A865862858FBC8EC042F704BDA9D997E8F602A5841680BCCC7317A972E530F784E4DB74B732C58B1C3DB0A3A103796573608BE01DDC25A610D461C8E9BA525F55353E406D9B561A20C47E77FAF6DA8E4E9FF5340786649A8E546BE5C8DF2798AA4C822E0456CF5F37D88225F5D56F352967F51F3D3B1D573AFB8CC4D9C478009C4819A7006BD8E49CA485FE13043C303519AA669BACAA4A647E103A63D3EF8DB44D31F703133F36555D5578BC488376B20BA317E48E2F5C5391233C7E55B067C708A783CBD06401E3D2514D99678E673A21DE8F64E2E1424B359ECD5403F4957DC50A2B8EC679001D5976A6F5279</span><br><span class="line">  e: 0x010001</span><br><span class="line">  d: 0x882D6098F5EEF00A49017934FF7928A0B8DDD97920EE79AE3E7374B750EAC984A9894C8C92B31DAF137020D2593DD1A18788727455FAF7727618E0D79712F50EA034BDCF47326785E855264DC76F3B5608E4881A46DC6B101D79C54792A0139FCC342A0632BBA796553D5EF6BAB773DA764A8F731411193F7F34586220CC0DAF68E1FACF6B2DEF73634B4A3A9BAE91574C7181606A55A0863547B6B07330482C8CFE4EA559D00C25A69F3D694DCAF4AE126E09DBEA9D1D7060FC14BA1123981EBE22CEC186C09EE10BC7332B252542E311FA50C88B186AA6D3BAA90777310DDD8CEA35B5D7BF5B364A39A879DBB22F3B4983B99ACFB79919E29FA234F2406881</span><br><span class="line">  p: 0xFFDFAF3D203F5602EB0D593C870D08581C5AA7CAA1F4B042F8991AD869934E19C300A436ED97B06EB532A867B2B52DDAF26132D0749216E85DAD52C473BAA20E5DB821F64E7F2E5A566C4E21408E1A8EC6E6706827767FED6D81CE1252921D6AF26B91E2CB50CFBB269ADD51EA861ABBFD69EE6FB5F844068CDBC031A6DC2245</span><br><span class="line">  q: 0xCC3B8F3B39EB0C5C6876A765844BFA70F8BC49B85AAD65963C3B2DAE04D24A5CD7855978A888BE0482530B0603F3E7316483BDEA305D9C4CFFD715288EF33ABA2D424ECBA1672833C5F1EA398E46888F22CADEE7BD06317BF40076BE407900F4B03414BA439B2BC8AAA5693D6EDE6C7EE391591CB07F665E220E7E34E14A0CA5</span><br></pre></td></tr></table></figure>
<p>如果使用 <code>openssl</code> 的话，可以通过如下指令解析私钥。<code>ssh-keygen</code> 无法直接更改私钥的格式，需要曲线救国，使用它“修改密码”的功能，参考 <a href="https://unix.stackexchange.com/questions/84060/convert-openssh-private-key-into-ssh2-private-key">这个提问</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> rsa rsa.pem</span><br><span class="line">$ ssh-keygen -p -m PEM -f rsa.pem</span><br><span class="line">$ <span class="built_in">cat</span> rsa.pem</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEpQIBAAKCAQEAzCHHWz4dK/JH7UaJlV+Puh5AqGWGKFj7yOwEL3BL2p2Zfo9g</span><br><span class="line">KlhBaAvMxzF6ly5TD3hOTbdLcyxYscPbCjoQN5ZXNgi+Ad3CWmENRhyOm6Ul9VNT</span><br><span class="line">5AbZtWGiDEfnf69tqOTp/1NAeGZJqOVGvlyN8nmKpMgi4EVs9fN9iCJfXVbzUpZ/</span><br><span class="line">UfPTsdVzr7jMTZxHgAnEgZpwBr2OScpIX+EwQ8MDUZqmabrKpKZH4QOmPT7420TT</span><br><span class="line">H3AxM/NlVdVXi8SIN2sgujF+SOL1xTkSM8flWwZ8cIp4PL0GQB49JRTZlnjmc6Id</span><br><span class="line">6PZOLhQks1ns1UA/SVfcUKK47GeQAdWXam9SeQIDAQABAoIBAQCILWCY9e7wCkkB</span><br><span class="line">eTT/eSiguN3ZeSDuea4+c3S3UOrJhKmJTIySsx2vE3Ag0lk90aGHiHJ0Vfr3cnYY</span><br><span class="line">4NeXEvUOoDS9z0cyZ4XoVSZNx287VgjkiBpG3GsQHXnFR5KgE5/MNCoGMrunllU9</span><br><span class="line">Xva6t3PadkqPcxQRGT9/NFhiIMwNr2jh+s9rLe9zY0tKOpuukVdMcYFgalWghjVH</span><br><span class="line">trBzMEgsjP5OpVnQDCWmnz1pTcr0rhJuCdvqnR1wYPwUuhEjmB6+Is7BhsCe4QvH</span><br><span class="line">MyslJULjEfpQyIsYaqbTuqkHdzEN3YzqNbXXv1s2SjmoeduyLztJg7maz7eZGeKf</span><br><span class="line">ojTyQGiBAoGBAP/frz0gP1YC6w1ZPIcNCFgcWqfKofSwQviZGthpk04ZwwCkNu2X</span><br><span class="line">sG61MqhnsrUt2vJhMtB0khboXa1SxHO6og5duCH2Tn8uWlZsTiFAjhqOxuZwaCd2</span><br><span class="line">f+1tgc4SUpIdavJrkeLLUM+7JprdUeqGGrv9ae5vtfhEBozbwDGm3CJFAoGBAMw7</span><br><span class="line">jzs56wxcaHanZYRL+nD4vEm4Wq1lljw7La4E0kpc14VZeKiIvgSCUwsGA/PnMWSD</span><br><span class="line">veowXZxM/9cVKI7zOrotQk7LoWcoM8Xx6jmORoiPIsre570GMXv0AHa+QHkA9LA0</span><br><span class="line">FLpDmyvIqqVpPW7ebH7jkVkcsH9mXiIOfjThSgylAoGBANSTUnQXCWd8zyjs3TNZ</span><br><span class="line">6XfCPrKtzvWJRmpgUIRA2eeF0ZMD2rpzTln7YdW1KSwKp568j8nNPt2XONRZMerv</span><br><span class="line">v9jtlZ9pkPdqXBT2r8ZCaoy315j1BCLc+RUY6EF6yWyo0gQKyE3CGiYq1rzMaFTO</span><br><span class="line">CwHpXAuCdYyHf2Wg38CgXrx9AoGAHvN3xXYFlR38Bt9flykcjzpi7pktxNF8byxY</span><br><span class="line">w+KfK/3d+6uPiZsPkQdfJnCG8NO8vIrqoS8rQKC6tRHTz7Y01Do/rklV8Jg7IGiF</span><br><span class="line">IqvZLKDkmPInFJJ3tV1JJLW4d54ZdwqtiXztazlCA0drs/2pW6GJSYP7i5Mr+OVR</span><br><span class="line">YxoxarECgYEAlAGXHrG3+L73gXfK748qoC//E97EdtjPZImAr4Ess62TTfOi3SBu</span><br><span class="line">ngRvmXtWY9s/gkimZa6BL2elyEWlwlLlllX2jZLbLDjRbGdEmjEwIlzF6Dlkv5Ei</span><br><span class="line">uGzzJ06MirVuOVpWSgtI3GL+Ir8ovibHq+zz7MGPMQdsqqASDZXvPn8=</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<p>得到 PEM 格式的私钥以后，剩下就好办了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl asn1parse -inform PEM &lt; rsa.pem</span><br><span class="line">    0:d=0  hl=4 l=1189 cons: SEQUENCE</span><br><span class="line">    4:d=1  hl=2 l=   1 prim: INTEGER           :00</span><br><span class="line">    7:d=1  hl=4 l= 257 prim: INTEGER           :CC21C75B3E1D2BF247ED4689955F8FBA1E40A865862858FBC8EC042F704BDA9D997E8F602A5841680BCCC7317A972E530F784E4DB74B732C58B1C3DB0A3A103796573608BE01DDC25A610D461C8E9BA525F55353E406D9B561A20C47E77FAF6DA8E4E9FF5340786649A8E546BE5C8DF2798AA4C822E0456CF5F37D88225F5D56F352967F51F3D3B1D573AFB8CC4D9C478009C4819A7006BD8E49CA485FE13043C303519AA669BACAA4A647E103A63D3EF8DB44D31F703133F36555D5578BC488376B20BA317E48E2F5C5391233C7E55B067C708A783CBD06401E3D2514D99678E673A21DE8F64E2E1424B359ECD5403F4957DC50A2B8EC679001D5976A6F5279</span><br><span class="line">  268:d=1  hl=2 l=   3 prim: INTEGER           :010001</span><br><span class="line">  273:d=1  hl=4 l= 257 prim: INTEGER           :882D6098F5EEF00A49017934FF7928A0B8DDD97920EE79AE3E7374B750EAC984A9894C8C92B31DAF137020D2593DD1A18788727455FAF7727618E0D79712F50EA034BDCF47326785E855264DC76F3B5608E4881A46DC6B101D79C54792A0139FCC342A0632BBA796553D5EF6BAB773DA764A8F731411193F7F34586220CC0DAF68E1FACF6B2DEF73634B4A3A9BAE91574C7181606A55A0863547B6B07330482C8CFE4EA559D00C25A69F3D694DCAF4AE126E09DBEA9D1D7060FC14BA1123981EBE22CEC186C09EE10BC7332B252542E311FA50C88B186AA6D3BAA90777310DDD8CEA35B5D7BF5B364A39A879DBB22F3B4983B99ACFB79919E29FA234F2406881</span><br><span class="line">  534:d=1  hl=3 l= 129 prim: INTEGER           :FFDFAF3D203F5602EB0D593C870D08581C5AA7CAA1F4B042F8991AD869934E19C300A436ED97B06EB532A867B2B52DDAF26132D0749216E85DAD52C473BAA20E5DB821F64E7F2E5A566C4E21408E1A8EC6E6706827767FED6D81CE1252921D6AF26B91E2CB50CFBB269ADD51EA861ABBFD69EE6FB5F844068CDBC031A6DC2245</span><br><span class="line">  666:d=1  hl=3 l= 129 prim: INTEGER           :CC3B8F3B39EB0C5C6876A765844BFA70F8BC49B85AAD65963C3B2DAE04D24A5CD7855978A888BE0482530B0603F3E7316483BDEA305D9C4CFFD715288EF33ABA2D424ECBA1672833C5F1EA398E46888F22CADEE7BD06317BF40076BE407900F4B03414BA439B2BC8AAA5693D6EDE6C7EE391591CB07F665E220E7E34E14A0CA5</span><br><span class="line">  798:d=1  hl=3 l= 129 prim: INTEGER           :D49352741709677CCF28ECDD3359E977C23EB2ADCEF589466A60508440D9E785D19303DABA734E59FB61D5B5292C0AA79EBC8FC9CD3EDD9738D45931EAEFBFD8ED959F6990F76A5C14F6AFC6426A8CB7D798F50422DCF91518E8417AC96CA8D2040AC84DC21A262AD6BCCC6854CE0B01E95C0B82758C877F65A0DFC0A05EBC7D</span><br><span class="line">  930:d=1  hl=3 l= 128 prim: INTEGER           :1EF377C57605951DFC06DF5F97291C8F3A62EE992DC4D17C6F2C58C3E29F2BFDDDFBAB8F899B0F91075F267086F0D3BCBC8AEAA12F2B40A0BAB511D3CFB634D43A3FAE4955F0983B20688522ABD92CA0E498F227149277B55D4924B5B8779E19770AAD897CED6B394203476BB3FDA95BA1894983FB8B932BF8E551631A316AB1</span><br><span class="line"> 1061:d=1  hl=3 l= 129 prim: INTEGER           :9401971EB1B7F8BEF78177CAEF8F2AA02FFF13DEC476D8CF648980AF812CB3AD934DF3A2DD206E9E046F997B5663DB3F8248A665AE812F67A5C845A5C252E59655F68D92DB2C38D16C67449A3130225CC5E83964BF9122B86CF3274E8C8AB56E395A564A0B48DC62FE22BF28BE26C7ABECF3ECC18F31076CAAA0120D95EF3E7F</span><br></pre></td></tr></table></figure>
<p>我们得到了一堆数字，对照如下的说明，就可以知道每个数字的含义。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">RSAPrivateKey ::= SEQUENCE &#123;</span><br><span class="line">    version           Version,</span><br><span class="line">    modulus           INTEGER,  -- n</span><br><span class="line">    publicExponent    INTEGER,  -- e</span><br><span class="line">    privateExponent   INTEGER,  -- d</span><br><span class="line">    prime1            INTEGER,  -- p</span><br><span class="line">    prime2            INTEGER,  -- q</span><br><span class="line">    exponent1         INTEGER,  -- d mod (p-1)</span><br><span class="line">    exponent2         INTEGER,  -- d mod (q-1)</span><br><span class="line">    coefficient       INTEGER,  -- (inverse of q) mod p</span><br><span class="line">    otherPrimeInfos   OtherPrimeInfos OPTIONAL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Use-RSA"><a class="header-anchor" href="#Use-RSA"></a>Use RSA</h1>
<p>这里我们来演示一下直接加密一个消息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成我们的私密消息</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;This is our secret message.&quot;</span> &gt; secret.txt</span><br><span class="line"><span class="comment"># 使用 RSA 加密，注意要转换公钥格式到 PKCS8</span></span><br><span class="line">$ openssl rsautl -encrypt -oaep -pubin -inkey &lt;(ssh-keygen -e -m PKCS8 -f rsa.pub) -<span class="keyword">in</span> secret.txt -out secret.txt.enc</span><br><span class="line"><span class="comment"># 加密以后的文件是 secret.txt.enc</span></span><br><span class="line"><span class="comment"># 接下来使用 RSA 解密，同样要转换私钥格式</span></span><br><span class="line"><span class="comment"># 我们使用上文中得到的 PEM 格式私钥，rsa.pem</span></span><br><span class="line">$ openssl rsautl -decrypt -oaep -inkey rsa.pem -<span class="keyword">in</span> secret.txt.enc -out result.txt</span><br><span class="line"><span class="comment"># 验证一下是否得到了原始消息</span></span><br><span class="line">$ <span class="built_in">cat</span> result.txt</span><br><span class="line">This is our secret message.</span><br></pre></td></tr></table></figure>
<p>上面我们提到的 RSA 加密过程，也就是 ，也被称为教科书式 RSA。工程应用中，不会直接这样处理，而是会存在一个 Padding 的过程，具体不再展开，感兴趣可以去看 <a href="https://eli.thegreenplace.net/2019/rsa-theory-and-implementation/">RSA - theory and implementation</a>。</p>
<p>注意，密码学中有很多微妙的问题要考虑。我们这里所做的一切都是为了学习和理解他们的工作原理，而不是为了自己去实现他们。<strong>千万不要自己去实现任何加密解密算法，专业的事情交给专业的人员处理就好</strong>.</p>
<p>[^1]: $m$​, $n$​ 不互质, 则$m$​与$n$​有1以外的公因数.  $m = pq$​ , $m$​ 的因数有: 1, $p$​, $q$​, $pq$​ . 因此 $n$​ 必定至少有因数 $p$​, $q$​, $pq$​ 之一, 因此 $m$​ 为 $p$​ 或 $q$​ 的倍数<br>
[^2]: &quot;若一个数是质数, 则两个数互质 == 另一个数不是前者的倍数&quot;</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Computer Networking</tag>
        <tag>Cryptology</tag>
      </tags>
  </entry>
  <entry>
    <title>React Basic</title>
    <url>/2022/08/23/React-Basic/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Intro</li>
<li>Components</li>
<li>JSX</li>
<li>...</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<ul>
<li>
<p><a href="https://reactjs.org/docs/hello-world.html">React Official Docs</a></p>
</li>
<li>
<p><a href="https://fullstackopen.com/en/#course-contents">Full Stack Tutorial -&gt; Web Development</a></p>
</li>
<li>
<p><a href="https://www.netlify.com/blog/2019/03/11/deep-dive-how-do-react-hooks-really-work/">How do React hooks really work?</a></p>
</li>
</ul>
<p>React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called “components”.</p>
<h1 id="Components"><a class="header-anchor" href="#Components"></a>Components</h1>
<p>Component是React中的一等公民. 有两种方式创建Component, 它们是等价的:</p>
<ul>
<li>Class Components</li>
<li>Function Components</li>
</ul>
<h2 id="Class-Components"><a class="header-anchor" href="#Class-Components"></a>Class Components</h2>
<p><code>React.Component</code>是一个抽象基类. 这意味着直接引用<code>React.Component</code>是毫无意义的. 你可以实现一个它的子类，并且至少定义一个<code>render()</code>方法.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ShoppingList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;shopping-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Shopping List for &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>Instagram<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>WhatsApp<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>Oculus<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example usage: &lt;ShoppingList name=&quot;Mark&quot; /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Function-Components"><a class="header-anchor" href="#Function-Components"></a>Function Components</h2>
<p>Function Components比Class Components更简洁, 它默认没有State, 可以用hook函数给Function Components添加State.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Square</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;square&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;props.onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.value&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="props"><a class="header-anchor" href="#props"></a>props</h2>
<p>组件通过<code>props</code>来接收参数.</p>
<p><code>props</code>是<strong>Read-Only</strong>的</p>
<p><strong>All React components must act like pure functions with respect to their props.</strong></p>
<ul>
<li>
<p>对于Class Component, <code>props</code>是其自带的成员</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>对于Function Component, 函数必须接受<code>props</code>为参数</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>外部传参数给组件时, 参数都会被绑定到<code>props</code>的属性:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">Welcome</span> <span class="attr">name</span>=<span class="string">&quot;Sara&quot;</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>现在<code>Welcome</code>组件实例的<code>props</code>拥有了属性<code>props.name</code>, 其值为<code>&quot;Sara&quot;</code></li>
</ul>
<h2 id="Fragments"><a class="header-anchor" href="#Fragments"></a>Fragments</h2>
<p>the content of a React component (usually) needs to contain <strong>one root element</strong>:</p>
<ol>
<li>
<p>可以用<em>array</em>包裹:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Greetings<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">&quot;Maya&quot;</span> <span class="attr">age</span>=<span class="string">&#123;26</span> + <span class="attr">10</span>&#125; /&gt;</span></span>,</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>也可以用<code>&lt;div&gt;&lt;div/&gt;</code>等标签包裹, 不过这样很冗余. React为此推出了 <a href="https://reactjs.org/docs/fragments.html#short-syntax">fragments</a>, 其语法是一个空标签:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&#x27;Peter&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> age = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Greetings<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">&quot;Maya&quot;</span> <span class="attr">age</span>=<span class="string">&#123;26</span> + <span class="attr">10</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;</span> <span class="attr">age</span>=<span class="string">&#123;age&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Footer</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="JSX"><a class="header-anchor" href="#JSX"></a>JSX</h1>
<p>JSX形式上类似HTML, 它会被编译为JS代码. 因此JSX实际上是JS表达式.</p>
<p>在JSX内可以通过curly braces来使用<strong>任何JS表达式</strong>:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Josh Perez&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>
<p>可以直接写pure JS来替代JSX:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;greeting&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Hello, world!</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> element = <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  &#123;<span class="attr">className</span>: <span class="string">&#x27;greeting&#x27;</span>&#125;,</span><br><span class="line">  <span class="string">&#x27;Hello, world!&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>可以看到这样写很繁琐. JSX可以简化开发</p>
<h1 id="Rendering-Elements"><a class="header-anchor" href="#Rendering-Elements"></a>Rendering Elements</h1>
<h2 id="React-Element"><a class="header-anchor" href="#React-Element"></a>React Element</h2>
<p>React element就是一段JSX( or JS表达式 ), element通过<code>render()</code>来被渲染, 并在页面展示.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="DOM-Element"><a class="header-anchor" href="#DOM-Element"></a>DOM Element</h2>
<p>React假定HTML页面有一个root element, 它是个DOM element:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>React把该DOM element转化成React element:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="Conditional-Rendering"><a class="header-anchor" href="#Conditional-Rendering"></a>Conditional Rendering</h2>
<h2 id="render"><a class="header-anchor" href="#render"></a>render()</h2>
<p><code>render()</code>方法返回React element.</p>
<p>最简单的做法是让root element( 此时是React element )来render:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">root.<span class="title function_">render</span>(element);</span><br></pre></td></tr></table></figure>
<p>事实上, 大部分React APP只会调用<code>root.render()</code>一次, 用于首次加载</p>
<p>对于组件的重新渲染,  我们使用Stateful Components.</p>
<ul>
<li>因为需要重新渲染的组件, 都是有状态的组件( Stateful Components )</li>
<li>事实上, <strong>当且仅当组件的状态发生变更时, 才会触发Rerender</strong>
<ul>
<li>改变<code>props</code>不会触发rerender</li>
</ul>
</li>
</ul>
<h1 id="Stateful-Components"><a class="header-anchor" href="#Stateful-Components"></a>Stateful Components</h1>
<ul>
<li>对于Class Components, 通过加入<code>state</code>成员等操作, 使其变为Stateful Components</li>
<li>对于Function Components, React引入了hook函数来使其变为Stateful Components</li>
</ul>
<hr>
<h2 id="Notes"><a class="header-anchor" href="#Notes"></a>Notes</h2>
<p><strong>Do Not Modify State Directly since <a href="https://stackoverflow.com/a/40309023">it can result in unexpected side effects</a>.</strong></p>
<p>For example, this will not re-render a component:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">comment</span> = <span class="string">&#x27;Hello&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><strong>Instead, use <code>setState()</code>:</strong></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">comment</span>: <span class="string">&#x27;Hello&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>The only place where you can assign <code>this.state</code> is the constructor.</p>
<hr>
<h2 id="For-Class-Component"><a class="header-anchor" href="#For-Class-Component"></a>For Class Component</h2>
<p>对于Class Component, 可以使用<code>state</code>成员来保存要变化(因此要被重新rend)的成员.</p>
<p>此外, 将<code>return ...</code>改为<code>render() &#123; ... &#125;</code></p>
<p>每次<code>state</code>的属性有更改,就会触发<code>render()</code></p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125;.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Clock</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure>
<h3 id="State-Updates-May-Be-Asynchronous"><a class="header-anchor" href="#State-Updates-May-Be-Asynchronous"></a>State Updates May Be Asynchronous</h3>
<p>React may batch multiple <code>setState()</code> calls into a single update for performance.</p>
<p>Because <code>this.props</code> and <code>this.state</code> may be updated asynchronously, you should not rely on their values for calculating the next state.</p>
<p>For example, this code may fail to update the counter:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">  <span class="attr">counter</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">counter</span> + <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">increment</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>To fix it, use a second form of <code>setState()</code> that accepts a function rather than an object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Correct</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">state, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">counter</span>: state.<span class="property">counter</span> + props.<span class="property">increment</span></span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<h2 id="Lifting-State-Up"><a class="header-anchor" href="#Lifting-State-Up"></a>Lifting State Up</h2>
<p>Often, several components need to reflect the same changing data. We recommend lifting the shared state up to their closest common ancestor.</p>
<h3 id="Example"><a class="header-anchor" href="#Example"></a>Example</h3>
<p>子组件的状态都被封装到父组件:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [ counter, setCounter ] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increaseByOne</span> = (<span class="params"></span>) =&gt; <span class="title function_">setCounter</span>(counter + <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">decreaseByOne</span> = (<span class="params"></span>) =&gt; <span class="title function_">setCounter</span>(counter - <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setToZero</span> = (<span class="params"></span>) =&gt; <span class="title function_">setCounter</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Display</span> <span class="attr">counter</span>=<span class="string">&#123;counter&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;increaseByOne&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">text</span>=<span class="string">&#x27;plus&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;setToZero&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">text</span>=<span class="string">&#x27;zero&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span>     </span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;decreaseByOne&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">text</span>=<span class="string">&#x27;minus&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span>           </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子组件不需要保存State:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Display</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.counter&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;props.onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.text&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Hooks"><a class="header-anchor" href="#Hooks"></a>Hooks</h1>
<p><em>Hooks</em> are a new addition in React 16.8. They let you use state and other React features without writing a class.</p>
<p><strong>Hooks allow you to reuse stateful logic without changing your component hierarchy.</strong></p>
<p>Hooks are <a href="https://reactjs.org/docs/hooks-intro.html#no-breaking-changes">backwards-compatible</a>.</p>
<h2 id="useState"><a class="header-anchor" href="#useState"></a>useState()</h2>
<p>React provides a few built-in Hooks like <code>useState</code>. You can also create your own Hooks to reuse stateful behavior between different components. We’ll look at the built-in Hooks first.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>; <span class="comment">//imports the useState function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Declare a new state variable, which we&#x27;ll call &quot;count&quot;</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>useState</code> returns a pair: the <em>current</em> state value and a function that lets you update it.</p>
</li>
<li>
<p>You can call this function from an event handler or somewhere else. It’s similar to <code>this.setState</code> in a class, except it doesn’t merge the old and new state together. (We’ll show an example comparing <code>useState</code> to <code>this.state</code> in <a href="https://reactjs.org/docs/hooks-state.html">Using the State Hook</a>.)</p>
</li>
<li>
<p>The only argument to <code>useState</code> is the initial state. In the example above, it is <code>0</code> because our counter starts from zero. Note that unlike <code>this.state</code>, the state here doesn’t have to be an object — although it can be if you want. The initial state argument is only used during the first render.</p>
</li>
</ul>
<h3 id="Complex-state"><a class="header-anchor" href="#Complex-state"></a>Complex state</h3>
<p>The component's state or a piece of its state can be of <strong>any type</strong>.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ExampleWithManyStates</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Declare multiple state variables!</span></span><br><span class="line">  <span class="keyword">const</span> [age, setAge] = <span class="title function_">useState</span>(<span class="number">42</span>);</span><br><span class="line">  <span class="keyword">const</span> [fruit, setFruit] = <span class="title function_">useState</span>(<span class="string">&#x27;banana&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> [todos, setTodos] = <span class="title function_">useState</span>([&#123; <span class="attr">text</span>: <span class="string">&#x27;Learn Hooks&#x27;</span> &#125;]);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以和解构赋值以及<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">object spread</a> syntax结合来简化代码:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [clicks, setClicks] = <span class="title function_">useState</span>(&#123; <span class="comment">//解构赋值</span></span><br><span class="line">    <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">right</span>: <span class="number">0</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleLeftClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> newClicks = &#123; </span><br><span class="line">    ...clicks, <span class="comment">//object spread syntax</span></span><br><span class="line">    <span class="attr">left</span>: clicks.<span class="property">left</span> + <span class="number">1</span> </span><br><span class="line">  	&#125;</span><br><span class="line">  <span class="title function_">setClicks</span>(newClicks)</span><br><span class="line">	&#125;</span><br><span class="line">  </span><br><span class="line">	<span class="keyword">const</span> <span class="title function_">handleRightClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> newClicks = &#123; </span><br><span class="line">    ...clicks, </span><br><span class="line">    <span class="attr">right</span>: clicks.<span class="property">right</span> + <span class="number">1</span> </span><br><span class="line">  	&#125;</span><br><span class="line">  <span class="title function_">setClicks</span>(newClicks)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;clicks.left&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleLeftClick&#125;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleRightClick&#125;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;clicks.right&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="useEffect"><a class="header-anchor" href="#useEffect"></a>useEffect()</h2>
<p>The Effect Hook, <code>useEffect</code>, adds the ability to perform side effects from a function component. It serves the same purpose as <code>componentDidMount</code>, <code>componentDidUpdate</code>, and <code>componentWillUnmount</code> in React classes, but unified into a single API. (We’ll show examples comparing <code>useEffect</code> to these methods in <a href="https://reactjs.org/docs/hooks-effect.html">Using the Effect Hook</a>.)</p>
<p>For example, this component sets the document title after React updates the DOM:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Similar to componentDidMount and componentDidUpdate:</span></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Update the document title using the browser API</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>When you call <code>useEffect</code>, you’re telling React to run your “effect” function after flushing changes to the DOM. Effects are declared inside the component so they have access to its props and state. By default, React runs the effects after every render — <em>including</em> the first render. (We’ll talk more about how this compares to class lifecycles in <a href="https://reactjs.org/docs/hooks-effect.html">Using the Effect Hook</a>.)</p>
<h1 id="Handling-Events"><a class="header-anchor" href="#Handling-Events"></a>Handling Events</h1>
<h2 id="Add-Event-Handler"><a class="header-anchor" href="#Add-Event-Handler"></a>Add Event Handler</h2>
<p>Handling events with React elements is very similar to handling events on DOM elements. There are some syntax differences:</p>
<ul>
<li>React events are named using <strong>camelCase</strong>, rather than lowercase.</li>
<li>With JSX you <strong>pass a function</strong> as the event handler, rather than a string.</li>
</ul>
<p>For example, the HTML:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;activateLasers()&quot;</span>&gt;</span></span><br><span class="line">  Activate Lasers</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>is slightly different in React:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;activateLasers&#125;&gt;  </span><br><span class="line">  <span class="title class_">Activate</span> <span class="title class_">Lasers</span></span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<p>Another difference is that</p>
<h2 id="Event-Hander"><a class="header-anchor" href="#Event-Hander"></a>Event Hander</h2>
<p>When using React, you generally don’t need to call <code>addEventListener</code> to add listeners to a DOM element after it is created. Instead, just provide a listener when the element is initially rendered.</p>
<p><strong>Event handler is either a <em>function</em> or a <em>function reference, not a function call</em></strong></p>
<ul>
<li>
<p>将函数作为event handler:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> <span class="title function_">setCounter</span>(counter + <span class="number">1</span>)&#125;&gt; </span><br><span class="line">  plus</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将函数引用作为event handler :</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;increaseByOne&#125;&gt; </span><br><span class="line">  plus</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>错误示范</strong>, 将函数调用作为event handler:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="title function_">setCounter</span>(counter + <span class="number">1</span>)&#125;&gt;</span><br></pre></td></tr></table></figure>
<p>这样做的问题在于, 当React渲染该组件时, 它会直接调用<code>setCounter(counter + 1)</code>, 如果后者是一个改变该组件内部状态的函数, 就会导致该组件重新渲染, 然后继续调用该函数, 继续重渲染....</p>
</li>
</ul>
<h2 id="Prevent-Default-Behavior"><a class="header-anchor" href="#Prevent-Default-Behavior"></a>Prevent Default Behavior</h2>
<p>Unlike HTML, you cannot return <code>false</code> to prevent default behavior in React. You must call <code>preventDefault</code> explicitly. For example, with plain HTML, to prevent the default form behavior of submitting, you can write:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">&quot;console.log(&#x27;You clicked submit.&#x27;); return false&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>In React, this could instead be:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Form</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleSubmit</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;You clicked submit.&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here, <code>e</code> is a synthetic event. React defines these synthetic events according to the <a href="https://www.w3.org/TR/DOM-Level-3-Events/">W3C spec</a>, so you don’t need to worry about cross-browser compatibility. React events do not work exactly the same as native events. See the <a href="https://reactjs.org/docs/events.html"><code>SyntheticEvent</code></a> reference guide to learn more.</p>
<h2 id="Event-Handler-as-A-Method"><a class="header-anchor" href="#Event-Handler-as-A-Method"></a>Event Handler as  A Method</h2>
<p>可以将Event Handler作为Component的成员</p>
<h3 id="bind-this"><a class="header-anchor" href="#bind-this"></a>bind(this)</h3>
<p><code>bind(this)</code>:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Toggle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">isToggleOn</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This binding is necessary to make `this` work in the callback    </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);  </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">isToggleOn</span>: !prevState.<span class="property">isToggleOn</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.state.isToggleOn ? &#x27;ON&#x27; : &#x27;OFF&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You have to be careful about the meaning of <code>this</code> in JSX callbacks. <strong>In JavaScript, class methods are not <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind">bound</a> by default</strong>. If you forget to bind <code>this.handleClick</code> and pass it to <code>onClick</code>, <code>this</code> will be <code>undefined</code> when the function is actually called.</p>
<p>This is not React-specific behavior; it is a part of <a href="https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/">how functions work in JavaScript</a>. Generally, if you refer to a method without <code>()</code> after it, such as <code>onClick=&#123;this.handleClick&#125;</code>, you should bind that method.</p>
<h3 id="class-fields-syntax"><a class="header-anchor" href="#class-fields-syntax"></a>class fields syntax</h3>
<p>If calling <code>bind</code> annoys you, there are two ways you can get around this. You can use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields#public_instance_fields">public class fields syntax</a> to correctly bind callbacks:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoggingButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// This syntax ensures `this` is bound within handleClick.</span></span><br><span class="line">  handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is:&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This syntax is enabled by default in <a href="https://github.com/facebookincubator/create-react-app">Create React App</a>.</p>
<h3 id="arrow-function"><a class="header-anchor" href="#arrow-function"></a>arrow function</h3>
<p>If you aren’t using class fields syntax, you can use an <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions">arrow function</a> in the callback:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoggingButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is:&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// This syntax ensures `this` is bound within handleClick</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.handleClick()&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The problem with this syntax is that a different callback is created each time the <code>LoggingButton</code> renders. In most cases, this is fine. However, if this callback is passed as a prop to lower components, those components might do an extra re-rendering. We generally recommend binding in the constructor or using the class fields syntax, to avoid this sort of performance problem.</p>
<h2 id="Passing-Arguments-to-Event-Handlers"><a class="header-anchor" href="#Passing-Arguments-to-Event-Handlers"></a>Passing Arguments to Event Handlers</h2>
<p>Inside a loop, it is common to want to pass an extra parameter to an event handler. For example, if <code>id</code> is the row ID, either of the following would work:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">deleteRow</span>(id, e)&#125;&gt;<span class="title class_">Delete</span> <span class="title class_">Row</span>&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.deleteRow.bind(this,</span> <span class="attr">id</span>)&#125;&gt;</span>Delete Row<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>The above two lines are equivalent, and use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">arrow functions</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind"><code>Function.prototype.bind</code></a> respectively.</p>
<p>In both cases, the <code>e</code> argument representing the React event will be passed as a second argument after the ID. With an arrow function, we have to pass it explicitly, but with <code>bind</code> any further arguments are automatically forwarded.</p>
<h1 id="Lists-and-Keys"><a class="header-anchor" href="#Lists-and-Keys"></a>Lists and Keys</h1>
<p>React的列表组件( e.g. <code>&lt;li&gt;&lt;/li&gt;</code> )需要指定列表元素对key. 如果不指定, 则会默认使用元素的array下标作为key, 并且报一个warning.  使用元素的数组下标作为key在排序时会遇到问题.</p>
<ul>
<li>
<p>可以使用<code>key=&#123;i&#125;</code>来规避掉warning, 但依然无法解决排序时的问题.</p>
</li>
<li>
<p>因此必须为列表组件手动指定正确的key:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;li key=&#123;user.<span class="property">id</span>&#125;&gt;&#123;user.<span class="property">name</span>&#125;: &#123;user.<span class="property">taskCount</span>&#125; tasks left&lt;/li&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>Keys Must Only Be Unique Among Siblings</li>
<li><code>key</code> is a special and reserved property in React (along with <code>ref</code>, a more advanced feature). When an element is created, React extracts the <code>key</code> property and stores the key directly on the returned element.</li>
<li>Even though <code>key</code> may look like it belongs in <code>props</code>, <strong><code>key</code> cannot be referenced using <code>this.props.key</code></strong></li>
</ul>
<hr>
<h2 id="Examples"><a class="header-anchor" href="#Examples"></a>Examples</h2>
<p>使用<code>map()</code>:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">NumberList</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.<span class="property">numbers</span>;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ListItem</span> <span class="attr">key</span>=<span class="string">&#123;number.toString()&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">value</span>=<span class="string">&#123;number&#125;</span> /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;listItems&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OR:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">NumberList</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.<span class="property">numbers</span>;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;numbers.map((number) =&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ListItem</span> <span class="attr">key</span>=<span class="string">&#123;number.toString()&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">value</span>=<span class="string">&#123;number&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Forms"><a class="header-anchor" href="#Forms"></a>Forms</h1>
<p>HTML form elements work a bit differently from other DOM elements in React, because form elements naturally keep some internal state. For example, this form in plain HTML accepts a single name:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;label&gt;</span><br><span class="line">    Name:</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt;</span><br><span class="line">  &lt;/label&gt;</span><br><span class="line">  &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<p>This form has the default HTML form behavior of browsing to a new page when the user submits the form. If you want this behavior in React, it just works. But in most cases, it’s convenient to have a JavaScript function that handles the submission of the form and has access to the data that the user entered into the form. The standard way to achieve this is with a technique called “controlled components”.</p>
<h2 id="Controlled-Components"><a class="header-anchor" href="#Controlled-Components"></a>Controlled Components</h2>
<p>In HTML, form elements such as <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code> typically maintain their own state and update it based on user input. In React, mutable state is typically kept in the state property of components, and only updated with <a href="https://reactjs.org/docs/react-component.html#setstate"><code>setState()</code></a>.</p>
<p>We can combine the two by making the React state be the “single source of truth”. Then the React component that renders a form also controls what happens in that form on subsequent user input. An input form element whose value is controlled by React in this way is called a “controlled component”.</p>
<p>For example, if we want to make the previous example log the name when it is submitted, we can write the form as a controlled component:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NameForm</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">value</span>: <span class="string">&#x27;&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleSubmit</span> = <span class="variable language_">this</span>.<span class="property">handleSubmit</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">value</span>: event.<span class="property">target</span>.<span class="property">value</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleSubmit</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;A name was submitted: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">value</span>);</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Name:</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Controlled-Input-Null-Value"><a class="header-anchor" href="#Controlled-Input-Null-Value"></a>Controlled Input Null Value</h2>
<p>Specifying the <code>value</code> prop on a <a href="https://reactjs.org/docs/forms.html#controlled-components">controlled component</a> prevents the user from changing the input unless you desire so. If you’ve specified a <code>value</code> but the input is still editable, you may have accidentally set <code>value</code> to <code>undefined</code> or <code>null</code>.</p>
<p>The following code demonstrates this. (The input is locked at first but becomes editable after a short delay.)</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(mountNode).<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;hi&quot;</span> /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(mountNode).<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;null&#125;</span> /&gt;</span></span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
<h2 id="The-textarea-Tag"><a class="header-anchor" href="#The-textarea-Tag"></a>The textarea Tag</h2>
<p>In HTML, a <code>&lt;textarea&gt;</code> element defines its text by its children:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span></span><br><span class="line">  Hello there, this is some text in a text area</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>In React, a <code>&lt;textarea&gt;</code> uses a <code>value</code> attribute instead. This way, a form using a <code>&lt;textarea&gt;</code> can be written very similarly to a form that uses a single-line input:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EssayForm</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="string">&#x27;Please write an essay about your favorite DOM element.&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleSubmit</span> = <span class="variable language_">this</span>.<span class="property">handleSubmit</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">value</span>: event.<span class="property">target</span>.<span class="property">value</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleSubmit</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;An essay was submitted: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">value</span>);</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Essay:</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Notice that <code>this.state.value</code> is initialized in the constructor, so that the text area starts off with some text in it.</p>
<h2 id="The-select-Tag"><a class="header-anchor" href="#The-select-Tag"></a>The select Tag</h2>
<p>In HTML, <code>&lt;select&gt;</code> creates a drop-down list. For example, this HTML creates a drop-down list of flavors:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;select&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;grapefruit&quot;</span>&gt;</span>Grapefruit<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;lime&quot;</span>&gt;</span>Lime<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">value</span>=<span class="string">&quot;coconut&quot;</span>&gt;</span>Coconut<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;mango&quot;</span>&gt;</span>Mango<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>
<p>Note that the Coconut option is initially selected, because of the <code>selected</code> attribute. React, instead of using this <code>selected</code> attribute, uses a <code>value</code> attribute on the root <code>select</code> tag. This is more convenient in a controlled component because you only need to update it in one place. For example:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FlavorForm</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">value</span>: <span class="string">&#x27;coconut&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleChange</span> = <span class="variable language_">this</span>.<span class="property">handleChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleSubmit</span> = <span class="variable language_">this</span>.<span class="property">handleSubmit</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">value</span>: event.<span class="property">target</span>.<span class="property">value</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleSubmit</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Your favorite flavor is: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">value</span>);</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Pick your favorite flavor:</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">select</span> <span class="attr">value</span>=<span class="string">&#123;this.state.value&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;grapefruit&quot;</span>&gt;</span>Grapefruit<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;lime&quot;</span>&gt;</span>Lime<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;coconut&quot;</span>&gt;</span>Coconut<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;mango&quot;</span>&gt;</span>Mango<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Overall, this makes it so that <code>&lt;input type=&quot;text&quot;&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code> all work very similarly - they all accept a <code>value</code> attribute that you can use to implement a controlled component.</p>
<blockquote>
<p>Note</p>
<p>You can pass an array into the <code>value</code> attribute, allowing you to select multiple options in a <code>select</code> tag:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select multiple=&#123;true&#125; value=&#123;[&#x27;B&#x27;, &#x27;C&#x27;]&#125;&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="The-file-input-Tag"><a class="header-anchor" href="#The-file-input-Tag"></a>The file input Tag</h2>
<p>In HTML, an <code>&lt;input type=&quot;file&quot;&gt;</code> lets the user choose one or more files from their device storage to be uploaded to a server or manipulated by JavaScript via the <a href="https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications">File API</a>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>Because its value is read-only, it is an <strong>uncontrolled</strong> component in React. It is discussed together with other uncontrolled components <a href="https://reactjs.org/docs/uncontrolled-components.html#the-file-input-tag">later in the documentation</a>.</p>
<p>When you need to handle multiple controlled <code>input</code> elements, you can add a <code>name</code> attribute to each element and let the handler function choose what to do based on the value of <code>event.target.name</code>.</p>
<h1 id="Refactoring"><a class="header-anchor" href="#Refactoring"></a>Refactoring</h1>
<h2 id="Components-2"><a class="header-anchor" href="#Components-2"></a>Components</h2>
<p>原代码:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;props.onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.text&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重构后:</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Button</span> = (<span class="params">&#123; onClick, text &#125;</span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Regular Expression</title>
    <url>/2022/09/11/Regular-Expression/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Intro</li>
<li>Def</li>
<li>Extension</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<ul>
<li>
<p>每个正则表达式$r$可以描述一个语言$L(r)$, 也即其定义的正则集合( Regular Set)</p>
<ul>
<li>例如, C语言标识符的语言, 可以用如下正则表达式来表示:<br>
$$<br>
\mathrm{letter} _ (\mathrm{letter}|\mathrm{digit})*<br>
$$</li>
</ul>
</li>
</ul>
<ul>
<li>正则表达式不仅是数学工具, 也被各种编程语言所支持. 绝大部分语言的正则语法都差不多</li>
</ul>
<h1 id="Def"><a class="header-anchor" href="#Def"></a>Def</h1>
<p>给定字母表 $\sum$,  $\sum$ 上的正则表达式由且仅由以下规则定义:</p>
<ol>
<li>$\epsilon$是正则表达式,它描述了语言$L(\epsilon) = { \epsilon }$</li>
<li>$\forall a \in \sum$ , $a$是正则表达式, 它描述了语言$L(a) = { a }$</li>
<li>选择: $(r) | (s)$ 是正则表达式, $L((r) | (s))=L(r) \cup L(s)$</li>
<li>连接: $(r)(s)$ 是正则表达式, $L((r)(s))=L(r)L(s)$</li>
<li>闭包: $(r)^<em>$ 是正则表达式 , $L((r)^</em>)=(L(r))^*$</li>
<li>括号: $(r)$ 是正则表达式, $L((r))=L(r)$</li>
</ol>
<p>运算的优先级: $*$ &gt; 连接符 &gt; $|$</p>
<ul>
<li>$(a)|((b)<em>(c))$可以改写为 $a|b</em>c$</li>
</ul>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<p>C语言的标识符集合:</p>
<ul>
<li>$\mathrm{letter}$: $A|B|\dots|Z|a|b|\dots|z|_ $</li>
<li>$\mathrm{digit}$: $0|1|\dots|9$</li>
<li>$\mathrm{id}$: $\mathrm{letter} _ (\mathrm{letter} _ |\mathrm{digit})^*$</li>
</ul>
<p>Pascal无符号数集合, 例如:1946, 11.28, 63.6E8, 1.99E−6</p>
<ul>
<li>$\mathrm{digit}$: $0|1|\dots|9$</li>
<li>$\mathrm{digits}$: $\mathrm{digit} \ \mathrm{digit}^*$</li>
<li>$\mathrm{optional _ fraction}$: $. \mathrm{digits} | \epsilon$</li>
<li>$\mathrm{optional _ exponent}$: $(\mathrm{E} ( + | − | \epsilon ) \ \mathrm{digits} ) \ | \ \epsilon$</li>
<li>$\mathrm{num}$: $\mathrm{optional _ fraction}\  \mathrm{optional _ exponent}$</li>
</ul>
<h1 id="Extension"><a class="header-anchor" href="#Extension"></a>Extension</h1>
<h2 id="扩展正则"><a class="header-anchor" href="#扩展正则"></a>扩展正则</h2>
<p>为了方便, 可以用现有的正则来匹配一些常见的语言:</p>
<ul>
<li><code>\d</code>: 匹配一个数字
<ul>
<li><code>'00\d'</code>可以匹配<code>'007'</code>，但无法匹配<code>'00A'</code>；</li>
<li><code>'\d\d\d'</code>可以匹配<code>'010'</code>；</li>
</ul>
</li>
<li><code>\w</code>: 匹配一个字母或数字.
<ul>
<li><code>'\w\w\d'</code>可以匹配<code>'py3'</code></li>
</ul>
</li>
<li><code>.</code>: 匹配任意字符.
<ul>
<li><code>'py.'</code>可以匹配<code>'pyc'</code>、<code>'pyo'</code>、<code>'py!'</code>...</li>
</ul>
</li>
<li><code>\s</code>可以匹配一个空格(也包括Tab等空白符), 所以<code>\s+</code>表示至少有一个空格, 例如匹配<code>' '</code>，<code>' '</code>等；</li>
<li><code>\ws</code> = <code>(blank | tab | newline)+</code></li>
</ul>
<h2 id="扩展运算符"><a class="header-anchor" href="#扩展运算符"></a>扩展运算符</h2>
<ul>
<li>一个或多个: $r^+$ , 等价于$rr^*$</li>
<li>零个或一个: $r?$ 等价于$\epsilon | r$</li>
<li>字符类:
<ul>
<li>字符<code>c</code>的字面值: <code>\c</code>
<ul>
<li>只写<code>c</code>会被认为是一个正则</li>
</ul>
</li>
<li>$[abc]$等价于$a|b|c$ , 即字符串$abc$中的任意一个字符</li>
<li>$[a - z]$等价于$a|b|\dots|z$
<ul>
<li><code>[0-9a-zA-Z\_]</code>: 匹配一个数字, 字母或者下划线</li>
<li><code>[0-9a-zA-Z\_]+</code>: 匹配至少由一个数字, 字母或者下划线组成的字符串，比如<code>'a100'</code>, <code>'0_Z'</code>, <code>'Py3000'</code>等等</li>
<li><code>[a-zA-Z\_][0-9a-zA-Z\_]*</code>: 匹配由字母或下划线开头. 后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量</li>
</ul>
</li>
<li><code>^s</code>: 不在串$s$中的任意一个字符</li>
</ul>
</li>
<li>$r{n}$: n个$r$
<ul>
<li><code>\d&#123;3&#125;</code>表示匹配3个数字, 例如<code>'010'</code></li>
</ul>
</li>
<li>$r{m,n}$: 最少m个, 最多n个$r$的连接
<ul>
<li><code>\d&#123;3,8&#125;</code>: 匹配3-8个数字</li>
</ul>
</li>
<li><code>^</code>: 行的开头
<ul>
<li><code>^\d</code>表示必须以数字开头.</li>
</ul>
</li>
<li><code>$</code>表示行的结束
<ul>
<li><code>\d$</code>表示必须以数字结束.</li>
<li>你可能注意到了, <code>py</code>也可以匹配<code>'python'</code>, 但是加上<code>^py$</code>就变成了整行匹配, 就只能匹配<code>'py'</code>了.</li>
</ul>
</li>
</ul>
<h2 id="Example-2"><a class="header-anchor" href="#Example-2"></a>Example</h2>
<p>前面的例子的简化表示:</p>
<ul>
<li>
<p>$\mathrm{letter}$: $[\mathrm{A}-\mathrm{Z} \mathrm{a}-\mathrm{z}] $</p>
</li>
<li>
<p>$\mathrm{digit}$: $[0-9]$</p>
</li>
<li>
<p>$\mathrm{id}$: $\mathrm{letter} _ (\mathrm{letter} _ |\mathrm{digit})^*$</p>
</li>
<li>
<p>$\mathrm{digit}$: $[0-9]$</p>
</li>
<li>
<p>$\mathrm{digits}$: $\mathrm{digit}?$</p>
</li>
<li>
<p>$\mathrm{num}$: $\mathrm{digits} \ (. \mathrm{digits})? \ (\mathrm{E}[+-]? \ \mathrm{digits})?$</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Compilers</tag>
      </tags>
  </entry>
  <entry>
    <title>Resolution on Screen</title>
    <url>/2022/08/14/Resolution-on-Screen/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Pixel</li>
<li>Resolution</li>
<li>Pixel in Other Domains</li>
</ul>
<span id="more"></span>
<h1 id="Pixel"><a class="header-anchor" href="#Pixel"></a>Pixel</h1>
<ul>
<li>
<p>Pixel( &quot;px&quot; for short  ): 像素，简称px. pixel是构成digtial picture的基本单位</p>
</li>
<li>
<p>Mega Pixel( &quot;MP&quot; for short ): 百万像素. 比如IPhone13的单相机像素就是<a href="https://www.technadu.com/iphone-13-camera/301276/#:~:text=Photography-Related%20iPhone%2013%20Camera%20Specs%20%20%20,Aperture%20size%3A%20F1.5%20%202%20more%20rows%20">12MP</a>.</p>
<ul>
<li>在计算机科学中, Mega一般表示$2^{20}$; 不过这里的Mega是$10^{6}$</li>
</ul>
</li>
<li>
<p>一般用 [width] x [height] px来衡量图片和屏幕的清晰度, 比如下面的50 x 50 px图片一小格代表一个pixel; 比如常见的1920 x 1080 px屏幕.</p>
<ul>
<li>也可用<strong>总像素数</strong>表示, 50 x 50px也就是2500 px.</li>
<li>“总像素数”的表示方式一般用在相机/屏幕上,图片描述都用[width] x [height] 形式</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/Resolution%20on%20Screen/A%20with%2050%20%2A%2050px.png" alt="A with 50 * 50px"></p>
</li>
</ul>
<h1 id="Resolution"><a class="header-anchor" href="#Resolution"></a>Resolution</h1>
<p>图像的Resolution( 解析度 or 清晰度 )是比较模糊的概念, 对于<strong>图像</strong>本身而言, 就是像素的密度, 单位为PPI; 而对于<strong>打印</strong>出的图像而言, 是打印时的墨点密度, 单位为DPI.</p>
<p>DPI和PPI很容易被混淆, 其实二者是不同的</p>
<p>对于设备而言,有时候直接把总像素数称为清晰度, 所以说到”清晰度“时,一定要注意指的是px, PPI还是DPI</p>
<h2 id="PPI"><a class="header-anchor" href="#PPI"></a>PPI</h2>
<ul>
<li>
<p>Pixels Per Inch( &quot;PPI&quot; for short ): 一英寸内的像素数量, PPI用来表示像素密度</p>
<ul>
<li>
<p>相同尺寸下, 不同像素数的图片, 清晰度差距是很大的:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/Resolution%20on%20Screen/PPI.png" alt="PPI"></p>
<p>上面两张图的图片尺寸一样, 左图PPI=16, 右图PPI=32</p>
</li>
</ul>
</li>
<li>
<p>只要屏幕大于300 PPI, 人眼就不能分辨. 问题在于不仅是屏幕大于300PPI, 屏幕内显示的图片也要跟上这个解析度</p>
</li>
</ul>
<h2 id="DPI"><a class="header-anchor" href="#DPI"></a>DPI</h2>
<ul>
<li>
<p>Dots Per Inch( &quot;DPI&quot; for short ): 每英寸的墨点数, DPI用来表示打印机的墨点密度.</p>
<ul>
<li>对于喷墨式打印机, DPI取决于其X, Y轴的马达步进速度. 所以打印机的DPI参数一般是[ X ], [Y] dpi.
<ul>
<li>你可以见到600dpi的打印机, 这意味着X和Y轴的DPI都是600</li>
</ul>
</li>
<li>对于非喷墨的打印机,当然就不存在“墨点”,但它们的成像密度也都用DPI表示</li>
</ul>
</li>
<li>
<p>不同媒体对DPI的“Dot”的定义不一样,</p>
<ul>
<li>
<p>Dot本来是成像设备的墨点, 和图片没有关系. 但是图片的参数也一般会有DPI, 图片的&quot;Dot&quot;就是Pixel, 因此DPI就是PPI. 而当图片被传到打印机, &quot;Dot&quot;又被解读为墨点.</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Potpourri/Resolution%20on%20Screen/DPI.png" alt="DPI"></p>
<p>可以看到,DPI在这里就是PPI( pixels/inch )</p>
</li>
<li>
<p>手机屏幕作为成像设备, 其“Dot”就是屏幕的物理像素点, 所以手机屏幕的PPI和DPI也是一回事</p>
</li>
</ul>
</li>
<li>
<p>在打印时,DPI一般首先取决于纸张和打印机,. 假设有400 * 400 dpi的打印机, 要求输出图像宽度为A4纸宽度(  = 8.268 inch = 21 cm ), 则图像在X方向的像素数为:<br>
$$<br>
X \ \mathrm{px} / (400 \ \mathrm{px/inch}) = 8.268 \ \mathrm{inch} \<br>
X = 3307 \ \mathrm{px}<br>
$$<br>
假设图片是正方形的, 也就是Y方向像素数也是3307 px, 这张图片的像素数就是3,307 * 3,307 ≈ 10.9 MP, 需要千万像素的相机才能拍出( 比如iPhone13的12MP摄像头). 以此类推, 一张正方形图片,以400DPI按宽度满版打印, 需要的总像素数如下:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Size</th>
<th style="text-align:left">Millimeters</th>
<th style="text-align:left">Inches</th>
<th>Pixels</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">A0 size</td>
<td style="text-align:left">841 x 1189 mm</td>
<td style="text-align:left">33.1 x 46.8 in</td>
<td>175MP</td>
</tr>
<tr>
<td style="text-align:left">A1 size</td>
<td style="text-align:left">594 x 841 mm</td>
<td style="text-align:left">23.4 x 33.1 in</td>
<td>87.6MP</td>
</tr>
<tr>
<td style="text-align:left">A2 size</td>
<td style="text-align:left">420 x 594 mm</td>
<td style="text-align:left">16.5 x 23.4 in</td>
<td>43.6MP</td>
</tr>
<tr>
<td style="text-align:left">A3 size</td>
<td style="text-align:left">297 x 420 mm</td>
<td style="text-align:left">11.7 x 16.5 in</td>
<td>21.9MP</td>
</tr>
<tr>
<td style="text-align:left">A4 size</td>
<td style="text-align:left">210 x 297 mm</td>
<td style="text-align:left">8.268 x 11.7 in</td>
<td>10.9MP</td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>现在最新的专业相机,其像素数也就是60MP, 入门级的一般就20MP, 在400DPI下连A3纸大小的图片都打印不了.</p>
<p>事实上,大部分图片的人眼观看距离都在30cm以上, 对于贴在墙上的海报, 那距离就更远了. 在这么远的距离下, 没有必要维持很高的DPI, 所以一般DPI都小于400</p>
<h2 id="DPI-PPI"><a class="header-anchor" href="#DPI-PPI"></a>DPI &amp;&amp; PPI</h2>
<h1 id="Pixel-in-Other-Domains"><a class="header-anchor" href="#Pixel-in-Other-Domains"></a>Pixel in Other Domains</h1>
<table>
<thead>
<tr>
<th>device</th>
<th>屏幕像素</th>
<th>屏幕对角线尺寸</th>
<th>PPI</th>
<th>CSS Pixel</th>
<th>DPR</th>
</tr>
</thead>
<tbody>
<tr>
<td>iPhone SE2</td>
<td>750 * 1134 px</td>
<td>4.7 inch</td>
<td>326</td>
<td>375 * 667 px</td>
<td>@2x</td>
</tr>
<tr>
<td>iPhone 12 Pro Max</td>
<td>1284 * 2778 px</td>
<td>6.68 inch</td>
<td>458</td>
<td>428 * 926 px</td>
<td>@3x</td>
</tr>
<tr>
<td>iPhone 13 Pro Max</td>
<td>2778 * 1284 px</td>
<td>6.7 inch</td>
<td>458</td>
<td>926 * 428 px</td>
<td>@3x</td>
</tr>
</tbody>
</table>
<p>移动设备的屏幕分辨率普遍比桌面屏幕好, iPhone13的分辨率1170 x 2532已经大于桌面屏幕的1920 x 1080了. 而iPhone13的宽度只有8cm!</p>
<p>移动设备的屏幕较小, 但分辨率很高, CSS media query很容易把1170 x 2532 px认为是桌面屏幕. 为此, 对于移动设备, 我们使用的是<strong>CSS Pixel</strong>,</p>
<h2 id="CSS-pixel-in-Web"><a class="header-anchor" href="#CSS-pixel-in-Web"></a>CSS pixel in Web</h2>
<h3 id="CSS-Pixel"><a class="header-anchor" href="#CSS-Pixel"></a>CSS Pixel</h3>
<ul>
<li>
<p>CSS Pixel: Web领域的Pixel, 可以认为是虚拟像素 or 标准像素. 它与真正的屏幕Pixel成比例关系( DPR )</p>
<ul>
<li>
<p>经过DPR的转化, iPhone13的CSS Pixel只有926 x 428 px, CSS media query会将其判定为移动设备</p>
</li>
<li>
<p>事实上DPR和CSS Pixel的转换都是隐式发生的. CSS media query和JS都只能查询到CSS Pixel. 因此我们开发时不需要考虑二者的转化, <strong>只需要面对CSS Pixel</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="DPR"><a class="header-anchor" href="#DPR"></a>DPR</h3>
<ul>
<li>Device Pixel Ratio( DPR ): 就是CSS Pixel和屏幕Pixel的比值. 别名有:
<ul>
<li>Dots Per PiXel( DPPX ) : 这里的“Dot”就是屏幕像素, 而&quot;Pixel&quot;是CSS Pixel</li>
<li>or pixel density</li>
</ul>
</li>
<li>不同设备的屏幕大小不同, 因此DPR也不同,
<ul>
<li>比如iPhone SE2的DPR是2, 那么每2个屏幕Pixel对应一个CSS Pixel; iPhone13的DPR是3,每三个屏幕Pixel对应一个CSS Pixel;</li>
<li>因此, 对于100 x 100 px( 这里是CSS Pixel ) 的图片, 在iPhone SE2被放大为200 x  200 屏幕px, 在iPhone13被放大为300 x 300 屏幕px, 清晰度会受影响. 因此有必要<strong>为不同DPR的设备提供不同清晰度的图像</strong></li>
</ul>
</li>
</ul>
<h2 id="pt-dp-in-APP"><a class="header-anchor" href="#pt-dp-in-APP"></a>pt &amp;&amp; dp in APP</h2>
<p>对于APP( 或者说客户端 ), 不同平台使用的Pixel分别是:</p>
<ul>
<li>ios: point( “iOS pt” for short)</li>
<li>Android: device-independent pixel( “dp” for short )</li>
</ul>
<p>二者其实都是 屏幕Pixel / DPR</p>
<h2 id="DPR-and-PPI-DPI"><a class="header-anchor" href="#DPR-and-PPI-DPI"></a>DPR and PPI/DPI</h2>
<p>我们知道手机的PPI( or DPI, 二者对于手机是一个东西 )是屏幕的像素密度, 而DPR是屏幕像素与 虚拟/标准像素( CSS Pixel or iOS pt or dp ) 的比.</p>
<p>对于<strong>手机</strong>, Web( 使用CSS Pixel )的<strong>标准</strong>PPI是160; APP的标准依平台而定. Android( 使用dp )的标准PPI是160, iOS( 使用iOS pt )的标准PPI是163( 这是iPhone13的PPI ). 那么:</p>
<ul>
<li>1 CSS pixel ≈ 1/160 inch</li>
<li>1 dp ≈ 1/160 inch</li>
<li>1 iOS pt ≈ 1/163 inch</li>
</ul>
<p>以CSS pixel为例, 其标准PPI是160, 那么对于PPI = 320的屏幕, 其DPR就是 320 / 160 = 2. 即每两个屏幕像素被转化成一个虚拟/标准像素</p>
<p>以此类推,对于iOS, 以iPhone13为例, 其PPI = 458, 则其DPR就是 458 / 163 = 3</p>
]]></content>
      <categories>
        <category>Potpourri</category>
      </categories>
  </entry>
  <entry>
    <title>Project Management Basic</title>
    <url>/2021/06/28/Project%20Management%20Basic/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>项目和项目管理</li>
<li>团队组织与管理</li>
<li>软件指令保障</li>
<li>软件配置管理</li>
</ul>
<span id="more"></span>
<h1 id="项⽬和项⽬管理"><a class="header-anchor" href="#项⽬和项⽬管理"></a>项⽬和项⽬管理</h1>
<h2 id="项目"><a class="header-anchor" href="#项目"></a>项目</h2>
<ul>
<li>项⽬是具有下列特征的⼀系列活动和任务<code>[Kerzner2009]</code>：
<ul>
<li>具有⼀个明确的⽬标；</li>
<li>有限定的开始和结束⽇期；</li>
<li>有成本限制；</li>
<li>消耗⼈⼒和非⼈⼒资源；</li>
<li>多⼯种合作。</li>
</ul>
</li>
</ul>
<!--more-->
<h2 id="项⽬管理的⽬标"><a class="header-anchor" href="#项⽬管理的⽬标"></a>项⽬管理的⽬标</h2>
<ul>
<li>项目管理的目标是做到以下⽅⾯：
<ul>
<li>在限定时间内；</li>
<li>在⼀定的成本内；</li>
<li>在要求的质量⽔平上；</li>
<li>⾼效使⽤资源；</li>
<li>获得客户认可。</li>
</ul>
</li>
</ul>
<h2 id="过程组与活动"><a class="header-anchor" href="#过程组与活动"></a>过程组与活动</h2>
<ul>
<li>
<p>过程组：</p>
<ul>
<li>项⽬启动、项⽬计划、项⽬执⾏、项⽬跟踪与控制和项⽬收尾</li>
</ul>
</li>
<li>
<p>活动</p>
<ul>
<li>计划制定、团队管理、成本控制、质量保障、度量、过程管理、进度跟踪 与控制、⻛险管理、配置管理</li>
</ul>
</li>
</ul>
<h1 id="团队组织与管理"><a class="header-anchor" href="#团队组织与管理"></a>团队组织与管理</h1>
<h2 id="团队"><a class="header-anchor" href="#团队"></a>团队</h2>
<ul>
<li>⼀个协作良好的团队是任何项⽬成功的基础。</li>
<li>软件项⽬尤其依赖于有效的团队组织和管理：软件开发是⼀个以⼈为主的活 动，<strong>⼈⼒资源</strong>是软件项⽬最⼤的资产。</li>
<li>有很多实践者认为⽐⽣产⾼质量产品更⼤的成功是在⽣产过程中建⽴⼀个凝 聚的团队</li>
</ul>
<h2 id="团队的特征"><a class="header-anchor" href="#团队的特征"></a>团队的特征</h2>
<ul>
<li><code>[Katzenbach1993]</code>将团队定义为：为了⼀致的⽬的、绩效标准、⽅法⽽共担 责任并且技能互补的少数⼈。</li>
<li>团队成员要具备共同的⽬标。</li>
<li>团队成员要共担责任。</li>
<li>团队成员要技能互补。</li>
<li>团队内部要有⼀个明确的结构。</li>
</ul>
<h2 id="团队结构"><a class="header-anchor" href="#团队结构"></a>团队结构</h2>
<h3 id="主程序员团队"><a class="header-anchor" href="#主程序员团队"></a>主程序员团队</h3>
<h3 id="民主团队"><a class="header-anchor" href="#民主团队"></a>民主团队</h3>
<ul>
<li>缺点
<ul>
<li>交流是成本</li>
<li>工作效率低</li>
</ul>
</li>
</ul>
<h3 id="开放团队"><a class="header-anchor" href="#开放团队"></a>开放团队</h3>
<ul>
<li>优点: 激励成员主动性, 发挥其创新能力</li>
<li>缺点: 项目进展没有可视度</li>
</ul>
<h2 id="团队建设"><a class="header-anchor" href="#团队建设"></a>团队建设</h2>
<ul>
<li>建立团队章程</li>
<li>持续成功</li>
<li>和谐沟通</li>
<li>避免团队杀⼿</li>
</ul>
<h2 id="避免团队杀⼿"><a class="header-anchor" href="#避免团队杀⼿"></a>避免团队杀⼿</h2>
<ul>
<li><code>[DeMarco1999]</code>认为组织和管理团队时要回避下列团队杀⼿：
<ul>
<li>防范式管理。</li>
<li>官僚主义。</li>
<li>地理分散。</li>
<li>时间分割。</li>
<li>产品质量的降低。</li>
<li>虚假的最后期限。</li>
<li>⼩圈⼦控制。</li>
</ul>
</li>
</ul>
<h1 id="软件质量保障"><a class="header-anchor" href="#软件质量保障"></a>软件质量保障</h1>
<h2 id="软件质量"><a class="header-anchor" href="#软件质量"></a>软件质量</h2>
<ul>
<li>软件⼯程师也要对软件产品的质量负责。</li>
<li>对软件质量的要求可能是显式的，也可能是隐式的。</li>
<li><code>质量</code>: 软件系统为满足显示及隐式的要求而需要具备的要素称为<code>质量</code></li>
<li>⼈们通常会选⽤系统的某些质量要素进⾏量化处理，建⽴质量特征，这些特征被称为<code>质量属性（Quality Attribute）</code>。</li>
<li>为了根据质量属性描述和评价系统的整体质量，⼈们从很多质量属性的定义当中选择了⼀些能够相互配合、相互联系的特征集，它们被称为<code>质量模型</code>。</li>
</ul>
<h3 id="质量模型"><a class="header-anchor" href="#质量模型"></a>质量模型</h3>
<ul>
<li><code>[IEEE1061-1992,1998]</code> 和 <code>[ISO/IEC 9126-1]</code>
<ul>
<li>因素</li>
<li>功能性</li>
<li>可靠性</li>
<li>易⽤性</li>
<li>效率</li>
<li>可维护性</li>
<li>可移植性</li>
</ul>
</li>
</ul>
<h2 id="质量保障"><a class="header-anchor" href="#质量保障"></a>质量保障</h2>
<table>
<thead>
<tr>
<th><strong>⾥程碑</strong></th>
<th><strong>质量保障活动</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>需求开发</td>
<td>需求评审、需求度量</td>
</tr>
<tr>
<td>体系结构</td>
<td>体系结构评审、集成测试（持续集成）</td>
</tr>
<tr>
<td>详细设计</td>
<td>详细设计评审、设计度量、集成测试（持续集成）</td>
</tr>
<tr>
<td>实现</td>
<td>代码评审、代码度量、测试（测试驱动、持续集成）</td>
</tr>
<tr>
<td>测试</td>
<td>测试、测试度量</td>
</tr>
</tbody>
</table>
<h2 id="评审"><a class="header-anchor" href="#评审"></a>评审</h2>
<ol>
<li>在<strong>规划</strong>阶段（Planning），制定审查计划，决定审查会议的次数，安排每次审查会议的时间、地点、 参与⼈员、审查内容等等。</li>
<li>在<strong>总体部署</strong>阶段（Overview），向所有参与审查会议的⼈员描述待审查材料的内容、审查的⽬标以及 ⼀些假设，并分发⽂档。</li>
<li>在<strong>准备</strong>阶段（Preparation），审查⼈员各⾃独⽴执⾏检查任务。在检查的过程当中，他们可能会被要 求使⽤检查清单、场景等检查⽅法。检查中发现的问题会被记录下来，以准备开会讨论或者提交给收集 ⼈员。</li>
<li>在<strong>审查会议</strong>阶段（Inspection Meeting），通过会议讨论，识别、确认、分类发现的错误。</li>
<li>在返⼯阶段（Rework），修改发现的缺陷。</li>
<li>在跟踪阶段（Follow-up），要确认所有发现的问题都得到了解决，所有的错误都得到了修正。</li>
</ol>
<h2 id="质量度量"><a class="header-anchor" href="#质量度量"></a>质量度量</h2>
<ul>
<li>度量产⽣⾃统计控制（Statistical Control）思想。“你不能控制⾃⼰⽆法度量的东 ⻄”<code>[DeMarco1998]</code>。</li>
<li>测度（Measure）就是为了描述软件产品⽽提供的定量指标。
<ul>
<li>代码⾏数</li>
</ul>
</li>
<li>进⾏测度的活动被称为测量（Measurement）。</li>
<li>度量（Metric）是软件产品在特定属性上的量化测度程度。
<ul>
<li>例如</li>
</ul>
</li>
</ul>
<h1 id="软件配置管理"><a class="header-anchor" href="#软件配置管理"></a>软件配置管理</h1>
<h2 id="软件配置管理的动机"><a class="header-anchor" href="#软件配置管理的动机"></a>软件配置管理的动机</h2>
<ul>
<li>
<p>在软件开发活动中，除了最终产品之外，还会产⽣很多<strong>中间制品</strong>，例如需求 规格说明、需求分析模型、软件体系结构设计模型、详细设计模型等。这些 制品是不同阶段、不同⻆⾊、不同软件开发活动进⾏<strong>协同</strong>的基础。</p>
</li>
<li>
<p>在复杂软件系统开发中，产⽣的制品数量众多，以⾄于开发者需要维护⼀个清单才能清楚项⽬所处的状态，理解已经完成的⼯作和将要进⾏的⼯作。</p>
</li>
<li>
<p>某个制品发⽣变化带来的最⼤挑战是如何确保其使⽤者能够得到最新的制 品，避免开发协同出现问题。</p>
</li>
<li>
<p>IEEE将配置管理定义为<code>[IEEE610.12-1990]</code>：“⽤技术的和管理的指导和监督⽅法，来<u>标识和说明</u>配置项的功能和物理特征，<u>控制</u>对这些特征的<u>变更</u>，记录和报告变更处理及其实现状态，并<u>验证</u>与规格需求的⼀致性”。</p>
</li>
</ul>
<h2 id="配置项"><a class="header-anchor" href="#配置项"></a>配置项</h2>
<ul>
<li>IEEE将配置项定义为<code>[IEEE610.12-1990]</code>：“置于软件配置管理之下的软件配置的各种有关项⽬，包括<u>各类管理⽂档、评审记录与⽂档、软件⽂档、源码及其可执⾏码、运⾏所需的系统软件和⽀持软件以及有关数据等</u>”。</li>
</ul>
<h2 id="基线"><a class="header-anchor" href="#基线"></a>基线</h2>
<ul>
<li><code>[IEEE610.12-1990]</code>将基线定义为：已经经过正式评审的规格说明或产品，可以作为进⼀步开发的基础， 并且只有通过正式的变更控制过程才能变更</li>
</ul>
<h2 id="配置管理活动"><a class="header-anchor" href="#配置管理活动"></a>配置管理活动</h2>
<ul>
<li>标识配置项</li>
<li>版本管理</li>
<li>变更控制</li>
<li>配置审计</li>
<li>状态报告</li>
<li>软件发布管理</li>
</ul>
<h2 id="变更控制"><a class="header-anchor" href="#变更控制"></a>变更控制</h2>
<ul>
<li>变更控制并不是要限制甚至拒绝变化, 它是以一种可控制的严格的方法进行变更</li>
<li>过程:
<ol>
<li>(提请者)提请变更</li>
<li>(接收者)接受变更请求</li>
<li>(评估者)变更评估, 其内容要以正式文档的形式固定下来, 比如<code>变更表单</code>, 并提交给<code>变更控制委员会</code></li>
<li>(<code>变更控制委员会</code>)变更决策</li>
<li>(修改者)执行变更</li>
<li>(验证者)验证变更</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
      <tags>
        <tag>Software Engineering Methodology</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell Basic</title>
    <url>/2022/09/26/Shell-Basic/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Shell Basic</li>
<li>Shell and Syscall</li>
<li>User Environment</li>
<li>Linux Shell</li>
<li>Windows Shell</li>
</ul>
<span id="more"></span>
<h1 id="Shell-Basic"><a class="header-anchor" href="#Shell-Basic"></a>Shell Basic</h1>
<p>Shell语言的文档详见拙著<em>Shell Script</em>， 本文只介绍Shell程序的基本概念</p>
<p>抽象的说，Shell泛指所有提供<strong>用户和操作系统的接口</strong>的程序，位于用户态的最底层。 可分为文本界面的命令行程序( Command LIne, aka CLI )和图形界面程序( Graphic User Interface, aka GUI )。 一般来说，“Shell”指的都是CLI</p>
<ul>
<li>The user interface program, <strong>shell</strong> or <strong>GUI</strong>, is the <u>lowest level of user-mode software</u>, and allows the user to start other programs --- 拙著 <em>OS Introduction</em></li>
</ul>
<p>从实现上讲，Shell程序就是一个<strong>解释器</strong>，它接受的语言就被称为Shell语言( <em>Shell Script</em>)。 用户将Shell语言输入给Shell， 后者执行命令。</p>
<ul>
<li>注意，不同的Shell实现，也会形成一些自己的方言。不过一般不用考虑那么多，只要了解其中最标准的子集即可</li>
</ul>
<p>Linux中有多种shell，默认使用的是Bash</p>
<h2 id="shell-categories"><a class="header-anchor" href="#shell-categories"></a>shell categories</h2>
<table>
<thead>
<tr>
<th>shell名称</th>
<th>描述</th>
<th>位置</th>
</tr>
</thead>
<tbody>
<tr>
<td>ash</td>
<td>一个小的shell，但与bash完全兼容</td>
<td>/bin/ash</td>
</tr>
<tr>
<td>ash.static</td>
<td>一个不依靠软件库的ash版本</td>
<td>/bin/ash.static</td>
</tr>
<tr>
<td>bin</td>
<td>ash的一个符号链接</td>
<td>/bin/ash</td>
</tr>
<tr>
<td>bash</td>
<td>“Bourne Again Shell”。由GNU开发，保持了对 sh shell 的(大部分)兼容性，是各种 Linux 发行版默认配置的 shell</td>
<td>/bin/bash</td>
</tr>
<tr>
<td>sh</td>
<td>Bourne shell，是 UNIX 上的标准 shell</td>
<td>/bin/sh</td>
</tr>
<tr>
<td>ksh</td>
<td>Korn Shell</td>
<td>/bin/ksh</td>
</tr>
<tr>
<td>csh</td>
<td>C shell,  该shell的语法有点类似C语言</td>
<td>/bin/csh</td>
</tr>
<tr>
<td>tcsh</td>
<td>csh 的增强版，加入了命令补全功能，提供了更加强大的语法支持</td>
<td>/bin/tcsh</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>在现代的 Linux 上，sh 已经被 bash 代替。 sh在Linux中是bash的一个符号链接； 在mac中是一个独立的程序</p>
</li>
<li>
<p>当前 Linux 系统可用的 Shell 都记录在<code>/etc/shells</code>文件中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">❯ cat /etc/shells</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/shells: valid login shells</span></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/usr/bin/bash</span><br><span class="line">/bin/rbash</span><br><span class="line">/usr/bin/rbash</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Shell-Session"><a class="header-anchor" href="#Shell-Session"></a>Shell Session</h2>
<p>Shell session 是终端中当前的状态，在终端中只能有一个 session。当我们打开一个新的终端时，总会创建一个新的 shell session。</p>
<p>就进程间的关系来说，session 由一个或多个进程组组成。一般情况下，来自单个登录的所有进程都属于同一个 session。我们可以通过下图来理解进程、进程组和 session 之间的关系：</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Toolkit/Shel%20lSession%20Archetecture" alt="Shell Session Archetecture"></p>
<p>会话是由会话中的第一个进程创建的，<strong>一般情况下是打开终端时创建的 shell 进程</strong>。该进程也叫 session 的领头进程。Session 中领头进程的 PID 也就是 session 的 SID。我们可以通过下面的命令查看 SID：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -o pid,ppid,pgid,sid,tty,comm</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> PID    PPID    PGID     SID TT       COMMAND</span><br><span class="line">5745    5729    5745    5745 pts/4    zsh</span><br><span class="line">5785       1    5784    5745 pts/4    zsh</span><br><span class="line">5787       1    5784    5745 pts/4    zsh</span><br><span class="line">5789       1    5788    5745 pts/4    zsh</span><br><span class="line">5794    5789    5788    5745 pts/4    gitstatusd</span><br><span class="line">5844    5745    5844    5745 pts/4    ps</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Session 中的每个进程组被称为一个 <strong>job</strong>，有一个 job 会成为 session 的前台 job(foreground)，其它的 job 则是后台 job(background)。每个 session 连接一个控制终端(control terminal)，控制终端中的输入被发送给前台 job，从前台 job 产生的输出也被发送到控制终端上。同时由控制终端产生的信号，比如 ctrl + z 等都会传递给前台 job。</p>
<p>一般情况下 session 和终端是一对一的关系，当我们打开多个终端窗口时，实际上就创建了多个 session。</p>
<p>Session 的意义在于多个工作(job)在一个终端中运行，其中的一个为前台 job，它直接接收该终端的输入并把结果输出到该终端。其它的 job 则在后台运行。</p>
<h1 id="Shell-and-Syscall"><a class="header-anchor" href="#Shell-and-Syscall"></a>Shell and Syscall</h1>
<p>由于系统调用<code>fork()</code>和<code>exec()</code>的分离，程序可以在<code>fork()</code>之后，<code>exec()</code>之前运行代码，方便了shell的工作</p>
<h2 id="shell-workflow"><a class="header-anchor" href="#shell-workflow"></a>shell workflow</h2>
<ul>
<li><code>shell</code>的workflow：
<ol>
<li>显示一个<code>prompt</code>,等待用户输入</li>
<li>用户进行输入，输入内容是一个命令，由一个可执行程序和若干参数组成</li>
<li><code>shell</code>找到该可执行程序。调用<code>fork()</code>创建新进程</li>
<li><code>shell</code>可能执行某些代码</li>
<li>调用<code>exec()</code>执行这个可执行程序</li>
<li>调用<code>wait()</code>等待该命令完成</li>
<li>子进程执行结束后，shell从<code>wait()</code>返回，继续步骤1</li>
</ol>
</li>
</ul>
<h2 id="shell-重定向"><a class="header-anchor" href="#shell-重定向"></a>shell 重定向</h2>
<p>shell实现重定向：对于<code> wc 5_2.c &gt; [filename].txt</code>, wc的输出结果被重定向到<code>[filename].txt</code></p>
<p>步骤解释：</p>
<ol>
<li>
<p>shell在<code>fork()</code>之后，<code>exec()</code>之前，会：</p>
<ol>
<li>先用<code>open</code>打开文件<code>[filename].txt</code>, 给它分配一个文件描述符, 记为<code>STDOUT_FILENO</code>(一般是3，因为0，1，2都已被占用)</li>
<li>再关闭标准输出( fd = 1 )</li>
</ol>
</li>
<li>
<p>shell使用<code>dup</code>/<code>dup2</code>来分配一个<code>STDOUT_FILENO</code>的复制，由于<code>dup</code>默认是分配未使用的最小的fd），此时fd=1已经关闭，所以就又分配了fd=1，它是<code>STDOUT_FILENO</code>的复制</p>
</li>
<li>
<p>shell执行指令，子进程准备输出，由于UNIX系统会从零开始寻找可用的fd(文件描述符)，因此<code>STDOUT_FILENO</code>会成为第一个可用的fd，作为子进程输出的目标</p>
</li>
</ol>
<p>详见<em>OS Persistence</em></p>
<ul>
<li>UNIX pipe也用类似方式实现，但使用<code>pipe()</code>系统调用,将前一个进程的输入作为后一个进程的输出：<code>grep -o foo fole | wc -l</code></li>
</ul>
<h2 id="Session-的创建和销毁"><a class="header-anchor" href="#Session-的创建和销毁"></a>Session 的创建和销毁</h2>
<p>session的创建：</p>
<ul>
<li>通常，新的 session 由系统登录程序创建，session 中的领头进程是运行用户登录 shell 的进程。新创建的每个进程都会属于一个进程组，当创建一个进程时，它和父进程在同一个进程组、session 中。</li>
</ul>
<p>将进程放入不同 session 的惟一方法是使用 <code>setsid</code> 函数使其成为新 session 的领头进程。这还会将 session 领头进程放入一个新的进程组</p>
<p>session的销毁：</p>
<ul>
<li>当 session 中的所有进程都结束时 session 也就消亡了。实际使用中比如网络断开了，session 肯定是要消亡的。</li>
<li>让 session 的领头进程退出。一般情况下 session 的领头进程是 shell 进程，如果它处于前台，我们可以使用 exit 命令或者是 ctrl + d 让它退出。或者我们可以直接通过 kill 命令杀死 session 的领头进程。
<ul>
<li>原理是：当系统检测到挂断(hangup)条件时，内核中的驱动会将 SIGHUP 信号发送到整个 session。通常情况下，这会杀死 session 中的所有进程</li>
</ul>
</li>
</ul>
<p>session 与终端的关系：</p>
<ul>
<li>
<p>如果 session 关联的是<strong>伪终端</strong>，这个伪终端本身就是随着 session 的建立而创建的，session 结束，那么这个伪终端也会被销毁。</p>
<ul>
<li>
<p>打开终端，会话开始；关闭终端，会话结束，会话内部的进程也会随之终止，不管有没有运行完。</p>
<p>一个典型的例子就是，<a href="https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">SSH 登录</a>远程计算机，打开一个远程终端执行命令。这时，网络突然断线，再次登录的时候，是找不回上一次执行的命令的。因为上一次 SSH 会话已经终止了，里面的进程也随之消失了</p>
<p>为了解决这个问题，会话与窗口可以&quot;解绑&quot;：窗口关闭时，会话并不终止，而是继续运行，等到以后需要的时候，再让会话&quot;绑定&quot;其他窗口（见“ Terminal  Multiplexer”）</p>
</li>
</ul>
</li>
<li>
<p>如果 session 关联的是 <strong>tty</strong>1-6，tty 则不会被销毁。因为该终端设备是在系统初始化的时候创建的，并不是依赖该会话建立的，所以当 session 退出，tty 仍然存在。只是 init 系统在 session 结束后，会重启 getty 来监听这个 tty</p>
</li>
</ul>
<h1 id="User-Environment"><a class="header-anchor" href="#User-Environment"></a>User Environment</h1>
<p>.bash_profile, .bash_logout, .bashrc files</p>
<ul>
<li>.bash_profile: 用户<strong>登录时</strong>被读取，其中包含的命令被bash执行</li>
<li>.bashrc: <strong>启动一个新的shell时</strong>读取并执行</li>
<li>.bash_logout: 登录退出时读取执行</li>
</ul>
<h1 id="Linux-shell"><a class="header-anchor" href="#Linux-shell"></a>Linux shell</h1>
<p>When you launch your terminal, you will see a <em>prompt</em> that often looks a little like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">missing:~$ </span><br></pre></td></tr></table></figure>
<ul>
<li>主机名: <code>missing</code></li>
<li>当前工作目录: <code>~</code> (short for “home”).</li>
<li>The <code>$</code> tells you that you are not the root user \</li>
</ul>
<p>The most basic command is to execute a program with arguments:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo hello</span><br></pre></td></tr></table></figure>
<ul>
<li>shell对命令的解析:
<ul>
<li>按空格分隔</li>
<li>第一个单词是命令名字,以后的每个单词都是命令的参数</li>
<li>If you want to provide an argument that contains spaces or other special characters (e.g., a directory named “My Photos”), you can either quote the argument with <code>'</code> or <code>&quot;</code> (<code>&quot;My Photos&quot;</code>), or escape just the relevant characters with <code>\</code> (<code>My\ Photos</code>)</li>
</ul>
</li>
</ul>
<h2 id="PATH"><a class="header-anchor" href="#PATH"></a>PATH</h2>
<p>shell变量分为用户变量和环境变量。 <code>$PATH</code>是特殊的环境变量， 当shell执行一条和其所有关键字都不匹配的命令时,它会查询 <code>$PATH</code> , 它列出了所有shell在查询命令时应查找的目录( 以 <code>:</code>分割 )</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">missing:~$ echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">missing:~$ which echo</span><br><span class="line">/bin/echo</span><br><span class="line">missing:~$ /bin/echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br></pre></td></tr></table></figure>
<ul>
<li>We can also bypass <code>$PATH</code> entirely by giving the <em>path</em> to the file we want to execute.</li>
</ul>
<h2 id="Navigating-in-the-shell"><a class="header-anchor" href="#Navigating-in-the-shell"></a>Navigating in the shell</h2>
<ul>
<li>
<p>根目录:  <code>/</code> is the “root” of the file system</p>
</li>
<li>
<p>A path that starts with <code>/</code> is called an <em>absolute</em> path. Any other path is a <em>relative</em> path.</p>
</li>
<li>
<p>Relative paths are relative to the current working directory, which we can see with the <code>pwd</code> command</p>
</li>
<li>
<p>In a path, <code>.</code> refers to the current directory, and <code>..</code> to its parent directory:</p>
</li>
<li>
<p>Most commands accept flags and options (flags with values) that start with <code>-</code> to modify their behavior</p>
</li>
<li>
<p>文件权限： File的权限与人们的直觉相符， 而对于Directory:</p>
<ul>
<li>To enter a directory, a user must have “search” (represented by “execute”: <code>x</code>)</li>
<li>To list its contents, a user must have read (<code>r</code>) permissions on that directory.</li>
</ul>
</li>
</ul>
<h2 id="Connecting-programs"><a class="header-anchor" href="#Connecting-programs"></a>Connecting programs</h2>
<ul>
<li><code>&lt;</code>, <code>&gt;</code>重定向（覆盖原文件内容）</li>
<li><code>&lt;&lt;</code>, <code>&gt;&gt;</code> append模式</li>
</ul>
<h2 id="root"><a class="header-anchor" href="#root"></a>root</h2>
<p><code>su</code>： 切换到root</p>
<p><code>sudo CMD</code>： 以root权限执行CMD, 注意只有第一条CMD具有root权限</p>
<p>One thing you need to be root in order to do is writing to the <code>sysfs</code> file system mounted under <code>/sys</code>. <code>sysfs</code> exposes a number of kernel parameters as files, so that you can easily reconfigure the kernel on the fly without specialized tools. <strong>Note that sysfs does not exist on Windows or macOS.</strong></p>
<p>For example, the brightness of your laptop’s screen is exposed through a file called <code>brightness</code> under</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sys/class/backlight</span><br></pre></td></tr></table></figure>
<p>By writing a value into that file, we can change the screen brightness. Your first instinct might be to do something like:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo find -L /sys/class/backlight -maxdepth 2 -name &#x27;*brightness*&#x27;</span><br><span class="line">/sys/class/backlight/thinkpad_screen/brightness</span><br><span class="line">$ cd /sys/class/backlight/thinkpad_screen</span><br><span class="line">$ sudo echo 3 &gt; brightness</span><br><span class="line">An error occurred while redirecting file &#x27;brightness&#x27;</span><br><span class="line">open: Permission denied</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><strong>注意</strong>：<code>|</code>, <code>&gt;</code>, and <code>&lt;</code> 这些操作符是由shell提供的，  <code>echo</code>这些程序只接受输入、进行输出， 不知道这些操作符的存在， 因此shell首先用root权限运行<code>echo 3</code>， 再用默认权限（即shell的创建者）的权限打开<code>brightness</code>文件尝试写入， 而这需要root权限， 因此fail</p>
<p>Using this knowledge, we can work around this:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo 3 | sudo tee brightness</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Command-Parameters"><a class="header-anchor" href="#Command-Parameters"></a>Command Parameters</h2>
<p>Linux Command的命令行参数可分为长参数（long option）和短参数（short option），长参数形式类似于<code>--print-something</code>， 以<code>--</code>开头，单词间以<code>-</code>分开；短参数形式类似于<code>-p</code>，以<code>-</code>开头，后面跟单词缩写</p>
<h3 id="短参数"><a class="header-anchor" href="#短参数"></a>短参数</h3>
<p>在短参数中，字母的大写效果是不同的，比如大写 <code>T</code> 和小写 <code>t</code>的含义通常不同</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">command -p</span><br></pre></td></tr></table></figure>
<p>短参数赋值：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">command -p 10</span><br></pre></td></tr></table></figure>
<p>多个短参数，可以用空格隔开:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">command -a -b -c -d</span><br></pre></td></tr></table></figure>
<p>多个短参数也可以合并在一起：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">command -abcd</span><br></pre></td></tr></table></figure>
<h3 id="长参数"><a class="header-anchor" href="#长参数"></a>长参数</h3>
<p>格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">command --parameter</span><br></pre></td></tr></table></figure>
<p>长参数赋值：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">command --parameter=10</span><br></pre></td></tr></table></figure>
<p>多个长参数，不能像多个短参数那样合并， 只能以空格隔开：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">command --parameter1 --parameter2</span><br></pre></td></tr></table></figure>
<p><strong>可以组合使用短参数和长参数</strong><br>
例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">command -abcd --parameter1 --parameter2</span><br></pre></td></tr></table></figure>
<h1 id="Windows-shell"><a class="header-anchor" href="#Windows-shell"></a>Windows shell</h1>
<p>windows中：命令和文件名(包括文件类型)不区分大小写. 即 cd 和 CD 一样， dir 和 DIR 一样。 Desktop 和 desktop 一样, *.pdf  和 *.PDF 一样</p>
<p>TAB键： 自动补完。 不区分大小写</p>
<p><code>cd</code> ： change directory 改变目录</p>
<p><code>cd .. </code> : go back to upper directory 回到上一级目录， 注意cd 和 .. 中间也可以没有空格</p>
<p><code>cd ../..</code> :  回到上两级目录</p>
<p><code>cd \</code> : 回到根目录</p>
<p><code>exit</code>: 退出</p>
<p><code>dir</code> ： list the contents of current directory 浏览当前目录（结果按字母顺序排序）.  文件有<DIR>代表它也是个目录</p>
<p><code>dir Desktop\SE</code> 查看SE的内容， 不会改变当前目录</p>
<p><code>dir Desktop\SE\*.pdf</code>   遍历并列出SE中以.pdf结尾的文件</p>
<p>注意文件名是区分空格的，所以<code>dir Desktop \SE</code> 或 <code>dir Desktop\ SE</code>  找不到东西</p>
<p><code>dir /a</code>: show hidden directories as well 注意dir 和 /a 中间也可以没有空格</p>
<p><code>cls</code>： clear your screen</p>
<p><code>↑</code>键 ：access your command history</p>
<p><code> /?</code> : to access help and options menu</p>
<p><code>mkdir</code>   制作目录</p>
<p><code>rmdir</code> 删除一个空的目录</p>
<p><code>rmdir *** /s</code> 删除一个有内容的目录</p>
<p><code>Home</code>键： bring u to  to the beginning of the command</p>
<p><code>End</code>键：反之</p>
<p><code>Ctrl+left</code> : 一次左移一个词</p>
<p>——————————————————————————————————</p>
<ul>
<li>
<p><code>echo not sweet &gt; apple.txt</code>  向 apple.txt中添加not sweet（这会覆盖txt的原内容）</p>
</li>
<li>
<p>如果不想覆盖，只想append， 那就用<code>echo not sweet &gt;&gt; apple.txt</code></p>
</li>
<li>
<p><code>Desktop\test&gt; dir &gt; apple.txt</code>    向apple.txt中添加test的目录</p>
</li>
<li>
<p>总之 <code>Desktop\test&gt; *** &gt; apple.txt</code> 星号部分是向apple.txt中添加的内容，可以是文字，可以是命令， 说到命令，当然·<code>ttrib</code>也可以，<code>cls</code>也可以。不过把cls append进去很蠢，啥都不会发生。</p>
</li>
</ul>
<p>—————————————————————————————————</p>
<p><code>type 文件名</code> ： 在CMD中打印该文件的内容</p>
<p><code>remove 被移动的 移动到的</code> ： 顾名思义，当然，连空文件和空目录也会移动</p>
<p><code>rename 原名 新名字</code> ： 注意文件类型也在名字里，所以一个 XX.txt如果更名为YY(不带.txt)，那么XX会从一个文本文档变成一个文件夹</p>
<p>—————————————————————————————————</p>
<p><code> copy</code> 要被复制的 复制到的 ： 文件复制</p>
<p><code>xcopy</code>: 也是复制，但比copy更好（功能更多） 。 xcopy默认只会复制source中的文件，而不包括目录（copy也是如此）。 通过/S 可以让xcopy复制目录和子目录，不包括空目录。， 但copy没有/S的功能，也就是说copy无法复制目录。</p>
<p>要打开应用程序，要么转到对应的目录，然后 <code>start ** .exe</code>, 要么直接用双引号括住绝对路径</p>
<p><code> C:\Users\color 0B</code>   数字是背景颜色，字母是foreground or text</p>
<p><code>wmic logicaldisk get name</code> : see all the available command drives</p>
<p><code> tree</code>关键字： 以树状列出目录及其内部目录…</p>
<p>D: 转到D盘根路径</p>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell Script</title>
    <url>/2022/03/18/Shell-Script/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Variable</li>
<li>String</li>
<li>Array</li>
<li>Quoting Mechanism</li>
<li>Control Flow</li>
<li>I/O redirection</li>
<li>Function</li>
<li>.....</li>
</ul>
<p>ref:  <a href="https://www.tutorialspoint.com/unix/unix-shell-functions.htm">shell tutorial</a></p>
 <span id="more"></span>
<h1 id="Shell-Script"><a class="header-anchor" href="#Shell-Script"></a>Shell Script</h1>
<p>不同的Shell实现会有不同的方言，不过这很少见。 这里只介绍最标准的Shell Script语法， 能够被最常用的Shell(如Bash)接受</p>
<p><a href="https://github.com/onceupon/Bash-Oneliner">常见Shell指令</a></p>
<h2 id="Variable"><a class="header-anchor" href="#Variable"></a>Variable</h2>
<ul>
<li>
<p>assign variables in bash:  <code>foo=bar</code></p>
<ul>
<li>Note that <code>foo = bar</code> will not work since it is interpreted as calling the <code>foo</code> program with arguments <code>=</code> and <code>bar</code>. In general, in shell scripts the space character will perform argument splitting</li>
</ul>
</li>
<li>
<p>access the value of the variable:  <code>$foo</code></p>
<ul>
<li>等价于 <code>$&#123;foo&#125;</code>， 花括号可以精确地界定变量名称的范围。</li>
</ul>
</li>
<li>
<p>可以用<code>read</code>命令从标准输入接受数据并赋值:<code>read val</code></p>
<p>example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /usr/bin/env bash</span></span><br><span class="line">echo -n &quot;Enter your name:&quot;</span><br><span class="line">read name</span><br><span class="line">echo &quot;hello $name&quot;</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="String"><a class="header-anchor" href="#String"></a>String</h2>
<ul>
<li>
<p>Strings in bash can be defined with <code>'</code> and <code>&quot;</code> delimiters, but they are not equivalent.</p>
</li>
<li>
<p>Strings delimited with <code>'</code> are <strong>literal string</strong>s and will not substitute variable values whereas <code>&quot;</code> delimited strings will.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">foo=bar</span><br><span class="line">echo &quot;$foo&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prints bar</span></span><br><span class="line">echo &#x27;$foo&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">prints <span class="variable">$foo</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Array"><a class="header-anchor" href="#Array"></a>Array</h2>
<ul>
<li>
<p>array initialization −</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">array_name=(value1 ... valuen)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>assign</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">array_name[index]=value</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>access Array Values</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;array_name[index]&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Quoting-Mechanism"><a class="header-anchor" href="#Quoting-Mechanism"></a>Quoting Mechanism</h2>
<h3 id="metacharacters"><a class="header-anchor" href="#metacharacters"></a>metacharacters</h3>
<p>Unix Shell provides various metacharacters which have special meaning while using them in any Shell Script and causes termination of a word unless quoted.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">* ? [ ] &#x27; &quot; \ $ ; &amp; ( ) | ^ &lt; &gt; new-line space tab</span><br></pre></td></tr></table></figure>
<h3 id="quoting"><a class="header-anchor" href="#quoting"></a>quoting</h3>
<p>The following table lists the four forms of quoting −</p>
<table>
<thead>
<tr>
<th style="text-align:center"><a href="http://Sr.No">Sr.No</a>.</th>
<th style="text-align:center">Quoting &amp; Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center"><strong>Single quote</strong><br/>All special characters between these quotes lose their special meaning.</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center"><strong>Double quote</strong><br/>Most special characters between these quotes lose their special meaning with these exceptions −$`$'&quot;\</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center"><strong>Backslash</strong><br/>Any character immediately following the backslash loses its special meaning.</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center"><strong>Back quote</strong> (aka <strong>backtick</strong>)<br>Everything you type between backticks is evaluated (executed) by the shell before the main command, and the <em>output</em> of that execution is used by that command,</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>The Single Quotes: 其内容不转义, 相当于在每个字符前加 backslash</p>
</li>
<li>
<p>The Double Quotes： 其内容转义</p>
</li>
<li>
<p>The Backslash: 取消其后面的一个字符的转义</p>
</li>
<li>
<p>The Backquotes：将其内容视作 command 并执行， 与后文的CMD substitution类似</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">var=`command`</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DATE=`date`</span><br><span class="line"></span><br><span class="line">echo $DATE</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">等价于后文的CMD substitution</span></span><br><span class="line">echo $(DATE)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="条件语句"><a class="header-anchor" href="#条件语句"></a>条件语句</h2>
<ul>
<li>As with most programming languages, bash supports control flow techniques including <code>if</code>, <code>case</code>, <code>while</code> and <code>for</code>.</li>
</ul>
<h3 id="if"><a class="header-anchor" href="#if"></a>if</h3>
<p>syntax:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ expression ] </span><br><span class="line">then </span><br><span class="line">   Statement(s) to be executed if expression is true </span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ expression 1 ]</span><br><span class="line">then</span><br><span class="line">   Statement(s) to be executed if expression 1 is true</span><br><span class="line">elif [ expression 2 ]</span><br><span class="line">then</span><br><span class="line">   Statement(s) to be executed if expression 2 is true</span><br><span class="line">elif [ expression 3 ]</span><br><span class="line">then</span><br><span class="line">   Statement(s) to be executed if expression 3 is true</span><br><span class="line">else</span><br><span class="line">   Statement(s) to be executed if no expression is true</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>紧凑形式： <code>; </code> (同一行上多个命令的分隔符)</p>
<p>example:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f ~/.bashrc ]; <span class="keyword">then</span> </span><br><span class="line">. ~/.bashrc <span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">read -p &quot;Is this morning? Please answer yes or no: &quot; answer</span><br><span class="line">if [ &quot;$answer&quot; = &quot;yes&quot; ]; then</span><br><span class="line"> echo “Good morning”</span><br><span class="line">elif [ &quot;$answer&quot; = &quot;no&quot; ]; then</span><br><span class="line"> echo “Good afternoon” </span><br><span class="line">else</span><br><span class="line"> echo “Sorry, $answer not recognized. Enter yes or no”</span><br><span class="line"> exit 1 </span><br><span class="line">fi</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>
<h3 id="case"><a class="header-anchor" href="#case"></a>case</h3>
<p>syntax:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">case word in</span><br><span class="line">   pattern1 | pattern2)</span><br><span class="line">      Statement(s) to be executed if pattern1 matches</span><br><span class="line">      ;;</span><br><span class="line">   pattern3)</span><br><span class="line">      Statement(s) to be executed if pattern2 matches</span><br><span class="line">      ;;</span><br><span class="line">   pattern4)</span><br><span class="line">      Statement(s) to be executed if pattern3 matches</span><br><span class="line">      ;;</span><br><span class="line">   *)</span><br><span class="line">     Default condition to be executed</span><br><span class="line">     ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>
<p>example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">option=&quot;$&#123;1&#125;&quot; </span><br><span class="line">case $&#123;option&#125; in </span><br><span class="line">   -f) FILE=&quot;$&#123;2&#125;&quot; </span><br><span class="line">      echo &quot;File name is $FILE&quot;</span><br><span class="line">      ;; </span><br><span class="line">   -d) DIR=&quot;$&#123;2&#125;&quot; </span><br><span class="line">      echo &quot;Dir name is $DIR&quot;</span><br><span class="line">      ;; </span><br><span class="line">   *)  </span><br><span class="line">      echo &quot;`basename $&#123;0&#125;`:usage: [-f file] | [-d directory]&quot; </span><br><span class="line">      exit 1 # Command to come out of the program with status 1</span><br><span class="line">      ;; </span><br><span class="line">esac </span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">read -p &quot;Is this morning? Please answer yes or no.&quot; answer</span><br><span class="line">case &quot;$answer&quot; in</span><br><span class="line">    yes | y | Yes | YES) </span><br><span class="line">        echo “Good morning!” </span><br><span class="line">        ;; </span><br><span class="line">    no | n | No | NO) </span><br><span class="line">        echo “Good afternoon!” </span><br><span class="line">        ;; </span><br><span class="line">    *)</span><br><span class="line">        echo “Sorry, $answer not recognized.” </span><br><span class="line">        ;;</span><br><span class="line">esac </span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>
<h3 id="select-in-case-in"><a class="header-anchor" href="#select-in-case-in"></a>select in &amp;&amp; case in</h3>
<p>select in语句自带循环</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select variable in value_list</span><br><span class="line">do</span><br><span class="line">  statements</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<ul>
<li>variable: 表示变量</li>
<li>value_list:  取值列表</li>
<li>in:  Shell关键字</li>
</ul>
<p><strong>select in 通常和 case in 一起使用，在用户输入不同的编号时可以做出不同的反应</strong></p>
<p>example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">clear</span><br><span class="line">select item in Continue Finish</span><br><span class="line">do</span><br><span class="line">    case &quot;$item&quot; in</span><br><span class="line">    Continue) </span><br><span class="line">        ;;</span><br><span class="line">    Finish) </span><br><span class="line">        break </span><br><span class="line">        ;;</span><br><span class="line">    *) </span><br><span class="line">        echo &quot;Wrong choice! Please select again!&quot; </span><br><span class="line">        ;;</span><br><span class="line">    esac </span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>该命令的while版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">while [ &quot;$item&quot; != &quot;Finish&quot; ]; </span><br><span class="line">do </span><br><span class="line">    read item</span><br><span class="line">    case &quot;$item&quot; in</span><br><span class="line">        &quot;Continue&quot;) </span><br><span class="line">            ;;</span><br><span class="line">        &quot;Finish&quot;)</span><br><span class="line">            ;;</span><br><span class="line">        *) echo &quot;Wrong choice! Please select again!&quot;</span><br><span class="line">            ;;</span><br><span class="line">    esac </span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h2 id="循环语句"><a class="header-anchor" href="#循环语句"></a>循环语句</h2>
<h3 id="for"><a class="header-anchor" href="#for"></a>for</h3>
<p>syntax：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for var in word1 word2 ... wordN</span><br><span class="line">do</span><br><span class="line">   Statement(s) to be executed for every word.</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for FILE in $HOME/.bash*</span><br><span class="line">do</span><br><span class="line">   echo $FILE</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for f in *.png             </span><br><span class="line">do</span><br><span class="line">	mv -n $f $f.kk</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h3 id="while"><a class="header-anchor" href="#while"></a>while</h3>
<p>syntax:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">while condition </span><br><span class="line">do</span><br><span class="line">	statements </span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">quit=n</span><br><span class="line">while [ &quot;$quit&quot; != &quot;y&quot; ]; do read menu_choice</span><br><span class="line">case &quot;$menu_choice&quot; in</span><br><span class="line">a) echo &quot;a, continue...&quot;;;</span><br><span class="line">b) echo &quot;b, continue...&quot;;;</span><br><span class="line">q|Q) quit=y;;</span><br><span class="line">*) echo &quot;Sorry, choice not recognized.&quot;;;</span><br><span class="line">esac done</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a=0</span><br><span class="line">LIMIT=10</span><br><span class="line">while [ $a -le $LIMIT ] </span><br><span class="line">do</span><br><span class="line">    a=$(($a+1))</span><br><span class="line">        if [ $a -gt 2 ] </span><br><span class="line">        then</span><br><span class="line">            break # Skip entire rest of loop. </span><br><span class="line">        fi</span><br><span class="line">    echo -n &quot;$a&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h2 id="命令组合"><a class="header-anchor" href="#命令组合"></a>命令组合</h2>
<p>分号串联：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command1 ; command2 ; ...</span><br></pre></td></tr></table></figure>
<p>条件组合:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">statement1 &amp;&amp; statement2 &amp;&amp; statement3 &amp;&amp; ...</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">statement1 || statement2 || statement3 ||</span><br></pre></td></tr></table></figure>
<h2 id="语句块"><a class="header-anchor" href="#语句块"></a>语句块</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	statement1 </span><br><span class="line">	statement2 </span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">	statement1; statement2 ; ... ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="I-O-redirection"><a class="header-anchor" href="#I-O-redirection"></a>I/O redirection</h2>
<p>一般情况下，每个 Linux 命令运行时都会打开三个文件：</p>
<ul>
<li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li>
<li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li>
<li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息</li>
</ul>
<ul>
<li>
<p>Discard the output</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">command</span> &gt; /dev/null</span></span><br></pre></td></tr></table></figure>
<p>The file <strong>/dev/null</strong> is a special file that automatically <strong>discards all its input</strong>.</p>
</li>
<li>
<p>Discard both output of a command and its error output,</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">command</span> &gt; /dev/null 2&gt;&amp;1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>a command normally writes its output to <strong>STDOUT</strong></li>
<li>use standard redirection to redirect <strong>STDERR</strong> to <strong>STDOUT</strong></li>
<li>这里<code>2&gt;&amp;1</code>将标准错误（2）合并到标准输出（1）， 而标准输出已经被重定向到了<code>/dev/null</code>, 因此总体效果是，标准错误和输出都被重定向到了<code>/dev/null</code></li>
</ul>
</li>
<li>
<p>file descriptor:</p>
<ul>
<li><strong>0</strong> : STDIN</li>
<li><strong>1</strong>: STDOUT</li>
<li><strong>2</strong>: STDERR</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center"><a href="http://Sr.No">Sr.No</a>.</th>
<th style="text-align:center">Command &amp; Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center"><strong>pgm &gt; file</strong><br>Output of pgm is redirected to file<br>会覆盖目标文件中原有的数据</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center"><strong>pgm &lt; file</strong><br>Program pgm reads its input from file</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center"><strong>pgm &gt;&gt; file</strong><br>Output of pgm is appended to file</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center"><strong>n &gt; file</strong><br>Output from stream with descriptor <strong>n</strong> redirected to file</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center"><strong>n &gt;&gt; file</strong><br/>Output from stream with descriptor <strong>n</strong> appended to file</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center"><strong>n &gt;&amp; m</strong><br/>Merges output from stream <strong>n</strong> with stream <strong>m</strong></td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center"><strong>n &lt;&amp; m</strong><br/>Merges input from stream <strong>n</strong> with stream <strong>m</strong></td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center"><strong>&lt;&lt; tag</strong><br/>Standard input comes from here through next tag at the start of line</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center"><strong>|</strong><br/>Takes output from one program, or process, and sends it to another</td>
</tr>
</tbody>
</table>
<h3 id="Here-Document"><a class="header-anchor" href="#Here-Document"></a>Here Document</h3>
<p>Here Document 目前没有统一的翻译，这里暂译为”嵌入文档“。Here Document 是 Shell 中的一种特殊的重定向方式，它的基本的形式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">command &lt;&lt; delimiter</span><br><span class="line">document</span><br><span class="line">delimiter</span><br></pre></td></tr></table></figure>
<p>它的作用是<strong>将两个 delimiter 之间的内容(document) 作为输入传递给 command</strong></p>
<p>注意：</p>
<ul>
<li>结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。</li>
<li>开始的delimiter前后的空格会被忽略掉。</li>
</ul>
<p>下面的例子，通过 wc -l 命令计算 document 的行数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wc -l &lt;&lt; EOF</span><br><span class="line">    This is a simple lookup program</span><br><span class="line">    for good (and bad) restaurants</span><br><span class="line">    in Cape Town.</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>也可将 Here Document 用在脚本中，例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt; EOF</span><br><span class="line">    This is a simple lookup program</span><br><span class="line">    for good (and bad) restaurants</span><br><span class="line">    in Cape Town.</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h2 id="test"><a class="header-anchor" href="#test"></a>test</h2>
<p>test expression 或 <code>[ expression ]</code></p>
<ul>
<li>
<p><code>[</code> (aka <code>test</code>) command the and <code>[[ ... ]]</code> test construct are used to evaluate expressions</p>
</li>
<li>
<p><code>[</code>是一条命令， 与<code>test</code>等价，大多数shell都支持。在现代的大多数sh实现中，<code>[</code>与<code>test</code>是builtin命令</p>
<ul>
<li><code>[]</code>将其operand直接当作argument</li>
</ul>
</li>
<li>
<p><code>[[</code>，是关键字，许多shell(如ash bsh)并不支持这种方式</p>
<ul>
<li><code>[[]]</code>将其operand进行参数引用，算术扩展和CMD substitution， 不需要手动转义等</li>
</ul>
</li>
</ul>
<p>test expression:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test 1 -lt 2</span><br><span class="line">echo $?</span><br><span class="line">0</span><br><span class="line">test 1 -gt 2</span><br><span class="line">echo $?</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p><code>[ expression ]</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;Starting program at $(date)&quot; # Date will be substituted</span><br><span class="line"></span><br><span class="line">echo &quot;Running program $0 with $# arguments with pid $$&quot;</span><br><span class="line"></span><br><span class="line">for file in &quot;$@&quot;; do</span><br><span class="line">    grep foobar &quot;$file&quot; &gt; /dev/null 2&gt; /dev/null</span><br><span class="line">    # When pattern is not found, grep has exit status 1</span><br><span class="line">    # We redirect STDOUT and STDERR to a null register since we do not care about them</span><br><span class="line">    if [[ $? -ne 0 ]]; then</span><br><span class="line">        echo &quot;File $file does not have any foobar, adding one&quot;</span><br><span class="line">        echo &quot;# foobar&quot; &gt;&gt; &quot;$file&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h3 id="与文件有关的条件测试"><a class="header-anchor" href="#与文件有关的条件测试"></a>与文件有关的条件测试</h3>
<p>文件测试运算符的形式及功能</p>
<table>
<thead>
<tr>
<th>option</th>
<th>parameter</th>
<th>function</th>
</tr>
</thead>
<tbody>
<tr>
<td>-r</td>
<td>文件名</td>
<td>如文件存在并且是用户可读的，则测试条件为真</td>
</tr>
<tr>
<td>-w</td>
<td>文件名</td>
<td>如文件存在并且是用户可写的，则测试条件为真</td>
</tr>
<tr>
<td>-x</td>
<td>文件名</td>
<td>如文件存在并且是用户可执行的，则测试条件为真</td>
</tr>
<tr>
<td>-f</td>
<td>文件名</td>
<td>如文件存在并且是普通文件，则测试条件为真</td>
</tr>
<tr>
<td>-d</td>
<td>文件名</td>
<td>如文件存在并且是目录文件，则测试条件为真</td>
</tr>
<tr>
<td>-p</td>
<td>文件名</td>
<td>如文件存在并且是命名的FIFO文件，则测试条件为真</td>
</tr>
<tr>
<td>-b</td>
<td>文件名</td>
<td>如文件存在并且是块特殊文件，则测试条件为真</td>
</tr>
<tr>
<td>-c</td>
<td>文件名</td>
<td>如文件存在并且是字符特殊文件，则测试条件为真</td>
</tr>
<tr>
<td>-s</td>
<td>文件名</td>
<td>如文件存在并且文件长度大于0，则测试条件为真</td>
</tr>
<tr>
<td>-t</td>
<td>文件描述符</td>
<td>如文件被打开且文件描述符是与终端设备相关的，则测试条件为真，默认文件描述符是1</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="字符串测试"><a class="header-anchor" href="#字符串测试"></a>字符串测试</h3>
<table>
<thead>
<tr>
<th>option</th>
<th>parameter</th>
<th>function</th>
</tr>
</thead>
<tbody>
<tr>
<td>-z</td>
<td>s1</td>
<td>如果字符串s1的长度为0，则测试条件为真</td>
</tr>
<tr>
<td>-n</td>
<td>s1</td>
<td>如果字符串s1的长度大于0，则测试条件为真</td>
</tr>
<tr>
<td></td>
<td>s1</td>
<td>如果字符串s1不是空字符串，则测试条件为真</td>
</tr>
<tr>
<td>=或==</td>
<td>s1=s2</td>
<td>如果s1等于s2，则测试条件为真,“=”前后应有空格</td>
</tr>
<tr>
<td>!=</td>
<td>s1!=s2</td>
<td>如果s1不等于s2，则测试条件为真</td>
</tr>
<tr>
<td>&lt;</td>
<td>s1&lt;s2</td>
<td>如果按字典顺序s1在s2之前，则测试条件为真</td>
</tr>
<tr>
<td>&gt;</td>
<td>s1&gt;s2</td>
<td>如果按自定顺序s1在s2之后，则测试条件为真</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="数值测试"><a class="header-anchor" href="#数值测试"></a>数值测试</h3>
<table>
<thead>
<tr>
<th>parameter</th>
<th>function</th>
</tr>
</thead>
<tbody>
<tr>
<td>n1 -eq n2</td>
<td>如果整数n1等于n2，则测试条件为真</td>
</tr>
<tr>
<td>n1 -ne n2</td>
<td>如果整数n1不等于n2，则测试条件为真</td>
</tr>
<tr>
<td>n1 -lt n2</td>
<td>如果如果n1小于n2,则测试条件为真</td>
</tr>
<tr>
<td>n1 -le n2</td>
<td>如果如果n1小于或等于n2,则测试条件为真</td>
</tr>
<tr>
<td>n1 -gt n2</td>
<td>如果n1大于n2,则测试条件为真</td>
</tr>
<tr>
<td>n1 -ge n2</td>
<td>如果n1大于或等于n2,则测试条件为真</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="逻辑操作"><a class="header-anchor" href="#逻辑操作"></a>逻辑操作</h3>
<table>
<thead>
<tr>
<th>parameter</th>
<th>function</th>
</tr>
</thead>
<tbody>
<tr>
<td>! expr</td>
<td>逻辑表达式求反</td>
</tr>
<tr>
<td>expr1 –a expr2</td>
<td>两个逻辑表达式“And“</td>
</tr>
<tr>
<td>expr1 –o expr2</td>
<td>两个逻辑表达式“Or“</td>
</tr>
</tbody>
</table>
<h2 id="Function"><a class="header-anchor" href="#Function"></a>Function</h2>
<p>syntax</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">function_name()&#123;</span><br><span class="line">	list of commands</span><br><span class="line">	[ return value ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mcd () &#123;</span><br><span class="line">    mkdir -p &quot;$1&quot;</span><br><span class="line">    cd &quot;$1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="return-code"><a class="header-anchor" href="#return-code"></a>return code</h3>
<ul>
<li><code>exit</code>: 不仅会退出函数，还会退出执行该函数的shell</li>
<li><code>return code</code>:仅仅退出函数。和command的return code同</li>
</ul>
<h3 id="Function-Call-from-Prompt"><a class="header-anchor" href="#Function-Call-from-Prompt"></a>Function Call from Prompt</h3>
<ul>
<li>
<p>令shell加载函数定义：</p>
<ul>
<li>
<p>可以将函数定义在主目录下的<code>.profile</code>，这样每次登陆后，在命令提示符后面输入函数名字就可以立即调用:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">func para1 para2</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将函数定义写在一个文件( say <code>test.sh</code> ), 然后执行它</p>
</li>
</ul>
</li>
<li>
<p>令shell删除函数定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unset -f function_name</span><br></pre></td></tr></table></figure>
<ul>
<li>该命令也可用来令shell删除变量定义</li>
<li>反之，<code>set</code>可以用来定义变量</li>
</ul>
</li>
</ul>
<h2 id="output"><a class="header-anchor" href="#output"></a>output</h2>
<ul>
<li>Commands will often return output using <code>STDOUT</code>, errors through <code>STDERR</code></li>
</ul>
<h2 id="return-code-2"><a class="header-anchor" href="#return-code-2"></a>return code</h2>
<ul>
<li>Commands have <strong>Return Code</strong> to report errors in a more script-friendly manner.
<ul>
<li><strong>0 usually means everything went OK</strong>; anything different from 0 means an error occurred.</li>
<li><code>return code</code>， 你可以指定返回任何值</li>
</ul>
</li>
</ul>
<h2 id="return-code-as-bool-value"><a class="header-anchor" href="#return-code-as-bool-value"></a>return code as bool value</h2>
<ul>
<li>
<p>Return codes can be used to conditionally execute commands using <code>&amp;&amp;</code> (and operator) and <code>||</code> (or operator) .</p>
</li>
<li>
<p>Commands can also be separated within the same line using a semicolon <code>;</code>.</p>
</li>
<li>
<p>The <code>true</code> program will always have a <strong>0</strong> return code and the <code>false</code> command will always have a 1 return code.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">false || echo &quot;Oops, fail&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Oops, fail</span></span><br><span class="line"></span><br><span class="line">true || echo &quot;Will not be printed&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br><span class="line">true &amp;&amp; echo &quot;Things went well&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Things went well</span></span><br><span class="line"></span><br><span class="line">false &amp;&amp; echo &quot;Will not be printed&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span></span><br><span class="line">true ; echo &quot;This will always run&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This will always run</span></span><br><span class="line"></span><br><span class="line">false ; echo &quot;This will always run&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This will always run</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="CMD-substitution"><a class="header-anchor" href="#CMD-substitution"></a>CMD substitution</h2>
<ul>
<li>
<p>命令替换: <code>$(CMD)</code>执行命令，并将其输出作为一个变量</p>
<ul>
<li>For example, if you do ``, the shell will first call <code>ls</code> and then iterate over those values.</li>
</ul>
</li>
</ul>
<p>example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for file in $(ls)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">echo &quot;The current directory is $PWD&quot;</span><br><span class="line">echo &quot;The current directory is $(pwd)&quot;</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>
<h2 id="arithmetic-substitution"><a class="header-anchor" href="#arithmetic-substitution"></a>arithmetic substitution</h2>
<p><code>$((...))</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">x=0</span><br><span class="line">while [[ $x != 10 ]]; do</span><br><span class="line">echo $x</span><br><span class="line">x=$(($x+1)) </span><br><span class="line">done</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure>
<h2 id="variable-substitution"><a class="header-anchor" href="#variable-substitution"></a>variable substitution</h2>
<p>变量替换可以根据变量的状态（是否为空、是否定义等）来改变它的值</p>
<p>可以使用的变量替换形式：</p>
<table>
<thead>
<tr>
<th>形式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>${var}</td>
<td>变量本来的值</td>
</tr>
<tr>
<td>${var:-word}</td>
<td>如果变量 var 为空或已被删除(unset)，那么返回 word，但不改变 var 的值。</td>
</tr>
<tr>
<td>${var:=word}</td>
<td>如果变量 var 为空或已被删除(unset)，那么返回 word，并将 var 的值设置为 word。</td>
</tr>
<tr>
<td>${var:?message}</td>
<td>如果变量 var 为空或已被删除(unset)，那么将消息 message 送到标准错误输出，可以用来检测变量 var 是否可以被正常赋值。 若此替换出现在Shell脚本中，那么脚本将停止运行。</td>
</tr>
<tr>
<td>${var:+word}</td>
<td>如果变量 var 被定义，那么返回 word，但不改变 var 的值。</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">echo $&#123;var:-&quot;Variable is not set&quot;&#125;</span><br><span class="line">echo &quot;1 - Value of var is $&#123;var&#125;&quot;</span><br><span class="line"></span><br><span class="line">echo $&#123;var:=&quot;Variable is not set&quot;&#125;</span><br><span class="line">echo &quot;2 - Value of var is $&#123;var&#125;&quot;</span><br><span class="line"></span><br><span class="line">unset var</span><br><span class="line">echo $&#123;var:+&quot;This is default value&quot;&#125;</span><br><span class="line">echo &quot;3 - Value of var is $var&quot;</span><br><span class="line"></span><br><span class="line">var=&quot;Prefix&quot;</span><br><span class="line">echo $&#123;var:+&quot;This is default value&quot;&#125;</span><br><span class="line">echo &quot;4 - Value of var is $var&quot;</span><br><span class="line"></span><br><span class="line">echo $&#123;var:?&quot;Print this message&quot;&#125;</span><br><span class="line">echo &quot;5 - Value of var is $&#123;var&#125;&quot;</span><br></pre></td></tr></table></figure>
<p>result:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Variable is not set</span><br><span class="line">1 - Value of var is</span><br><span class="line">Variable is not set</span><br><span class="line">2 - Value of var is Variable is not set</span><br><span class="line"></span><br><span class="line">3 - Value of var is</span><br><span class="line">This is default value</span><br><span class="line">4 - Value of var is Prefix</span><br><span class="line">Prefix</span><br><span class="line">5 - Value of var is Prefix</span><br></pre></td></tr></table></figure>
<h2 id="process-substitution"><a class="header-anchor" href="#process-substitution"></a>process substitution</h2>
<ul>
<li>
<p><code>&lt;( CMD )</code> ： 执行 <code>CMD</code> 并将其输出重定向到一个临时文件， 用这个临时文件的名字替换 <code>&lt;()</code></p>
<ul>
<li>
<p>This is useful when commands expect values to be passed by file instead of by STDIN.</p>
</li>
<li>
<p>For example, <code>diff &lt;(ls foo) &lt;(ls bar)</code> will show differences between files in dirs <code>foo</code> and <code>bar</code>.</p>
</li>
</ul>
</li>
</ul>
<h2 id="operator"><a class="header-anchor" href="#operator"></a>operator</h2>
<p>Bourne shell didn't originally have any mechanism to perform simple arithmetic operations but it uses external programs, either <strong>awk</strong> or <strong>expr</strong>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">val=`expr 2 + 2`</span><br><span class="line">echo &quot;Total value : $val&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>There must be spaces between operators and expressions.
<ul>
<li><code>2+2</code> ： wrong</li>
<li><code>2 + 2</code> ： right</li>
</ul>
</li>
<li>all the conditional expressions should be inside square braces with spaces around them
<ul>
<li><code>[$a==$b]</code> or <code>[$a &lt;= $b]</code>: wrong</li>
<li><code>[ $a == $b ]</code> or <code>[ $a &lt;= $b ]</code>: right</li>
</ul>
</li>
<li>When performing <strong>comparison</strong>s in bash, try to use double brackets <code>[[ ]]</code> in favor of simple brackets <code>[ ]</code></li>
<li>因为表达式要先执行，因此它必须被包裹在backquote内</li>
</ul>
<h3 id="Arithmetic-Operators"><a class="header-anchor" href="#Arithmetic-Operators"></a>Arithmetic Operators</h3>
<p>Assume variable <strong>a</strong> holds 10 and variable <strong>b</strong> holds 20 then −</p>
<table>
<thead>
<tr>
<th style="text-align:center">Operator</th>
<th style="text-align:center">Description</th>
<th style="text-align:center">Example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">+ (Addition)</td>
<td style="text-align:center">Adds values on either side of the operator</td>
<td style="text-align:center"><code>expr $a + $b</code> will give 30</td>
</tr>
<tr>
<td style="text-align:center">- (Subtraction)</td>
<td style="text-align:center">Subtracts right hand operand from left hand operand</td>
<td style="text-align:center"><code>expr $a - $b</code> will give -10</td>
</tr>
<tr>
<td style="text-align:center">* (Multiplication)</td>
<td style="text-align:center">Multiplies values on either side of the operator</td>
<td style="text-align:center"><code>expr $a \* $b</code> will give 200</td>
</tr>
<tr>
<td style="text-align:center">/ (Division)</td>
<td style="text-align:center">Divides left hand operand by right hand operand</td>
<td style="text-align:center"><code>expr $b / $a</code> will give 2</td>
</tr>
<tr>
<td style="text-align:center">% (Modulus)</td>
<td style="text-align:center">Divides left hand operand by right hand operand and returns remainder</td>
<td style="text-align:center"><code>expr $b % $a</code> will give 0</td>
</tr>
<tr>
<td style="text-align:center">= (Assignment)</td>
<td style="text-align:center">Assigns right operand in left operand</td>
<td style="text-align:center">a = $b would assign value of b into a</td>
</tr>
<tr>
<td style="text-align:center">== (Equality)</td>
<td style="text-align:center">Compares two numbers, if both are same then returns true.</td>
<td style="text-align:center">[ $a == $b ] would return false.</td>
</tr>
<tr>
<td style="text-align:center">!= (Not Equality)</td>
<td style="text-align:center">Compares two numbers, if both are different then returns true.</td>
<td style="text-align:center">[ $a != $b ] would return true.</td>
</tr>
</tbody>
</table>
<ul>
<li>All the arithmetical calculations are done using long <strong>integers</strong>.</li>
</ul>
<h3 id="Relational-Operators"><a class="header-anchor" href="#Relational-Operators"></a>Relational Operators</h3>
<p>These operators do not work for <strong>string</strong> values <strong>unless their value is numeric</strong>.</p>
<ul>
<li>For example, following operators will work to check a relation between 10 and 20 as well as in between &quot;10&quot; and &quot;20&quot; but not in between &quot;ten&quot; and &quot;twenty&quot;.</li>
</ul>
<p>Assume variable <strong>a</strong> holds 10 and variable <strong>b</strong> holds 20 then −</p>
<table>
<thead>
<tr>
<th style="text-align:center">Operator</th>
<th style="text-align:center">Description</th>
<th style="text-align:center">Example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>-eq</strong></td>
<td style="text-align:center">Checks if the value of two operands are equal or not; if yes, then the condition becomes true.</td>
<td style="text-align:center">[ $a -eq $b ] is not true.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-ne</strong></td>
<td style="text-align:center">Checks if the value of two operands are equal or not; if values are not equal, then the condition becomes true.</td>
<td style="text-align:center">[ $a -ne $b ] is true.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-gt</strong></td>
<td style="text-align:center">Checks if the value of left operand is greater than the value of right operand; if yes, then the condition becomes true.</td>
<td style="text-align:center">[ $a -gt $b ] is not true.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-lt</strong></td>
<td style="text-align:center">Checks if the value of left operand is less than the value of right operand; if yes, then the condition becomes true.</td>
<td style="text-align:center">[ $a -lt $b ] is true.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-ge</strong></td>
<td style="text-align:center">Checks if the value of left operand is greater than or equal to the value of right operand; if yes, then the condition becomes true.</td>
<td style="text-align:center">[ $a -ge $b ] is not true.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-le</strong></td>
<td style="text-align:center">Checks if the value of left operand is less than or equal to the value of right operand; if yes, then the condition becomes true.</td>
<td style="text-align:center">[ $a -le $b ] is true.</td>
</tr>
</tbody>
</table>
<h3 id="Boolean-Operators"><a class="header-anchor" href="#Boolean-Operators"></a>Boolean Operators</h3>
<p>The following Boolean operators are supported by the Bourne Shell.</p>
<p>Assume variable <strong>a</strong> holds 10 and variable <strong>b</strong> holds 20 then −</p>
<table>
<thead>
<tr>
<th style="text-align:center">Operator</th>
<th style="text-align:center">Description</th>
<th style="text-align:center">Example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>!</strong></td>
<td style="text-align:center">This is logical negation. This inverts a true condition into false and vice versa.</td>
<td style="text-align:center">[ ! false ] is true.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-o</strong></td>
<td style="text-align:center">This is logical <strong>OR</strong>. If one of the operands is true, then the condition becomes true.</td>
<td style="text-align:center">[ $a -lt 20 -o $b -gt 100 ] is true.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-a</strong></td>
<td style="text-align:center">This is logical <strong>AND</strong>. If both the operands are true, then the condition becomes true otherwise false.</td>
<td style="text-align:center">[ $a -lt 20 -a $b -gt 100 ] is false.</td>
</tr>
</tbody>
</table>
<h3 id="String-Operators"><a class="header-anchor" href="#String-Operators"></a>String Operators</h3>
<p>The following string operators are supported by Bourne Shell.</p>
<p>Assume variable <strong>a</strong> holds &quot;abc&quot; and variable <strong>b</strong> holds &quot;efg&quot; then −</p>
<table>
<thead>
<tr>
<th style="text-align:center">Operator</th>
<th style="text-align:center">Description</th>
<th style="text-align:center">Example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>=</strong></td>
<td style="text-align:center">Checks if the value of two operands are equal or not; if yes, then the condition becomes true.</td>
<td style="text-align:center">[ $a = $b ] is not true.</td>
</tr>
<tr>
<td style="text-align:center"><strong>!=</strong></td>
<td style="text-align:center">Checks if the value of two operands are equal or not; if values are not equal then the condition becomes true.</td>
<td style="text-align:center">[ $a != $b ] is true.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-z</strong></td>
<td style="text-align:center">Checks if the given string operand size is zero; if it is zero length, then it returns true.</td>
<td style="text-align:center">[ -z $a ] is not true.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-n</strong></td>
<td style="text-align:center">Checks if the given string operand size is non-zero; if it is nonzero length, then it returns true.</td>
<td style="text-align:center">[ -n $a ] is not false.</td>
</tr>
<tr>
<td style="text-align:center"><strong>str</strong></td>
<td style="text-align:center">Checks if <strong>str</strong> is not the empty string; if it is empty, then it returns false.</td>
<td style="text-align:center">[ $a ] is not false.</td>
</tr>
</tbody>
</table>
<h3 id="File-Test-Operators"><a class="header-anchor" href="#File-Test-Operators"></a>File Test Operators</h3>
<p>We have a few operators that can be used to test various properties associated with a Unix file.</p>
<p>Assume a variable <strong>file</strong> holds an existing file name &quot;test&quot; the size of which is 100 bytes and has <strong>read</strong>, <strong>write</strong> and <strong>execute</strong> permission on −</p>
<table>
<thead>
<tr>
<th style="text-align:center">Operator</th>
<th style="text-align:center">Description</th>
<th style="text-align:center">Example</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>-b file</strong></td>
<td style="text-align:center">Checks if file is a block special file; if yes, then the condition becomes true.</td>
<td style="text-align:center">[ -b $file ] is false.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-c file</strong></td>
<td style="text-align:center">Checks if file is a character special file; if yes, then the condition becomes true.</td>
<td style="text-align:center">[ -c $file ] is false.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-d file</strong></td>
<td style="text-align:center">Checks if file is a directory; if yes, then the condition becomes true.</td>
<td style="text-align:center">[ -d $file ] is not true.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-f file</strong></td>
<td style="text-align:center">Checks if file is an ordinary file as opposed to a directory or special file; if yes, then the condition becomes true.</td>
<td style="text-align:center">[ -f $file ] is true.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-g file</strong></td>
<td style="text-align:center">Checks if file has its set group ID (SGID) bit set; if yes, then the condition becomes true.</td>
<td style="text-align:center">[ -g $file ] is false.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-k file</strong></td>
<td style="text-align:center">Checks if file has its sticky bit set; if yes, then the condition becomes true.</td>
<td style="text-align:center">[ -k $file ] is false.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-p file</strong></td>
<td style="text-align:center">Checks if file is a named pipe; if yes, then the condition becomes true.</td>
<td style="text-align:center">[ -p $file ] is false.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-t file</strong></td>
<td style="text-align:center">Checks if file descriptor is open and associated with a terminal; if yes, then the condition becomes true.</td>
<td style="text-align:center">[ -t $file ] is false.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-u file</strong></td>
<td style="text-align:center">Checks if file has its Set User ID (SUID) bit set; if yes, then the condition becomes true.</td>
<td style="text-align:center">[ -u $file ] is false.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-r file</strong></td>
<td style="text-align:center">Checks if file is readable; if yes, then the condition becomes true.</td>
<td style="text-align:center">[ -r $file ] is true.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-w file</strong></td>
<td style="text-align:center">Checks if file is writable; if yes, then the condition becomes true.</td>
<td style="text-align:center">[ -w $file ] is true.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-x file</strong></td>
<td style="text-align:center">Checks if file is executable; if yes, then the condition becomes true.</td>
<td style="text-align:center">[ -x $file ] is true.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-s file</strong></td>
<td style="text-align:center">Checks if file has size greater than 0; if yes, then condition becomes true.</td>
<td style="text-align:center">[ -s $file ] is true.</td>
</tr>
<tr>
<td style="text-align:center"><strong>-e file</strong></td>
<td style="text-align:center">Checks if file exists; is true even if file is a directory but exists.</td>
<td style="text-align:center">[ -e $file ] is true.</td>
</tr>
</tbody>
</table>
<h2 id="shell-globbing"><a class="header-anchor" href="#shell-globbing"></a>shell globbing</h2>
<ul>
<li>
<p>一些正则操作，用于文件名扩展</p>
</li>
<li>
<p>Wildcards:</p>
<ul>
<li>
<p><code>?</code>: match <strong>one</strong> character</p>
</li>
<li>
<p><code>*</code>:  match <strong>any</strong> amount of characters</p>
</li>
<li>
<p>For instance, given files <code>foo</code>, <code>foo1</code>, <code>foo2</code>, <code>foo10</code> and <code>bar</code>, the command <code>rm foo?</code> will delete <code>foo1</code> and <code>foo2</code> whereas <code>rm foo*</code> will delete all but <code>bar</code>.</p>
</li>
</ul>
</li>
<li>
<p>Curly braces <code>&#123;&#125;</code> -  相当于笛卡尔积：  <code>a.&#123;py,cpp,java&#125;</code>等价于 <code>a.py a.cpp a.java</code></p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">convert image.&#123;png,jpg&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Will <span class="built_in">expand</span> to</span></span><br><span class="line">convert image.png image.jpg</span><br><span class="line"></span><br><span class="line">cp /path/to/project/&#123;foo,bar,baz&#125;.sh /newpath</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Will <span class="built_in">expand</span> to</span></span><br><span class="line">cp /path/to/project/foo.sh /path/to/project/bar.sh /path/to/project/baz.sh /newpath</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Globbing techniques can also be combined</span></span><br><span class="line">mv *&#123;.py,.sh&#125; folder</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Will move all *.py and *.sh files</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mkdir foo bar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This creates files foo/a, foo/b, ... foo/h, bar/a, bar/b, ... bar/h</span></span><br><span class="line">touch &#123;foo,bar&#125;/&#123;a..h&#125;</span><br><span class="line">touch foo/x bar/y</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Show differences between files <span class="keyword">in</span> foo and bar</span></span><br><span class="line">diff &lt;(ls foo) &lt;(ls bar)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Outputs</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt; x</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">---</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt; y</span></span><br></pre></td></tr></table></figure>
<h2 id="env-virable"><a class="header-anchor" href="#env-virable"></a>env virable</h2>
<p>使用 export 设置的变量就成为了环境变量，而没有使用 export 设置的则是自定义变量</p>
<table>
<thead>
<tr>
<th>环境变量</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>$HOME</td>
<td>当前用户的登陆目录</td>
</tr>
<tr>
<td>$PATH</td>
<td>以冒号分隔的用来搜索命令的目录的列表</td>
</tr>
<tr>
<td>$PS1</td>
<td>命令行提示符，通常是”$”字符 (很多主题都会改掉$PS1)</td>
</tr>
<tr>
<td>$PS2</td>
<td>辅助提示符，用来提示后续输入，通常是”&gt;”字符</td>
</tr>
<tr>
<td>$IFS</td>
<td>输入区分隔符。当shell读取输入数据时会把一组字符看成是单词之间的分隔符，通常是空格、制</td>
</tr>
<tr>
<td></td>
<td>表符、换行符等</td>
</tr>
</tbody>
</table>
<h2 id="parameter-variable"><a class="header-anchor" href="#parameter-variable"></a>parameter variable</h2>
<ul>
<li><code>$0</code> - Name of the script</li>
<li><code>$1</code> to <code>$9</code> - Arguments to the script. <code>$1</code> is the first argument and so on.
<ul>
<li>当<code>n&gt;=10</code>时，需要使用$<code>&#123;n&#125;</code>来获取参数</li>
</ul>
</li>
<li><code>$@</code> - 全部参数组成的列表</li>
<li><code>$#</code> - Number of arguments</li>
<li><code>$?</code> - Return code of the previous command</li>
<li><code>$*</code>： 全部参数连接成的字符串，按<code>$IFS</code>的第一个字符分割</li>
<li><code>$$</code> - Process identification number (PID) for the current script</li>
<li><code>!!</code> - <strong>Entire last command</strong>, including arguments. A common pattern is to execute a command only for it to fail due to missing permissions; you can quickly re-execute the command with sudo by doing <code>sudo !!</code></li>
<li><code>$_</code> - Last argument from the last command. If you are in an interactive shell, you can also quickly get this value by typing <code>Esc</code> followed by <code>.</code> or <code>Alt+.</code></li>
</ul>
<p><code>$PATH</code> 是由多个路径所组成的，并且用冒号进行了分隔</p>
<p>环境变量可以在其进程的子进程中继续有效，而自定义变量则无效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">我们在当前Shell进程中指定了var1变量</span></span><br><span class="line">[roc@roclinux ~]$ var1=&quot;hello&quot;</span><br><span class="line">[roc@roclinux ~]$ echo $var1</span><br><span class="line">hello</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">我们在当前Shell进程中又指定了var2变量</span></span><br><span class="line">[roc@roclinux ~]$ var2=&quot;world&quot;</span><br><span class="line">[roc@roclinux ~]$ echo $var2</span><br><span class="line">world</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">我们通过<span class="built_in">export</span>发布var1</span></span><br><span class="line">[roc@roclinux ~]$ export var1</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">我们进入到一个bash子进程中</span></span><br><span class="line">[roc@roclinux ~]$ bash</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">var1变量仍然有效, 而var2变量已经无效了</span></span><br><span class="line">[roc@roclinux ~]$ echo $var1 # 输出变量的值</span><br><span class="line">hello</span><br><span class="line">[roc@roclinux ~]$ echo $var2  # 什么也没有输出</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:/home/to/operation_tools</span><br></pre></td></tr></table></figure>
<ul>
<li>声明环境变量PATH, 值为之前的<code>PATH</code>的值（采用<code>$</code>进行赋值）， 再append <code>:/home/to/operation_tools</code>， 这里要append冒号，因为环境变量之间通过冒号隔开</li>
</ul>
<h2 id="scripts"><a class="header-anchor" href="#scripts"></a>scripts</h2>
<h3 id="shebang"><a class="header-anchor" href="#shebang"></a>shebang</h3>
<p>Note that scripts need not necessarily be written in bash to be called from the terminal. For instance, here’s a simple Python script that outputs its arguments in reversed order:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/local/bin/python</span></span><br><span class="line">import sys</span><br><span class="line">for arg in reversed(sys.argv[1:]):</span><br><span class="line">    print(arg)</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>shebang: the character sequence consisting of <code>#!</code> at the beginning of a script in   a <a href="https://en.wikipedia.org/wiki/Unix-like">Unix-like</a> operating system</p>
<ul>
<li>
<p>shell会将shebang中<code>#!</code>之后的内容作为一个程序的路径，打开该程序， 将本script的路径当作参数传入（ 即，将整个script当作input传入shebang所指定的程序 ）</p>
</li>
<li>
<p>For example, if a script is named with the path <em>path/to/script</em>, and it starts with the following line, <code>#!/bin/sh</code>, then the program loader is instructed to run the program <em>/bin/sh</em>, passing <em>path/to/script</em> as the first argument. In <a href="https://en.wikipedia.org/wiki/Linux">Linux</a>, this behavior is the result of both kernel and user-space code.[<a href="https://en.wikipedia.org/wiki/Shebang_(Unix)#cite_note-9">9]</a></p>
</li>
<li>
<p>The shebang line is usually ignored by the interpreter, because the &quot;#&quot; character is a <a href="https://en.wikipedia.org/wiki/Comment_(computer_programming)">comment</a> marker in many scripting languages; some language interpreters that do not use the hash mark to begin comments still may ignore the shebang line in recognition of its purpose.</p>
</li>
</ul>
</li>
</ul>
<h3 id="shebang-with-env"><a class="header-anchor" href="#shebang-with-env"></a>shebang with env</h3>
<p>The shebang expects a full path to the interpreter to use so the following syntax would be incorrect:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!python</span></span><br></pre></td></tr></table></figure>
<p>Setting a full path like this might work:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python</span></span><br></pre></td></tr></table></figure>
<p>but would be non portable as python might be installed in <code>/bin</code>, <code>/opt/python/bin</code>, or wherever other location.</p>
<p>Using <code>env</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br></pre></td></tr></table></figure>
<p>is a method allowing a portable way to specify to the OS a full path equivalent to the one where <code>python</code> is first located in the <code>PATH</code>.</p>
<h3 id="scripts-vs-shell-functions"><a class="header-anchor" href="#scripts-vs-shell-functions"></a>scripts vs shell functions</h3>
<p>Some differences between shell functions and scripts that you should keep in mind are:</p>
<ul>
<li>Functions have to be in the same language as the shell, while scripts can be written in any language. This is why including a shebang for scripts is important.</li>
<li>Functions are loaded once when their definition is read. Scripts are loaded every time they are executed. This makes functions slightly faster to load, but whenever you change them you will have to reload their definition.</li>
<li>Functions are executed <strong>in the current shell environment</strong>( 可以简单理解为， function的所在路径是当前路径 ) whereas scripts execute in their own process. Thus, functions can modify environment variables, e.g. change your current directory, whereas scripts can’t. Scripts will be passed by value environment variables that have been exported using <a href="https://www.man7.org/linux/man-pages/man1/export.1p.html"><code>export</code></a></li>
<li>As with any programming language, functions are a powerful construct to achieve modularity, code reuse, and clarity of shell code. Often shell scripts will include their own function definitions.</li>
</ul>
<h3 id="Potpourri"><a class="header-anchor" href="#Potpourri"></a>Potpourri</h3>
<ul>
<li>
<p><code>:</code>： 空命令</p>
</li>
<li>
<p><code>.</code>或<code>source</code>： 在当前shell session中执行脚本， 因此可以用于刷新当前shell环境:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>break: 从for/while/until循环退出</p>
</li>
</ul>
<h3 id=""><a class="header-anchor" href="#"></a></h3>
<h2 id="execute-shell-scripts"><a class="header-anchor" href="#execute-shell-scripts"></a>execute shell scripts</h2>
<ul>
<li>
<p>Shell script是能在命令行直接输入的，但仅会作用一次</p>
</li>
<li>
<p>执行脚本文件：</p>
<ul>
<li>
<p>方法1: 直接指定<code>sh</code>来执行该脚本，不需要shebang，也不需要脚本有执行权限（因为该脚本直接作为参数传给了sh）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh script_file</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>方法2: 要shebang（指定解释器），要指定脚本路径（<code>./</code>必加）， 否则bash就会在环境变量中查找该脚本名，找不到就报错</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x script_file ##(chown, chgrp optionally)</span><br><span class="line">./script_file</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>方法3: 在当前shell session中执行该脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source script_file</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">. script_file</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p>​</p>
<p>注意，方法1和2都是新开一个子shell session，在其中执行脚本，而方法三是在当前shell session中执行脚本</p>
<h3 id="-2"><a class="header-anchor" href="#-2"></a></h3>
]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Software Construction</title>
    <url>/2021/06/17/Software%20Construction/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Intro</li>
<li>软件构造活动</li>
<li>Ideas</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<ul>
<li>
<p>定义： 通过编码、验证、单元测试、集成测试和调试等工作的结合，生产可工作的、有意义的软件的详细创建过程</p>
</li>
<li>
<p>软件构造除了核心的编程任务之外， 还涉及详细设计（ 数据结构与算法设计 ）、单元测试、集成与集成测试、 以及其他活动。</p>
</li>
<li>
<p><strong>软件构造是设计的延续</strong></p>
<ul>
<li>设计与实现是有区分的。 设计是规划软件构件方案的过程，是现实依据软件构件方案建造真正产品的过程；</li>
<li>源程序是软件构建方案的最后一个规划， 不是产品本身， 真正的产品是运行于计算机上的由二进制代码组成的可执行程序。</li>
<li>源程序的生产过程----编程， <strong>属于设计活动</strong>， 编译器完成的编译和连接才是依据规划建造软件产品的实现活动。</li>
</ul>
</li>
</ul>
<h1 id="软件构造活动"><a class="header-anchor" href="#软件构造活动"></a>软件构造活动</h1>
<h2 id="详细设计"><a class="header-anchor" href="#详细设计"></a>详细设计</h2>
<ul>
<li>有些项目会将主要的详细设计工作分配在<strong>软件构造阶段</strong>完成。</li>
<li>不论是哪种项目，在软件构造阶段都不可避免的会涉及到详细设计的调整工作。 因为编程语言是软件设计的一个重要约束， 随着编程工作的进行和深入， 人们可能会发现与预想不一致的情况和更多的约束，这个时候就需要在软件构造阶段修改详细设计方案。</li>
<li>软件构造阶段详细设计使用的方法与技术与软件设计阶段是一样的，只是应用在更小的规模上。</li>
</ul>
<h2 id="程序代码的典型质量"><a class="header-anchor" href="#程序代码的典型质量"></a>程序代码的典型质量</h2>
<ul>
<li>易读性</li>
<li>易维护性</li>
<li>可靠性</li>
<li>性能</li>
<li>安全性</li>
</ul>
<h2 id=""><a class="header-anchor" href="#"></a></h2>
<h2 id="调试"><a class="header-anchor" href="#调试"></a>调试</h2>
<ul>
<li>Debugging is concerned with locating and<br>
repairing these errors</li>
<li>调试过程可以分为三个部分:重现问题、<br>
诊断缺陷和修复缺陷。</li>
</ul>
<h2 id="重现问题的方法"><a class="header-anchor" href="#重现问题的方法"></a>重现问题的方法</h2>
<ul>
<li>控制输入。
<ul>
<li>找到相应的数据输入,能够重现绝大多数的问题。可以通过控制数据输入来重现问题意味着缺陷就发生在对该数据的处理代码之中。</li>
<li>寻找能够重现问题的数据输入可以使用问题回溯推理、内存数据监控、记录输入数据日志等方法。</li>
</ul>
</li>
<li>控制环境。
<ul>
<li>有些问题是编译器、操作系统、数据库管理系统、网络管理系统等系统软件环境造成的,通过控制数据输入无法重现问题。这时就需要通过控制环境来重现问题。一定要记住的是,如果你进行各种手段诊断之后确信你的程序代码没有缺陷,就要警惕可能是软件环境造成了问题。</li>
<li>控制环境以重现问题经常使用替换法,例如替换机器、操作系统、数据库管理系统等。</li>
</ul>
</li>
</ul>
<h2 id="寻找和定位缺陷的方法"><a class="header-anchor" href="#寻找和定位缺陷的方法"></a>寻找和定位缺陷的方法</h2>
<ul>
<li>灵活使用编译器提示。</li>
<li>持续缩小嫌疑代码的范围。</li>
<li>检查刚刚修改过的部分。</li>
<li>警惕已出现缺陷和常见缺陷。</li>
<li>利用工具。</li>
</ul>
<h2 id="常见错误"><a class="header-anchor" href="#常见错误"></a>常见错误</h2>
<ul>
<li>内存或资源泄漏;</li>
<li>定时错误(没有考虑特殊情况) ;</li>
<li>逻辑错误;</li>
<li>存储错误(考虑磁盘已满,文件不存在等特例</li>
<li>编码错误(例如条件判断不够充分)) ;</li>
<li>集成错误(相互之间的考虑不相容)</li>
<li>内存溢出(超出本身限制);</li>
<li>循环错误(死循环或数目不合适) ;</li>
<li>转换错误(字符转换等出现问题) ;</li>
<li>条件错误;</li>
<li>硬编码长度/尺寸;</li>
<li>指针错误(超出范围,未赋值);</li>
<li>版本缺陷(对以前的不兼容) ;</li>
<li>分配释放错误(分配两次、未分配即释放、释放两次、分配未释放)</li>
<li>多线程错误(同步);</li>
<li>不恰当重用带来的缺陷。</li>
</ul>
<h2 id="修复缺陷的注意点"><a class="header-anchor" href="#修复缺陷的注意点"></a>修复缺陷的注意点</h2>
<ul>
<li>一次只修复一 个缺陷。</li>
<li>修改前保留旧版本的备份,如果项目使用了配置管理系统,这个工作会由配置管理工具完成,否则就需要由程序员手动完成。</li>
<li>使用测试和评审验证修复的有效性。</li>
<li>检查和修复类似的缺陷,这可以在代码搜索、程序切片等工具的帮助下进行。</li>
</ul>
<h2 id="代码评审"><a class="header-anchor" href="#代码评审"></a>代码评审</h2>
<ul>
<li>代码评审对代码的系统检查,通常是通过同行专家评审来完成的。通过评审会议可以发现并修正之前忽略的代码错误,从而同时提高软件的质量和开发者的技巧。</li>
<li>代码评审一般分为正式评审、轻量级评审和结对编程。</li>
</ul>
<h2 id="实践经验"><a class="header-anchor" href="#实践经验"></a>实践经验</h2>
<ul>
<li>就算不能评审全部的代码,最少也要评审一部分( 20 -33% )代码,以促使程序员编写更好的代码。</li>
<li>一次评审少于200- 400行的代码。</li>
<li>目标为每小时低于300 -500 LOC的检查速率。</li>
<li>花足够的时间进行正确缓慢的评审,但是不要超过60- -90 分钟/每次。</li>
<li>确定代码开发者<strong>在评审开始之前就已经注释了源代码</strong>。</li>
<li>使用<strong>检查列表</strong>,因为它可以极大地改进代码开发者和评审者的工作。确认发现的缺陷确实得到修复了。</li>
<li>培养良好的代码评审文化氛围,在这样的氛围中搜索缺陷被看做是积极的活动。</li>
<li>采用轻量级,能用工具支持的代码评审。</li>
</ul>
<h2 id="集成与构建"><a class="header-anchor" href="#集成与构建"></a>集成与构建</h2>
<ul>
<li>在以分散的方式完成程序基本单位(例程、类)之后，软件构造还需要将这些分散单位集成和构建为<br>
构件、子系统和完整系统。</li>
<li>集成有<code>大爆炸式集成</code>和<code>增量式集成</code>两种方式。实践中增量式集成有着更好的效果。</li>
<li>构建将可读的源代码转换为标准的能在计算机上运行的可执行文件。构建过程需要配置管理工具的帮<br>
助。</li>
</ul>
<h2 id="构造管理"><a class="header-anchor" href="#构造管理"></a>构造管理</h2>
<ul>
<li>构造计划
<ul>
<li>根据整个项目的开发过程安排, 定义要开发的构建与次序,选则构造方法,明确构造任务并分配给程序员。</li>
</ul>
</li>
<li>度量
<ul>
<li>类或者方法的复杂度、代码行、注释</li>
</ul>
</li>
<li>配置管理
<ul>
<li>对开发配置库建立使用规则, 完成代码单位或者修改是提交</li>
<li>开发时要确保配置环境一致. 这点非常重要,因为企业用的配置都非常古老.</li>
</ul>
</li>
</ul>
<h1 id="防御式编程"><a class="header-anchor" href="#防御式编程"></a>防御式编程</h1>
<p>防御式编程用于提升代码的正确性和健壮性, 这两个性质可能会矛盾，因此要根据具体问题作出取舍</p>
<ul>
<li>
<p>正确性(correctness):  软件按照需求正确执行任务的能力</p>
<ul>
<li><strong>永不返回不准确的结果</strong>，哪怕不返回结果也比返回不准确的结果好（无论如何，软件正常运行是最起码的要求，追求正确性不意味着软件可以崩溃）</li>
<li>人身安全攸关的软件</li>
</ul>
</li>
<li>
<p>健壮性(robustness): 软件<strong>对于规范要求以外的输入情况的处理能力</strong></p>
<ul>
<li>
<p>要不断尝试采取某些措施，以保证软件可以持续地运转下去，哪怕有时做出一些不够准确的结果</p>
</li>
<li>
<p>消费类应用软件</p>
</li>
</ul>
</li>
</ul>
<p>主要思想:</p>
<ul>
<li>
<p>子程序应该不因传入错误数据而被破坏，哪怕是由其他子程序产生的错误数据</p>
</li>
<li>
<p>要承认程序都会有问题，都会被修改， 即：进行防御式编程时，不应该存在任何假设</p>
</li>
</ul>
<p>特点：</p>
<ul>
<li>区别于检查错误：防御性编程并不能排除所有的程序错误</li>
<li>区别于调试：防御式编程是一种防卫方式，而不是补救方式</li>
<li>区别于测试：测试不是防御式的，测试可以验证代码现在是 正确的，但不保证在经历修改之后不会出错</li>
</ul>
<h2 id="错误处理技术"><a class="header-anchor" href="#错误处理技术"></a>错误处理技术</h2>
<p><strong>错误处理应该根据系统对正确性和健壮性的追求来定</strong></p>
<p>这里的错误处理技术有开发阶段的，也有用于生产环境的，在开发阶段，应该尽早地引入辅助代码， 当然为了追求效率，某些辅助代码不应该被包含进在生产环境(比如<code>assert</code>)</p>
<h3 id="assert"><a class="header-anchor" href="#assert"></a>assert</h3>
<p>断言用于开发阶段，不应该被编译进生产环境</p>
<ul>
<li>断言可以提升系统的正确性，断言处理的是代码中<strong>不应发生的错误</strong></li>
</ul>
<h3 id="exception"><a class="header-anchor" href="#exception"></a>exception</h3>
<p>异常：把代码中的错误或异常事件传递给调用方代码的一种技术</p>
<ul>
<li>异常用于提升系统的健壮性，异常处理的是<strong>预料中可能发生的错误， 由于程序代码或外部因素而发生， 是可以手动处理的</strong>
<ul>
<li>尤其是<code>RuntimeException</code>， 一般是编程问题引发的</li>
</ul>
</li>
<li>不要滥用异常，<strong>只有真正例外的情况下才抛出异常</strong>（即其他技术无法解决的情况下）</li>
<li>异常会增加复杂度: 调用子程序的代码需要了解被调用代码中可能会抛出的异常，<strong>弱化了封装性</strong></li>
</ul>
<p>实践原则：</p>
<ul>
<li>永远考虑异常的替换方案，不到迫不得已不要用异常
<ul>
<li>使用异常的原因是迫不得已， 而不是因为语言提供了异常机制</li>
</ul>
</li>
<li>不能用异常来推卸责任： <strong>可以在局部处理就在局部处理掉</strong></li>
<li>避免在构造函数和析构函数中抛出异常，除非你在同一地方把它们捕获
<ul>
<li>C++中， 构造函数中的异常会造成资源泄露</li>
</ul>
</li>
<li>在恰当的抽象层次抛出异常：确保异常的抽象层次与子程序接口的抽象层次是一致的</li>
<li>如果系统要使用大量异常，那么需要将异常标准化</li>
</ul>
<h3 id="error"><a class="header-anchor" href="#error"></a>error</h3>
<p>error不是一种错误处理技术，它和exception的区别在于， error往往是系统内部发生了错误，这一般是无法手动处理的</p>
<p>Java Exception and Error：</p>
<p>![image-20220412171602879](/Users/lyk/Library/Application Support/typora-user-images/image-20220412171602879.png)</p>
<h2 id="辅助代码"><a class="header-anchor" href="#辅助代码"></a>辅助代码</h2>
<ul>
<li></li>
</ul>
<h1 id="实践方法"><a class="header-anchor" href="#实践方法"></a>实践方法</h1>
<h2 id="重构"><a class="header-anchor" href="#重构"></a>重构</h2>
<ul>
<li>为什么要重构?
<ol>
<li>因为无法预计到后续数年的修改，导致软件开发阶段的设计方案不能满足修改要求;</li>
<li>随着修改次数的增多,软件设计结构的质量越来越脆弱,很难继续维持可修改性。</li>
</ol>
</li>
<li>什么是重构?
<ul>
<li>修改软件系统的严谨方法,它在<strong>不改变代码外部表现的情况下改进其内部结构</strong>。</li>
</ul>
</li>
<li>重构的时机?
<ul>
<li>增加新的功能时。需要注意的是<strong>重构发生在新功能增加完成之后,用来消除新功能所添加代码导致的坏味道( code smell );而不是发生在新功能添加之前</strong>, 重构不改变代码外部行为,不是能够实现新功能添加的方法。</li>
<li>发现了缺陷进行修复时。诊断缺陷时如果发现代码存在坏味道或者修复代码会引入坏味道,就需要进行重构。</li>
<li>进行代码评审时。如果在评审代码时发现了坏味道,就需要进行重构。</li>
</ul>
</li>
</ul>
<h2 id="code-smell"><a class="header-anchor" href="#code-smell"></a>code smell</h2>
<ul>
<li><strong>太长的方法</strong>,往往意味着方法完成了太多的任务,不是功能内聚的,需要被分解为多个方法。[McConnell2004]认为如果方法代码长度超过了一个屏幕,就需要留心注意了。</li>
<li><strong>太大的类</strong>,往往意味着类不是单一职责的 ,需要被分解为多个类。</li>
<li><strong>太多的方法参数</strong>,往往意味着方法的任务太多或者参数的数据类型抽象层次太低,不符合接口最小化的低耦合原则,需要将其分解为多 个参数少的方法或者将参数包装成对象、结构体等抽象层次更高的数据类型。</li>
<li><strong>多处相似的复杂控制结构</strong>,例如多处相同类型的Case结构,往往意味着多态策略不足,需要使用继承树多态机制消除复杂控制结构。</li>
<li><strong>重复的代码</strong>,往往意味着隐式耦合,需要将重复代码提取为独立方法。一个类过多使用其他类的属性,往往意味着属性分配不正确或者协作设计不正<br>
确,需要在类间转移属性或者使用方法委托代替属性访问。</li>
<li><strong>过多的注释</strong>,往往意味着代码的逻辑结构不清晰或者可读性不好,需要进行逻辑结构重组或者代码重组。</li>
</ul>
<h2 id="测试驱动开发"><a class="header-anchor" href="#测试驱动开发"></a>测试驱动开发</h2>
<ul>
<li>测试驱动开发又被称为测试优先( Test First )的开发,随着极限编程方法的普遍应用而得到普及.</li>
<li>测试驱动开发要求程序员在编写一段代码之前，<strong>优先完成该段代码的测试代码</strong>。测试代码通常由测试工具自动装载执行,也可以由程序员手工执.行。完成测试代码之后,程序员再编写程序代码并在编程中重复执行测试代码,以验证程序代码的正确性。</li>
</ul>
<h2 id="结对编程"><a class="header-anchor" href="#结对编程"></a>结对编程</h2>
<ul>
<li>
<p>Two programmers working side-by-side, collaborating on the same design, algorithm, code or test</p>
</li>
<li>
<p>One programmer, the driver, has control of the keyboard/mouse and actively implements the program</p>
</li>
<li>
<p>The other programmer, the observer, continuously observes the work of the driver to <strong>identify tactical</strong> (syntactic, spelling, etc.) <strong>defects</strong> and also thinks strategically about the direction of the work</p>
</li>
<li>
<p>On demand, the two programmers can brainstorm any challenging problem</p>
</li>
<li>
<p>The two programmers periodically switch roles, they work together as equals to develop software</p>
</li>
</ul>
<h3 id="原理"><a class="header-anchor" href="#原理"></a>原理</h3>
<ul>
<li>
<p>Pair-Pressure</p>
<ul>
<li>Keep each other on task and <strong>focused</strong></li>
</ul>
</li>
<li>
<p>Pair-Think</p>
<ul>
<li>Bring different prior experiences to the task</li>
</ul>
</li>
<li>
<p>Pair-Relaying</p>
<ul>
<li>Each, in turn, contributes to the best of their knowledge and ability Then, sit back and think while their partner fights on</li>
</ul>
</li>
<li>
<p>Pair-Reviews</p>
<ul>
<li>Continuous design and code reviews</li>
<li>Ultimate in defect removal efficiency</li>
<li>Removes programmers distaste for reviews</li>
<li>80% of all (solo) programmers don’t do them regularly or at all</li>
<li>Defect prevention always more efficient than defect removal</li>
</ul>
</li>
<li>
<p>Pair Debugging</p>
<ul>
<li>Talking about problem in a pair can lead to a solution becoming obvious</li>
</ul>
</li>
<li>
<p>Pair-Learning</p>
<ul>
<li>Continuous reviews -&gt; learn from partners techniques, knowledge of language, domain, etc.</li>
</ul>
</li>
</ul>
<h1 id="Construction-Ideas"><a class="header-anchor" href="#Construction-Ideas"></a>Construction Ideas</h1>
<h2 id="A-Decade-of-Advances-in-Software-Construction"><a class="header-anchor" href="#A-Decade-of-Advances-in-Software-Construction"></a>A Decade of Advances in Software Construction</h2>
<ol>
<li>Design has Been Raised a Level
<ul>
<li>Programming has advanced through ability to create larger code aggregations
<ul>
<li>Statements</li>
<li>Routines</li>
<li>Classes</li>
<li>Packages</li>
</ul>
</li>
<li>Real legacy of OO might well be larger aggregations</li>
</ul>
</li>
<li><strong>Daily</strong> Build and Smoke Test
<ul>
<li>Institutionalizes incremental integration</li>
<li>Minimizes serious integration problems that used to be common</li>
<li>Lots of other benefits, too</li>
</ul>
</li>
<li>Standard Libraries
<ul>
<li>Good programmers have always used libraries</li>
<li>Now provided with languages (Java, C++, .NET)</li>
</ul>
</li>
<li>Visual Basic
<ul>
<li>Visual programming innovation</li>
<li>The first development environment to make widespread use of COTS components</li>
<li>Only language to learn Ada’s syntax lessons (case statements, control statements, etc.)</li>
<li>Highly integrated environment</li>
</ul>
</li>
<li>Open Source Software</li>
</ol>
<ul>
<li>Great aid to programmers during development</li>
<li>Reduced barriers to making code available</li>
<li>Opportunity to learn from available code</li>
<li>Improved ability to read code</li>
<li>Nice “community” of programmers</li>
</ul>
<ol start="6">
<li>The Web, for Research</li>
</ol>
<ul>
<li>FAQs</li>
<li>Discussion groups</li>
<li>Searchability in general</li>
</ul>
<ol start="7">
<li>Widespread Use of Incremental Development( <strong>增量开发</strong> )</li>
</ol>
<ul>
<li>Concepts were well known in 1990s</li>
<li>Practice is well established in 2000s</li>
</ul>
<ol start="8">
<li>Test-First Development</li>
</ol>
<ul>
<li>Shortens time to defect detection</li>
<li>Increases personal discipline</li>
<li>Complements daily build &amp; smoke test</li>
</ul>
<ol start="9">
<li>Refactoring as a Discipline</li>
</ol>
<ul>
<li>Provides a discipline for making changes</li>
<li>Not so good as a total design strategy</li>
<li>Good example of incrementalism</li>
</ul>
<ol start="10">
<li>Faster Computers</li>
</ol>
<ul>
<li>Implications for optimization</li>
<li>Implications for programming languages</li>
<li>Implications for development</li>
</ul>
<h2 id="Ten-Realities-of-Modern-Software-Construction"><a class="header-anchor" href="#Ten-Realities-of-Modern-Software-Construction"></a>Ten Realities of Modern Software Construction</h2>
<ol>
<li>“Construction” is a Legitimate Topic</li>
<li>Individual Variation Is Significant</li>
<li>Personal Discipline Matters</li>
</ol>
<ul>
<li>Why Personal Discipline Matters
<ul>
<li>Being realistic about predicting the future</li>
<li>Areas where discipline matters
<ul>
<li>Refactoring</li>
<li>Prototyping</li>
<li>Optimization</li>
<li>Minimal-complexity designs specifically</li>
<li>Managing complexity generally</li>
</ul>
</li>
<li>Endpoints—Discipline and Courage
<ul>
<li>Humphrey on PSP</li>
<li>Beck on Extreme Programming</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li>A Focus on Simplicity Works Better than a Focus on Complexity
<ul>
<li><strong>Focus on read-time convenience, not write-time convenience</strong></li>
</ul>
</li>
<li>Defect-Cost Increase is Alive and Well</li>
<li>Importance of Design</li>
<li>Technology Waves Affect Construction Practices</li>
<li>Incremental Approaches Work Best</li>
</ol>
<ul>
<li>Perspective on Incrementalism
<ul>
<li>The pure waterfall model is not at all incremental or iterative—which is why it hasn’t worked very well</li>
<li>Spiral development is highly incremental and iterative, which is part of why it does work well</li>
<li>All projects will experience iteration at some point</li>
<li>Think about where and when in your project you will get your incrementalism—cheaply, or expensively?</li>
</ul>
</li>
</ul>
<ol>
<li>The Toolbox Metaphor Continues to be Illuminating</li>
<li>Software’s Essential Tensions</li>
</ol>
<h2 id="Some-of-the-Worst-Construction-Ideas-of-1990s-and-2000s"><a class="header-anchor" href="#Some-of-the-Worst-Construction-Ideas-of-1990s-and-2000s"></a>Some of the Worst Construction Ideas of 1990s and 2000s</h2>
]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
      <tags>
        <tag>Software Engineering Methodology</tag>
      </tags>
  </entry>
  <entry>
    <title>Software Development Procedure Model</title>
    <url>/2021/06/28/Software%20Development%20Procedure%20Model/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>软件开发的典型阶段</li>
<li>软件生命周期模型</li>
<li>软件过程模型</li>
<li>构建--修复模型</li>
<li>瀑布模型</li>
<li>增量迭代模型</li>
<li>演化模型</li>
<li>原型模型</li>
<li>螺旋模型</li>
</ul>
<span id="more"></span>
<h1 id="软件开发的典型阶段"><a class="header-anchor" href="#软件开发的典型阶段"></a>软件开发的典型阶段</h1>
<ol>
<li>需求工程</li>
<li>软件设计</li>
<li>软件构造</li>
<li>软件测试</li>
<li>软件交互</li>
<li>软件维护</li>
</ol>
<h1 id="软件生命周期模型"><a class="header-anchor" href="#软件生命周期模型"></a>软件生命周期模型</h1>
<ul>
<li>为了从宏观上描述软件开发活动, 人们将<strong>软件从生产到报废的生命周期</strong>分割为不同阶段, 每个阶段有明确的典型输入/ 输出, 主要活动和执行人, 各个阶段形成明确, 连续的顺序过程, 这些阶段划分就被叫做<code>软件生命周期模型</code></li>
</ul>
<ol>
<li>需求工程</li>
<li>软件设计</li>
<li>软件构造</li>
<li>软件测试</li>
<li>软件交互</li>
<li>软件维护</li>
</ol>
<h1 id="软件过程模型"><a class="header-anchor" href="#软件过程模型"></a>软件过程模型</h1>
<h1 id="构建-修复模型"><a class="header-anchor" href="#构建-修复模型"></a>构建--修复模型</h1>
<h1 id="瀑布模型"><a class="header-anchor" href="#瀑布模型"></a>瀑布模型</h1>
<h1 id="增量迭代模型"><a class="header-anchor" href="#增量迭代模型"></a>增量迭代模型</h1>
<h1 id="演化模型"><a class="header-anchor" href="#演化模型"></a>演化模型</h1>
<ul>
<li>
<p>将软件开发活动组织为<strong>多个迭代, 并行的瀑布式开发</strong>活动</p>
</li>
<li>
<p>优点:</p>
<ul>
<li>
<p>采用迭代式开发, 具有更好的适用性</p>
</li>
<li>
<p>并行开发可以帮助缩短开发时间</p>
</li>
<li>
<p>渐进交付可以加强用户反馈, 降低开发风险</p>
</li>
</ul>
</li>
<li>
<p>缺点:</p>
<ul>
<li>无法在项目早期阶段确定项目范围</li>
<li>后续迭代的开发活动是在前导迭代基础上进行修改和扩展的, 这容易让后续迭代忽略分析与设计工作, 蜕变为构建--修复方式</li>
</ul>
</li>
</ul>
<h1 id="原型模型"><a class="header-anchor" href="#原型模型"></a>原型模型</h1>
<h1 id="螺旋模型"><a class="header-anchor" href="#螺旋模型"></a>螺旋模型</h1>
]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
      <tags>
        <tag>Software Engineering Methodology</tag>
      </tags>
  </entry>
  <entry>
    <title>Security in Internet</title>
    <url>/2022/08/28/Security-in-Internet/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Intro</li>
<li>Transport Layer:  TLS</li>
<li>Network-Layer: IPsec and VPN</li>
<li>Application Layer: Securing E-Mail</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<p>先指出一些误解:</p>
<ul>
<li>“只要在低层, 比如IP层, 提供安全协议, IP层及以上的层就都安全了.” 这是错误的, 因为IP报文的内容安全, 不意味着应用层数据安全. 其他层也是同理.</li>
<li>&quot;在高层实现安全后, 底层可以不用实现安全&quot;: 这显然是错的. 最简单的例子, 应用层程序只能改变报文内容, 不能改变报文头, 而很多攻击就是针对报文头的. 因此低层协议也有必要实现安全.</li>
</ul>
<p>因此, 需要在计算机网络的每一层都采取措施, 使得该层的通信安全.</p>
<h2 id="Assumptions"><a class="header-anchor" href="#Assumptions"></a>Assumptions</h2>
<p>本文和<a href="https://lyk-love.cn/2022/08/28/Network-Security/#more">Network Security</a> 一样, 以Bob, Alice 和 Trudy 的三角恋为例</p>
<h1 id="Transport-Layer-TLS"><a class="header-anchor" href="#Transport-Layer-TLS"></a>Transport Layer:  TLS</h1>
<ul>
<li>
<p>运输层的安全协议是TLS( Transport Layer Security ), 它的更早期版本是SSL( Secure Socket Layer ) version3.</p>
<ul>
<li>我们有时候也用SSL指代TLS.</li>
</ul>
</li>
<li>
<p>SSL( or TLS )位于网络层和运输层之间, 对<strong>TCP</strong>做了增强. 在开发者角度, SSL属于传输层.</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Security%20in%20Internet/TLS.png" alt="TLS"></p>
<ul>
<li>在发送方，SSL从SSL套接字接收应用层的数据( 如HTTP或IMAP报文 ), 对数据进行加密，然后把加密的数据送往TCP套接字; 在接收方，SSL从TCP套接字读取数据, 解密后, 通过SSL套接字把数据交给应用层.</li>
<li>如果HTTP用了TLS, 则域名的协议名会变成<code>https</code></li>
<li>SSL并非仅用于HTTP, 而是可用于任何应用层的协议. 例如，SSL也可用于IMAP邮件存取的鉴别和数据加密.</li>
<li>TCP的HTTPS端口号是443，而不是平时使用的端口号80</li>
</ul>
</li>
<li>
<p>SSL提供的安全服务可归纳为以下三种：</p>
<ol>
<li>加密</li>
<li>报文完整性</li>
<li>鉴别, 包括报文鉴别, 实体鉴别, 以及允许SSL client查看server的CA.
<ul>
<li>当然SSL server也可以查看客户的CA, 这是可选的.</li>
</ul>
</li>
</ol>
</li>
</ul>
<h2 id="TLS-Connection-Setup"><a class="header-anchor" href="#TLS-Connection-Setup"></a>TLS Connection Setup</h2>
<p>TLS协议有三个阶段: <em>handshake</em>, <em>key derivation</em>, and <em>data transfer</em>.</p>
<h3 id="Handshake"><a class="header-anchor" href="#Handshake"></a>Handshake</h3>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Security%20in%20Internet/TLS%20Handshake.png" alt="TLS Handshake"></p>
<ol>
<li>
<p>Bob和Alice建立TCP连接.</p>
<ul>
<li>TCP连接建立后, Bob和Alice就开始正式的TLS连接建立, 它们的数据传输单元就变成了TLS <strong>Record</strong></li>
</ul>
</li>
<li>
<p>Bob向Alice发一个message( TLS hello ). Alice将以下内容发送给Bob:</p>
<ul>
<li>可供选择的非对称加密算法( 例如, RSA with a specific key length ), 用于后续EMS的加解密</li>
<li>可供选择的HMAC算法( 例如SHA-3或MD6 ), 用于后续的HMAC计算</li>
</ul>
</li>
</ol>
<ul>
<li>
<p>一个nounce, 相当于TCP里的<code>seq</code>. 使用nounce可以避免message reordering等问题, 还可以避免重放攻击.</p>
<ul>
<li>后面通信中的报文都会带有nounce, 为了叙述方便我就省略了.</li>
<li>Alice自己的证书, 其中包含了自己的公钥
<ul>
<li>由于证书由CA颁发, Alice于是就证明了自己确实是Alice</li>
</ul>
</li>
</ul>
<p>这一步完成了算法协商, 以及Alice的实体鉴别.</p>
</li>
</ul>
<ol start="3">
<li>Bob生成一个Master Secret (MS) (which will only be used for this TLS session), 用Alice的公钥加密成为Encrypted Master Secret (EMS), 然后发给Alice. Alice会用私钥解密EMS, 得到MS.</li>
</ol>
<p>Handshake结束后, Bob和Alice都知道MS了.</p>
<h3 id="Key-Derivation"><a class="header-anchor" href="#Key-Derivation"></a>Key Derivation</h3>
<p>你可能会认为Bob和Alice将把MS作为对称加密的密钥. 然而TLS做得更加复杂. MS被用来生成以下四个密钥:</p>
<ul>
<li>$\mathrm{E_B}$ = session encryption key for data sent from Bob to Alice</li>
<li>$\mathrm{M_B}$ = session HMAC key for data sent from Bob to Alice, where HMAC [RFC 2104] is a standardized hashed message authentication code (MAC) that we encountered in section 8.3.2</li>
<li>$\mathrm{E_A}$= session encryption key for data sent from Alice to Bob</li>
<li>$\mathrm{M_A}$ = session HMAC key for data sent from Alice to Bob</li>
</ul>
<p>Bob和Alice各自用自己的MS生成这四个密钥, 由于两人的MS相同, 生成的密钥也是一样的. 这四个密钥中, 两个用于数据加密, 两个用于HMAC.</p>
<ul>
<li>根据MS生成四个密钥的步骤比较复杂, 这里不详细介绍了.</li>
</ul>
<h3 id="Data-Transfer"><a class="header-anchor" href="#Data-Transfer"></a>Data Transfer</h3>
<p>数据传输过程依然采用TLS record作为数据传输单元</p>
<ol>
<li>Bob在要传输的DATA后添加HMAC
<ul>
<li>HMAC根据DATA, 使用密钥 $\mathrm{M_B}$ 生成</li>
</ul>
</li>
<li>Bob将DATA + HMAC一起用密钥  $\mathrm{E_B}$  加密, 发给Alice
<ul>
<li>注意, 我们之前学的采用MAC的实体鉴别<u>只会对MAC加密</u>. 但这里把DATA + MAC一起加密了.</li>
</ul>
</li>
<li>Alice收到后, 用 $\mathrm{E_A}$ 解密DATA + HMAC, 再用 $\mathrm{M_A}$ 检查HMAC, 进行报文鉴别和报文完整性检查. 后续Alice向Bob的通信也同理.</li>
</ol>
<p>TLS breaks the data stream into records, appends an HMAC to each record for integrity checking, and then encrypts the record + HMAC. To create the HMAC, Bob inputs the record data along with the key MB into a hash function, as discussed in Section 8.3. To encrypt the package record + HMAC, Bob uses his session encryption key EB.</p>
<h2 id="TLS-Connection-Closure"><a class="header-anchor" href="#TLS-Connection-Closure"></a>TLS Connection Closure</h2>
<ul>
<li><em>truncation attack</em>: 错误的想法是, Bob和Alice只断开TCP连接就可以断开TLS连接. 问题在于<strong>TCP是不安全的</strong>, Trudy可以伪造一个Bob发送的TCP FIN报文给Alice, 这样Bob和Alice就无法通信了. 这种攻击称为truncation attack.
<ul>
<li>因此, TLS也有自己的连接释放报文. 使用TLS时先释放TLS连接, 再释放TCP连接.</li>
</ul>
</li>
</ul>
<h2 id="TLS-Record"><a class="header-anchor" href="#TLS-Record"></a>TLS Record</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Security%20in%20Internet/TLS%20Record.png" alt="TLS Record"></p>
<ul>
<li>Type: 表明该Record是TLS Handshake报文, TLS Data Tranfer报文 还是 TLS连接释放报文</li>
</ul>
<h1 id="Network-Layer-IPsec-and-VPN"><a class="header-anchor" href="#Network-Layer-IPsec-and-VPN"></a>Network-Layer: IPsec and VPN</h1>
<p>虚拟专用网VPN时中传送的信息都经过IPsec加密.</p>
<p>IPsec并不是一个单一协议, 而是能够在IP层提供互联网通信安全的<u>协议族</u> （不太严格的名词“IPsec协议”也常见到）.IPsec并没有限定用户必须使用何种特定的加密和鉴别算法。实际上，IPsec是个框架，它允许通信双方选择合适的算法和参数.</p>
<p>为保证互操作性，IPsec还包含了一套加密算法，所有IPsec的实现都必须使用。</p>
<p>IPsec协议族中的协议分为以下三部分：</p>
<ol>
<li>IP安全数据报格式的两个协议：鉴别首部AH （Authentication Header）协议 和 封装安全有效载荷ESP （Encapsulation Security Payload）协议.
<ul>
<li>使用ESP或AH协议的IP数据报称为IPsec datagram</li>
</ul>
</li>
<li>有关加密算法的三个协议( 在此不讨论 )</li>
<li>互联网密钥交换 IKE（Internet Key Exchange）协议</li>
</ol>
<h2 id="AH-and-ESP"><a class="header-anchor" href="#AH-and-ESP"></a>AH and ESP</h2>
<p>In the IPsec protocol suite, there are two principal protocols: the <strong>Authentication Header (AH)</strong> protocol and the <strong>Encapsulation Security Payload (ESP)</strong> protocol.</p>
<p>AH协议提供源点鉴别和数据完整性，但不能保密。而ESP比AH协议复杂得多，它提供源点鉴别、数据完整性和保密。IPsec支持IPv4和IPv6。在IPv6中，AH和ESP都是扩展首部的一部分。AH协议的功能都已包含在ESP中，因此使用ESP就可以不使用AH协议。下面我们将不再讨论AH协议，而只介绍ESP.</p>
<h2 id="Security-Associations"><a class="header-anchor" href="#Security-Associations"></a>Security Associations</h2>
<ul>
<li>安全关联SA （Security Association ): 在源实体和目的实体之间创建的网络层的逻辑连接. 因为网络层不一定是有连接的( UDP就是无连接的 ), IPsec需要SA来确保连接建立.
<ul>
<li>为了节约资源, SA是<strong>单向连接</strong></li>
</ul>
</li>
<li>安全关联数据库 SAD（Security Association Database）: 一个 IPsec entity 把它的所有SA都存在SAD里. 当它要发送 IPsec数据报时, 就在SAD中查找相应的SA.
<ul>
<li>SAD在OS kernel中</li>
</ul>
</li>
<li>安全策略数据库 SPD ( Security Policy Database ) : 一个主机需要判断哪些数据包要进行IPsec处理处理.  为此它需要维护一个SPD, 指明过滤规则. 这取决于源地址、源端口、目的地址、目的端口，以及协议的类型等.
<ul>
<li>一个路由器可以同时转发很多分组, 它会通过查找SPD来决定哪些分组需要IPsec</li>
</ul>
</li>
<li>SA的内容包括:
<ul>
<li>A 32-bit identifier for the SA, called the <strong>Security Parameter Index (SPI, 安全参数索引)</strong></li>
<li>安全关联SA的源点和终点的IP地址（即路由器R 1 和R 2 的IP地址, 在这里就是200.168.1.100 和 193.68.2.23</li>
<li>The type of encryption to be used (for example, 3DES with CBC)</li>
<li>The encryption key</li>
<li>报文完整性和鉴别的类型 ( for example, HMAC with SHA-3 )</li>
<li>The authentication key</li>
</ul>
</li>
</ul>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<p>假设公司总部和分公司各有路由器 R1 和 R2 (通常就是公司总部和分公司的防火墙中的路由器 ), R1和R2建立SA.</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Security%20in%20Internet/SA%20Example.png" alt="SA Example"></p>
<p>现假定公司总部的主机H1 要和分公司的主机H2 通过互联网进行安全通信:</p>
<ol>
<li>H1 发送给 H2 的IP datagram, 必须先经过R1, 然后经IPsec的加密处理后，成为IPsec datagram. 其首部目的地址是R2</li>
<li>IPIPsec datagram 经过互联网中很多路由器的转发, 最后到达R2</li>
<li>R2对IPsec datagram解密, 还原出原始的IP datagram, 原始IP datagram的首部目的地址是H2</li>
<li>R2把IP datagram发到H2</li>
</ol>
<ul>
<li>如果总部的主机H1 要和总部的另一台主机H3 通信, 由于都在公司内部, 不需要加密( 不使用IPsec), 因此不需要建立SA</li>
<li>从逻辑上看，IPsec datagram在SA上传送, 就好像通过一个安全的隧道. 这就是&quot;tunnel mode&quot;.</li>
</ul>
<h2 id="IPsec-Datagram"><a class="header-anchor" href="#IPsec-Datagram"></a>IPsec Datagram</h2>
<ul>
<li>
<p>IPsec has two different packet forms:</p>
<ul>
<li><strong>tunnel mode</strong> : 在原始的IP数据报的前后分别添加若干控制信息，再加上新的IP首部，构成一个IP安全数据报</li>
<li><strong>transport mode</strong>. 在整个<u>运输层</u>报文段的前后分别添加若干控制信息，再加上IP首部，构成IP安全数据报
<ul>
<li>我们<strong>只讨论 tunnel model</strong>, 因为VPN中广泛使用tunnel mode</li>
</ul>
</li>
</ul>
</li>
<li>
<p>无论使用哪种方式，最后得到的IPsec datagram的IP header都是<strong>不加密</strong>的, 否则互联网上的路由器就没法识别IP首部并进行转发了.</p>
</li>
<li>
<p>通常把IP datagram的数据部分称为datagram的payload.</p>
<ul>
<li>ESP IPsec datagramd的数据部分就是IP datagram. 因此ESP payload就是IP datagram.</li>
</ul>
</li>
</ul>
<hr>
<p>我们假设公司总部的H1( 172.16.1.17 ) 向R1发送了IPv4 datagram, 目的地是公司分部的H2( 172.16.2.48 ). H1, H2不在同一个局域网, 二者通过VPN相连( 也就需要IPsec ). R1将 IPv4 datagram作为Payload, 转化成IPsec datagram:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Security%20in%20Internet/IPsec%20Datagram.png" alt="IPsec Datagram"></p>
<ul>
<li>Appends to the back of the original IPv4 datagram (which includes the original header fields!) an “ESP trailer” field
<ul>
<li>the ESP trailer consists of three fields:
<ol>
<li>padding: 用全0填充.</li>
<li>pad length: 指出padding的字节数.
<ul>
<li>padding的目的是便于Block Cypher进行加密计算. 参见 <em><a href="https://lyk-love.cn/2022/08/28/Network-Security/#more">Network Security</a> -&gt; Confidentiality -&gt; Symmetric Key System -&gt; Block Cipher</em></li>
</ul>
</li>
<li>next header: 指ESP payload的协议类型.
<ul>
<li>这里是tunnel mode, 因此ESP payload就是original IPv4 datagram, 它是IP协议.</li>
<li>如果是transport mode, 那么ESP payload就是传输层报文段( TCP, UDP segment ), 它是传输层协议</li>
</ul>
</li>
</ol>
</li>
<li>The next header identifies the type (e.g., UDP) of data contained in the payload-data field. The payload data (typically the original IP datagram) and the ESP trailer are concatenated and then encrypted.</li>
</ul>
</li>
<li><strong>Encrypts the result( ESP payload + ESP tailer )</strong> using the algorithm and key specified by the SA</li>
<li>Appends to the front of this encrypted quantity a field called “ESP header”; the resulting package is called the “enchilada”
<ul>
<li>ESP header 不加密, 它包括两个field:
<ul>
<li>安全参数索引SPI: 用于标识一个SA. SPI可以作为SAD和SPD中的键.</li>
<li>sequence number: 作用和TCP序号类似, 用于避免重放攻击</li>
</ul>
</li>
</ul>
</li>
<li><u>Creates an authentication MAC over the <em>whole enchilada</em></u> using the algorithm and key specified in the SA</li>
<li>Appends the MAC to the back of the enchilada forming the <em>payload</em></li>
<li>生成新的IP首部, 它和普通的IP数据报的首部的格式一样( normally 20 bytes long). 首部中的协议字段值是50, 表明这其实是个IPsec datagram using the ESP protocol.
<ul>
<li>最后生成的IPsec datagram在在格式上属于IP datagram, 但它的payload包括了: ESP header, 原始的IPsec datagram, ESP tailer, ESP MAC.</li>
</ul>
</li>
</ul>
<p>R2收到该datagram后, 查看其首部的协议字段号, 发现是50, 就把它作为IPsec datagram using the ESP protocol 处理:</p>
<ol>
<li>查看enchilada, 根据SPI来确定该报文属于哪条SA.</li>
<li>重新根据enchilada计算MAC, 然后和报文中的ESP MAC比对, 验证报文完整性且进行报文鉴别.</li>
<li>检查sequence-number field来确保这不是一个重放的报文.</li>
<li>根据SA中的信息( 该SA使用的加解密算法, 使用的Key )将加密部分( original IP datagram + ESPtailer )解密.</li>
<li>去掉padding, 得到original IP datagram.</li>
<li>对该original IP datagram进行转发.</li>
</ol>
<p>注意到, 如果IPsec datagram被人截获, 则:</p>
<ol>
<li>截获者无法对其解密, 也就无法知道original IP datagram的内容.</li>
<li>由于IPsec datagram使用了MAC, 截获者无法篡改IPsec datagram的内容.</li>
<li>由于IPsec datagram使用了sequence-number, 因此截获者无法进行重放攻击.</li>
</ol>
<h2 id="IKE"><a class="header-anchor" href="#IKE"></a>IKE</h2>
<ul>
<li>互联网密钥交换 IKE（Internet Key Exchange）协议: an automated mechanism for creating the SAs
<ul>
<li>IKE非常复杂</li>
</ul>
</li>
</ul>
<h1 id="Application-Layer-Securing-E-Mail"><a class="header-anchor" href="#Application-Layer-Securing-E-Mail"></a>Application Layer: Securing E-Mail</h1>
<p>我们以E-Mail为例介绍应用层安全的实现.</p>
<p>E-Mail安全要实现以下几点:</p>
<ol>
<li>内容加密</li>
<li>报文完整性检查</li>
<li>双向鉴别</li>
</ol>
<p>此外, 对于电子邮件, 双方要共享对称密钥比较困难, 因此一般用非对称加密.</p>
<p>Secure E-Mail的发送过程大概如下:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/Security%20in%20Internet/Securing%20E-Mail.png" alt="Securing E-Mail"></p>
<ol>
<li>首先, Alice使用HMAC计算明文m的报文摘要 $H(m)$ , 然后用自己的私钥$K_A^-$ 加密 $H(M)$ , 得到 $K_A^-(H(M))$. 把m和 $K_A^-(H(M))$ 连接在一起, 作为一个 preliminary package
<ul>
<li>这一步实现了<strong>发送方鉴别和报文完整性</strong>.  <u>如果Alice身份属实</u>, 那么后面Bob可以用Alice的公钥 $K_A^+$  来解密$K_A^-(H(M))$得到 $H(M)$ , 将其和自己根据m计算的 $H(M)$ 比对. 如果正确, 则既证明了 $K_A^+$  确实属于Alice( 发送方鉴别 ), 也证明了报文完整性.</li>
</ul>
</li>
<li>接着, Alice随机选择一个数作为session key $K_S$ , 用 $K_S$ 将 preliminary package 加密, 记为 $K_S(.)$ . 并且用Bob的公钥 $K_B^+$ 加密 $K_S$ . 记为 $K_B(K_s)$ . 将二者连接在一起, 发给Bob.
<ul>
<li>这一步实现了<strong>接收方鉴别和报文加密</strong>. <u>如果Bob身份属实</u>, 那么Bob应该可以用自己的私钥 $K_B^-$  解密得到 session key  $K_S$  , 再用  $K_S$ 解密得到preliminary package . 再进行步骤一所述的验证, 如果正确, 则既证明了  $K_B^+$ 确实属于Bob( 接收方鉴别 ), 又使用 $K_S$ 实现了报文加密.</li>
</ul>
</li>
</ol>
<p>上述过程使用了非对称加密, 对于E-Mail使用者, 可以自己生成公钥, 把它放在个人主页上. 当然也可以去CA注册得到证书, 对方要获得自己的公钥可以去CA查.</p>
<p>目前常用的Secure E-Mail实现是<a href="https://lyk-love.cn/2022/02/10/GPG/">GPG</a>(  GPG是GNU的开源软件, 参考自功能相同的商业软件PGP ), 它的逻辑和上面所述的差不多.</p>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Computer Networking</tag>
        <tag>Network Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Software Requirement Basic</title>
    <url>/2021/06/28/Software%20Requirement%20Basic/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>需求⼯程</li>
<li>需求基础</li>
<li>需求分类</li>
</ul>
<span id="more"></span>
<h1 id="需求⼯程"><a class="header-anchor" href="#需求⼯程"></a>需求⼯程</h1>
<ul>
<li>
<p>单纯的软件系统是不能解决问题的，它只有 和现实世界之间形成有效互动才能实现问题 的解决</p>
</li>
<li>
<p>需求工程的概念：</p>
<ul>
<li>所有需求处理活动的总和。它<strong>收集</strong>信息、<strong>分析</strong>问题、<strong>整合</strong>观点、<strong>记录</strong>需求并<strong>验证</strong>其正确性，最终描述出软件被应⽤后与其环境互动形成的期望效应。</li>
</ul>
</li>
<li>
<p>三个主要任务：</p>
<ul>
<li>需求⼯程必须说明软件系统将被应⽤的应⽤环境及其<strong>⽬标</strong>，说明⽤来达成这些⽬标的软件功能，也即要同时说明软件需要“<strong>做什么</strong>”和“<strong>为什么</strong>”需要做。</li>
<li>需求⼯程必须将⽬标和功能反映到软件系统当中，映射为<strong>可⾏的软件⾏为</strong>，并对软件⾏为进⾏准确的<strong>规格说明</strong>。<br>
• 现实世界是<strong>不断变化</strong>的世界，因此需求⼯程还需要妥善处理⽬标和功能随着时间演化的变动情况。</li>
</ul>
</li>
</ul>
<h2 id="需求开发"><a class="header-anchor" href="#需求开发"></a>需求开发</h2>
<h3 id="需求获取"><a class="header-anchor" href="#需求获取"></a>需求获取</h3>
<ul>
<li>从⼈、⽂档或者环境当中获取需求的过程</li>
<li>要利⽤各种⽅法和技术来“<u>发现</u>”需求</li>
<li>⽬标分析
<ol>
<li>根据<strong>问题</strong>确定⽬标</li>
<li>通过分析<strong>利害关系⼈</strong>确定⽬标</li>
</ol>
</li>
</ul>
<h4 id="需求获取的常⻅困难"><a class="header-anchor" href="#需求获取的常⻅困难"></a>需求获取的常⻅困难</h4>
<ul>
<li>⽤户和开发⼈员的背景不同，⽴场不同
<ul>
<li>“床边B超,肝胆胰脾”</li>
</ul>
</li>
<li>普通⽤户缺乏概括性、综合性的表述能⼒
<ul>
<li>不聪明的记者</li>
</ul>
</li>
<li>⽤户存在认知困境
<ul>
<li>平板电脑</li>
</ul>
</li>
<li>⽤户越俎代庖
<ul>
<li>双机热备</li>
<li>我们就是要求系统能够。。。，⾄于怎么实现是你开发者的事</li>
</ul>
</li>
<li>缺乏⽤户参与
<ul>
<li>不愿参与的医⽣</li>
</ul>
</li>
</ul>
<h4 id="⽤户需求获取的⽅法"><a class="header-anchor" href="#⽤户需求获取的⽅法"></a>⽤户需求获取的⽅法</h4>
<ul>
<li>⾯谈</li>
<li>问卷</li>
<li>⽂档分析</li>
<li>头脑⻛暴</li>
<li>专题讨论</li>
<li>原型</li>
</ul>
<h3 id="需求分析"><a class="header-anchor" href="#需求分析"></a>需求分析</h3>
<ul>
<li>
<p>通过<strong>建模</strong>来整合各种信息，以使得⼈们更好的理解问题。</p>
</li>
<li>
<p>为问题定义出⼀个需求集合，这个集合能够为问题界定⼀个有效的<strong>解决⽅案</strong>。</p>
</li>
<li>
<p><strong>检查</strong>需求当中存在的错误、遗漏、不⼀致等各种缺陷，并加以修正。</p>
</li>
<li>
<p>⼀、边界分析</p>
<ul>
<li>定义项⽬的范围</li>
<li>系统边界的定义要保证系统能够和周围环境形成有效的互动</li>
<li>系统⽤例图和上下文图通常被⽤来定义系统的边界</li>
</ul>
</li>
<li>
<p>⼆、需求建模</p>
<ul>
<li>建模是为展现和解释信息⽽进⾏的抽象描述活动</li>
<li>常⽤的技术包括类图、顺序图、状态图等建模技术</li>
</ul>
</li>
</ul>
<h3 id="需求规格说明"><a class="header-anchor" href="#需求规格说明"></a>需求规格说明</h3>
<ul>
<li>在系统⽤户之间交流需求信息</li>
<li>要<strong>简洁、精确、⼀致和易于理解</strong></li>
<li>需求⼯程师在这个阶段的重要⼯作包括:
<ul>
<li>⼀、定制⽂档模版</li>
<li>⼆、编写⽂档</li>
</ul>
</li>
</ul>
<h3 id="需求验证"><a class="header-anchor" href="#需求验证"></a>需求验证</h3>
<ul>
<li>需求规格说明⽂档⾄少要满⾜下面⼏个标准：
<ul>
<li>⽂档内每条需求都正确、准确的反映了⽤户的<strong>意图</strong>；</li>
<li>⽂档记录的需求集在整体上具有<strong>完整性和⼀致性</strong>；</li>
<li>⽂档的组织⽅式和需求的书写⽅式具有可读性和可修改性</li>
</ul>
</li>
<li>验证的⽅法
<ul>
<li>同级评审</li>
<li>原型</li>
<li>模拟</li>
</ul>
</li>
</ul>
<h2 id="需求管理"><a class="header-anchor" href="#需求管理"></a>需求管理</h2>
<ul>
<li>保证需求作⽤的持续、稳定和有效发挥
<ul>
<li>在需求开发活动之后，设计、测试、实现等后续的软件系统开发活动都需要围绕需求开展⼯作</li>
</ul>
</li>
<li>进⾏变更控制
<ul>
<li>纳⼊和实现合理的变更请求，拒绝不合理的变更请求，控制变更的成本和 影响范围</li>
</ul>
</li>
</ul>
<h1 id="需求基础"><a class="header-anchor" href="#需求基础"></a>需求基础</h1>
<h2 id="需求"><a class="header-anchor" href="#需求"></a>需求</h2>
<ul>
<li>
<p>IEEE对需求的定义为<code>[IEEE610.12-1990]</code>：</p>
<ol>
<li><strong>⽤户</strong>为了解决问题或达到某些⽬标所需要的条件或能⼒；</li>
<li><strong>系统</strong>或系统部件为了满⾜合同、标准、规范或其它正式⽂档所规定的要求⽽需要具备的条件或能⼒；</li>
<li>对⑴或⑵中的⼀个条件或⼀种能⼒的⼀种⽂档化表述。</li>
</ol>
</li>
<li>
<p>需求的表述</p>
<ul>
<li>作为⼀种<strong>期望</strong>，需求通常被表述为“<strong>系统应该…</strong>”、“在…时，系统应该…”、 “⽤户可以通过系统…”等，例如R1。</li>
<li>R1：系统应该允许顾客退回已经购买的产品。</li>
</ul>
</li>
</ul>
<h2 id="需求的层次性"><a class="header-anchor" href="#需求的层次性"></a>需求的层次性</h2>
<h3 id="业务需求"><a class="header-anchor" href="#业务需求"></a>业务需求</h3>
<ul>
<li>
<p>系统建⽴的战略出发点，表现为⾼层次的⽬标（Objective），它描述了组织 为什么要开发系统</p>
</li>
<li>
<p>为了满⾜⽤户的业务需求，需求⼯程师需要描述系统⾼层次的解决⽅案，定义<strong>系统应该具备的特性</strong>（Feature）</p>
</li>
<li>
<p>参与各⽅必须要对⾼层次的解决⽅案达成⼀致，以建⽴⼀个共同的前景 （Vision）</p>
</li>
<li>
<p>特性说明了系统为⽤户提供的各项功能，它限定了系统的范围（Scope）</p>
</li>
<li>
<p>案例</p>
<ul>
<li>R2：在系统使⽤3个⽉后，销售额度应该提⾼20%</li>
<li>可以建⽴⾼层次的解决⽅案，其<code>系统特性</code>如SF1～SF4所示。
<ul>
<li>SF1：管理VIP顾客信息。</li>
<li>SF2：提供VIP顾客服务，增加回头率。</li>
<li>SF3：使⽤多样化的特价⽅案，吸引顾客购买，增加销售额。</li>
<li>SF4：使⽤多样化的赠送⽅案，吸引顾客购买，增加销售额</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="⽤户需求"><a class="header-anchor" href="#⽤户需求"></a>⽤户需求</h3>
<ul>
<li>
<p>执⾏实际⼯作的⽤户对系统所<strong>能完成的具体任务的期望</strong>，描述了系统能够帮助⽤户做些什么</p>
<ul>
<li>直接⽤户</li>
<li>间接⽤户（通⽤软件的销售⼈员和售后⽀持⼈员）</li>
</ul>
</li>
<li>
<p>对所有的⽤户需求，都应该有<strong>充分的问题域知识</strong>作为背景⽀持</p>
</li>
<li>
<p>特性</p>
<ul>
<li>模糊、不清晰（允许适度的⽤形容词和副词）</li>
<li>多特性混杂 （功能和⾮功能的混杂） • 多逻辑混杂 （⼀个任务需要多次系统交互才能完成）</li>
<li>多逻辑混杂 （⼀个任务需要多次系统交互才能完成）</li>
</ul>
</li>
<li>
<p>案例</p>
<ul>
<li>SF1：管理VIP顾客信息</li>
<li>针对每⼀个系统特性，都可以建⽴⼀组⽤户需求。例如对SF1，可以建⽴⽤户需求组如UR1.1～UR1.7，它们中每⼀条都是⽤户完成具体任务所需要的功能：
<ul>
<li>UR1.1：系统应该允许客户经理添加、修改或者删除会员个⼈信息</li>
<li>UR1.2：系统应该记录会员的购买信息。</li>
<li>UR1.3：系统应该允许客户经理查看会员的个⼈信息和购买信息。</li>
<li>UR1.4：系统应该允许客户经理查看所有会员的统计信息</li>
</ul>
</li>
</ul>
</li>
<li>
<p>补充问题域知识</p>
<ul>
<li>⽤户需求表达了⽤户对系统的期望，但是要透彻和全⾯的了解⽤户的真正意 途，仅仅拥有期望是不够的，还需要知道期望所来源的背景知识。</li>
<li>因此，对所有的⽤户需求，都应该有充分的问题域知识作为背景⽀持</li>
<li><code>UR1.1</code>：系统应该允许客户经理添加、修改或者删除会员个⼈信息。</li>
<li>例如对<code>UR1.1</code>，需要补充问题域知识如下：
<ul>
<li>会员的个⼈信息有：客户编号、姓名、联系⽅式、积分</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="系统需求"><a class="header-anchor" href="#系统需求"></a>系统需求</h3>
<ul>
<li>⽤户对系统⾏为的期望，<strong>每个系统级需求反映了⼀次外界与系统的交互⾏为，或者系统的⼀个实现细节</strong></li>
<li>描述了开发⼈员需要实现什么</li>
<li>将⽤户需求转化为系统需求的过程是⼀个复杂的过程
<ul>
<li>⾸先需要分析问题领域及其特性，从中发现问题域和计算机系统的共享知识，建⽴系统的知 识模型；</li>
<li>然后将⽤户需求部署到系统模型当中，即定义系列的系统⾏为，让它们联合起来实现⽤户需求，每⼀个系统⾏为即为⼀个系统需求。</li>
<li>该过程就是需求⼯程当中最为重要的<strong>需求分析</strong>活动，⼜称建模与分析活动。</li>
</ul>
</li>
<li>案例
<ul>
<li>UR1.3：系统应该允许客户经理查看会员的个⼈信息和购买信息。</li>
<li>对⽤户需求UR1.3，可以依据任务中的交互细节将之转化为系统级需求SR1.3.1～ SR1.3.4。
<ul>
<li>SR1.3.1在接到客户经理的请求后，系统应该为客户经理提供所有会员的个⼈信息。</li>
<li>SR1.3.2在客户经理输⼊会员的客户编号时，系统要提供该会员的个⼈信息。</li>
<li>SR1.3.3在客户经理选定⼀个会员并申请查看购买信息时，系统要提供该会员的历史购 买记录。</li>
<li>SR1.3.4经理可以通过键盘输⼊客户编号，也可以通过读卡器输⼊客户编号。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="需求分类"><a class="header-anchor" href="#需求分类"></a>需求分类</h1>
<h2 id="需求谱系"><a class="header-anchor" href="#需求谱系"></a>需求谱系</h2>
<ul>
<li>
<p>需求</p>
<ul>
<li>项目需求</li>
<li>过程需求</li>
<li>系统需求
<ul>
<li><strong>软件需求</strong></li>
<li>硬件需求</li>
<li>其他需求</li>
</ul>
</li>
</ul>
</li>
<li>
<p>不切实际的期望</p>
</li>
<li>
<p><strong>软件需求</strong>的分类</p>
<ul>
<li>功能需求（Functional Requirement）：( 除此之外都是非功能需求 )
<ul>
<li>和系统主要⼯作相关的需求，即在不考虑物理约束的情况下，⽤户希望系统所能够执⾏的活动，这些活动可以帮助⽤户完成任务。功能需求主要表现为系统和环境之间的⾏为交互。</li>
</ul>
</li>
<li>性能需求（Performance Requirement）：
<ul>
<li>系统整体或系统组成部分应该拥有的性能特征，例如CPU使⽤率、内存使⽤率等。</li>
</ul>
</li>
<li>质量属性（Quality Attribute）：
<ul>
<li>系统完成⼯作的质量，即系统需要在⼀个“好的程度”上实现功能需求，例如可靠性程度、可维护性程度等。</li>
</ul>
</li>
<li>对外接⼝（External Interface）：
<ul>
<li>系统和环境中其他系统之间需要建⽴的接⼝，包括硬件接⼝、软件接⼝、数据库接⼝等等。</li>
</ul>
</li>
<li>约束 • 进⾏系统构造时需要遵守的约束，例如编程语⾔、硬件设施等</li>
</ul>
</li>
</ul>
<h2 id="功能需求"><a class="header-anchor" href="#功能需求"></a>功能需求</h2>
<ul>
<li>
<p>最常⻅、最主要和最重要的需求</p>
</li>
<li>
<p>能够为⽤户带来业务价值的系统⾏为</p>
</li>
<li>
<p>最需要按照三个抽象层次进⾏展开</p>
</li>
<li>
<p>软件产品产⽣价值的基础</p>
</li>
<li>
<p><strong>需求的灵活性</strong></p>
<ul>
<li>PR6：98％的查询不能超过10秒。</li>
<li>PR7：
<ul>
<li>（最低标准）在200个⽤户并发时，系统不能崩溃；</li>
<li>（⼀般标准）在200个⽤户并发时，系统应该在80％的时间内能正常⼯作；</li>
<li>（理想标准）在200个⽤户并发时，系统应该能保持正常的⼯作状态</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="非功能需求"><a class="header-anchor" href="#非功能需求"></a>非功能需求</h2>
<h3 id="性能需求"><a class="header-anchor" href="#性能需求"></a>性能需求</h3>
<ul>
<li>需要进⾏专⻔模拟和测试
<ul>
<li>速度（Speed），系统完成任务的时间，例如PR1。
<ul>
<li>PR1：所有的⽤户查询都必须在10秒内完成。</li>
</ul>
</li>
<li>容量（Capacity），系统所能存储的数据量，例如PR2。
<ul>
<li>PR2：系统应该能够存储⾄少100万个销售信息。</li>
</ul>
</li>
<li>吞吐量（Throughput），系统在连续的时间内完成的事务数量，例如PR3。
<ul>
<li>PR3：解释器每分钟应该⾄少解析5000条没有错误的语句。</li>
</ul>
</li>
<li>负载（Load），系统可以承载的并发⼯作量，例如PR4。
<ul>
<li>PR4：系统应该允许50个营业服务器同时从集中服务器上进⾏数据的上传或下载。</li>
</ul>
</li>
<li>实时性（Time-Critical），严格的实时要求，例如PR5。
<ul>
<li>PR5：监测到病⼈异常后，监控器必须在0.5秒内发出警报。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="质量属性"><a class="header-anchor" href="#质量属性"></a>质量属性</h3>
<ul>
<li>
<p>系统为了满⾜规定的及隐含的所有要求⽽需要具备的要素称为质量</p>
</li>
<li>
<p>质量属性是为了度量质量要素⽽选⽤的特征 • 质量模型就是能够为质量需求的描述和评价提供⼯作基础的特征集及特征之间的联系 • 质量属性的重要性 • 对设计的影响很⼤</p>
</li>
<li>
<p>对越复杂的系统越为重要</p>
</li>
<li>
<p><code>[Robert19901] </code>：真实的现实系统中，在决定系统的成功或失败的因素中，满⾜⾮功能属性往往比满⾜功能性需求更为重要。</p>
</li>
<li>
<p>常⻅质量属性</p>
<ul>
<li>
<p><strong>可靠性</strong>（Reliability）：在规格时间间隔内和规定条件下，系统或部件执⾏所要求能⼒的能⼒。</p>
<ul>
<li>QA1：在进⾏数据的下载和上传中，如果⽹络故障，系统不能出现故障。</li>
</ul>
</li>
<li>
<p><strong>可⽤性</strong>（Availability）：软件系统在投⼊使⽤时可操作和可访问的程度或能实现其指定系统功能的概率。</p>
<ul>
<li>QA2：系统的可⽤性要达到98%。</li>
</ul>
</li>
<li>
<p><strong>安全性</strong>（Security）：软件阻⽌对其程序和数据进⾏未授权访问的能⼒，未授权的访问可能是有意，也可能是⽆意的。</p>
<ul>
<li>
<p>QA3：VIP顾客只能查看⾃⼰的个⼈信息和购买记录；</p>
</li>
<li>
<p>收银员只能查看，不能修改、删除VIP顾客的信息。</p>
</li>
</ul>
</li>
<li>
<p>可维护性（Maintainability）：软件系统或部件能修改以排除故障、改进性能或其他属性或适应变更了的环 境的容易程度，包括可修改性（Modifiability）和可扩展性（Extensibility）。</p>
<ul>
<li>QA4：如果系统要增加新的特价类型，要能够在2个⼈⽉内完成。</li>
</ul>
</li>
<li>
<p>可移植性（Portability）：系统或部件能从⼀种硬件或软件环境转换⾄另外⼀种环境的特性。</p>
<ul>
<li>QA5：集中服务器要能够在1⼈⽉内从Window 7操作系统更换到Solaris 10操作系统。</li>
</ul>
</li>
<li>
<p>易⽤性（Usability）：与⽤户使⽤软件所花费的努⼒及其对使⽤的评价相关的特性。</p>
<ul>
<li>QA6：使⽤系统1个⽉的收银员进⾏销售处理的效率要达到10件商品/分钟。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>质量属性的开发</p>
<ul>
<li>⽤户并不能明确地提出他们对产品质量的期望
<ul>
<li>并不了解软件系统的开发过程，也就⽆从判断哪些质量属性会在怎样的程度上给设计带来多⼤ 的影响，也⽆法将他们对软件系统的质量要求细化成⼀组组的可量化的质量属性</li>
</ul>
</li>
<li>需求⼯程师
<ul>
<li><code>质量属性</code>⼤都是和<code>功能需求</code>联系在⼀起的，因此需要对照软件的质量属性检查每⼀项功能需 求，尽⼒去判断质量属性存在的可能性 • 形容词和副词通常意味着质量属性的存在</li>
<li>对于⼀些不和任何功能需求相联系的<strong>全局性质量属性</strong>，需求⼯程师要在碰到特定的实例时意识到它们的存在</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="对外接口"><a class="header-anchor" href="#对外接口"></a>对外接口</h3>
<ul>
<li>系统和环境中其他系统之间的软硬件接⼝, 包括<code>用户界面</code>, 硬件接口, 软件接口, 网络通信接口等.  对系统之间的软硬件接口和通信接口需要说明以下内容:
<ul>
<li>接⼝的⽤途</li>
<li>接⼝的输⼊输出</li>
<li>数据格式</li>
<li>命令格式</li>
<li>异常处理要求</li>
<li>⽤户界⾯</li>
</ul>
</li>
</ul>
<h3 id="约束"><a class="header-anchor" href="#约束"></a>约束</h3>
<ul>
<li>总体上限制了开发⼈员设计和构建系统时的选择范围
<ul>
<li>系统开发及运⾏的环境 • 包括⽬标机器、操作系统、⽹络环境、编程语⾔、数据库管理系统等
<ul>
<li>C1：系统要使⽤Java语⾔进⾏开发。</li>
</ul>
</li>
<li>问题域内的相关标准
<ul>
<li>包括法律法规、⾏业协定、企业规章等。</li>
</ul>
</li>
<li>商业规则
<ul>
<li>⽤户在任务执⾏中的⼀些潜在规则也会限制开发⼈员设计和构建系统的选择范围</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="数据需求"><a class="header-anchor" href="#数据需求"></a>数据需求</h3>
<ul>
<li>功能需求的补充
<ul>
<li>如果在功能需求部分明确定义了相关的数据结构，那么就不需要再⾏定义数据需求</li>
</ul>
</li>
<li>数据需求是需要在数据库、⽂件或者其他介质中存储的数据描述，通常包括下列内容：
<ul>
<li>各个功能使⽤的数据信息；</li>
<li>使⽤频率；</li>
<li>可访问性要求；</li>
<li>数据实体及其关系；</li>
<li>完整性约束；</li>
<li>数据保持要求。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
      <tags>
        <tag>Software Engineering Methodology</tag>
      </tags>
  </entry>
  <entry>
    <title>Software Requirement Analysis Method</title>
    <url>/2021/06/28/Software%20Reuqirement%20Analysis%20Method/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>需求分析基础</li>
<li>⾯向对象分析</li>
<li>结构化分析</li>
<li>使⽤需求分析⽅法细化和明确需求</li>
</ul>
<span id="more"></span>
<h1 id="需求分析基础"><a class="header-anchor" href="#需求分析基础"></a>需求分析基础</h1>
<h2 id="为什么要需求分析"><a class="header-anchor" href="#为什么要需求分析"></a>为什么要需求分析</h2>
<h2 id="需求分析模型"><a class="header-anchor" href="#需求分析模型"></a>需求分析模型</h2>
<h1 id="⾯向对象分析"><a class="header-anchor" href="#⾯向对象分析"></a>⾯向对象分析</h1>
<p>• ⽤例最初由[Jacobson1992] 在 Objectory ⽅法中提出的,它将⽤例定义为“<strong>在 系统(或者⼦系统或者类)和外部对象的交互当中所执⾏的⾏为序列的描述,包 括各种不同的序列和错误的序列,它们能够联合提供⼀种有价值的服 务</strong>”[Rumbaugh2004]。</p>
<h1 id="结构化分析"><a class="header-anchor" href="#结构化分析"></a>结构化分析</h1>
<h1 id="使⽤需求分析⽅法细化和明确需求"><a class="header-anchor" href="#使⽤需求分析⽅法细化和明确需求"></a>使⽤需求分析⽅法细化和明确需求</h1>
]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
      <tags>
        <tag>Software Engineering Methodology</tag>
      </tags>
  </entry>
  <entry>
    <title>Sort</title>
    <url>/2021/06/27/Sort/</url>
    <content><![CDATA[<p>Outline</p>
<ul>
<li>Elementary Sort</li>
<li>MergeSort</li>
<li>QuickSort</li>
<li>Priority Queues</li>
</ul>
<span id="more"></span>
<h2 id="快速排序"><a class="header-anchor" href="#快速排序"></a>快速排序</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="type">int</span> N&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(T(&amp;a)[N], <span class="type">int</span> lo, <span class="type">int</span> hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i = lo, j = hi + <span class="number">1</span>;</span><br><span class="line">	T v = a[lo];</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (a[++i] &lt; v)	<span class="keyword">if</span> (i == hi)	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">while</span> (a[--j] &gt; v)	<span class="keyword">if</span> (j == lo)	<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line">		<span class="built_in">exch</span>(a, i, j);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">exch</span>(a, lo, j);</span><br><span class="line">	<span class="keyword">return</span> j;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="type">int</span> N&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exch</span><span class="params">(T (&amp;a)[N], <span class="type">int</span> i , <span class="type">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	T tmp = a[i];</span><br><span class="line">	a[i] = a[j];</span><br><span class="line">	a[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="type">int</span> N&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(T(&amp;a)[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">sort</span>(a, <span class="number">0</span>, N - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="type">int</span> N&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sort</span><span class="params">(T ( &amp;a )[N], <span class="type">int</span> lo, <span class="type">int</span> hi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">	<span class="type">int</span> j = <span class="built_in">partition</span>(a, lo, hi);</span><br><span class="line">	<span class="built_in">sort</span>(a, lo, j - <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">sort</span>(a, j + <span class="number">1</span>, hi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot Intro</title>
    <url>/2022/04/14/Spring-Boot-Basic/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Spring Boot工程</li>
<li>常用配置</li>
<li>Spring Boot Features</li>
</ul>
<p>Spring Boot基于Spring提供了开箱即用的一组套件，可以简化spring开发，还提供了基于java的、面向REST的微服务框架</p>
<span id="more"></span>
<h1 id="Spring-Boot工程"><a class="header-anchor" href="#Spring-Boot工程"></a>Spring Boot工程</h1>
<p>Spring Boot工程目录结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">springboot-hello</span><br><span class="line">├── pom.xml</span><br><span class="line">├── src</span><br><span class="line">│   └── main</span><br><span class="line">│       ├── java</span><br><span class="line">│       └── resources</span><br><span class="line">│           ├── application.yml</span><br><span class="line">│           ├── logback-spring.xml</span><br><span class="line">│           ├── static</span><br><span class="line">│           └── templates</span><br><span class="line">└── target</span><br></pre></td></tr></table></figure>
<p>Spring Boot要求<code>main()</code>方法所在的启动类必须放到根package下，命名不做要求，这里我们以<code>Application.java</code>命名，它的内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动Spring Boot应用程序只需要加上注解<code>@SpringBootApplication</code>，该注解实际上又包含了：</p>
<ul>
<li>@SpringBootConfiguration
<ul>
<li>@Configuration</li>
</ul>
</li>
<li>@EnableAutoConfiguration
<ul>
<li>@AutoConfigurationPackage</li>
</ul>
</li>
<li>@ComponentScan</li>
</ul>
<p>这样一个注解就相当于启动了自动配置和自动扫描</p>
<h2 id="application-yml"><a class="header-anchor" href="#application-yml"></a>application.yml</h2>
<p>Spring Boot默认的配置文件是采用<a href="https://yaml.org/">YAML</a>格式的<code>application.yml</code> ,当然你也可以继续沿用spring的<code>application.properties</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;APP_NAME:unnamed&#125;</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:hsqldb:file:testdb</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">sa</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.hsqldb.jdbc.JDBCDriver</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">auto-commit:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">connection-timeout:</span> <span class="number">3000</span></span><br><span class="line">      <span class="attr">validation-timeout:</span> <span class="number">3000</span></span><br><span class="line">      <span class="attr">max-lifetime:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="配置的优先级"><a class="header-anchor" href="#配置的优先级"></a>配置的优先级</h3>
<p>和其他程序一样， 命令行手动指定的优先级最高。  对于配置文件而言，优先级取决于其所在位置，按优先级从高到低：</p>
<ol>
<li>外置,在相对于应用程序运行目录的/config子目录里。</li>
<li>外置,在应用程序运行的目录里。</li>
<li>内置,在config包内。</li>
<li>内置,在Classpath根目录</li>
</ol>
<p>同一目录下，<code>application.yml</code> &gt;  <code>application.properties</code></p>
<h3 id="环境变量"><a class="header-anchor" href="#环境变量"></a>环境变量</h3>
<p>在配置文件中，我们经常使用如下的格式对某个key进行配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">app:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">$&#123;DB_HOST:localhost&#125;</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">$&#123;DB_USER:root&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;DB_PASSWORD:password&#125;</span></span><br></pre></td></tr></table></figure>
<p>这种<code>$&#123;DB_HOST:localhost&#125;</code>意思是，首先从环境变量查找<code>DB_HOST</code>，如果环境变量定义了，那么使用环境变量的值，否则，使用默认值<code>localhost</code>。</p>
<p>这使得我们在开发和部署时更加方便，因为开发时无需设定任何环境变量，直接使用默认值即本地数据库，而实际线上运行的时候，只需要传入环境变量即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DB_HOST=10.0.1.123 DB_USER=prod DB_PASSWORD=xxxx java -jar xxx.jar</span><br></pre></td></tr></table></figure>
<h3 id="yaml文件格式"><a class="header-anchor" href="#yaml文件格式"></a>yaml文件格式</h3>
<ul>
<li>
<p>使用缩进表示层级关系，不允许使用Tab键，只允许使用空格</p>
</li>
<li>
<p><code>#</code> 表示注释，从这个字符一直到行尾，都会被解析器忽略。</p>
</li>
<li>
<p>对象，键值对，使用冒号结构表示</p>
</li>
<li>
<ul>
<li>animal: pets</li>
<li>hash: { name: Steve, foo: bar }</li>
</ul>
</li>
<li>
<p>数组,一组连词线开头的行，构成一个数组</p>
</li>
<li>
<ul>
<li>- Cat</li>
<li>- Dog</li>
<li>- Goldfish</li>
<li>行内表示法：animal: [Cat, Dog]</li>
</ul>
</li>
</ul>
<h1 id="常用配置"><a class="header-anchor" href="#常用配置"></a>常用配置</h1>
<ul>
<li>
<p>让服务器监听不同的端口：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">port: 8000</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用https：</p>
<ol>
<li>
<p>使用JDK的keytool工具来创建一个密钥存储(keystore)</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">keytool</span> <span class="string">-keystore</span> <span class="string">mykeys.jks</span> <span class="string">-genkey</span> <span class="string">-alias</span> <span class="string">tomcat</span> <span class="string">-keyalg</span> <span class="string">RSA</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>配置文件如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">	port: 8443</span><br><span class="line">	ssl:</span><br><span class="line">		key-store:file:///path/to/mykeys.jks</span><br><span class="line">		key-store-password: letmein</span><br><span class="line">		key-password: letmein</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>server.ssl.key-store 属性指向密钥存储文件的存放路径。这里用了一个file://开头的URL,<br>
从文件系统里加载该文件。你也可以把它打包在应用程序的JAR文件里,用classpath: URL来<br>
引用它。server.ssl.key-store-password和server.ssl.key-password设置为创建该文<br>
件时给定的密码。</p>
</li>
</ul>
<h2 id="配置单数据源"><a class="header-anchor" href="#配置单数据源"></a>配置单数据源</h2>
<p>数据源配置可以用Bean， 但更方便的做法是通过配置文件,以Mysql为例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">datasource:</span></span><br><span class="line">		<span class="attr">url:</span> <span class="string">jdbc:mysql://localhost/readinglist</span></span><br><span class="line">		<span class="attr">username:</span> <span class="string">dbuser</span></span><br><span class="line">		<span class="attr">password:</span> <span class="string">dbpass</span></span><br></pre></td></tr></table></figure>
<p>通常你都无需指定JDBC驱动,Spring Boot会根据数据库URL识别出需要的驱动,但如果识别出问题了,你还可以设置spring.datasource.driver-class-name属性:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">datasource:</span></span><br><span class="line">		<span class="attr">url:</span> <span class="string">jdbc:mysql://localhost/readinglist</span></span><br><span class="line">		<span class="attr">username:</span> <span class="string">dbuser</span></span><br><span class="line">		<span class="attr">password:</span> <span class="string">dbpass</span></span><br><span class="line">		<span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
<p>在自动配置 DataSource Bean的时候,Spring Boot会使用这里的连接数据。 DataSource<br>
Bean是一个连接池,如果Classpath里有Tomcat的连接池DataSource,那么就会使用这个连接池;<br>
否则,Spring Boot会在Classpath里查找以下连接池:</p>
<ul>
<li>HikariCP</li>
<li>Commons DBCP</li>
<li>Commons DBCP 2</li>
</ul>
<p>这里列出的只是自动配置支持的连接池,你还可以自己配置DataSource Bean,使用你喜欢的各种连接池</p>
<h2 id="配置多数据源"><a class="header-anchor" href="#配置多数据源"></a>配置多数据源</h2>
<p>配置多数据源和单数据源没什么区别，但是如果使用了Mybatis等ORM框架，记得要额外配置一下ORM的扫描规则。 大概步骤为：</p>
<ol>
<li>（如果需要的话）引入新数据库的驱动的依赖</li>
<li>在配置文件里面配置新的数据库连接</li>
<li>新增配置类，在里面配置ORM框架的扫描规则</li>
<li>（如果需要的话）使用新的连接池</li>
</ol>
<h3 id="引入数据库驱动依赖"><a class="header-anchor" href="#引入数据库驱动依赖"></a>引入数据库驱动依赖</h3>
<p>如果你新增的数据库数据源和目前的数据库不同，记得引入新数据库的驱动依赖，比如 MySQL 和 PGSQL。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span></span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.postgresql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>postgresql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>42.2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="配置数据库连接"><a class="header-anchor" href="#配置数据库连接"></a>配置数据库连接</h3>
<p>因为数据源要有一个默认使用的数据源，最好在名称上有所区分（这里使用 <strong>primary</strong> 作为主数据源标识）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">########################## 主数据源 ##################################</span></span><br><span class="line"><span class="attr">spring.datasource.primary.jdbc-url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/demo1?characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">spring.datasource.primary.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.primary.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.primary.password</span>=<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">########################## 第二个数据源 ###############################</span></span><br><span class="line"><span class="attr">spring.datasource.datasource2.jdbc-url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/demo2?characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="attr">spring.datasource.datasource2.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.datasource2.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.datasource2.password</span>=<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># mybatis</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">com.wdbyte.domain</span></span><br></pre></td></tr></table></figure>
<p>注意，配置中的数据源连接 url 末尾使用的是 <code>jdbc-url</code>.</p>
<p>因为使用了 Mybatis 框架，所以 Mybatis 框架的配置信息也是少不了的，指定扫描目录 <code>mapper</code> 下的<code>mapper xml</code> 配置文件。</p>
<h3 id="配置Mybatis的扫描路径"><a class="header-anchor" href="#配置Mybatis的扫描路径"></a>配置Mybatis的扫描路径</h3>
<p>到目前为止， Mybatis 多数据源和单数据源写法唯一的区别就是 Mapper 接口使用不同的目录分开了，那么这个不同点一定会在数据源配置中体现</p>
<h4 id="主数据源"><a class="header-anchor" href="#主数据源"></a>主数据源</h4>
<p>开始配置两个数据源信息，先配置主数据源，配置扫描的 <code>MapperScan</code> 目录为 <code>com.wdbyte.mapper.primary</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主数据源配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> <span class="variable">niujinpeng</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://www.wdbyte.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/12/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@<span class="title class_">Configuration</span></span><br><span class="line">@<span class="title class_">MapperScan</span>(basePackages = &#123;<span class="string">&quot;com.wdbyte.mapper.primary&quot;</span>&#125;, sqlSessionFactoryRef = <span class="string">&quot;sqlSessionFactory&quot;</span>)</span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">PrimaryDataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Bean</span>(name = <span class="string">&quot;dataSource&quot;</span>)</span><br><span class="line">    @<span class="title class_">ConfigurationProperties</span>(prefix = <span class="string">&quot;spring.datasource.primary&quot;</span>)</span><br><span class="line">    @<span class="title class_">Primary</span></span><br><span class="line">    public <span class="title class_">DataSource</span> <span class="title function_">dataSource</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">DataSourceBuilder</span>.<span class="title function_">create</span>().<span class="title function_">build</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Bean</span>(name = <span class="string">&quot;sqlSessionFactory&quot;</span>)</span><br><span class="line">    @<span class="title class_">Primary</span></span><br><span class="line">    public <span class="title class_">SqlSessionFactory</span> <span class="title function_">sqlSessionFactory</span>(@<span class="title class_">Qualifier</span>(<span class="string">&quot;dataSource&quot;</span>) <span class="title class_">DataSource</span> dataSource) throws <span class="title class_">Exception</span> &#123;</span><br><span class="line">        <span class="title class_">SqlSessionFactoryBean</span> bean = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        bean.<span class="title function_">setDataSource</span>(dataSource);</span><br><span class="line">        bean.<span class="title function_">setMapperLocations</span>(<span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().<span class="title function_">getResources</span>(<span class="string">&quot;classpath:mapper/*.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> bean.<span class="title function_">getObject</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Bean</span>(name = <span class="string">&quot;transactionManager&quot;</span>)</span><br><span class="line">    @<span class="title class_">Primary</span></span><br><span class="line">    public <span class="title class_">DataSourceTransactionManager</span> <span class="title function_">transactionManager</span>(<span class="params">@Qualifier(<span class="string">&quot;dataSource&quot;</span>) DataSource dataSource</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Bean</span>(name = <span class="string">&quot;sqlSessionTemplate&quot;</span>)</span><br><span class="line">    @<span class="title class_">Primary</span></span><br><span class="line">    public <span class="title class_">SqlSessionTemplate</span> <span class="title function_">sqlSessionTemplate</span>(<span class="params">@Qualifier(<span class="string">&quot;sqlSessionFactory&quot;</span>) SqlSessionFactory sqlSessionFactory</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionTemplate</span>(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和单数据源不同的是这里把</p>
<ul>
<li><code>dataSource</code></li>
<li><code>sqlSessionFactory</code></li>
<li><code>transactionManager</code></li>
<li><code>sqlSessionTemplate</code></li>
</ul>
<p>都单独进行了配置，简单的 bean 创建，下面是用到的一些注解说明。</p>
<ul>
<li><code>@ConfigurationProperties(prefix = &quot;spring.datasource.primary&quot;)</code>：使用spring.datasource.primary 开头的配置。</li>
<li><code>@Primary</code> ：声明这是一个主数据源（默认数据源），多数据源配置时<strong>必不可少</strong>。</li>
<li><code>@Qualifier</code>：显式选择传入的 Bean。</li>
</ul>
<h4 id="第二个数据源"><a class="header-anchor" href="#第二个数据源"></a>第二个数据源</h4>
<p>第二个数据源和主数据源唯一不同的只是 <code>MapperScan</code> 扫描路径和创建的 Bean 名称，同时没有 <code>@Primary</code> 主数据源的注解。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第二个数据源配置</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> <span class="variable">niujinpeng</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@website</span>: https://www.wdbyte.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/12/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@<span class="title class_">Configuration</span></span><br><span class="line">@<span class="title class_">MapperScan</span>(basePackages = &#123;<span class="string">&quot;com.wdbyte.mapper.datasource2&quot;</span>&#125;, sqlSessionFactoryRef = <span class="string">&quot;sqlSessionFactory2&quot;</span>)</span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">SecondDataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Bean</span>(name = <span class="string">&quot;dataSource2&quot;</span>)</span><br><span class="line">    @<span class="title class_">ConfigurationProperties</span>(prefix = <span class="string">&quot;spring.datasource.datasource2&quot;</span>)</span><br><span class="line">    public <span class="title class_">DataSource</span> <span class="title function_">dataSource</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">DataSourceBuilder</span>.<span class="title function_">create</span>().<span class="title function_">build</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Bean</span>(name = <span class="string">&quot;sqlSessionFactory2&quot;</span>)</span><br><span class="line">    public <span class="title class_">SqlSessionFactory</span> <span class="title function_">sqlSessionFactory</span>(@<span class="title class_">Qualifier</span>(<span class="string">&quot;dataSource2&quot;</span>) <span class="title class_">DataSource</span> dataSource) throws <span class="title class_">Exception</span> &#123;</span><br><span class="line">        <span class="title class_">SqlSessionFactoryBean</span> bean = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        bean.<span class="title function_">setDataSource</span>(dataSource);</span><br><span class="line">        bean.<span class="title function_">setMapperLocations</span>(<span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>().<span class="title function_">getResources</span>(<span class="string">&quot;classpath:mapper/*.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> bean.<span class="title function_">getObject</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Bean</span>(name = <span class="string">&quot;transactionManager2&quot;</span>)</span><br><span class="line">    public <span class="title class_">DataSourceTransactionManager</span> <span class="title function_">transactionManager</span>(<span class="params">@Qualifier(<span class="string">&quot;dataSource2&quot;</span>) DataSource dataSource</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Bean</span>(name = <span class="string">&quot;sqlSessionTemplate2&quot;</span>)</span><br><span class="line">    public <span class="title class_">SqlSessionTemplate</span> <span class="title function_">sqlSessionTemplate</span>(<span class="params">@Qualifier(<span class="string">&quot;sqlSessionFactory2&quot;</span>) SqlSessionFactory sqlSessionFactory</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionTemplate</span>(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：因为已经在两个数据源中分别配置了扫描的 Mapper 路径，如果你之前在 SpringBoot 启动类中也使用了 Mapper 扫描注解，<strong>需要删掉</strong>。</p>
<h3 id="连接池"><a class="header-anchor" href="#连接池"></a>连接池</h3>
<p>其实在多数据源改造中，我们一般情况下都不会使用默认的 JDBC 连接方式，往往都需要引入连接池进行连接优化，不然你可能会经常遇到数据源连接被断开等报错日志。其实数据源切换连接池数据源也是十分简单的，直接引入连接池依赖，然后把创建 dataSource 的部分换成连接池数据源创建即可</p>
<p>下面以阿里的 Druid 为例，先引入连接池数据源依赖。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>添加 Druid 的一些配置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">spring.<span class="property">datasource</span>.<span class="property">datasource2</span>.<span class="property">initialSize</span>=<span class="number">3</span> # 根据自己情况设置</span><br><span class="line">spring.<span class="property">datasource</span>.<span class="property">datasource2</span>.<span class="property">minIdle</span>=<span class="number">3</span></span><br><span class="line">spring.<span class="property">datasource</span>.<span class="property">datasource2</span>.<span class="property">maxActive</span>=<span class="number">20</span></span><br></pre></td></tr></table></figure>
<p>改写 dataSource Bean 的创建代码部分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@<span class="title class_">Value</span>(<span class="string">&quot;$&#123;spring.datasource.datasource2.jdbc-url&#125;&quot;</span>)</span><br><span class="line">private <span class="title class_">String</span> url;</span><br><span class="line">@<span class="title class_">Value</span>(<span class="string">&quot;$&#123;spring.datasource.datasource2.driver-class-name&#125;&quot;</span>)</span><br><span class="line">private <span class="title class_">String</span> driverClassName;</span><br><span class="line">@<span class="title class_">Value</span>(<span class="string">&quot;$&#123;spring.datasource.datasource2.username&#125;&quot;</span>)</span><br><span class="line">private <span class="title class_">String</span> username;</span><br><span class="line">@<span class="title class_">Value</span>(<span class="string">&quot;$&#123;spring.datasource.datasource2.password&#125;&quot;</span>)</span><br><span class="line">private <span class="title class_">String</span> password;</span><br><span class="line">@<span class="title class_">Value</span>(<span class="string">&quot;$&#123;spring.datasource.datasource2.initialSize&#125;&quot;</span>)</span><br><span class="line">private int initialSize;</span><br><span class="line">@<span class="title class_">Value</span>(<span class="string">&quot;$&#123;spring.datasource.datasource2.minIdle&#125;&quot;</span>)</span><br><span class="line">private int minIdle;</span><br><span class="line">@<span class="title class_">Value</span>(<span class="string">&quot;$&#123;spring.datasource.datasource2.maxActive&#125;&quot;</span>)</span><br><span class="line">private int maxActive;</span><br><span class="line"></span><br><span class="line">@<span class="title class_">Bean</span>(name = <span class="string">&quot;dataSource2&quot;</span>)</span><br><span class="line">public <span class="title class_">DataSource</span> <span class="title function_">dataSource</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">DruidDataSource</span> dataSource = <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    dataSource.<span class="title function_">setUrl</span>(url);</span><br><span class="line">    dataSource.<span class="title function_">setDriverClassName</span>(driverClassName);</span><br><span class="line">    dataSource.<span class="title function_">setUsername</span>(username);</span><br><span class="line">    dataSource.<span class="title function_">setPassword</span>(password);</span><br><span class="line">    dataSource.<span class="title function_">setInitialSize</span>(initialSize);</span><br><span class="line">    dataSource.<span class="title function_">setMinIdle</span>(minIdle);</span><br><span class="line">    dataSource.<span class="title function_">setMaxActive</span>(maxActive);</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里只是简单的提一下使用连接池的重要性，Druid 的详细用法还请参考官方文档</p>
<h2 id="配置日志"><a class="header-anchor" href="#配置日志"></a>配置日志</h2>
<p>默认情况下,Spring Boot会用Logback(<a href="http://logback.qos.ch">http://logback.qos.ch</a>)来记录日志,并用INFO级别输<br>
出到控制台。在运行应用程序和其他例子时,你应该已经看到很多INFO级别的日志了。</p>
<p>一般来说,你不需要切换日志实现;Logback能很好地满足你的需要。但是,如果决定使<br>
用Log4j或者Log4j2,那么你只需要修改依赖,引入对应该日志实现的起步依赖,同时排除掉<br>
Logback。<br>
以Maven为例,应排除掉根起步依赖传递引入的默认日志起步依赖,这样就能排除<br>
Logback了:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在Gradle里,在 configurations下排除该起步依赖是最简单的办法:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">configurations &#123;</span><br><span class="line">	all*.exclude <span class="attr">group:</span><span class="string">&#x27;org.springframework.boot&#x27;</span>,</span><br><span class="line">	<span class="symbol">module:</span><span class="string">&#x27;spring-boot-starter-logging&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>排除默认日志的起步依赖后,就可以引入你想用的日志实现的起步依赖了。在Maven里可<br>
以这样添加Log4j:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在Gradle里可以这样添加Log4j:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile(<span class="string">&quot;org.springframework.boot:spring-boot-starter-log4j&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>要完全掌握日志配置,可以在Classpath的根目录(src/main/resources)里创建logback.xml文<br>
件。下面是一个logback.xml的简单例子:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n</span><br><span class="line"><span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>除了日志格式之外,这个Logback配置和不加logback.xml文件的默认配置差不多。但是,通<br>
过编辑logback.xml,你可以完全掌控应用程序的日志文件。哪些配置应该放进logback.xml这个话<br>
题不在本书的讨论范围内,请参考Logback的文档以了解更多信息。<br>
即使如此,你对日志配置最常做的改动就是修改日志级别和指定日志输出的文件。使用了<br>
Spring Boot的配置属性后,你可以在不创建logback.xml文件的情况下修改那些配置。<br>
要设置日志级别,你可以创建以logging.level开头的属性,后面是要日志名称。如果根<br>
日志级别要设置为WARN,但Spring Security的日志要用DEBUG级别,可以在application.yml里加入<br>
以下内容:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">	<span class="attr">level:</span></span><br><span class="line">		<span class="attr">root:</span> <span class="string">WARN</span></span><br><span class="line">		<span class="attr">org:</span></span><br><span class="line">			<span class="attr">springframework:</span></span><br><span class="line">			<span class="attr">security:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>
<p>另外,你也可以把Spring Security的包名写成一行:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">	<span class="attr">level:</span></span><br><span class="line">		<span class="attr">root:</span> <span class="string">WARN</span></span><br><span class="line">		<span class="attr">org.springframework.security:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>
<p>现在,假设你想把日志写到位于/var/logs/目录里的BookWorm.log文件里。使用 logging.<br>
path和loggin.file属性就行了:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">	<span class="attr">path:</span> <span class="string">/var/logs/</span></span><br><span class="line">	<span class="attr">file:</span> <span class="string">BookWorm.log</span></span><br><span class="line">	<span class="attr">level:</span></span><br><span class="line">		<span class="attr">root:</span> <span class="string">WARN</span></span><br><span class="line">		<span class="attr">org:</span></span><br><span class="line">			<span class="attr">springframework:</span></span><br><span class="line">				<span class="attr">security:</span> <span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>
<p>假设应用程序有/var/logs/的写权限,日志就能被写入/var/logs/BookWorm.log。默认情况下,<br>
日志文件的大小达到10MB时会切分一次。<br>
与之类似,这些属性也能在application.properties里设置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logging.path=/var/logs/</span><br><span class="line">logging.file=BookWorm.log</span><br><span class="line">logging.level.root=WARN</span><br><span class="line">logging.level.root.org.springframework.security=DEBUG</span><br></pre></td></tr></table></figure>
<p>如果你还是想要完全掌控日志配置,但是又不想用logback.xml作为Logback配置的名字,可<br>
以通过logging.config属性指定自定义的名字:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">	<span class="attr">config:</span></span><br><span class="line">		<span class="attr">classpath:</span> <span class="string">logging-config.xml</span></span><br></pre></td></tr></table></figure>
<p>虽然一般并不需要改变配置文件的名字,但是如果你想针对不同运行时Profile使用不同的日<br>
志配置(见3.2.3节),这个功能会很有用。</p>
<h2 id="配置HTTPS"><a class="header-anchor" href="#配置HTTPS"></a>配置HTTPS</h2>
<ol>
<li>
<p>用JDK的keytool工具来创建一个密钥存储(keystore):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -keystore mykeys.jks -genkey -alias tomcat -keyalg RSA</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将生成的密钥（的路径）放在配置文件中:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">	<span class="attr">port:</span> <span class="number">8443</span></span><br><span class="line">	<span class="attr">ssl:</span></span><br><span class="line">		<span class="attr">key-store:</span> <span class="string">file:///path/to/mykeys.jks</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Spring-Boot-Features"><a class="header-anchor" href="#Spring-Boot-Features"></a>Spring Boot Features</h1>
<p>Spring Boot提供了许多Spring没有的新特性</p>
<h2 id="AutoConfiguration"><a class="header-anchor" href="#AutoConfiguration"></a>AutoConfiguration</h2>
<p>Spring Boot提供了自动装配<code>XxxAutoConfiguration</code>，使得许多组件被自动化配置并创建,  这通过自动扫描+ 条件装配<code>@Conditional</code>实现, 步骤为:</p>
<ol>
<li>引入各种依赖（由于是spring boot， 因此一般是起步依赖 ）， 依赖中会有<code>XxxAutoConfiguration</code>类</li>
<li>Spring Boot启动时会自动扫描所有的<code>XxxAutoConfiguration</code></li>
<li>对于每个<code>XXAutoConfiguratio</code>, 它一般带有注解:
<ul>
<li><code>@ConditionalOnClass（XX.class）</code>： 在classpath中能找XX；</li>
<li><code>@EnableConfigurationProperties(XX.class)</code>： 在当前Bean的定义中能找到唯一的<code>DataSource</code>；</li>
<li>各种<code>@Conditional</code>...</li>
<li><code>@Import(XXConfiguration）</code>:注入某个配置类</li>
</ul>
</li>
<li>如果符合条件，该<code>XXConfiguration</code>就会被装配。而各种Bean的实际创建由其导入的<code>XXeConfiguration</code>完成</li>
<li>XXConfiguration一般会带有注解<code>@ConditionalOnMissingBean(XX.class)</code>，即不存在<code>XX</code>的Bean时，就会自动注入，这就完成了Bean的自动装配</li>
</ol>
<h3 id="自动配置的细节"><a class="header-anchor" href="#自动配置的细节"></a>自动配置的细节</h3>
<p>例如，引入<code>spring-boot-starter-jdbc</code>后，启动时：</p>
<ul>
<li><code>DataSourceAutoConfiguration</code>：自动创建一个<code>DataSource</code>，其中配置项从<code>application.yml</code>的<code>spring.datasource</code>读取</li>
<li><code>DataSourceTransactionManagerAutoConfiguration</code>：自动创建了一个基于JDBC的事务管理器</li>
<li><code>JdbcTemplateAutoConfiguration</code>：自动创建了一个<code>JdbcTemplate</code></li>
</ul>
<p>因此，我们自动得到了一个<code>DataSource</code>、一个<code>DataSourceTransactionManager</code>和一个<code>JdbcTemplate</code></p>
<p>类似地，当我们引入<code>spring-boot-starter-web</code>时，自动创建了：</p>
<ul>
<li><code>ServletWebServerFactoryAutoConfiguration</code>：自动创建一个嵌入式Web服务器，默认是Tomcat</li>
<li><code>DispatcherServletAutoConfiguration</code>：自动创建一个<code>DispatcherServlet</code></li>
<li><code>HttpEncodingAutoConfiguration</code>：自动创建一个<code>CharacterEncodingFilter</code></li>
<li><code>WebMvcAutoConfiguration</code>：自动创建若干与MVC相关的Bean</li>
<li>...</li>
</ul>
<p>引入第三方<code>pebble-spring-boot-starter</code>时，自动创建了：</p>
<ul>
<li><code>PebbleAutoConfiguration</code>：自动创建了一个<code>PebbleViewResolver</code></li>
</ul>
<h3 id="条件装配的细节"><a class="header-anchor" href="#条件装配的细节"></a>条件装配的细节</h3>
<p>我们观察<code>JdbcTemplateAutoConfiguration</code>，它的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; DataSource.class, JdbcTemplate.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate(DataSource.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(DataSourceAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(JdbcProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; JdbcTemplateConfiguration.class, NamedParameterJdbcTemplateConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTemplateAutoConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当满足条件：</p>
<ul>
<li><code>@ConditionalOnClass</code>：在classpath中能找到<code>DataSource</code>和<code>JdbcTemplate</code>；</li>
<li><code>@ConditionalOnSingleCandidate(DataSource.class)</code>：在当前Bean的定义中能找到唯一的<code>DataSource</code>；</li>
</ul>
<p>该<code>JdbcTemplateAutoConfiguration</code>就会起作用。实际创建由导入的<code>JdbcTemplateConfiguration</code>完成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(JdbcOperations.class)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JdbcTemplateConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">(DataSource dataSource, JdbcProperties properties)</span> &#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(dataSource);</span><br><span class="line">        JdbcProperties.<span class="type">Template</span> <span class="variable">template</span> <span class="operator">=</span> properties.getTemplate();</span><br><span class="line">        jdbcTemplate.setFetchSize(template.getFetchSize());</span><br><span class="line">        jdbcTemplate.setMaxRows(template.getMaxRows());</span><br><span class="line">        <span class="keyword">if</span> (template.getQueryTimeout() != <span class="literal">null</span>) &#123;</span><br><span class="line">            jdbcTemplate.setQueryTimeout((<span class="type">int</span>) template.getQueryTimeout().getSeconds());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建<code>JdbcTemplate</code>之前，要满足<code>@ConditionalOnMissingBean(JdbcOperations.class)</code>，即不存在<code>JdbcOperations</code>的Bean。</p>
<h3 id="覆盖自动装配"><a class="header-anchor" href="#覆盖自动装配"></a>覆盖自动装配</h3>
<p>由于Spring Boot自动装配功能通过自动扫描+条件装配实现， 想要覆盖Spring Boot的自动配置,只需编写一个显式的配置。根据条件<code>@ConditionalOnMissingBean([XX.class])</code>， Spring Boot就不会再创建一个重复的Bean</p>
<h2 id="Starter-Dependencies"><a class="header-anchor" href="#Starter-Dependencies"></a>Starter Dependencies</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>starter是一组依赖集合，用户不需要再单独依赖，只需要依赖Starter，就可以<strong>一站式</strong>解决所需的依赖</p>
<ul>
<li>
<p>简单来说，starter是帮用户简化配置的， 在“约定大于配置”的理念下，starter把繁琐的配置交给自己，而把简单的交给用户。 用户也可以覆盖默认配置</p>
<ul>
<li>“约定大于配置”：starter使用ConfigurationProperties来保存配置，且配置都有默认值，用户可以覆盖</li>
<li>ConfigurationProperties还使得所有的配置属性被聚集到一个文件中（一般在resources目录下的<code>application.properties/yml</code>），这样我们就告别了Spring项目中XML地狱</li>
</ul>
</li>
<li>
<p>注意，不同的starter是为了解决不同的依赖，所以它们内部的实现可能会有很大的差异，例如jpa的starter和Redis的starter可能实现就不一样<img data-src="https://img-blog.csdnimg.cn/20190507163145255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW9ob25nX2Jv,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ul>
<h3 id="parent"><a class="header-anchor" href="#parent"></a>parent</h3>
<p>starter的版本号不需要指定，而是继承自父级依赖<code>spring-boot-starter-parent</code>， parent是一个特殊的starter，用于管理所有子starter的依赖, 也就是说，只需要指定parent的版本，不需要关心普通starter的版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="示例"><a class="header-anchor" href="#示例"></a>示例</h3>
<p>普通soringboot项目的依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>springBootLearn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springBootLearn<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="devtools"><a class="header-anchor" href="#devtools"></a>devtools</h2>
<p>gradle:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">compile <span class="string">&quot;org.springframework.boot:spring-boot-devtools&quot;</span></span><br></pre></td></tr></table></figure>
<p>maven:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Spring Boot以依赖的形式引入了一组开发者工具,包括如下功能：</p>
<ul>
<li>自动重启: 当Classpath里的文件发生变化时,自动重启运行中的应用程序。</li>
<li>LiveReload支持:对资源的修改自动触发浏览器刷新。</li>
<li>远程开发:远程部署时支持自动重启和LiveReload。</li>
<li>默认的开发时属性值:为一些属性提供有意义的默认开发时属性值</li>
</ul>
<p>当应用程序以完整打包好的JAR或WAR文件形式运行时,开发者工具会被禁用,所以没有必要在构建包前移除这个依赖</p>
<h3 id="自动重启"><a class="header-anchor" href="#自动重启"></a>自动重启</h3>
<p>激活了devtools后,Classpath里对文件做任何修改都会触发应用程序重启</p>
<p>为了让重启速度够快,不会修改的类(比如第三方JAR文件里的类)都加载到了基础类加载器里,而应用程序的代码则会加载到一个单独的<strong>重启类加载器</strong>里。检测到变更时,只有重启类加载器重启</p>
<p>有些Classpath里的资源变更后不需要重启应用程序。像Thymeleaf这样的视图模板可以直接编辑,不用重启应用程序。在/static或/public里的静态资源也不用重启应用程序,所以Spring Boot开发者工具会在重启时排除掉如下目录:/META-INF/resources、/resources、/static、/public和/templates。</p>
<p>可以设置<code>spring.devtools.restart.exclude</code>属性来覆盖默认的重启排除目录:</p>
<p>例如,只排除/static和/templates目录:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">devtools:</span></span><br><span class="line">		<span class="attr">restart:</span></span><br><span class="line">			<span class="attr">exclude:</span> <span class="string">/static/**,/templates/**</span></span><br></pre></td></tr></table></figure>
<p>关闭自动重启:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">devtools:</span></span><br><span class="line">		<span class="attr">restart:</span></span><br><span class="line">			<span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>还可以设置一个触发文件,必须修改这个文件才能触发重启。例如,在修改名为.trigger的文件前你都不希望执行重启:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">devtools:</span></span><br><span class="line">		<span class="attr">restart:</span></span><br><span class="line">			<span class="attr">trigger-file:</span> <span class="string">.trigger</span></span><br></pre></td></tr></table></figure>
<h3 id="LiveReoload"><a class="header-anchor" href="#LiveReoload"></a>LiveReoload</h3>
<p>用于web页面，devtools集成了<a href="http://livereload.com">LiveReload</a>,  Sprign Boot启动时会启动一个内嵌的LiveReload服务器,在资源文件变化时会触发浏览器刷新</p>
<ul>
<li>不过很少有人开发MVC，这功能也没啥用</li>
</ul>
<p>禁 用 内 嵌 的 LiveReload 服 务 器 ：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">devtools:</span></span><br><span class="line">		<span class="attr">livereload:</span></span><br><span class="line">			<span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="默认的开发时属性"><a class="header-anchor" href="#默认的开发时属性"></a>默认的开发时属性</h3>
<p>有些配置属性通常在开发时设置,从来不用在生产环境里。比如视图模板缓存,在开发时最好关掉,这样你可以立刻看到修改的结果。但在生产环境里,为了追求更好的性能,应该开启视图模版缓存。默认情况下,Spring Boot会为其支持的各种视图模板(Thymeleaf、Freemarker、Velocity、Mustache和Groovy模板)开启缓存选项。但如果存在Spring Boot的开发者工具,这些缓存就会禁用</p>
<p>这就是说在devtools激活后,如下属性会设置为false:</p>
<ul>
<li>spring.thymeleaf.cache</li>
<li>spring.freemarker.cache</li>
<li>spring.velocity.cache</li>
<li>spring.mustache.cache</li>
<li>spring.groovy.template.cache</li>
</ul>
<p>这样一来,就不用在开发时(在一个开发时使用的Profile配置里)禁用它们了</p>
<h2 id="Spring-Boot-CLI"><a class="header-anchor" href="#Spring-Boot-CLI"></a>Spring Boot CLI</h2>
<p><a href="http://start.spring.xn--ioSpring-0i5q">http://start.spring.io是Spring</a> Boot提供的项目构建工具，位于Web端， 它的命令行访问工具是Spring Boot CLI</p>
<ul>
<li>Spring Boot CLI实际上会请求http://start.spring.io， 因此二者是一个东西</li>
</ul>
<p>Spring Boot CLI也不是万能的，比如它无法指定root package name ( 默认是 &quot;demo&quot;)</p>
<h3 id="下载SpiringBoot-Cli"><a class="header-anchor" href="#下载SpiringBoot-Cli"></a>下载SpiringBoot Cli</h3>
<p>Mac:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew tap spring-io/tap</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew uninstall springboot</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install spring-boot</span><br></pre></td></tr></table></figure>
<h3 id="使用"><a class="header-anchor" href="#使用"></a>使用</h3>
<p>Initialize a new project using Spring Initializr (<a href="http://start.spring.io">start.spring.io</a>):</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring init</span><br></pre></td></tr></table></figure>
<p>可以指定项目依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ spring init -dweb,jpa,security</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>--dependencies</code>or <code>-d</code></p>
</li>
<li>
<p><code>--build gradle</code>: 默认项目构建工具是maven，可以指定使用gradle</p>
</li>
<li>
<p><code>-packaging</code> or <code> -p</code> : 默认构建为JAR包，可以指定构建为WAR包： <code>-p war</code></p>
</li>
<li>
<p><code>-n, --name &lt;String&gt;</code>: Project name; infer application name</p>
</li>
</ul>
<p>查看命令帮助：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ spring help init</span><br></pre></td></tr></table></figure>
<h2 id="Profiles"><a class="header-anchor" href="#Profiles"></a>Profiles</h2>
<p>Profile本身是Spring提供的功能，它和@Conditional一样，属于条件装配，表示一个环境的概念，如开发、测试和生产这3个环境：</p>
<ul>
<li>native</li>
<li>test</li>
<li>production</li>
</ul>
<p>或者按git分支定义master、dev这些环境：</p>
<ul>
<li>master</li>
<li>dev</li>
</ul>
<p>在启动一个Spring应用程序的时候，可以传入一个或多个环境，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Dspring.profiles.active=test,master</span><br></pre></td></tr></table></figure>
<p>Spring Boot对Profiles的支持在于，可以在<code>application.yml</code>中配置多个环境：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">$&#123;APP_NAME:unnamed&#125;</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:hsqldb:file:testdb</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">sa</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">dirver-class-name:</span> <span class="string">org.hsqldb.jdbc.JDBCDriver</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">auto-commit:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">connection-timeout:</span> <span class="number">3000</span></span><br><span class="line">      <span class="attr">validation-timeout:</span> <span class="number">3000</span></span><br><span class="line">      <span class="attr">max-lifetime:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pebble:</span></span><br><span class="line">  <span class="attr">suffix:</span></span><br><span class="line">  <span class="attr">cache:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">$&#123;APP_PORT:8080&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">production</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pebble:</span></span><br><span class="line">  <span class="attr">cache:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>注意到分隔符<code>---</code>，最前面的配置是默认配置，不需要指定Profile，后面的每段配置都必须以<code>spring.profiles: xxx</code>开头，表示一个Profile。上述配置默认使用8080端口，但是在<code>test</code>环境下，使用<code>8000</code>端口，在<code>production</code>环境下，使用<code>80</code>端口，并且启用Pebble的缓存</p>
<ul>
<li>如果不指定任何Profile，那么Profile实际上是<code>default</code>，可以从Spring Boot启动日志看出</li>
</ul>
<p>启用profile：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">	<span class="attr">profiles:</span></span><br><span class="line">	<span class="string">active:production</span></span><br></pre></td></tr></table></figure>
<h2 id="Actuator"><a class="header-anchor" href="#Actuator"></a>Actuator</h2>
<p>Actuator会把它能收集到的所有信息都暴露给JMX。此外，Actuator还可以通过URL挂载一些endpoint(作为web接口)，通过它们了解应用程序运行时的内部状况</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>Actuator默认把所有访问点暴露给JMX，但出于安全原因，只有<code>health</code>和<code>info</code>会暴露给Web, 所有默认端点增加了<code>/actuator</code>前缀</p>
<ul>
<li>例如，可以查看health: 	<a href="http://localhost:8080/actuator/health">http://localhost:8080/actuator/health</a></li>
<li>注意，这是Actuator 2.x 中的新特性， 在 Actuator 1.x中，默认开放所有端点，也没有/actuator前缀</li>
</ul>
</li>
<li>
<p>要暴露更多endpoint给Web，需要在<code>application.yml</code>中加上配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">info,</span> <span class="string">health,</span> <span class="string">beans,</span> <span class="string">env,</span> <span class="string">metrics</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>Actuator 提供了 13 个接口，可以分为三大类：</p>
<ul>
<li><strong>应用配置类</strong>：获取应用程序中加载的应用配置、环境变量、自动化配置报告等与Spring Boot应用密切相关的配置类信息。</li>
<li><strong>度量指标类</strong>：获取应用程序运行过程中用于监控的度量指标，比如：内存信息、线程池信息、HTTP请求统计等。</li>
<li><strong>操作控制类</strong>：提供了对应用的关闭等操作类功能</li>
</ul>
<table>
<thead>
<tr>
<th>HTTP 方法</th>
<th>路径</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>/autoconfig</td>
<td>提供了一份自动配置报告，记录哪些自动配置条件通过了，哪些没通过</td>
</tr>
<tr>
<td>GET</td>
<td>/configprops</td>
<td>描述配置属性(包含默认值)如何注入Bean</td>
</tr>
<tr>
<td>GET</td>
<td>/beans</td>
<td>描述应用程序上下文里全部的Bean，以及它们的关系</td>
</tr>
<tr>
<td>GET</td>
<td>/dump</td>
<td>获取线程活动的快照</td>
</tr>
<tr>
<td>GET</td>
<td>/env</td>
<td>获取全部环境属性</td>
</tr>
<tr>
<td>GET</td>
<td>/env/{name}</td>
<td>根据名称获取特定的环境属性值</td>
</tr>
<tr>
<td>GET</td>
<td>/health</td>
<td>报告应用程序的健康指标，这些值由HealthIndicator的实现类提供</td>
</tr>
<tr>
<td>GET</td>
<td>/info</td>
<td>获取应用程序的定制信息，这些信息由info打头的属性提供</td>
</tr>
<tr>
<td>GET</td>
<td>/mappings</td>
<td>描述全部的URI路径，以及它们和控制器(包含Actuator端点)的映射关系</td>
</tr>
<tr>
<td>GET</td>
<td>/metrics</td>
<td>报告各种应用程序度量信息，比如内存用量和HTTP请求计数</td>
</tr>
<tr>
<td>GET</td>
<td>/metrics/{name}</td>
<td>报告指定名称的应用程序度量值</td>
</tr>
<tr>
<td>POST</td>
<td>/shutdown</td>
<td>关闭应用程序，要求endpoints.shutdown.enabled设置为true</td>
</tr>
<tr>
<td>GET</td>
<td>/trace</td>
<td>提供基本的HTTP请求跟踪信息(时间戳、HTTP头等)</td>
</tr>
</tbody>
</table>
<h3 id="beans"><a class="header-anchor" href="#beans"></a>/beans</h3>
<p>/beans接口会返回一个 JSON 文档，描述上下文里每个 bean 的情况，包括其 Java 类型以及注入的其它 bean</p>
<p>bean：Spring 应用程序上下文中的 Bean 名称或 ID。</p>
<p>resource：.class 文件的物理位置，通常是一个 URL，指向构建出的 JAR 文件。这会随着应用程序的构建和运行方式发生变化。</p>
<p>dependencies：当前 Bean 注入的 Bean ID 列表。</p>
<p>scope：Bean 的作用域（通常是单例，这也是默认作用域）。</p>
<p>type：Bean 的 Java 类型。</p>
<h3 id="autoconfig"><a class="header-anchor" href="#autoconfig"></a>/autoconfig</h3>
<p><code>/autoconfig</code>接口能告诉你为什么会有这个 bean ，或者为什么没有这个 bean</p>
<p>提供endpoint可访问，如：</p>
<ul>
<li>/health，查看这个微服务的健康状况</li>
<li>/bean，创建的bean</li>
<li>/env，查看环境变量信息</li>
</ul>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cache</title>
    <url>/2022/03/22/Spring-Cache/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Basic Idea</li>
<li>启用Spring缓存支持</li>
<li>提供缓存管理器</li>
<li>应用缓存</li>
</ul>
<p>ref: <em>Spring In Action</em></p>
 <span id="more"></span>
<h1 id="Basic-Idea"><a class="header-anchor" href="#Basic-Idea"></a>Basic Idea</h1>
<p>缓存实际上是一种面向切面的行为。Spring将缓存实现为一个切面。</p>
<ul>
<li>在使用XML声明缓存规则时,这一点非常明显:我们必须要将缓存通知绑定到一个切点上</li>
</ul>
<p>缓存编程步骤：</p>
<ol>
<li>启用Spring缓存支持（java方式）： 提供缓存配置类，加上<code>@EnableCaching</code></li>
<li>提供缓存管理器：给配置类提供一个CacheManager`</li>
<li>应用缓存：给需要缓存的方法加上对应的注解</li>
</ol>
<!--more-->
<h1 id="启用Spring缓存支持"><a class="header-anchor" href="#启用Spring缓存支持"></a>启用Spring缓存支持</h1>
<p>Spring启用缓存支持有两种方式:</p>
<ul>
<li>
<p>注解驱动的缓存：在一个配置类上添加 <code> @EnableCaching</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.concurrent.ConcurrentMapCacheManager;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CachingConfig</span> &#123;</span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcurrentMapCacheManager</span>(); <span class="comment">//这里还声明了一个ConcurrentMapCacheManager的Bean</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>当你在配置类(@Configuration)上使用@EnableCaching注解时，会触发一个post processor，这会扫描<strong>每一个</strong>spring bean，查看是否已经存在注解对应的缓存。如果找到了，就会自动创建一个代理拦截方法调用，使用缓存的bean执行处理。. <a href="https://javabeat.net/enablecaching-spring/#:~:text=%40EnableCaching%20in%20Spring%20Framework.%20When%20you%20annotate%20your,method%20call%20and%20handle%20the%20caching%20behavior%20accordingly">参见</a>.</li>
</ul>
</li>
<li>
<p>XML声明的缓存： 用Spring cache命名空间中的<code>&lt;cache:annotation-driven&gt;</code>元素来启用注解驱动的缓<br>
存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xmlns:cache=&quot;http://www.springframework.org/schema/cache&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;</span><br><span class="line">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;cache:annotation-driven /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>本质上,<code>@EnableCaching</code>和<code>&lt;cache:annotation-driven&gt;</code>的工作方式是相同的。它们都会创建一个切面(aspect)并<br>
触发Spring缓存注解的切点(pointcut)</p>
<h1 id="配置CacheManager"><a class="header-anchor" href="#配置CacheManager"></a>配置CacheManager</h1>
<p>Spring 内置的缓存管理器：</p>
<ul>
<li><code>SimpleCacheManager</code></li>
<li><code>NoOpCacheManager</code></li>
<li><code>ConcurrentMapCacheManager</code></li>
<li><code>CompositeCacheManager</code></li>
<li><code>EhCacheCacheManager</code></li>
</ul>
<p>Spring Data的缓存管理器：</p>
<ul>
<li><code>RedisCacheManager</code>(来自于Spring Data Redis项目)</li>
<li><code>GemfireCacheManager</code></li>
</ul>
<h2 id="EhCache"><a class="header-anchor" href="#EhCache"></a>EhCache</h2>
<p>对比Redis, 跑在同一个进程上， 速度更快</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.ehcache.CacheManager; <span class="comment">//ehcache提供的CacheManager</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.ehcache.EhCacheCacheManager;<span class="comment">//Spring提供的EhCacheCacheManager</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.ehcache.EhCacheManagerFactoryBean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CachingConfig</span> &#123;</span><br><span class="line"><span class="comment">//      @Bean</span></span><br><span class="line"><span class="comment">//    public CacheManager cacheManager() &#123;</span></span><br><span class="line"><span class="comment">//        return new ConcurrentMapCacheManager();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="comment">//将ehCache提供的CacheManager注入到Spring的EhCacheManager</span></span><br><span class="line">  <span class="keyword">public</span> EhCacheCacheManager <span class="title function_">cacheManager</span><span class="params">(CacheManager cm)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EhCacheCacheManager</span>(cm);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span> <span class="comment">//这是个工厂Bean, 用来生成 Ehcache的CacheManager实例 ，后者被注入到cacheManager（Cacaemanager cm）</span></span><br><span class="line">  <span class="keyword">public</span> EhCacheManagerFactoryBean <span class="title function_">ehcache</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">EhCacheManagerFactoryBean</span> <span class="variable">ehCacheFactoryBean</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">EhCacheManagerFactoryBean</span>();</span><br><span class="line">    ehCacheFactoryBean.setConfigLocation(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;spittr/cache/ehcache.xml&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> ehCacheFactoryBean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><code>cacheManager()</code>方法通过传入Ehcache的<code>CacheManager</code>实例， 创建了一个<code>EhCacheCacheManager</code>实例
<ul>
<li>Spring和ehcache都定义了<code>CacheManager</code>类型，我们需要将 ehcache的<code>CacheManager</code>注入到Spring的<code>EhCacheCacheManager</code></li>
<li>Spring提供了<code>EhCacheManagerFactoryBean</code>来生成EhCache的<code>CacheManager</code>。方法<code>ehcache()</code>会创建并返回一<code>EhCacheManagerFactoryBean</code>实例。因为它是一个工<strong>厂bean</strong>(即实现了Spring的<code>FactoryBean</code>接口),所以<strong>注册在Spring应用上下文中的并不是EhCacheManagerFactoryBean的实例,而是Ehcache的CacheManager的实例</strong>, 后者被注入到<code>EhCacheCacheManager</code>之中</li>
</ul>
</li>
<li><code>EhCache</code>自身也需要配置（通过XML）， 我们在创建<code>EhCacheManagerFactoryBean</code>的过程中, 通过<code>setConfigLocation()</code>方法,传入<code>ClassPath-Resource</code>,来指定<code>EhCache</code> XML配置文件相对于根类路径(classpath)的位置。</li>
</ul>
<h3 id="ehCache配置文件"><a class="header-anchor" href="#ehCache配置文件"></a>ehCache配置文件</h3>
<p><a href="http://ehcache.org/documentation/configuration">ehCache官方文档</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">&quot;spittleCache&quot;</span> //<span class="attr">声明了一个名为spittleCache的缓存</span></span></span><br><span class="line"><span class="tag">          <span class="attr">maxBytesLocalHeap</span>=<span class="string">&quot;50m&quot;</span> //<span class="attr">最大的堆存储为50MB</span></span></span><br><span class="line"><span class="tag">          <span class="attr">timeToLiveSeconds</span>=<span class="string">&quot;100&quot;</span>&gt;</span> // 存活时间为100秒</span><br><span class="line">  <span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Redis"><a class="header-anchor" href="#Redis"></a>Redis</h2>
<p>优点：</p>
<ul>
<li>
<p>对比EhCache， 可以实现跨进程的缓存</p>
</li>
<li>
<p>缓存的条目是键值对,其中key描述了产生value的操作和参数。因此, Redis作为key-value存储,非常适合存储缓存</p>
</li>
</ul>
<p>Spring Data Redis提供了<code>RedisCacheManager</code>, 它与一个Redis Server协作,并通过<code>RedisTemplate</code>将缓存条目存储到Redis中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisTemplate redisTemplate)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedisCacheManager</span>(redisTemplate); <span class="comment">//Redis缓存管理器Bean</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//Redis连接工厂Bean， 这也是一个工厂Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisConnectionFactory <span class="title function_">redisCF</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JedisConnectionFactory</span>(); <span class="comment">//这里的工厂Bean的底层实现用的是JedisConnectionFactory</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//Redis Template Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory cf)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, String&gt; redis = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redis.setConnectionFactory(cf);</span><br><span class="line">        <span class="keyword">return</span> redis;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><code>cacheManager()</code>方法通过传入<code>RedisTemplate</code>实例， 创建了一个<code>RedisCacheManager</code>实例</li>
<li>为了使用<code>RedisCacheManager</code>,我们需要<code>RedisTemplate</code>及<code>RedisConnection</code> Bean, 这同样用工厂Bean实现</li>
</ul>
<h2 id="使用多个缓存管理器"><a class="header-anchor" href="#使用多个缓存管理器"></a>使用多个缓存管理器</h2>
<p>可以用Spring的<code>CompositeCacheManager</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(net.sf.ehcache.CacheManager cm, </span></span><br><span class="line"><span class="params">		RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="type">CompositeCacheManager</span> <span class="variable">compositeCacheManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompositeCacheManager</span>();</span><br><span class="line">	List&lt;CacheManager&gt; managers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;CacheManager&gt;();</span><br><span class="line">	managers.add(<span class="keyword">new</span> <span class="title class_">EhCacheCacheManager</span>(cm));</span><br><span class="line">	managers.add(<span class="keyword">new</span> <span class="title class_">RedisCacheManager</span>(redisTemplate));</span><br><span class="line">	compositeCacheManager.setCacheManagers(managers);<span class="comment">//添加缓存管理器，按添加顺序查找，没找到再往下找</span></span><br><span class="line">	<span class="keyword">return</span> compositeCacheManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>会从<code>EhCacheCacheManager</code>检查Ehcache, 然后从<code>RedisCacheManager</code>检查Redis</p>
<h1 id="应用缓存"><a class="header-anchor" href="#应用缓存"></a>应用缓存</h1>
<p>这里主要介绍用注解配置缓存</p>
<h2 id="Cacheable"><a class="header-anchor" href="#Cacheable"></a>@Cacheable</h2>
<p><code>@Cacheable(  cache_name )</code></p>
<p>方法的结果会被存到指定的缓存中，下次采用<u>相同的参数</u>进行方法调用时，会使用缓存中的结果<br>
例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(&quot;spittleCache&quot;)</span></span><br><span class="line">  Spittle <span class="title function_">findOne</span><span class="params">(<span class="type">long</span> id)</span>;<span class="meta">@Cacheable(&quot;books&quot;)</span></span><br></pre></td></tr></table></figure>
<p>当findOne()被调用时,缓存切面会拦截调用并在缓存中查找之前<br>
以名spittleCache存储的返回值。缓存的key是传递<br>
到findOne()方法中的id参数。如果按照这个key能够找到值的话,<br>
就会返回找到的值,方法不会再被调用。如果没有找到值的话,那么<br>
就会调用这个方法,并将返回值放到缓存之中,为下一次调<br>
用findOne()方法做好准备</p>
<p><strong>可以加到接口的方法上</strong>， 这会导致所有实现该接口的类的对应方法都应用该注解</p>
<p><strong>默认key生成：</strong><br>
默认key的生成按照以下规则：<br>
- 如果没有参数,则使用0作为key<br>
- 如果只有一个参数，使用该参数作为key<br>
- 如果又多个参数，使用包含所有参数的hashCode作为key</p>
<p><strong>自定义key的生成：</strong><br>
当目标方法参数有多个时，有些参数并不适合缓存逻辑<br>
比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Cacheable(&quot;books&quot;)</span><br><span class="line">public Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)</span><br></pre></td></tr></table></figure>
<p>其中checkWarehouse，includeUsed并不适合当做缓存的key.针对这种情况，Cacheable 允许指定生成key的关键属性，并且支持支持SpringEL表达式。（推荐方法）<br>
再看一些例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames=&quot;books&quot;, key=&quot;#isbn&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">findBook</span><span class="params">(ISBN isbn, <span class="type">boolean</span> checkWarehouse, <span class="type">boolean</span> includeUsed)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Cacheable(cacheNames=&quot;books&quot;, key=&quot;#isbn.rawNumber&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">findBook</span><span class="params">(ISBN isbn, <span class="type">boolean</span> checkWarehouse, <span class="type">boolean</span> includeUsed)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Cacheable(cacheNames=&quot;books&quot;, key=&quot;T(someType).hash(#isbn)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">findBook</span><span class="params">(ISBN isbn, <span class="type">boolean</span> checkWarehouse, <span class="type">boolean</span> includeUsed)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Cacheable(cacheNames=&quot;books&quot;, key=&quot;#map[&#x27;bookid&#x27;].toString()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Book <span class="title function_">findBook</span><span class="params">(Map&lt;String, Object&gt; map)</span></span><br></pre></td></tr></table></figure>
<p><strong>缓存的同步 sync：</strong><br>
在多线程环境下，某些操作可能使用相同参数同步调用。默认情况下，缓存不锁定任何资源，可能导致多次计算，而违反了缓存的目的。对于这些特定的情况，属性 sync 可以指示底层将缓存锁住，使只有一个线程可以进入计算，而其他线程堵塞，直到返回结果更新到缓存中。<br>
例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Cacheable(cacheNames=&quot;foos&quot;, sync=&quot;true&quot;)</span><br><span class="line">public Foo executeExpensiveOperation(String id) &#123;...&#125;</span><br></pre></td></tr></table></figure>
<p><strong>属性condition：</strong><br>
有时候，一个方法可能不适合一直缓存（例如：可能依赖于给定的参数）。属性condition支持这种功能，通过SpEL 表达式来指定可求值的boolean值，为true才会缓存（在方法执行之前进行评估）。<br>
例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Cacheable(cacheNames=&quot;book&quot;, condition=&quot;#name.length &lt; 32&quot;)</span><br><span class="line">public Book findBook(String name)</span><br></pre></td></tr></table></figure>
<p>此外，还有一个unless 属性可以用来是决定是否添加到缓存。与condition不同的是，unless表达式是在方法调用之后进行评估的。如果返回false，才放入缓存（与condition相反）。 #result指返回值 例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Cacheable(cacheNames=&quot;book&quot;, condition=&quot;#name.length &lt; 32&quot;, unless=&quot;#result.name.length &gt; 5&quot;&quot;)</span><br><span class="line">public Book findBook(String name)</span><br></pre></td></tr></table></figure>
<h2 id="CachePut"><a class="header-anchor" href="#CachePut"></a>@CachePut</h2>
<p>@CachePut标注的方法在执行前<strong>不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@CachePut(cacheNames=&quot;book&quot;, key=&quot;#isbn&quot;)</span><br><span class="line">public Book updateBook(ISBN isbn, BookDescriptor descriptor)</span><br></pre></td></tr></table></figure>
<p>注意：应该避免@CachePut 和 @Cacheable同时使用的情况。</p>
<h2 id="CacheEvict"><a class="header-anchor" href="#CacheEvict"></a>@CacheEvict</h2>
<p>移除缓存条目</p>
<p>@CacheEvict要求指定一个或多个缓存，使之都受影响。此外，还提供了一个额外的参数allEntries 。表示是否需要清除缓存中的所有元素。默认为false，表示不需要。当指定了allEntries为true时，Spring Cache将忽略指定的key。有的时候我们需要Cache一下清除所有的元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@CacheEvict(cacheNames=&quot;books&quot;, allEntries=true)</span><br><span class="line">public void loadBooks(InputStream batch)</span><br></pre></td></tr></table></figure>
<p>清除操作默认是在对应方法成功执行之后触发的，即方法如果因为抛出异常而未能成功返回时也不会触发清除操作。使用beforeInvocation可以改变触发清除操作的时间，当我们指定该属性值为true时，Spring会在调用该方法之前清除缓存中的指定元素。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@CacheEvict(cacheNames=&quot;books&quot;, beforeInvocation=true)</span><br><span class="line">public void loadBooks(InputStream batch)</span><br></pre></td></tr></table></figure>
<h2 id="CacheConfig"><a class="header-anchor" href="#CacheConfig"></a>@CacheConfig</h2>
<p>有时候一个类中可能会有多个缓存操作，而这些缓存操作可能是重复的。这个时候可以使用@CacheConfig</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@CacheConfig(&quot;books&quot;)</span><br><span class="line">public class BookRepositoryImpl implements BookRepository &#123;</span><br><span class="line"></span><br><span class="line">    @Cacheable</span><br><span class="line">    public Book findBook(ISBN isbn) &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@CacheConfig是一个类级别的注解，允许共享缓存的名称、KeyGenerator、CacheManager 和CacheResolver。<br>
该操作会被覆盖。</p>
<h2 id="用XML配置缓存"><a class="header-anchor" href="#用XML配置缓存"></a>用XML配置缓存</h2>
<p>就是在XML里面指定缓存规则要应用到哪些方法， 避免在源代码里写<code>@Cacheable()</code>,  比较晦涩，不好用</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring JDBC and data source config</title>
    <url>/2022/03/22/Spring-JDBC-and-data-source-config/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Spring DAO</li>
<li>DataSource</li>
<li>JDBC</li>
</ul>
<p>ref: <em>Spring In Action</em></p>
<span id="more"></span>
<h1 id="Spring-DAO"><a class="header-anchor" href="#Spring-DAO"></a>Spring DAO</h1>
<ul>
<li>数据访问对象 （data  access object）DAO  == Repository</li>
</ul>
<h2 id="异常体系"><a class="header-anchor" href="#异常体系"></a>异常体系</h2>
<ul>
<li>SQLException
<ul>
<li>发生异常时难以恢复</li>
<li>难确定异常类型</li>
<li>是一个check异常</li>
</ul>
</li>
<li>Hibernate异常
<ul>
<li>定义了许多具体异常</li>
<li>对业务对象的侵入</li>
</ul>
</li>
<li>Spring所提供的平台无关的持久化异常
<ul>
<li>DataAccessException， 属于runtimeException,属于uncheck异常</li>
<li>具体异常，方便定位问题</li>
<li>隔离具体的数据库平台</li>
</ul>
</li>
</ul>
<h2 id="模板方法模式"><a class="header-anchor" href="#模板方法模式"></a>模板方法模式</h2>
<p>模板方法定义过程的主要框架，template</p>
<ul>
<li>管理资源</li>
<li>事务控制</li>
<li>处理异常</li>
</ul>
<p>变化的部分，回调（callback），自定义的数据访问代码</p>
<p>Spring提供的模板</p>
<ul>
<li>JdbcTemplate</li>
<li>HibernateTemplate</li>
<li>JpaTemplate</li>
</ul>
<h1 id="DataSource"><a class="header-anchor" href="#DataSource"></a>DataSource</h1>
<h2 id="配置数据源"><a class="header-anchor" href="#配置数据源"></a>配置数据源</h2>
<p>四种方式：</p>
<ul>
<li>
<p>使用JNDI数据源</p>
<ul>
<li>
<p>（Java 命名与目录接口（Java Naming and Directory Interface） ）</p>
</li>
<li>
<p>在Web容器中配置JNDI参数，定义一个数据源</p>
</li>
<li>
<p>Spring中配置JNDI数据源</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jee:jndi-lookup</span> <span class="attr">id</span>=<span class="string">“dataSource”</span></span></span><br><span class="line"><span class="tag">  <span class="attr">jndi-name</span>=<span class="string">“/jdbc/**DS”</span></span></span><br><span class="line"><span class="tag"><span class="attr">resource-ref</span>=<span class="string">“true”/</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>连接池的数据源</p>
</li>
<li>
<p>通过JDBC驱动程序定义数据源</p>
<ul>
<li>DriverManagerDataSource：注意没有进行池化处理</li>
<li>SingleConnectionDataSource:只有一个连接的池</li>
</ul>
</li>
<li>
<p>使用Spring配置嵌入式数据源</p>
<ul>
<li><code>&lt;jdbc:embedded-database&gt;</code></li>
<li>可以创建数据表和初始化数据</li>
<li>用于开发和测试</li>
</ul>
</li>
</ul>
<p>以JDBC为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span> <span class="comment">//通过@PropertySource(&quot;jdbc.properties&quot;)读取数据库配置文件；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span> <span class="comment">//通过@Value(&quot;$&#123;jdbc.url&#125;&quot;)注入配置文件的相关配置；</span></span><br><span class="line">    String jdbcUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    String jdbcUsername;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    String jdbcPassword;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//创建一个DataSource实例，它的实际类型是HikariDataSource，创建时需要用到注入的配置；</span></span><br><span class="line">    DataSource <span class="title function_">createDataSource</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="type">HikariConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HikariConfig</span>();</span><br><span class="line">        config.setJdbcUrl(jdbcUrl);</span><br><span class="line">        config.setUsername(jdbcUsername);</span><br><span class="line">        config.setPassword(jdbcPassword);</span><br><span class="line">        config.addDataSourceProperty(<span class="string">&quot;autoCommit&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        config.addDataSourceProperty(<span class="string">&quot;connectionTimeout&quot;</span>, <span class="string">&quot;5&quot;</span>);</span><br><span class="line">        config.addDataSourceProperty(<span class="string">&quot;idleTimeout&quot;</span>, <span class="string">&quot;60&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HikariDataSource</span>(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//创建一个JdbcTemplate实例，它需要注入DataSource，这是通过方法参数完成注入的。</span></span><br><span class="line">    JdbcTemplate <span class="title function_">createJdbcTemplate</span><span class="params">(<span class="meta">@Autowired</span> DataSource dataSource)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数据库配置文件"><a class="header-anchor" href="#数据库配置文件"></a>数据库配置文件</h3>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">jdbc.properties：</span></span><br><span class="line"><span class="comment"># 数据库文件名为testdb:</span></span><br><span class="line"><span class="string">jdbc.url=jdbc:hsqldb:file:testdb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Hsqldb默认的用户名是sa，口令是空字符串:</span></span><br><span class="line"><span class="string">jdbc.username=sa</span></span><br><span class="line"><span class="string">jdbc.password=</span></span><br></pre></td></tr></table></figure>
<h2 id="使用profile选择数据源"><a class="header-anchor" href="#使用profile选择数据源"></a>使用profile选择数据源</h2>
<p>建立开发、测试、生产环境的不同数据源</p>
<p>配置文件+注解， 原理和SpringBoot一样， SpringBoot采用yml格式，比Spring的Profile简易很多，这里就不介绍Spring的了</p>
<h1 id="JDBC"><a class="header-anchor" href="#JDBC"></a>JDBC</h1>
<h2 id="使用步骤"><a class="header-anchor" href="#使用步骤"></a>使用步骤</h2>
<p>如上文所示</p>
<ol>
<li>首先要创建并管理一个<code>DataSource</code>实例，表示数据库<strong>连接池</strong>；</li>
<li>然后实例化一个<code>JdbcTemplate</code>来操作JDBC</li>
</ol>
<p><code>JdbcTemplate</code>查询的内部实现：</p>
<ul>
<li>从全局<code>DataSource</code>实例获取<code>Connection</code>实例；</li>
<li>通过<code>Connection</code>实例创建<code>PreparedStatement</code>实例；</li>
<li>执行SQL语句，如果是查询，则通过<code>ResultSet</code>读取结果集，如果是修改，则获得<code>int</code>结果。</li>
</ul>
<h2 id="Spring-JDBC框架"><a class="header-anchor" href="#Spring-JDBC框架"></a>Spring JDBC框架</h2>
<ul>
<li>JDBC模板：资源管理和异常处理</li>
<li>JdbcTemplate</li>
<li>NamedParameterJdbcTemplate</li>
</ul>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring ORM</title>
    <url>/2022/03/22/Spring-ORM/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>object-relational mapping</li>
<li>Hibernate、MyBatis</li>
<li>JPA (Java Persistence API)</li>
<li>APPENDIX： 一些好用的ORM Tips</li>
</ul>
<p>ref: <em>Spring In Action</em></p>
<span id="more"></span>
<table>
<thead>
<tr>
<th style="text-align:left">JDBC</th>
<th style="text-align:left">Hibernate</th>
<th style="text-align:left">JPA</th>
<th style="text-align:left">MyBatis</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">DataSource</td>
<td style="text-align:left">SessionFactory</td>
<td style="text-align:left">EntityManagerFactory</td>
<td style="text-align:left">SqlSessionFactory</td>
</tr>
<tr>
<td style="text-align:left">Connection</td>
<td style="text-align:left">Session</td>
<td style="text-align:left">带有<code>@PersistenceContext</code>注解的<br><code>EntityManager</code>代理类</td>
<td style="text-align:left">SqlSession</td>
</tr>
</tbody>
</table>
<h1 id="Hibernate"><a class="header-anchor" href="#Hibernate"></a>Hibernate</h1>
<h2 id="配置"><a class="header-anchor" href="#配置"></a>配置</h2>
<ul>
<li>
<p>获得<code>org.hibernate.Session</code>接口的实现类, 这需要我们创建一个<code>LocalSessionFactoryBean</code>，它会自动创建一个<code>SessionFactory</code></p>
<ul>
<li>
<p>在Hibernate中，<code>Session</code>是封装了一个JDBC <code>Connection</code>的实例，而<code>SessionFactory</code>是封装了JDBC <code>DataSource</code>的实例，即<code>SessionFactory</code>持有连接池，每次需要操作数据库的时候，<code>SessionFactory</code>创建一个新的<code>Session</code>，相当于从连接池获取到一个新的<code>Connection</code></p>
</li>
<li>
<p>在hibernate4，我们一般用：<code>org.springframework.orm.hibernate4.LocalSessionFactoryBean</code></p>
</li>
</ul>
</li>
<li>
<p>Hibernate作为ORM框架，可以替代<code>JdbcTemplate</code>，但Hibernate仍然需要JDBC驱动，所以，我们需要引入JDBC驱动、连接池，以及Hibernate本身， 并配置DataSource</p>
</li>
<li>
<p>定义映射关系：XML、注解（JPA、Hibernate）</p>
</li>
</ul>
<h3 id="配置数据源等"><a class="header-anchor" href="#配置数据源等"></a>配置数据源等</h3>
<p>创建DataSource、引入JDBC配置文件，以及启用声明式事务：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    DataSource <span class="title function_">createDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SessionFactory"><a class="header-anchor" href="#SessionFactory"></a>SessionFactory</h3>
<p>使用<code>org.springframework.orm.hibernate4.LocalSessionFactoryBean</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">LocalSessionFactoryBean <span class="title function_">createSessionFactory</span><span class="params">(<span class="meta">@Autowired</span> DataSource dataSource)</span> &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();<span class="comment">//hibernateProperties属性配置了Hibernate如何进行操作的细节</span></span><br><span class="line">    props.setProperty(<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span>, <span class="string">&quot;update&quot;</span>); <span class="comment">// 表示自动创建数据库的表结构，生产环境不要使用</span></span><br><span class="line">    props.setProperty(<span class="string">&quot;hibernate.dialect&quot;</span>, <span class="string">&quot;org.hibernate.dialect.HSQLDialect&quot;</span>);<span class="comment">//指示Hibernate使用的数据库是HSQLDB</span></span><br><span class="line">    props.setProperty(<span class="string">&quot;hibernate.show_sql&quot;</span>, <span class="string">&quot;true&quot;</span>); <span class="comment">//让Hibernate打印执行的SQL，这对于调试非常有用</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">sessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalSessionFactoryBean</span>();</span><br><span class="line">    sessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">    <span class="comment">// 扫描指定的package获取所有entity class:</span></span><br><span class="line">    sessionFactoryBean.setPackagesToScan(<span class="string">&quot;com.itranswarp.learnjava.entity&quot;</span>);</span><br><span class="line">    sessionFactoryBean.setHibernateProperties(props);</span><br><span class="line">    <span class="keyword">return</span> sessionFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="查询"><a class="header-anchor" href="#查询"></a>查询</h2>
<p>三类查询：</p>
<ul>
<li>
<p>HQL:hibernate query language，即hibernate提供的面向对象的查询语言</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select/update/delete…… from …… where …… group by …… having …… order by …… asc/desc</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>QBC查询: query by criteria 完全面向对象的查询</p>
</li>
<li>
<p>本地SQL查询</p>
</li>
</ul>
<h2 id="Repository-的作用"><a class="header-anchor" href="#Repository-的作用"></a>@Repository 的作用</h2>
<ul>
<li>
<p><code>@Component</code></p>
</li>
<li>
<p>转换成Spring的统一异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> BeanPostProcessor <span class="title function_">persistenceTranslation</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PersistenceExceptionTranslationPostProcessor</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="MyBatis"><a class="header-anchor" href="#MyBatis"></a>MyBatis</h1>
<ul>
<li>
<p>MyBatis是半自动的ORM，只负责把ResultSet自动映射到Java Bean，或者自动填充Java Bean参数，但仍需自己写出SQL</p>
</li>
<li>
<p>可以用注解或XML配置， 后者比较繁琐，不介绍了</p>
</li>
<li>
<p><code>application-**.yml</code>中的配置</p>
<ul>
<li>配置数据源</li>
<li><code>mapper-locations</code>指定</li>
</ul>
</li>
<li>
<p>定义接口（使用注解<code>@Mapper</code>）</p>
</li>
<li>
<p><code>mapper/***Mapper.xml</code></p>
</li>
</ul>
<h2 id="配置-2"><a class="header-anchor" href="#配置-2"></a>配置</h2>
<h3 id="配置数据源等-2"><a class="header-anchor" href="#配置数据源等-2"></a>配置数据源等</h3>
<h3 id="SqlSessionFactory"><a class="header-anchor" href="#SqlSessionFactory"></a>SqlSessionFactory</h3>
<p>使用MyBatis的核心就是创建<code>SqlSessionFactory</code>，这里我们需要创建的是<code>SqlSessionFactoryBean</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">SqlSessionFactoryBean createSqlSessionFactoryBean(@Autowired DataSource dataSource) &#123;</span><br><span class="line">    var sqlSessionFactoryBean = new SqlSessionFactoryBean();</span><br><span class="line">    sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">    return sqlSessionFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为MyBatis可以直接使用Spring管理的声明式事务，因此，创建事务管理器和使用JDBC是一样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean</span><br><span class="line">PlatformTransactionManager createTxManager(@Autowired DataSource dataSource) &#123;</span><br><span class="line">    return new DataSourceTransactionManager(dataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Mapper"><a class="header-anchor" href="#Mapper"></a>Mapper</h3>
<p>和Hibernate不同的是，MyBatis使用Mapper来实现映射，而且Mapper必须是接口。我们以User类为例，在User类和users表之间映射的UserMapper编写如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface UserMapper &#123;</span><br><span class="line">	@Select(&quot;SELECT * FROM users WHERE id = #&#123;id&#125;&quot;)</span><br><span class="line">	User getById(@Param(&quot;id&quot;) long id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="MapperScan"><a class="header-anchor" href="#MapperScan"></a>@MapperScan</h3>
<p>Mybatis将Mapper接口动态代理，生成实现类。 要识别到Mapper接口，有两种方法：</p>
<ul>
<li>
<p>使用<code>@Mapper</code>标识Mapper接口， 比较繁琐：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDAO</span> &#123;</span><br><span class="line">   <span class="comment">//代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在某个配置类中启用<code>@MapperScan()</code>，并指定Mapper接口所在的包， 该包下的所有接口都会被动态代理：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@MapperScan(&quot;com.itranswarp.learnjava.mapper&quot;)</span><br><span class="line">...其他注解...</span><br><span class="line">public class AppConfig &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>可以扫描多个包： <code>@MapperScan(&#123;&quot;com.kfit.demo&quot;,&quot;com.kfit.user&quot;&#125;)  </code></li>
<li>这个注解实际上会生成<code>MapperFactoryBean</code>，后者会自动创建包下所有Mapper的实现类</li>
</ul>
</li>
</ul>
<p>：</p>
<h2 id="Mapper语法"><a class="header-anchor" href="#Mapper语法"></a>Mapper语法</h2>
<p>在定义了接口方法后，还需要明确写出查询的SQL, SQL的每个参数都与方法参数按名称对应</p>
<ul>
<li>
<p>例如，方法参数id的名字通过注解<code>@Param()</code>标记为<code>id</code>，则SQL语句里将来替换的占位符就是<code>#&#123;id&#125;</code></p>
</li>
<li>
<p>如果有多个参数，那么每个参数命名后直接在SQL中写出对应的占位符即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Select(&quot;SELECT * FROM users LIMIT #&#123;offset&#125;, #&#123;maxResults&#125;&quot;)</span><br><span class="line">List&lt;User&gt; getAll(@Param(&quot;offset&quot;) int offset, @Param(&quot;maxResults&quot;) int maxResults);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="SELECT"><a class="header-anchor" href="#SELECT"></a>SELECT</h3>
<p>MyBatis将ResultSet的每一行转换为Domain实例， 转换规则当然是按列名和属性名对应。如果列名和属性名不同, 需要用别名：</p>
<ul>
<li>
<p>对于SELECT语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 列名是created_time，属性名是createdAt:</span></span><br><span class="line"><span class="keyword">SELECT</span> id, name, email, created_time <span class="keyword">AS</span> createdAt <span class="keyword">FROM</span> users</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="INSERT"><a class="header-anchor" href="#INSERT"></a>INSERT</h3>
<p>MyBatis插入时， 需要将对象的属性转换成列：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;INSERT INTO users (email, password, name, createdAt) VALUES (#&#123;user.email&#125;, #&#123;user.password&#125;, #&#123;user.name&#125;, #&#123;user.createdAt&#125;)&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="meta">@Param(&quot;user&quot;)</span> User user)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>在SQL中以<code>#&#123;obj.property&#125;</code>的方式写占位符</li>
</ul>
<p>如果表的id是自增主键，那么，我们在SQL中不传入id，但希望获取插入后的主键，需要再加一个<code>@Options</code>注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;, keyColumn = &quot;id&quot;)</span></span><br><span class="line"><span class="meta">@Insert(&quot;INSERT INTO users (email, password, name, createdAt) VALUES (#&#123;user.email&#125;, #&#123;user.password&#125;, #&#123;user.name&#125;, #&#123;user.createdAt&#125;)&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="meta">@Param(&quot;user&quot;)</span> User user)</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>keyProperty</code>：JavaBean 的属性</li>
<li><code>keyColumn</code>： 数据库的主键列名</li>
</ul>
<h3 id="UPDATE"><a class="header-anchor" href="#UPDATE"></a>UPDATE</h3>
<p>执行UPDATE和DELETE语句相对比较简单，我们定义方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Update(&quot;UPDATE users SET name = #&#123;user.name&#125;, createdAt = #&#123;user.createdAt&#125; WHERE id = #&#123;user.id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="meta">@Param(&quot;user&quot;)</span> User user)</span>;</span><br></pre></td></tr></table></figure>
<h3 id="DELETE"><a class="header-anchor" href="#DELETE"></a>DELETE</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;DELETE FROM users WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="type">long</span> id)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="使用Mapper"><a class="header-anchor" href="#使用Mapper"></a>使用Mapper</h2>
<p>在Service层直接注入Mapper, 使用Mapper提供的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 注入UserMapper:</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用Mapper方法:</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;User not found by id.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="JPA"><a class="header-anchor" href="#JPA"></a>JPA</h1>
<ul>
<li>JPA的宗旨是为POJO提供持久化标准规范</li>
<li>JPQL（Java Persistence Query Language)</li>
<li>JPQL就是一种查询语言，具有与 SQL 相类似的特征</li>
<li>JPA语法大全</li>
</ul>
<h2 id="配置-3"><a class="header-anchor" href="#配置-3"></a>配置</h2>
<p>步骤：</p>
<ol>
<li>配置数据源等</li>
<li>创建<code>EntityManagerFactoryBean</code>， 它会生成一个<code>SessionFactory</code></li>
<li>将<code>SessionFactory</code>注入到<code>JpaTransactionManager</code>， 以实现声明式事务</li>
</ol>
<ul>
<li>
<p>使用Hibernate时，我们需要创建一个<code>LocalSessionFactoryBean</code>，并让它再自动创建一个<code>SessionFactory</code>。使用JPA也是类似的，我们需要创建一个<code>EntityManagerFactoryBean</code>，并让它再自动创建一个<code>EntityManagerFactory</code>，</p>
<ul>
<li><code>EntityManagerFactory</code>:  是个工厂Bean, 会创建创建<code>EntityManager</code>
<ul>
<li><code>org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean</code></li>
<li>``org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter`</li>
</ul>
</li>
<li><code>javax.persistence.EntityManager</code></li>
</ul>
</li>
<li>
<p><code>EntityManager</code>不是线程安全的， Spring遇到标注了<code>@PersistenceContext</code>的<code>EntityManager</code>会自动注入代理，该代理会在必要的时候自动打开<code>EntityManager</code>。换句话说，多线程引用的<code>EntityManager</code>虽然是同一个代理类，但该代理类内部针对不同线程会创建不同的<code>EntityManager</code>实例。因此，标注了<code>@PersistenceContext</code>的<code>EntityManager</code>可以被多线程安全地共享。</p>
<ul>
<li><code>@PersistenceUnit</code></li>
<li><code>@PersistenceContext</code></li>
</ul>
</li>
</ul>
<h3 id="配置数据源等-3"><a class="header-anchor" href="#配置数据源等-3"></a>配置数据源等</h3>
<p>在<code>AppConfig</code>中启用声明式事务管理，创建<code>DataSource</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    DataSource <span class="title function_">createDataSource</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="EntityManagerFactory"><a class="header-anchor" href="#EntityManagerFactory"></a>EntityManagerFactory</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">LocalContainerEntityManagerFactoryBean <span class="title function_">createEntityManagerFactory</span><span class="params">(<span class="meta">@Autowired</span> DataSource dataSource)</span> &#123;</span><br><span class="line">    <span class="type">var</span> <span class="variable">entityManagerFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalContainerEntityManagerFactoryBean</span>();</span><br><span class="line">    <span class="comment">// 设置DataSource:</span></span><br><span class="line">    entityManagerFactoryBean.setDataSource(dataSource);</span><br><span class="line">    <span class="comment">// 扫描指定的package获取所有entity class:</span></span><br><span class="line">    entityManagerFactoryBean.setPackagesToScan(<span class="string">&quot;com.itranswarp.learnjava.entity&quot;</span>);</span><br><span class="line">    <span class="comment">// 指定JPA的提供商是Hibernate:</span></span><br><span class="line">    <span class="type">JpaVendorAdapter</span> <span class="variable">vendorAdapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HibernateJpaVendorAdapter</span>();</span><br><span class="line">    entityManagerFactoryBean.setJpaVendorAdapter(vendorAdapter);</span><br><span class="line">    <span class="comment">// 设定特定提供商自己的配置:</span></span><br><span class="line">    <span class="type">var</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    props.setProperty(<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span>, <span class="string">&quot;update&quot;</span>);</span><br><span class="line">    props.setProperty(<span class="string">&quot;hibernate.dialect&quot;</span>, <span class="string">&quot;org.hibernate.dialect.HSQLDialect&quot;</span>);</span><br><span class="line">    props.setProperty(<span class="string">&quot;hibernate.show_sql&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    entityManagerFactoryBean.setJpaProperties(props);</span><br><span class="line">    <span class="keyword">return</span> entityManagerFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="JpaTransactionManager"><a class="header-anchor" href="#JpaTransactionManager"></a>JpaTransactionManager</h3>
<h2 id="Spring-Data-JPA"><a class="header-anchor" href="#Spring-Data-JPA"></a>Spring Data JPA</h2>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>加注解<code>@EnableJpaRepositories</code>
<ul>
<li>会扫描<code>org.springframework.data.repository.Repository</code>接口</li>
</ul>
</li>
<li>继承接口<code>org.springframework.data.jpa.repository.JpaRepository</code></li>
</ul>
<h2 id="编写自定义的查询方法"><a class="header-anchor" href="#编写自定义的查询方法"></a>编写自定义的查询方法</h2>
<ul>
<li>定义查询方法，无需实现
<ul>
<li>领域特定语言（domain-specific language，DSL)，spring data的命名约定</li>
<li>查询动词 + 主题 + 断言</li>
<li>查询动词：get、read、find、count</li>
</ul>
</li>
<li>声明自定义查询<br>
不符合方法命名约定时，或者命名太长时： <code>@Query(“select ...”)</code></li>
<li>使用EntityManager直接低层实现
<ul>
<li>接口名+Impl的实现类</li>
</ul>
</li>
</ul>
<h1 id="实体类"><a class="header-anchor" href="#实体类"></a>实体类</h1>
<p>需要添加注解来告诉ORM如何把实体类映射到表记录</p>
<ul>
<li><strong>作为映射使用的JavaBean，所有属性都使用包装类型而不是基本类型</strong>（ Mybatis是个例外，这是因为它不是全ORM框架 ）</li>
<li>如果一个JavaBean被用于映射，我们就标记一个<code>@Entity</code>。默认情况下，实体类User映射的表名是<code>user</code>，如果实际的表名不同，例如实际表名是<code>users</code>，可以追加一个<code>@Table(name=&quot;users&quot;)</code>表示</li>
<li>对于主键，还需要用<code>@Id</code>标识，自增主键再追加一个<code>@GeneratedValue</code>，以便Hibernate能读取到自增主键的值</li>
<li>每个属性到数据库列的映射用<code>@Column()</code>标识，<code>nullable</code>指示列是否允许为<code>NULL</code>，<code>updatable</code>指示该列是否允许被用在<code>UPDATE</code>语句，<code>length</code>指示<code>String</code>类型的列的长度（如果没有指定，默认是<code>255</code>）</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123; <span class="comment">//映射到表名user</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="meta">@Column(nullable = false, updatable = false)</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, unique = true, length = 100)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, length = 100)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, length = 100)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, updatable = false)</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getCreatedAt</span><span class="params">()</span> &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Appendex"><a class="header-anchor" href="#Appendex"></a>Appendex</h1>
<h2 id="MySQL与JAVA数据类型对应关系"><a class="header-anchor" href="#MySQL与JAVA数据类型对应关系"></a>MySQL与JAVA数据类型对应关系</h2>
<table>
<thead>
<tr>
<th style="text-align:left">These MySQL Data Types</th>
<th style="text-align:left">Can always be converted to these Java types</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>CHAR, VARCHAR, BLOB, TEXT, ENUM, and SET</code></td>
<td style="text-align:left"><code>java.lang.String, java.io.InputStream, java.io.Reader, java.sql.Blob, java.sql.Clob</code></td>
</tr>
<tr>
<td style="text-align:left"><code>FLOAT, REAL, DOUBLE PRECISION, NUMERIC, DECIMAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT</code></td>
<td style="text-align:left"><code>java.lang.String, java.lang.Short, java.lang.Integer, java.lang.Long, java.lang.Double, java.math.BigDecimal</code></td>
</tr>
<tr>
<td style="text-align:left"><code>DATE, TIME, DATETIME, TIMESTAMP</code></td>
<td style="text-align:left"><code>java.lang.String, java.sql.Date, java.sql.Timestamp</code></td>
</tr>
</tbody>
</table>
<h2 id="MYSQL存URL最佳类型"><a class="header-anchor" href="#MYSQL存URL最佳类型"></a>MYSQL存URL最佳类型</h2>
<p>MySQL 5.0.3及更高版本中VARCHAR的有效最大长度受最大行大小（65,535字节，在所有列之间共享）和使用的字符集的限制。</p>
<p>所以，存储url最佳类型为：</p>
<ul>
<li><code>&lt; MySQL 5.0.3 use TEXT</code></li>
<li><code>&gt;= MySQL 5.0.3 use VARCHAR(2083)</code></li>
</ul>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Static Link &amp;&amp; Dynamic Link</title>
    <url>/2022/09/26/Static-Link-Dynamic-Link/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>static link</li>
<li>static load</li>
<li>dynamic link &amp;&amp; load</li>
</ul>
<span id="more"></span>
<h2 id="Link-Load"><a class="header-anchor" href="#Link-Load"></a>Link &amp; Load</h2>
<p>静态库： <code>.a</code></p>
<p>动态库( aka 共享对象 ): <code>.so</code></p>
<h3 id="static-link"><a class="header-anchor" href="#static-link"></a>static link</h3>
<ul>
<li>需求： 允许引用其他文件（C标准称为编译单元<code>compilation unit</code>）里定义的符号
<ul>
<li>C不阻止你随便声明符号的类型</li>
<li>但类型不匹配是<code>undefined behavior </code></li>
</ul>
</li>
<li>使用<code>-Wl,--verbose</code>可以将<code>--verbose</code>传递给<code>ld</code>
<ul>
<li>可以看到<code>ld script</code></li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a.c</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">foo</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//b.c</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> y = <span class="number">200</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> x,y;</span><br><span class="line"></span><br><span class="line"><span class="comment">// extern int foo(int a, int b);</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> foo;可以看到</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// printf(&quot;%d + %d = %d\n&quot;, x, y, foo(x,y) );</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x\n&quot;</span>, foo );</span><br><span class="line">    foo = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">//Makefile</span><br><span class="line">CFLAGE := -Os</span><br><span class="line"></span><br><span class="line"><span class="section">a.out: a.o b.o main.o</span></span><br><span class="line">		gcc -static -Wl,--verbose a.o b.o main.o</span><br><span class="line"><span class="section">a.o: a.c</span></span><br><span class="line">		gcc <span class="variable">$(CFLAGS)</span> -c a.c</span><br><span class="line"><span class="section">b.o: b.c</span></span><br><span class="line">		gcc <span class="variable">$(CFLAGS)</span> -c b.c</span><br><span class="line"></span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line">		gcc <span class="variable">$(CFLAGS)</span> -c main.c</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">		rm -f *.o a.out</span><br></pre></td></tr></table></figure>
<ul>
<li>刚编译完程序的时候，<code>main.o</code>不能运行，因为其外部符号都“留空”
<ul>
<li><code>objdump -d a.o</code></li>
<li>（符号地址还没有解析，暂时是全零）</li>
</ul>
</li>
<li>链接后<code>objdump -d a.out | grep main</code> 可以看到其外部符号已经被正确赋值</li>
</ul>
<h3 id="static-load"><a class="header-anchor" href="#static-load"></a>static load</h3>
<p>静态ELF加载器：加载a.out时执行</p>
<ul>
<li>
<p>ELF文件中有若干个ELF program header， 描述了文件到内存的映射。</p>
</li>
<li>
<p>静态ELF加载器根据ELF program header,将文件中指定部分移动到内存</p>
<ul>
<li>遍历ELF中的各个<code>program header</code>，然后<code>read</code>/ <code>mmap</code></li>
</ul>
</li>
<li>
<p>OS在<code>execve</code>时执行：</p>
<ul>
<li>
<p>OS在kernel mode调用<code>mmap</code></p>
<p>(进程还未准备好时，由内核直接执行系统调用)</p>
</li>
<li>
<p>映射好<code>a.out</code>代码、数据、堆、栈、vvar、vdso、vsyscall</p>
</li>
</ul>
</li>
<li>
<p>加载完成后，静态链接的程序就从ELF entry开始执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> readelf -h a.out                             </span><br><span class="line">ELF Header:</span><br><span class="line">  Magic:   7f 45 4c 46 02 01 01 03 00 00 00 00 00 00 00 00 </span><br><span class="line">  Class:                             ELF64</span><br><span class="line">  Data:                              2&#x27;s complement, little endian</span><br><span class="line">  Version:                           1 (current)</span><br><span class="line">  OS/ABI:                            UNIX - GNU</span><br><span class="line">  ABI Version:                       0</span><br><span class="line">  Type:                              EXEC (Executable file)</span><br><span class="line">  Machine:                           Advanced Micro Devices X86-64</span><br><span class="line">  Version:                           0x1</span><br><span class="line">  Entry point address:               0x401670 //ELF entry 0x401670</span><br><span class="line">  Start of program headers:          64 (bytes into file)</span><br><span class="line">  Start of section headers:          795088 (bytes into file)</span><br><span class="line">  Flags:                             0x0</span><br><span class="line">  Size of this header:               64 (bytes)</span><br><span class="line">  Size of program headers:           56 (bytes)</span><br><span class="line">  Number of program headers:         10</span><br><span class="line">  Size of section headers:           64 (bytes)</span><br><span class="line">  Number of section headers:         32</span><br><span class="line">  Section header string table index: 31</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb a.out  </span><br><span class="line">...</span><br><span class="line">(gdb) starti</span><br><span class="line">Starting program: /home/lyk/Documents/Hexo/LYK-love.github.io/source/_drafts/Test/a.out </span><br><span class="line"></span><br><span class="line">Program stopped.</span><br><span class="line">0x0000000000401670 in _start () //可以看到，确实是0x401670</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看该进程的地址空间：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(gdb) info inferiors</span><br><span class="line">  Num  Description       Connection           Executable        </span><br><span class="line">* 1    process 15776     1 (native)           /home/lyk/Documents/Hexo/LYK-love.github.io/source/_drafts/Test/a.out </span><br><span class="line">(gdb) !cat /proc/15776/maps</span><br><span class="line">00400000-00401000 r--p 00000000 103:08 3802167                           .../LYK-love.github.io/source/_drafts/Test/a.out</span><br><span class="line">00401000-00482000 r-xp 00001000 103:08 3802167                           .../LYK-love.github.io/source/_drafts/Test/a.out</span><br><span class="line">00482000-004a9000 r--p 00082000 103:08 3802167                           .../LYK-love.github.io/source/_drafts/Test/a.out</span><br><span class="line">004aa000-004b1000 rw-p 000a9000 103:08 3802167                           .../LYK-love.github.io/source/_drafts/Test/a.out</span><br><span class="line">004b1000-004b2000 rw-p 00000000 00:00 0                                  [heap]</span><br><span class="line">7ffff7ff9000-7ffff7ffd000 r--p 00000000 00:00 0                          [vvar]</span><br><span class="line">7ffff7ffd000-7ffff7fff000 r-xp 00000000 00:00 0                          [vdso]</span><br><span class="line">7ffffffde000-7ffffffff000 rw-p 00000000 00:00 0                          [stack]</span><br><span class="line">ffffffffff600000-ffffffffff601000 --xp 00000000 00:00 0                  [vsyscall]</span><br><span class="line">(gdb) </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可看到的确有上述内容</p>
</li>
</ul>
<p>静态链接缺点：导致复用性降低，磁盘过多被占用</p>
<h3 id="dynamic-link-load"><a class="header-anchor" href="#dynamic-link-load"></a>dynamic link &amp; load</h3>
<ul>
<li>
<p>需求： 节约内存</p>
</li>
<li>
<p>Linux系统会共享动态链接库的一个副本（可以用<code>size</code>查看内存占用）</p>
</li>
<li>
<p>实现动态加载（代码）：</p>
<ul>
<li>编译成<code>Position Independent Code</code>( PIC )
<ul>
<li>引用代码全部使用PC相对寻址</li>
<li>x86已经是这样了</li>
</ul>
</li>
<li>把代码<code>mmap</code>进进程的地址空间</li>
</ul>
</li>
<li>
<p>实现动态加载（代码+数据+允许访问其他动态链接库导出的符号）：</p>
<ul>
<li>编译成<code>Position Independent Code</code>( <strong>PIC</strong> )
<ul>
<li>引用代码全部使用PC相对寻址</li>
<li>x86已经是这样了</li>
</ul>
</li>
<li>对于其他动态链接库导出的符号，可以在数据区维护一张表，每次引用该符号时就<strong>查表</strong>。在运行时给相应的表项赋值</li>
<li>把代码<code>mmap</code>到进程的地址空间</li>
</ul>
</li>
<li>
<p>ELF文件都有 <code>Global Offset Table</code>GOT， 即上述的“表”</p>
<ul>
<li>Lazy Symbol Resolution: 不一次性加载GOT的所有符号</li>
</ul>
</li>
</ul>
<h1 id="Example"><a class="header-anchor" href="#Example"></a>Example</h1>
<p>编写两个简单的程序（fred.c, bill.c），将其编译为目标文件，并分别生成静态库和动态库。再编写程序调用之，说明库的使用。</p>
<ol>
<li>生成静态链接库
<ol>
<li><code>gcc -c h.c -o h.o</code></li>
<li><code>ar cqs libh.a h.o</code>：ar是生成库的命令，cqs是参数，libh.a是生成的静态链接库须以lib开头，h是库名，a表示是静态链接库，h.o是刚生成的目标文件</li>
</ol>
</li>
<li>生成动态链接库
<ol>
<li><code>gcc -c h.c -o h.o</code></li>
<li><code>gcc -shared -WI -o libh.so h.o</code>：生成动态链接库使用gcc来完成，-shared -WI是参数，libh.so是刚生成的静态链接库，必须以lib开头，h是库名，so表示动态链接库，h.o是刚生成目标文件。</li>
</ol>
</li>
<li>将生成的libh.a，libh.so拷贝到/usr/lib或/lib下</li>
<li>编译带静态链接库的程序
<ol>
<li><code>gcc -c test.c -o test.o</code></li>
<li><code>gcc test.o -o test -WI -Bstatic -lh</code>:-WI -Bstatic表示链接静态库，-lh中-l表示链接，h是库名即/usr/lib下的libh.a</li>
</ol>
</li>
<li>编译带动态链接库的程序
<ol>
<li><code>gcc -c test.c -o test.o</code></li>
<li><code>gcc test.o -o test -WI -Bdynamic -lh</code>:-WI -Bdynamic表示链接动态库，-lh中-l表示链接，h是库名即/usr/lib下的libh.so</li>
</ol>
</li>
<li>运行./test得到结果</li>
</ol>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>String Algorithms</title>
    <url>/2022/04/11/String-Algorithms/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>String Sort</li>
<li>Tries</li>
<li>Substring Search</li>
<li>Regex</li>
<li>Data Compress</li>
</ul>
<p>目前只更新到String Sort</p>
<span id="more"></span>
<h1 id="String-Sort"><a class="header-anchor" href="#String-Sort"></a>String Sort</h1>
<p>因为字符串天然就有序（ascii， unicode序），因此可以用桶排序的方法，进行key indexed counting, 这样排序不需要比较，也就能达到线性时间</p>
<ul>
<li>这里我用的序都是ascii序，当然你也可以自定义一个符号表，然后用符号表里的序</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StringSortStrategy</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">LSD</span><span class="params">(  vector&lt;string&gt; &amp;strs)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">MSD</span><span class="params">( vector&lt;string&gt; &amp;strs)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Quick3string</span><span class="params">( vector&lt;string&gt; &amp;strs)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">LSD</span><span class="params">(  vector&lt;string&gt; &amp;strs , <span class="type">int</span> W)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">MSD</span><span class="params">( vector&lt;string&gt; &amp;strs, vector&lt;string&gt; &amp;aux, vector&lt;<span class="type">int</span>&gt; &amp;count, <span class="type">const</span> <span class="type">int</span> lo, <span class="type">const</span> <span class="type">int</span> hi, <span class="type">const</span> <span class="type">int</span> d )</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Quick3string</span><span class="params">( vector&lt;string&gt; &amp; strs, <span class="type">const</span> <span class="type">int</span> lo, <span class="type">const</span> <span class="type">int</span> hi, <span class="type">const</span> <span class="type">int</span> d )</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">StringSortStrategy::LSD</span><span class="params">(  vector&lt;string&gt; &amp;strs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> W = strs[<span class="number">0</span>].<span class="built_in">length</span>();</span><br><span class="line">    <span class="built_in">LSD</span>( strs, W );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StringSortStrategy::MSD</span><span class="params">( vector&lt;string&gt; &amp;strs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> R = <span class="number">256</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(R+<span class="number">2</span>)</span></span>;</span><br><span class="line">    <span class="type">int</span> N = strs.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">aux</span><span class="params">(N)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">MSD</span>(strs, aux, count, <span class="number">0</span>, N - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StringSortStrategy::Quick3string</span><span class="params">(vector&lt;string&gt; &amp;strs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> N = strs.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">Quick3string</span>( strs, <span class="number">0</span>, N<span class="number">-1</span>, <span class="number">0</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="工具函数"><a class="header-anchor" href="#工具函数"></a>工具函数</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">char</span> <span class="title">CharAt</span><span class="params">(<span class="type">const</span> string s, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i &lt; s.<span class="built_in">length</span>())</span><br><span class="line">		<span class="keyword">return</span> s[i];</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">exch</span><span class="params">(string &amp;s1, string &amp;s2)</span> </span>&#123;</span><br><span class="line">	string tmp = s1;</span><br><span class="line">	s1 = s2;</span><br><span class="line">	s2 = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Less</span><span class="params">(string s1, string s2, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> s1.<span class="built_in">substr</span>(d).<span class="built_in">compare</span>(s2.<span class="built_in">substr</span>(d)) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InsertionSort</span><span class="params">(vector&lt;string&gt; &amp;a, <span class="type">int</span> lo, <span class="type">int</span> hi, <span class="type">int</span> d)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = lo; i &lt;= hi; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = i; j &gt; lo &amp;&amp; <span class="built_in">Less</span>(a[j], a[j - <span class="number">1</span>], d); j--)</span><br><span class="line">			<span class="built_in">exch</span>(a[j], a[j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="LSD"><a class="header-anchor" href="#LSD"></a>LSD</h2>
<p>LSD算法对等长的字符串数组从右往左按key进行排序，确保稳定性。 由于是key indexed counting, 不需要元素之间两两比较，因此可以达到线性复杂度</p>
<p>思路是把所有元素按key放在对应的桶里面，桶与桶之间按桶内的元素数拉开距离，然后对于每个桶，对其每个元素进行位置的分配。最后将结果写回到原来的strs数组</p>
<p>例如， 当前要将所有字符串的第0个字符（这里都是从右往左的，也就是倒数第0个字符）作为key进行排序，假设key为A的字符串有3个， key为B的字符串有5个，key为C的字符串有8个</p>
<ol>
<li>可以装三个桶，key为A的桶有三个元素，key为B的桶有5个元素，key为C的桶有8个元素；</li>
<li>然后桶之间拉开距离，A桶和B桶之间距离为5， B桶和C桶间的距离为8；</li>
<li>然后给每个桶内的元素分配坐标，对于B桶中五个元素，就把它们按在原strs中的顺序（<strong>这一步确保了算法的稳定性</strong>）分配到A，B桶之间的空间中，其他桶亦如此，这样所有字符串就排好了序；</li>
<li>接着把上述结果写回到原strs中；</li>
<li>再对下一个key位置进行迭代（这里就是第1个字符）</li>
</ol>
<ul>
<li>注意<code>count[0]</code>必须存0值，表示下标分配时，最小桶的起始下标从0开始分配。比如0桶存放在<code>count[1]</code>,0桶元素的下标分配就在<code>count[0]</code>和<code>count[1]</code>之间的空间中</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @param strs: 要排序的字符串列表，LSD要求所有字符串都是等长的（当然不等长的话修改算法也可以排序，但是一般我们     		直接用MSD）</span></span><br><span class="line"><span class="comment">* @param W : 要排序的key的范围，比如W=3，就代表对从右往左的三位进行排序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">StringSortStrategy::LSD</span><span class="params">(vector&lt;string&gt; &amp;strs , <span class="type">int</span> W)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> R = ALPHABET_SIZE;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> N = strs.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> len = strs[<span class="number">0</span>].<span class="built_in">length</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">aux</span><span class="params">(N)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> w = len - <span class="number">1</span>; w &gt;= len - W; w--  )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> count[ R+<span class="number">1</span> ] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span> ; i &lt; N; i++ ) <span class="comment">// count frequencies, 装满桶</span></span><br><span class="line">        &#123;</span><br><span class="line">            count[<span class="built_in">CharAt</span>(strs[i], w) + <span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">1</span>; i &lt; R+<span class="number">1</span>; i++ )<span class="comment">//桶之间拉开距离</span></span><br><span class="line">        &#123;</span><br><span class="line">            count[i] += count[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++ )<span class="comment">//桶内元素在空间中进行分配</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> r = <span class="built_in">CharAt</span>(strs[i],w);</span><br><span class="line">            aux[  count[ r ]++ ] = strs[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++ )<span class="comment">//写回</span></span><br><span class="line">        &#123;</span><br><span class="line">            strs[ i ] = aux[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="MSD"><a class="header-anchor" href="#MSD"></a>MSD</h2>
<p>MSD同样是key indexed count的桶排序，但是是从左向右扫，并且能允许不同长度的字符串</p>
<p>MSD可以看作是从左往右的LSD，并且将空key（因为字符串长度可能不够了，那一位的key可能为空）放在一个特别的空桶上，其余性质不变。 因此MSD也是稳定, 线性时间的</p>
<p>由于要处理空key，我们将空key的key定义为-1 (见<code>CharAt()</code>函数 )， 本来按LSD算法，桶的大小要存放在下一个count中，比如key为A的元素的个数（即A桶的大小）存放在<code>count[B]</code>。 由于count[0]必须是0值，所以只能把-1桶放在<code>count[1]</code>, 0桶放在<code>count[2]</code>... 相当于所有count后延一位.这样, -1取代0成为符号表最初的元素，-1桶元素的下标也就从<code>count[0]</code>和<code>count[1]</code>的空间中分配。</p>
<p>总体思路和LSD一模一样，只不过是从左到右的，并且count要后延一位</p>
<ul>
<li>注意到MSD对短字符串的处理性能不佳，因此对于短字符串( <code>hi - lo &lt;= M </code>)就直接用插入排序了。 这一步还顺便处理了递归的终止条件，即<code>hi - lo &lt;= 0 </code>的情况</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">StringSortStrategy::MSD</span><span class="params">( vector&lt;string&gt; &amp;strs, vector&lt;string&gt; &amp;aux, vector&lt;<span class="type">int</span>&gt; &amp;count, <span class="type">const</span> <span class="type">int</span> lo, <span class="type">const</span> <span class="type">int</span> hi, <span class="type">const</span> <span class="type">int</span> d )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> M = <span class="number">3</span>, R = <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (hi &lt;= lo + M) &#123;</span><br><span class="line">		<span class="built_in">InsertionSort</span>(strs, lo, hi, d);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span>; i &lt;  R + <span class="number">2</span>; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        count[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i = lo; i &lt;= hi; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        count[ <span class="built_in">CharAt</span>(strs[i],d) + <span class="number">2</span> ]++; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">1</span>; i &lt; R+<span class="number">2</span>; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        count[i] += count[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i = lo; i &lt;= hi; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        aux[ count[ <span class="built_in">CharAt</span>( strs[i],d ) + <span class="number">1</span> ]++ ] = strs[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i = lo; i &lt;= hi; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        strs[i] = aux[i - lo];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>( <span class="type">int</span> i = <span class="number">0</span>; i &lt; R; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">MSD</span>( strs, aux, count, lo + count[i], lo + count[i+<span class="number">1</span>] - <span class="number">1</span>, d+<span class="number">1</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="三向排序"><a class="header-anchor" href="#三向排序"></a>三向排序</h2>
<p>三向排序混合了桶排序（MSD）和快排， 由于引入了快排，所以是不稳定排序，但依然是线性时间</p>
<p>和MSD的区别是，MSD将每个key作为一个桶，而三向排序通过快排只引入三个桶 ----</p>
<ul>
<li>key小于指定key的桶( 放到lt左边)</li>
<li>key等于指定key的桶（lt ～ ht ）</li>
<li>和key大于指定key的桶（ht右边）</li>
</ul>
<p>对于key种类很少的情况，可以用三向排序，这样产生的桶更少，子数组就更少</p>
<p>和传统快排的区别在于，快排要左右分别开始扫，扫到符合要求的元素就分别停下，这样做是为了方便两边对换；但是对于三向排序，不需要两边对换（只需要把元素换到左/右界之外），所以也没必要从两边开始扫。一遍就够了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">StringSortStrategy::Quick3string</span><span class="params">(vector&lt;string&gt; &amp;strs, <span class="type">const</span> <span class="type">int</span> lo, <span class="type">const</span> <span class="type">int</span> hi, <span class="type">const</span> <span class="type">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( hi &lt;= lo )</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> v = <span class="built_in">CharAt</span>(strs[lo],d); <span class="comment">//pivot</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> lt = lo, gt = hi; <span class="comment">//桶的界限，小桶会放到lt左边，大桶放到gt右边，与指定key相等的桶就放到lt，gt之间</span></span><br><span class="line">    <span class="type">int</span> i = lo+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>( i &lt;= gt ) <span class="comment">//循环可保证，lt之前的值永远小于v， gt之后的值永远大于v</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">CharAt</span>(strs[i],d);</span><br><span class="line">        <span class="keyword">if</span>( t &lt; v )</span><br><span class="line">            <span class="built_in">exch</span>(strs[i++], strs[lt++]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( t &gt; v )</span><br><span class="line">                <span class="built_in">exch</span>( strs[i], strs[gt--] ); <span class="comment">//不能保证换过来的gt之后的值就是v了，因此不能i++，需要再次进循环</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Quick3string</span>(strs, lo, lt<span class="number">-1</span>, d);</span><br><span class="line">    <span class="keyword">if</span>( v &gt; <span class="number">0</span> )</span><br><span class="line">        <span class="built_in">Quick3string</span>(strs, lt, gt , d + <span class="number">1</span> );</span><br><span class="line">    <span class="built_in">Quick3string</span>( strs, gt + <span class="number">1</span>, hi, d );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>Survey</title>
    <url>/2022/06/24/Survey/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Definition of Survey</li>
<li>Survey Types</li>
<li>Survey Steps</li>
</ul>
<span id="more"></span>
<h1 id="Def"><a class="header-anchor" href="#Def"></a>Def</h1>
<p>Survey是对一大批样本进行研究，以理解样本的某些特征或行为</p>
<ul>
<li>和Case Study的区别： Case Study研究某个具体的对象，而Survey对一大批样本进行研究</li>
</ul>
<p>Survey研究示例表格：</p>
<table>
<thead>
<tr>
<th>characteristic</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>type of objectives</td>
<td>To identify how KMS helps in developing and maintaining trust in GSD team members.</td>
</tr>
<tr>
<td>type of survey design</td>
<td>Cross-section. 182 responses were received from all over the world in three weeks.</td>
</tr>
<tr>
<td>survey administration</td>
<td>Web-based. a questionnaire was developed and administered on the web.</td>
</tr>
<tr>
<td>developing instrument</td>
<td>A questionnaire was prepared based on tested questions used in the literature in order to enhance the validity of the questions. Where validated items were unavailable, new questions were developed based on literature study. <br />Responses of each questionnaire item was given on a 5-point scaling ranging from 5= “strongly agree” to 1= “strongly disagree”. The questionnaire was divided into two parts; part one was related to the personal information of the respondent and the second part consist of actual 35-items questions. (close question, ordinal scales)</td>
</tr>
<tr>
<td>population</td>
<td>The population consists of those people who are working in GSD organizations, posses some experience of using KMS and are using KMS in their organizations.</td>
</tr>
<tr>
<td>sampling method</td>
<td>Not mentioned. The survey link was sent through the email to invite the GSD organizations employees who are using KMS in their organizations. The sampling method of this study is not mentioned in the article, and we speculate that the sampling method of this study may be <strong>non-probabilistic sampling.</strong></td>
</tr>
<tr>
<td>sample size</td>
<td>Not mentioned. A total of 182 responses were received from all over the world. After analysis 6 questionnaires were discarded as they were incomplete, hence total 176 questionnaires were considered for analysis.</td>
</tr>
<tr>
<td>response rate</td>
<td>Not mentioned. Across the study, we can only know that the respondents number is 182. But we don't know how many employees received the email with link of questionaire.</td>
</tr>
<tr>
<td>evaluate the instrument</td>
<td>Not mentioned.</td>
</tr>
<tr>
<td>data analysis</td>
<td>quantitative analysis</td>
</tr>
</tbody>
</table>
<h1 id="Types"><a class="header-anchor" href="#Types"></a>Types</h1>
<ul>
<li>
<p>Questionnaire-based survey</p>
<ul>
<li>longitudinal survey</li>
<li>cross-sectional survey</li>
</ul>
</li>
<li>
<p>Interview</p>
<ul>
<li>structured interview</li>
<li>semi-structured interview – open-ended interview?</li>
</ul>
</li>
<li>
<p>Literature survey</p>
<ul>
<li>ad hoc literature review专门的文献检查</li>
<li>systematic (literature) review – mapping study</li>
<li>meta-analysis</li>
</ul>
</li>
</ul>
<h1 id="Steps"><a class="header-anchor" href="#Steps"></a>Steps</h1>
<ol>
<li>
<p>Setting objectives</p>
</li>
<li>
<p>Survey design</p>
</li>
<li>
<p>Developing instrument (questionnaire)</p>
</li>
<li>
<p>Evaluating instrument</p>
</li>
<li>
<p>Obtaining data</p>
</li>
<li>
<p>Analysing data</p>
</li>
<li>
<p>Reporting survey</p>
</li>
</ol>
<h2 id="1-Setting-objectives"><a class="header-anchor" href="#1-Setting-objectives"></a>1.Setting objectives</h2>
<ul>
<li>to evaluate the rate or frequency of some characteristic that occurs in a population</li>
<li>to assess the severity of some characteristic or condition that occurs in a population</li>
<li>to identify factors that influence a characteristic or condition</li>
</ul>
<h2 id="2-Survey-design"><a class="header-anchor" href="#2-Survey-design"></a>2.Survey design</h2>
<ul>
<li>
<p>横断面式Cross-sectional: 参与者被要求提供一个固定的时间点上的信息</p>
</li>
<li>
<p>纵向式Longitudinal: 参与者提供关于特定人群随时间变化的信息，以确定影响某一特征或条件的因素</p>
</li>
<li>
<p>Other forms of survey design</p>
<ul>
<li>e.g., compare different populations</li>
</ul>
</li>
<li>
<p>Self-administrated questionnaires：自编问卷</p>
<ul>
<li>web-based (Internet)</li>
<li>email or newsletter</li>
</ul>
</li>
<li>
<p>Telephone surveys</p>
</li>
<li>
<p>Interviews</p>
<ul>
<li>one-to-one interviews</li>
<li>one-to-multiple interviews</li>
</ul>
</li>
</ul>
<h2 id="3-Developing-instrument-questionnaire"><a class="header-anchor" href="#3-Developing-instrument-questionnaire"></a>3.Developing instrument (questionnaire)</h2>
<h3 id="Construct-an-Instrument"><a class="header-anchor" href="#Construct-an-Instrument"></a>Construct an Instrument</h3>
<ul>
<li>Open <em>or</em> closed questions</li>
<li>Designing questions
<ul>
<li>appropriate language and fully defined terms</li>
<li>standard grammar, punctuation and spelling</li>
<li>single concept per question</li>
<li>no vague or ambiguous qualifiers</li>
<li>negative or positive questions but double negative</li>
<li>no sensitive or privacy questions</li>
</ul>
</li>
</ul>
<h3 id="answer-types"><a class="header-anchor" href="#answer-types"></a>answer types</h3>
<ul>
<li>
<p>numeric values</p>
</li>
<li>
<p>response categories</p>
<ul>
<li>exhaustive but not too long</li>
<li>mutually exclusive</li>
<li>multiple selections?</li>
<li>an “other” category?</li>
</ul>
</li>
<li>
<p>yes/no answers</p>
</li>
<li>
<p>顺序量表</p>
</li>
<li>
<p>文字回答</p>
</li>
</ul>
<h2 id="motivation"><a class="header-anchor" href="#motivation"></a>motivation</h2>
<p>What is the purpose of the study?</p>
<h2 id="4-Evaluating-instrument"><a class="header-anchor" href="#4-Evaluating-instrument"></a>4.Evaluating instrument</h2>
<ul>
<li>Reliability</li>
<li>Validity</li>
</ul>
<h2 id="5-Obtaining-Data"><a class="header-anchor" href="#5-Obtaining-Data"></a>5.Obtaining Data</h2>
<ul>
<li>Probabilistic sampling</li>
<li>Cluster-base sampling： surveying individuals that belong to defined groups</li>
<li>Non-probabilistic sampling： 不随机</li>
</ul>
<h2 id="6-Analyzing-Data"><a class="header-anchor" href="#6-Analyzing-Data"></a>6.Analyzing Data</h2>
<p><em>“If you are not sure or don</em>’<em>t know an answer just leave the line blank; otherwise it is important to answer YES or NO to the first section of every Technique/Technology section.”</em></p>
]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
      <tags>
        <tag>Empirical SE</tag>
      </tags>
  </entry>
  <entry>
    <title>Software Engineering Intro</title>
    <url>/2021/06/28/Software%20Engineering%20Intro/</url>
    <content><![CDATA[<h1 id="软件"><a class="header-anchor" href="#软件"></a>软件</h1>
<p>软件以程序代码为核心， 由三个部分组成：</p>
<ol>
<li>程序， 机器指令的集合</li>
<li>文档， 描述程序操作与使用的文档</li>
<li>数据， 程序运行时需要使用的信息</li>
</ol>
<span id="more"></span>
<ul>
<li>Software is independent of hardware</li>
<li>Software is a tool</li>
<li>Software = programs + documents + data + knowledge •</li>
<li>Software development is much more complicated than programming</li>
<li>Application software originate from the reality, and reversely improve the reality</li>
</ul>
<h1 id="软件工程"><a class="header-anchor" href="#软件工程"></a>软件工程</h1>
<h2 id="Definition"><a class="header-anchor" href="#Definition"></a>Definition</h2>
<ul>
<li><code>[IEEE610.12-1990]</code>
<ul>
<li>（1）The application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software; that is, the application of engineering to software. 应用<strong>系统</strong>的， <strong>规范</strong>的， <strong>可量化</strong>的方法来开发， 运行和维护软件， 即<strong>将工程应用到软件</strong></li>
<li>（2）The study of approaches as in （1）  对（1）中各种方法的研究</li>
</ul>
</li>
</ul>
<h2 id="Engineering"><a class="header-anchor" href="#Engineering"></a>Engineering</h2>
<ul>
<li>
<p>软件工程是一种工程活动, 它具备所有工程活动共同的特性. <code>[Shaw1990]</code>认为所有工程学科共同的特性有5点:</p>
<ul>
<li>具有解决实际问题的动机：
<ul>
<li>⼯程学解决实际问题，⽽这些问题来源于⼯程领域之外的⼈——消费者。</li>
</ul>
</li>
<li>应⽤<strong>科学知识</strong>指导⼯程活动：
<ul>
<li>⼯程学不依赖于个⼈的技能，⽽是强调以科学知识为指导，按照特定⽅法与技术，进⾏规律性的设计、分析等活动，实现⼯程活动 的可学习性和可重复性。</li>
</ul>
</li>
<li>以成本效益⽐有效为基本条件：
<ul>
<li>⼯程学不单单只是解决问题，它要有效利⽤所有资源，⾄少成本要低于效益，即成本效益⽐有效。</li>
</ul>
</li>
<li>构建机器或事物：
<ul>
<li>⼯程学强调构建实物⼯具，例如机器、事物等，并利⽤实物⼯具来解决问题。</li>
</ul>
</li>
<li>以服务⼈类为最终⽬的：
<ul>
<li>⼯程学考虑的不是单个客户的需要，⽽是要运⽤技术和经验实现全社会的进步。</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>[CCSE2004]</code>对工程师的要求:</p>
<ul>
<li>⼯程师通过⼀系列的讨论决策，仔细评估项⽬的可选活动，并在每个决策点选择⼀种在当前环境中适合当前任务的⽅法进⾏⼯作。可以通过对成本和收益进⾏折衷分析调整相应策略。</li>
<li>⼯程师需要对某些对象进⾏<strong>度量</strong>，有时需要定量的⼯作；他们要校准和确认度量⽅法，并根据经验和实验数据进⾏估算。</li>
<li>软件⼯程师强调项⽬设计过程的<strong>纪律性</strong>，这是团队⾼效⼯作的条件。</li>
<li>⼯程师可胜任研究、开发、设计、⽣产、测试、构造、操作、管理，以及销售、咨询和培训等多种⻆⾊。</li>
<li>⼯程师们需要在某些过程中使⽤⼯具，选择和使⽤合适的⼯具是⼯程的关键要素。</li>
<li>⼯程师们通过专业协会发展和确认原理、标准和最佳实践⽅法，并提⾼个⼈能⼒。</li>
<li>⼯程师们能够重⽤设计和设计制品。</li>
</ul>
</li>
</ul>
<h2 id="Understanding-of-Software-Engineering"><a class="header-anchor" href="#Understanding-of-Software-Engineering"></a>Understanding of Software Engineering</h2>
<ul>
<li>软件⼯程是⼀种⼯程活动</li>
<li>软件⼯程的动机是解决实际问题</li>
<li>软件⼯程是科学性、实践性和⼯艺性并重的</li>
<li>软件⼯程追求⾜够好，不是最好</li>
<li>软件⼯程真正的产品是基于虚拟计算机的软件⽅案</li>
<li>软件⼯程的最终⽬的是要促进整个社会的进步</li>
</ul>
<h1 id="软件工程概览"><a class="header-anchor" href="#软件工程概览"></a>软件工程概览</h1>
<h2 id="知识域"><a class="header-anchor" href="#知识域"></a>知识域</h2>
<p>太多了,不表</p>
<h2 id="软件开发活动"><a class="header-anchor" href="#软件开发活动"></a>软件开发活动</h2>
<ul>
<li>软件开发是软件工程的主要任务, 包括<code>需求开发</code>, <code>软件设计</code>, <code>软件构造(construction)</code>, <code>软件测试</code>, <code>软件交付与维护</code>等具体活动</li>
</ul>
<h3 id="需求开发"><a class="header-anchor" href="#需求开发"></a>需求开发</h3>
<ul>
<li>从空白开始, 主要目的是建立<code>软件解决方案</code>, 具体任务包括:
<ol>
<li>探索并明确描述现实世界信息</li>
<li>探索并定义问题</li>
<li>建立软件系统的解决方案,  使得将软件系统应用到现实世界之后能解决问题</li>
</ol>
</li>
<li><code>软件解决方案</code>也称为<code>软件产品设计方案</code>. 产品设计方案是从用户视角和与外界互动的方式描述产品.</li>
<li>需求开发产生的主要制品是<code>软件需求规格说明( Software Requirement Specification , SRS)文档</code> 和 <code>需求分析模型</code>, <code>软件需求规格说明文档</code>详细描述了软件解决方案的内容, <code>需求分析模型</code>重点描述了软件解决方案中的复杂技术方案</li>
</ul>
<h3 id="软件设计"><a class="header-anchor" href="#软件设计"></a>软件设计</h3>
<ul>
<li>软件设计在需求开发之后进行, 它以<code>软件需求规格说明</code>为基础, 主要目的是建立<code>软件系统的构建方案</code>, 具体任务包括:
<ol>
<li><code>软件体系结构设计</code>, 确定系统的高层结构</li>
<li><code>详细设计</code>, 将高层结构的部件设计为更详细的的模块与类, 定义模块与类的功能以及它们的接口</li>
<li><code>人机交互设计</code>, 设计软件系统与外界的有效交互方案, 包括设计用户界面</li>
</ol>
</li>
<li><code>软件构建方案</code>又称为<code>软件工程设计方案</code>, 是由抽象软件实体组成的复杂概念结构. 工程方案是从生产者的角度和产品内部结构的方式描述产品.</li>
<li>软件设计产生的主要制品是<code>软件设计描述(Software Design Description, SDD)文档</code> 和 <code>软件设计模型</code>, <code>SDD文档</code>详细描述了软件构建方案的内容,  <code>软件设计模型</code>重点描述了软件构建方案的复杂细节</li>
</ul>
<h3 id="软件构造"><a class="header-anchor" href="#软件构造"></a>软件构造</h3>
<ul>
<li>
<p>软件构造在软件设计之后进行, 它以<code>软件构建方案</code>为基础, 主要目的是使用编程语言实现软件构建方案.具体任务包括:</p>
<ol>
<li>程序设计, 以&quot;数据结构+算法&quot;的方式继续细化和深化<code>软件构建方案</code>基本单位(模块或者类)的设计</li>
<li>编程</li>
<li>调试</li>
</ol>
</li>
<li>
<p>主要制品是程序源代码和编译后的可执行程序</p>
</li>
</ul>
<h3 id="软件测试"><a class="header-anchor" href="#软件测试"></a>软件测试</h3>
<ul>
<li>主要目的是验证和确认软件产品的质量, 它包含两重含义:
<ol>
<li>从技术上保证产品的质量是合格的</li>
<li>保证产品质量是<strong>符合需求规格</strong>的</li>
</ol>
</li>
<li>主要制品是<code>测试报告</code>, 它描述了测试中发现的错误和故障</li>
</ul>
<h3 id="软件交付与维护"><a class="header-anchor" href="#软件交付与维护"></a>软件交付与维护</h3>
<ul>
<li><code>软件交付</code>在软件产品通过所有测试之后进行, 主要目的是将软件产品交付给用户使用. 主要任务包括:
<ol>
<li>安装与部署软件系统</li>
<li><strong>培训用户</strong>使用软件并提供文档支持</li>
</ol>
</li>
<li>主要制品是<code>用户使用手册</code></li>
<li><code>软件维护</code>又称为<code>软件演化</code>, 在软件交付给用户之后进行, 直到软件产品消亡才结束.</li>
</ul>
<h2 id="角色分工"><a class="header-anchor" href="#角色分工"></a>角色分工</h2>
<ul>
<li>需求⼯程师，⼜被称为需求分析师：
<ul>
<li>承担需求开发任务。软件产品的需求开发⼯作通常由多个需求⼯程师来完成，他们共同组成⼀个需 求⼯程师⼩组，在⾸席需求⼯程师的领导下开展⼯作。通常⼀个团队只有⼀个需求⼯程师⼩组。</li>
</ul>
</li>
<li>软件体系结构师：
<ul>
<li>承担软件体系结构设计任务。通常也是由多⼈组成⼀个⼩组，并在⾸席软件体系结构师的领导下开 展⼯作。通常⼀个团队只有⼀个软件体系结构师⼩组。</li>
</ul>
</li>
<li>软件设计师：
<ul>
<li>承担详细设计任务。在软件体系结构设计完成之后，可以将其部件分配给不同的开发⼩组。开发⼩ 组中负责所分配部件详细设计⼯作的⼈员就是软件设计师。⼀个团队可能有⼀个或多个开发⼩组。 ⼀个⼩组可能有⼀个或多个软件设计师。</li>
</ul>
</li>
<li>程序员：
<ul>
<li>承担软件构造任务。程序员与软件设计师通常是同⼀批⼈，也是根据其所分配到的任务开展⼯作。</li>
</ul>
</li>
<li>⼈机交互设计师：
<ul>
<li>承担⼈机交互设计任务。⼈机交互设计师与软件设计师可以是同⼀批⼈，也可以是不同⼈员。在有 多个⼩组的软件⼯程团队中，可以有⼀个单独的⼈机交互设计师⼩组，也可以将⼈机交互设计师分 配到各个⼩组。</li>
</ul>
</li>
<li>软件测试⼈员：
<ul>
<li>承担软件测试任务。软件测试⼈员通常需要独⽴于其他的开发⼈员⻆⾊。⼀个团队可能有⼀个或多 个测试⼩组。⼀个⼩组可能有⼀个或多个软件测试⼈员。</li>
</ul>
</li>
<li>项⽬管理⼈员：
<ul>
<li>负责计划、组织、领导、协调和控制软件开发的各项⼯作。相⽐于传统意义上的管理者，他们不完全是监控者和控制者，更多得是协调者。通常⼀个 团队只有⼀个项⽬管理⼈员。</li>
</ul>
</li>
<li>软件配置管理⼈员：
<ul>
<li>管理软件开发中产⽣的各种制品，具体⼯作是对重要制品进⾏标识、变更控制、状态报告等。通常⼀个团队只有⼀个软件配置管理⼈员。</li>
</ul>
</li>
<li>质量保障⼈员：
<ul>
<li>在⽣产过程中监督和控制软件产品质量的⼈员。通常⼀个团队有⼀个质量保障⼩组，由⼀个或多个⼈员组成。</li>
</ul>
</li>
<li>培训和⽀持⼈员：
<ul>
<li>负责软件移交与维护任务。他们可以是其他开发⼈员的⼀部分，也可以是独⽴的⼈员。</li>
</ul>
</li>
<li>⽂档编写⼈员：
<ul>
<li>专⻔负责写作软件开发各种⽂档的⼈员。他们的存在是为了充分利⽤部分宝贵的⼈⼒资源（例如需求⼯程师和软件体系结构师），让这些⼈⼒资源从 繁杂的⽂档化⼯作中解放出来。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
      <tags>
        <tag>Software Engineering Methodology</tag>
      </tags>
  </entry>
  <entry>
    <title>T3 Balancing</title>
    <url>/2021/08/21/T3-Balancing/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li><strong>找前k大元素</strong></li>
<li><strong>找离medium最近的k个元素</strong></li>
<li><strong>Weighted  medium</strong></li>
<li><strong>找unique</strong></li>
</ul>
<span id="more"></span>
<h1 id="找前k大元素"><a class="header-anchor" href="#找前k大元素"></a>找前k大元素</h1>
<p>（不是第k大）</p>
<ul>
<li>$nlogn$: 排序​</li>
<li>$n+klogn$​​： 建堆，k次<code>getMax</code></li>
<li>$n+k^2$​​​​：建堆+从堆的前k层里面选k次（共有 $2^k$​​​个元素，对这个堆的<code>fixHeap</code>代价是$log2^k=k$​​​,找k次，即$k \times k$​）</li>
<li>$n+klogk$: 先select出第k大的元素，代价$\Theta(n)$；再以此为partition，对前k个元素排序，代价$\Theta(klogk)$​</li>
</ul>
<h1 id="找离medium最近的k个元素"><a class="header-anchor" href="#找离medium最近的k个元素"></a>找离medium最近的k个元素</h1>
<p>左界：$L=n/2 - k$</p>
<p>右界: $R=n/2 + k$</p>
<ul>
<li>先 selcect(L)，找出左界的位置，然后partition（L）；对右界同理；最后对中间的部分做操作（方法有很多）</li>
</ul>
<h1 id="Weighted-medium"><a class="header-anchor" href="#Weighted-medium"></a>Weighted  medium</h1>
<p>$x_1,x_2,\dots,x_n$​两两可比</p>
<p>$w_1,w_2,\dots,w_n$,  $w_i&gt;0$​, ​ $\sum w_i=1$</p>
<p>找出weighted medium $x_k$​, 使得$\sum\limits _{x_i&lt;x_k}w_i &lt; \frac 1 2$​, $ \sum\limits _{x_i &gt; x_k} \leq \frac 1 2$​ （也可以前者$\leq$, 后者$&lt;$,但不能二者都是$\leq$​​）​</p>
<ul>
<li>$O(n)$: 先select得到medium（注意，不是 Weighted  medium）； 再以此partition， 算出左右两边的weight，看哪边大于1/2，对子问题递归判断</li>
</ul>
<h1 id="找unique"><a class="header-anchor" href="#找unique"></a>找unique</h1>
<p>所有元素只有一个和其他不一样，找出这个元素.</p>
<p>critical operation： compare（a, b）= Y ( a = b ) / N ( a != b)</p>
<ul>
<li>可以用adversary argument 找出下界</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>T4 BFS/DFS</title>
    <url>/2021/08/23/T4-BFS-DFS/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>
<p>BFS</p>
<ul>
<li>
<p>skeleton</p>
</li>
<li>
<p>证明: $v.dis = \delta(s,v)$</p>
</li>
<li>
<p>BFS树</p>
</li>
<li>
<p>应用</p>
</li>
</ul>
</li>
<li>
<p>DFS</p>
<ul>
<li>s → all</li>
</ul>
<span id="more"></span>
</li>
</ul>
<h1 id="BFS"><a class="header-anchor" href="#BFS"></a>BFS</h1>
<h2 id="skeleton"><a class="header-anchor" href="#skeleton"></a>skeleton</h2>
<ul>
<li>
<p>BFS-WRAPPER(G)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">foreach node v in G <span class="keyword">do</span></span><br><span class="line">	v.color := WHITE; v.parent := null; v.dis := +∞;</span><br><span class="line">foreach node v in G <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> v.color = WHITE then</span><br><span class="line">        <span class="built_in">BFS</span>(v);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>BFS(G)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Initialize an empty queue queNode;</span><br><span class="line">v.color := GRAY;</span><br><span class="line">v.dis := <span class="number">0</span>;</span><br><span class="line">queNode.<span class="built_in">ENQUE</span>(v);</span><br><span class="line"><span class="keyword">while</span> queNode != empty <span class="keyword">do</span></span><br><span class="line">    w := queNode.<span class="built_in">DEQUE</span>();</span><br><span class="line">	foreach neighbor x of w <span class="keyword">do</span>:</span><br><span class="line">		<span class="keyword">if</span> x.color := WHITE then</span><br><span class="line">            x.color := GRAY;</span><br><span class="line">			x.parent := w;</span><br><span class="line">			x.dis := w.dis + <span class="number">1</span>;</span><br><span class="line">			queNode.<span class="built_in">ENQUE</span>(x);</span><br><span class="line">	&lt;processing of node w&gt;;</span><br><span class="line">	w.color := BLACK;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="证明-v-dis-delta-s-v"><a class="header-anchor" href="#证明-v-dis-delta-s-v"></a>证明: $v.dis = \delta(s,v)$</h2>
<p>变<strong>量$v.dis$​记录了源点$s$​到节点$v$​最短路径的长度</strong>,对所有节点依据$dis$ 进行了等价类划分</p>
<p>记源点$s$到节点$v$的最短路径长度为$\delta(s,v)$,.现在证明$v.dis = \delta(s,v)$：</p>
<ul>
<li>
<p><strong>引理5.1</strong> 对于有向或无向图$G$, 对任意边$uv$​, 有$\delta(s,v) \leq \delta(s,u)+1$​​.</p>
<p>证明:</p>
<p>如果源点$s$到$u$可达, 则由于$uv$的存在, $s$到$v$同样可达. 所以$s$到$v$最短路径长度必然不超过任意一条$s$到$v$的路径长度(包括$s$到$u$再到$v$这条路径), 所以$\delta(s,v) \leq \delta(s,u)+1$.  若$s$到$u$不可达, 则$\delta(s,u)=\infty$, 不等式同样成立（当然，若$s$到$v$也不可达，此时是 $\infty \leq \infty  + 1$，同样成立）.</p>
</li>
<li>
<p><strong>引理5.2</strong> 从节点$s$​开始BFS, 在遍历结束时, 对每个可达结点$v$​, 有 $v.dis \geq \delta(s,v)$​​.</p>
<p>证明:</p>
<p>采用数学归纳法,对队列上的操作个数归纳, 即证明: 无论队列上执行了多少个操作,  该不变式总是成立: 对于任意$v$, $v.dis \geq \delta(s,v)$.</p>
<p>初始情况是队列执行第一个操作, 即将源点$s$放入队列中. 此时$s.dis \geq \delta(s,s)=0$. 对于其他任意节点$v$, $v.dis = +\infty \geq \delta(s,v)$. 所以初始情况下结论成立.</p>
<p>由于出队操作对结论没有影响( 出队不会更改 $v.dis$), 只需要关注入队操作. 假设在处理节点$u$时, 发现白色邻居$v$. 根据归纳假设, 有$u.dis \geq \delta(s,u)$. 对于$v$, 有:<br>
$$<br>
v.dis = u.dis + 1( BFS的实现 ) \</p>
<p>\quad \quad  \geq \delta(s,u)+1 ( 归纳假设 ) \</p>
<p>\geq \delta(s,v) ( 引理5.1 )<br>
$$</p>
<p>$$</p>
<p>$$</p>
<p>由于$v.dis$的值一经赋值后不再变化. 所以我们通过归纳法证明了对每个节点$v$, 有 $v.dis \geq \delta(s,v)$​</p>
<hr>
<p>为了证明相等关系的另一半 $v.dis \leq \delta(s,v)$​, 首先要对BFS过程进行更细致的刻画.</p>
</li>
<li>
<p><strong>引理5.3</strong> 假设在BFS过程中, 队列中的元素为$&lt;v_1, v_2, \dots, v_r&gt;$  ( $v_1$是队头, $v_r$​ 是队尾 ). 我们有:</p>
<p>$v_i.dis \leq v_{i+1}.dis$ ( $1 \leq i \leq r+1 $ ) , $ v_r.dis \leq v_1.dis+1 $​</p>
<p>证明:</p>
<p>采用数学归纳法,对队列上的操作归纳. 初始情况下, 队列中只有源点$s$, 结论显然成立. 下面要证明队列任意执行一个操作(出队或入队), 上述结论总是成立.</p>
<p>假设队头元素$v_1$​<strong>出队</strong>, 则$v_2$成为新的队头元素. 根据归纳假设, 有</p>
<p>$v_r.dis \leq v_1.dis + 1 \leq v_2.dis + 1$</p>
<p>从$v_2$到$v_r$​​的所有元素的小于等于关系依然成立. 所以执行一个出队操作后, 要证明的结论保持成立.</p>
<p>假设有一个新元素$v_{r+1}$入队, 此时必然从队首取出一个节点进行处理, 记为$u$. 在处理$u$时, 我们发现了白色邻居$v_{r+1}$并将它放到队列尾部. 此时$v_{r+1}.dis=u.dis+1$. 在$u$出队前的时刻, $u$是队头, $v_1$是队列中的第二个元素, 所以$u.dis \leq v_1.dis$. 根据上面的分析, 有  $v_{r+1}.dis = u.dis +1 \leq v_1.dis  + 1$.</p>
<p>在$u$ 出队之前,$v_{r+1}$未入队时, $u$是队头, $v_r$​是队尾. 同样根据归纳假设, 有</p>
<p>$v_r.dis \leq u.dis+1=v_{r+1}.dis$</p>
<p>对于队列中其他元素而言, 不等关系未受影响.</p>
<p>综上, 基于归纳法我们证明了BFS过程中的任意时刻,</p>
<p>$v_i.dis \leq v_{i+1}.dis$ ( $1 \leq i \leq r+1 $ ) , $ v_r.dis \leq v_1.dis+1 $​</p>
</li>
<li>
<p><strong>定理5.1</strong> 假设从图$G$中的源点$s$开始对整个图完成BFS, 则对任意节点$v$, $v.dis = \delta(s,v)$, 且从$s$到$v$由TE组成的路径就是$s$到$v$的最短路径(不一定是唯一的最短路径)</p>
<p>证明:</p>
<p>采用反证法, 假设存在一些节点, 它们的dis值不等于源点到它们的最短路径值. 在这些节点中, 取源点到其距离最短的节点, 记为 $v$ (显然$v$不可能为$s$ ). 根据引理5.2, 有$v.dis &gt; \delta(s,v)$. 注意$s$到$v$​必然可达, 否则$ \delta(s,v) = + \infty \geq v.dis$​</p>
<p>考察$s$到$v$的最短路径. 记$u$为该路径上在$v$前面的节点, 则 $\delta(s,v)=\delta(s,u)+1$. 根据选取$v$的特定方式, 有$u.dis=\delta(s,u)$ (易证). 由此, 有:<br>
$$<br>
v.dis &gt; \delta(s,v) = \delta(s,u)+1=u.dis+1<br>
$$<br>
下面考察节点$u$刚从队头出队的时刻. 此时节点$v$可能有三种颜色.</p>
<ul>
<li>如果$v$为白色, 则根据BFS框架, 将赋值$v.dis=u.dis+1$, 这与$v.dis &gt; u.dis+1$矛盾</li>
<li>如果$v$为灰色,则记它作为节点$w$的白色邻居被放到队尾, 且 $v.dis = w.dis+1$. 由于$w$比$v$更早离开队列, 所以根据引理5.3, 有$v.dis=w.dis+1 \leq u.dis+1$, 这与$v.dis &gt; u.dis+1$矛盾</li>
<li>如果$v$为黑色, 则在$u$之前它已离开队列, 所以 $v.dis\leq u.dis$, 这与$v.dis &gt; u.dis+1$矛盾</li>
</ul>
<p>证毕.</p>
</li>
</ul>
<h2 id="BFS树"><a class="header-anchor" href="#BFS树"></a>BFS树</h2>
<p>对于边$uv$</p>
<table>
<thead>
<tr>
<th></th>
<th>有向</th>
<th>无向</th>
</tr>
</thead>
<tbody>
<tr>
<td>TE</td>
<td>$v.p = u; v.dis = u.dis+1$</td>
<td>同左</td>
</tr>
<tr>
<td>BE</td>
<td>$0 &lt;= v.dis &lt; u.dis$</td>
<td>nil</td>
</tr>
<tr>
<td>DE</td>
<td>nil</td>
<td>nil</td>
</tr>
<tr>
<td>CE</td>
<td>$v.dis \leq u.dis+1$​</td>
<td>$v.dis = u.dis$​ 或$v.dis = u.dis+1$​</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>有向图</p>
<ul>
<li>
<p>TE: 当遍历节点 $v$ 时，发现其白色邻居 $v$,  则 $uv$​​​​​ 为TE.   在一个连通片内所有TE组成的子图<strong>连通</strong>且<strong>无环</strong>且包含了该连通片中所有节点. 如果忽略所有边的方向, 则这些TE组成当前连通片的一棵生成树,称为&quot;BFS树&quot;</p>
</li>
<li>
<p>BE: 当遍历节点$u$时,发现其黑色邻居 $v$, 且 $v$是$u$在BFS树中的祖先节点, 则$uv$​为BE. 对于BE $uv$, 有 $ 0 \leq v.dis &lt; u.dis$​​.</p>
</li>
<li>
<p>DE: BFS不可能出现DE。反证假设$uv$为DE，那么考察在节点$u$刚出队列,即将处理它的所有邻居的时刻, 节点$v$的情况:</p>
<ul>
<li>节点$v$不可能是白色,否则$uv$为TE</li>
<li>节点$v$不可能为灰色, 因为在此时$u$刚出队列, 而若$v$为灰色(正在队列中), 这和$u$是$v$在遍历树上的祖先节点矛盾</li>
<li>节点$v$不可能是黑色, 在 节点$u$刚出队的时刻, 如果 节点$v$已经结束遍历, 这同样和$u$是$v$​在遍历树上的祖先节点矛盾</li>
</ul>
</li>
<li>
<p>CE: 当遍历节点$u$​时,发现其灰色或者黑色邻居 $v$​, 且$v$​不是$u$​的祖先节点( 前面关于DE的讨论证明了必然不可能是子孙节点 ), 则$uv$​为CE. 对于CE, 有$v.dis \leq u.dis+1$​​</p>
<ul>
<li>与DFS类似, CE同样可能存在于两个不同的BFS树之间</li>
</ul>
</li>
</ul>
</li>
<li>
<p>无向图</p>
<ul>
<li>TE: 与有向图的情况类似,  当遍历节点 $v$ 时，发现其白色邻居 $v$,  则 $uv$ 为TE.  对于TE$(u,v)$​, 有 $v.dis = u.dis+1$. 所有TE组成(当前连通片的)BFS遍历树, 我们为每条TE进行定向, 其方向就是遍历推进的方向.</li>
<li>BE: 不存在（证明易）</li>
<li>DE: 不存在（证明易）</li>
<li>CE: 当遍历节点$u$​​​时,发现其灰色邻居 $v$​​​(前面关于BE和DE的讨论证明了$v$​​​不可能是$u$​​​的祖先或子孙节点), 则$uv$​​​为CE. 对于CE, 有 $v.dis = u.dis$​​​ 或 $v.dis = u.dis+1$​
<ul>
<li>注意, 此时节点$v$​不可能是白色,否则$uv$​为TE; 节点$v$​不可能是黑色, 否则由于无向边$uv$​的存在, 在处理$u$​时, 必然已处理过$uv$​, 此时的边$uv$​是二次遍历,直接被剔除, 不做处理.</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>推论5.1</strong>, 对于BFS过程中的CE $uv$,</p>
<ul>
<li>无向图 $v.dis = u.dis$ 或 $v.dis = u.dis+1$</li>
<li>有向图 $v.dis \leq u.dis+1$​</li>
</ul>
<p>证明:( 书上有图)</p>
<p>对于有向图的CE $uv$,我们考察$v.dis$最大可以比$u.dis$大多少. 注意, 节点$v$发现得越晚, $v.dis$越大. 由于图中有边$uv$的存在, 所以最迟将节点$u$出队列时, 必将访问节点$v$.  所以$v.dis \leq u.dis+1$​</p>
<p>对于无向图的CE $uv$, 当处理$u$时, 根据前面的讨论, $v$只能是灰色, 即$v$在队列中. 根据引理5.3, 有$u.dis \leq v.dis \leq u.dis+1$. 所以$v.dis = u.dis$ 或 $v.dis = u.dis+1$</p>
</li>
</ul>
<h2 id="应用"><a class="header-anchor" href="#应用"></a>应用</h2>
<h3 id="二部图"><a class="header-anchor" href="#二部图"></a>二部图</h3>
<p>给定无向图$G=(V,E)$, 我们称之为二分图， 如果存在顶点$V$的划分$V_1$, $V_2$ ( $V_1 \cap V_2= \emptyset, V_1 \cup V_2=V$ ), 使得图中任意的边均满足它的一个顶点在 $V_1$，另一个顶点在$V_{2}$（ 即，在$V_{1}$ 和 $V_{2}$ 内部， 任意一对顶点没有边相连 ）​​</p>
<p>（等价于二着色问题）</p>
<ul>
<li>发现TE,推进着色； 发现非TE，检查着色</li>
<li>DFS也可以</li>
</ul>
<h3 id="k度子图"><a class="header-anchor" href="#k度子图"></a>k度子图</h3>
<p>给定无向图$G$，定义图$G$的子图$H$​为<em>k</em>度子图，如果每个顶点的度均大于等于输入的参数<em>k</em></p>
<ul>
<li>对于BFS中的点v，若v.d &lt; k(  d为v的度数 )， 则v的邻居d--；</li>
<li>DFS也可以</li>
</ul>
<h1 id="DFS"><a class="header-anchor" href="#DFS"></a>DFS</h1>
<h2 id="s-→-all"><a class="header-anchor" href="#s-→-all"></a>s → all</h2>
<p>有向图G，问是否存在点s，s到所有点可达？</p>
<ul>
<li>
<p>“可达性”可使用SCC，因为SCC是可达性的等价类。求出G的收缩图后，又由于收缩图是有向<strong>无环</strong>图。 则检查每个顶点，若存在至少两个顶点出度为0，则不存在； 若仅存在一个出度为0的顶点，则从该顶点出发遍历</p>
</li>
<li>
<p>对于“all → s”，只需把图转置</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Software Testing</title>
    <url>/2021/06/17/Software%20Testing/</url>
    <content><![CDATA[<ul>
<li>Are you building it “right”?</li>
<li>Are you building the “right” thing?</li>
</ul>
<p>For more information, please read <em>Automatic Testing</em></p>
<span id="more"></span>
<h1 id="软件测试的目的"><a class="header-anchor" href="#软件测试的目的"></a>软件测试的目的</h1>
<ul>
<li>Test suite: a collective term for all the tests</li>
<li>Unit test: a “micro-test” that tests a specific feature in isolation</li>
<li>Integration test: a “macro-test” that runs a larger part of the system to check that different feature or components work <em>together</em>.</li>
<li>Regression test: a test that implements a particular pattern that <em>previously</em> caused a bug to ensure that the bug does not resurface.</li>
<li>Mocking: to replace a function, module, or type with a fake implementation to avoid testing unrelated functionality. For example, you might “mock the network” or “mock the disk”.</li>
</ul>
<ul>
<li>
<p>向开发者和用户展示软件满足了<strong>需求</strong>， 表明软件产品是一个合格的产品</p>
<ul>
<li>有效性测试</li>
</ul>
</li>
<li>
<p>找出软件中的缺陷和不足</p>
<ul>
<li>缺陷测试</li>
</ul>
</li>
</ul>
<h1 id="桩程序和驱动程序"><a class="header-anchor" href="#桩程序和驱动程序"></a>桩程序和驱动程序</h1>
<ul>
<li>
<p>桩程序是被测试部件的交互环境,它扮演被测试部件需要调用的其他系统部件。桩程序对其他系统部件的扮演仅限于规格相同，内部代码要简单地多,通常是直接返回固定数据或者按照固定规则返回数据。</p>
</li>
<li>
<p>驱动程序负责创建被测试部件的执行环境,并驱动和监控被测试部件执行测试用例的过程,判定测试用例的执行结果。</p>
</li>
</ul>
<h1 id="单元测试"><a class="header-anchor" href="#单元测试"></a>单元测试</h1>
<p>略</p>
<h1 id="集成测试"><a class="header-anchor" href="#集成测试"></a>集成测试</h1>
<ul>
<li>
<p>自顶而下集成测试</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20220125170602076.png" alt="自顶而下集成测试"></p>
</li>
<li>
<p>自底向上集成测试</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20220125170614394.png" alt="自底向上集成测试"></p>
</li>
</ul>
<h1 id="系统测试"><a class="header-anchor" href="#系统测试"></a>系统测试</h1>
<ul>
<li>
<p>单元测试、集成测试更加关注<strong>技术</strong>上的正确性,重在发现设计缺陷和代码缺陷。</p>
</li>
<li>
<p>系统测试则不同,它更关注不符合<strong>需求</strong>的缺陷和需求自身的内在缺陷。</p>
<ul>
<li>系统测试关注整个系统的行为,所以不依赖于桩程序和驱动程序。但是，使用一些测试工具可以让系统测试过程更加自动化。</li>
<li>系统测试的功能测试计划以需求规格说明文档或用例文档为基础,主要使用随机测试和基于规格的测试技术设计功能测试用例。在测试非功能性需求时需要使用针对非功能需求的特定测试技术进行测试计划和测试用例设计。</li>
</ul>
</li>
<li>
<p>根据测试目标的不同,有很多不同类型的系统测试:功能测试、非功能性测试、验收测试、安装测试等等。但是发生在软件测试阶段,完全由软件测试人员控制和执行的主要是功能测试和非功能性测试。</p>
</li>
</ul>
<h1 id="测试技术"><a class="header-anchor" href="#测试技术"></a>测试技术</h1>
<ul>
<li>测试用例的选择</li>
<li>随机测试</li>
<li>基于规格的技术-黑盒测试方法</li>
<li>基于代码的技术-白盒测试方法</li>
<li>特定测试技术</li>
</ul>
<h2 id="测试用例的选择"><a class="header-anchor" href="#测试用例的选择"></a>测试用例的选择</h2>
<ul>
<li>测试的目标是发现尽可能多的缺陷,并不绝对要求所有缺陷。</li>
<li>因为测试是有代价的,不仅要耗费桩程序、驱动人力等成本,更重要的是随着测试用例数量增多， 成本会直线上升</li>
<li>所以,软件测试人员需要仔细地选择用例在代价尽可能小的情况下发现足够多的缺陷[Zhu 1997 ]。</li>
<li>测试技术就是帮助软件人员设计和选择用例的。</li>
</ul>
<h2 id="随机测试"><a class="header-anchor" href="#随机测试"></a>随机测试</h2>
<ul>
<li>随机测试( 随机测试 <code>Ad hoc Testing</code> )是一种基于软件工程师直觉和经验的技术, 也许是实践中使用最为广泛的测试技术[SWEBOK2004].</li>
<li>随机测试根据软件工程师的技能， 直觉和对类似程序的经验[MyersI979] ,从所有可能的输入值中选择输入子集,建立测试用例。</li>
</ul>
<h2 id="黑盒测试方法"><a class="header-anchor" href="#黑盒测试方法"></a>黑盒测试方法</h2>
<ul>
<li>
<p>等价类划分</p>
<ul>
<li>
<p>有效等价类:是指对于程序的规格说明 合理、有意义的输入的数据构成的集合。利用有效等价类可检验程序是否实现了规格说明中所定的功能和性能。</p>
</li>
<li>
<p>例子：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>输入</th>
<th>预期输出</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>payment = 100; Total=50;</td>
<td>50</td>
</tr>
<tr>
<td>2</td>
<td>payment = 100; Total=20;</td>
<td>输入数据无效</td>
</tr>
<tr>
<td>3</td>
<td>payment = 50; Total=100;</td>
<td>输入数据无效</td>
</tr>
<tr>
<td>如图的规格说明，可以将输入数据划分为三个等价类：</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>有效数据</li>
<li>无效数据 payment&lt;=0</li>
<li>无效数据 payment&lt;total</li>
</ul>
</li>
</ul>
</li>
<li>
<p>边界值分析</p>
</li>
<li>
<p>决策表</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/image-20220125172134640.png" alt="决策表"></p>
</li>
<li>
<p>状态转换</p>
<ul>
<li>为对象建立<code>状态图</code>,描述测试对象的状态集合，输入集合和输入导致的状态转换集合。</li>
<li>以<code>状态图</code>为基础,可建立测试对象的<code>转换表</code>. 状态转换表每一行都应该被设计为测试用例</li>
</ul>
</li>
</ul>
<h2 id="白盒测试方法"><a class="header-anchor" href="#白盒测试方法"></a>白盒测试方法</h2>
<ul>
<li>语句覆盖
<ul>
<li>语句覆盖设计测试用例的标准是确保被测试对象的每一行程序代码都至少执行一次</li>
</ul>
</li>
<li>条件覆盖
<ul>
<li>条件覆盖设计测试用例的标准是确保程序中每个判断的每个结果都至少满足一次</li>
</ul>
</li>
<li>路径覆盖
<ul>
<li>路径覆盖测试用例的标准是确保程序中每条独立执行路径都<br>
至少执行一次</li>
</ul>
</li>
</ul>
<h2 id="特定测试技术"><a class="header-anchor" href="#特定测试技术"></a>特定测试技术</h2>
<h3 id="面向对象测试技术"><a class="header-anchor" href="#面向对象测试技术"></a>面向对象测试技术</h3>
<ul>
<li>给予状态图设计类的单元测试用例</li>
<li>基于协作设计类之间的集成测试用例</li>
</ul>
<h1 id="测试活动"><a class="header-anchor" href="#测试活动"></a>测试活动</h1>
<h2 id="测试计划"><a class="header-anchor" href="#测试计划"></a>测试计划</h2>
<h2 id="测试设计"><a class="header-anchor" href="#测试设计"></a>测试设计</h2>
<h2 id="测试执行"><a class="header-anchor" href="#测试执行"></a>测试执行</h2>
<h2 id="测试评价"><a class="header-anchor" href="#测试评价"></a>测试评价</h2>
<ul>
<li>
<p>测试用例日志</p>
</li>
<li>
<p>缺陷报告</p>
</li>
<li>
<p>测试度量</p>
<ul>
<li>缺陷数据</li>
<li>测试覆盖率
<ul>
<li>需求覆盖率</li>
<li>模块覆盖率</li>
<li>代码覆盖率</li>
</ul>
</li>
</ul>
</li>
<li>
<p>缺陷度量</p>
<ul>
<li>根据引入缺陷的阶段
<ul>
<li>系统需求缺陷、设计缺陷和编码缺陷</li>
</ul>
</li>
<li>根据缺陷的影响力
<ul>
<li>严重、一般和无影响</li>
</ul>
</li>
</ul>
</li>
<li>
<p>覆盖率</p>
<ul>
<li>需求覆盖率=被测试的需求数量/需求<br>
总数;</li>
<li>模块覆盖率=被测试的模块数量/模块<br>
总数;</li>
<li>代码覆盖率=被测试的代码行/代码行<br>
数总数。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
      <tags>
        <tag>Software Testing</tag>
      </tags>
  </entry>
  <entry>
    <title>T5 图优化</title>
    <url>/2021/08/14/T5-%E5%9B%BE%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li><strong>BestFS</strong></li>
<li><strong>MCE</strong></li>
</ul>
<span id="more"></span>
<h1 id="BestFS-Prim-Dijk"><a class="header-anchor" href="#BestFS-Prim-Dijk"></a>BestFS( Prim, Dijk )</h1>
<p>Free  → Fringe → Finished</p>
<ul>
<li>Fringe的update可能会更新权重</li>
</ul>
<h2 id="代价"><a class="header-anchor" href="#代价"></a>代价</h2>
<ul>
<li>
<p>抽象： $n \times (getMin, deleteMin, Insert)  + m \times (decreaseKey)$</p>
</li>
<li>
<p>Priority Queue:</p>
<ul>
<li>
<p>数组实现优先队列以实现Prim或Dijkstra：  $O(n^2 + m)$​</p>
</li>
<li>
<p>getMin: $O(n)$</p>
</li>
<li>
<p>decreaseKey: $O(1)$</p>
</li>
<li>
<p>贪心选择选择所有点（ n × n）， 对于边进行权重更新（ m × 1 ）</p>
</li>
</ul>
</li>
<li>
<p>Heap：</p>
<ul>
<li>Heap实现优先队列以实现Prim或Dijkstra：$O（nlogn + mlogn）$</li>
<li>getMIN:  $O(1)$</li>
<li>deleteMin, Insert （都是<code>fixHeap</code>）: $O(logn)$</li>
<li>decreaseKey ( 不断上浮): $O(logn)$​</li>
<li>每个点都要进队列( n × logn ) , 每个边都要权重更新( m × logn )</li>
<li>因为Prim算法通常用于连通片,后者有$m \geq n - 1$ , 则复杂度化为$O(mlogn)$</li>
</ul>
</li>
</ul>
<h1 id="MCE-Prim-Kruskal"><a class="header-anchor" href="#MCE-Prim-Kruskal"></a>MCE( Prim, Kruskal )</h1>
<p>Min-weight Cut-crossing Edge,</p>
<ul>
<li>
<p><strong>MCE一定在MST中</strong></p>
<ul>
<li>Proof:</li>
</ul>
<pre><code>若(a,b)为MCE不在MST中, 则a,b两点在MST中必定通过另外两点连通,设为c,d. 在MST中加入*(a,b)*,得到一个环. 再删除*(c,d)*,得到一个更小的ST, 与&quot;&quot;最小生成树&quot;矛盾&quot;
</code></pre>
</li>
<li>
<p>Prim: 从当前的Finished部分出发, 找MCE</p>
</li>
<li>
<p>Kruskal: 如果两点a,b已经连通( a,b在不同的cut中 ),则根据kruskal算法,(a,b)不是MCE,因为之前有更小的. 反之则*(a,b)*为MCE. 其实就是判断<strong>加了这条边后生成树是否会成环</strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>T1&amp;T2 排序与分治</title>
    <url>/2022/09/26/T1&amp;T2%20%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E6%B2%BB/</url>
    <content><![CDATA[<ul>
<li>数学归纳法</li>
<li>QuickSort</li>
<li>堆</li>
</ul>
<span id="more"></span>
<h1 id="数学归纳法"><a class="header-anchor" href="#数学归纳法"></a>数学归纳法</h1>
<h2 id="证明"><a class="header-anchor" href="#证明"></a>证明</h2>
<ul>
<li>逆否命题 + 良序公理</li>
</ul>
<h2 id="形式"><a class="header-anchor" href="#形式"></a>形式</h2>
<h2 id="例子"><a class="header-anchor" href="#例子"></a>例子</h2>
<ul>
<li>“所有马都是同色”
<ul>
<li>数学归纳法要求$P(1)$成立， 并且$P(1)$ 到 $P(2)$, $P(2)$ 到 $P(3)$等全部成立。 这里$P(1)$ 到$P(2)$不成立</li>
</ul>
</li>
</ul>
<h2 id="公理化"><a class="header-anchor" href="#公理化"></a>公理化</h2>
<ul>
<li>算法中遇到的输入是“可数无穷多”的（ 《离散》 ）</li>
<li>自然数的定义
<ul>
<li>可以用集合定义自然数</li>
<li>可以用Lambda演算定义自然数</li>
</ul>
</li>
</ul>
<h1 id="QuickSort"><a class="header-anchor" href="#QuickSort"></a>QuickSort</h1>
<h2 id="分析（指标随机变量）"><a class="header-anchor" href="#分析（指标随机变量）"></a>分析（指标随机变量）</h2>
<p>Input：$a_1,a_2,\dots,a_n$, 它必定有一个唯一的排列 $z_1,z_2,\dots,z_n$满足$z_1 &lt; z_2 &lt; \dots &lt; z_n$​</p>
<ul>
<li>指标随机变量$x_{ij}:\quad {z_i 比 z_j}$​</li>
<li>一共有$\sum\limits_{1\leq i\leq j\leq n}x_{ij}$次比较， 若两元素没有比较，则 $x_{ij} = 0$</li>
<li>平均情况时间复杂度： $E[\sum\limits_{1\leq i\leq j\leq n}x_{ij}] \in \Theta(nlogn)$​​
<ul>
<li>$E[x_{ij}] = \frac{2}{j-i+1}$
<ul>
<li>对于$z_i,z_{i+1},\dots, z_{j-1},z_j$，只有$z_i$或$z_j$被选为pivot时，$z_i$和$z_j$才会发生比较</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="堆"><a class="header-anchor" href="#堆"></a>堆</h1>
<ul>
<li>堆的前k大元素：
<ul>
<li>只需搜索堆的前k层（规模从n缩小为k），而且堆的前k层还是堆</li>
</ul>
</li>
<li>$\sum h \leq n-1$​
<ul>
<li>$\sum h_L + \sum h_R$ 用归纳法和堆的性质（左右子树必定有一棵是完美二叉树）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>T6 NPC</title>
    <url>/2021/08/18/T6-NPC/</url>
    <content><![CDATA[<p>Outline：</p>
<ul>
<li><strong>NPC = P ？</strong></li>
<li><strong>NPC判定问题</strong></li>
<li><strong>规约： 等价</strong></li>
</ul>
<span id="more"></span>
<ul>
<li>优化问题 → 判定问题： 优化问题往往有某个结构，结构有指标， 给指标选定一个阈值<em>k</em>，对<em>k</em>做判定</li>
</ul>
<h1 id="NPC-P-？"><a class="header-anchor" href="#NPC-P-？"></a>NPC = P ？</h1>
<p>许多NPC看似是P，但证明是错误的。 即： 目前还无法证明NP = P</p>
<ul>
<li>
<p>Clique问题的一种错误的规约是“伪Clique问题”，后者是“对给定的k，判断是否存在k顶点的Clique”，该问题是P的。 但是Clique问题的正确表述是“对任意k，判定是否有k顶点的Clique”，即<em>k</em>为变量而不是常数，因此Clique问题不是P的。 错误在于<strong>问题的转换</strong>不对。</p>
<ul>
<li>不过，对NPC的某个参数转变成常数可以将其转化为P,这是一种解NPC的思路</li>
</ul>
</li>
<li>
<p>ChangeCoin代价是$O(nN)$是P, 但它不是NP， 因为在该问题最合理的建模下，数值用k位表示，代价是$O(n2^k)$. 所以<strong>背包问题不是多项式可解​</strong></p>
</li>
<li>
<p>规约是有代价的（ 如范式间的转换，不一定是P ）</p>
</li>
<li>
<p>DNF是多项式可解的，而CNF转换到CNF不是多项式时间的， 所以CNF不是多项式时间可解（不是P）</p>
</li>
</ul>
<h1 id="NPC判定问题"><a class="header-anchor" href="#NPC判定问题"></a>NPC判定问题</h1>
<p>已知特例为NPC，可以比较容易地判定Genaral是否为NPC, 即： 特例归约到general比较简单。</p>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<ul>
<li>Clique是稠密子图问题的特例，  所以Clique $\leq_P$​​ 稠密子图. 所以稠密子图是NPC</li>
<li>已知划分问题是NPC, 它是背包问题的特例， 所以背包问题是NPC</li>
</ul>
<h1 id="归约：等价"><a class="header-anchor" href="#归约：等价"></a>归约：等价</h1>
<ul>
<li>
<p>独立集和点覆盖问题是等价的</p>
<ul>
<li>
<p>Proof</p>
<p>设有独立集I，点覆盖集C,  对G中任意边 e = （u，v），存在点u不属于I（若u，v都属于I，则与独立集矛盾）， 所以u在I的补集中。 即任何一条边，至少有一个点在I的补集中，所以I的补集是C。</p>
</li>
</ul>
</li>
<li>
<p>支配集（Domination Set）与集合覆盖问题是等价的.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm design and analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>The Queen&#39;s Gambit</title>
    <url>/2021/08/12/The-Queen-s-Gambit/</url>
    <content><![CDATA[<p>嗑药下棋的故事，全剧给9.5分，差0.5是因为女主靠嗑药打赢了大Boss而不是个人能力</p>
<span id="more"></span>
<p>讲一个天才少女棋手（Beth  Harmon）的成长史，看着非常有感触。从看管严厉的孤儿院出来，告别昔日的好友，一下子来到了物质生活丰富的花花世界，漫长的人生和无尽的棋路，最后回到孤儿院，发现当初对自己很严的Deardorff女士已经年老昏聩了，当初把自己领进想起殿堂的Shaibei先生已经逝世，可是地下室的小黑板上，贴满了记着哈蒙消息的报纸，还有小哈蒙寄给Shaibei先生的信。这种心情。。。。</p>
<p>除了经历外，哈蒙最令人有感触的是她的性格，那种专注和冷漠，隔壁《美国往事》过来学着点！ 人只有向前看才能进步，不断地抛弃自己的过往，离开家园，离开亲人，离开所有美好的，能让你流连的东西，让人生变得冷漠而孤独，这样才能追求巅峰。 所谓的人生赢家都是幸福但平庸的，追求尘世的快乐， 家庭、友情、荣誉等等乱七八糟的东西 ---- 时间都花在杂七杂八的事上面，当然不可能达到纯粹。（这种生活使人飞快变老， 当初在学校里取笑哈蒙， 喜欢开黄色玩笑的女孩们一个个已为人妇，变得又老又土，讲起当初做的事说的话都觉得不可思议（ <s>我见我同学也是这样</s> ）。 反而是孤单而努力的哈蒙和年轻时一样，丝毫没有变老）</p>
<p>本剧对苏联是推崇和赞美的，哈蒙最终也留在了苏联，因为苏联人民尊重象棋，尊重艺术，美国的象棋比赛只能在二流学校里举办，影响力远不如篮球、橄榄球； 苏联的象棋比赛都在宫殿里，有无数人围观。（ 美苏的象棋比赛连音乐都不是一个level，后者是高雅的古典乐） 当哈蒙战胜大Boss时，美国人居然要她借此诋毁苏联。 这种下三滥的手段和对象棋的不尊重，就是哈蒙移居苏联的理由吧。 该片是2020拍的，对美国的讽刺非常深刻，居然能上映，还这么火，只能说剧本身太好看了。 从导演编剧对美国的讽刺和对苏联的推崇也不难看出对美国现实的极度不满 --- 对艺术缺乏尊重，象棋大师赚得不如娱乐明星多，什么都要往政治立场上扯等等。</p>
]]></content>
      <categories>
        <category>Art</category>
      </categories>
      <tags>
        <tag>Movie</tag>
      </tags>
  </entry>
  <entry>
    <title>Terminal</title>
    <url>/2022/09/13/Terminal/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Terminal Emulators</li>
<li>Zsh</li>
<li>Ohmyzsh</li>
<li>Zsh Theme</li>
<li>General Terminal Emulater Config</li>
</ul>
<span id="more"></span>
<h1 id="Terminal-Emulators"><a class="header-anchor" href="#Terminal-Emulators"></a>Terminal Emulators</h1>
<p>MacOS常用的终端模拟器是iTerms2, 而Linux KDE使用Konsole. 这两个<strong>都不能跨平台</strong>, 并且iTerms2相比Konsole很垃圾.</p>
<p>因此, 可以把终端换成跨平台的Alacritty</p>
<h2 id="Konsole"><a class="header-anchor" href="#Konsole"></a>Konsole</h2>
<p>Linux上无敌, 可惜MacOS不能用</p>
<h2 id="iTerms2"><a class="header-anchor" href="#iTerms2"></a>iTerms2</h2>
<p>和MacOS无缝集成, 开箱即用. 但是它也不能跨平台, 所以<strong>没必要对它进行过度的配置</strong>.</p>
<h2 id="Alacritty"><a class="header-anchor" href="#Alacritty"></a>Alacritty</h2>
<ul>
<li><a href="https://github.com/alacritty/alacritty">Github Repo</a>
<ul>
<li><a href="https://github.com/alacritty/alacritty#installation">Installation</a></li>
<li><a href="https://github.com/alacritty/alacritty#configuration">Configuration</a></li>
</ul>
</li>
<li><a href="https://jwilm.io/blog/announcing-alacritty/">作者的Blog</a></li>
</ul>
<h3 id="Features"><a class="header-anchor" href="#Features"></a>Features</h3>
<ul>
<li><strong>跨平台</strong></li>
<li>可定制性强, 并且由于是跨平台的, 不用担心换平台之后, Alacritty用不了, 定制打水漂的问题
<ul>
<li>使用配置文件来配置, 意味着可以使用版本管理, 换台电脑clone一下就能用原来的配置了</li>
</ul>
</li>
<li><strong>可以在MacOS的OpenInTerminal里配置, 太爽了!</strong> 一键打开! 我就是因为Warp不能这么做才放弃了Warp</li>
<li>uses GPU acceleration (OpenGL in Rust), <strong>Performance天下第一</strong></li>
<li><a href="https://jwilm.io/blog/announcing-alacritty/">specifically written to correctly render applications like Vim</a>, Alacritty + Nvim是天然搭档</li>
</ul>
<h3 id="Config"><a class="header-anchor" href="#Config"></a>Config</h3>
<p><a href="https://github.com/alacritty/alacritty#configuration">Github Configuration Official Doc</a></p>
<ul>
<li>
<p>配置文件位置:</p>
<p>Alacritty <u>doesn't create the config file for you</u>, but it looks for one in the following locations:</p>
<ol>
<li><code>$XDG_CONFIG_HOME/alacritty/alacritty.yml</code></li>
<li><code>$XDG_CONFIG_HOME/alacritty.yml</code></li>
<li><code>$HOME/.config/alacritty/alacritty.yml</code>: 我用这个</li>
<li><code>$HOME/.alacritty.yml</code></li>
</ol>
</li>
<li>
<p>字体: 由于我的Zsh主题是p10k, 使用的默认字体是Meslo Nerd Font, 而Alacritty默认使用的不是Meslo Nerd Font, 这会导致p10k的很多图标在Alacritty中无法正常显示. 所以需要[安装Meslo Nerd Font字体](#p10k Fonts)</p>
</li>
<li>
<p>配色: 使用下文所述的[Dracula](# Color: Dracula), 配色文件是一个符号链接, 指向dotfile, 纳入了版本管理</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /Users/lyk/Projects/MyOfficialProjects/dotfiles/dracula.yml ~/.config/alacritty/dracula.yml</span><br></pre></td></tr></table></figure>
<p>当然还可以用别的<a href="https://github.com/eendroroy/alacritty-theme">方案</a></p>
</li>
<li>
<p>Alacritty 本身不提供窗口拆分、Session 管理等功能, 所以需要安装[Tmux](# Terminal Multiplexer). 并且对于MacOS来说, 每次使用<code>&lt;Ctrl+b&gt;</code>实在是太繁琐了. 可以使用改键, 改成<code>Cmd</code>, 具体参考 <a href="https://www.joshmedeski.com/">Josh Medeski</a> 的这篇『<a href="https://www.joshmedeski.com/posts/macos-keyboard-shortcuts-for-tmux">macOS Keyboard Shortcuts for tmux</a>』:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># alacritty.yml</span></span><br><span class="line"><span class="attr">key_bindings:</span></span><br><span class="line">  <span class="bullet">-</span> &#123; <span class="attr">key:</span> <span class="string">T</span>, <span class="attr">mods:</span> <span class="string">Command</span>, <span class="attr">chars:</span> <span class="string">&quot;\x02\x63&quot;</span> &#125;</span><br></pre></td></tr></table></figure>
<p><code>\x02\x63</code>就是<code>&lt;Ctrl+b&gt; + c</code>的十六进制表示, 可以用[<code>xxd -ps</code>](# xxd )验证</p>
</li>
<li>
<p>I have also been playing with <a href="https://zellij.dev/">Zellij</a>, a full terminal workspace manager that combines the best of tmux with native tabs and scrollback.</p>
</li>
</ul>
<h1 id="Zsh"><a class="header-anchor" href="#Zsh"></a>Zsh</h1>
<h2 id="Install"><a class="header-anchor" href="#Install"></a>Install</h2>
<p>安装zsh shell</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install zsh</span><br></pre></td></tr></table></figure>
<p>切换shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>
<h2 id="Shell-Switch"><a class="header-anchor" href="#Shell-Switch"></a>Shell Switch</h2>
<p>检查当前可用的shell:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure>
<p>查看当前使用的shell:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure>
<p>set one shell  as default for your user:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chsh -s full-path-to-shell</span><br></pre></td></tr></table></figure>
<p>在Parallels的Ubuntu虚拟机中, <code>chsh -s /bin/zsh</code>无法切换shell到zsh, 原因未知. 只能手动设置:</p>
<p>edit <code>~/.bashrc</code>, 在最后一行加上:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash -c zsh</span><br></pre></td></tr></table></figure>
<p>重启shell即可.</p>
<h1 id="Ohmyzsh"><a class="header-anchor" href="#Ohmyzsh"></a>Ohmyzsh</h1>
<ol>
<li>
<p>clone mirror:</p>
<p>github安装oh-my-zsh（很慢）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>
<p>gitee安装oh-my-zsh: (国内用这个 )</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>执行<code>install.sh</code></p>
</li>
<li>
<p>如果发现install很慢，可以修改为gitee：<br>
<code>vim install.sh</code><br>
找到以下部分：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Default settings</span></span><br><span class="line">ZSH=$&#123;ZSH:-~/.oh-my-zsh&#125;</span><br><span class="line">REPO=$&#123;REPO:-ohmyzsh/ohmyzsh&#125;</span><br><span class="line">REMOTE=$&#123;REMOTE:-https://github.com/$&#123;REPO&#125;.git&#125;</span><br><span class="line">BRANCH=$&#123;BRANCH:-master&#125;</span><br></pre></td></tr></table></figure>
<p>将中间两行改为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">REPO=$&#123;REPO:-mirrors/oh-my-zsh&#125;</span><br><span class="line">REMOTE=$&#123;REMOTE:-https://gitee.com/$&#123;REPO&#125;.git&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="Plugins-Installation"><a class="header-anchor" href="#Plugins-Installation"></a>Plugins Installation</h2>
<ul>
<li>
<p>如果使用brew, yay等包管理工具安装插件, 会把插件安装在<code>$ZSH/plugins</code>,这些插件被称为&quot;&quot;standard plugins&quot;</p>
</li>
<li>
<p>如果使用git clone安装插件, 则这些插件被称为&quot;custom plugins&quot;, 需要被clone到<code>$ZSH_CUSTOM/plugins</code> (默认位置是 <code>~/.oh-my-zsh/custom/plugins</code>)</p>
</li>
<li>
<p>所有插件在安装完毕后,都需要在<code>~/.zshrc</code>的<code>plugins</code>中配置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugins=( [custom plugins...] zsh-syntax-highlighting autosuggestion)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改完配置文件后记得<code>source ~/.zshrc</code>, 然后重新启动shell</p>
</li>
</ul>
<h2 id="Plugins"><a class="header-anchor" href="#Plugins"></a>Plugins</h2>
<h3 id="autosuggestion-highlighting"><a class="header-anchor" href="#autosuggestion-highlighting"></a>autosuggestion &amp;&amp; highlighting</h3>
<ul>
<li>
<p>安装<code> autosuggestion</code>：( github非常慢，改用gitee ) (这里直接用环境变量+重定向，不需要在指定目录下clone了)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://gitee.com/phpxxo/zsh-autosuggestions.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装<code>syntax-highlighting</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md">zsh-syntax-highlighting</a></p>
</li>
</ul>
<h3 id="fasd-autojump"><a class="header-anchor" href="#fasd-autojump"></a>fasd &amp; autojump</h3>
<ul>
<li>
<p>安装<code>fasd</code>: 它将文件和目录<strong>按最近最常用</strong>算法排序, 并提供各种操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yay -S fasd</span><br></pre></td></tr></table></figure>
<p>安装后需要配置<code>~/.zshrc</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias a=&#x27;fasd -a&#x27;        # any</span><br><span class="line">alias s=&#x27;fasd -si&#x27;       # show / search / select</span><br><span class="line">alias d=&#x27;fasd -d&#x27;        # directory</span><br><span class="line">alias f=&#x27;fasd -f&#x27;        # file</span><br><span class="line">alias sd=&#x27;fasd -sid&#x27;     # interactive directory selection</span><br><span class="line">alias sf=&#x27;fasd -sif&#x27;     # interactive file selection</span><br><span class="line">alias z=&#x27;fasd_cd -d&#x27;     # cd, same functionality as j in autojump</span><br><span class="line">alias zz=&#x27;fasd_cd -d -i&#x27; # cd with interactive selection</span><br></pre></td></tr></table></figure>
<p>alias使用:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a foo 列出最近操作的路径匹配 &#x27;foo&#x27; 的文件与目录</span><br><span class="line">f foo 列出最近操作的路径匹配 &#x27;foo&#x27; 的文件</span><br><span class="line">d foo 列出最近操作的路径匹配 &#x27;foo&#x27; 的目录</span><br><span class="line">s foo 列出最近操作的路径匹配 &#x27;foo&#x27; 的文件与目录，并可以通过序号选择</span><br><span class="line">sf foo 列出最近操作的路径匹配&#x27;foo&#x27;的文件，并可以通过序号选择</span><br><span class="line">sd foo 列出最近操作的路径匹配&#x27;foo&#x27;的目录，并可以通过序号选择</span><br><span class="line">z foo cd到最近操作的匹配&#x27;foo&#x27;并且得分最高的目录</span><br><span class="line">zz foo 列出最近操作的路径匹配&#x27;foo&#x27;的目录，通过序号选择，然后cd进目录</span><br></pre></td></tr></table></figure>
<p>e.g. If you often go to  <code>~/files/cool_project</code> you can simply use <code>z cool</code> to jump there.</p>
</li>
<li>
<p><code>autojump</code>提供了<code>j</code>命令, 效果和<code>fasd</code>的<code>z</code>命令一样, 可以作为<code>fasd</code>的替代品:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yay -S autojump</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Zsh-Theme"><a class="header-anchor" href="#Zsh-Theme"></a>Zsh Theme</h1>
<p>目前用<a href="https://github.com/romkatv/powerlevel10k/blob/master/README.md">powlevel10k</a>， 主页上给了中国大陆的下载方式, oh-my-zsh下：</p>
<ol>
<li>
<p>Clone the repository:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone --depth=1 https://gitee.com/romkatv/powerlevel10k.git $&#123;ZSHz</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Set <code>ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</code> in <code>~/.zshrc</code></p>
</li>
<li>
<p>source一下配置文件</p>
</li>
<li>
<p>开启主题配置：<code>p10k configure</code></p>
<ul>
<li>这会开启一个交互式程序, 根据用户的设定在<code>~/.p10k.zsh</code>生成主题的配置文件</li>
</ul>
</li>
<li>
<p>后续可以继续用<code>p10k configure</code>重新开始配置， 或者手动更改配置文件：<code>~/.p10k.zsh</code></p>
<ul>
<li>为了对配置文件进行版本管理, 我对<code>~/.p10k.zsh</code>使用了符号链接.  <code>~/.p10k.zsh</code>实际是指向<code>/Users/lyk/Projects/MyOfficialProjects/dotfiles/.p10k.zsh</code>的符号链接.</li>
<li>新版p10k是可以正确识别符号链接的, 因此<code>p10k configure</code>会在<code>/Users/lyk/Projects/MyOfficialProjects/dotfiles/.p10k.zsh</code>处生成配置文件.</li>
<li>但老版本p10k没有这个支持, 每次<code>p10k configure</code>后, 生存的配置文件都位于<code>~/.p10k.zsh</code>, 覆盖了原来的符号链接, ,<strong>需要手动修</strong>改.</li>
</ul>
</li>
</ol>
<h2 id="p10k"><a class="header-anchor" href="#p10k"></a>p10k</h2>
<h2 id="Notes"><a class="header-anchor" href="#Notes"></a>Notes</h2>
<ul>
<li>
<p>Linux上默认配置不开启username@hostname 的显示，参加官方文档的“How do I add username and/or hostname to prompt?”. 也可以将这行注释掉：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Don<span class="string">&#x27;t show context unless running with privileges or in SSH.</span></span></span><br><span class="line">typeset -g POWERLEVEL9K_CONTEXT_&#123;DEFAULT,SUDO&#125;_&#123;CONTENT,VISUAL_IDENTIFIER&#125;_EXPANSION=</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Font"><a class="header-anchor" href="#Font"></a>Font</h1>
<h2 id="p10k-Fonts"><a class="header-anchor" href="#p10k-Fonts"></a>p10k Fonts</h2>
<p><a href="https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k">For Details Go To Github</a></p>
<blockquote>
<p>Powerlevel10k doesn't require custom fonts but can take advantage of them if they are available. It works well with <a href="https://github.com/ryanoasis/nerd-fonts">Nerd Fonts</a>, <a href="https://github.com/adobe-fonts/source-code-pro">Source Code Pro</a>, <a href="https://fontawesome.com/">Font Awesome</a>, <a href="https://github.com/powerline/fonts">Powerline</a>, and even the default system fonts. The full choice of style options is available only when using <a href="https://github.com/ryanoasis/nerd-fonts">Nerd Fonts</a>.</p>
<p>👇 <strong>Recommended font</strong>: <strong>Meslo Nerd Font</strong> patched for Powerlevel10k. 👇</p>
</blockquote>
<p>If you are using iTerm2 or Termux, <code>p10k configure</code> can <strong>install the recommended font for you.</strong> Simply answer <code>Yes</code> when asked whether to install <em>Meslo Nerd Font</em>.</p>
<h3 id="Manual-font-installation"><a class="header-anchor" href="#Manual-font-installation"></a>Manual font installation</h3>
<ol>
<li>
<p>Download these four ttf files:</p>
<ul>
<li>[MesloLGS NF Regular.ttf](<a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS">https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS</a> NF Regular.ttf)</li>
<li>[MesloLGS NF Bold.ttf](<a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS">https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS</a> NF Bold.ttf)</li>
<li>[MesloLGS NF Italic.ttf](<a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS">https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS</a> NF Italic.ttf)</li>
<li>[MesloLGS NF Bold Italic.ttf](<a href="https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS">https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS</a> NF Bold Italic.ttf)</li>
</ul>
</li>
<li>
<p>Double-click on each file and click &quot;Install&quot;. This will make <code>MesloLGS NF</code> font available to all applications on your system.</p>
</li>
<li>
<p>Configure your terminal to use this font:</p>
<ul>
<li>
<p><strong>iTerm2</strong>: Type <code>p10k configure</code> and answer <code>Yes</code> when asked whether to install <em>Meslo Nerd Font</em>. Alternatively, open <em>iTerm2 → Preferences → Profiles → Text</em> and set <em>Font</em> to <code>MesloLGS NF</code>.</p>
</li>
<li>
<p><strong>Visual Studio Code</strong>: Open <em>File → Preferences → Settings</em> (PC) or <em>Code → Preferences → Settings</em> (Mac), enter <code>terminal.integrated.fontFamily</code> in the search box at the top of <em>Settings</em> tab and set the value below to <code>MesloLGS NF</code>. Consult <a href="https://raw.githubusercontent.com/romkatv/powerlevel10k-media/389133fb8c9a2347929a23702ce3039aacc46c3d/visual-studio-code-font-settings.jpg">this screenshot</a> to see how it should look like or see <a href="https://github.com/romkatv/powerlevel10k/issues/671">this issue</a> for extra information.</p>
</li>
<li>
<p><strong>Alacritty</strong>: Create or open</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">~/.config/alacritty/alacritty.yml</span><br></pre></td></tr></table></figure>
<p>and add the following section to it:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">normal:</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">&quot;MesloLGS NF&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="IDE-Font-Support-Problem"><a class="header-anchor" href="#IDE-Font-Support-Problem"></a>IDE Font Support Problem</h2>
<ul>
<li>
<p>采用前面的步骤, 我们的Terminal的字体就变成了Meslo Nerd Font, 具体而言是<strong>MesloLGS NF</strong>, 而很多IDE的默认Terminal字体不是Meslo Nerd Font, 因此p10k的图标在这些IDE的Terminal里还是不能正常显示, 因为没有对应字体支持.</p>
</li>
<li>
<p>Jetbrains IDE: 例如IDEA, 默认使用的Terminal字体是Jetbrains Mono, 需要在<code>Setting</code> -&gt;<code> Editor</code> -&gt; <code>Font</code> 里将字体改成MesloLGS NF</p>
</li>
<li>
<p>VSCode: <code>Settings -&gt; ``terminal</code>, 在<code>Font Family</code>中可以看到</p>
<blockquote>
<p>Controls the font family of the terminal. Defaults to [Editor: Font Family](vscode-file://vscode-app/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/code/electron-sandbox/workbench/workbench.html)'s value.</p>
</blockquote>
<p>这里的字体默认和 [Editor: Font Family](vscode-file://vscode-app/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/code/electron-sandbox/workbench/workbench.html)的相同,但后者一般不用终端的字体. 我们将Terminal的字体单独设置为<code>MesloLGS NF</code></p>
</li>
</ul>
<h1 id="General-Terminal-Emulater-Config"><a class="header-anchor" href="#General-Terminal-Emulater-Config"></a>General Terminal Emulater Config</h1>
<h2 id="Color-Dracula"><a class="header-anchor" href="#Color-Dracula"></a>Color: Dracula</h2>
<p><a href="https://draculatheme.com/">Dracula</a>: 该网站收集了很多终端模拟器的Dracula主题配色方案</p>
<ul>
<li>
<p>iTerms2:</p>
<ol>
<li>
<p>Install:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/dracula/iterm.git</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启用该配色：</p>
<ol>
<li><em>iTerm2 &gt; Preferences &gt; Profiles &gt; Colors Tab</em></li>
<li>Open the <em>Color Presets...</em> drop-down in the bottom right corner</li>
<li>Select <em>Import...</em> from the list</li>
<li>Select the <code>Dracula.itermcolors</code> file</li>
<li>Select the <em>Dracula</em> from <em>Color Presets...</em></li>
</ol>
</li>
</ol>
</li>
<li>
<p>Alacritty:</p>
<ol>
<li>
<p>Install: Download using the <a href="https://github.com/dracula/alacritty/archive/master.zip">GitHub .zip download</a> option.</p>
</li>
<li>
<p>You just have to import <code>dracula.yml</code> in <code>~/.config/alacritty/alacritty.yml</code>.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Dracula Color Theme</span></span><br><span class="line"><span class="comment">## It&#x27;s a symlink to my dotfile</span></span><br><span class="line"><span class="attr">import:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">~/.config/alacritty/dracula.yml</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>The Story of Art: Chapter 26,27</title>
    <url>/2022/09/26/The-Story-of-Art-19-20%E4%B8%96%E7%BA%AA/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>19世纪末的艺术，：寻求新标准</li>
<li>20世纪上半叶的艺术：实验艺术</li>
<li>艺术史的总结
<ul>
<li>我终于理解了“从来没有什么艺术，只有一个一个的艺术家”这句话，对它的解释写在了结尾，我真是太聪明了！</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="寻求新标准与实验性艺术"><a class="header-anchor" href="#寻求新标准与实验性艺术"></a>寻求新标准与实验性艺术</h1>
<h2 id="19世纪末-寻求新标准"><a class="header-anchor" href="#19世纪末-寻求新标准"></a>19世纪末 寻求新标准</h2>
<p>19世纪晚期，艺术越来越成为一种程式化的工作，在建筑领域，建筑师首先创作的是建筑物，而不是艺术品。 艺术品的创造只需要在一本论“历史风格”的艺术范本中找到一种艺术形式。 在绘画领域，所谓的“印象派”其实并非是对传统的颠覆，在艺术目标方面，印象主义和文艺复兴时期发现自然依赖建立的艺术传统别无二致。 印象派和保守派的争论主要在艺术手法方面，而不是艺术目标方面。事实上，直到印象主义，绘画才完全征服了自然，画家真正可以画其所见。 但是，纯粹地描摹视觉印象并不是艺术的全部，也不能使所有艺术家感到满意。</p>
<h2 id="塞尚"><a class="header-anchor" href="#塞尚"></a>塞尚</h2>
<p>塞尚既认同印象主义的思想，即必须客观真实地描摹自然，又不愿意放弃古典主义中那些规则的程式，以及它们所蕴含的宏伟和秩序感觉（尽管这是以违反自然为代价的）。 这相互矛盾的两个目标使得塞尚做出了不懈的探索。 他既用印象主义的手法描摹自然，又将“自然”中不符合他目标的部分加以歪曲，这种无视现实的手法事实上是开拓性的。 归根到底，塞尚是想表现坚实感和深度感，为此可以牺牲传统的自然轮廓的“正确性”，这实质上是在探索形状（古典派）和色彩（印象派）的关系。</p>
<h2 id="修拉"><a class="header-anchor" href="#修拉"></a>修拉</h2>
<p>塞尚的目的是将印象主义和画面有秩序这两个要求加以调和，修拉采取了完全不同的，更科学的方法。 他研究色彩视觉的科学理论，采用点彩的技术，使得色彩在人眼中自由地混合，但又不失去强度和明度（另一方面，色彩的强度和明度意味着轮廓和立体感）。但这种方法在实践上非常复杂，点彩使得形象难以辨识，修拉不得不对形象进行简化，他的点彩艺术越来越趋向于描摹图案而不是自然。</p>
<h2 id="凡高"><a class="header-anchor" href="#凡高"></a>凡高</h2>
<p>凡高从印象派和修拉的点彩艺术得到启发，他也采用纯色点画的技术，但是使用强烈的笔触而不是点彩。凡高欣赏日本版画带来的直接而强烈的效果，渴望创造一种纯真的艺术。凡高的画意在表现他的内心感受，而不是正确地描摹自然，在这一点上他和塞尚同途异路</p>
<h2 id="高更"><a class="header-anchor" href="#高更"></a>高更</h2>
<p>高更和凡高一样，中年开始学画，他的艺术理念是对文明的怀疑，这在深层次是对理性的怀疑。他晚年跑去塔希提岛与土著生活在一起，以探索原始艺术。</p>
<p>事实上，自从艺术家自觉意识到艺术的“风格”之后，就开始了对传统的程式的怀疑。 艺术不应该是所谓的“风格”，某种程式，某些形式上的特征，而是更激情更主观的东西。高更因此厌恶现代文明，因为这意味着刻板的程式化的艺术，而他想要探求的是更纯真无邪的，没有形式约束的艺术，这使得他的作品的一大特征是“粗野”。为了表现土著人一般的高度纯真，他可以放弃西方的技术传统。</p>
<h3 id="19世纪末艺术的总结"><a class="header-anchor" href="#19世纪末艺术的总结"></a>19世纪末艺术的总结</h3>
<p>19世纪末艺术的基本问题，在技术上是要求运用色调层次暗示深度感和希望保留美丽、自然色彩的期望相矛盾的问题。 这实际上是古典艺术和印象派，或者是文艺复兴以来回到自然的艺术传统的冲突，前者要求和谐、宏伟，后者要求对自然光影的真实描摹。 日本艺术给当时人启发： 如果为了大胆的简化而牺牲立体造型和细节描绘，一幅画就会给人以强烈的印象。 塞尚和修拉沿这条路有所发展，他们都加强了色彩而牺牲了深度感。 这种风格当然使插画艺术和广告艺术受益，大大增强了艺术的“装饰性” ， 因为人们在看清画的内容之前就看见了了悦目的图案。 在艺术的意义上，塞尚看到印象派过度注重色彩和自然，而忽视了自然的坚实和持久的特性（说这是特性也好，是人们后天赋予的趣味也罢，对和谐和永恒的追求是西方艺术的悠久传统）；凡高看到印象派只描摹其所见，只描摹客观自然，而忽视了内心的探索和表达，如果绘画沦为了了对光学表现的机械复现，那么艺术就将失去感动和激情；高更干脆反对整个西方艺术，他认为程式化的艺术传统、技法有违艺术创作的初心，他的艺术是为了追求更原始纯真的东西。这三者分别影响了后来的立体主义、表现主义、原始主义，也对应着艺术的结构、表现力和单纯性。</p>
<h2 id="20世纪上半叶-实验性艺术"><a class="header-anchor" href="#20世纪上半叶-实验性艺术"></a>20世纪上半叶 实验性艺术</h2>
<p>现代艺术看似是对传统的决裂，但是它与过去的艺术一样，其出现是对一些明确的问题的反应。例如，为了探索一种新风格，在建筑领域诞生了“现代建筑”。</p>
<h2 id="包豪斯"><a class="header-anchor" href="#包豪斯"></a>包豪斯</h2>
<p>包豪斯是一所建筑学习，其艺术风格可被概括为“实用主义”，其宗旨是对设计的东西的功能性的强调。 当然，这个理念需要机智地设计，因为产品必须符合目的，还能“用起来合适”，因此也具有一定的美感。 由功能主义可以看出，现代艺术已经成为了一种实验，艺术家可以自由地进行探索。 由此产生的问题是： 艺术家为何实验艺术，而不是只单单地描绘艺术。</p>
<p>我们看到，艺术中单纯地“描绘”是不可能的。首先，直到印象主义之前，艺术家都无法“画其所见”，在古典时期，艺术品都被用于各种场合和目的（讲述故事、宣传宗教），艺术家没有画其所见的余地； 文艺复兴之后，有了透视法、渐隐法、各种色彩的研究，艺术家才开始“画其所见”，但还是受到传统的程式的困扰，艺术家只能用所学的形式，而不是所见的形式来创作；19世纪末，随着印象主义的出现和塞尚等人对传统程式的清除，艺术家总算能够“画其所见”了。 其次，单纯地“画其所见”其实并不存在，因为科学早就证明，“所见”与“所知”是不可分割的，程式违背了“所见”，但它“所知”的结果。 我们对客观世界的认识，是感官和大脑认知共同作用的结果，我们接收到一个感官印象，最终还是要从某种”程式“，比如点、线入手，将其表达出来。因此程式，或者说获取程式的冲动依然是必要的（另一方面，既有的程式，比如西方的艺术传统，是可以抛弃的，艺术家只需要“获取程式”这一本能）。</p>
<h2 id="表现主义"><a class="header-anchor" href="#表现主义"></a>表现主义</h2>
<p>表现主义就是歪曲自然形象以表达内心的情感。人对事物的情感的确会影响对事物的印象，也会印象事物在内心的形状，这是显而易见的。表现主义就构建在这一事实上。 在凡高之前，已经有了表现主义艺术家，比如爱德华蒙克，其代表作《呐喊》。表现主义者，在当时的世道，都有愤世嫉俗、关心社会现实的一面，它们的作品因此看起来痛苦和丑陋 ---- 或者说，以前所谓“美丽”的艺术品和艺术程式，比如古典艺术，其实是对现实的歪曲，现实中劳苦大众的命运，其实确实是像表现主义那样丑陋、悲惨的，表现主义只是更真实地描绘了这个社会。</p>
<p>表现主义在技术上，是通过色彩和线条的选择去表现感情，而不是一味模仿自然。 这个理论进一步发展，就有理有追问： 是否能够完全抛弃客观自然，而追求单纯的色彩和形状的表达，这样是否能够创造更纯粹的艺术?</p>
<h2 id="抽象艺术"><a class="header-anchor" href="#抽象艺术"></a>抽象艺术</h2>
<p>康定斯基和他的抽象艺术学派，是这一理念发展的结果，也涉及下文中20世纪艺术对“形式”的探寻。表现主义者大多也是神秘主义者，其目标如上所述，而其终极目的，是使得绘画成为建筑一样的构成性的艺术。 即在表面的色彩和形状背后，真的有一个永恒不变的实在。抽象艺术通过对客观现实的抛弃，来获得形式的纯粹，以达到这一神秘的目的。</p>
<p>抽象艺术也反映了整个现代艺术的核心思想： 艺术家想创造事物，而不仅仅是描绘事物。 艺术家想要创造一个前所未有的东西，并相信（起码他们自己相信）这些东西对人们有强烈的意义，这也是神秘主义的，因为他们想要<strong>创造比现实本身更为真实的东西</strong>。</p>
<h2 id="立体主义"><a class="header-anchor" href="#立体主义"></a>立体主义</h2>
<p>19世纪末期对装饰性的图案的注重，使艺术家丧失了用光影塑造形体的方法。这当然意味着丧失了对客观现实的描摹。 凡高和高更的作品抛弃了图案的复杂性和华而不实，而更注重对色彩的应用。这推动了野兽派的诞生，它为了色彩的愉悦而抛弃了明暗法。 但是，毕加索对这个问题给出了自己的答案，即在保持平面性的基础上维持立体感和深度感。 立体主义的艺术宗旨是： 描摹某物的构成而不是某物本身。 因为某物在人们心灵中的样子，确实不同于它实际的样子，因此从三角、圆锥、立方体来描摹某物也是合理的，因为该物品在人们的心目中，可能就是由这些突出的“特征”构成的。这实际上和埃及艺术的原则很想像，即描摹某物的“特征”而不是全部。</p>
<p>当然，立体主义不是唯一的表现世界的方式，只是一种艺术上的“发现”。毕加索说 “人人都想理解艺术，为什么不设法去理解鸟的歌声呢？”， 20世纪艺术的一大特征就是“发现”新方法。 对于古典时代的艺术家而言，艺术的题材居于首位，而在委托工作少见的后代，艺术家需要自己选择题材，他们一般选择可以表现自己手艺的某个题材，或者说，他们选择题材是为了更好地展示他们的手法， 此时的艺术家认为题材不过是一个机会，用来使色彩和图案达到平衡。 塞尚的静物画就是一例，它表达的只是对色彩和图案的探索，而不是物体本身。这种倾向继续下去，就发展出了“形式”第一，“题材”第二的艺术观念，艺术家的使命就是不断地“发现”新方法来解决“形式”问题，而不需要探索什么题材。</p>
<h2 id="原始主义"><a class="header-anchor" href="#原始主义"></a>原始主义</h2>
<p>原始主义从高更开始追求艺术的纯真，20世纪的艺术家，如卢梭等人，身体力行，证明了这种理论的可行性。甚至卢梭没有经过专业画家的训练，就可以创造出全新的，人们不而能不否定其为“艺术”的东西。当然，原始主义过份地追求天真和单纯，这是有矛盾的，因为人不可能随心所欲地变成原始人。 在通往孩童般的纯真的艺术道路中，有些艺术家“故作愚昧”，开辟了一些新的艺术方向，比如幻觉艺术（也称为超现实主义）.</p>
<h2 id="超现实主义"><a class="header-anchor" href="#超现实主义"></a>超现实主义</h2>
<p>超现实主义是原始主义的延伸，或者说二者都是现代艺术的分支。 其核心思想，依然是要创造比现实本身更真实的东西。 他们吸收弗洛伊德的理论：“当我们的头脑麻木之后，潜藏在身上的童心和野性就会活跃起来”， 这使得超现实主义者提倡感性，反对理性。 该理论并不新颖，因为唯心主义的艺术观自古有之，艺术家从艺术中获得“神性的迷狂”。</p>
<h2 id="20世纪上半叶艺术、兼整个艺术史的总结"><a class="header-anchor" href="#20世纪上半叶艺术、兼整个艺术史的总结"></a>20世纪上半叶艺术、兼整个艺术史的总结</h2>
<p>牡蛎要创造一颗珍珠，需要一些物料，需要一颗沙粒或者一块小东西，以便围绕着它形成珍珠。 没有那样一颗坚硬的核心，就可能长出一团不成形状的东西。 艺术家也需要一个坚硬的核心 --- <strong>一项明确的任务</strong>， 来发挥其才智。</p>
<p>所谓的任务，要么由社会显示指定，要么由社会传统来指定， 比如艺术应该复制自然这个任务，完全是社会传统要求的结果，并不是艺术的内在使命。当然，这些任务并非与艺术的本质毫无关连，因为这些任务对艺术提出了各种各样的问题，而艺术，或者说艺术家的使命就是对这些问题的解决。</p>
<p>因此“艺术是什么”这个问题很好回答： 艺术，是对各种任务的解决，而对任务的解决过程，也就是艺术家发挥聪明才智的过程，构成了艺术品。 任务如同沙粒，而艺术家在任务上发挥的聪明才智有如包裹沙粒的珍珠质。 艺术必须要以任务为核心，但最终感动我们的并非是沙粒，而是闪耀的珍珠。正如我们可能不会对某个宗教题材感兴趣，但我们被描绘该题材的艺术作品感动；我们讨厌某人吹牛，但要是这个人吹牛吹的特别棒，我们也不得不承认这是一种艺术。 <strong>动机与过程的分离</strong>，揭示了艺术的构成。“没有什么艺术，有的只有艺术家”，这话也很好理解： 艺术本身不是一个目的，也不是一个抽象的实体，我们看到的艺术，其实都是艺术家的创作，对某个任务的解决，也就是牡蛎中的珍珠。 我们欣赏的是珍珠，是艺术家的努力，是艺术作品。但是抽象的艺术，所谓的“为艺术而艺术”， 所谓的“艺术家应该创作艺术”是不存在的，因为艺术只是对任务的解决，其本身不是一个实体，没有任务、没有沙粒，哪来的珍珠呢？</p>
<ul>
<li>评论： 首先，作者认为艺术是对问题的解决，本书确实有力地论述了这一观点，我们确实能看到，所有的艺术流派，艺术作品和理念，都是对某个任务，以及对该任务提出的问题进行解决的尝试。 作者认为没有独立的纯粹的艺术，这是彻底的唯物主义。 唯物主义很残酷，它的答案有时不足够令人振奋，但它的解释往往最有效。 我认同这样的观点。</li>
</ul>
]]></content>
      <categories>
        <category>Art</category>
      </categories>
      <tags>
        <tag>Art Theory</tag>
      </tags>
  </entry>
  <entry>
    <title>Tips for Building Frontend Projects</title>
    <url>/2022/07/31/Tips-for-Building-Frontend-Projects/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Intro</li>
<li>node</li>
<li>npm</li>
<li>yarn</li>
<li>...</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<p>前端包管理工具有npm和yarn,后者是npm的进化版，推荐用yarn</p>
<p>前端项目clone下来， <code>[npm/yarn] install</code>报错是很正常的， 其实依赖报错最主要的原因就是npm/yarn或node版本不对。</p>
<h1 id="node"><a class="header-anchor" href="#node"></a>node</h1>
<h2 id="node生态的基本工具"><a class="header-anchor" href="#node生态的基本工具"></a>node生态的基本工具</h2>
<ul>
<li><code>nodejs</code>是JS的一个运行时库，用于在native环境下运行JS</li>
<li><code>nvm</code>：<code>nodejs</code> 的一个<strong>版本管理工具</strong>，用于管理 <code>nodejs</code> 和 <code>npm</code> 的版本。 <code>nvm</code>是一个独立于<code>node</code>/<code>npm</code>的Shell脚本，需要手动安装</li>
<li><code>npm</code> or <code>yarn: </code>: <code>nodejs</code>的包管理工具（就是安装第三方模块的工具）主要是<code>npm</code>和<code>yarn</code>
<ul>
<li><code>npm</code>已经被包含在Nodejs包中，不需要手动安装</li>
<li><code>yarn</code>被包含在<code>corepack</code>中，后者是一个对包管理工具进行管理的工具，其二进制包中默认包含了<code>yarn</code>。 也就是说安装了<code>corepack</code>就同时安装了<code>yarn</code>。 当然也可以独立地安装<code>yarn</code>，但是不推荐</li>
</ul>
</li>
<li><code>n</code>: <code>n</code>命令是<code>nodejs</code>的一个模块，用法类似于<code>nvm</code>. 不过作为一个集成进<code>nodejs</code>的模块，它的功能比<code>nvm</code>局限很多</li>
</ul>
<h2 id="包所在文件node-modules"><a class="header-anchor" href="#包所在文件node-modules"></a>包所在文件<code>node_modules</code></h2>
<p><code>node_modules</code>：node安装的第三方模块的所在文件夹。 通过包管理工具( <code>npm</code> or <code>yarn</code> )安装的第三方模块都会被下载到该文件夹。</p>
<ul>
<li>
<p>包默认会被安装在项目根目录下的<code>node_modules</code>。 如果指定了全局安装：</p>
<ul>
<li>
<p><code>npm install -g</code>: node目录下的<code>node_modules</code>， 比如<code>~/.nvm/versions/node/v18.4.0/lib/node_modules</code></p>
<ul>
<li>用<code>npm root -g</code>查看</li>
</ul>
</li>
<li>
<p><code>yarn global add</code>: <code>yarn</code>的全局安装目录不是node目录，而是形如<code>~/.config/yarn/global</code></p>
</li>
<li>
<p>用<code>yarn global dir</code>查看</p>
</li>
</ul>
</li>
</ul>
<h2 id="项目描述文件package-json"><a class="header-anchor" href="#项目描述文件package-json"></a>项目描述文件<code>package.json</code></h2>
<p><code>package.json</code>： 使用<code>npm</code>/ <code>yarn</code>生成node项目后，会生成项目的描述文件<code>package.json</code>，记录了当前项目信息，例如项目名称、版本、作者、github地址、<strong>当前项目依赖了哪些第三方模块</strong>等</p>
<ul>
<li>
<p>一个文件夹，如果其目录下有<code>package.json</code>, 它就是一个node项目</p>
</li>
<li>
<p><code>package.json</code>只是<strong>初步指定</strong>了项目的依赖( 依赖名和依赖的版本 )， 但没有指定依赖的详细信息。</p>
<ul>
<li>例如， <code>package.json</code>只指定了大版本，也就是版本号的第一位，并不能锁定后面的小版本，每次 <code>npm install</code> 都是拉取的该大版本下的最新的版本。 版本管理粒度太粗了，为了稳定性考虑我们几乎不敢随意升级依赖。</li>
<li>所以在npm &gt; 5.0之后，增加了<code>package-lock.json</code>文件来指定<strong>具体的依赖信息</strong>(比如依赖具体来源和具体版本号）)。 yarn的<code>yarn.lock</code>文件也类似</li>
<li>简言之，<strong><code>package.json</code> 由于历史遗留原因，没能做到细粒度的依赖管理。 具体依赖信息都记录在<code>package-lock.json</code>或<code>yarn.lock</code>中</strong></li>
</ul>
</li>
<li>
<p>对于**<code>npm &lt; 5.0</code>**,  <code>npm install [package]</code>只会下载依赖，不会把依赖信息添加到<code>package.json</code>， 需要手动配置进去。使用<code>--save</code>选项，把依赖信息自动添加到到<code>package.json</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install [package] --save</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>对于<code>yarn</code>，<code>yarn add [package]</code>会将依赖信息写入<code>package.json</code></p>
</li>
<li>
<p>对于**<code>npm &gt; 5.0</code>**，<code>npm install [package]</code>已经可以自动将依赖信息写入<code>package.json</code>了</p>
</li>
</ul>
<h3 id="example"><a class="header-anchor" href="#example"></a>example</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">  <span class="comment">//项目名称</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;description&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//项目的版本</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//项目的描述</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;在这里可以快速了解当前项目的功能及作用&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//项目的主入口文件,在模块化项目中都会有一个主模块,main 里面填写的就是主模块的入口文件</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//定义命令别名,当命令很长时可以使用别名替换</span></span><br><span class="line">  <span class="comment">//使用方法:npm run 别名</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon app.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//关键字,它允许我们使用关键字去描述当前的项目</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//项目的作者</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//项目遵循的协议,默认是ISC也就是开放源代码的协议</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//项目依赖所需要的第三方模块（包）</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;formidable&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.3.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">//开发依赖所需要的第三方模块（包）</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;gulp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.9.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="dependency-categories"><a class="header-anchor" href="#dependency-categories"></a>dependency categories</h3>
<ul>
<li>
<p><code>package.json</code>中记录的依赖有三种</p>
</li>
<li>
<p><code>npm install</code>默认会下载pro和dev的依赖.</p>
<ul>
<li>参见<a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json#devdependencies">dev</a>: <em>These things will be installed when doing <code>npm link</code> or <code>npm install</code> from the root of a package</em></li>
</ul>
</li>
</ul>
<h4 id="pro"><a class="header-anchor" href="#pro"></a>pro</h4>
<ul>
<li>
<p>production dependencies: <strong>是依赖的默认种类</strong>.在项目开发和运行阶段都需要的依赖。</p>
<ul>
<li>在添加依赖时( 使用<code>npm install [包名]</code>/ <code>yarn add [包名]</code> )，如果不手动指定，则都添加为producrtion dependencies</li>
<li>被记录在<code>package.json</code>的<code>dependencies</code>属性</li>
</ul>
</li>
</ul>
<h4 id="dev"><a class="header-anchor" href="#dev"></a>dev</h4>
<ul>
<li>
<p>dev dependencies: 只在开发过程中需要，而运行时不需要的依赖</p>
<ul>
<li>
<p>比如 Babel, Flow 和<code>&quot;@vue/cli-service&quot;: &quot;xx&quot;</code>）</p>
</li>
<li>
<p>被记录在<code>package.json</code>的<code>devDependencies</code>属性</p>
</li>
<li>
<p>除非是想要把包发布在npm上, 否则pro和dev没什么区别, 都会被<code>npm install</code>下载.</p>
</li>
</ul>
</li>
</ul>
<h4 id="peer"><a class="header-anchor" href="#peer"></a>peer</h4>
<ul>
<li>
<p>peer dependencies: 在发布包的时候需要的依赖。有这种依赖意味着安装包的用户也需要和包同样的依赖。 这对于像 react 这样也被人安装的、需要单一 react-dom 副本的包很有用</p>
<ul>
<li>
<p>用于安装可能与使用者冲突的包</p>
<blockquote>
<p>我们组件的包需要react，使用者的项目也需要react，两个react的版本可能不一致，这个时候可以使用<code>peer-dependencies</code>来安装我们的react，避免与使用者冲突。</p>
</blockquote>
</li>
<li>
<p>被记录在<code>peerDependencies</code> 属性</p>
</li>
</ul>
</li>
<li>
<p>可以用<code>export NODE_ENV=production</code>来制定默认依赖环境</p>
</li>
</ul>
<h2 id="Env"><a class="header-anchor" href="#Env"></a>Env</h2>
<p>可以通过环境变量来指定下载的依赖类型:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export NODE_ENV = production</span><br></pre></td></tr></table></figure>
<p><a href="https://juejin.cn/post/6844903681192804359">https://juejin.cn/post/6844903681192804359</a></p>
<p><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F">https://cli.vuejs.org/zh/guide/mode-and-env.html#环境变量</a></p>
<h2 id="具体依赖管理文件"><a class="header-anchor" href="#具体依赖管理文件"></a>具体依赖管理文件</h2>
<h3 id="package-lock-json"><a class="header-anchor" href="#package-lock-json"></a>package-lock.json</h3>
<p><code>package-lock.json</code>: 在npm &gt; 5.0 使用<code>npm install</code> 下载依赖会生成<code>package-lock.json</code>文件。<strong>它记录了实际依赖版本信息，下次可以通过该文件去下载依赖，保证项目每次下载的依赖版本完全一致</strong>。</p>
<p>作用如下：</p>
<ul>
<li>锁定包的版本，确保再次下载时不会因为包版本不同而产生问题</li>
<li>加快下载速度，因为该文件中已经记录了项目所依赖第三方包的树状结构和包的下载地址，重新安装时只需下载即可，不需要做额外的工作</li>
</ul>
<p>注意：</p>
<ul>
<li>npm &lt; 5.0 没有<code>package-lock.json</code>，也不能自动把依赖信息写入<code>package.json</code></li>
</ul>
<h3 id="yarn-lock"><a class="header-anchor" href="#yarn-lock"></a>yarn.lock</h3>
<p><code>yarn.lock</code>:  使用<code>yarn add</code>下载依赖会生成<code>yarn.lock</code>文件。其作用基本上等于<code>npm</code>的<code>package-lock.json</code>。</p>
<ul>
<li><code>yarn.lock</code> 文件会锁定你安装的每个依赖项的确切版本，这可以确保你不会意外获得不良依赖。如：以前是1.2.1，执行 yarn 后，变为 1.2.2</li>
<li>注意，<strong>如果一个项目既用了<code>npm install</code>又用了<code>yarn add</code>， 那么会同时存在<code>package-lock.json</code>和<code>yarn.lock</code>文件</strong>，会发生什么我也不知道，所以一个项目最好只用一个依赖管理工具</li>
</ul>
<h2 id="node模块"><a class="header-anchor" href="#node模块"></a>node模块</h2>
<p>在node.<a href="http://www.fly63.com/tag/js">js</a>中模块与文件是一一对应的，也就是说一个node.<a href="http://www.fly63.com/tag/js">js</a>文件就是一个模块。</p>
<ul>
<li>核心模块：nodejs已经内置的一些模块，不需要用包管理工具下载</li>
<li>外部模块：需要用包管理工具下载，下载后均存放在<code>node_modules</code>文件夹中</li>
</ul>
<h3 id="node模块查找规则"><a class="header-anchor" href="#node模块查找规则"></a>node模块查找规则</h3>
<h4 id="通过路径查找"><a class="header-anchor" href="#通过路径查找"></a>通过路径查找</h4>
<p>当指定模块路径时</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./find.js&#x27;</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./find&#x27;</span>); <span class="comment">//模块文件后缀可以省略</span></span><br></pre></td></tr></table></figure>
<ol>
<li>require方法根据该路径查找模块，如果是完整路径，直接引入模块。</li>
<li>如果模块后缀省略，先找同名JS文件再找同名JS文件夹</li>
<li>如果找到了同名文件夹，找文件夹中的<code>index.js</code></li>
<li>如果文件夹中没有<code>index.js</code>就会去当前文件夹中的<code>package.json</code>文件中查找main选项中的入口文件</li>
<li>如果找指定的入口文件不存在或者没有指定入口文件就会报错，模块没有被找到</li>
</ol>
<h4 id="通过模块名查找"><a class="header-anchor" href="#通过模块名查找"></a>通过模块名查找</h4>
<p>可以不指定路径，直接写模块名:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;find&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ol>
<li>Node.js会假设它是系统模块</li>
<li>Node.js会去<code>node_modules</code>文件夹中</li>
<li>首先看是否有该名字的JS文件</li>
<li>再看是否有该名字的文件夹</li>
<li>如果是文件夹看里面是否有<code>index.js</code></li>
<li>如果没有index.js查看该文件夹中的<code>package.json</code>中的main选项确定模块入口文件<br>
否则找不到报错</li>
</ol>
<p>简言之，先查同名的系统模块，找不到再去<code>node_modules</code>中查外部模块</p>
<h2 id="查看node项目版本"><a class="header-anchor" href="#查看node项目版本"></a>查看node项目版本</h2>
<ol>
<li>
<p>如果项目使用 yarn 和 typescript，可以查看yarn.lock 里的@types/node@ 的 version:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;@types/node@*&quot;:</span><br><span class="line">  version &quot;14.0.20&quot;</span><br><span class="line">  resolved &quot;https://registry.npmjs.org/@types/node/-/node-14.0.20.tgz#0da05cddbc761e1fa98af88a17244c8c1ff37231&quot;</span><br><span class="line">  integrity sha512-MRn/NP3dee8yL5QhbSA6riuwkS+UOcsPUMOIOG3KMUQpuor/2TopdRBu8QaaB4fGU+gz/bzyDWt0FtUbeJ8H1A==</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>packageJson.engines，第三方模块都会有，自己的项目中有可能有</p>
</li>
<li>
<p>FROM，如果采用 docker 部署，查看基础镜像 Dockerfile 中 node 的版本号</p>
</li>
<li>
<p>如果以上方式都不可以，那就只能问人或者自己蒙了. 可以查找<a href="https://nodejs.org/zh-cn/download/releases/">nodejs的版本发布表</a>, 根据项目的日期大概能猜出来版本</p>
</li>
</ol>
<p>那只有问人了. <strong>因此强烈建议项目使用yarn + Ts</strong></p>
<h2 id="nvm"><a class="header-anchor" href="#nvm"></a>nvm</h2>
<h3 id="Commands"><a class="header-anchor" href="#Commands"></a>Commands</h3>
<ul>
<li>
<p>查看当前node版本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm current</span><br></pre></td></tr></table></figure>
<p>或者:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>
<p>卸载指定版本node:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm uninstall &lt;version&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>
<p>列出所有可以安装的node版本号:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm ls-remote：</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装指定版本号的node</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm v15.1.0</span><br></pre></td></tr></table></figure>
<p>或者( e.g. 对于node版本15.X ):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm install 15</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装最新版本的node：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install node</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>全局地切换node的版本:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm use v15.1.0</span><br></pre></td></tr></table></figure>
<p>或者( e.g. 对于node版本15.X):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm use 15</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>列出所有已经安装的node版本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Installation"><a class="header-anchor" href="#Installation"></a>Installation</h3>
<p>以下只演示<a href="https://tecadmin.net/install-nvm-macos-with-homebrew/#:~:text=%20How%20To%20Install%20NVM%20on%20macOS%20with,ready%20for%20the%20installation.%20Update%20the...%20More%20">macOS上的NVM安装过程</a>， 对于Linux，nvm只要一行命令就可以安装了</p>
<ol>
<li>Remove existing Node Versions</li>
</ol>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew uninstall --ignore-dependencies node </span><br><span class="line">brew uninstall --force node </span><br></pre></td></tr></table></figure>
<ol start="2">
<li>
<p>Install NVM on macOS</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew update </span><br><span class="line">brew install nvm </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Next, create a directory for NVM at home.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/.nvm </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>编辑配置文件(这里我用的是<code>~/.zshrc</code>)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvim ~/.zshrc</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使编辑生效:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="node-Installation"><a class="header-anchor" href="#node-Installation"></a>node Installation</h2>
<p>在安装了nvm的情况下:</p>
<p>Install any version listed in above output. You can also use aliases names like <strong>node</strong> for latest version, <strong>lts</strong> for latest LTS version, etc.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm install node     ## Installing Latest version </span><br><span class="line">nvm install 14       ## Installing Node.js 14.X version </span><br></pre></td></tr></table></figure>
<p>After installing you can verify what is installed with:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure>
<h2 id="node-modules-Management"><a class="header-anchor" href="#node-modules-Management"></a>node_modules Management</h2>
<p>一般通过包管理工具来对node_modeules进行管理。 不过手动删除这个操作无论是yarn还是npm都特别慢， 可以使用额外的工具<code>rimraf</code>， 它是node的一个包，可以快速删除<code>node_modules</code>，再也不用等半天了</p>
<ul>
<li>安装： <code>npm install rimraf -g</code></li>
<li>使用：<code>rimraf node_modules</code></li>
</ul>
<h1 id="npm"><a class="header-anchor" href="#npm"></a>npm</h1>
<p><a href="https://docs.npmjs.com/cli/v6/configuring-npm">npm doc</a></p>
<h2 id="npm-vs-yarn"><a class="header-anchor" href="#npm-vs-yarn"></a>npm vs yarn</h2>
<table>
<thead>
<tr>
<th><strong>npm</strong></th>
<th><strong>yarn</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>npm install</td>
<td>yarn</td>
<td>安装项目依赖</td>
</tr>
<tr>
<td>npm install react --save</td>
<td>yarn add react</td>
<td>添加一个依赖到项目中，如：添加 react 到项目。</td>
</tr>
<tr>
<td>npm uninstall react --save</td>
<td>yarn remove react</td>
<td>从项目删除一个依赖，如：从项目删除 react 依赖</td>
</tr>
<tr>
<td>npm install react --save-dev</td>
<td>yarn add react --dev</td>
<td>将项目依赖添加到开发依赖，只有在开发模式下才能使用</td>
</tr>
<tr>
<td>npm update --save</td>
<td>yarn upgrade</td>
<td>更新项目依赖</td>
</tr>
</tbody>
</table>
<h2 id="npm-Installation"><a class="header-anchor" href="#npm-Installation"></a>npm Installation</h2>
<p>node自带了npm，所以安装node后就默认安装了对应版本的npm</p>
<h2 id="Problems"><a class="header-anchor" href="#Problems"></a>Problems</h2>
<ol>
<li>
<p>This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I’ll try to do my best with it!</p>
<p>这是因为npm的版本和依赖文件中某些依赖所需的npm版本不同.</p>
<p>从报错可以看出npm适用于lockfileVersion@1, 但是<code>package-lock.json</code>是源于lockfileVersion@2的.</p>
<ul>
<li>这时就需要更改npm版本</li>
<li>还有一种可能, 注意到<code>npm -g</code>和<code>npm</code>使用的是不同的npm, 所以出现这个问题很有可能是错误使用了<code>npm -g</code></li>
</ul>
</li>
</ol>
<h2 id="Commands-2"><a class="header-anchor" href="#Commands-2"></a>Commands</h2>
<ul>
<li>
<p>查看npm版本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装/更新到最新版本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm -g install  npm</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装/更新到指定版本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm -g install npm@6.14.11</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>
<p>查看全局安装目录:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm root -g</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>
<p>下载依赖：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i[nstall] &lt;package&gt; --save-dev</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>--save</code>，简写为<code>-s</code>或<code>-S</code>：<strong>将依赖信息保存至 <code>package.json</code></strong>, 默认保存到<code>dependencies</code>属性</p>
<p>该option后可以跟选项，指定具体的依赖类型</p>
<ul>
<li><code>--save-dev</code>，简写为<code>-d</code>或<code>-D</code>: 指定依赖类型为dev dependency, 依赖信息会被保存在<code>devDependencies</code>属性。</li>
</ul>
</li>
<li>
<p><strong>对于npm &gt; 5.0， 默认会启用<code>--save</code></strong></p>
</li>
<li>
<p><code>-g</code>:全局安装</p>
</li>
</ul>
</li>
<li>
<p>卸载依赖: 在项目根目录, 即node_modules所在目录运行: <strong>注意, 卸载并不会把依赖从package.json中去掉</strong>( 但是安装会 )</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm un[install] &lt;package-name&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-S</code> 或 <code>--save</code> 标志，则此操作还会移除 <code>package.json</code> 文件中的引用.</li>
</ul>
</li>
<li>
<p>如果程序包是开发依赖项（列在 <code>package.json</code> 文件的 devDependencies 中），则必须使用 <code>-D</code> 或 <code>--save-dev</code> 标志从文件中移除</p>
<ul>
<li>如果该软件包是全局安装的，则需要添加 <code>-g</code> 或 <code>--global</code> 标志：</li>
<li>可以在系统上的任何位置运行<code>npm un -g</code>, 因为当前所在的文件夹无关紧要</li>
</ul>
</li>
</ul>
<h2 id="Config"><a class="header-anchor" href="#Config"></a>Config</h2>
<p>npm获取配置的方式，优先级由高到低：</p>
<ul>
<li>
<p>命令行参数： 以设置代理为例：--proxy <a href="http://server">http://server</a>:port即将proxy的值设为http://server:port。</p>
</li>
<li>
<p>环境变量：以npm_config_为前缀的环境变量将会被认为是npm的配置属性。以设置proxy为例可以加入这样的环境变量npm_config_proxy=http://server:port。</p>
</li>
<li>
<p>用户配置文件：可以通过npm config get userconfig查看文件路径。</p>
</li>
<li>
<p>全局配置文件：可以通过npm config get globalconfig查看文件路径。</p>
</li>
<li>
<p>内置配置文件：安装npm的目录下的npmrc文件。</p>
</li>
<li>
<p>默认配置： npm本身有默认配置参数，如果以上都没设置，则npm会使用默认配置参数。</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set &lt;key&gt; &lt;value&gt; [--global]</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config get &lt;key&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config delete &lt;key&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config list</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config edit</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm get &lt;key&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm set &lt;key&gt; &lt;value&gt; [--global]</span><br></pre></td></tr></table></figure>
<p>命令行操作说明：</p>
<p>在设置配置属性时属性值默认是被存储于用户配置文件中，如果加上--global，则被存储在全局配置文件中。</p>
<p>如果要查看npm的所有配置属性（包括默认配置），可以使用<code>npm config ls -l</code></p>
<h2 id="npm-run"><a class="header-anchor" href="#npm-run"></a>npm run</h2>
<p><a href="https://www.cnblogs.com/goloving/p/16306638.html">https://www.cnblogs.com/goloving/p/16306638.html</a></p>
<h2 id="Problems-2"><a class="header-anchor" href="#Problems-2"></a>Problems</h2>
<h3 id="Dockerizing"><a class="header-anchor" href="#Dockerizing"></a>Dockerizing</h3>
<p>使用Docker构建vue镜像:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ENV NODE_ENV production</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> node -v &amp;&amp; npm -v \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; npm config <span class="built_in">set</span> registry http://r.cnpmjs.org/ \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; npm install</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm run build</span></span><br></pre></td></tr></table></figure>
<p>其中的<code>npm run build</code>会调用package.json中的build字段的命令:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service serve&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service build&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service lint&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>可以看到, <code>vue-cli-service **</code>都使用了<code>vue-cli-service</code>这个命令, 他对应了一系列依赖:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">...    </span><br><span class="line">		<span class="attr">&quot;@vue/cli-plugin-babel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~5.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@vue/cli-plugin-eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~5.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">		...</span><br></pre></td></tr></table></figure>
<p>这些依赖默认全部被安装到了devDependencies. 因此, 如果在install时使用了pro模式, 即只下载pro依赖, 则不会下载上述依赖, 也就会在<code>npm run build</code>时报错:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: Cannot find module &#x27;@vue/cli-plugin-babel&#x27;</span><br><span class="line">//OR:</span><br><span class="line">vue-cli-service: not found</span><br></pre></td></tr></table></figure>
<ul>
<li>该问题发生的常见情况是, 在Dockerfile里配置了<code>ENV NODE_ENV production</code>,</li>
</ul>
<p>因此, <strong>千万不要在install的时候用production</strong>, 当然你可以在build和run的时候开启:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service serve  --open  --mode development&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service build --mode production&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue-cli-service lint&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<h2 id="npx"><a class="header-anchor" href="#npx"></a>npx</h2>
<p>npx: <a href="https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b">a package runner tool that comes with npm 5.2+</a>.</p>
<p><a href="https://www.ruanyifeng.com/blog/2019/02/npx.html">教程</a></p>
<p>由于node自带npm，后者( 在 npm &gt;= 5.2 后)又自带npx，所以安装node后可以直接使用npx.</p>
<p>手动安装npx:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g npx</span><br></pre></td></tr></table></figure>
<p>简单来说，npx可以指定使用某个版本的node，让该版本的node来执行命令。 避免了项目构建中需要降低node版本的尴尬情况</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx node@0.12.8 [<span class="built_in">command</span>]</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面命令会使用 0.12.8 版本的 Node 执行脚本。原理是从 npm <strong>下载这个版本的 node，使用后再删掉</strong>。</p>
<p><code>-p</code>： 在安装指定版本的node后，不删除该node</p>
<p>npx可以替代很多npm版本管理工具，比如<code>nvm</code></p>
<h2 id="n"><a class="header-anchor" href="#n"></a>n</h2>
<ol>
<li>
<p>安装n模块:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g n</span><br></pre></td></tr></table></figure>
<p>报错则改用另一条命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g n --force</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>升级node.js到最新稳定版</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">n stable</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者升级到最新版</span></span><br><span class="line">n latest</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装指定版本node:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">n v14.16.0</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>切换node版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">n 7.10.0</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="yarn"><a class="header-anchor" href="#yarn"></a>yarn</h1>
<p><a href="https://yarnpkg.com/getting-started/usage">文档</a></p>
<p>Yarn是facebook发布的一款取代npm的包管理工具， Yarn并行地安装包，速度比npm快。 <strong>推荐使用yarn</strong></p>
<h2 id="corepack-Installation"><a class="header-anchor" href="#corepack-Installation"></a>corepack Installation</h2>
<p><code>corepack</code>是一个对包管理器进行管理的工具，其安装包中包含了<code>yarn</code>. 也就是说，安装了<code>corepack</code>后就不需要手动安装<code>yarn</code>了</p>
<blockquote>
<p>也可以用npm安装yarn，但是不推荐这种方法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>
<p><strong>Node.js &lt;16.10</strong>:</p>
<p>Node默认包括了<code>npm</code>. 但在Node v16.10之前， Node没有默认包括<code>corepack</code>， 需要手动安装:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g corepack</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Node.js &gt;=16.10:</p>
<p>v16.10之后，node默认包含了<code>corepack</code>， 但只是作为可选项，没有默认启用。 需要手动启用:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">corepack enable</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>安装完<code>corepack</code>就可以直接使用<code>yarn</code>了！</p>
<h2 id="Commands-3"><a class="header-anchor" href="#Commands-3"></a>Commands</h2>
<ul>
<li>
<p>把Yarn更新到最新版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn set version stable</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>
<p>查看全局安装目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g yarn react-native-cli</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>
<p>Accessing the list of commands</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn help</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>
<p>Starting a new project</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn init</span><br></pre></td></tr></table></figure>
<ul>
<li>同<code>npm init</code>，执行输入信息后，会生成<code>package.json</code>文件</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>Installing all the dependencies</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn</span><br></pre></td></tr></table></figure>
<p>OR:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>这会安装<code>package.json</code>里所有包，并将所有依赖项信息保存进<code>yarn.lock</code></p>
</li>
<li>
<p>options:</p>
<ul>
<li>
<p>强制重新下载所有包:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn install --force </span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>Adding a dependency:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add [package]</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>依赖信息会自动更新到<code>package.json</code>和<code>yarn.lock</code>文件中</p>
</li>
<li>
<p><code>yarn global add</code>： 全局安装</p>
</li>
<li>
<p>安装指定版本, 这里指的是主要版本，如果需要精确到小版本，使用-E参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add [package]@[version]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装某个tag（比如beta,next或者latest）:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add [package]@[tag]</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>指定添加的依赖类型：</p>
</li>
</ul>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add [package] --dev  # dev dependencies</span><br><span class="line">yarn add [package] --peer # peer dependencies</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>Upgrading a dependency</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn up [package]</span><br><span class="line">yarn up [package]@[version]</span><br><span class="line">yarn up [package]@[tag]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Removing a dependency</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn remove [package]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Upgrading Yarn itself</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn set version latest</span><br><span class="line">yarn set version from sources</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>
<p>启动项目:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="yrm"><a class="header-anchor" href="#yrm"></a>yrm</h2>
<p>yrm 是一个<code>yarn</code>源管理器，允许你快速地在源间切换</p>
<ul>
<li>
<p>安装:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn global add yrm</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看可用源:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yrm ls</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>选择源:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yrm use [source]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Problems-3"><a class="header-anchor" href="#Problems-3"></a>Problems</h2>
<ul>
<li>
<p>mac 运行react 项目时报错: <code>/bin/sh: craco: command not found</code> ， 很明显是<code>craco</code>这个命令没安装。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add @craco/craco#</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install @craco/craco --save</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="React"><a class="header-anchor" href="#React"></a>React</h1>
<p>生成一个全新的 ts + react 的模版:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx create-react-app my__app__name --template typescript</span><br><span class="line"></span><br><span class="line">OR</span><br><span class="line"></span><br><span class="line">yarn create react-app my__app__name --template typescript</span><br></pre></td></tr></table></figure>
<p>Before we get started, &quot;Tailwind CSS requires Node.js 12.13.0 or higher&quot; (tailwindcss). Make sure you have Node.js installed and the correct version by running <code>node --version</code> in your command line.</p>
<p>使用tailwind CSS: 进入项目目录，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add tailwindcss -D</span><br></pre></td></tr></table></figure>
<p>After installation process is done, we need to create Tailwind CSS configuration file. To do so, we need to run the following command:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx tailwind init</span><br></pre></td></tr></table></figure>
<p>This will initialise Tailwind with a new configuration file in the root of your project.</p>
<h1 id="Vue"><a class="header-anchor" href="#Vue"></a>Vue</h1>
<ul>
<li>
<p>vue是构建用户界面的渐进式JavaScript 框架</p>
</li>
<li>
<p>vue-cli是vue的一个官方脚手架工具（快速工程化命令工具）, 用来帮助程序员们快速搭建基于vue框架的开发环境。</p>
<ul>
<li>vue有很多脚手架工具，vue-cli只是其中一种，侧重于单页面应用 (SPA) 的快速搭建，网址：<a href="http://cli.vuejs.org/zh/guide/">cli.vuejs.org/zh/guide/</a></li>
<li>Vue-cli = Vue + 一堆的js插件</li>
<li>vue-cli 4.5以下, 对应的是Vue2</li>
<li>vue-cli 4.5及以上, 对应的是Vue3</li>
</ul>
</li>
<li>
<p>@vue/cli是新版vue-cli，提供了GUI维护界面，@vue/cli 安装的是vue3及以上版本, vue-cli 安装的是vue2</p>
</li>
<li>
<p>命令行的<code>vue</code>命令其实是对应<code>vue-cli</code>这个程序, 而不是<code>vue</code></p>
</li>
</ul>
<h2 id="vue-cli-安装"><a class="header-anchor" href="#vue-cli-安装"></a>vue-cli 安装</h2>
<p>安装之前先卸载旧版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall -g @vue/cli</span><br></pre></td></tr></table></figure>
<p>安装3.0及其以后版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli@x.x.x</span><br></pre></td></tr></table></figure>
<p>安装3.0以前的旧版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli@2.x</span><br></pre></td></tr></table></figure>
<p>查看vue-cli 版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue -V</span><br></pre></td></tr></table></figure>
<h2 id="vue3安装"><a class="header-anchor" href="#vue3安装"></a>vue3安装</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue@next</span><br></pre></td></tr></table></figure>
<p>查看vue版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm list vue</span><br></pre></td></tr></table></figure>
<h1 id="Tailwind"><a class="header-anchor" href="#Tailwind"></a>Tailwind</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add tailwindcss -D</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Toolkit</category>
        <category>Frontend</category>
      </categories>
  </entry>
  <entry>
    <title>Traditional Unix CLI Tools</title>
    <url>/2022/09/13/Traditional-Unix-CLI-Tools/</url>
    <content><![CDATA[<p>传统的Unix 命令行工具, 已被大部分Linux发行版所包括, 有时候需要手动下载</p>
<span id="more"></span>
<h1 id="Networking"><a class="header-anchor" href="#Networking"></a>Networking</h1>
<p>ping:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install iputils-ping</span><br></pre></td></tr></table></figure>
<p>traceroute:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install traceroute</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Training Day</title>
    <url>/2022/03/19/Training-Day/</url>
    <content><![CDATA[<p>一男的从家里出来，他看到门廊里有只蜗牛，他把它扔到了后院。 但蜗牛是不会死的，很快它就能爬了，千辛万苦，用了快一年，蜗牛又爬回了门廊。这个时候，男人刚好出门，看见这蜗牛，然后说：“你tm的什么毛病？”</p>
<span id="more"></span>
<h1 id="Plot"><a class="header-anchor" href="#Plot"></a>Plot</h1>
<ol>
<li>
<p>Alonzo因为惹怒了俄罗斯黑帮，所以要准备100万美元交钱保平安。于是Alonzo想出来一个局，由于他手下的人太狡猾，不好骗，于是他向上级提出纳新，此后一周他一直在谋划整个计划。</p>
</li>
<li>
<p>接下来Jake就上场了。Alonzo一整天的行动都是围绕利用这个新人展开的，他先故意带菜鸟去贩毒点，为的是拿到和自己无关的毒品和吸毒工具。（这里很容易让人迷惑他是个好人，其实他只是为了抢对方的吸毒工具）之后使用更厉害的毒品骗菜鸟吸食（这里黑人掉包了毒品，并不是大麻之类的低级毒品而是海洛因一类的化学毒品），目的是在接下来的环节可以抓住白人的话柄，时刻威胁他会为此丢了饭碗，不想白人警察的正义感让他救下来一个差点被强奸的女孩，让黑人的计划出现了意外的漏洞。</p>
</li>
<li>
<p>Roger是Alonzo的线人，Alonzo先带Jake去他家拜访，实则是摸底，因为他想要抢劫Roger。 此时Roger出于爱才，给Jake讲了蜗牛的故事，并告诉Jake：“什么时候懂了这个笑话，你就懂了这个地方”。</p>
</li>
<li>
<p>为了能去Roger家里“名正言顺”的拿到这笔钱，于是又要准备搜查令。而开搜查令需要买通那群高层，所以Alonzo故意去抓snoopy dogg，就是为了在男主面前演戏，要去找sandman，因为以Alonzo的人脉，没道理他不知道地盘上有一个sandman贩毒。抢了sandman四万美元去贿赂法官开搜查证明，之后去抢劫Roger一百万美元，并杀掉，到这一步，实际上Jake已经迷失自我，准备真的追随Alonzo。</p>
</li>
<li>
<p>但是Alonzo的局没有结束，他想要弄死Jake,因为之前在Roger家分赃时，以及之后车上的谈话，Alonzo已经明白了他蛊惑不了 Jake，所以斩草除根。</p>
<ul>
<li>在车上，Alonzo为了消除Jake的负罪感，告诉Jake， Roger是一个大毒枭。其实后者是他的线人</li>
<li>其实即使Jake答应了，即使不被杀死，也还是会被Alonzo利用，来背一百万美元的锅</li>
</ul>
</li>
<li>
<p>在拉美裔的地盘，Alonzo把Jake扔在那然后自己离开。其实就是要让人弄死他。后面“微笑哥”的话也证明这条，他说这就是business，意思就是只是要杀他，并不是私人恩怨。但是由于Jake阴差阳错白人救了微笑哥的妹妹，Jake没有死并且醒悟过来去抢了Alonzo的救命钱。</p>
</li>
<li>
<p>最后Jake黑化，他并没有上交这一百万美元，因为新闻没有提。Alonzo没有钱交赎金被乱枪打死。</p>
</li>
</ol>
<h1 id="Review"><a class="header-anchor" href="#Review"></a>Review</h1>
<ul>
<li>
<p>那个蜗牛的故事，其实门廊就是正义，男人就是Alonzo,蜗牛是Jake</p>
<p>蜗牛躺在门廊上，却跟了男人，后者很随意的把蜗牛从门廊上扔出去，打碎了他的壳（壳是蜗牛与残酷外界之间的保护，即坚守的原则与美好的幻想），蜗牛装死一会儿（接受现实中）后又起来了，继续朝着门廊（正义）爬着，以为这是要学会的法则，自己跟着黑警走是没错的。万番辛苦后，当他好不容易又走到了门廊处时，男人却说：你tm的什么毛病？（你壳都没了，底线都突破了，赤身裸体，还妄想着追寻正义这种东西？）  Roger想提醒Jake，Alonzo从不在意蜗牛的死活与蜗牛的倔强，他很随意的打碎你的壳，不是为了特意教会你什么，只因为你对他就是随意的存在，是幼稚可笑的，用完就扔的。你相信了他，又爬到当初的门廊处时质问他正义所在时，只会收获一句你脑子瓦特了。</p>
</li>
<li>
<p>而男主当时的理解是，作为一名警察，要珍惜自己的smail and tears, 因为这是唯一别人夺不走的东西。这是典型的理想主义的想法，和Roger的本意是南辕北辙的</p>
</li>
<li>
<p>这部电影告诉我们要坚持自己的理念和原则，而且与其在深渊中挣扎，不如一开始就离开那。 即使一定要走向深渊，也千万不能相信社会上的任何人，因为你永远不知道，他们背地里是不是扭曲的怪物</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Art</category>
      </categories>
      <tags>
        <tag>Movie</tag>
      </tags>
  </entry>
  <entry>
    <title>Unix CLI Tools</title>
    <url>/2022/09/13/Unix-CLI-Tools/</url>
    <content><![CDATA[<p>一些常用的命令行工具，和它们的现代替代</p>
<p>ref: <a href="https://missing.csail.mit.edu/2020/shell-tools/">MIT  lesson</a>, <a href="https://github.com/ibraheemdev/modern-unix">Unix命令的现代替代</a></p>
<span id="more"></span>
<h1 id="Easy-Installation"><a class="header-anchor" href="#Easy-Installation"></a>Easy Installation</h1>
<p>对于传统UnixCLi工具,都已经被加入到Unix标准工具集中,不需要手动下载了. 而很多新工具需要手动下载. 以下列出的所有新工具均可以用包管理器( <code>yay</code> for Arch, <code>brew</code> for OSX )下载. 为了方便, 我还提供了<a href="https://github.com/LYK-love/PackageLists">依赖列表</a>来批量下载.</p>
<h2 id="依赖列表说明"><a class="header-anchor" href="#依赖列表说明"></a>依赖列表说明</h2>
<p>文件名格式为<code>[XX_Packages]_[Platform[_Advanced]]].txt</code>:</p>
<ul>
<li>
<p><code>[xx_packages]</code>: 就是包的类型, 比如R<code>esource_Monitoring_Packages</code>等等</p>
</li>
<li>
<p><code>[Platform]</code>:包兼容的平台</p>
<ul>
<li><code>Linux</code>: 故名思义,就是Linux下可以安装的包</li>
<li><code>Mac</code>: Mac OSX下可以安装的包. 总体来说和linux下没有大的区别</li>
<li><code>General</code>:Linux和Mac同时兼容的包</li>
</ul>
</li>
<li>
<p><code>[XX]_[Platform[_Advanced]</code>: 如果一个列表出现了有和无<code>Advanced</code>的两个版本, 说明该列表的类型内有些包用处不大, 不需要安装, 也就没有包括在无<code>Advanced</code>的列表里面. 而<code>Advanced</code>列表中包含了全部包.</p>
<ul>
<li>比如同为终端文件浏览器的<code>ranger</code>和<code>broot</code>,一般情况下使用前者就够了, 因此 <code>File&amp;Oir_Operations_Packages_General.txt</code>只包含了<code>ranger</code>, 而<code>File&amp;Oir_Operations_Packages_Anvanced.txt</code>包含了后者</li>
</ul>
</li>
</ul>
<h2 id="依赖列表使用"><a class="header-anchor" href="#依赖列表使用"></a>依赖列表使用</h2>
<p>Mac:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install $(cat [packages].txt)</span><br></pre></td></tr></table></figure>
<p>for other platform just replace brew with your correspondding package manager</p>
<h1 id="File-and-Dir"><a class="header-anchor" href="#File-and-Dir"></a>File and Dir</h1>
<p>For mac:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install coreutils</span><br></pre></td></tr></table></figure>
<p><code>File&amp;Dir_Operations_Packages_General.txt</code>: 没安装broot</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exa	ranger	bat	diff-so-fancy	fd	ripgrep</span><br></pre></td></tr></table></figure>
<p><code>File&amp;Dir_Operations_Packages_Advanced.txt</code>: 把broot加上了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exa	ranger	bat	diff-so-fancy	fd	ripgrep broot</span><br></pre></td></tr></table></figure>
<h2 id="列出目录-exa"><a class="header-anchor" href="#列出目录-exa"></a>列出目录: exa</h2>
<p><code>exa</code>是<code>ls</code>命令的替代品，可以彩色输出目录内容，更容易辨识:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exa --long --git</span><br></pre></td></tr></table></figure>
<ul>
<li>参数<code>--git</code>表示输出文件的 Git 状态。
<ul>
<li><code>N</code>：新文件</li>
<li><code>M</code>：文件有变动</li>
<li><code>I</code>：该文件被忽略</li>
</ul>
</li>
</ul>
<p>除了平铺显示，<code>exa</code>还支持目录的树状显示。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exa --tree --level=2</span><br></pre></td></tr></table></figure>
<h2 id="终端文件浏览器-ranger-broot"><a class="header-anchor" href="#终端文件浏览器-ranger-broot"></a>终端文件浏览器: ranger / broot</h2>
<ul>
<li>
<p>ranger: 终端文件浏览器, 支持vim语法</p>
</li>
<li>
<p>broot: 类似ranger的终端文件浏览器， 不支持vim语法，但是能浏览媒体文件</p>
<p>Usage:</p>
<p>列出当前目录的文件信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">br -sdph</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-s</code>：显示文件体积</li>
<li><code>-d</code>：显示文件时间</li>
<li><code>-p</code>：显示文件权限</li>
<li><code>-h</code>：显示隐藏文件</li>
</ul>
<p>在broot界面中，可以完成各种文件操作：</p>
<ul>
<li>搜索：输入搜索词</li>
<li>复制：输入<code>:cp &lt;复制后的文件名&gt;</code></li>
<li>删除：输入<code>:rm</code></li>
<li>改名：输入<code>:mv &lt;新文件名&gt;</code></li>
<li>退出：输入<code>:q</code></li>
</ul>
<p>还可以预览文件：</p>
<ul>
<li>打开外部关联程序： 通过上下箭头选中文件，然后按下右箭头<code>→</code></li>
<li>在当前窗口预览文件： <code>ctrl + →</code></li>
</ul>
</li>
</ul>
<h2 id="bat-fx-hexyl"><a class="header-anchor" href="#bat-fx-hexyl"></a>bat &amp; fx &amp; hexyl</h2>
<ul>
<li>
<p><a href="https://github.com/sharkdp/bat">bat</a> : <code>cat</code>命令的替代品，输出文本文件的内容，并且带有<code>cat</code>所没有的代码高亮和行号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yay -S bat</span><br></pre></td></tr></table></figure>
<p>usage:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bat README.md</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><a href="https://github.com/antonmedv/fx">fx</a> 或者 <a href="https://github.com/stedolan/jq">jq</a>: 浏览JSON 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yay -S fx</span><br></pre></td></tr></table></figure>
<p>usage:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fx data.json</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><a href="https://github.com/sharkdp/hexyl">hexyl</a>: 浏览二进制文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yay -S hexyl</span><br></pre></td></tr></table></figure>
<p>usage:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexyl example.jpg</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="diff-so-fancy"><a class="header-anchor" href="#diff-so-fancy"></a>diff-so-fancy</h3>
<ul>
<li>
<p><a href="https://github.com/so-fancy/diff-so-fancy">diff-so-fancy</a> : 对diff进行了改进, 使得命令行的 diff 操作具有类似 GitHub 的页面效果. 可以用来替代git diff和diff</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yay -S diff-so-fancy</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>安装后, 参考官方文档进行配置:</p>
<h2 id="With-diff"><a class="header-anchor" href="#With-diff"></a>With diff</h2>
<p>Use <code>-u</code> with <code>diff</code> for unified output, and pipe the output to <code>diff-so-fancy</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">diff -u file_a file_b | diff-so-fancy</span><br></pre></td></tr></table></figure>
<h2 id="find-fd"><a class="header-anchor" href="#find-fd"></a>find/fd</h2>
<p>One of the most common repetitive tasks that every programmer faces is finding files or directories. All UNIX-like systems come packaged with <a href="https://www.man7.org/linux/man-pages/man1/find.1.html"><code>find</code></a>, a great shell tool to find files. <code>find</code> will recursively search for files matching some criteria. Some examples:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Find all directories named src</span></span><br><span class="line">find . -name src -type d</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Find all python files that have a folder named <span class="built_in">test</span> <span class="keyword">in</span> their path</span></span><br><span class="line">find . -path &#x27;*/test/*.py&#x27; -type f</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Find all files modified <span class="keyword">in</span> the last day</span></span><br><span class="line">find . -mtime -1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Find all zip files with size <span class="keyword">in</span> range 500k to 10M</span></span><br><span class="line">find . -size +500k -size -10M -name &#x27;*.tar.gz&#x27;</span><br></pre></td></tr></table></figure>
<p>Beyond listing files, find can also perform actions over files that match your query. This property can be incredibly helpful to simplify what could be fairly monotonous tasks.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Delete all files with .tmp extension</span></span><br><span class="line">find . -name &#x27;*.tmp&#x27; -exec rm &#123;&#125; \;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Find all PNG files and convert them to JPG</span></span><br><span class="line">find . -name &#x27;*.png&#x27; -exec convert &#123;&#125; &#123;&#125;.jpg \;</span><br></pre></td></tr></table></figure>
<p>Despite <code>find</code>’s ubiquitousness, its syntax can sometimes be tricky to remember. For instance, to simply find files that match some pattern <code>PATTERN</code> you have to execute <code>find -name '*PATTERN*'</code> (or <code>-iname</code> if you want the pattern matching to be case insensitive). You could start building aliases for those scenarios, but part of the shell philosophy is that it is good to explore alternatives. Remember, one of the best properties of the shell is that you are just calling programs, so you can find (or even write yourself) replacements for some. For instance, <a href="https://github.com/sharkdp/fd"><code>fd</code></a> is a simple, fast, and user-friendly alternative to <code>find</code>. It offers some nice defaults like colorized output, default regex matching, and Unicode support. It also has, in my opinion, a more intuitive syntax. For example, the syntax to find a pattern <code>PATTERN</code> is <code>fd PATTERN</code>.</p>
<p>Most would agree that <code>find</code> and <code>fd</code> are good, but some of you might be wondering about the efficiency of looking for files every time versus compiling some sort of index or database for quickly searching. That is what <a href="https://www.man7.org/linux/man-pages/man1/locate.1.html"><code>locate</code></a> is for. <code>locate</code> uses a database that is updated using <a href="https://www.man7.org/linux/man-pages/man1/updatedb.1.html"><code>updatedb</code></a>. In most systems, <code>updatedb</code> is updated daily via <a href="https://www.man7.org/linux/man-pages/man8/cron.8.html"><code>cron</code></a>. Therefore one trade-off between the two is speed vs freshness. Moreover <code>find</code> and similar tools can also find files using attributes such as file size, modification time, or file permissions, while <code>locate</code> just uses the file name. A more in-depth comparison can be found <a href="https://unix.stackexchange.com/questions/60205/locate-vs-find-usage-pros-and-cons-of-each-other">here</a>.</p>
<h2 id="grep-ripgrep"><a class="header-anchor" href="#grep-ripgrep"></a>grep &amp; ripgrep</h2>
<p>For now, know that <code>grep</code> has many flags that make it a very versatile tool. Some I frequently use are <code>-C</code> for getting <strong>C</strong>ontext around the matching line and <code>-v</code> for in<strong>v</strong>erting the match, i.e. print all lines that do <strong>not</strong> match the pattern. For example, <code>grep -C 5</code> will print 5 lines before and after the match. When it comes to quickly searching through many files, you want to use <code>-R</code> since it will <strong>R</strong>ecursively go into directories and look for files for the matching string.</p>
<p>But <code>grep -R</code> can be improved in many ways, such as ignoring <code>.git</code> folders, using multi CPU support, &amp;c. Many <code>grep</code> alternatives have been developed, including <a href="https://beyondgrep.com/">ack</a>, <a href="https://github.com/ggreer/the_silver_searcher">ag</a> and <a href="https://github.com/BurntSushi/ripgrep">rg</a>. All of them are fantastic and pretty much provide the same functionality. For now I am sticking with ripgrep (<code>rg</code>), given how fast and intuitive it is. Some examples:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Find all python files <span class="built_in">where</span> I used the requests library</span></span><br><span class="line">rg -t py &#x27;import requests&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Find all files (including hidden files) without a shebang line</span></span><br><span class="line">rg -u --files-without-match &quot;^#!&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Find all matches of foo and <span class="built_in">print</span> the following 5 lines</span></span><br><span class="line">rg foo -A 5</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Print statistics of matches (<span class="comment"># of matched lines and files )</span></span></span><br><span class="line">rg --stats PATTERN</span><br></pre></td></tr></table></figure>
<p>Note that as with <code>find</code>/<code>fd</code>, it is important that you know that these problems can be quickly solved using one of these tools, while the specific tools you use are not as important.</p>
<ul>
<li>
<p><a href="https://github.com/BurntSushi/ripgrep">ripgrep</a> 是<code>grep</code>命令的替代品，用来搜索文件内容, 默认带有行号和搜索词高亮，速度也更快:</p>
<p>它跟<code>grep</code>的用法类似。下面例子是搜索当前目录里面，所有内容包含字符串<code>foo</code>的 Markdown 文件。</p>
</li>
</ul>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grep 的写法</span></span><br><span class="line">$ grep foo *.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># ripgrep 的写法</span></span><br><span class="line">$ rg foo *.md</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="Finding-Shell-History"><a class="header-anchor" href="#Finding-Shell-History"></a>Finding Shell History</h2>
<p><code>Finding_Shell_History_Packages_General.txt</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fzf mcfly</span><br></pre></td></tr></table></figure>
<ul>
<li><code>history</code> : 在STDOUT上打印shell命令记录, 可以用 <code>history | grep find</code> 进行检索</li>
<li><code>Ctrl+R</code> + type a substring you want to match for commands in your history来检索历史命令. This can also be enabled with the UP/DOWN arrows in <a href="https://github.com/zsh-users/zsh-history-substring-search">zsh</a></li>
</ul>
<h3 id="fzf-mcfly"><a class="header-anchor" href="#fzf-mcfly"></a>fzf &amp;&amp; mcfly</h3>
<ul>
<li>
<p><code>fzf</code> : GO 语言编写的交互式的 Unix 命令行工具。可以用来查找任何 <strong>列表</strong>内容，文件、Git 分支、进程等。所有的命令行工具可以生成列表输出的都可以再通过管道 pipe 到 fzf 上进行搜索和查找.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yay -S fzf</span><br></pre></td></tr></table></figure>
<p>这个命令比较复杂, 见<a href="https://zhuanlan.zhihu.com/p/41859976#:~:text=Fuzzy%20finder%20%28fzf%2Bvim%29%20%E4%BD%BF%E7%94%A8%E5%85%A8%E6%8C%87%E5%8D%97%201%20%E5%AE%89%E8%A3%85%20%E4%BB%A5%20macOS,fzf%20%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%208%20%E6%A0%B8%E5%BF%83%E5%91%BD%E4%BB%A4%20FZF_DEFAULT_COMMAND%20...%20More%20items">教程</a></p>
</li>
<li>
<p><a href="https://github.com/cantino/mcfly">McFly</a> 是<code>ctrl-r</code>的替代品，安装以后，只要按下<code>ctrl-r</code>，就会出现一个更好用的搜索界面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yay -S mcfly</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Version-Control"><a class="header-anchor" href="#Version-Control"></a>Version Control</h1>
<h2 id="Configure-git-diff-so-fancy"><a class="header-anchor" href="#Configure-git-diff-so-fancy"></a>Configure git: diff-so-fancy</h2>
<p>Configure git to use <code>diff-so-fancy</code> for all diff output:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global core.pager &quot;diff-so-fancy | less --tabs=4 -RFX&quot;</span><br><span class="line">git config --global interactive.diffFilter &quot;diff-so-fancy --patch&quot;</span><br></pre></td></tr></table></figure>
<p>Improved colors for the highlighted bits</p>
<p>The default Git colors are not optimal. The colors used for the screenshot above were:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global color.ui true</span><br><span class="line"></span><br><span class="line">git config --global color.diff-highlight.oldNormal    &quot;red bold&quot;</span><br><span class="line">git config --global color.diff-highlight.oldHighlight &quot;red bold 52&quot;</span><br><span class="line">git config --global color.diff-highlight.newNormal    &quot;green bold&quot;</span><br><span class="line">git config --global color.diff-highlight.newHighlight &quot;green bold 22&quot;</span><br><span class="line"></span><br><span class="line">git config --global color.diff.meta       &quot;11&quot;</span><br><span class="line">git config --global color.diff.frag       &quot;magenta bold&quot;</span><br><span class="line">git config --global color.diff.func       &quot;146 bold&quot;</span><br><span class="line">git config --global color.diff.commit     &quot;yellow bold&quot;</span><br><span class="line">git config --global color.diff.old        &quot;red bold&quot;</span><br><span class="line">git config --global color.diff.new        &quot;green bold&quot;</span><br><span class="line">git config --global color.diff.whitespace &quot;red reverse&quot;</span><br></pre></td></tr></table></figure>
<p>以后每次执行<code>git diff</code>，就会输出它的执行结果</p>
<h2 id="gitupdate"><a class="header-anchor" href="#gitupdate"></a>gitupdate</h2>
<p><a href="https://github.com/nikitavoloboev/gitupdate">gitupdate</a>是一个工具, 用于Commit and push updated files with file names as commit message:</p>
<p>Install:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">go install github.com/nikitavoloboev/gitupdate@latest</span><br></pre></td></tr></table></figure>
<p>Usage:</p>
<p>You can either use it by passing it a file path (with git repo) that you want to commit. i.e.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitupdate /Users/nikivi/src/cli/gitupdate</span><br></pre></td></tr></table></figure>
<p>Or if you are already in the git directory you want to commit, run:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gitupdate .</span><br></pre></td></tr></table></figure>
<p>This will add all files that have changed since last commit and will include all the file names (without extension) as the commit message. <a href="https://github.com/nikitavoloboev/knowledge/commits/main">Example use</a>.</p>
<p>If you want to only consider top level folders for the commit message, use the <code>--top</code> (or <code>-t</code> for short) flag.</p>
<h1 id="Text-Operation"><a class="header-anchor" href="#Text-Operation"></a>Text Operation</h1>
<p><code>Text_Operations_Packages_General.txt</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">choose	jq	</span><br></pre></td></tr></table></figure>
<h2 id="choose"><a class="header-anchor" href="#choose"></a>choose</h2>
<p><a href="https://github.com/theryangeary/choose">choose</a> 是<code>cut</code>命令的替代品，用来选中指定的栏位。</p>
<p>它的优势主要是语法更简单，比如输出文件的第一列。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cut 的写法</span></span><br><span class="line">$ <span class="built_in">cat</span> data.txt | <span class="built_in">cut</span> -d <span class="string">&quot; &quot;</span> -f 1</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ <span class="built_in">cut</span> -d <span class="string">&quot; &quot;</span> -f 1 data.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># choose 的写法</span></span><br><span class="line">$ <span class="built_in">cat</span> data.txt | choose 0</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ choose 0 -i data.txt</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="jq"><a class="header-anchor" href="#jq"></a>jq</h2>
<ul>
<li><code>jq</code>: <code>sed</code> for JSON data.</li>
</ul>
<h1 id="Resource-Monitoring"><a class="header-anchor" href="#Resource-Monitoring"></a>Resource Monitoring</h1>
<p><code>Resource_Monitoring_Packages_General.txt</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">htop	bottom	iotop	procs	duf	ncdu	free	lsof</span><br></pre></td></tr></table></figure>
<p>可以酌情添加<code>glances</code>和<code>dstat</code></p>
<h2 id="General-Monitor-htop-bottom-iotop"><a class="header-anchor" href="#General-Monitor-htop-bottom-iotop"></a>General Monitor: htop &amp;&amp; bottom &amp;&amp; iotop</h2>
<ul>
<li>
<p><code>top</code>: 传统的资源监控工具</p>
</li>
<li>
<p><a href="https://htop.dev/"><code>htop</code></a>:  <code>htop</code> has a myriad of options and keybinds, some useful ones are: <code>&lt;F6&gt;</code> to sort processes, <code>t</code> to show tree hierarchy and <code>h</code> to toggle threads.</p>
</li>
<li>
<p><a href="https://nicolargo.github.io/glances/"><code>glances</code></a>: alternative for htop. with a great UI.</p>
</li>
<li>
<p>For , <a href="http://dag.wiee.rs/home-made/dstat/"><code>dstat</code></a> : alternative for htop. with aggregate measures across all processes. It can computes real-time resource metrics for lots of different subsystems like I/O, networking, CPU utilization, context switches, &amp;c.</p>
</li>
<li>
<p><a href="https://github.com/ClementTsang/bottom"><code>bottom</code></a>: Yet another cross-platform graphical process/system monitor. You can run bottom using <code>btm</code>.</p>
<ul>
<li>For help on flags, use <code>btm -h</code> for a quick overview or <code>btm --help</code> for more details.</li>
<li>For info on key and mouse bindings, press <code>?</code> inside bottom or refer to the <a href="https://clementtsang.github.io/bottom/nightly/">documentation</a>.</li>
</ul>
</li>
<li>
<p><a href="https://www.man7.org/linux/man-pages/man8/iotop.8.html"><code>iotop</code></a> displays live <strong>I/O usage information</strong> and is handy to check if a process is doing heavy I/O disk operations</p>
</li>
</ul>
<h2 id="Process-Info-procs"><a class="header-anchor" href="#Process-Info-procs"></a>Process Info:procs</h2>
<ul>
<li><code>ps</code>： 显示进程信息</li>
<li><code>procs</code>:  <code>ps</code>的现代替代</li>
</ul>
<h2 id="Disk-Usage-duf-ncdu"><a class="header-anchor" href="#Disk-Usage-duf-ncdu"></a>Disk Usage: duf, ncdu</h2>
<ul>
<li>
<p><code>df</code> : 显示磁盘占用情况</p>
</li>
<li>
<p><a href="http://man7.org/linux/man-pages/man1/du.1.html"><code>du</code></a> 显示当前目录下每个文件占用的磁盘空间</p>
<ul>
<li><code>-h</code> ： print with <strong>h</strong>uman readable format.</li>
</ul>
</li>
<li>
<p><code>duf</code>： <code>df</code>的现代替代</p>
</li>
<li>
<p><code>ncdu</code>： <code>du</code>的现代替代</p>
</li>
</ul>
<h2 id="Memory-Usage-free"><a class="header-anchor" href="#Memory-Usage-free"></a>Memory Usage: free</h2>
<ul>
<li><a href="https://www.man7.org/linux/man-pages/man1/free.1.html"><code>free</code></a> displays the total amount of free and used memory in the system. Memory is also displayed in tools like <code>htop</code>.</li>
</ul>
<h2 id="Open-Files-lsof"><a class="header-anchor" href="#Open-Files-lsof"></a>Open Files: lsof</h2>
<ul>
<li><a href="https://www.man7.org/linux/man-pages/man8/lsof.8.html"><code>lsof</code></a> lists file information about files opened by processes. It can be quite useful for checking which process has opened a specific file.</li>
</ul>
<h1 id="Networking"><a class="header-anchor" href="#Networking"></a>Networking</h1>
<p><code>networking_packages_Linux.txt</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ss	iproute2	nethlogs	iftop	gping	dog</span><br></pre></td></tr></table></figure>
<p><code>Networking_Packages_Mac.txt</code>: 没有<code>ss</code>, <code>iproute2</code>改成了<code>iproute2mac</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iproute2mac	nethlogs	iftop	gping	dog</span><br></pre></td></tr></table></figure>
<h2 id="Network-Package-Monitor-ss"><a class="header-anchor" href="#Network-Package-Monitor-ss"></a>Network Package Monitor: ss</h2>
<ul>
<li>
<p><a href="https://www.cnblogs.com/duanxz/p/4669798.html"><code>ss</code></a>: short for &quot;<strong>socket statistics</strong>&quot;.  <code>ss</code> lets you monitor incoming and outgoing network packets statistics as well as interface statistics. A common use case of <code>ss</code> is figuring out what process is using a given port in a machine.</p>
<ul>
<li>
<p>当服务器的socket连接数量变得非常大时，无论是使用netstat命令还是直接cat /proc/net/tcp，执行速度都会很慢, 用ss才是节省时间。</p>
</li>
<li>
<p><a href="https://www.igoroseledko.com/socket-statistics-ss-command/">教程</a></p>
</li>
<li>
<p>该工具似乎没有mac版</p>
</li>
</ul>
</li>
</ul>
<h2 id="Network-Config-ip"><a class="header-anchor" href="#Network-Config-ip"></a>Network Config: ip</h2>
<ul>
<li>
<p><code>ip</code>: 用于操作路由,网络设备和网络接口. 是<code>netstat</code> and <code>ifconfig</code> 的现代替代, 后二者已经停止维护了，可能不会被包含在新的Linux发行版中. <code>ip</code>命令位于iproute2工具包中.</p>
<p>Linux:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install iproute2</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/brona/iproute2mac">Mac版本</a>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install iproute2mac</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Usage"><a class="header-anchor" href="#Usage"></a>Usage</h3>
<p>也可以手动在<code>/etc/network/interfaces</code>内永久地添加路由信息</p>
<ul>
<li>
<p>查看路由表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip route</span><br></pre></td></tr></table></figure>
<p>注意，物理上的路由表和转发表，在Linux内核中被抽象成了一个东西，不作区分，所以统称为路由表</p>
<p>如果用netstat: <code>netstat -nr</code></p>
</li>
<li>
<p>Add a new default gateway route:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add default via &lt;gateway_IP&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Add/Delete an IP address to an interface:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ip route add &lt;network_ip&gt;/&lt;cidr&gt; via &lt;gateway_ip&gt; [ dev &lt;network_card_name&gt; ]</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>如果不指定网络设备，则会默认使用第一块网卡( 不会使用环回地址)</p>
</li>
<li>
<p>也可以添加默认路由: 把<code>&lt;network_ip&gt;/&lt;cidr&gt;</code>换成<code>default</code></p>
</li>
</ul>
</li>
<li>
<p>Modify an existing route using ip route command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ip route change </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Clear routes with flush using ip route command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ip route flush [ip]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Clear all the routes from the routing table using ip route command</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ip route flush table main</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Network-Usage-nethogs-iftop"><a class="header-anchor" href="#Network-Usage-nethogs-iftop"></a>Network Usage: nethogs, iftop</h2>
<ul>
<li><a href="https://github.com/raboof/nethogs"><code>nethogs</code></a> and <a href="http://www.ex-parrot.com/pdw/iftop/"><code>iftop</code></a> are good interactive CLI tools for monitoring network usage.</li>
</ul>
<p>If you want to test these tools you can also artificially impose loads on the machine using the <a href="https://linux.die.net/man/1/stress"><code>stress</code></a> command.</p>
<h2 id="Network-Connections-gping"><a class="header-anchor" href="#Network-Connections-gping"></a>Network Connections: gping</h2>
<ul>
<li><a href="https://github.com/orf/gping"><code>gping</code></a>: <code>ping</code>, but with a graph.</li>
</ul>
<h2 id="NetworkRequests-httpie"><a class="header-anchor" href="#NetworkRequests-httpie"></a>NetworkRequests: httpie</h2>
<p><a href="https://github.com/httpie/httpie">httpie</a> 是 curl 的替代品，用来发出 HTTP 请求。</p>
<p>它的特点是语法更简单，并且服务器的返回内容会格式化高亮显示。</p>
<p><img data-src="https://cdn.beekka.com/blogimg/asset/202201/bg2022012707.webp" alt="img"></p>
<p>下面是发出 PUT 请求的例子。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl 的写法</span></span><br><span class="line">$ curl -X PUT -d hello=world example.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># httpie 的写法</span></span><br><span class="line">$ http PUT example.com hello=world </span><br></pre></td></tr></table></figure>
</blockquote>
<p>同类项目还有 <a href="https://github.com/rs/curlie">curlie</a>、<a href="https://github.com/ducaale/xh">xh</a>。</p>
<h2 id="DNS-dog"><a class="header-anchor" href="#DNS-dog"></a>DNS: dog</h2>
<ul>
<li>
<p><a href="https://dns.lookup.dog/">dog</a> : 是<code>dig</code>命令的替代品，用来发出 DNS 查询。它的用法比<code>dig</code>简单多了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认查询 A 记录</span></span><br><span class="line">dog example.net</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询多个记录</span></span><br><span class="line">dog example.net A NS MX</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Benchmarking"><a class="header-anchor" href="#Benchmarking"></a>Benchmarking</h1>
<p><code>Benchmarking_Packages_General.txt</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hyperfine</span><br></pre></td></tr></table></figure>
<h2 id="hyperfine"><a class="header-anchor" href="#hyperfine"></a>hyperfine</h2>
<ul>
<li><a href="https://github.com/sharkdp/hyperfine"><code>hyperfine</code></a>: A command-line benchmarking tool.</li>
</ul>
<h1 id="Calculating"><a class="header-anchor" href="#Calculating"></a>Calculating</h1>
<p><code>Calculating_Packages_General.txt</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scal</span><br></pre></td></tr></table></figure>
<h2 id="sc"><a class="header-anchor" href="#sc"></a>sc</h2>
<ul>
<li><code>sc</code>: short for: <code>scal</code></li>
</ul>
<h1 id="Efficiency"><a class="header-anchor" href="#Efficiency"></a>Efficiency</h1>
<h2 id="tldr"><a class="header-anchor" href="#tldr"></a>tldr</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yay -S tldr</span><br></pre></td></tr></table></figure>
<p>或者用man/info，后者的信息存放在<code>/usr/info</code></p>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Transformation of RE, NFA, DFA</title>
    <url>/2022/09/26/Transformation%20of%20RE,%20NFA,%20DFA/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>REGEX -&gt; NFA</li>
<li>NFA -&gt; DFA</li>
<li>Minimizing DFA</li>
<li>DFA -&gt; REGEX</li>
<li>Prove DFA &lt;=&gt; REGEX</li>
</ul>
<span id="more"></span>
<h1 id="RE-NFA"><a class="header-anchor" href="#RE-NFA"></a>RE -&gt; NFA</h1>
<p><a href="https://blog.csdn.net/weixin_44691608/article/details/110195743">ref</a></p>
<p>使用Thompson 构造法, 基本思想是 <strong>按结构归纳</strong></p>
<ul>
<li>对正则定义的每个规则，分别建立一个图的映射，因此所有正则表达式都可以表现为这些子图的组合</li>
</ul>
<h1 id="NFA-DFA"><a class="header-anchor" href="#NFA-DFA"></a>NFA -&gt; DFA</h1>
<p>用子集构造法</p>
<p><a href="https://blog.csdn.net/weixin_44691608/article/details/110213913">ref</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Subset-Construction(NFA)</span><br><span class="line">    let Dtran be a table</span><br><span class="line">    DFA_States = &#123;ε-closure(NFA.s0)&#125;  # DFA 状态集合的初始状态为 NFA 初始状态的闭包，并且未标记</span><br><span class="line">    <span class="keyword">while</span> (exist T in DFA_States not marked) &#123; # 存在未标记的 DFA 状态</span><br><span class="line">        mark T  # 标记 T，表示查过 T 状态的所有后续状态了</span><br><span class="line">        <span class="keyword">for</span> (a in Σ) &#123; </span><br><span class="line">            Tc = ε-closure(move(T, a)) # 找到所有输入字符对应的下一个状态</span><br><span class="line">            <span class="keyword">if</span> (Tc not in DFA_States) &#123; # 将状态加入到 DFA_States</span><br><span class="line">                push Tc in DFA_States &amp; unmarked Tc</span><br><span class="line">            &#125;# 如果新状态已经在Dtran中，那么不会添加新状态，只会添加[T, a]</span><br><span class="line">            Dtran[T, a] = Tc</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Dtran</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>简言之，根据连通性不断添加新状态，直到所有状态成为闭包</p>
<h1 id="Minimizing-DFA"><a class="header-anchor" href="#Minimizing-DFA"></a>Minimizing DFA</h1>
<p><a href="https://blog.csdn.net/weixin_44691608/article/details/110440659">ref</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Min-DFA(Dtran)</span><br><span class="line">    let U = &#123;S\F, F&#125; # 初始的等价类有两个组，分别是非终止状态和终止状态</span><br><span class="line">    <span class="keyword">for</span> (G in U) &#123; # 对等价类中每个组做划分</span><br><span class="line">        <span class="keyword">while</span> (G can be divided) &#123;</span><br><span class="line">            g1, g2, g3, ... = divide(G)</span><br><span class="line">            remove G from U</span><br><span class="line">            add g1, g2, g3, ... into U</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol>
<li>首先将上面的 DFA 分为非终止状态和终止状态两组，然后对每一组进行检查是否能够再做划分，若可则对划分后的组再划分，直到不可再划分</li>
<li>最后根据划分后的组重建 Dtran 表并重绘 DFA 图</li>
</ol>
<ul>
<li>
<p><code>不可划分</code>：</p>
<p>若对于组内所有状态，对于所有输入都有相同的输出状态，则称该组<code>不可再被划分</code>。</p>
</li>
</ul>
<h1 id="Prove-DFA-RE"><a class="header-anchor" href="#Prove-DFA-RE"></a>Prove DFA &lt;=&gt; RE</h1>
<p>验证DFA和其转化出的REGEX的等价性, 使用Kleene闭包</p>
<p><a href="https://blog.csdn.net/weixin_44691608/article/details/110440659">ref</a></p>
<ul>
<li>
<p>符号归约：</p>
<p>假设有向图中节点编号为 $0$(初始状态)到 $n − 1$</p>
<ul>
<li>$R_{ij}^k$ : 从节点 i 到节点 j、且中间节点编号不大于k的所有路径</li>
<li>$R_{ij}^{-1}$: 从节点 i 到节点 j、且不经过中间节点的所有路径</li>
<li>$\empty$: 路径不可达， 我们有 $\empty$ r = r $\empty$= $\empty$ 和 $\empty$|r = r</li>
<li>$\epsilon$: 空路径，即状态不发生变化的边（回到同一状态）</li>
</ul>
</li>
<li>
<p>Kleene闭包： $R_{ij}^{k} = R_{ij}^{k-1} (R_{ij}^{k})^* R_{ij}^{k-1} | R_{ij}^{k-1} $ ( 就是Floyd算法 )</p>
</li>
<li>
<p>步骤：</p>
<ul>
<li>动态规划思想，从$k=-1$开始不断迭代，直到有$R_{ij}^{n-1}$，其中 $i$ 和 $j$ 是起点和终点</li>
<li>验证结果是否与原来的正则等价</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Computer Science</category>
      </categories>
      <tags>
        <tag>Compilers</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode</title>
    <url>/2022/09/13/VSCode/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Install</li>
<li>Config</li>
</ul>
<span id="more"></span>
<h1 id="Config"><a class="header-anchor" href="#Config"></a>Config</h1>
<p>To open the <strong>User</strong> settings:</p>
<ul>
<li>Open the command palette (either with F1 or Ctrl+Shift+P)</li>
<li>Type <em>&quot;open settings&quot;</em></li>
<li>You are presented with two options, choose <strong>Open Settings (JSON)</strong></li>
</ul>
<p>Which, depending on platform, is one of:</p>
<ul>
<li><strong>Windows</strong> <code>%APPDATA%\Code\User\settings.json</code></li>
<li><strong>macOS</strong> <code>$HOME/Library/Application\ Support/Code/User/settings.json</code></li>
<li><strong>Linux</strong> <code>$HOME/.config/Code/User/settings.json</code></li>
</ul>
<p>The Workspace settings will be in a <code>&#123;workspaceName&#125;.code-workspace</code> file where you saved it, and the Folder settings will be in a <code>.vscode</code> folder if and when it has been created.</p>
<h2 id="Using-Clang-in-Visual-Studio-Code"><a class="header-anchor" href="#Using-Clang-in-Visual-Studio-Code"></a>Using Clang in Visual Studio Code</h2>
<p><a href="https://code.visualstudio.com/docs/cpp/config-clang-mac">https://code.visualstudio.com/docs/cpp/config-clang-mac</a></p>
<h1 id="Visual-Studio-Code-on-macOS"><a class="header-anchor" href="#Visual-Studio-Code-on-macOS"></a>Visual Studio Code on macOS</h1>
<p><a href="https://code.visualstudio.com/docs/setup/mac">https://code.visualstudio.com/docs/setup/mac</a></p>
<h1 id="Using-C-on-Linux-in-VS-Code"><a class="header-anchor" href="#Using-C-on-Linux-in-VS-Code"></a>Using C++ on Linux in VS Code</h1>
<p><a href="https://code.visualstudio.com/docs/cpp/config-linux">https://code.visualstudio.com/docs/cpp/config-linux</a></p>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Editor</tag>
      </tags>
  </entry>
  <entry>
    <title>Unix Toolkit</title>
    <url>/2022/02/19/Unix-Toolkit/</url>
    <content><![CDATA[<p>介绍了Unix, Unix Like主机的常用操作</p>
<p>OS可以是各种LINUX发行版和Mac OSX，因此你可以看到各种包管理工具（yay,apt,yum, brew...）, 选自己用的就好</p>
<span id="more"></span>
<h1 id="SSH"><a class="header-anchor" href="#SSH"></a>SSH</h1>
<h2 id="配置ssh免密登陆"><a class="header-anchor" href="#配置ssh免密登陆"></a>配置ssh免密登陆</h2>
<p>主机上生成 ssh key：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>腾讯云的服务器不会默认生成ssh key， 所以也不会有<code>~/.ssh</code>文件夹， 其他主机也无法通过ssh连接（<code>ssh-copy-id</code>）也不行。 因此腾讯云服务器需要先生成ssh key，才能使用</p>
</li>
<li>
<p>(这种情况很罕见)如果主机没有安装ssh，需要先安装<code>openssh-server</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install openssh-server</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>查看<code>~/.ssh</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">❯ ls -l ~/.ssh</span><br><span class="line">total 20</span><br><span class="line">-rw-r--r-- 1 lyk lyk   27  2月 10 15:44 config</span><br><span class="line">-rw------- 1 lyk lyk 2602  2月  9 17:18 id_rsa</span><br><span class="line">-rw-r--r-- 1 lyk lyk  571  2月  9 17:18 id_rsa.pub</span><br><span class="line">-rw------- 1 lyk lyk 3926  2月 19 12:58 known_hosts</span><br><span class="line">-rw------- 1 lyk lyk 3182  2月 19 12:41 known_hosts.old</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>authorized_keys: 存放远程免密登录的公钥,主要通过这个文件记录多台机器的公钥。(没有则手动创建该文件)</p>
</li>
<li>
<p>id_rsa: 生成的私钥文件</p>
</li>
<li>
<p>id_rsa.pub: 生成的公钥文件</p>
</li>
<li>
<p>known_hosts: 已知的主机公钥清单</p>
</li>
</ul>
<p>注意, ssh是对应Linux User的. 因此配置了本机当前用户和目标用户的ssh, 并不代表着配本机root用户到目标用户的ssh(因为当前用户的ssh公私药都存在<code>~/.ssh</code>而非/root/.ssh).<br>
例如: 配置本机当前用户与github的ssh后, 是无法执行<code>sudo git clone XXX</code>的. 因为root用户没有和github配置ssh.</p>
<p>服务器上配置ssh免密登陆：</p>
<ul>
<li>将本地 id_rsa.pub 文件的内容拷贝至远程服务器的 ~/.ssh/authorized_keys
<ul>
<li>如果服务器没有<code>~/.ssh</code>，则需要自己创建</li>
</ul>
</li>
<li>也可以<code>ssh-copy-id user@host </code></li>
</ul>
<h2 id="本机到本机的免密登陆"><a class="header-anchor" href="#本机到本机的免密登陆"></a>本机到本机的免密登陆</h2>
<p>本机到本机也是需要配置免密登陆的，但是<code>root@localhost</code>需要额外配置，<code>/etc/ssh/sshd_config</code>中有一个属性为<code>PermitRootLogin</code> ,默认值no不允许进行密码登录，我们需要将其改为yes.：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<p>然后重启ssh服务:</p>
<p>ubuntu：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure>
<p>manjaro:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure>
<p>mac:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist</span><br></pre></td></tr></table></figure>
<p>ssh会因为各种各样的原因失败，排查ssh问题的命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sshd -T</span><br></pre></td></tr></table></figure>
<p>如果远程主机的公钥发生了变化, 那么需要重新纪录远程主机的公钥，这需要先把原来的记录清空：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -R [remote-host-ip]</span><br></pre></td></tr></table></figure>
<h1 id="User-Config"><a class="header-anchor" href="#User-Config"></a>User Config</h1>
<h2 id="配置用户"><a class="header-anchor" href="#配置用户"></a>配置用户</h2>
<p>详见后文 <em>用户操作</em></p>
<p>添加用户：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo adduser [username]</span><br></pre></td></tr></table></figure>
<h2 id="赋予新用户sudo权限"><a class="header-anchor" href="#赋予新用户sudo权限"></a>赋予新用户sudo权限</h2>
<p>用adduser创建后的新用户是不能使用sudo的，因为还没有赋予相关root权限，执行以下代码赋予权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo usermod -a -G adm username</span><br><span class="line">sudo usermod -a -G sudo username</span><br></pre></td></tr></table></figure>
<p>或者将用户加到sudoers文件中:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加sudo文件的写权限,命令是:</span></span><br><span class="line">chmod u+w /etc/sudoers</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编辑sudoers文件</span></span><br><span class="line">vim /etc/sudoers</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在 root ALL=(ALL) ALL,下面添加lyk ALL=(ALL) ALL</span> </span><br><span class="line">lyk ALL=(ALL) ALL</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">最后删除sudo文件的写权限</span></span><br><span class="line">chmod u-w /etc/sudoers</span><br></pre></td></tr></table></figure>
<h1 id="Disk-Config"><a class="header-anchor" href="#Disk-Config"></a>Disk Config</h1>
<p><code>fdisk</code>：查看磁盘信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo fdisk -l</span><br></pre></td></tr></table></figure>
<p>卸载分区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">sudo umount  [磁盘路径]</span></span><br><span class="line">sudo umount /dev/nvme0n1p11</span><br></pre></td></tr></table></figure>
<p>将分区格式化为ext4类型</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">（这里分区为/dev/nvme0n1p11）</span></span><br><span class="line">sudo mkfs.ext4  /dev/sdb1</span><br></pre></td></tr></table></figure>
<h2 id="挂载分区（临时）"><a class="header-anchor" href="#挂载分区（临时）"></a>挂载分区（临时）</h2>
<p>挂载分区（ 这里挂载到到<code>/data</code>目录下 ）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#sudo mount  /dev/sdb1  /[目录名] （目录当然是已存在的）</span><br><span class="line">sudo mount /dev/sdb1 /data</span><br></pre></td></tr></table></figure>
<ul>
<li>这个挂载是临时的，重新开机就会丢失。 如果要开机自动启动挂载， 需要编辑<code>/etc/fstab</code></li>
</ul>
<p>查看硬盘和挂载分区等信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df  -h</span><br></pre></td></tr></table></figure>
<p>这样就成功添加了一块硬盘并挂载到<code>/data</code>目录下了，</p>
<h2 id="设置开机自动挂载"><a class="header-anchor" href="#设置开机自动挂载"></a>设置开机自动挂载</h2>
<ol>
<li>查询UUID</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -al /dev/disk/by-uuid</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出为：</span></span><br><span class="line">...</span><br><span class="line">... 88e7c2eb-82e6-48c2-a3d8-829c32468f1f -&gt; ../../nvme0n1p11</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>可以查到对应分区<code>nvme0n1p11</code>的uuid为<code>88e7c2eb-82e6-48c2-a3d8-829c32468f1f</code></p>
<ol start="2">
<li>编辑<code>/etc/fstab</code>(用来存放文件系统的静态信息的文件)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/fstab</span><br></pre></td></tr></table></figure>
<p>末尾加上UUID=刚刚复制的UUID /data ext defaults 0 0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UUID=刚刚复制的UUID /data ext4 defaults 0 0</span><br></pre></td></tr></table></figure>
<h1 id="Start-Using"><a class="header-anchor" href="#Start-Using"></a>Start Using</h1>
<p>不仅主机需要安装软件, 有时容器也需要安装某些软件( 尤其是传统Unix命令行工具包). 对于某些非常精简的容器, 可能连ping这样的基本命令都没有，需要手动安装这些基本的命令.</p>
<p>如果OS是Ubuntu（ 云服务器或容器 ）， 需要先：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>Terminal</p>
<ul>
<li><a href="https://lyk-love.cn/2022/09/13/Terminal/">安装终端模拟器, Zsh, Zsh主题, Zsh插件以及各种美化</a></li>
<li><a href="https://lyk-love.cn/2022/09/13/Tmux/">Tmux</a></li>
</ul>
</li>
<li>
<p>Editor or IDE: 对于服务器而言, 大多数OS预装的vim都够用了. 自用的话还得是nvim</p>
<ul>
<li><a href="https://lyk-love.cn/2022/08/18/Nvim-Developing-%20Environment/">Nvim Developing Environment</a></li>
<li><a href="https://lyk-love.cn/2022/09/13/VSCode/">VSCode</a></li>
</ul>
</li>
<li>
<p><a href="https://lyk-love.cn/2022/09/13/Package-Manager/">Package Manager</a></p>
</li>
<li>
<p><a href="https://lyk-love.cn/2022/09/13/Unix-CLI-Tools/?highlight=unix+t">Unix CLI Tools</a></p>
</li>
<li>
<p><a href="https://lyk-love.cn/2022/09/13/Traditional-Unix-CLI-Tools/">Traditional Unix CLI Tools</a></p>
</li>
<li>
<p>各种开发环境:</p>
<ul>
<li><a href="https://lyk-love.cn/2022/09/13/Java-Toolkit/">Java-Toolkit</a></li>
<li><a href="https://lyk-love.cn/2022/09/13/Clang-LLVM-Toolkit/">Clang/LLVM Toolkit</a></li>
</ul>
</li>
<li>
<p>数据库: <a href="https://lyk-love.cn/2022/09/13/Database-Toolkit/#more">Database Toolkit</a></p>
</li>
<li>
<p>云原生工具安装: <a href="https://lyk-love.cn/2022/09/13/Cloud-Native-Toolkit/">Cloud Native Toolkit</a></p>
</li>
</ul>
<h1 id="常用操作"><a class="header-anchor" href="#常用操作"></a>常用操作</h1>
<h2 id="clipboard"><a class="header-anchor" href="#clipboard"></a>clipboard</h2>
<p><code>pbcopy</code> on OSX can Copy data from stdin to the clipboard.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">nvim a</span><br><span class="line"><span class="comment"># write thoughtful response</span></span><br><span class="line"><span class="built_in">cat</span> a | pbcopy</span><br><span class="line"><span class="comment"># cmd tab</span></span><br><span class="line"><span class="comment"># paste to slack</span></span><br><span class="line"><span class="built_in">rm</span> a</span><br></pre></td></tr></table></figure>
<h2 id="xxd"><a class="header-anchor" href="#xxd"></a>xxd</h2>
<p><a href="https://www.tutorialspoint.com/unix_commands/xxd.htm">xxd</a> - make a hexdump or do the reverse.</p>
<p>查看键盘输入的字符对应的16进制表示:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">xxd -ps</span><br></pre></td></tr></table></figure>
<h3 id="Example"><a class="header-anchor" href="#Example"></a>Example</h3>
<p>输入 <code>&lt;Ctrl+b&gt; + c</code>，其会显示该输入的 hex codes 为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">^Bc</span><br><span class="line">02630a</span><br></pre></td></tr></table></figure>
<p>其中，<code>02</code> 代表 <code>&lt;Ctrl+b&gt;</code>，<code>63</code> 代表 <code>c</code>，而 <code>0a</code> 代表回车键</p>
<h2 id="Aliases"><a class="header-anchor" href="#Aliases"></a>Aliases</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias alias_name=&quot;command_to_alias arg1 arg2&quot;</span><br></pre></td></tr></table></figure>
<p><code>alias</code>是一个<code>command</code>，接受<strong>一个</strong>参数， 因此<code>=</code>左右不能有空格</p>
<h3 id="example"><a class="header-anchor" href="#example"></a>example</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Make shorthands <span class="keyword">for</span> common flags</span></span><br><span class="line">alias ll=&quot;ls -lh&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Save a lot of typing <span class="keyword">for</span> common commands</span></span><br><span class="line">alias gs=&quot;git status&quot;</span><br><span class="line">alias gc=&quot;git commit&quot;</span><br><span class="line">alias v=&quot;vim&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Save you from mistyping</span></span><br><span class="line">alias sl=ls</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Overwrite existing commands <span class="keyword">for</span> better defaults</span></span><br><span class="line">alias mv=&quot;mv -i&quot;           # -i prompts before overwrite</span><br><span class="line">alias mkdir=&quot;mkdir -p&quot;     # -p make parent dirs as needed</span><br><span class="line">alias df=&quot;df -h&quot;           # -h prints human readable format</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Alias can be composed</span></span><br><span class="line">alias la=&quot;ls -A&quot;</span><br><span class="line">alias lla=&quot;la -l&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">To ignore an <span class="built_in">alias</span> run it prepended with \</span></span><br><span class="line"><span class="language-bash">\<span class="built_in">ls</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Or <span class="built_in">disable</span> an <span class="built_in">alias</span> altogether with <span class="built_in">unalias</span></span></span><br><span class="line">unalias la</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">To get an <span class="built_in">alias</span> definition just call it with <span class="built_in">alias</span></span></span><br><span class="line">alias ll</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Will <span class="built_in">print</span> ll=<span class="string">&#x27;ls -lh&#x27;</span></span></span><br></pre></td></tr></table></figure>
<p><code>alias</code>是面向session的，session关闭也使得<code>alias</code>失效， 要想使<code>alias</code>持久化，可以将其写在shell的启动文件，如 <code>.bashrc</code> or <code>.zshrc</code></p>
<h2 id="clear"><a class="header-anchor" href="#clear"></a>clear</h2>
<p>清屏：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure>
<h2 id="切换tty"><a class="header-anchor" href="#切换tty"></a>切换tty</h2>
<ol>
<li>
<p>CTRL + ALT + Fn</p>
</li>
<li>
<pre><code class="language-shell">sudo chvt N # N: tty number, 1 represents the main tty
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 下载</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line"># Download the contents of a URL to a file (named &quot;foo&quot; in this case):</span><br><span class="line">wget https://example.com/foo</span><br><span class="line"></span><br><span class="line"># Download the contents of a URL to a file (named &quot;bar&quot; in this case):</span><br><span class="line">wget -O bar https://example.com/foo</span><br></pre></td></tr></table></figure>

</code></pre>
</li>
</ol>
<h2 id="主机操作"><a class="header-anchor" href="#主机操作"></a>主机操作</h2>
<p>查看主机名：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostname </span><br></pre></td></tr></table></figure>
<p>更改主机名：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname # 编辑该文件</span><br></pre></td></tr></table></figure>
<p>添加域名映射：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>
<h2 id="时间"><a class="header-anchor" href="#时间"></a>时间</h2>
<p>查看时间：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">date</span><br></pre></td></tr></table></figure>
<h2 id="查看发行版"><a class="header-anchor" href="#查看发行版"></a>查看发行版</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure>
<h2 id="用户操作"><a class="header-anchor" href="#用户操作"></a>用户操作</h2>
<h3 id="创建新用户"><a class="header-anchor" href="#创建新用户"></a>创建新用户</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo adduser [username]</span><br></pre></td></tr></table></figure>
<h3 id="切换用户"><a class="header-anchor" href="#切换用户"></a>切换用户</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo su [username]</span><br></pre></td></tr></table></figure>
<h3 id="修改用户密码"><a class="header-anchor" href="#修改用户密码"></a>修改用户密码</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo passwd user</span><br></pre></td></tr></table></figure>
<h3 id="删除用户"><a class="header-anchor" href="#删除用户"></a>删除用户</h3>
<p><code>sudo userdel username</code>: 仅仅删除用户，不删除用户的home目录文件</p>
<ul>
<li><code>-r</code>: 删除用户的home目录文件</li>
</ul>
<p>当需要删除用户时可以使用以下指令</p>
<h3 id="查看用户组"><a class="header-anchor" href="#查看用户组"></a>查看用户组</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/group</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>awk</title>
    <url>/2022/02/09/awk/</url>
    <content><![CDATA[<p><code>awk</code> is a an <strong>interpreted</strong> programming language that is good at <strong>processing text streams</strong></p>
<p>ref: <a href="https://www.tutorialspoint.com/awk/index.htm">awk tutorial</a></p>
<span id="more"></span>
<h1 id="AWK"><a class="header-anchor" href="#AWK"></a>AWK</h1>
<h2 id="workflow"><a class="header-anchor" href="#workflow"></a>workflow</h2>
<p><img data-src="https://www.tutorialspoint.com/awk/images/awk_workflow.jpg" alt=""></p>
<ul>
<li>
<p>Read</p>
<p>AWK reads a line from the input stream (file, pipe, or stdin) and stores it in memory.</p>
</li>
<li>
<p>Execute</p>
<p>All AWK commands are applied sequentially on the input. By default AWK execute commands on every line. We can restrict this by providing patterns.</p>
</li>
<li>
<p>Repeat</p>
<p>This process repeats until the file reaches its end.</p>
</li>
</ul>
<h2 id="Program-Structure"><a class="header-anchor" href="#Program-Structure"></a>Program Structure</h2>
<p>Let us now understand the program structure of AWK.</p>
<h3 id="Body-Block"><a class="header-anchor" href="#Body-Block"></a>Body Block</h3>
<p>The syntax of the body block is as follows −</p>
<p><strong>Syntax</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/pattern/ &#123;awk-commands&#125;</span><br></pre></td></tr></table></figure>
<p><code>awk</code> programs take the form of an optional <strong>pattern</strong> plus a <strong>block</strong> saying what to do if the pattern matches a given line.</p>
<ul>
<li>
<p>The default pattern (which we used above) matches all lines</p>
</li>
<li>
<p>pattern不仅可以是REGEX，还可以是条件表达式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出奇数行</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">awk -F <span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;NR % 2 == 1 &#123;print $1&#125;&#x27;</span> demo.txt</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>In the absence of a body block − default action is taken which is <strong>print</strong> the line.</p>
</li>
<li>
<p>Inside the block,</p>
<ul>
<li><code>$0</code> :  entire line’s contents, and</li>
<li><code>$1</code> through <code>$n</code> :  the <code>n</code>th <em>field</em> of that line,
<ul>
<li>fields are separated by the <code>awk</code> field separator, (whitespace by default, change with <code>-F</code>)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="BEGIN-END-block"><a class="header-anchor" href="#BEGIN-END-block"></a>BEGIN &amp;&amp; END block</h3>
<p>this block is optional.</p>
<p><strong>Syntax</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> &#123;awk-commands&#125;</span><br><span class="line"><span class="keyword">END</span> &#123;awk-commands&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>The BEGIN block gets executed at program start-up.</p>
</li>
<li>
<p>The END block executes at the end of the program</p>
</li>
<li>
<p>属于 AWK keyword， 必须大写</p>
</li>
</ul>
<p>===================================&gt;</p>
<ul>
<li>
<p>examole:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">| awk &#x27;$1 == 1 &amp;&amp; $2 ~ /^c[^ ]*e$/ &#123; print $2 &#125;&#x27; | wc -l</span><br></pre></td></tr></table></figure>
<ul>
<li>The pattern says that the first field of the line should be equal to 1 (that’s the count from <code>uniq -c</code>), and that the second field should match the given regular expression. And the block just says to print the username.</li>
<li>We then count the number of lines in the output with <code>wc -l</code>.</li>
</ul>
</li>
</ul>
<h2 id="command-line"><a class="header-anchor" href="#command-line"></a>command line</h2>
<ul>
<li>ark command 必须用单引号括起来</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">awk [options] <span class="string">&#x27;command&#x27;</span> target_file</span><br></pre></td></tr></table></figure>
<h2 id="program-File"><a class="header-anchor" href="#program-File"></a>program File</h2>
<p>We can provide AWK commands in a script file</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">awk [options]-f source_code_file  target_file</span><br></pre></td></tr></table></figure>
<h2 id="standard-options"><a class="header-anchor" href="#standard-options"></a>standard options</h2>
<ul>
<li>
<p><code>-v</code>:  assigns a value to a variable. It allows assignment before the program execution.</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ awk -v name=Jerry <span class="string">&#x27;BEGIN&#123;printf &quot;Name = %s\n&quot;, name&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>--dump-variables[=file]</code>:  prints a sorted list of global variables and their final values to file. The default file is <code>awkvars.out</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ awk --dump-variables <span class="string">&#x27;&#x27;</span></span><br><span class="line">$ cat awkvars.out </span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>--help</code></p>
</li>
<li>
<p><code>--lint[=fatal]</code> :  enables checking of non-portable or dubious constructs. When an argument <strong>fatal</strong> is provided, it treats warning messages as errors</p>
</li>
<li>
<p><code>-posix option</code>:   turns on strict POSIX compatibility, in which all common and gawk-specific extensions are disabled</p>
</li>
<li>
<p><code>--profile[=file]</code>: generates a pretty-printed version of the program in file. Default file is <code>awkprof.out</code></p>
<p>example:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">[jerry]$ </span><span class="language-bash">awk --profile <span class="string">&#x27;BEGIN&#123;printf&quot;---|Header|--\n&quot;&#125; &#123;print&#125;</span></span> </span><br><span class="line">END&#123;printf&quot;---|Footer|---\n&quot;&#125;&#x27; marks.txt &gt; /dev/null </span><br><span class="line"><span class="meta prompt_">[jerry]$ </span><span class="language-bash"><span class="string">cat awkprof.out</span></span></span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># gawk profile, created Sun Oct 26 19:50:48 2014</span><br><span class="line"></span><br><span class="line">   # BEGIN block(s)</span><br><span class="line"></span><br><span class="line">   BEGIN &#123;</span><br><span class="line">      printf &quot;---|Header|--\n&quot;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   # Rule(s) &#123;</span><br><span class="line">      print $0</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   # END block(s)</span><br><span class="line"></span><br><span class="line">   END &#123;</span><br><span class="line">      printf &quot;---|Footer|---\n&quot;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>--traditional</code> :  disables all gawk-specific extensions.</p>
</li>
</ul>
<h2 id="variable"><a class="header-anchor" href="#variable"></a>variable</h2>
<ul>
<li>awk变量不需要定义和声明，可以直接使用，初始值为<code>0</code></li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[jerry]$ awk <span class="string">&#x27;/a/&#123;++cnt&#125; END &#123;print &quot;Count = &quot;, cnt&#125;&#x27;</span> marks.txt</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>built-in variables:</p>
<ul>
<li>
<p><code>ARGC</code></p>
</li>
<li>
<p><code>ARGV</code></p>
</li>
<li>
<p><code>CONVFMT</code>: It represents the conversion format for numbers. Its default value is <code>%.6g</code></p>
</li>
<li>
<p><code>ENVIRON</code>: It is an associative array of environment variables.</p>
<p><code>awk 'BEGIN &#123; print ENVIRON[&quot;USER&quot;] &#125;'</code></p>
</li>
<li>
<p><code>FILENAME</code>: 当前处理的文件名</p>
</li>
<li>
<p><code>FS</code>: 字段分隔符，默认是空格和制表符, 可以用<code>-F</code>更改</p>
<p><code>awk 'BEGIN &#123;print &quot;FS = &quot; FS&#125;' | cat -vte</code></p>
</li>
<li>
<p><code>NF</code>: 表示当前行的字段数，因此<code>$NF</code>就代表最后一个字段。</p>
<p><code>echo -e &quot;One Two\nOne Two Three\nOne Two Three Four&quot; | awk 'NF &gt; 2'</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;this is a test&#x27;</span> | awk <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span></span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>NR</code>：表示当前处理的行号</p>
</li>
<li>
<p><code>OFMT</code>: It represents the output format number and its default value is <code>%.6g</code>.</p>
</li>
<li>
<p><code>OFS</code>:  输出字段的分隔符，用于打印时分隔字段，默认为空格。</p>
<p><code>awk 'BEGIN &#123;print &quot;OFS = &quot; OFS&#125;' | cat -vte</code></p>
</li>
<li>
<p><code>ORS</code>:  输出记录的分隔符，用于打印时分隔记录，默认为换行符。</p>
</li>
</ul>
</li>
</ul>
<h2 id="REGEX"><a class="header-anchor" href="#REGEX"></a>REGEX</h2>
<p>与其他语言的regex相同</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo -e &quot;Apple Juice\nApple Pie\nApple Tart\nApple Cake&quot; | awk </span><br><span class="line">   &#x27;/Apple (Juice|Cake)/&#x27;</span><br><span class="line">   </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">output：</span></span><br><span class="line">Apple Juice</span><br><span class="line">Apple Cake</span><br></pre></td></tr></table></figure>
<h2 id="Array"><a class="header-anchor" href="#Array"></a>Array</h2>
<ul>
<li>
<p>assign : <code>array_name[index] = value</code></p>
<ul>
<li>不需要定义或声明</li>
<li><code>index</code>可以是<code>string</code>或<code>number</code></li>
</ul>
</li>
<li>
<p>Creating Array</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[jerry]$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">   fruits[&quot;mango&quot;] = &quot;yellow&quot;;</span></span><br><span class="line"><span class="string">   fruits[&quot;orange&quot;] = &quot;orange&quot;</span></span><br><span class="line"><span class="string">   print fruits[&quot;orange&quot;] &quot;\n&quot; fruits[&quot;mango&quot;]</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#output</span></span><br><span class="line">orange</span><br><span class="line">yellow</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Deleting Array Elements</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete array_name[index]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Multi-Dimensional arrays</p>
<p><code>array_name[index, index] = value</code></p>
</li>
</ul>
<h2 id="control-flow"><a class="header-anchor" href="#control-flow"></a>control flow</h2>
<p>与其他语言同</p>
<ul>
<li>
<p><code>if</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (condition)</span><br><span class="line">   action</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">[jerry]$ </span><span class="language-bash">awk <span class="string">&#x27;BEGIN &#123;num = 10; if (num % 2 == 0) printf &quot;%d is even number.\n&quot;, num &#125;&#x27;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>if-else</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (condition)</span><br><span class="line">   action-1</span><br><span class="line">else</span><br><span class="line">   action-2</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">[jerry]$ </span><span class="language-bash">awk <span class="string">&#x27;BEGIN &#123;</span></span></span><br><span class="line">   num = 11; if (num % 2 == 0) printf &quot;%d is even number.\n&quot;, num; </span><br><span class="line">      else printf &quot;%d is odd number.\n&quot;, num </span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>if -else if</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">[jerry]$ </span><span class="language-bash">awk <span class="string">&#x27;BEGIN &#123;</span></span></span><br><span class="line">   a = 30;</span><br><span class="line">   </span><br><span class="line">   if (a==10)</span><br><span class="line">   print &quot;a = 10&quot;;</span><br><span class="line">   else if (a == 20)</span><br><span class="line">   print &quot;a = 20&quot;;</span><br><span class="line">   else if (a == 30)</span><br><span class="line">   print &quot;a = 30&quot;;</span><br><span class="line">&#125;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="loop"><a class="header-anchor" href="#loop"></a>loop</h2>
<ul>
<li>
<p><code>for</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">[jerry]$ </span><span class="language-bash">awk <span class="string">&#x27;BEGIN &#123; for (i = 1; i &lt;= 5; ++i) print i &#125;&#x27;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>while</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">[jerry]$ </span><span class="language-bash">awk <span class="string">&#x27;BEGIN &#123;i = 1; while (i &lt; 6) &#123; print i; ++i &#125; &#125;&#x27;</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="built-in-function"><a class="header-anchor" href="#built-in-function"></a>built-in function</h2>
<h3 id="arithmetic-function"><a class="header-anchor" href="#arithmetic-function"></a>arithmetic function</h3>
<ul>
<li><code>sin()</code>：正弦。</li>
<li><code>cos()</code>：余弦。</li>
<li><code>sqrt()</code>：平方根。</li>
<li><code>rand()</code>：随机数。</li>
</ul>
<h3 id="string-function"><a class="header-anchor" href="#string-function"></a>string function</h3>
<ul>
<li>
<p><code>length(arg)</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[jerry]$ awk <span class="string">&#x27;length($0) &gt; 18&#x27;</span> marks.txt</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code> print item1，item,...</code></p>
<p>各项目间使用逗号分隔开，而输出时以<code>OFS</code>为分隔</p>
</li>
<li>
<p><code>printf &quot;format&quot;, expr,expr,... </code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[jerry]$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">   param = 1024.0</span></span><br><span class="line"><span class="string">   result = sqrt(param)</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   printf &quot;sqrt(%f) = %f\n&quot;, param, result</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>asort(arr [, d [, how] ])</code></p>
<p>This function sorts the contents of <strong>arr</strong> using GAWK's normal rules for comparing values, and replaces the indexes of the sorted values <strong>arr</strong> with sequential integers starting with 1.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[jerry]$ awk &#x27;BEGIN &#123;</span><br><span class="line">   arr[0] = &quot;Three&quot;</span><br><span class="line">   arr[1] = &quot;One&quot;</span><br><span class="line">   arr[2] = &quot;Two&quot;</span><br><span class="line">   print &quot;Array elements before sorting:&quot;</span><br><span class="line">   </span><br><span class="line">   for (i in arr) &#123;</span><br><span class="line">      print arr[i]</span><br><span class="line">   &#125;</span><br><span class="line">   asort(arr)</span><br><span class="line">   print &quot;Array elements after sorting:&quot;</span><br><span class="line">   </span><br><span class="line">   for (i in arr) &#123;</span><br><span class="line">      print arr[i]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;&#x27;</span><br><span class="line"></span><br><span class="line">#Output</span><br><span class="line">Array elements before sorting:</span><br><span class="line">Three</span><br><span class="line">One</span><br><span class="line">Two</span><br><span class="line">Array elements after sorting:</span><br><span class="line">One</span><br><span class="line">Three</span><br><span class="line">Two</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>asorti(arr [, d [, how] ])</code></p>
<p>The behavior of this function is the same as that of <strong>asort()</strong>, except that the array indexes are used for sorting.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[jerry]$ awk &#x27;BEGIN &#123;</span><br><span class="line">   arr[&quot;Two&quot;] = 1</span><br><span class="line">   arr[&quot;One&quot;] = 2</span><br><span class="line">   arr[&quot;Three&quot;] = 3</span><br><span class="line">   asorti(arr)</span><br><span class="line">   print &quot;Array indices after sorting:&quot;</span><br><span class="line">   </span><br><span class="line">   for (i in arr) &#123;</span><br><span class="line">      print arr[i]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;&#x27;</span><br><span class="line"></span><br><span class="line">#Output</span><br><span class="line">Array indices after sorting:</span><br><span class="line">One</span><br><span class="line">Three</span><br><span class="line">Two</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>gsub(regex, sub, string)</code></p>
<p>global substitution. It replaces every occurrence of regex with the given string (sub). The third parameter is optional. If it is omitted, then $0 is used.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[jerry]$ awk &#x27;BEGIN &#123;</span><br><span class="line">   str = &quot;Hello, World&quot;</span><br><span class="line">   print &quot;String before replacement = &quot; str</span><br><span class="line">   </span><br><span class="line">   gsub(&quot;World&quot;, &quot;Jerry&quot;, str)</span><br><span class="line">   print &quot;String after replacement = &quot; str</span><br><span class="line">&#125;&#x27;</span><br><span class="line"></span><br><span class="line">#output</span><br><span class="line">String before replacement = Hello, World</span><br><span class="line">String after replacement = Hello, Jerry</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>match(str, regex)</code><br>
It returns the index of the first longest match of regex in string str. It returns 0 if no match found.</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[jerry]$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">     str = &quot;One Two Three&quot;</span></span><br><span class="line"><span class="string">     subs = &quot;Two&quot;</span></span><br><span class="line"><span class="string">     ret = match(str, subs)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   printf &quot;Substring \&quot;%s\&quot; found at %d location.\n&quot;, subs, ret</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line">On executing this code, you get the following result −</span><br><span class="line"></span><br><span class="line"><span class="comment">#Output</span></span><br><span class="line">Substring <span class="string">&quot;Two&quot;</span> found at <span class="number">5</span> location</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>split(str, arr, regex)</code></p>
<p>splits the string <strong>str</strong> into fields by regular expression <strong>regex</strong> and the fields are loaded into the array <strong>arr</strong>. If <strong>regex</strong> is omitted, then FS is used.</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">[jerry]$ awk <span class="string">&#x27;BEGIN &#123;</span></span><br><span class="line"><span class="string">   str = &quot;One,Two,Three,Four&quot;</span></span><br><span class="line"><span class="string">   split(str, arr, &quot;,&quot;)</span></span><br><span class="line"><span class="string">   print &quot;Array contains following values&quot;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   for (i in arr) &#123;</span></span><br><span class="line"><span class="string">      print arr[i]</span></span><br><span class="line"><span class="string">   &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#output</span></span><br><span class="line">Array contains following values</span><br><span class="line">One</span><br><span class="line">Two</span><br><span class="line">Three</span><br><span class="line">Four</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>strtonum(str)</code></p>
<p>This function examines <strong>str</strong> and return its numeric value. If str begins with a leading 0, it is treated as an octal number. If str begins with a leading 0x or 0X, it is taken as a hexadecimal number. Otherwise, assume it is a decimal number.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[jerry]$ awk &#x27;BEGIN &#123;</span><br><span class="line">   print &quot;Decimal num = &quot; strtonum(&quot;123&quot;)</span><br><span class="line">   print &quot;Octal num = &quot; strtonum(&quot;0123&quot;)</span><br><span class="line">   print &quot;Hexadecimal num = &quot; strtonum(&quot;0x123&quot;)</span><br><span class="line">&#125;&#x27;</span><br><span class="line"></span><br><span class="line">#output</span><br><span class="line">Decimal num = 123</span><br><span class="line">Octal num = 83</span><br><span class="line">Hexadecimal num = 291</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>sub(regex, sub, string)</code></p>
<p>This function performs a single <strong>substitution</strong>. It replaces the first occurrence of the regex pattern with the given string (sub). The third parameter is optional. If it is omitted, $0 is used.</p>
</li>
<li>
<p><code>substr(str, start, l)</code></p>
<p>This function returns the substring of string <strong>str</strong>, starting at index <strong>start</strong> of length <strong>l</strong>. If length is omitted, the suffix of <strong>str</strong> starting at index <strong>start</strong> is returned.</p>
</li>
<li>
<p><code>tolower()</code>：字符转为小写</p>
</li>
</ul>
<h2 id="user-defined-functions"><a class="header-anchor" href="#user-defined-functions"></a>user-defined functions</h2>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> function_name(argument1, argument2, ...) &#123; </span><br><span class="line">   <span class="keyword">function</span> body</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>example</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Returns minimum number</span></span><br><span class="line"><span class="keyword">function</span> find_min(num1, num2)&#123;</span><br><span class="line">   <span class="keyword">if</span> (num1 &lt; num2)</span><br><span class="line">   		return num1</span><br><span class="line">   return num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="redirection"><a class="header-anchor" href="#redirection"></a>redirection</h2>
<p>Redirections in AWK are written just like redirection in shell commands, except that they are written inside the AWK program</p>
<h2 id="pretty-printing"><a class="header-anchor" href="#pretty-printing"></a>pretty printing</h2>
<ul>
<li>
<p>Horizontal Tab</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">[jerry]$ </span><span class="language-bash">awk <span class="string">&#x27;BEGIN &#123; printf &quot;Sr No\tName\tSub\tMarks\n&quot; &#125;&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">output</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Sr No   Name    Sub Marks</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Backspace</p>
<p><code>\b</code>删除前一个字符</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">[jerry]$ </span><span class="language-bash">awk <span class="string">&#x27;BEGIN &#123; printf &quot;Field 1\bField 2\bField 3\bField 4\n&quot; &#125;&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Output</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">Field Field Field Field 4</span></span><br></pre></td></tr></table></figure>
<p>On executing this code, you get the following result −</p>
</li>
<li>
<p>Format Specifier</p>
<p>同其他语言</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Language</category>
      </categories>
      <tags>
        <tag>awk</tag>
      </tags>
  </entry>
  <entry>
    <title>WES</title>
    <url>/2022/11/06/WES/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Intro</li>
<li>WES</li>
<li>学信网认证</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<p>攻略:</p>
<ul>
<li><a href="https://www.1point3acres.com/bbs/thread-677825-1-1.html">2020最新WES认证的经验</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/436597467">2021年最新最全WES成绩认证攻略</a></li>
<li><a href="https://www.cheersyou.com/zh/wes-cdgdc">2022年最新版成绩认证攻略</a></li>
</ul>
<p>World Education Services (简称WES) 是广受美国高校认可的第三方学历认证机构. 国际生在申请美国的学校时，经常会被要求去进行学历WES认证.</p>
<ul>
<li>WES本身不能直接判断成绩单的真伪，所以WES与国内的<u>学信网</u>合作, 让学信网进行第一步认证, 来确认我们成绩单和学位证的真假，从而继续进一步的审查.</li>
<li>因此, 对于国本学生, 完成WES成绩认证一共需要两部分: <strong>学信网认证+WES认证</strong></li>
<li>Time:
<ul>
<li>学信网认证一般在1个月</li>
<li>WES认证需要7个工作日</li>
</ul>
</li>
<li>Fee:
<ul>
<li>WES Application: 根据自己选择的套餐和收件学校而不同. 一般在3k rmb
<ul>
<li>每所学校$30</li>
</ul>
</li>
<li>学信网认证: 300rmb</li>
</ul>
</li>
</ul>
<h1 id="WES"><a class="header-anchor" href="#WES"></a>WES</h1>
<p><a href="https://www.wes.org">WES官网</a></p>
<p><a href="https://applications.wes.org/createaccount/Login/Login">WES Login</a></p>
<h2 id="Application"><a class="header-anchor" href="#Application"></a>Application</h2>
<p>这里只介绍比较重要的几个选项, 其他的可以看攻略</p>
<ul>
<li>
<p>教育经历:</p>
<ul>
<li>本科毕业: Completed Degree Programs</li>
<li>本科在读: ncomplete or In-Progress Study</li>
</ul>
</li>
<li>
<p>确认所有信息: <em>Applicant Acknowledgments这一栏四项全部打勾</em></p>
</li>
<li>
<p>付款后生成WES <strong>Reference Number</strong>, 把它保存好</p>
<ul>
<li>所有发送至 WES 的文件都需注明WES Reference Number</li>
</ul>
</li>
<li>
<p><strong>寄送方式</strong>: International Courier( 75刀 )</p>
<ul>
<li>优点就是快</li>
</ul>
</li>
<li>
<p><strong>认证套餐</strong>:Course By Course Evaluation下的<strong>ICAP</strong> (  205刀 )</p>
<ul>
<li>
<p>ICAP可以给申请者在WES系统里存档，下次再需要WES报告，WES会直接查看系统然后发报告给收件人. 而Basic做完这一次认证之后会删除申请者的信息:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Study%20Abroad/WES%20Service%20Type.png" alt="WES Service Type"></p>
</li>
</ul>
</li>
<li>
<p><strong>是否需要多份认证报告, 是否将报告另寄送至其他机构:</strong> 如果尚未决定要申请的学校可以先不填</p>
</li>
<li>
<p>缴费: 可以用Credit Card或Check/Number Order.</p>
<ul>
<li>Credit Card: 支持VISA和MasterCard, 但不知道为什么, 我老是支付不了...</li>
<li>Check/Number Order: 这个会直接不交钱就通过缴费步骤, 并拿到Reference Number. 后面(15min update)在申请页面会出现“My Payment”按钮, 点进去就可以支付. 其实支付界面和Credit Card也一模一样, 但我就是能正常支付...</li>
</ul>
</li>
</ul>
<h2 id="Fee"><a class="header-anchor" href="#Fee"></a>Fee</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Study%20Abroad/WES%20Fee.png" alt="WES Fee"></p>
<h1 id="学信网认证"><a class="header-anchor" href="#学信网认证"></a>学信网认证</h1>
<p>300 rmb</p>
<ul>
<li>
<p>进入申请系统: 进入<a href="https://www.chsi.com.cn/">学信网</a> -&gt; 出国教育背景信息服务 -&gt; 点击进入网上申请系统</p>
<ul>
<li>
<p>如果材料提交并付款完成, 在网申页面可以看到申请进度:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Study%20Abroad/%E5%AD%A6%E4%BF%A1%E7%BD%91%E8%AE%A4%E8%AF%81%E8%BF%9B%E5%BA%A6%E6%9F%A5%E7%9C%8B.png" alt="学信网认证进度查看"></p>
</li>
</ul>
</li>
<li>
<p>申请认证: 在读学生只需要选择“中英文成绩认证”( 各150元, 共<strong>300</strong>元 ), 不需要做“学历认证”( 因为在读生还没有学历 )</p>
</li>
</ul>
<h2 id="认证过程"><a class="header-anchor" href="#认证过程"></a>认证过程</h2>
<ul>
<li>
<p>应得总学分: 填已经获得的学分</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Study%20Abroad/%E5%AD%A6%E4%BF%A1%E7%BD%91%E7%94%B3%E8%AF%B7.png" alt="学信网申请"></p>
</li>
<li>
<p>课程成绩: 手动添加效率很低, 我使用excel添加. 只需要将学校的pdf格式成绩单转换成excel, 自己再照着“格式说明”( 课程成绩的excel文件提交页面会给 )修改即可.</p>
<ul>
<li>这一步挺烦的</li>
<li>不需要填课程性质</li>
<li>填且只填成绩单上有成绩的课( 因为课程成绩是必填项 )
<ul>
<li>对于重修课,重修前和重修后的两门课都要填, 成绩也照样写</li>
<li>对于退选课, 因为成绩单上只有课程名, 没有课程成绩, 因此不要填</li>
</ul>
</li>
<li>南大成绩单上的星号是选修的意思, 因此星号不需要输入</li>
<li><strong>课程顺序要和成绩单上的一样</strong></li>
<li>最后记得核对一下网站从excel中识别出的课程( 课程名, 课程数 )和自己成绩单上的课程</li>
</ul>
</li>
</ul>
<h1 id="学信网发送报告"><a class="header-anchor" href="#学信网发送报告"></a>学信网发送报告</h1>
<ol>
<li>
<p>学信网认证完后会发短信通知, 然后就可以在学信网查看认证进度:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Study%20Abroad/Xuexinwang%20Sending%20WES1.png" alt="Xuexinwang Sending WES1"></p>
<ul>
<li>
<p>注意, 之前办理的是中英文认证, 现在只提示中文认证办完了, 因此还得等两天, 等英文认证结果. 但学信网在这一点上很蠢, 他会显示“结果已出”, 让人误以为中英文报告全出了...</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Study%20Abroad/Xuexinwang%20Sending%20WES2.png" alt="Xuexinwang Sending WES2"></p>
</li>
</ul>
</li>
<li>
<p>发送报告流程: <a href="https://www.chsi.com.cn/en/help/howtoapply_wes.jsp:">https://www.chsi.com.cn/en/help/howtoapply_wes.jsp:</a></p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Study%20Abroad/Xuexinwang%20Sending%20WES%20Process.png" alt="Xuexinwang Sending Process"></p>
<p>上面这张图很有迷惑性, 事实上它的意思是: “申请学籍、学历、学位在线验证报告(的翻译)”和“申请成绩验证报告”都完成后才能向WES“发送报告”.  右边要求(“成绩验证报告”)我们已经办完了, 只需完成左边要求.</p>
</li>
<li>
<p>由于我们没毕业, 没有学历和学位, 因此只需要做“学籍在线验证报告”,先前往<a href="https://my.chsi.com.cn/archive/index.action">学信档案网</a>.</p>
<ol>
<li>做“在线验证报告” -&gt; &quot;教育部学籍在线验证报告&quot;</li>
</ol>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Study%20Abroad/Xuexinwang%20Sending%20WES3.png" alt="Xuexinwang Sending WES3"></p>
<ol start="2">
<li>
<p>再在“出国报告发送”的“英文翻译”中选择“学籍在线验证报告”翻译服务, 支付30元服务费, 等一个小时出学籍翻译.</p>
<ul>
<li>以前这个功能位于“国际合作申请”模块, 但是现在该模块已经改名为“出国报告发送&quot;</li>
<li>可在<a href="https://my.chsi.com.cn/archive/gjhz/foreign/index.action">出国报告发送</a>查看结果:</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Study%20Abroad/Xuexinwang%20Sending%20WES4.png" alt="Xuexinwang Sending WES4"></p>
</li>
</ol>
</li>
<li>
<p>接下来点击“发送报告”. 或者点击步骤一图中学信网给的的“发送报告”:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Study%20Abroad/Xuexinwang%20Sending%20WES5.png" alt="Xuexinwang Sending WES5"></p>
<p>注意我们是要发送给WES而不是具体的国外学校.</p>
</li>
<li>
<p>选择“下一步”, 进行选择报告. 注意,这里只能选择翻译件, 也就是<strong>学籍报告</strong>(对于未毕业本科生来说)和<strong>成绩验证报告</strong>的翻译件.</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Study%20Abroad/Xuexinwang%20Sending%20WES6.png" alt="Xuexinwang Sending WES6"></p>
<ul>
<li>之前提到了, 英文成绩验证报告要在中文的四五天左右才出, 因此这一步得等英文报告做完后才能进行. 否则就会出现无法绑定成绩报告等情况:</li>
</ul>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Study%20Abroad/Xuexinwang%20Sending%20WES7.png" alt="Xuexinwang Sending WES7"></p>
<ul>
<li>这里即使我们点击“绑定”并进行对应操作, 绑定的也是中文报告, 是没用的, 返回该页面后照样显示“尚未绑定”. 因为它要求的是绑定“翻译件”. 我们只能等英文报告了.</li>
</ul>
</li>
<li>
<p>最后选择发送报告. 之后可以查看进度:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Study%20Abroad/Xuexinwang%20Sending%20WES8.png" alt="Xuexinwang Sending WES8"></p>
</li>
<li>
<p>WES收到学信网的材料后, 进度会变成&quot;in process&quot;:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Study%20Abroad/Xuexinwang%20Sending%20WES9.png" alt="Xuexinwang Sending WES9"></p>
<p>过几天还会发邮件来提醒进度的更新:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Study%20Abroad/Evaluation%20Update%20Email.png" alt="Evaluation Update Email"></p>
</li>
<li>
<p>一般在10个工作日左右完成认证，并将认证报告寄给申请人</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Study Abroad</tag>
      </tags>
  </entry>
  <entry>
    <title>make and Makefile</title>
    <url>/2022/05/05/make-and-Makefile/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>make</li>
<li>Makefile</li>
</ul>
<span id="more"></span>
<h1 id="make"><a class="header-anchor" href="#make"></a>make</h1>
<p>GNU make是一个命令工具，是一个用来控制软件<strong>构建</strong>过程的自动化管理工具。make通过称为Makefile的文件来完成并自动维护编译工作, makefile定义了系统各模块间的依赖关系，make解释makefile中的指令</p>
<p>make所在路径: <code>$(MAKE)</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make [-f filename] [targetname]</span><br></pre></td></tr></table></figure>
<ul>
<li>make会在当前目录下找名字叫&quot;Makefile&quot;或&quot;makefile&quot;的文件, 根据Makefile中定义的规则来执行命令</li>
<li>Makefile中第一条规则定义的target是默认target。 直接执行<code>make</code>，执行的就是默认target</li>
<li><code>make install</code>需要 root 权限</li>
<li>如果 config 的时候使用 root 权限，则编译后产生的所有文件都需要root权限</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">automake方式</span></span><br><span class="line">./configure #生成新的makefile</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">make uninstall</span><br><span class="line">make clean</span><br><span class="line">make distclean# 退回到configure之前(删除makefile)</span><br></pre></td></tr></table></figure>
<p>example：</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">TOPDIR = ../</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(TOPDIR)</span>Rules.mak</span><br><span class="line">EXTRA LIBS += :</span><br><span class="line">EXEC = <span class="variable">$(INSTALL_DIR)</span>/hello</span><br><span class="line">OBJS = hello.o <span class="comment"># make uninstall之后系统中源代码仍然存在</span></span><br><span class="line"><span class="comment"># 变量定义，makefile可以include别的makefile</span></span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(EXEC)</span> # 默认执行make all</span></span><br><span class="line">  <span class="variable">$(EXEC)</span>: <span class="variable">$(OBJS)</span></span><br><span class="line">  <span class="variable">$(CC)</span> <span class="variable">$(LDFLAGS)</span> -0 <span class="variable">$@</span> <span class="variable">$(OBJS)</span> <span class="variable">$(EXTRA_ LIBS)</span> <span class="comment"># gcc的别名CC，$@明确了目标文件放置位置</span></span><br><span class="line"><span class="section">install:</span></span><br><span class="line">  <span class="variable">$(EXP_ INSTALL)</span> <span class="variable">$(EXEC)</span> <span class="variable">$(INSTALL_ DIR)</span> <span class="comment"># make install执行的指定目标</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">  -rm -f <span class="variable">$(EXEC)</span> *.elf*.gdb *.o</span><br></pre></td></tr></table></figure>
<h1 id="Makefile"><a class="header-anchor" href="#Makefile"></a>Makefile</h1>
<h2 id="概述"><a class="header-anchor" href="#概述"></a>概述</h2>
<p>Makefile文件由一系列规则（rules）构成。每条规则的形式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;target&gt; : &lt;prerequisites&gt; </span><br><span class="line">[tab]  &lt;commands&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>target是一个目标文件，可以是Object File，也可以是执行文件</p>
</li>
<li>
<p>prerequisites是要生成target所需要的文件或是目标</p>
</li>
<li>
<p>command是make需要执行的命令。(可以是任意的Shell命令)</p>
</li>
<li>
<p>&quot;目标&quot;是必需的，不可省略；&quot;前置条件&quot;和&quot;命令&quot;都是可选的，但是两者之中必须至少存在一个</p>
</li>
<li>
<p>每条规则就明确两件事：构建目标的前置条件是什么，以及如何构建</p>
</li>
</ul>
<h2 id="Makefile文件的规则"><a class="header-anchor" href="#Makefile文件的规则"></a>Makefile文件的规则</h2>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">hello : main.o kbd.o</span><br><span class="line">  gcc -o hello main.o kbd.o</span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">  cc -c main.c</span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">  cc -c kbd.c</span><br><span class="line">clean :</span><br><span class="line">  rm edit main.o kbd.o <span class="comment"># 伪目标</span></span><br></pre></td></tr></table></figure>
<h3 id="target"><a class="header-anchor" href="#target"></a>target</h3>
<p>一个目标（target）就构成一条规则。目标通常是文件名，指明Make命令所要构建的对象，比如上文的 a.txt 。目标可以是一个文件名，也可以是多个文件名，之间用空格分隔</p>
<p>如果Make命令运行时没有指定目标，会执行Makefile文件的<strong>第一个目标</strong>作为默认目标</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>
<ul>
<li>该命令执行Makefile的第一个目标</li>
</ul>
<h4 id="伪目标"><a class="header-anchor" href="#伪目标"></a>伪目标</h4>
<p>除了文件名，目标还可以是某个操作的名字，这称为&quot;伪目标&quot;（phony target），伪目标不是文件名，而是一个操作的名字</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">clean:</span></span><br><span class="line">   rm *.o</span><br></pre></td></tr></table></figure>
<p>上面代码的目标是clean，属于&quot;伪目标 &quot;，作用是删除对象文件:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make clean</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>&quot;伪目标&quot;的取名不能和文件名重名</p>
<ul>
<li>例如，如果当前目录中，正好有一个文件叫做clean，那么这个<code>make clean</code>不会执行。因为Make发现clean文件已经存在，就认为没有必要重新构建了，就不会执行指定的rm命令</li>
</ul>
</li>
<li>
<p>为了避免和文件重名的这种情况，可以使用<code>.PHONY</code>来显示地指明一个目标是&quot;伪目标&quot;，向make说明，不管是否有这个文件，这个目标就是&quot;伪目标&quot;</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">     rm *.o temp</span><br></pre></td></tr></table></figure>
<p>声明clean是&quot;伪目标&quot;之后，make就不会去检查是否存在一个叫做clean的文件，而是每次运行都执行对应的命令。像.PHONY这样的内置目标名还有不少，可以查看<a href="https://www.gnu.org/software/make/manual/html_node/Special-Targets.html#Special-Targets">手册</a></p>
</li>
<li>
<p>伪目标一般没有依赖的文件，但也可以为伪目标指定所依赖的文件</p>
</li>
<li>
<p>伪目标同样可以作为&quot;默认目标&quot;，只要将其放在第一个</p>
</li>
</ul>
<h4 id="多目标"><a class="header-anchor" href="#多目标"></a>多目标</h4>
<p>当多个目标同时依赖于一个文件，并且其生成的命令大体类似，可以使用<code>$@</code>表示目前规则中所有的目标的集合</p>
<p>举例:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">bigoutput littleoutput : text.g</span><br><span class="line">generate text.g -<span class="variable">$(<span class="built_in">subst</span> output,,<span class="variable">$@</span>)</span> &gt; <span class="variable">$@</span> <span class="comment"># 将$@中的output替换成空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#上述规则等价于</span></span><br><span class="line">bigoutput : text.g</span><br><span class="line">  generate text.g -big &gt; bigoutput</span><br><span class="line">littleoutput : text.g</span><br><span class="line">  generate text.g -little &gt; littleoutput </span><br></pre></td></tr></table></figure>
<h3 id="prerequisites"><a class="header-anchor" href="#prerequisites"></a>prerequisites</h3>
<p>prerequisite通常是一组文件名，之间用空格分隔。它指定了target是否重新构建的判断标准：make会检查prerequisite, <strong>只要有一个prerequisite不存在，或者有过更新</strong>（前置文件的last-modification<strong>时间戳</strong>比目标的时间戳新），target就需要重新构建</p>
<p>如果prerequisite也不存在，make就会查找生成该prerequisite（此时是作为目标）的规则，这是个递归的过程</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">result.txt: source.txt</span></span><br><span class="line"> cp source.txt result.txt</span><br></pre></td></tr></table></figure>
<p>上面代码中，构建 result.txt 的前置条件是 source.txt 。如果当前目录中，source.txt 已经存在，那么<code>make result.txt</code>可以正常运行，否则必须再写一条规则，来生成 source.txt</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">source.txt:</span></span><br><span class="line"> echo <span class="string">&quot;this is the source&quot;</span> &gt; source.txt</span><br></pre></td></tr></table></figure>
<p>上面代码中，source.txt后面没有前置条件，就意味着它跟其他文件都无关，只要这个文件还不存在，每次调用<code>make source.txt</code>，它都会生成</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make result.txt</span><br><span class="line">make result.txt</span><br></pre></td></tr></table></figure>
<p>上面命令连续执行两次<code>make result.txt</code>。第一次执行会先新建 source.txt，然后再新建 result.txt。第二次执行，Make发现 source.txt 没有变动（时间戳晚于 result.txt），就不会执行任何操作，result.txt 也不会重新生成</p>
<p>如果需要生成多个文件，往往采用下面的写法:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">source: file1 file2 file3</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，source 是一个伪目标，只有三个前置文件，没有任何对应的命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make source</span><br></pre></td></tr></table></figure>
<p>执行<code>make source</code>命令后，就会一次性生成 file1，file2，file3 三个文件。这比下面的写法要方便很多:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">make file1</span><br><span class="line">make file2</span><br><span class="line">make file3</span><br></pre></td></tr></table></figure>
<h3 id="commands"><a class="header-anchor" href="#commands"></a>commands</h3>
<p>命令（commands）表示如何更新目标文件，由一行或多行的Shell命令组成。它是构建&quot;目标&quot;的具体指令，它的运行结果通常就是生成目标文件</p>
<p>每行命令之前必须有一个tab键。如果想用其他键，可以用内置变量<code>.RECIPEPREFIX</code>声明:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">.RECIPEPREFIX = &gt;</span><br><span class="line"><span class="section">all:</span></span><br><span class="line">&gt; echo Hello, world</span><br></pre></td></tr></table></figure>
<p>上面代码用<code>.RECIPEPREFIX</code>指定，大于号（&gt;）替代tab键。所以，每一行命令的起首变成了大于号，而不是tab键</p>
<p>需要注意的是，<strong>每行命令在一个单独的shell中执行</strong> , 这些Shell之间没有继承关系（因而普通变量不可见）</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">var-lost:</span></span><br><span class="line"> <span class="keyword">export</span> foo=bar</span><br><span class="line"> echo <span class="string">&quot;foo=[$$foo]&quot;</span></span><br></pre></td></tr></table></figure>
<p>上面代码执行后（<code>make var-lost</code>），取不到foo的值。因为两行命令在两个不同的进程执行。一个解决办法是将两行命令写在一行，中间用分号分隔:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">var-kept:</span></span><br><span class="line"> <span class="keyword">export</span> foo=bar; echo <span class="string">&quot;foo=[$$foo]&quot;</span></span><br></pre></td></tr></table></figure>
<p>另一个解决办法是在换行符前加反斜杠转义:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">var-kept:</span><br><span class="line"> export foo=bar; \</span><br><span class="line"> echo &quot;foo=[$$foo]&quot;</span><br></pre></td></tr></table></figure>
<p>最后一个方法是加上<code>.ONESHELL:</code>命令:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">.ONESHELL:</span></span><br><span class="line"><span class="section">var-kept:</span></span><br><span class="line"> <span class="keyword">export</span> foo=bar; </span><br><span class="line"> echo <span class="string">&quot;foo=[$$foo]&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="Makefile文件的语法"><a class="header-anchor" href="#Makefile文件的语法"></a>Makefile文件的语法</h2>
<p>makefile描述模块间的依赖关系</p>
<h3 id="注释"><a class="header-anchor" href="#注释"></a>注释</h3>
<p>井号（#）在Makefile中表示注释。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是注释</span></span><br><span class="line">result.txt: source.txt</span><br><span class="line"> <span class="comment"># 这是注释</span></span><br><span class="line"> <span class="built_in">cp</span> source.txt result.txt <span class="comment"># 这也是注释</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="回显（echoing）"><a class="header-anchor" href="#回显（echoing）"></a>回显（echoing）</h3>
<p>默认情况下，每执行一条 makefile 中的命令之前，<strong>Shell 终端都会显示出这条命令的具体内容</strong>，除非该命令用分号分隔而紧跟在依赖关系后面，我们称之为&quot;回显&quot;。如果不想显示命令的具体内容，我们可以在命令的开头加上<code>@</code>，这种情况通常用于 echo 命令</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span>:</span><br><span class="line"> <span class="comment"># 这是测试</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>执行上面的规则，会得到下面的结果</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 这是测试</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>在命令的前面加上@，就可以关闭回声</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span>:</span><br><span class="line"> @<span class="comment"># 这是测试</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>现在再执行<code>make test</code>，就不会有任何输出</p>
<p>由于在构建过程中，需要了解当前在执行哪条命令，所以通常只在注释和纯显示的echo命令前面加上@</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span>:</span><br><span class="line"> @<span class="comment"># 这是测试</span></span><br><span class="line"> @<span class="built_in">echo</span> TODO</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="通配符"><a class="header-anchor" href="#通配符"></a>通配符</h3>
<p>通配符（wildcard）用来指定一组符合条件的文件名。Makefile 的通配符与 Bash 一致，主要有星号（*）、问号（？）和 [...] 。比如， *.o 表示所有后缀名为o的文件。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clean:</span><br><span class="line">     <span class="built_in">rm</span> -f *.o</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="模式匹配"><a class="header-anchor" href="#模式匹配"></a>模式匹配</h3>
<p>Make命令允许对文件名，进行类似正则运算的匹配，主要用到的匹配符是%。比如，假定当前目录下有 f1.c 和 f2.c 两个源码文件，需要将它们编译为对应的对象文件。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%.o: %.c</span><br></pre></td></tr></table></figure>
</blockquote>
<p>等同于下面的写法。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">f1.o: f1.c</span><br><span class="line">f2.o: f2.c</span><br></pre></td></tr></table></figure>
</blockquote>
<p>使用匹配符%，可以将大量同类型的文件，只用一条规则就完成构建。</p>
<h3 id="变量和赋值符"><a class="header-anchor" href="#变量和赋值符"></a>变量和赋值符</h3>
<p>Makefile 允许使用等号自定义变量。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">txt = Hello World</span><br><span class="line"><span class="built_in">test</span>:</span><br><span class="line"> @<span class="built_in">echo</span> $(txt)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，变量 txt 等于 Hello World。调用时，变量需要放在 $( ) 之中。</p>
<p>调用Shell变量，需要在美元符号前，再加一个美元符号，这是因为Make命令会对美元符号转义。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span>:</span><br><span class="line"> @<span class="built_in">echo</span> $<span class="variable">$HOME</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>有时，变量的值可能指向另一个变量。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">v1 = $(v2)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，变量 v1 的值是另一个变量 v2。这时会产生一个问题，v1 的值到底在定义时扩展（静态扩展），还是在运行时扩展（动态扩展）？如果 v2 的值是动态的，这两种扩展方式的结果可能会差异很大。</p>
<p>为了解决类似问题，Makefile一共提供了四个赋值运算符 （=、:=、？=、+=），它们的区别请看<a href="https://stackoverflow.com/questions/448910/makefile-variable-assignment">StackOverflow</a>。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VARIABLE = value</span><br><span class="line"><span class="comment"># 在执行时扩展，允许递归扩展。</span></span><br><span class="line"></span><br><span class="line">VARIABLE := value</span><br><span class="line"><span class="comment"># 在定义时扩展。</span></span><br><span class="line"></span><br><span class="line">VARIABLE ?= value</span><br><span class="line"><span class="comment"># 只有在该变量为空时才设置值。</span></span><br><span class="line"></span><br><span class="line">VARIABLE += value</span><br><span class="line"><span class="comment"># 将值追加到变量的尾端。</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="内置变量（Implicit-Variables）"><a class="header-anchor" href="#内置变量（Implicit-Variables）"></a>内置变量（Implicit Variables）</h3>
<p>Make命令提供一系列内置变量，比如，$(CC) 指向当前使用的编译器，$(MAKE) 指向当前使用的Make工具。这主要是为了跨平台的兼容性，详细的内置变量清单见<a href="https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html">手册</a>。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">output:</span><br><span class="line"> $(CC) -o output input.c</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="自动变量（Automatic-Variables）"><a class="header-anchor" href="#自动变量（Automatic-Variables）"></a>自动变量（Automatic Variables）</h3>
<p>Make命令还提供一些自动变量，它们的值与当前规则有关。主要有以下几个。</p>
<p><strong>（1）$@</strong></p>
<p>$@指代当前目标，就是Make命令当前构建的那个目标。比如，<code>make foo</code>的 $@ 就指代foo。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a.txt b.txt: </span><br><span class="line"> <span class="built_in">touch</span> <span class="variable">$@</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>等同于下面的写法。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a.txt:</span><br><span class="line"> <span class="built_in">touch</span> a.txt</span><br><span class="line">b.txt:</span><br><span class="line"> <span class="built_in">touch</span> b.txt</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>（2）$&lt;</strong></p>
<p>$&lt; 指代第一个前置条件。比如，规则为 t: p1 p2，那么$&lt; 就指代p1。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a.txt: b.txt c.txt</span><br><span class="line"> <span class="built_in">cp</span> $&lt; <span class="variable">$@</span> </span><br></pre></td></tr></table></figure>
</blockquote>
<p>等同于下面的写法。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a.txt: b.txt c.txt</span><br><span class="line"> <span class="built_in">cp</span> b.txt a.txt </span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>（3）$?</strong></p>
<p>$? 指代比目标更新的所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，其中 p2 的时间戳比 t 新，$?就指代p2。</p>
<p><strong>（4）$^</strong></p>
<p>$^ 指代所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，那么 $^ 就指代 p1 p2 。</p>
<p><strong>（5）$*</strong></p>
<p>$* 指代匹配符 % 匹配的部分， 比如% 匹配 f1.txt 中的f1 ，$* 就表示 f1。</p>
<p><strong>（6）$(@D) 和 $(@F)</strong></p>
<p>$(@D) 和 $(@F) 分别指向 $@ 的目录名和文件名。比如，$@是 src/input.c，那么$(@D) 的值为 src ，$(@F) 的值为 input.c。</p>
<p><strong>（7）$(&lt;D) 和 $(&lt;F)</strong></p>
<p>$(&lt;D) 和 $(&lt;F) 分别指向 $&lt; 的目录名和文件名。</p>
<p>所有的自动变量清单，请看<a href="https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html">手册</a>。下面是自动变量的一个例子。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dest/%.txt: src/%.txt</span><br><span class="line"> @[ -d dest ] || <span class="built_in">mkdir</span> dest</span><br><span class="line"> <span class="built_in">cp</span> $&lt; <span class="variable">$@</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码将 src 目录下的 txt 文件，拷贝到 dest 目录下。首先判断 dest 目录是否存在，如果不存在就新建，然后，$&lt; 指代前置文件（src/%.txt）， $@ 指代目标文件（dest/%.txt）。</p>
<h3 id="判断和循环"><a class="header-anchor" href="#判断和循环"></a>判断和循环</h3>
<p>Makefile使用 Bash 语法，完成判断和循环。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifeq ($(CC),gcc)</span><br><span class="line">libs=$(libs_for_gcc)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">libs=$(normal_libs)</span><br><span class="line">endif</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码判断当前编译器是否 gcc ，然后指定不同的库文件。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LIST = one two three</span><br><span class="line">all:</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> $(LIST); <span class="keyword">do</span> \</span><br><span class="line">     <span class="built_in">echo</span> $<span class="variable">$i</span>; \</span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line"></span><br><span class="line">all:</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> one two three; <span class="keyword">do</span> \</span><br><span class="line">     <span class="built_in">echo</span> <span class="variable">$i</span>; \</span><br><span class="line"> <span class="keyword">done</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码的运行结果。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">one</span><br><span class="line">two</span><br><span class="line">three</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="函数"><a class="header-anchor" href="#函数"></a>函数</h3>
<p>Makefile 还可以使用函数，格式如下。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span> arguments)</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="variable">$&#123;function arguments&#125;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>Makefile提供了许多<a href="https://www.gnu.org/software/make/manual/html_node/Functions.html">内置函数</a>，可供调用。下面是几个常用的内置函数。</p>
<p><strong>（1）shell 函数</strong></p>
<p>shell 函数用来执行 shell 命令</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">srcfiles := $(shell <span class="built_in">echo</span> src/&#123;00..99&#125;.txt)</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>（2）wildcard 函数</strong></p>
<p>wildcard 函数用来在 Makefile 中，替换 Bash 的通配符。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">srcfiles := $(wildcard src/*.txt)</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>（3）subst 函数</strong></p>
<p>subst 函数用来文本替换，格式如下。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$(subst from,to,text)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>下面的例子将字符串&quot;feet on the street&quot;替换成&quot;fEEt on the strEEt&quot;。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$(subst ee,EE,feet on the street)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>下面是一个稍微复杂的例子。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">comma:= ,</span><br><span class="line">empty:=</span><br><span class="line"><span class="comment"># space变量用两个空变量作为标识符，当中是一个空格</span></span><br><span class="line">space:= $(empty) $(empty)</span><br><span class="line">foo:= a b c</span><br><span class="line">bar:= $(subst $(space),$(comma),$(foo))</span><br><span class="line"><span class="comment"># bar is now `a,b,c&#x27;.</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>（4）patsubst函数</strong></p>
<p>patsubst 函数用于模式匹配的替换，格式如下。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$(patsubst pattern,replacement,text)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>下面的例子将文件名&quot;x.c.c bar.c&quot;，替换成&quot;x.c.o bar.o&quot;。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$(patsubst %.c,%.o,x.c.c bar.c)</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>（5）替换后缀名</strong></p>
<p>替换后缀名函数的写法是：变量名 + 冒号 + 后缀名替换规则。它实际上patsubst函数的一种简写形式。</p>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">min: $(OUTPUT:.js=.min.js)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码的意思是，将变量OUTPUT中的后缀名 .js 全部替换成 .min.js 。</p>
<h2 id="预定义变量"><a class="header-anchor" href="#预定义变量"></a>预定义变量</h2>
<ol>
<li><code>$&lt;</code> 第一个依赖文件的名称</li>
<li><code>$?</code> 所有的依赖文件，以空格分开，这些依赖文件的修改日期比目标的创建日期晚</li>
<li><code>$+</code> 所有的依赖文件，以空格分开，并以出现的先后为序，可能包含重复的依赖文件</li>
<li><code>$^</code> 所有的依赖文件，以空格分开，不包含重复的依赖文件</li>
<li><code>$*</code> 不包括扩展名的目标文件名称</li>
<li><code>$@</code> 目标的完整名称</li>
<li><code>$%</code> 如果目标是归档成员，则该变量表示目标的归档成员名称</li>
</ol>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o \</span><br><span class="line">  insert.o search.o files.o utils.o</span><br><span class="line">  gcc -o edit main.o kbd.o command.o display.o \</span><br><span class="line">  insert.o search.o files.o utils.o</span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">  gcc -c main.c</span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">  gcc -c kbd.c</span><br><span class="line">command.o : command.c defs.h command.h</span><br><span class="line">  gcc -c command.c</span><br><span class="line">display.o : display.c defs.h buffer.h</span><br><span class="line">  gcc -c display.c</span><br><span class="line">insert.o : insert.c defs.h buffer.h</span><br><span class="line">  gcc -c insert.c</span><br><span class="line">search.o : search.c defs.h buffer.h</span><br><span class="line">  gcc -c search.c</span><br><span class="line">files.o : files.c defs.h buffer.h command.h</span><br><span class="line">  gcc -c files.c</span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">  gcc -c utils.c</span><br><span class="line">clean :</span><br><span class="line">  rm edit main.o kbd.o command.o display.o \</span><br><span class="line">  insert.o search.o files.o utils.o</span><br><span class="line">OBJECTS = main.o kbd.o command.o display.o \</span><br><span class="line">insert.o search.o files.o utils.o</span><br><span class="line">edit : <span class="variable">$(OBJECTS)</span></span><br><span class="line">  gcc -o edit <span class="variable">$(OBJECTS)</span></span><br><span class="line">main.o : main.c defs.h</span><br><span class="line">  gcc -c main.c</span><br><span class="line">kbd.o : kbd.c defs.h command.h</span><br><span class="line">  gcc -c kbd.c</span><br><span class="line">command.o : command.c defs.h command.h</span><br><span class="line">  gcc -c command.c</span><br><span class="line">display.o : display.c defs.h buffer.h</span><br><span class="line">  gcc -c display.c</span><br><span class="line">insert.o : insert.c defs.h buffer.h</span><br><span class="line">  gcc -c insert.c</span><br><span class="line">search.o : search.c defs.h buffer.h</span><br><span class="line">  gcc -c search.c</span><br><span class="line">files.o : files.c defs.h buffer.h command.h</span><br><span class="line">  gcc -c files.c</span><br><span class="line">utils.o : utils.c defs.h</span><br><span class="line">  gcc -c utils.c</span><br><span class="line">clean :</span><br><span class="line">  rm edit <span class="variable">$(OBJECTS)</span> </span><br></pre></td></tr></table></figure>
<h2 id="多目标扩展"><a class="header-anchor" href="#多目标扩展"></a>多目标扩展</h2>
<ol>
<li>语法<code>&lt;targets ...&gt;: &lt;target-pattern&gt;: &lt;prereq-patterns ...&gt; &lt;commands&gt;</code></li>
<li>例子
<ol>
<li>目标从$object中获取</li>
<li>&quot;%.o&quot;表明要所有以&quot;.o&quot;结尾的目标，即&quot;foo.o bar.o&quot;，就是变量$object集合的模式</li>
<li>依赖模式&quot;%.c&quot;则取模式&quot;%.o&quot;的&quot;%&quot;，也就是&quot;foo bar&quot;，并为其加下&quot;.c&quot;的后缀，于是依赖的目标就是&quot;foo.c bar.c&quot;</li>
</ol>
</li>
</ol>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">objects = foo.o bar.o</span><br><span class="line"><span class="section">all: <span class="variable">$(objects)</span></span></span><br><span class="line"><span class="variable">$(objects)</span>: %.o: %.c</span><br><span class="line">  <span class="variable">$(CC)</span> -c <span class="variable">$(CFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于如下</span></span><br><span class="line">foo.o : foo.c</span><br><span class="line">  <span class="variable">$(CC)</span> -c <span class="variable">$(CFLAGS)</span> foo.c -o foo.o</span><br><span class="line">bar.o : bar.c</span><br><span class="line">  <span class="variable">$(CC)</span> -c <span class="variable">$(CFLAGS)</span> bar.c -o bar.o</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>编写方法：
<ol>
<li>遍历.c文件中的头文件依赖树，把每一个依赖的头文件都放到后面！gcc里面有参数。</li>
<li>不写.h的话：第一次编译连接不会有问题，但是若头文件发生更新，并不会重新编译</li>
</ol>
</li>
<li>多目标扩展
<ol>
<li>语法：<code>&lt;targets ...&gt;: &lt;target-pattern&gt;: &lt;prereq-patterns ...&gt;&lt;commands&gt;... </code></li>
<li>举例</li>
</ol>
</li>
</ol>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">objects = foo.o bar.o</span><br><span class="line"><span class="section">all: <span class="variable">$(objects)</span></span></span><br><span class="line"><span class="variable">$(objects)</span>: %.o: %.</span><br><span class="line">   c<span class="variable">$(CC)</span> -c <span class="variable">$(CFLAGS)</span> <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>目标从$object中获取</li>
<li>&quot;%.o&quot;表明要所有以&quot;.o&quot;结尾的目标，即&quot;foo.o bar.o&quot;，就是变量$object集合的模式</li>
</ol>
<ul>
<li>依赖模式&quot;%.c&quot;则取模式&quot;%.o&quot;的&quot;%&quot;，也就是&quot;foo bar&quot;，并为其加下&quot;.c&quot;的后缀，于是依赖的目标就是&quot;foo.c bar.c&quot;</li>
</ul>
<p>上述规则等价于</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">foo.o : foo.c<span class="variable">$(CC)</span> -c <span class="variable">$(CFLAGS)</span> foo.c -o foo.o</span><br><span class="line"></span><br><span class="line">bar.o : bar.c<span class="variable">$(CC)</span> -c <span class="variable">$(CFLAGS)</span> bar.c -o bar.o </span><br></pre></td></tr></table></figure>
<h2 id="Makefile执行顺序"><a class="header-anchor" href="#Makefile执行顺序"></a>Makefile执行顺序</h2>
<ol>
<li>make在当前目录下查找Makefile/makefile</li>
<li>make查找Makefile中第一个target</li>
<li>如果该target不存在或者该target的依赖文件中至少有一个比target新，则继续执行指令</li>
<li>如果target的依赖文件不存在，则找到生存该依赖的规则，执行该规则</li>
<li>make根据依赖文件生成target</li>
</ol>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Tmux</title>
    <url>/2022/09/13/Tmux/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Intro</li>
<li>Config</li>
<li>Hierarchy</li>
<li>Commands</li>
<li>Session Handling</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<p><code>tmux </code>是最常用的Terminal Multiplexer</p>
<p><code>tmux</code> expects you to know its keybindings, and they all have the form <code>&lt;C-b&gt; x</code> where<code>tmux</code> has the following hierarchy of objects:</p>
<ul>
<li>All commands in tmux are triggered by a <strong>prefix key</strong> followed by a <strong>command key</strong> (quite similar to emacs).By default, tmux uses <code>C-b</code> as prefix key
<ul>
<li>which means
<ol>
<li>press <code>Ctrl+b</code></li>
<li>release <code>Ctrl+b</code></li>
<li>press <code>command key</code></li>
</ol>
</li>
</ul>
</li>
<li>默认的<code>session_name</code>和<code>window_name</code>都是0开头的</li>
</ul>
<h1 id="Config"><a class="header-anchor" href="#Config"></a>Config</h1>
<ul>
<li>
<p>配置文件位于: <code>~/. tmux.conf</code> , 没有则自己创建</p>
<ul>
<li>
<p>我使用了符号链接+dotfile:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>参考<a href="https://github.com/pseudoyu/dotfiles/tree/master/tmux">这个人的配置</a></p>
</li>
<li>
<p>参考</p>
</li>
<li>
<p>也就是说,</p>
</li>
</ul>
</li>
</ul>
<h1 id="Hierarchy"><a class="header-anchor" href="#Hierarchy"></a>Hierarchy</h1>
<h2 id="Sessions"><a class="header-anchor" href="#Sessions"></a>Sessions</h2>
<p>a session is an independent workspace with one or more windows</p>
<ul>
<li><code>tmux</code> starts a new session.</li>
<li><code>tmux new -s NAME</code> starts it with that name.</li>
<li><code>tmux ls</code> lists the current sessions</li>
<li>Within <code>tmux</code> typing <code>&lt;C-b&gt; d</code> detaches the current session</li>
<li><code>tmux a</code> attaches the last session. You can use <code>-t</code> flag to specify which</li>
</ul>
<h2 id="Windows"><a class="header-anchor" href="#Windows"></a>Windows</h2>
<p>Equivalent to tabs in editors or browsers, they are visually separate parts of the same session</p>
<ul>
<li><code>&lt;C-b&gt; c</code> Creates a new window. To close it you can just terminate the shells doing <code>&lt;C-d&gt;</code></li>
<li><code>&lt;C-b&gt;  [window_name]</code> Go to the specified window. Note they are numbered</li>
<li><code>&lt;C-b&gt; p</code> Goes to the previous window</li>
<li><code>&lt;C-b&gt; n</code> Goes to the next window</li>
<li><code>&lt;C-b&gt; ,</code> Rename the current window</li>
<li><code>&lt;C-b&gt; w</code> List current windows</li>
</ul>
<h2 id="Panes"><a class="header-anchor" href="#Panes"></a>Panes</h2>
<p>- Like vim splits, panes let you have multiple shells in the same visual display.</p>
<ul>
<li><code>&lt;C-b&gt; &quot;</code> Split the current pane horizontally</li>
<li><code>&lt;C-b&gt; %</code> Split the current pane vertically</li>
<li><code>&lt;C-b&gt; &lt;direction&gt;</code> Move to the pane in the specified <em>direction</em>. Direction here means arrow keys.</li>
<li><code>&lt;C-b&gt; z</code> Toggle zoom for the current pane</li>
<li><code>&lt;C-b&gt; [</code> Start scrollback. You can then press <code>&lt;space&gt;</code> to start a selection and <code>&lt;enter&gt;</code> to copy that selection.</li>
<li><code>&lt;C-b&gt; &lt;space&gt;</code> Cycle through pane arrangements.</li>
<li><code>&lt;C-b&gt; x</code>: close the pane</li>
</ul>
<h1 id="Commands"><a class="header-anchor" href="#Commands"></a>Commands</h1>
<p>Some  common  commands：</p>
<ul>
<li><code>C-b z</code>: make a pane go full screen. Hit <code>C-b z</code> again to shrink it back to its previous size</li>
<li><code>C-b C-&lt;arrow key&gt;</code>: Resize pane in direction of <arrow key><a href="https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/#fn:4">4</a></li>
<li><code>C-b ,</code>: Rename the current window</li>
</ul>
<p>For further reading, <a href="https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/">here</a> is a quick tutorial on <code>tmux</code> and <a href="http://linuxcommand.org/lc3_adv_termmux.php">this</a> has a more detailed explanation that covers the original <code>screen</code> command. You might also want to familiarize yourself with <a href="https://www.man7.org/linux/man-pages/man1/screen.1.html"><code>screen</code></a>, since it comes installed in most UNIX systems.</p>
<h1 id="Session-Handling"><a class="header-anchor" href="#Session-Handling"></a>Session Handling</h1>
<ul>
<li>
<p><code>&lt;C-b&gt; d</code> : detach current session</p>
</li>
<li>
<p><code>&lt;C-b&gt; D</code>: choose which of your sessions you want to detach.</p>
</li>
<li>
<p><code>tmux ls</code>: List existing sessions</p>
</li>
<li>
<p><code>tmux attach -t [session_name]</code>: attach to the session you specified</p>
<ul>
<li><code>-t</code> : 指定attach的session</li>
</ul>
</li>
<li>
<p>renaming session:</p>
<ul>
<li>
<p>新建一个session,指定其名字</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tmux new -s [session_name]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>rename your existing session:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tmux rename-session -t 0 database</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>debtap</title>
    <url>/2022/02/10/debtap/</url>
    <content><![CDATA[<p>A tool to traverse deb package.</p>
<p>ref: <a href="https://www.jianshu.com/p/900dc8a0ecff">here</a></p>
<span id="more"></span>
<h1 id="install"><a class="header-anchor" href="#install"></a>install</h1>
<ol>
<li>
<p>install</p>
</li>
<li>
<p>before update: 国外源非常慢，需要换源：</p>
<ol>
<li>
<p><code>sudo nvim /usr/bin/debtap</code></p>
</li>
<li>
<p><code>：%s/ftp.debian.org/mirrors.ustc.edu.cn/g </code></p>
<p><code>：%s/archive.ubuntu.com/mirrors.ustc.edu.cn/g</code></p>
</li>
</ol>
</li>
<li>
<p>update debtap： <code>sudo debtap -u</code></p>
</li>
</ol>
<h1 id="usage"><a class="header-anchor" href="#usage"></a>usage</h1>
<ul>
<li>
<p><code>sudo debtap [file_name].deb</code><br>
注意： 安装时会提示输入包名，以及license。包名随意，license就填GPL吧 上述操作完成后会在deb包同级目录生成<code>xxx.tar.xz</code>文件</p>
</li>
<li>
<p>静默模式</p>
<p><code>-q </code>略过除了编辑元数据之外的所有问题。</p>
<p><code>debtap -q xxx.deb</code></p>
</li>
<li>
<p>略过所有的问题（不推荐）</p>
<p><code>debtap -Q xxx.deb</code></p>
</li>
<li>
<p>安装转换好的本地包</p>
<p><code>sudo yay -U xxx.tar.xz</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
  </entry>
  <entry>
    <title>人体结构与疾病</title>
    <url>/2021/12/17/%E4%BA%BA%E4%BD%93%E7%BB%93%E6%9E%84%E4%B8%8E%E7%96%BE%E7%97%85/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>运动系统</li>
<li>循环系统</li>
<li>呼吸系统</li>
<li>消化系统</li>
<li>免疫系统</li>
<li>神经系统</li>
<li>泌尿生殖系统</li>
<li>内分泌系统</li>
</ul>
 <span id="more"></span>
<h1 id="运动系统"><a class="header-anchor" href="#运动系统"></a>运动系统</h1>
<ul>
<li>组成：骨、骨连结（关节）、骨骼肌
<ul>
<li>约占体重的60%</li>
</ul>
</li>
</ul>
<h2 id="骨"><a class="header-anchor" href="#骨"></a>骨</h2>
<ul>
<li>
<p>206块骨：</p>
<ul>
<li>
<p>躯干骨：51块</p>
<ul>
<li>
<p>脊柱：24块椎骨（ 椎间盘突出（向后突）做针灸推拿都没用，只能开刀 ）</p>
<ul>
<li>颈椎： 7（第七颈椎最大，是能摸到的。 前六个无论再瘦也摸不到）</li>
<li>胸椎： 12</li>
<li>腰椎： 5</li>
</ul>
</li>
<li>
<p>骶骨： 1 （ 儿童时5块，成年后合为一块 ）</p>
</li>
<li>
<p>尾骨：1</p>
</li>
<li>
<p>肋骨（24块）：</p>
<ul>
<li>
<p>第一肋骨藏在锁骨后面，摸不到</p>
</li>
<li>
<p>第二肋骨：从上往下摸，距顶端大概四五厘米的样子会摸到一个明显的隆起，是胸骨角，对应的肋骨就是第二肋</p>
</li>
<li>
<p>第十一、十二块是“浮肋”：肋软骨不与其他肋相连接它们末端是游离状态，没有与其它十根肋骨形成胸廓，因为末端游离，所以叫浮肋</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>上肢骨：64块，对称。</p>
<ul>
<li>锁骨：2</li>
<li>肩胛骨：2</li>
<li>肱骨：2，即大臂骨。</li>
<li>桡骨：2，拇指一侧为桡骨。 有桡动脉，搭脉、割脉都是它。</li>
<li>尺骨：2，小指一侧为尺骨。曲肘时摸到的明显凸起就是尺骨鹰嘴。</li>
<li>腕骨：16</li>
<li>掌骨：10</li>
<li>指骨：28</li>
</ul>
</li>
<li>
<p>下肢骨：62</p>
<ul>
<li>髋骨：2
<ul>
<li>每块由髂骨、坐骨和耻骨融合而成</li>
<li>左右两个髋骨和一块骶骨构成了骨盆</li>
</ul>
</li>
<li>股骨：2</li>
<li>髌骨：2</li>
<li>胫骨：2</li>
<li>腓骨：2</li>
<li>附骨：14</li>
<li>拓骨：10</li>
<li>趾骨：28
<ul>
<li>除了大脚趾两块，都是三块</li>
</ul>
</li>
</ul>
</li>
<li>
<p>颅骨：23</p>
<ul>
<li>脑颅骨：8
<ul>
<li>额骨，枕骨，蝶骨，筛骨各一块，顶骨，颞骨各两块</li>
<li>儿童颅骨没有完全长好，还有囟门（前囟和后囟）</li>
<li>脑和脊髓是连通的</li>
</ul>
</li>
<li>面颅骨：15
<ul>
<li>上腭骨、颚骨、颧骨、泪骨、鼻骨、下鼻甲各两块，犁骨、下颌骨、舌骨各一块</li>
</ul>
</li>
</ul>
</li>
<li>
<p>听小骨：6</p>
<ul>
<li>锤骨、砧骨、镫骨各2块</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="肌肉"><a class="header-anchor" href="#肌肉"></a>肌肉</h2>
<ul>
<li>肌肉：
<ul>
<li>骨骼肌（横纹肌）：运动系统的肌肉均为横纹肌。它的两端通常附着在两块或两块以上的骨上，越过一个或多个关节，肌肉收缩时，便产生运动</li>
<li>平滑肌：对收缩拉伸非常敏感。 对着骨骼肌来一刀会疼，对着平滑肌来一刀不会疼。但要是对着平滑肌拉一拉就会疼。</li>
<li>心肌。</li>
</ul>
</li>
</ul>
<h2 id="运动系统疾病"><a class="header-anchor" href="#运动系统疾病"></a>运动系统疾病</h2>
<h3 id="骨折"><a class="header-anchor" href="#骨折"></a>骨折</h3>
<p>骨的完整性破坏或连续性中断称为骨折</p>
<ul>
<li>开放性骨折、青枝骨折、病理性骨折</li>
<li>并发症： 休克、感染、合并重要内脏器官损伤</li>
<li>自我判断伤后有无骨折：
<ul>
<li>从伤后出现的症状以及功能障碍加以分析：
<ul>
<li>若伤处疼痛剧烈，局部肿胀明显，有严重的皮下瘀血、青紫，出现外观畸形，这时均应考虑有骨折的可能</li>
<li>此外，一般骨折病人多有功能障碍，如手臂骨折后，手的握力差，甚至不敢提东西；</li>
</ul>
</li>
<li>用在远离受伤部位叩击的方法检查：
<ul>
<li>如上肢骨折，此手握拳，另一手手掌轻轻绐予撞击，若伤处感到疼痛，则骨折的可能性极大。<br>
至于下肢骨折，可用拳轻轻叩击患肢足跟，看看伤处有无痛感。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="循环系统"><a class="header-anchor" href="#循环系统"></a>循环系统</h1>
<h2 id="心脏"><a class="header-anchor" href="#心脏"></a>心脏</h2>
<ul>
<li>心脏位于横膈之上，两肺间而偏左，主要由心肌构成，有左心房、右心房、右心室四个腔。左右心房之间和左右心室之间均由间隔隔开，故互不相通，心房与心室之间有<u>瓣膜</u>，这些瓣膜使血液只能由心房流入心室，而不能倒流。</li>
</ul>
<p>在左边的叫“左心室”，在右边的叫“右心室”，心室壁厚，肌肉发达。左心室的壁比右心室更厚，肌肉更发达。这是因为左心室与<u>主动脉</u>相连，右心室与<u>肺动脉</u>相连，因此左心室收缩产生的压力要强于右心室。</p>
<p>血液由<u>心房</u>压入心室后，由心室压入动脉，分别输送到肺部与全身的其他部分。</p>
<h2 id="动脉"><a class="header-anchor" href="#动脉"></a>动脉</h2>
<ul>
<li>
<p>将血液带出心脏的血管</p>
</li>
<li>
<p>体表可扪及的动脉：桡动脉、足背动脉、颈总动脉</p>
</li>
</ul>
<h2 id="静脉"><a class="header-anchor" href="#静脉"></a>静脉</h2>
<ul>
<li>
<p>将血液带回心脏的血管</p>
</li>
<li>
<p>浅静脉多有静脉瓣，如大隐静脉等。面静脉无静脉瓣，面部疖肿挤压后脓栓可沿面静脉、内眦静脉、眼静脉入海绵窦，引起颅内感染。故将鼻根至两口角之间的区域称为危险三角。（ <strong>脸上的痘痘不能挤</strong> ）</p>
</li>
</ul>
<h2 id="毛细血管"><a class="header-anchor" href="#毛细血管"></a>毛细血管</h2>
<ul>
<li>
<p>连于动脉与静脉之间管径极细、管壁极薄的血管</p>
</li>
<li>
<p>手指神经在两侧，内侧是肌腱，没多少血管，因此隔开了不会很疼，可以“空手接白刃”</p>
</li>
</ul>
<h2 id="循环系统疾病"><a class="header-anchor" href="#循环系统疾病"></a>循环系统疾病</h2>
<h3 id="心律失常"><a class="header-anchor" href="#心律失常"></a>心律失常</h3>
<ul>
<li>早搏、心动过速、心动过缓等</li>
</ul>
<h3 id="动脉粥样硬化和冠状动脉粥样硬化性心脏病"><a class="header-anchor" href="#动脉粥样硬化和冠状动脉粥样硬化性心脏病"></a>动脉粥样硬化和冠状动脉粥样硬化性心脏病</h3>
<ul>
<li>动脉硬化的特点：动脉发生了非炎症性、退行性和增生性的病变，导致管壁增厚变硬、失去弹性和管腔缩小</li>
<li>动脉粥样硬化的特点是：在上述病变过程中，受累动脉从内膜开始，先后有多种病变合并存在，包括有脂质和复合糖类积聚，出血和血栓形成，纤维组织增生和钙质沉着，并有动脉中层的逐渐退化和钙化</li>
<li>冠心病： 冠状动脉粥样硬化性心脏病，亦称缺血性心脏病。：指冠状动脉粥样硬化使血管腔阻塞导致心肌缺血缺氧而引起的心脏病，它和冠状动脉功能改变（痉挛）一起，统称为冠状动脉性心脏病</li>
</ul>
<h3 id="原发性高血压"><a class="header-anchor" href="#原发性高血压"></a>原发性高血压</h3>
<ul>
<li>高血压：一种原因未明的、以体循环动脉血压升高为主要表现的独立性全身性疾病，细动脉硬化为基本病变，常引起心、脑、肾及眼底改变。</li>
<li>标准：收缩压≥<code>140mmHg（18.4kPa</code>）或<br>
舒张压≥<code>90mmHg（12.0kPa）</code></li>
<li>类型：原发性和继发性</li>
<li>我国最常见的心血管疾病，多见于中、老年人</li>
<li>营养与保健：
<ul>
<li>
<p>限制钠盐。科学家们已证实钠离子与高血压的发病密切相关，所以控制食盐的摄入能防治高血压病，一般主张每日用盐控制在5克以下，最好是3克，即食物中有轻度咸味即可。如果有耳鸣、眩晕、浮肿的高血压病人，食盐应严格控制，每日限制在2克以下，或不用食盐，用10<code>cc</code>酱油代替（1汤匙为15<code>cc</code>）</p>
</li>
<li>
<p>选用优质的蛋白质食物</p>
</li>
<li>
<p>多选用含钾、镁、碘和锌高的食物。因为这类微量元素，有降压和保护心脏和预防动脉粥样硬化的功能。</p>
<ul>
<li>
<p>含钾高的食物：柑橘、苹果、杏、红枣、葡萄、花椰菜、大豆、黑豆、菠菜、土豆等。家禽类、鱼和瘦肉含钾量也高。</p>
</li>
<li>
<p>含镁高的食物：各种干豆类及鲜豆、苋菜、桂圆、豆芽等。</p>
</li>
<li>
<p>含碘高的食物：海产品类、海带、紫菜等。</p>
</li>
<li>
<p>含锌高的食物：瘦牛肉、瘦猪肉、黄鱼、花生、荔枝等。其它谷类的原粮含锌也高，但含植酸高，要经发酵制作后，才可以吸收利用（象蒸玉米面馒头、蒸发糕、江米酒、芝麻酱等可以食用）。</p>
</li>
</ul>
</li>
<li>
<p>另外要注意，每日要饮适量温开水（最好清晨喝一杯白开水），有调节血液黏度的作用，可以净化血液，又能通大便。同时应注意“平衡膳食”，即成酸或成碱的食物都应有（荤素搭配）。其次主食中最好粗细粮相结合。</p>
</li>
<li>
<p>饮食制度方面：要有规律性，食勿过饱，晚餐饮食要清淡易于消化。不饮酒，不吸烟。心情要轻松愉快。</p>
</li>
<li>
<p>其他方面：像深色叶菜含大量维生素A、B、C及微量元素钙、镁。又如：水果及黄瓜、西红柿等可以生吃，可用于降体重膳食，对高血压病人有好处。</p>
</li>
</ul>
</li>
</ul>
<h3 id="心肌梗死"><a class="header-anchor" href="#心肌梗死"></a>心肌梗死</h3>
<ul>
<li>心肌梗死（myocardial infarction，MI）是由冠状动脉粥样硬化引起血栓形成、冠状动脉的分支堵塞，使一部分心肌失去血液供应而坏死</li>
<li>多发生于中年以后</li>
<li>发病时有剧烈而持久的性质类似心绞痛的前胸痛、心悸、气喘、脉搏微弱、血压降低等症状，服用硝酸甘油无效，可产生严重后果</li>
</ul>
<h3 id="主动脉夹层"><a class="header-anchor" href="#主动脉夹层"></a>主动脉夹层</h3>
<ul>
<li>指主动脉腔内的血液从主动脉内膜撕裂处进入主动脉中膜，使中膜分离，沿主动脉长轴方向扩展形成主动脉壁的真假两腔分离状态</li>
<li>高峰年龄：50～70岁，男女比例约2～3 : 1。65%～70%在急性期死于心脏压塞、心律失常等
<ul>
<li>早期诊断和治疗非常必要</li>
</ul>
</li>
<li>主动脉夹层由于高血压动脉粥样硬化所致者占70%～80%，高血压可使动脉壁长期处于应急状态，弹力纤维常发生囊性变性或坏死，导致夹层形成</li>
</ul>
<h3 id="大隐静脉曲张"><a class="header-anchor" href="#大隐静脉曲张"></a>大隐静脉曲张</h3>
<h3 id="深静脉血栓"><a class="header-anchor" href="#深静脉血栓"></a>深静脉血栓</h3>
<ul>
<li>血液非正常地在深静脉内凝结，属于下肢静脉回流障碍性疾病。血栓形成大都发生于制动状态（尤其是<strong>骨科大手术</strong>）。</li>
<li>致病因素：血流缓慢、静脉壁损伤和高凝状态</li>
<li>血栓形成后，除少数能自行消融或局限于发生部位外，大部分会扩散至整个肢体的深静脉主干，若不能及时诊断和处理，多数会演变为血栓形成后遗症，长时间影响患者的生活质量；还有一些病人可能并发肺栓塞，造成极为严重的后果。</li>
</ul>
<h1 id="呼吸系统"><a class="header-anchor" href="#呼吸系统"></a>呼吸系统</h1>
<h2 id="呼吸道"><a class="header-anchor" href="#呼吸道"></a>呼吸道</h2>
<ul>
<li>包括鼻、咽、喉、气管、主支气管。临床上将鼻、咽、喉称为<strong>上呼吸道</strong>，气管、主支气管称为<strong>下呼吸道</strong>。</li>
</ul>
<h2 id="肺"><a class="header-anchor" href="#肺"></a>肺</h2>
<ul>
<li>位于胸腔内，纵隔两侧，左、右各一，右肺粗短，左肺狭长。每侧肺似半个锥体形。</li>
<li>主支气管入肺后依次分为肺叶支气管、肺段支气管、小支气管、细支气管、终末支气管。恰似一棵倒立的大树，也称支气管树。</li>
</ul>
<h2 id="呼吸系统疾病"><a class="header-anchor" href="#呼吸系统疾病"></a>呼吸系统疾病</h2>
<h3 id="慢性支气管炎-阻塞性肺气肿-肺源性心脏病"><a class="header-anchor" href="#慢性支气管炎-阻塞性肺气肿-肺源性心脏病"></a>慢性支气管炎 ---&gt; 阻塞性肺气肿 - --&gt; 肺源性心脏病</h3>
<ul>
<li>慢支：咳嗽、 咳痰、喘息，每年发病持续三个月，连续两年或以上，并排除其他心、肺疾患
<ul>
<li>原因：抽烟（最常见）、矿工</li>
<li><strong>可逆性</strong>：好好治疗，肺可以恢复到健康状态; 如果继续下去，进入到肺气肿，就不可逆了</li>
</ul>
</li>
<li>肺气肿：<strong>胸廓扩张</strong>
<ul>
<li>呼气困难</li>
</ul>
</li>
<li>肺心病：<strong>右心衰竭</strong>
<ul>
<li>两三年就会死，除非心肺联合移植
<ul>
<li>单独移植肺或心脏没用，因为二者都病变了</li>
<li>单独的肺移植一般用于肺癌</li>
</ul>
</li>
<li>右心室变大，需要花更多力量把血液压进肺动脉。</li>
<li>（左心室变大一般是高血压的表现，它需要更多的力量把血液压到全身）</li>
</ul>
</li>
</ul>
<h3 id="肺炎"><a class="header-anchor" href="#肺炎"></a>肺炎</h3>
<ul>
<li>肺炎球菌肺炎</li>
<li>葡萄球菌肺炎</li>
<li>肺炎支原体肺炎（ 原发性非典型性肺炎 ）
<ul>
<li>支原体：微生物</li>
<li>我们所谓的“非典”其实是SRAS，属于病毒，当初被误认为支原体，才被称为”非典“</li>
</ul>
</li>
<li>病毒性肺炎（ SARS, 新冠 ）</li>
<li>真菌性肺炎
<ul>
<li>真菌性肺炎不是从外部感染的，肺内部本来就有真菌，是由于<strong>人体免疫功能下降</strong>，才导致真菌性肺炎</li>
</ul>
</li>
</ul>
<h3 id="气胸"><a class="header-anchor" href="#气胸"></a>气胸</h3>
<ul>
<li>原因：胸廓破了， 或肺大疱</li>
</ul>
<h3 id="胸腔积液"><a class="header-anchor" href="#胸腔积液"></a>胸腔积液</h3>
<h3 id="肺癌"><a class="header-anchor" href="#肺癌"></a>肺癌</h3>
<ul>
<li>肺鳞状细胞癌
<ul>
<li><strong>鳞状</strong>：脸部就是鳞状上皮，口腔内部就是柱状上皮</li>
</ul>
</li>
</ul>
<h3 id="支气管哮喘"><a class="header-anchor" href="#支气管哮喘"></a>支气管哮喘</h3>
<h3 id="肺纤维化"><a class="header-anchor" href="#肺纤维化"></a>肺纤维化</h3>
<ul>
<li>肺纤维化是一大类疾病的总称</li>
<li>感冒
<ul>
<li>普通感冒的主要症状是呼吸道卡他症状
<ul>
<li>卡他： 渗出物沿着黏膜表面顺势下流</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="感冒"><a class="header-anchor" href="#感冒"></a>感冒</h3>
<ul>
<li>由病毒引起</li>
</ul>
<h3 id="急救-心肺脑复苏-CPR"><a class="header-anchor" href="#急救-心肺脑复苏-CPR"></a>急救:心肺脑复苏( CPR )</h3>
<p>Cardiopulmonary resuscitation</p>
<ul>
<li>原来并无严重器质性病变的心脏因一过性的急性原因而突然中止搏血导致的循环和呼吸停顿的临床死亡状态称为<strong>心跳骤停</strong></li>
<li>传统观点认为，大脑缺血缺氧超过4～5分钟即可遭受不可逆的损伤，故把心跳骤停的复活时间定为5分钟。但在环境温度、病人机体状况、原发疾病等不同情况下尚存在一定的差异，切不可生搬硬套</li>
</ul>
<p>心跳骤停的原因:</p>
<ul>
<li>原发性:如冠心病（最为多见）、心肌炎、心肌病、某些先天性心脏病等。</li>
<li>继发性</li>
<li>严格讲,后合适原发性达到不可你阶段的必然后果</li>
</ul>
<p>步骤:</p>
<ul>
<li>现场救治:
<ol>
<li>保持气管通畅: 头后仰,提起下颈,手法清理口咽部,推举上腹部,扣打背部</li>
<li>人工呼吸: 口对口(鼻)呼吸</li>
<li>人工循环: 胸外心脏按压</li>
</ol>
</li>
<li>进一步生命支持：
<ol>
<li>用药输液(drugs)</li>
<li>心电图监测(ECG)</li>
<li>电除颤(Fibrillation)</li>
</ol>
</li>
<li>持续生命支持：
<ol>
<li>诊断(Gauge)</li>
<li>低温(Hypothermia)</li>
<li>加强治疗(ICU)</li>
</ol>
</li>
</ul>
<h1 id="消化系统"><a class="header-anchor" href="#消化系统"></a>消化系统</h1>
<ul>
<li>组成部分:
<ul>
<li>消化管</li>
<li>消化腺</li>
</ul>
</li>
<li>主要功能:
<ul>
<li>消化食物</li>
<li>吸收营养</li>
<li>排出粪便</li>
</ul>
</li>
</ul>
<h2 id="消化管"><a class="header-anchor" href="#消化管"></a>消化管</h2>
<ul>
<li>始于口腔,终于肛门. 包括口腔、咽、食管、胃、小肠（十二指肠、空肠、回肠）和大肠（盲肠、结肠、直肠）等部.</li>
<li>临床以十二指肠为界,以上的消化管(包括十二指肠)称为<strong>上消化道</strong>,空肠及以下的称为<strong>下消化道</strong></li>
</ul>
<h3 id="口腔"><a class="header-anchor" href="#口腔"></a>口腔</h3>
<ul>
<li>是消化管的起始处，借口唇与外界相通，借咽峡与咽相续。口腔以上、下颌牙咬合为界分为口腔前庭和固有口腔</li>
</ul>
<h3 id="咽"><a class="header-anchor" href="#咽"></a>咽</h3>
<ul>
<li>咽位于1~6颈椎前方，为一漏斗形肌性管道。长约12<code>cm</code></li>
</ul>
<h3 id="食管"><a class="header-anchor" href="#食管"></a>食管</h3>
<ul>
<li>为一肌性管道，长约25<code>cm</code>，沿脊柱前方下降，上续咽，下接胃的贲门。有三个生理狭窄，其中第三狭窄（位于食管穿膈处）是肿瘤好发部位和异物易滞留部位</li>
</ul>
<h3 id="胃"><a class="header-anchor" href="#胃"></a>胃</h3>
<ul>
<li>胃：分为两壁、两缘、两口。两壁即前、后两壁，两缘即大弯和小弯，两口即上口贲门、下口幽门。又可分为四部，即贲门部、胃底、胃体和幽门部。幽门部临床也称胃窦，分幽门窦和幽门管两部。</li>
</ul>
<h3 id="小肠"><a class="header-anchor" href="#小肠"></a>小肠</h3>
<p>一般根据形态和结构变化分为三段，分别为十二指肠（duodenum），空肠（jejunum）和回肠（ileum）</p>
<ul>
<li>小肠内部有集合淋巴滤泡，因此小肠是重要的免疫器官
<ul>
<li>小肠移植非常困难（排异反应），现在普遍用菌群移植替代
<ul>
<li>菌群移植：吃粪便。 因为小肠是灌不进去的，只能吃进去。 一般都包在胶囊里。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="大肠"><a class="header-anchor" href="#大肠"></a>大肠</h3>
<p>盲肠、结肠、直肠</p>
<ul>
<li>盲肠不会发炎，只有阑尾炎</li>
</ul>
<h2 id="消化腺"><a class="header-anchor" href="#消化腺"></a>消化腺</h2>
<h3 id="肝"><a class="header-anchor" href="#肝"></a>肝</h3>
<ul>
<li>
<p>是最大的消化腺，呈楔形褐红色。有两纵一横沟，分为左叶、右叶、方叶和尾状叶。 横沟又称肝门，是肝左右管、肝固有动脉、肝门静脉、神经、淋巴管等出入的部位。肝大部位于右季肋区和腹上区，少部分位于左季肋区。上界与膈穹隆一致。下界右侧与右肋弓基本一致，剑突下可达3~5cm，平静呼吸时上下共有2~3cm的移动度。</p>
</li>
<li>
<p>胆囊：胆囊位于右季肋区，肝的下方胆囊窝内。形态：似梨形，分为胆囊底、胆囊体、胆囊颈、胆囊管四部。主要功能为暂时储存和浓缩胆汁。胆囊底的体表投影在右锁骨中线与右肋弓交点稍下方。</p>
</li>
<li>
<p>胆道：是将肝细胞产生的胆汁输送至十二指肠的管道。</p>
</li>
</ul>
<h3 id="胰"><a class="header-anchor" href="#胰"></a>胰</h3>
<ul>
<li>位于胃的后方，分胰头、胰体、胰尾三部。胰头被十二指肠环抱。外分泌部分泌胰液，由胰管开口于十二指肠。内分泌部分泌胰岛素，调节血糖。</li>
</ul>
<h2 id="消化系统疾病"><a class="header-anchor" href="#消化系统疾病"></a>消化系统疾病</h2>
<h3 id="上消化道出血"><a class="header-anchor" href="#上消化道出血"></a>上消化道出血</h3>
<ul>
<li>
<p>指屈氏韧带以上的消化道，包括食管、胃、十二指肠或胰胆等病变引起的出血；胃空肠吻合术后的空肠病变所致的出血亦属这一范围。</p>
</li>
<li>
<p>一般指在数小时内的失血量超出1000<code>ml</code>或循环血容量的20%。为临床常见的急症，病死率为10%，误诊率为20%</p>
</li>
<li>
<p>常见病因：<br>
食管疾病（食管炎、食管癌等）、胃十二指肠疾病（消化性溃疡、胃炎、胃癌等）、空肠疾病（胃肠吻合术后的空肠溃疡）、肝硬化、门静脉血栓、胆道出血、胰腺癌、全身性疾病（血液病、尿毒症、应激性溃疡、急性感染等）</p>
</li>
<li>
<p>临床表现：呕血与黑粪是上消化道出血的特征性表现。一般来讲，出血部位在幽门以下者只表现为黑粪，在幽门以上者常兼有<strong>呕血</strong></p>
<ul>
<li>呕血与咯血的区别：
<ol>
<li>病史：呕血患者多有胃、十二指肠溃疡，肿瘤或肝硬变等病史；而咯血患者一般有结核，支气管扩张或心肺疾病等。</li>
<li>出血方式：呕血多随呕吐引起，咯血一般是咳嗽后吐出。</li>
<li>血液颜色：呕血的颜色呈紫红或咖啡色，无泡沫，咯血的则为鲜红，有泡沫</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="消化性溃疡"><a class="header-anchor" href="#消化性溃疡"></a>消化性溃疡</h3>
<ul>
<li>主要是指发生在胃和十二指肠球部的慢性溃疡。溃疡的形成与胃酸和胃蛋白酶的消化作用有关，故称消化性溃疡，又称胃十二指肠溃疡。</li>
<li>19世纪时，本病较少见，且胃溃疡多于十二指肠溃疡，当今资料显示十二指肠溃疡较为多见。十二指肠溃疡中男性患者较女性为多，而<strong>胃溃疡</strong>则无显著性别差异。十二指肠溃疡患者以青壮年居多，而胃溃疡患者平均年龄要比十二指肠溃疡患者大10年。</li>
<li>临床表现：
<ol>
<li>慢性过程</li>
<li>周期性发作（且有季节性，一般于秋冬或冬春之交）</li>
<li>节律性疼痛</li>
</ol>
</li>
</ul>
<h3 id="胃癌"><a class="header-anchor" href="#胃癌"></a>胃癌</h3>
<ul>
<li>是最多见的消化道肿瘤，死亡率高，由于<strong>早期无症状</strong>，故发现时已届中晚期。<br>
癌前病变：慢性萎缩性胃炎、胃息肉、残胃、胃溃疡等</li>
</ul>
<h3 id="肝硬化"><a class="header-anchor" href="#肝硬化"></a>肝硬化</h3>
<ul>
<li>病因：我国以病毒性肝炎所致的肝硬化最为常见，国外以酒精性肝硬化多见。</li>
<li>临床表现：一般状况和营养状况较差，皮肤干枯、面色灰暗黝黑、有出血倾向、贫血、门脉高压（脾肿大、腹水、上消化道出血）</li>
<li>可导致肝性昏迷、原发性肝癌等</li>
</ul>
<h3 id="阑尾炎"><a class="header-anchor" href="#阑尾炎"></a>阑尾炎</h3>
<ul>
<li>特征：转移性右下腹痛、压痛、反跳痛</li>
</ul>
<h3 id="病毒性肝炎"><a class="header-anchor" href="#病毒性肝炎"></a>病毒性肝炎</h3>
<ul>
<li>病毒性肝炎是由多种肝炎病毒引起的,以肝损害为主要病变的一组传染病</li>
<li>分型: 甲,乙,丙,丁,戊</li>
<li>主要临床表现： 乏力,纳差,厌油腻,恶心,腹胀,黄疸,肝区隐痛,肝大,肝功能异常。</li>
</ul>
<h1 id="免疫系统"><a class="header-anchor" href="#免疫系统"></a>免疫系统</h1>
<table>
<thead>
<tr>
<th>分类</th>
<th>器官</th>
</tr>
</thead>
<tbody>
<tr>
<td>中枢免疫系统</td>
<td>胸腺</td>
</tr>
<tr>
<td></td>
<td>骨髓</td>
</tr>
<tr>
<td></td>
<td>腔上囊</td>
</tr>
<tr>
<td>外周免疫器官</td>
<td>淋巴结</td>
</tr>
<tr>
<td></td>
<td>脾脏</td>
</tr>
<tr>
<td></td>
<td>淋巴小节</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>分类</th>
<th>名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>免疫细胞</td>
<td>淋巴细胞（ T, B ）</td>
</tr>
<tr>
<td></td>
<td>巨噬细胞</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>免疫分子</td>
<td>抗体</td>
</tr>
<tr>
<td></td>
<td>补体</td>
</tr>
<tr>
<td></td>
<td>细胞因子</td>
</tr>
</tbody>
</table>
<ul>
<li>腔上囊： 鸟类拥有，哺乳动物没有
<ul>
<li>鸡屁股可以吃：这是中枢免疫器官，不是外周免疫器官，免疫应答不发生在这里。 因此这里不会有大量的病原体</li>
<li>鸡脖子也可以吃：鸡没有淋巴结。 鸡脖子上是鸡的胸腺。 因此鸡脖子也能吃</li>
</ul>
</li>
<li>淋巴结：淋巴结清扫的后遗症非常恐怖。可以用淋巴结移植等替代方案</li>
</ul>
<h2 id="免疫系统疾病"><a class="header-anchor" href="#免疫系统疾病"></a>免疫系统疾病</h2>
<h3 id="过敏"><a class="header-anchor" href="#过敏"></a>过敏</h3>
<ul>
<li>超敏反应，也叫变态反应
<ul>
<li>指机体受同一抗原物质<strong>再次刺激</strong>后产生的一种异常或病理性免疫反应。也就是说，若机体已被抗原致敏，当再次接触相同抗原时则二次免疫应答被增强。在摄入抗原量较大或机体的免疫处于高应答状态时，则因免疫应答过程而导致组织损伤。</li>
</ul>
</li>
<li>超敏反应的分类：1963年Gell和Coombs根据超敏反应发生的机理和临床特点，将其分为四型：
<ul>
<li>Ⅰ型，即速发型超敏反应
<ul>
<li>呼吸道过敏反应<br>
过敏性鼻炎、过敏性哮喘、花粉症</li>
<li>消化道过敏反应<br>
过敏性胃肠炎</li>
<li>全身性过敏反应<br>
青霉素过敏</li>
</ul>
</li>
<li>Ⅱ型，即细胞溶解型或细胞毒型超敏反应
<ul>
<li>输血反应</li>
<li>新生儿溶血症</li>
<li>移植排斥反应</li>
<li>自身免疫性溶血性贫血</li>
<li>肺出血肾炎综合征</li>
<li>Grave病</li>
<li>重症肌无力</li>
</ul>
</li>
<li>Ⅲ型，即免疫复合物型超敏反应
<ul>
<li>血清病：是一种由循环免疫复合物引起的全身的III型超敏反应性疾病，主要由注射异种动物血清所致，故称为血清病。包括急性和慢性血清病。</li>
<li>免疫复合物性肾小球肾炎</li>
<li>类风湿性关节炎</li>
<li>系统性红斑狼疮</li>
</ul>
</li>
<li>Ⅳ型，即迟发型超敏反应
<ul>
<li>接触性皮炎</li>
<li>移植排斥反应</li>
<li>与自身免疫病的关系</li>
<li>与传染病的关系（OT试验）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="艾滋病"><a class="header-anchor" href="#艾滋病"></a>艾滋病</h3>
<ul>
<li>HIV可以侵袭人的免疫系统，降低并最终破坏人体的免疫功能。随着人体免疫力的降低，人会越来越频繁地感染上各种致病微生物，而且感染的程度也会变得越来越来重，最终会因各种复合感染而导致死亡</li>
<li>传播方式：AIDS 为传染病性病，其传播方式主要有三，其中以<strong>性接触</strong>最具重要性。
<ol>
<li>性接触传播：
<ul>
<li>同性恋和/或双性恋：约占70%病例。男同性恋者HIV感染率甚高，尤以有色人种居多。HIV感染者精液中的HIV经直肠粘膜传给健康的同性恋性伴</li>
<li>异性恋：约占4%病例。精液中的HIV感染细胞与子宫中的巨噬细胞、淋巴细胞、上皮细胞相互作用而使女方感染。阴道分泌物中的HIV感染细胞能将HIV传给男性尿道口中的巨噬细胞或淋巴细胞。</li>
</ul>
</li>
<li>血液传播：
<ul>
<li>输血：约占2.5%病例。</li>
<li>血制品：约占1%病例。</li>
<li>共用污染有HIV的针头和注射器等：约占18%。</li>
</ul>
</li>
<li>母婴垂直传播：HIV可经胎盘、产道和母乳传给下一代。</li>
</ol>
</li>
</ul>
<h1 id="神经系统"><a class="header-anchor" href="#神经系统"></a>神经系统</h1>
<table>
<thead>
<tr>
<th>分类</th>
<th>器官</th>
</tr>
</thead>
<tbody>
<tr>
<td>中枢神经</td>
<td>脑</td>
</tr>
<tr>
<td></td>
<td>脊髓</td>
</tr>
<tr>
<td>周围神经</td>
<td>按部位分：脑神经、脊髓神经</td>
</tr>
<tr>
<td></td>
<td>按分布分：内脏神经（内脏感觉神经、内脏运动神经（交感神经、附交感神经））、躯体神经</td>
</tr>
</tbody>
</table>
<h2 id="中枢神经系统"><a class="header-anchor" href="#中枢神经系统"></a>中枢神经系统</h2>
<h3 id="脑"><a class="header-anchor" href="#脑"></a>脑</h3>
<ul>
<li>是中枢神经系统的头端膨大部分，位于颅腔内，可分为端脑、间脑、中脑、脑桥、小脑和延髓六个部分。其中中脑、脑桥和延髓合称为<strong>脑干</strong>。</li>
</ul>
<h3 id="脊髓"><a class="header-anchor" href="#脊髓"></a>脊髓</h3>
<ul>
<li>位于椎管内，上端平对枕骨大孔连接延髓，下端平对第1腰椎下缘水平。</li>
</ul>
<h1 id="周围神经系统"><a class="header-anchor" href="#周围神经系统"></a>周围神经系统</h1>
<h3 id="脊神经"><a class="header-anchor" href="#脊神经"></a>脊神经</h3>
<ul>
<li>共31对，颈神经8对，胸神经12对，腰神经5对，骶神经5对，尾神经1对。</li>
</ul>
<h3 id="脑神经"><a class="header-anchor" href="#脑神经"></a>脑神经</h3>
<ul>
<li>共12对。嗅神经、视神经、动眼神经、滑车神经、三叉神经、外展神经、面神经、 前庭蜗神经（听神经）、舌咽神经、迷走神经、副神经、舌下神经。</li>
</ul>
<h2 id="神经系统疾病"><a class="header-anchor" href="#神经系统疾病"></a>神经系统疾病</h2>
<h3 id="脑膜炎"><a class="header-anchor" href="#脑膜炎"></a>脑膜炎</h3>
<ul>
<li>神经系统症状：<br>
颅内压升高：三联征：头痛、喷射性呕吐、视觉障碍</li>
<li>脑膜刺激症：颈项强直、角弓反张、屈髋伸膝（Kernig）征阳性。</li>
</ul>
<h3 id="震颤麻痹"><a class="header-anchor" href="#震颤麻痹"></a>震颤麻痹</h3>
<ul>
<li>又名帕金森病，以运动减少、肌张力强直和震颤为主要的症状。本病典型的震颤为静止性震颤。</li>
</ul>
<h3 id="重症肌无力"><a class="header-anchor" href="#重症肌无力"></a>重症肌无力</h3>
<h3 id="癫痫"><a class="header-anchor" href="#癫痫"></a>癫痫</h3>
<h3 id="亨廷顿舞蹈症"><a class="header-anchor" href="#亨廷顿舞蹈症"></a>亨廷顿舞蹈症</h3>
<h3 id="阿尔兹海默症"><a class="header-anchor" href="#阿尔兹海默症"></a>阿尔兹海默症</h3>
<h2 id="常见精神病"><a class="header-anchor" href="#常见精神病"></a>常见精神病</h2>
<h3 id="精神分裂症"><a class="header-anchor" href="#精神分裂症"></a>精神分裂症</h3>
<p>患者不自知</p>
<ul>
<li>
<p><strong>单纯型</strong></p>
<p>又称隐潜型精神分裂症，以缓慢呈现的思维贫乏、情感淡漠、意志缺乏、孤僻被动及社会退缩等症状为主。大多发病于少年时期，故而又称为儿童精神分裂症。起病较缓慢、发病诱因不明显，最初不易被察觉，但当发现时病情往往已发展到较为严重的阶段。由于单纯型精神分裂症发病年龄较早，症状多被误解为孩子调皮不听话，而延误治疗造成病情加重。但一般很少出现幻觉、妄想和紧张症状，自知力没有丧失，在众多类型中属于轻型的精神分裂症。</p>
</li>
<li>
<p><strong>青春型</strong></p>
<p>较常见，多发病于青春期，起病较急，病情发展较快。多始发于15~25岁，无明显男女性别差异。表现为情感喜怒无常，行为幼稚，常有兴奋冲动行为及本能（性欲、食欲）意向亢进。病情发展较快，但如及时治疗，效果较好。</p>
</li>
<li>
<p><strong>紧张型</strong></p>
<p>最少见，起病最快，多在青壮年期发病，以木僵状态多见。从运动缓慢、少语少动（亚木僵状态）到固定于某个姿势，不语不动，不饮不食，表情呆板，对环境变化毫无反应（木僵状态），但神志清楚。病人肌肉紧张，可处于某个固定姿势不动。紧张性木僵可与紧张性兴奋交替出现，此时病人出现冲动行为，如卧床不懂的病人可突然起床，无目的地砸东西，然后仍旧躺下。此病可自动环节，治疗效果较好</p>
</li>
<li>
<p><strong>偏执型</strong></p>
<p>又称妄想型，是最常见的类型，起病缓慢。发病年龄多在青壮年和中年。病初表现为敏感多疑，逐渐发展成妄想（妄想对象一般是自己的上级）。妄想可单独存在，也可伴有以幻听、幻视等幻觉。情感障碍表面上会不明显，智力通常不受影响。患者注意力和意志往往增强，警惕、多疑且敏感，在幻觉影响下产生反抗，严重时有自伤、自杀以及伤人、杀人等严重行为。自发缓解少，治疗效果一般。</p>
</li>
</ul>
<h2 id="躁狂抑郁症"><a class="header-anchor" href="#躁狂抑郁症"></a>躁狂抑郁症</h2>
<p>患者自知</p>
<ul>
<li>躁狂抑郁症： 简称躁郁症，属于情感性精神障碍。是以显著而持久的情感过度高涨（躁狂相），或低落（抑郁相）为临床主要特征/病程经过为躁狂或抑郁的循环发作（双相）或单相（仅有抑郁相）发作，间歇期精神活动多保持正常
<ul>
<li><strong>自杀企图</strong></li>
</ul>
</li>
</ul>
<h2 id="反应性精神障碍"><a class="header-anchor" href="#反应性精神障碍"></a>反应性精神障碍</h2>
<ul>
<li>反应性精神障碍：是指一组在严重或持久的精神创伤下引起的精神障碍，其临床症状特点和病程经过与创伤性体验有密切关系</li>
</ul>
<h2 id="神经衰弱"><a class="header-anchor" href="#神经衰弱"></a>神经衰弱</h2>
<ul>
<li>神经衰弱：属于心理疾病的一种，是一类精神容易兴奋和脑力容易疲乏、常有情绪烦恼和心理生理症状的神经症性障碍。神经衰弱是由于大脑神经活动长期处于紧张状态，导致大脑兴奋与抑制功能失调而产生的一组以精神易兴奋，脑情绪不稳定等症状为特点的神经功能性障碍</li>
</ul>
<h1 id="泌尿生殖系统"><a class="header-anchor" href="#泌尿生殖系统"></a>泌尿生殖系统</h1>
<ul>
<li>泌尿系统：肾、输尿管、膀胱、尿道
<ul>
<li>肾： 左肾比右肾高</li>
</ul>
</li>
<li>男性生殖系统：
<ul>
<li>内生殖器：睾丸，附睾，输精管，射精管，精囊和前列腺</li>
<li>外生殖器：阴茎，阴囊
<ul>
<li>“内”“外”的依据是是否在腹腔内，睾丸在人出生时是在腹腔内的</li>
</ul>
</li>
</ul>
</li>
<li>女性生殖系统：
<ul>
<li>内生殖器：成对的卵巢和输卵管， 单一的子宫和阴道</li>
<li>外生殖器：会阴部的大阴唇和小阴唇以及附属腺等</li>
</ul>
</li>
</ul>
<h2 id="泌尿生殖系统疾病"><a class="header-anchor" href="#泌尿生殖系统疾病"></a>泌尿生殖系统疾病</h2>
<h3 id="肾结石"><a class="header-anchor" href="#肾结石"></a>肾结石</h3>
<ul>
<li>
<p>1901年考古学家在公元前4800年的古埃及木乃伊体内首次发现膀胱结石和肾结石，公元前四世纪，古希腊希波克拉底在他的誓言中曾提到结石手术。在《黄帝内经》中也有记载</p>
</li>
<li>
<p>诊断： B超</p>
</li>
<li>
<p>治疗原则：</p>
<ol>
<li>清除结石，保护肾功能</li>
<li>去除病因，防止结石复发</li>
</ol>
</li>
</ul>
<h3 id="异位妊娠"><a class="header-anchor" href="#异位妊娠"></a>异位妊娠</h3>
<ul>
<li>
<p>即宫外孕，孕卵在子宫腔外着床的妊娠</p>
</li>
<li>
<p>检查： 常有腹腔内出血体征</p>
</li>
<li>
<p>治疗：手术为主</p>
</li>
</ul>
<h2 id="插叙：-女性盆腔痛"><a class="header-anchor" href="#插叙：-女性盆腔痛"></a>插叙： 女性盆腔痛</h2>
<ul>
<li>
<p>阑尾炎</p>
</li>
<li>
<p>肠易激综合症（<code>IBS</code>）：</p>
</li>
<li>
<p>月经痛：如果没有受孕，则子宫内膜脱落并排出体外，此时剧烈的子收缩会导致痛经，疼痛往往持续1-3天，局部热敷和止痛药有效</p>
</li>
<li>
<p>经前期综合症（<code>PMS</code>）：</p>
</li>
<li>
<p>异位妊娠</p>
</li>
<li>
<p>排卵痛：在月经周期中间感到的疼痛，可能与随卵子排出的液体及血液有关，可在不同的月份出现于不同侧，其本身对人体没有危害</p>
</li>
<li>
<p>盆腔炎</p>
</li>
<li>
<p>子宫内膜异位</p>
</li>
<li>
<p>卵巢囊肿</p>
</li>
<li>
<p>泌尿系感染</p>
</li>
<li>
<p>肾结石</p>
</li>
<li>
<p>膀胱炎</p>
</li>
<li>
<p>盆腔器官脱垂：包括盆腔、子宫，通常不会对健康造成特殊影响</p>
</li>
<li>
<p>瘢痕组织</p>
</li>
<li>
<p>性传播疾病</p>
</li>
</ul>
<h2 id="器官移植"><a class="header-anchor" href="#器官移植"></a>器官移植</h2>
<h3 id="移植的类型"><a class="header-anchor" href="#移植的类型"></a>移植的类型</h3>
<p>根据移植物的来源及其遗传背景不同，可将移植分为四类：</p>
<ul>
<li>自体移植：指移植物取自受者自身。例如下肢皮肤烧伤后，将患者自身上肢皮肤移植到下肢创面。这种移植如无感染，均能成功。</li>
<li>同系移植：指遗传基因完全相同或基本近似的个体间的移植。例如单卵双生子之间的移植，或同系动物交配的后代间的移植。这种移植一般都可成功。</li>
<li>同种异体移植：指同种间遗传基因不同的个体间的移植。</li>
<li>异种移植：指不同种属间的移植，其遗传基因性完全不同。</li>
</ul>
<h3 id="器官移植排斥的类型"><a class="header-anchor" href="#器官移植排斥的类型"></a>器官移植排斥的类型</h3>
<ol>
<li>宿主抗移植物反应（HVGR）：宿主体内致敏效应细胞和抗体对移植物进行攻击，导致移植物被排斥的反应，称为宿主抗移植物反应。
<ul>
<li>超急性排斥反应</li>
<li>急性排斥反应</li>
<li>慢性排斥反应</li>
</ul>
</li>
<li>移植物抗宿主反应（GVHR）：如果免疫攻击方向是由移植物针对宿主，即移植物中的免疫细胞对宿主的组织抗原产生免疫应答并引起组织损伤；也就是说，有移植物中的抗原特异性淋巴细胞识别宿主移植抗原而发生的一种反应，这种反应不仅导致移植失败，而且还能给受者造成严重后果。</li>
</ol>
<h3 id="移植排斥的防止"><a class="header-anchor" href="#移植排斥的防止"></a>移植排斥的防止</h3>
<ul>
<li>合理地进行组织配型</li>
<li>严格选择供者</li>
<li>抑制受者的免疫反应</li>
<li>加强移植后的免疫监测</li>
</ul>
<h1 id="内分泌系统"><a class="header-anchor" href="#内分泌系统"></a>内分泌系统</h1>
<ul>
<li>内分泌腺和内分泌组织</li>
</ul>
<h2 id="内分泌腺"><a class="header-anchor" href="#内分泌腺"></a>内分泌腺</h2>
<p>组成：</p>
<ul>
<li>甲状腺</li>
<li>甲状旁腺</li>
<li>肾上腺</li>
<li>垂体</li>
<li>松果体</li>
</ul>
<p>特点：</p>
<ul>
<li>没有运送分泌物的导管，分泌物通过毛细血管和毛细淋巴管进入血循环中，从而输送到全身各部；</li>
<li>它们分泌的化学物质叫激素，对人体代谢、生长、发育和生殖起重要的调节作用；</li>
<li>内分泌腺血管丰富，腺细胞与毛细血管内皮紧密连接。</li>
</ul>
<h2 id="内分泌组织"><a class="header-anchor" href="#内分泌组织"></a>内分泌组织</h2>
<ul>
<li>胰腺内胰岛</li>
<li>睾丸内的间质细胞</li>
<li>卵巢内的黄体和卵泡</li>
</ul>
<table>
<thead>
<tr>
<th>激素名称</th>
<th>产生激素的内分泌腺名称</th>
<th>激素的主要生理作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>生长激素</td>
<td>垂体</td>
<td>促进生长</td>
</tr>
<tr>
<td>促甲状腺激素</td>
<td>垂体</td>
<td>促进甲状腺的生长发育</td>
</tr>
<tr>
<td>促性腺激素</td>
<td>垂体</td>
<td>促进性腺的生长发育</td>
</tr>
<tr>
<td>甲状腺激素</td>
<td>甲状腺</td>
<td>促进新陈代谢和生长发育，尤其是对中枢神经系统的生长发育。 提高神经系统的兴奋性</td>
</tr>
<tr>
<td>胰岛素</td>
<td>胰腺中的胰岛</td>
<td>调节糖类代谢</td>
</tr>
<tr>
<td>性激素</td>
<td>雄（主要睾丸）、雌（主要卵巢）、孕（卵巢））</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="内分泌系统疾病"><a class="header-anchor" href="#内分泌系统疾病"></a>内分泌系统疾病</h2>
<h3 id="糖尿病"><a class="header-anchor" href="#糖尿病"></a>糖尿病</h3>
<ul>
<li>
<p>临床上将糖尿病分为胰岛素依赖型<code>（I型）</code>和非胰岛素依赖型糖尿病<code>（II型）</code>，<code>II型</code>较<code>I型</code>多见，多发生在40岁以上成年人，体型肥胖</p>
</li>
<li>
<p>分为原发性糖尿病和继发性糖尿病两类，原发性糖尿病占绝大多数，继发性糖尿病大多继发于胰岛组织被广泛破坏后。如胰切除术后。</p>
<ul>
<li>糖尿病一般指原发性糖尿病</li>
</ul>
</li>
<li>
<p>空腹血糖大于<code>7.8mmol/L</code>,  可诊断糖尿病</p>
</li>
<li>
<p>糖尿病慢性病变：心血管、肾、眼部</p>
</li>
</ul>
<h2 id="甲状腺机能亢进症"><a class="header-anchor" href="#甲状腺机能亢进症"></a>甲状腺机能亢进症</h2>
<ul>
<li>简称甲亢</li>
<li>临床表现：高代谢症群、神经、心血管系等功能失常、甲状腺肿大等，弥漫性者多有不同程度的突眼症</li>
</ul>
]]></content>
      <categories>
        <category>Physiology</category>
      </categories>
      <tags>
        <tag>人体结构与疾病</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora &amp;&amp; Latex</title>
    <url>/2021/07/23/%E4%BD%BF%E7%94%A8Typora%E7%BC%96%E5%86%99%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<ul>
<li>Author: 有多远滚多远</li>
</ul>
<span id="more"></span>
<h1 id="How"><a class="header-anchor" href="#How"></a>How</h1>
<p>在Typora中：</p>
<ul>
<li>按住<code>ctrl + shift + m</code></li>
<li>或者输入<code>$$</code></li>
</ul>
<h1 id="Latex-syntax"><a class="header-anchor" href="#Latex-syntax"></a>Latex syntax</h1>
<h2 id="上下标"><a class="header-anchor" href="#上下标"></a>上下标</h2>
<ul>
<li>
<p>上标</p>
<ul>
<li>只有一个: <code>a^2</code></li>
<li>多个: <code>a^&#123;1224&#125;</code></li>
</ul>
</li>
<li>
<p>下标</p>
<ul>
<li>跟上标类似，只需要把^换成_</li>
</ul>
</li>
<li>
<p>如果有多重下标或上标，必须用{ }进行准确的分割</p>
<ul>
<li><code>A_&#123;bb_&#123;cc&#125;&#125;</code></li>
</ul>
<p>$$<br>
A_{bb_{cc}}<br>
$$</p>
</li>
</ul>
<h2 id="插入水平线"><a class="header-anchor" href="#插入水平线"></a>插入水平线</h2>
<ul>
<li><code>\overline</code>和<code>\underline</code>
<ul>
<li><code>\overline&#123;a+b+c&#125; = \underline&#123;a+b+c&#125;</code></li>
</ul>
</li>
</ul>
<p>$$<br>
\overline{a+b+c} = \underline{a+b+c}<br>
$$</p>
<h2 id="平方根"><a class="header-anchor" href="#平方根"></a>平方根</h2>
<ul>
<li>
<p>语法为<code>\sqrt[n]</code> 未给出n则默认为2</p>
<ul>
<li><code>\sqrt[5]&#123; a &#125;</code></li>
</ul>
<p>$$<br>
\sqrt[5]{ a }<br>
$$</p>
</li>
</ul>
<h2 id="插入水平大括号"><a class="header-anchor" href="#插入水平大括号"></a>插入水平大括号</h2>
<ul>
<li>语法为<code>\overbrace</code> 和<code>\underbrace</code>
<ul>
<li><code>\overbrace&#123;2,3,4,\cdots,100&#125;^&#123;99&#125;</code></li>
</ul>
</li>
</ul>
<p>$$<br>
\overbrace{2,3,4,\cdots,100}^{99}<br>
$$</p>
<h2 id="分式"><a class="header-anchor" href="#分式"></a>分式</h2>
<ul>
<li>语法为<code>\frac&#123;&#125;&#123;&#125; </code>
<ul>
<li><code>\frac&#123;abc&#125;&#123;defg&#125;</code></li>
</ul>
</li>
</ul>
<p>$$<br>
\frac{abc}{defg}<br>
$$</p>
<ul>
<li>连续分式 <code>\cfrac&#123;&#125;&#123;&#125;</code>
<ul>
<li><code>\cfrac&#123;1&#125; &#123; a + \cfrac&#123;1&#125;b&#125;</code></li>
</ul>
</li>
</ul>
<p>$$<br>
\cfrac{1} { a + \cfrac{1}b}<br>
$$</p>
<h2 id="导数"><a class="header-anchor" href="#导数"></a>导数</h2>
<ul>
<li><code>x'</code></li>
</ul>
<p>$$<br>
x'<br>
$$</p>
<h2 id="积分"><a class="header-anchor" href="#积分"></a>积分</h2>
<ul>
<li>语法为<code>\int </code>
<ul>
<li><code>\int_&#123;a&#125;^&#123;b&#125;&#123;f(x)&#125; = x^2</code></li>
</ul>
</li>
</ul>
<p>$$<br>
\int_{a}^{b}{f(x)} = x^2<br>
$$</p>
<h2 id="向量"><a class="header-anchor" href="#向量"></a>向量</h2>
<ul>
<li>单符号可以用<code>\vec</code></li>
<li>多符号可以用<code>\overrightarrow</code> 和<code>\overleftarrow</code>
<ul>
<li><code>\vec a = \overrightarrow&#123;AB&#125; = \overleftarrow&#123;BA&#125;</code></li>
</ul>
</li>
</ul>
<p>$$<br>
\vec a = \overrightarrow{AB} = \overleftarrow{BA}<br>
$$</p>
<h2 id="乘积"><a class="header-anchor" href="#乘积"></a>乘积</h2>
<ul>
<li><code>\prod</code>
<ul>
<li><code>\prod_&#123;i=1&#125;^&#123;n&#125;&#123;(1/i)&#125;</code></li>
</ul>
</li>
</ul>
<p>$$<br>
\prod_{i=1}^{n}{(1/i)}<br>
$$</p>
<h2 id="箭头"><a class="header-anchor" href="#箭头"></a>箭头</h2>
<ul>
<li><code>\larr</code> <code>\rarr</code></li>
</ul>
<p>$$<br>
\larr  \rarr<br>
$$</p>
<h2 id="微积分符号"><a class="header-anchor" href="#微积分符号"></a>微积分符号</h2>
<table>
<thead>
<tr>
<th>latex</th>
<th>显示效果</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\partial</code></td>
<td>$\partial$</td>
</tr>
<tr>
<td><code>\nabla</code></td>
<td>$\nabla$</td>
</tr>
<tr>
<td><code>\infty</code></td>
<td>$\infty$</td>
</tr>
<tr>
<td><code>\int</code></td>
<td>$\int$</td>
</tr>
<tr>
<td><code>\iint</code></td>
<td>$\iint$</td>
</tr>
<tr>
<td>\iiint`</td>
<td>$\iiint$</td>
</tr>
<tr>
<td><code>\oint</code></td>
<td>$\oint$</td>
</tr>
<tr>
<td><code>\triangle</code></td>
<td>$\triangle$</td>
</tr>
</tbody>
</table>
<h2 id="空格"><a class="header-anchor" href="#空格"></a>空格</h2>
<p>Ref: <a href="https://blog.csdn.net/seaskying/article/details/51316607">https://blog.csdn.net/seaskying/article/details/51316607</a></p>
<table>
<thead>
<tr>
<th>描述</th>
<th>latex</th>
<th>显示效果</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>两个quad空格</td>
<td><code>a \qquad b</code></td>
<td>$a \qquad  b$</td>
<td>两个<em>m</em>的宽度</td>
</tr>
<tr>
<td>quad空格</td>
<td><code>a \quad b</code></td>
<td>$a \quad b$</td>
<td>一个<em>m</em>的宽度</td>
</tr>
<tr>
<td>大空格</td>
<td><code>a\ b</code></td>
<td>$a\ b$</td>
<td>1/3<em>m</em>宽度</td>
</tr>
<tr>
<td>中等空格</td>
<td><code>a\; b</code></td>
<td>$a;b$</td>
<td>2/7<em>m</em>宽度</td>
</tr>
<tr>
<td>小空格</td>
<td><code>a\, b</code></td>
<td>$a,b$</td>
<td>1/6 <em>m</em>宽度</td>
</tr>
<tr>
<td>没有空格</td>
<td><code>ab</code></td>
<td>$ab$</td>
<td></td>
</tr>
<tr>
<td>紧贴</td>
<td><code>a\!b</code></td>
<td>$a!b$</td>
<td>缩进1/6<em>m</em>宽度</td>
</tr>
</tbody>
</table>
<ul>
<li>\quad、1em、em、m代表当前字体下接近字符‘M’的宽度。</li>
</ul>
<h2 id="关系符与运算符"><a class="header-anchor" href="#关系符与运算符"></a>关系符与运算符</h2>
<table>
<thead>
<tr>
<th>关系符与运算符</th>
<th>latex</th>
</tr>
</thead>
<tbody>
<tr>
<td>不等号</td>
<td><code>\ne</code></td>
</tr>
<tr>
<td>大于等于号</td>
<td><code>\ge</code></td>
</tr>
<tr>
<td>小于等于号</td>
<td><code>\le</code></td>
</tr>
<tr>
<td>约等号</td>
<td><code>\approx</code></td>
</tr>
<tr>
<td>等价</td>
<td><code>\equiv</code></td>
</tr>
<tr>
<td>乘号</td>
<td><code>\times</code></td>
</tr>
<tr>
<td>除号</td>
<td><code>\div</code></td>
</tr>
<tr>
<td>点乘</td>
<td><code>\cdot</code></td>
</tr>
<tr>
<td>加减号</td>
<td><code>\pm</code></td>
</tr>
<tr>
<td>三角函数</td>
<td><code>\sin(a)  \cos(a)</code></td>
</tr>
<tr>
<td>求和号</td>
<td><code>\sum</code>( 需要加<code>\limits</code> )</td>
</tr>
<tr>
<td>积分号</td>
<td><code>\int</code></td>
</tr>
<tr>
<td>极限</td>
<td><code>\lim</code></td>
</tr>
<tr>
<td>对数log</td>
<td><code>log</code></td>
</tr>
<tr>
<td>对数lg</td>
<td><code>lg</code></td>
</tr>
<tr>
<td>对数ln</td>
<td><code>ln</code></td>
</tr>
<tr>
<td>向下和向上取整</td>
<td><code>\lfloor x \rfloor</code>和<code>\lceil x \rceil</code></td>
</tr>
<tr>
<td>全等于</td>
<td><code>\equiv</code></td>
</tr>
</tbody>
</table>
<ul>
<li>e.g. <code>f(1) = \lim_&#123;x - &gt; 1 &#125;&#123;f(x)&#125; = \sin (log_&#123;2&#125;1)</code></li>
</ul>
<p>$$<br>
f(1) = \lim_{x - &gt; 1 }{f(x)} = \sin (log_{2}1)<br>
$$</p>
<ul>
<li><code>y = a\cdot x^2 + b\cdot x + c </code></li>
</ul>
<p>$$<br>
y = a\cdot x^2 + b\cdot x + c<br>
$$</p>
<h2 id="特殊符号"><a class="header-anchor" href="#特殊符号"></a>特殊符号</h2>
<table>
<thead>
<tr>
<th>特殊符号</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>省略号</td>
<td><code>\dots</code></td>
</tr>
<tr>
<td>右箭头</td>
<td><code>\rightarrow</code> 或 <code>to</code></td>
</tr>
<tr>
<td>左箭头</td>
<td><code>\leftarrow</code> 或 <code>gets</code></td>
</tr>
<tr>
<td>花括号</td>
<td><code>\&#123;a\&#125;</code></td>
</tr>
<tr>
<td>插入文字</td>
<td><code>\text&#123;apple&#125;</code></td>
</tr>
<tr>
<td>空格</td>
<td><code>\quad</code></td>
</tr>
</tbody>
</table>
<ul>
<li>e.g. <code>\&#123;cddc\&#125; = \text&#123;addple &#125;\dots</code></li>
</ul>
<p>$$<br>
{cddc} = \text{addple }\dots<br>
$$</p>
<h2 id="集合运算符"><a class="header-anchor" href="#集合运算符"></a>集合运算符</h2>
<table>
<thead>
<tr>
<th>集合运算符</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>属于</td>
<td><code>\in</code></td>
<td>$\in$</td>
</tr>
<tr>
<td>不属于</td>
<td><code>\not\in</code></td>
<td>$\not\in$</td>
</tr>
<tr>
<td>包含于</td>
<td><code>\subset</code>或<code>\subseteq</code></td>
<td>$\subset$ 或 $\subseteq$</td>
</tr>
<tr>
<td>真包含于</td>
<td><code>\subsetneqq</code></td>
<td>$\subsetneqq$</td>
</tr>
<tr>
<td>不包含于</td>
<td><code>\not\subset</code></td>
<td>$\not\subset$</td>
</tr>
<tr>
<td>交</td>
<td><code>\cap</code></td>
<td>$\cap$</td>
</tr>
<tr>
<td>并</td>
<td><code>\cup</code></td>
<td>$\cup$</td>
</tr>
<tr>
<td>闭包</td>
<td><code>\overline</code></td>
<td>$\overline A$</td>
</tr>
<tr>
<td>差</td>
<td><code>\setminus</code></td>
<td>$A\setminus B$</td>
</tr>
<tr>
<td>实数集合</td>
<td><code>\mathbb&#123;R&#125;</code></td>
<td>$\mathbb{R}$</td>
</tr>
<tr>
<td>空集</td>
<td><code>\emptyset</code></td>
<td>$\emptyset$</td>
</tr>
<tr>
<td>集合中的`</td>
<td>`</td>
<td><code>\mid</code></td>
</tr>
<tr>
<td>包含</td>
<td><code>\supset</code></td>
<td>$\supset$</td>
</tr>
<tr>
<td>真包含</td>
<td><code>\supsetneqq</code></td>
<td>$\supsetneqq$</td>
</tr>
<tr>
<td>不包含</td>
<td><code>\not\supset</code></td>
<td>$\not\supset$</td>
</tr>
<tr>
<td>补集</td>
<td><code>\complement</code></td>
<td>$\complement$</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="逻辑符号"><a class="header-anchor" href="#逻辑符号"></a>逻辑符号</h2>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\forall</code>$ \forall$​​</td>
<td><code>\exists</code>  $\exists$​</td>
<td><code>\therefore</code>  $\therefore$​</td>
<td><code>\implies</code>  $\implies$</td>
</tr>
<tr>
<td></td>
<td><code>\nexists</code> $\nexists$​</td>
<td>`\exist \exist$​</td>
<td><code>\because</code>  $\therefore$​</td>
</tr>
<tr>
<td><code>\land</code> $\land$</td>
<td><code>\lor</code> $\lor$</td>
<td><code>\to</code>  $\to$</td>
<td><code>\gets</code>  $\gets$</td>
</tr>
<tr>
<td><code>\iff</code>  $\iff$</td>
<td><code>\ni</code>  $\ni$</td>
<td><code>\not\ni</code>  $\not\ni$</td>
<td><code>\neg</code>  $\neg$</td>
</tr>
</tbody>
</table>
<h2 id="希腊字母"><a class="header-anchor" href="#希腊字母"></a>希腊字母</h2>
<p><img data-src="https://pic3.zhimg.com/80/v2-49cc7a8cc50fcfd344b14168743a80ca_720w.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
  </entry>
  <entry>
    <title>商业模式战略</title>
    <url>/2021/11/15/%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F%E6%88%98%E7%95%A5/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>商业模式环境</li>
<li>商业模式评估</li>
<li>从商业模式的视角看蓝海战略</li>
</ul>
<span id="more"></span>
<h2 id="商业模式环境"><a class="header-anchor" href="#商业模式环境"></a>商业模式环境</h2>
<p><img data-src="https://box.nju.edu.cn/f/ed9535a232a34901a99a/?dl=1" alt="商业模式战略 商业模式环境"></p>
<h3 id="市场影响力"><a class="header-anchor" href="#市场影响力"></a>市场影响力</h3>
<ul>
<li>
<p>市场问题</p>
<ul>
<li>影响客户环境的关键因素是什么？现在正在发生什么转变？市场在朝什么方向发展？</li>
</ul>
</li>
<li>
<p>市场分类</p>
<ul>
<li>哪块客户细分群体最为重要？最大的增长潜力在哪里？哪个细分市场在萎缩？哪个边缘细分市场值得关注？</li>
</ul>
</li>
<li>
<p>需求和诉求</p>
<ul>
<li>客户需要什么？在客户需求中，哪些没有得到满足，最大的缝隙在哪里？客户最渴望满足的需求是什么？哪些需求在增长？哪些在降低？</li>
</ul>
</li>
<li>
<p>切换成本</p>
<ul>
<li>联系客户和公司及其产品或服务的纽带是什么？阻止客户投靠竞争对手的转移成本是什么？客户找到和购买相似产品或服务的难度大吗？品牌的作用大吗？</li>
</ul>
</li>
<li>
<p>收入影响力</p>
<ul>
<li>让客户真正愿意掏腰包的是什么产品或服务？什么产品或服务能获得最大的收益率？客户能轻而易举地发现和购买更为便宜的产品和服务吗？</li>
</ul>
</li>
</ul>
<h3 id="关键趋势"><a class="header-anchor" href="#关键趋势"></a>关键趋势</h3>
<ul>
<li>
<p>技术趋势</p>
<ul>
<li>在你的行业市场内外，主要的技术趋势是什么？哪种技术代表着重要市场机会或扰乱市场的危险？市场的客户正在采用哪种新显现的技术？</li>
</ul>
</li>
<li>
<p>行业管理趋势</p>
<ul>
<li>哪种监管法规趋势影响你的商业模式？什么视则可能会影响你公司的商业模式？哪种法规和税收制度会影响客户端的需求？</li>
</ul>
</li>
<li>
<p>社会和文化趋势</p>
<ul>
<li>描述关键的社会趋势。在文化和社会价值观中，哪种转变影响着你的商业模式？哪种趋势可能会影响消费者行为？</li>
</ul>
</li>
<li>
<p>社会经济趋势</p>
<ul>
<li>重要的人口趋势是什么？你会如何描述你市场里的收入和财富分配？可支配收入有多高？描绘出你所在的市场的消费形式（如房产、医疗、娱乐等）。城市人口和农村人口的数比例关系是怎样的？</li>
</ul>
</li>
</ul>
<h3 id="行业影响力"><a class="header-anchor" href="#行业影响力"></a>行业影响力</h3>
<ul>
<li>
<p>主流竞争对手</p>
<ul>
<li>谁是我们的竞争对手？在我们所处的行业里，主导游戏规则的公司是哪一个？它们的竞争优势和劣势分别是什么？描绘出它们的主要产品和服务。它们关注重点在哪一个客户细分群体？它们的成本结构怎么样？它们对我们的客户细分群体、收入来源和利润率能产生多大的影响？</li>
</ul>
</li>
<li>
<p>挑战者（相对于传统电商）</p>
<ul>
<li>谁是你所在市场的新进入者？它们有什么不同？它们分别有什么竞争优势和劣势？它们必须克服哪些市场准入壁垒？它们的价值主张是什么？它们专注于哪一块客户细分市场？它们的成本结构怎么样？它们对我们的客户细分群体、收入来源和利润率能产生多大的影响？</li>
</ul>
</li>
<li>
<p>替代产品和服务</p>
<ul>
<li>哪些产品和服务可以替代我们的？和我们的产品和服务的成本相比，它们的怎么样？客户转移到这些替代品有多容易？这些替代品和服务来源于什么样的传统商业模式？（例如高铁相比于飞机，手机相比于相机，Skype相比于长途电话服务公司。）</li>
</ul>
</li>
<li>
<p>供应商与价值链上的其他厂商</p>
<ul>
<li>在你所在行业的价值链上，谁是关键参与者？在多大的程度上，你的商业模式依存于其他的参与者？行业中的边缘参与者有可能崛起吗？哪个参与者的收益最高？</li>
</ul>
</li>
<li>
<p>利益相关者</p>
<ul>
<li>哪些利益相关者可能会影响你的商业模式？利益相关者的影响力有多大？它们是工人、政府还是游说集团？</li>
</ul>
</li>
</ul>
<h3 id="宏观经济影响"><a class="header-anchor" href="#宏观经济影响"></a>宏观经济影响</h3>
<ul>
<li>
<p>全球市场情况</p>
<ul>
<li>经济发展处在蓬勃发展期还是萧条衰败期？描绘出市场的整体气氛。GDP的增速是多少？失业率有多高？</li>
</ul>
</li>
<li>
<p>资本市场</p>
<ul>
<li>资本市场的情况怎么样？你所处的行业融资容易吗？原始资本、风险投资、公开募资、市场资本或是信贷在你的行业一应俱全吗？获取融资的或本高吗？</li>
</ul>
</li>
<li>
<p>大宗商品和其他资源</p>
<ul>
<li>描述对你的业务至关重要的商品和其他资源市场的当前情况（例如油价和人力成本）。获取你的商业模式运作所需要的相关资源容易吗（如吸引核心人才）？它们的成本高吗？价格的变化趋势是怎样的？</li>
</ul>
</li>
<li>
<p>经济基础设施</p>
<ul>
<li>你所在的市场公共基础设施怎么样？你会如何描述交通、贸易、教育质量和接触供应商和客户的状况？个人和公司的所得税有多高？针对企业的公共服务怎样？你会如何评价你的生活质量？</li>
</ul>
</li>
</ul>
<h1 id="商业模式评估"><a class="header-anchor" href="#商业模式评估"></a>商业模式评估</h1>
<h2 id="变化环境下商业模式的演进"><a class="header-anchor" href="#变化环境下商业模式的演进"></a>变化环境下商业模式的演进</h2>
<ul>
<li>市场影响力、行业影响力、关键趋势和宏观经济影响这四个方面的分析为商业模式创新提供了设计空间<br>
使用模型构建来展开设计（竞品！）<br>
通过场景进行对未来的探索（聚焦！）</li>
</ul>
<h2 id="定期评估商业模式"><a class="header-anchor" href="#定期评估商业模式"></a>定期评估商业模式</h2>
<ul>
<li>商业模式环境-由外到内的影响; 评估商业模式-由内到外的分析</li>
<li>两种评估类型：<br>
某商业模式的总体评估，以及相应的未来战略<br>
商业模式优势、劣势、机会和威胁（Strength, Weakness, Opportunity, Threat, <strong>SWOT</strong>）的检查清单（Checklist）</li>
<li><u>对商业模式每个模块做SWOT评估</u>
<ul>
<li>画布的存在帮助聚焦SWOT分析，避免模糊，实现聚焦</li>
<li>按照**价值主张、成本/收入、基础设施（KR+KA+KP）、客户界面（CS+CH+CR）**四类展开评估</li>
</ul>
</li>
</ul>
<h2 id="SWOT"><a class="header-anchor" href="#SWOT"></a>SWOT</h2>
<h3 id="SW"><a class="header-anchor" href="#SW"></a>SW</h3>
<ul>
<li>
<p>价值主张</p>
<ul>
<li>
<p>网络效应：各项价值主张之间相互联系，相互促进<br>
B站：基于兴趣和一致价值观的内容共享与社交，专注与热爱连接内容和社交，规模极大的审核部门与风纪组，小破站与晋元帝</p>
</li>
<li>
<p>产品与服务的强耦合：<br>
以产品为主的，服务能否有效支持产品传递和售后<br>
以服务为主的，产品和环境能否满足服务的需要</p>
</li>
</ul>
</li>
<li>
<p>成本/收入</p>
<ul>
<li>会员充值、年卡、连续包月、餐饮日化快消、信息类产品与服务</li>
<li>订单竞标、奢侈品（“轻奢”利润率反而更高）、套利对冲交易</li>
<li>零售平台或电商平台拖账期： 我们在支出成本之前就有收入进账</li>
<li>三类价格歧视: 我们的定价机制能够抓住客户全部的购买意愿</li>
</ul>
</li>
<li>
<p>基础设施</p>
<ul>
<li>模式独特=&gt;客户忠诚=&gt;技术壁垒： 竞争对手很难复制我们的核心资源</li>
<li>产品周期性、供应链控制: 资源的需求可以预测</li>
<li>核心业务与其它业务，是否达到印钞机模式，动态调整自有与外包的比例： 自有活动和外包活动达到了理想的平衡</li>
</ul>
</li>
<li>
<p>客户界面</p>
<ul>
<li>客户细分
<ul>
<li>客户忠诚度、客户分类（洞察）、持续获客与获客成本</li>
</ul>
</li>
<li>渠道通路
<ul>
<li>效率、效果、连接能力、易于接触、是否整合、规模经济、匹配<br>
网易严选在渠道的了解与评估部分取得了正面的效果（品牌构建与形象宣传），但在传递与售后的部分取得了较为负面的效果（ems-顺丰，产品品控与SPU、SKU的矛盾）</li>
</ul>
</li>
<li>客户关系
<ul>
<li>品牌、匹配、切换成本</li>
<li>网易严选与拼多多的情感诉求-高性价比与便宜好玩<br>
强渠道或服务难以替代</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="O"><a class="header-anchor" href="#O"></a>O</h3>
<ul>
<li><strong>价值主张中的机会（整合、服务化与拓展）</strong>
<ul>
<li>VP：产品与服务能否整合，产品能否服务化？价值主张的补充和外延？满足客户的额外需求或其它可做的工作？（共享单车、安卓与B站漫画、海尔能洗红薯的洗衣机）</li>
</ul>
</li>
<li><strong>成本/收入中的机会（可重复、交叉销售、开源节流）</strong>
<ul>
<li>R$：重复性收入代替一次性收入、寻找额外买单元素与交叉销售的机会、新的收益来源、能否提价（会员自动续费、套餐与B站影视、瑞幸与共享单车的涨价）
<ul>
<li>交叉销售，通过客户关系管理发现现有顾客的多种需求，并通过满足其需求而销售多种相关服务或产品的一种新兴营销方式</li>
</ul>
</li>
<li>C$：成本削减</li>
</ul>
</li>
<li><strong>基础设施中的机会（强化核心、减轻负担、转让闲置）</strong>
<ul>
<li>KR：核心资源的降本、外包、强化、转让（降本增效、技术壁垒、技术转让）</li>
<li>KA：标准化、IT技术带来的整体效率提升（海尔设计团队的微服务化，实体产业的互联网化）</li>
<li>KP：外包与核心业务聚焦、交叉销售与更好的客户连接、价值主张补充（联名款）</li>
</ul>
</li>
<li><strong>客户界面的机会（增长的市场、客户细分、渠道优化与去中间商，客户关系加强与取舍）</strong>
<ul>
<li>CS：找到增长的市场并从中获利、服务新客户群体或更细致的已有客户分类（社交类产品）</li>
<li>CH：渠道的效率、效益、整合，补充性的渠道伙伴，去中间商、渠道客户匹配（品牌）</li>
<li>CR：加强与客户的关系并提升客户跟进的效果（华为19年近20%的盈利增长）、定制化或可自动维护、提升切换成本（全家桶）、是否抛弃没有利润的客户以及原因（发掘潜力或果断抛弃）</li>
</ul>
</li>
</ul>
<h3 id="T"><a class="header-anchor" href="#T"></a>T</h3>
<ul>
<li>
<p><strong>对价值主张的威胁（可替代性）</strong></p>
<ul>
<li>产品是否可替代？</li>
<li>是否会被更有竞争力的价格或更好的价值取代？</li>
</ul>
</li>
<li>
<p><strong>对成本/收入的威胁（利润的威胁、是否单一、缩水、无法预测、无法支撑）</strong></p>
<ul>
<li>受威胁的利润？是否是技术原因导致？（PDD对淘宝、JD的威胁）</li>
<li>是否过度依赖某一项或多项收益来源？（九城代理魔兽世界）</li>
<li>未来可能消失（或缩水）的收益来源？（归属宝洁的吉列减值）</li>
<li>是否有无法预测的成本？（对宏观经济形势的依赖，供应链的稳定性，负面事件的影响与公关）</li>
<li>哪些成本的增加会快过它们所支撑的收入？（瑞幸的无人售卖战略）</li>
</ul>
</li>
<li>
<p><strong>对基础设施的威胁（供应不足、干扰、合作关系波动）</strong></p>
<ul>
<li>KR：某些资源的供应短缺？资源的质量是否有保证？（网易云音乐的版权问题）</li>
<li>KA：哪些关键业务会被打扰（A站关停） ？我们的活动质量能否保证（产品、渠道）？</li>
<li>KP：可能失去的合作伙伴？是否会跟竞争对手合作？是否过分依赖某些合作伙伴？（阿里失手O2O：自废武功+问题频出+养蛊反噬+点评被美团收购）</li>
</ul>
</li>
<li>
<p><strong>客户界面上的威胁（市场竞争、渠道威胁、客户关系恶化）</strong></p>
<ul>
<li>CS：市场是否很快饱和？市场份额被友商威胁？客户转投的可能性？竞争白热化的速度？（千播大战）</li>
<li>CH：竞争对手是否威胁渠道？（恶意举报）是否存在渠道与客户不相关的危险？</li>
<li>CR：我们的客户关系有可能恶化吗（产品质量与特性无法支持品牌构建）？</li>
</ul>
</li>
</ul>
<h2 id="国内各大电商平台的优势与发展动向"><a class="header-anchor" href="#国内各大电商平台的优势与发展动向"></a>国内各大电商平台的优势与发展动向</h2>
<ul>
<li>成熟电商平台包含：网站+物流仓储+供应链+金融服务</li>
<li>阿里：<strong>商业网络第一</strong>，新价值主张<br>
优势：个人信用与金融平台，技术实力，集团内部高度整合，总部杭州<br>
最新动向：阿里本地生活服务</li>
<li>京东：基于<strong>物流</strong>拓宽新的价值主张与客户细分组合<br>
优势：一手打造的物流网络，总部北京<br>
最新动向：京东物流外部收入占40%，营收与利润大涨（净收入2019增长24.9%），“买光湖北货”</li>
<li>苏宁：强化<strong>线下渠道与资源优势</strong>，提升客户关系覆盖度<br>
优势：线下仓储+供应链（半日达），实体产业集群，良好的地方政企关系，总部南京<br>
最新动向：收购万达商城、家乐福，整合线下便利店与Outlets（线下获客成本开始小于线上）</li>
<li>拼多多：基于<strong>社交</strong>拓宽新的价值主张与客户细分组合<br>
优势：用户心理把握，社交引流：货找人，拼购模式引领者，轻资产（物流？），总部上海<br>
最新动向：开团电子类产品（“开车成功就真香”）， Disney + Costco：“多有趣，多实惠”</li>
<li>唯品会：回归服饰<strong>特卖</strong>，拓展线下渠道，拓宽客户关系<br>
优势：专注品牌（少量大牌+大量小品牌）特卖，09-16年吃到了服装产业库存红利，盈利能力强（小品牌佣金30%，连续29个季度盈利），CEO温州人，总部广州<br>
最新动向：布局线下特卖与渠道建设，回归垂直电商（服饰类），剥离自有物流并与顺丰合作</li>
<li>网易严选：维护客户关系（情怀）<br>
特点：ODM引领者，没有中间商赚差价（PDD：？），降低消费决策成本，总部广州<br>
难点：重资产与体量小的悖论，淘宝、京东、小米的围剿，定价困难，没有品牌认同，品控风险，成长慢<br>
最新动向：请罗老师代言旗下转椅；网易剥离电商，聚焦游戏、音乐、教育，得到资本市场认同；考拉20亿美元卖了，严选没人要</li>
</ul>
<h1 id="蓝海战略"><a class="header-anchor" href="#蓝海战略"></a>蓝海战略</h1>
<ul>
<li>通过<strong>价值创新</strong>来开辟全新的没有竞争的市场空间，而不是模仿现有商业模式在当前行业中竞争。<strong>所谓“价值创新”就是“在提升价值的同时降低成本”</strong>。</li>
<li>为了取得价值上的创新，推荐使用“<strong>四项行动架构</strong>”这一分析工具，该工具用四个重要问题来检查一个行业的战略逻辑和主流商业模式，以探寻价值创新、减少成本。</li>
</ul>
<h3 id="四项行动架构"><a class="header-anchor" href="#四项行动架构"></a>四项行动架构</h3>
<p><img data-src="https://box.nju.edu.cn/f/eeb62cbde0764dbf8726/?dl=1" alt="商业模式战略 四项行动架构"></p>
<h3 id="整合商业画布"><a class="header-anchor" href="#整合商业画布"></a>整合商业画布</h3>
<ul>
<li>商业模式右半部关注价值、聚焦客户，左半部分关注成本和基础设施。右侧的改变会对左半部分产生影响</li>
<li>蓝海战略强调在增加价值的同时减少成本，通过删除和消减低价值产品或服务来降低成本，通过提升和创造对成本影响弱的高价值功能或服务来实现</li>
<li>二者的整合使得使用“四项行动架构”分析时能够更好地识别这些行动对商业模式其它模块的影响</li>
</ul>
<h4 id="过程"><a class="header-anchor" href="#过程"></a>过程</h4>
<ul>
<li>对于<strong>基础设施， 价值主张， 客户界面</strong>三个模块， 每个模块采用四项行动架构</li>
</ul>
<!--![蓝海战略 画布整合](../assets/需求与商业模式设计/商业模式战略/蓝海战略 画布整合.png)-->
<p><img data-src="https://box.nju.edu.cn/f/926bc8786c7e4f7b8469/?dl=1" alt="蓝海战略 画布整合"></p>
<ul>
<li>基础设施:
<ul>
<li>哪些活动、资源和合作伙伴关系的成本最高？</li>
<li>如果消减或删除这些成本项，会发生什么？</li>
<li>在删减或消除代价高昂的KR、KA或KP后，如何利用低成本的元素来代替它们创造价值</li>
<li>拼多多：复用社交网络实现小规模的货找人</li>
</ul>
</li>
<li>价值主张:
<ul>
<li>哪些低价值的功能或者服务可以被删除或消减？</li>
<li>可以通过新增或加强哪些功能或服务来产生有价值的客户新体验？</li>
<li>价值主张的改变对成本有何影响？</li>
<li>价值主张的改变将如何改变商业模式客户侧的内容？</li>
<li>阿里：从淘宝到天猫-高品质带来的溢价、供应商加盟费与金融服务费</li>
</ul>
</li>
<li>客户界面:
<ul>
<li>你可以聚焦哪些新的客户群体，哪些客户群体可以消减或删除？</li>
<li>新的客户群体真正希望你帮他们完成哪些工作？</li>
<li>这些客户倾向于何种联络方式，他们期望与你建立何种关系？</li>
<li>服务新的客户群体对成本有何影响？</li>
<li>西瓜视频：下沉市场的长视频、社交化收视体验（B站：？）</li>
</ul>
</li>
</ul>
<h4 id="案例"><a class="header-anchor" href="#案例"></a>案例</h4>
<p>太阳马戏团</p>
<p><img data-src="https://box.nju.edu.cn/f/52e2a0313e3545d68309/?dl=1" alt="案例 太阳马戏团"></p>
]]></content>
      <categories>
        <category>Business</category>
      </categories>
      <tags>
        <tag>需求与商业模式创新</tag>
      </tags>
  </entry>
  <entry>
    <title>减肥食物大测评</title>
    <url>/2022/09/08/%E5%87%8F%E8%82%A5%E9%A3%9F%E7%89%A9%E5%A4%A7%E6%B5%8B%E8%AF%84/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>鸡胸肉</li>
<li>卤蛋</li>
<li>水煮蛋</li>
<li>荞麦面</li>
<li>全麦面包</li>
<li>零食</li>
<li>学校食堂</li>
</ul>
<span id="more"></span>
<h1 id="鸡胸肉"><a class="header-anchor" href="#鸡胸肉"></a>鸡胸肉</h1>
<p>推荐指数: 10 (再难吃还能不吃吗)</p>
<p>减肥必吃食物.</p>
<p>100g鸡胸肉含有20g+的蛋白质, 0脂肪和很低的热量. 其营养上的优越性甚至略微高于牛肉, 但是鸡胸肉真的太难吃了, 前几周还好, 一个月之后吃了就想吐.</p>
<p>所以吃鸡胸肉就不要追求味道了,反正是受罪的.</p>
<h2 id="购买"><a class="header-anchor" href="#购买"></a>购买</h2>
<p>100g价格在4元不到</p>
<ul>
<li>鸡胸肉的口感分为两个极端: 塑料味和肉味. 前者的代表是鲨鱼菲特, 一口咬下去感觉吃的不是肉, 是某种化工产品, 那口感就和手套一样, 气味也很“化学”; 后者的代表是肌肉小王子, 吃起来明显就是一块肉, 柴得要命.
<ul>
<li>最塑料的是鲨鱼菲特, 这家店非常难吃, 且包装漏油, 非常不推荐</li>
<li>稍微好点的是独角兽, 口感偏塑料, 但反而比较好吃, 包装发货啥的都非常OK. 我<strong>最推荐</strong>的也是独角兽</li>
<li>袋鼠先生是偏肉味的, 味道比肌肉小王子好一点, 但这也是因为它加了更多的调料..</li>
<li>肌肉小王子是最肉味的, 缺点也就是肉味, 太柴了, 非常难吃,
<ul>
<li>淘宝上买其实有点贵, 它每次发货都会送纸质的优惠券, 扫一下去微信购买会更便宜, 而且微信店还可以买到便宜的临期食品</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="牛肉"><a class="header-anchor" href="#牛肉"></a>牛肉</h1>
<p>牛肉相比鸡胸肉, 蛋白质含量, 脂肪含量略高, 而价格是后者的三倍. 因此吃牛肉只是因为它的口味...... 在营养方面和鸡胸肉是差不多的, 而就是这点“口味”, 导致了三倍的价格差.</p>
<p>尽管如此, 买点牛肉还是必要的. 因为生活中总有馋心大发, 鸡胸肉无法满足的时候, 此时吃牛肉也比吃外面的炸鸡汉堡强. 价格上, 牛肉再贵, 也和炸鸡五五开吧.</p>
<p>牛肉的口感和鸡胸肉一样, 分为塑料味和肉味. 但是, 牛肉本身就很好吃, 所以做成塑胶味反而是减分项, 降低了美味程度.</p>
<ul>
<li>最塑胶的是独角兽, 独角兽的鸡胸肉很塑胶, 得到了我的好评, 因为它让难吃的鸡胸肉容易下咽. 但是对于美味的牛肉, 做成塑胶就适得其反了.</li>
<li>袋鼠先生和肌肉小王子都差不多, 味道都挺好的, 都是肉味.</li>
<li>鲨鱼菲特没买过.</li>
</ul>
<p>总的来说我推荐袋鼠先生, 因为好吃, 而且袋鼠先生的牛肉配料表非常干净, 只有“牛肉, 盐(, 黑胡椒)”, 没有啥杂七杂八的添加剂.</p>
<h1 id="卤蛋"><a class="header-anchor" href="#卤蛋"></a>卤蛋</h1>
<p>推荐指数: 8( 相当美味 )</p>
<p>相当美味, 虽然当不了主食.</p>
<p>网上买不到水煮蛋, 只能买卤蛋. 肌肉小王子的卤蛋味道非常好, 强烈推荐.</p>
<h1 id="水煮蛋"><a class="header-anchor" href="#水煮蛋"></a>水煮蛋</h1>
<p>推荐指数: 9</p>
<p>食堂里卖水煮蛋, 一块多一个, 又便宜又好吃又健康. 我恨不得一天吃10个. 如果嫌没味道的话还可以带上各种蘸料</p>
<h1 id="荞麦面"><a class="header-anchor" href="#荞麦面"></a>荞麦面</h1>
<p>推荐指数: 0</p>
<p><em>以下评价仅限肌肉小王子的荞麦面, 不过我猜其他店的都差不多.</em></p>
<p><strong>什么垃圾玩意儿</strong>! 淘宝上说的天花乱坠, 说是减肥期间主食, 加上酱汁就能吃了. 实际上这个面的味道巨难吃, 一股石灰味,而且相当容易烂掉, 吃起来像面粉不像面条.</p>
<p>千万不要买它, 就是智商税, 难吃得要命. 宁可饿肚子也不吃</p>
<h1 id="酱汁"><a class="header-anchor" href="#酱汁"></a>酱汁</h1>
<p>推荐指数: 3( 太难吃了 )</p>
<p><em>以下评价仅限肌肉小王子的酱汁, 不过我猜其他店的都差不多.</em></p>
<p>肌肉小王子的蒜蓉酱和鸡胸肉酱, 都是脂肪接近0的“健康酱料”, 用于配合荞麦面吃, 不过它们都非常非常难吃, 有股<strong>诡异的甜味</strong>, 而没有任何鲜味, 别买.</p>
<p>不过嘛, 对于一些没味道的食物, 比如水煮蛋之类, 倒是可以尝试一下结合酱汁, 毕竟开封了无法退货, 正好废物利用.</p>
<h1 id="全麦面包"><a class="header-anchor" href="#全麦面包"></a>全麦面包</h1>
<p>推荐指数: 0</p>
<p>也是个智商税, 难吃, 还贵</p>
<h1 id="零食"><a class="header-anchor" href="#零食"></a>零食</h1>
<h2 id="鸭肉条"><a class="header-anchor" href="#鸭肉条"></a>鸭肉条</h2>
<p>推荐指数: 6</p>
<p><em>以下评价仅限肌肉小王子的鸭肉条</em></p>
<p>平均8元一袋, 一袋就那么一丢丢. 肉非常非常硬, 要嚼半天. 味道倒是还行. 不过从味道也可以判断出来, 它不健康, 就和正常零食一样.</p>
<p>建议别吃, 控制自己的欲望</p>
<h2 id="蛋白棒"><a class="header-anchor" href="#蛋白棒"></a>蛋白棒</h2>
<p>推荐指数: 7</p>
<p>平均4元/根, 很贵.</p>
<p>严格地讲这个也分两种: 乳清蛋白棒和乳清威化蛋白棒. 前者就是奶油棒, 后者是威化饼干棒. 这两个都含有大量脂肪和蛋白质, 属于健身餐, 而不是减肥餐. 对减肥人士极不推荐, 就是个普通的甜的零食, 健康不到哪里去, 价格是虚高的.</p>
<p>不过对于健身人士来讲, 偶尔放纵下吃点甜点也无不可, 这时候蛋白棒倒是好选择. 肌肉小王子的这两种蛋白棒都挺好吃的; 独角兽只有威化的, 而且味道比较传统(豆浆), 我推荐肌肉小王子.</p>
<p>(吃蛋白棒总比喝奶茶强吧)</p>
<h2 id="etc"><a class="header-anchor" href="#etc"></a>etc</h2>
<p>此外还有各种鸡肉肠,牛肉肠, 素肉, 魔芋爽, 肉丸....</p>
<p>所有这些, 都不要买. 一点都不健康, 本质上都是普通食物, 吃了就是碳水.</p>
<h1 id="学校食堂"><a class="header-anchor" href="#学校食堂"></a>学校食堂</h1>
<p>推荐指数: 10</p>
<p>早餐有水煮蛋, 玉米和红薯等等, 实在想放松欲望还可以吃土豆丝卷甚至土豆肉丝卷.  极度推荐.</p>
<p>而且价格非常便宜, 4个鸡蛋一个玉米只要6元. 所以甚至可以早上买一大堆鸡蛋玉米带回去当作口粮.</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
  </entry>
  <entry>
    <title>商业模式画布</title>
    <url>/2021/10/25/%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F%E7%94%BB%E5%B8%83/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>客户细分</li>
<li>价值主张</li>
<li>渠道通路</li>
<li>核心资源</li>
<li>关键业务</li>
<li>重要合作</li>
<li>成本结构</li>
<li>客户关系</li>
<li>收入来源</li>
</ul>
<span id="more"></span>
<!--![画布](..x/assets/需求与商业模式设计/商业模式画布/画布.png)-->
<p><img data-src="https://box.nju.edu.cn/f/30a596126bbb4a7c91f3/?dl=1" alt="画布"></p>
<h1 id="客户细分-Customer-Segments"><a class="header-anchor" href="#客户细分-Customer-Segments"></a>客户细分 Customer Segments</h1>
<h2 id="Def"><a class="header-anchor" href="#Def"></a>Def</h2>
<ul>
<li>一家企业想要获得的和期望服务的不同的目标人群和机构</li>
</ul>
<h2 id="Factor"><a class="header-anchor" href="#Factor"></a>Factor</h2>
<p>细分条件：</p>
<ul>
<li>需求催生新供给、</li>
<li>需要新分销渠道和客户关系类型</li>
<li>产生的利润率不同、</li>
<li>愿意为某方面的特殊改进买单</li>
<li>需要谨慎处理客户的细分与取舍</li>
</ul>
<h1 id="价值主张-Value-Proposition"><a class="header-anchor" href="#价值主张-Value-Proposition"></a>价值主张 Value Proposition</h1>
<h2 id="Def-2"><a class="header-anchor" href="#Def-2"></a>Def</h2>
<ul>
<li>为<strong>某一客户群体</strong>（ 需要细分 ）提供能为其创造价值的产品和服务
<ul>
<li>排他性：解决客户的问题或满足其需求，使其选择一家而放弃另一家</li>
</ul>
</li>
<li>一家公司为特定客户群体提供的利益<strong>集合或组合</strong></li>
</ul>
<h2 id="Factor-2"><a class="header-anchor" href="#Factor-2"></a>Factor</h2>
<p>有益于价值创造的因素：<strong>创新</strong>、定制、设计、etc...</p>
<h2 id="More"><a class="header-anchor" href="#More"></a>More</h2>
<p>初创团队如何设计自己的VP?</p>
<ul>
<li>为了生存，初创团队需以“<strong>轻成本</strong>”的方式运营
<ul>
<li>一般而言，VP以“收益”型为主
<ul>
<li>对于初创团队而言，先实验一下自己的VP能不能挣钱</li>
</ul>
</li>
<li>客户进一步划分与聚焦、获取额外收益、利于创新
<ul>
<li>客户细分有利于提升利润， 聚焦一点也容易创新。 但最后总归要拓宽领域的</li>
</ul>
</li>
</ul>
</li>
<li>团队自身可以多考虑基于<strong>共有平台</strong>构建“简单”与“透明”式 的产品，维持“轻成本”运营
<ul>
<li>信息类产品：知乎问答、微信公号、视频平台、游戏发行平台</li>
<li>实物类产品：各类生产线的复用（自制JK裙、元气森林）</li>
<li>拓展边界：虚拟世界&gt;&gt;现实世界；
<ul>
<li>虚拟产品很容易<strong>拓展边界</strong></li>
</ul>
</li>
<li>构建护城河：现实世界&gt;&gt;虚拟世界
<ul>
<li>实体产品的优势是形成<strong>壁垒</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="渠道通路-CHannels"><a class="header-anchor" href="#渠道通路-CHannels"></a>渠道通路 CHannels</h1>
<h2 id="Def-3"><a class="header-anchor" href="#Def-3"></a>Def</h2>
<ul>
<li>一家企业如何同它的客户群体达成沟通并建立联系，以向对方<strong>传递自身的价值主张</strong></li>
</ul>
<h2 id="Factor-3"><a class="header-anchor" href="#Factor-3"></a>Factor</h2>
<ul>
<li>渠道的五个阶段与运营方式（一个渠道可包含一个或全部五个阶段）
<ol>
<li>知名度</li>
<li>评价</li>
<li>购买</li>
<li>传递</li>
<li>售后</li>
</ol>
</li>
<li>一个组织可选用自有渠道( 成本更高 )、合作方渠道（ 比如微信 ）、或混用，以追求获益与成本的平衡以及最佳的客户体验</li>
<li><strong>自身强渠道</strong>：
<ul>
<li>线下体验店：蓝绿大厂</li>
<li>品牌贴牌与认证授权
<ul>
<li>日本马桶圈与电饭锅： “偷”别人的渠道</li>
<li>米家：贴牌和授权需要设计部门来对接， 确保不同厂商的产品合起来形成一个完整的渠道，不会有违和感</li>
</ul>
</li>
<li>能主动引发流量的互联网平台
<ul>
<li>一般来说都是用别人的平台。</li>
</ul>
</li>
</ul>
</li>
<li><strong>合作方渠道</strong>：各大电商平台（农村电商汇通达），小红书（种草拔草社区），视频推广（恰饭视频）</li>
<li><strong>混用</strong>：移动运营商直营与加盟店，天猫上的苏宁易购官方店（仓储、物 流、售后），网易严选</li>
</ul>
<h2 id="More-2"><a class="header-anchor" href="#More-2"></a>More</h2>
<ul>
<li>渠道通路的重要性
<ul>
<li>商业的本质，人人互联成本为零的最大发力点</li>
<li>与产品设计的关系：
<ul>
<li>渠道对<strong>同类产品竞争</strong>起核心作用</li>
<li>过度重视容易引发反噬（这里是指只重视渠道而不注重设计）</li>
</ul>
</li>
<li>“产品设计运维一体化”：CH承载VP与CS的组合关系
<ul>
<li>一边设计一边运维，很常见</li>
</ul>
</li>
<li>（完全）基于渠道的品牌：南极人、三只松鼠
<ul>
<li>产品都是采购的别家的（ 这个方式做大后其实不靠谱，不过作为初创而言是很好的思路 ）</li>
</ul>
</li>
<li>（免费）公开渠道：微信公号、朋友圈、小程序</li>
</ul>
</li>
</ul>
<h1 id="核心资源-Key-Resources"><a class="header-anchor" href="#核心资源-Key-Resources"></a>核心资源 Key Resources</h1>
<h2 id="Def-4"><a class="header-anchor" href="#Def-4"></a>Def</h2>
<ul>
<li>
<p>保证一个商业模式顺利运行所需的最重要的资产</p>
<ul>
<li>用于：价值主张的创造与提供、开拓市场、维护客户关系并获益</li>
<li><em>可以“拥有”或者“合作”</em>
<ul>
<li>“拥有”意味着额外的管理、折旧和风险，“合作”意味着让出的利润空间与潜在的生存危机</li>
<li><strong>“核心”意味着稀缺与不可替代，需要花费巨大的成本维系</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Factor-4"><a class="header-anchor" href="#Factor-4"></a>Factor</h2>
<ul>
<li>
<p>类型</p>
<ul>
<li>
<p>实物资源 physical：生产设备、房屋、车辆、机器、系统、销售点管理系统、<strong>分销渠道</strong>（腾讯：勿Q）</p>
</li>
<li>
<p>知识性资源 intellectual：品牌（可口可乐）、专利（高通与华为）、知识产权与体系（微软、SAP、安卓/苹果）</p>
</li>
<li>
<p>人力资源 human：普遍存在，对于创新性和知识密集产业最重要（如IT业），出色的营销团队</p>
</li>
<li>
<p>金融资源 financial：</p>
<ul>
<li>内部：花呗、车贷、互联网金融</li>
<li>外部：<strong>风险投资</strong>、资本市场**（国资）**</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="关键业务-Key-Activities"><a class="header-anchor" href="#关键业务-Key-Activities"></a>关键业务 Key Activities</h1>
<h2 id="Def-5"><a class="header-anchor" href="#Def-5"></a>Def</h2>
<ul>
<li>保障其商业模式正常运行所需做的最重要的事情
<ul>
<li>价值主张、获得市场、客户关系与收益</li>
<li><em>与价值主张强相关，价值主张的具象化</em></li>
<li>构建护城河：*商业模式创新 <em>–</em> <em>构建不可替代的关键业务</em> <em>–</em> <em>支撑服务升级</em> <em>–</em> <em>基础设施投资</em> *–<em>底层技术突破</em> <em>–</em> <strong>拥有</strong> <em>强化核心资源（例：阿里云，盒马）</em></li>
</ul>
</li>
</ul>
<h2 id="Factor-5"><a class="header-anchor" href="#Factor-5"></a>Factor</h2>
<ul>
<li>类型
<ul>
<li>生产 production：包含分销网络、渠道等</li>
<li>解决方案 problem solving：知识管理与持续的培训</li>
<li>平台/网络 platform/network：XX网、Visa卡、操作系统、应用商店、游戏平台</li>
</ul>
</li>
</ul>
<h1 id="重要合作-Key-Partnership"><a class="header-anchor" href="#重要合作-Key-Partnership"></a>重要合作 Key Partnership</h1>
<h2 id="Def-6"><a class="header-anchor" href="#Def-6"></a>Def</h2>
<ul>
<li>保证一个商业模式顺利运行所需的供应商和合作伙伴网络
<ul>
<li><strong>非竞争者之间的战略联盟</strong><em>康采恩（不同业务之间的利益共同体）</em>
<ul>
<li>3q大战之后的腾讯联盟（与阿里直营思路显著不同）</li>
</ul>
</li>
<li><strong>竞争者之间的战略合作</strong><em>卡特尔（同产业控制产品产量和价格）</em>
<ul>
<li>红蓝快乐水、微信支付与支付宝、米国两党制</li>
</ul>
</li>
<li><strong>新业务的合资公司</strong><em>托拉斯（多个巨头通过合资公司组成的利益共同体）、</em>
<ul>
<li>大厂“生态” 、微信vs. 苹果、Fortnite vs. App Store + Google Play</li>
</ul>
</li>
<li><strong>稳定供应关系的供应商和采购商</strong><em>辛迪加（同产业垄断上游供应和下游销售）</em>
<ul>
<li>产业园、苹果认证供应商、闭环的互联网影视平台（传统影视产业：制作、发行、院线）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Factor-6"><a class="header-anchor" href="#Factor-6"></a>Factor</h2>
<ul>
<li>合作动机
<ul>
<li>优化与规模效应：降低成本，外包或共享基础设施</li>
<li>特殊资源及活动的获得：高技术产品、销售团队、特许商品与渠道</li>
<li>降低风险和不确定性：某领域内的战略联盟（蓝光、5g），<em>台湾省与韩国的面板联盟</em>京东方的崛起*（<strong>09-10</strong>家电下乡，韩国作为污点证人）*</li>
<li><strong>思考：“千播大战”的结局与幕后</strong>boss**，新闻：雷军与长春一汽洽谈*</li>
</ul>
</li>
</ul>
<h1 id="成本结构-Cost-Structure"><a class="header-anchor" href="#成本结构-Cost-Structure"></a>成本结构 Cost Structure</h1>
<h2 id="Def-7"><a class="header-anchor" href="#Def-7"></a>Def</h2>
<ul>
<li>
<p>运营一个商业模式所发生的全部成本</p>
<ul>
<li>确定核心资源、关键业务和重要合作之后，成本核算将相对容易</li>
<li>也有以低成本结构为核心的商业模式（廉航、红米、Zara）
<ul>
<li>低成本意味着快速迭代。</li>
<li>低成本意味着低价格和低利润，即意味着需要大量消费</li>
<li>反而要求更高，因为控制成本会更难</li>
<li>但是收益可能会更高，因为可以带来流量</li>
</ul>
</li>
</ul>
</li>
<li>
<p>导向</p>
<ul>
<li>成本导向 cost-driven：成本最小化，创造并维持极尽精简的成本结构</li>
<li>价值导向 value-driven：高端的价值主张与高度的个性化服务
<ul>
<li>一单吃半年</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Factor-7"><a class="header-anchor" href="#Factor-7"></a>Factor</h2>
<ul>
<li>固定成本：管理员工工资，租金，生产设备</li>
<li>可变成本：加工工人工资，加（bai）班（ri）费（meng），广告推广费，水电，原材料消耗</li>
<li>规模经济：大宗采购，大规模生产摊薄的固定成本</li>
<li>范围经济：渠道的复用（摊薄部分可变成本）</li>
<li>小米台灯为什么那么便宜？</li>
</ul>
<h1 id="客户关系-Customer-Relationship"><a class="header-anchor" href="#客户关系-Customer-Relationship"></a>客户关系 Customer Relationship</h1>
<h2 id="Def-8"><a class="header-anchor" href="#Def-8"></a>Def</h2>
<ul>
<li>一家企业针对某一个客户群体所建立的客户关系的类型
<ul>
<li>靠人员维护（“专属一对一财富管家”） VS 自动化设备（“24小时自助”）</li>
<li>动机：开发新客户、留住原客户、增加销售量或客单价（携程杀熟、杀苹果用户）
<ul>
<li>免费推广-提升忠诚度（全家桶、归属感、情怀）-提高客单价</li>
<li>新手礼包/老用户激活礼包-品牌宣传与建设/用户等级-老客户专属套餐</li>
<li>客户关系与承载的渠道之间要一致</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Factor-8"><a class="header-anchor" href="#Factor-8"></a>Factor</h2>
<ul>
<li>客户关系类型
<ul>
<li>私人服务 personal assistance：商场导购、柜台服务与电渠、销售员</li>
<li>专属私人服务 dedicated personal assistance：私人银行服务、华为电信设备、健身/培训“私教”</li>
<li>自助服务 self-service：话费流量充值、银行普通业务（ATM与大厅内自助服务）</li>
<li>自动化服务 automated services：各类平台推荐系统、网站导航设计（活动、凑单、无货推荐、红色与橙色的加入购物车、立即购买）</li>
<li>社区 communities：花粉俱乐部、小米之家、小红书、各类网游社区</li>
<li>客户共同创造 co-creation：MIUI，UGC（土豆、B站、抖音），各种评论（电影书籍-豆瓣、旅游住宿-Airbnb、普通商品-“自发安利”与评论区），采纳用户反馈的社区（产品调查问卷、游戏平衡运维）</li>
</ul>
</li>
</ul>
<h1 id="收入来源-Revenue-Streams"><a class="header-anchor" href="#收入来源-Revenue-Streams"></a>收入来源 Revenue Streams</h1>
<h2 id="Def-9"><a class="header-anchor" href="#Def-9"></a>Def</h2>
<ul>
<li>企业从每一个客户群体获得的现金收益（扣除成本的利润）
<ul>
<li>探索用户真正愿意付费的点！</li>
<li>两类收益来源：一次性交易收入、持续收入（进一步提供产品服务或售后支持）</li>
<li>定价机制
<ul>
<li>固定（基于静态变量）：目录价、基于产品特性（“青春版”、“畅享版”）、基于客户群（教育版）、基于数量</li>
<li>浮动（基于动态变量）：谈判/议价、收益管理（库存与发生购买的时间，如生鲜、熟食、酒店、航班等）、实时市场价格、拍卖</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Factor-9"><a class="header-anchor" href="#Factor-9"></a>Factor</h2>
<ul>
<li>收入来源的方式
<ul>
<li>资产销售 asset sale：实物产品所有权转让，消费者拥有处置的全部权利</li>
<li>使用费 usage fee：电信、宾馆、快递、付费网游点卡、公共交通车票</li>
<li>会员费 subscription fee：健身卡、付费网游月卡、公共交通月票、音乐会员</li>
<li>租赁 lending/renting/leasing：共享单车/汽车/充电宝，特定资产在特定时间的使用权转移并获益</li>
<li>许可使用费 licensing：专利授权、版权（图片、音乐、字体）、加盟或特许经营</li>
<li>经纪人佣金 brokerage fees：信用卡（交易手续费）、支付平台（交易与提现手续费）、中介</li>
<li>广告费 advertising：传媒、品牌策划、软件业与服务业；广告费增长乏力，分蛋糕的太多</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Business</category>
      </categories>
      <tags>
        <tag>需求与商业模式创新</tag>
      </tags>
  </entry>
  <entry>
    <title>一码多端方案比较</title>
    <url>/2022/08/28/%E4%B8%80%E7%A0%81%E5%A4%9A%E7%AB%AF%E6%96%B9%E6%A1%88%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Intro</li>
<li>Flutter</li>
<li>Electron</li>
<li>Tauri</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<ul>
<li>本来, 使用跨平台技术就是为了节约开发成本, 不过事实证明, 一种框架用到底, 最好适配问题一大堆, 开发成本反而越来越高. 所以最好的应用开发模式是Hybrid, 即原生+框架.
<ul>
<li>对于需要调用大量底层API, 并且UI不复杂的部分, 建议使用原生.</li>
<li>不需要大量底层API的部分就用框架.</li>
</ul>
</li>
<li>Flutter, RN, Electron都可以进行移动端和桌面端开发
<ul>
<li>Flutter因为生态最差, 桌面端开发就不要想了( 毕竟桌面应用大部分都是生产级的, 逻辑最复杂, 对底层调用最多 ).</li>
<li>RN在桌面端略逊于Electron</li>
<li>Electron在桌面端强于另外二者, 事实上, Electron在桌面端的对手是Tauri</li>
</ul>
</li>
<li>Tauri<strong>只用于桌面端, 目前还没有移动端适配</strong>,但是Tauri的roadmap上明确提出将来会做移动端适配.
<ul>
<li>相比其他三者, Tauri没有大公司撑腰, 所以移动端适配估计很烂.</li>
</ul>
</li>
<li>当然,对于中国互联网, 还存在小程序端. Flutter, RN, Electron的小程序支持都不错.</li>
<li>此外还有人听说过<strong>Uniapp</strong>, 它使用Vue来开发移动端和小程序端, 对标RN. 这玩意儿实在是太烂了, 我都不想骂它. 用它的人好好反省一下, 自己的眼光为什么这么差.</li>
</ul>
<h1 id="Flutter"><a class="header-anchor" href="#Flutter"></a>Flutter</h1>
<p>Flutter CLI很优雅, 但是Flutter生态太烂了.</p>
<h1 id="React-Native"><a class="header-anchor" href="#React-Native"></a>React Native</h1>
<p>生态很好. 总体而言中规中矩, 没啥缺点.</p>
<h1 id="Electron"><a class="header-anchor" href="#Electron"></a>Electron</h1>
<p>内置了Chromium引擎, 所以不同平台看到的都是一样的结果. 无论是移动端, 桌面端, Web端, 都是适配性最好.</p>
<p>且Electron开发就是纯粹的前端开发, JS + HTML + CSS. 学习成本低.</p>
<p>Electron和RN都使用了JS运行时( node ,deno之类... )</p>
<p>缺点是速度很慢, APP体积臃肿.</p>
<h1 id="Tauri"><a class="header-anchor" href="#Tauri"></a>Tauri</h1>
<h2 id="Rendering"><a class="header-anchor" href="#Rendering"></a>Rendering</h2>
<p>Tauri在桌面端对标Electron. Electron内置了Chromium引擎, 而Tauri使用操作系统内置的浏览器引擎:</p>
<ul>
<li>Edge Webview2 (Chromium) on Windows</li>
<li>WebKitGTK on Linux</li>
<li>WebKit on macOS</li>
</ul>
<p>但是, 因为Safari (Based on WebKit)臭名昭著地烂, 所以Tauri在Safari上可能有很多Bug.</p>
<p>总结: Tauri在桌面端的适配性略低于Electron.</p>
<h2 id="Backend"><a class="header-anchor" href="#Backend"></a>Backend</h2>
<p>Tauri的后端使用RUST, 因此<strong>没有runtime</strong>. 程序<strong>直接被编译为二进制代码</strong>, 速度更快. <strong>缺点是需要学RUST</strong>.</p>
<ul>
<li>RN和Electron的后端都是NodeJS.</li>
<li>不过Tauri的roadmap<strong>也在考虑TS/JS运行时的适配</strong>.</li>
<li>Tauri的后端暴露给前端简洁的接口. 但是在必要时刻, 还是得用RUST来写后端API.</li>
</ul>
<h2 id="Frontend"><a class="header-anchor" href="#Frontend"></a>Frontend</h2>
<p>Tauri的前端和Electron一样, 是纯粹的 JS + HTML + CSS开发.</p>
<h2 id="Bundle"><a class="header-anchor" href="#Bundle"></a>Bundle</h2>
<p>Tauri APP由于是二进制码, 安装包大小比Electron小几十倍</p>
<h2 id="Performance"><a class="header-anchor" href="#Performance"></a>Performance</h2>
<p>Tauri软件是二进制码, 因此速度比Electron快一倍. Startup time也大概快一倍.</p>
<h2 id="Security"><a class="header-anchor" href="#Security"></a>Security</h2>
<p>Tauri生成二进制代码( 无runtime ) , RN和Electron都生成JS代码( runtime为node ). 前者逆向起来的难度远高于后者.</p>
<h2 id="Developer-experience"><a class="header-anchor" href="#Developer-experience"></a>Developer experience</h2>
<p>Electron和Tauri的开发体验都很好.</p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
  </entry>
  <entry>
    <title>商业模式类型</title>
    <url>/2021/10/21/%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>商业模式的重构</li>
<li>典型商业模式分类
<ul>
<li>分拆商业模式（Unbundled）</li>
<li>开放式的商业模式（Open）</li>
<li>多边商业模式（Multisided）</li>
<li>免费商业模式（Free）</li>
<li>长尾商业模式（Long-tail）</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="商业模式的重构"><a class="header-anchor" href="#商业模式的重构"></a>商业模式的重构</h1>
<p><strong>从业务转向“人”</strong></p>
<ul>
<li>背景:信息互联技术近四十年的高速发展
<ul>
<li>信息技术服务(大规模用户)的边界成本接近于零:倾向于取得垄断地位,庞大流量所带来的印<br>
钞机式的盈利模式</li>
<li>人与人互联的成本极大地降低
<ul>
<li>实质上改变了人类社会的组织形式(交往、政治、企业)</li>
<li>共青团:B站、党员:学习强国</li>
</ul>
</li>
</ul>
</li>
<li>新技术与社会变革导致商业模式上大量&quot;以旧换新&quot;,企业或组织通过提出的产品或服务主张某种价<br>
值(问题解决),并寻找到愿意为该价值主张的&quot;付费&quot;的客户群体</li>
</ul>
<h1 id="典型商业模式分类"><a class="header-anchor" href="#典型商业模式分类"></a>典型商业模式分类</h1>
<ul>
<li>分拆商业模式（Unbundled）</li>
<li>开放式的商业模式（Open）</li>
<li>多边商业模式（Multisided）</li>
<li>免费商业模式（Free）</li>
<li>长尾商业模式（Long-tail）</li>
</ul>
<h1 id="分拆商业模式"><a class="header-anchor" href="#分拆商业模式"></a>分拆商业模式</h1>
<p>商业版的“关注分离”</p>
<ul>
<li>企业内部的三类规则：<strong>经济、竞争与文化</strong></li>
<li>由此可以区分三种活动：<strong>客户关系管理、新产品开发、基础设施管理</strong>
<ul>
<li>客户关系管理
<ul>
<li>找到和赢得客户并与他们建立关系</li>
</ul>
</li>
<li>新产品开发
<ul>
<li>开发新的、有吸引力的产品和服务</li>
</ul>
</li>
<li>基础设施管理
<ul>
<li>建立并管理可处理大量重复任务的平台</li>
</ul>
</li>
</ul>
</li>
<li>对应三种价值信条：<strong>亲近顾客、产品领先、运营卓越</strong></li>
<li>三类活动驱动因素不同，彼此之间冲突，企业内部消长（难共赢）<br>
解决方案：分拆！各自独立</li>
</ul>
<table>
<thead>
<tr>
<th>** **</th>
<th><strong>新产品开发</strong></th>
<th><strong>客户关系管理</strong></th>
<th><strong>基础设施管理</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>经济规则</strong></td>
<td>早期市场，强调速度与高溢价</td>
<td>获客成本高，提高客单价，复用渠道</td>
<td>高产量平摊高固定成本，扩规模</td>
</tr>
<tr>
<td><strong>竞争规则</strong></td>
<td>能力之争：门槛低，小玩家多</td>
<td>范围之争：少量的大玩家主导市场（7：3：1）</td>
<td>规模之争：已经固化的大玩家市场（8：2）</td>
</tr>
<tr>
<td><strong>文化规则</strong></td>
<td>以员工为核心：呵护创意明星</td>
<td>高度服务导向：客户第一心态</td>
<td>聚焦成本：标准化、可预期、生产效率</td>
</tr>
</tbody>
</table>
<h2 id="案例"><a class="header-anchor" href="#案例"></a>案例</h2>
<h3 id="私人银行-三种商业活动的集合"><a class="header-anchor" href="#私人银行-三种商业活动的集合"></a>私人银行(三种商业活动的集合)</h3>
<ol>
<li>传统意义上，私人银行机构是纵向整合的，因为外包成本高，处于保密义务和业务机密性的考虑，私人银行更倾向于企业内部处理全部事务。</li>
<li>大环境发生变化:保密不是大问题、专业服务提供商出现(业务外包成为可能)
<ol>
<li>有的私人银行选择外包业务，并转向专注于<strong>经营客户关系、提供咨询</strong></li>
<li>有的私人银行选择集合三个因素，但是要避免其互相干扰影响</li>
</ol>
</li>
</ol>
<!--![分拆模式 私人银行](..x/assets/需求与商业模式设计/商业模式类型/分拆模式 私人银行.png)-->
<p><img data-src="https://box.nju.edu.cn/f/371451235e7d4f6a82b1/?dl=1" alt="分拆模式 私人银行"></p>
<h3 id="可口可乐"><a class="header-anchor" href="#可口可乐"></a>可口可乐</h3>
<table>
<thead>
<tr>
<th>方向</th>
<th>简介</th>
</tr>
</thead>
<tbody>
<tr>
<td>新产品(<strong>追求健康化：咖啡、茶、纯净水、运动饮料、无糖</strong>)</td>
<td>茶、运动饮料、纯悦纯净水、灌装Costa咖啡(英国上市，减糖)、纤维+可乐(原产日本)、咖啡可乐(原产巴西)、爽椰派雪碧、无糖芬达<br>适应无糖趋势(元气森林的崛起)</td>
</tr>
<tr>
<td>客户关系(<strong>本地品牌收购、产品运营、广告宣传</strong>)</td>
<td>1. 大量收购各国知名饮料品牌(尼日利亚Chi，收购汇源失败，约500+产品)<br>2. 从diet coke到zero：配方基本不变，摆脱女性专属形象<br>3. 外包装营销：与你的&quot;女神/闺蜜&quot;共享 – 电视剧名台词 – 小瓶、时尚罐与小罐</td>
</tr>
<tr>
<td>基础运营：(<strong>调整灌装线</strong>)</td>
<td>1. 外包灌装 – 收购灌装厂 – 再次外包灌装(国内为太古和中粮)<br>2. 可口可乐如何在二战期间从美国政府处得到足够的糖供给</td>
</tr>
</tbody>
</table>
<h1 id="开放的商业模式"><a class="header-anchor" href="#开放的商业模式"></a>开放的商业模式</h1>
<p>系统性与外部伙伴合作</p>
<ul>
<li><strong>企业的研发流程对外敞开</strong>
<ul>
<li>“由外到内”：将外部的理念、技术或知识产权引入内部</li>
<li>“由内到外”：将内部的知识产权或技术，特别是闲置资产向外出售</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th><strong>封闭创新</strong></th>
<th><strong>开放创新</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>笼络领域内最聪明的人</td>
<td>与公司内外最聪明的人协作</td>
</tr>
<tr>
<td>自己发现需求、开发并完成整个活动，最终获益</td>
<td>引入外部的研发活动以获益；将内部的自主研发活动转出，从而获益</td>
</tr>
<tr>
<td>获胜条件：实践大多数最好的研发工作</td>
<td>尝试从非原创成果中获益</td>
</tr>
<tr>
<td>获胜条件：创造大多数最好的理念</td>
<td>结合来自内部和外部的理念</td>
</tr>
<tr>
<td>管控内部创新流程，防止外泄</td>
<td>出让创新以获益；为获益购买外部知识产权</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>由外到内</p>
<ul>
<li>适用于拥有<strong>强势品牌、强大分销渠道与良好客户关系</strong>的大公司
<ul>
<li>进一步挖掘客户关系的价值</li>
</ul>
</li>
<li>外部组织能提供有价值的<strong>见解、知识、专利、甚至现成的产品</strong></li>
<li>要能有效获取<strong>外部特定</strong>资源，要有对外协作的专门业务</li>
<li>外来意味着成本，但可以缩短上市时间，提升内部开发效率</li>
<li>帮助企业实现跨越式发展（中国高铁）</li>
</ul>
</li>
<li>
<p>由内到外</p>
<ul>
<li>以研发为核心的组织往往产生许多内部无法实用化的知识、技术、和智力资产</li>
<li>将闲置资产变现，增加收入</li>
<li>因战略或运营原因对内无价值的研发成果可能对其它行业意义重大</li>
<li>帮助企业聚焦核心战略，鼓励内部创新
<ul>
<li>军转民，航天科技，高校成果转化，农科扶贫</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="案例-2"><a class="header-anchor" href="#案例-2"></a>案例</h2>
<h3 id="宝洁"><a class="header-anchor" href="#宝洁"></a>宝洁</h3>
<ol>
<li>宝洁挽救公司的举措是建立一套新的创新开放体系:聚焦于内部研发的方式转变为开放式的研发流程，<strong>关键因素就是实施&quot;连接 &amp; 发展&quot;战略，旨在通过外部合作方力量拉动内部的研发活动</strong></li>
<li>核心的三座桥梁:
<ol>
<li>高科技企业家：同宝洁建立了关系的高级科学家，扮演&quot;猎人&quot;</li>
<li>互联网平台:通过内部互联网，宝洁可以和全球专家连接</li>
<li>退休专家:向已退休的专家征询知识。</li>
</ol>
</li>
<li>帮宝适，世界上第一款一次性纸尿布，其防漏涂层技术来自外部</li>
<li>与日本尤妮佳纸尿布常年竞争，在欧美引入其日本市场热销除尘器，年入两亿美元，合作用时18个月</li>
</ol>
<h3 id="格力"><a class="header-anchor" href="#格力"></a>格力</h3>
<ol>
<li>由外到内
<ol>
<li>2014年以前，国内高端中央空调机组主要靠引入并组装丹麦的丹佛斯磁悬浮压缩机</li>
<li>2014年，格力研发四年的&quot;磁悬浮变频离心式制冷压缩机及水冷机组&quot;成功，开始宣传&quot;核心科技&quot;</li>
<li>2015年10月中标CAP1400，2016年3月中标CAP1000，同时为核电站机组与核电站控制区提供制冷服务</li>
</ol>
</li>
<li>由内到外：
<ol>
<li>2019年11月向丹麦知名水泵生产商格兰富提供新型无稀土磁阻电机领域3个系列的专利技术</li>
</ol>
</li>
<li>连接器
<ol>
<li>1997年开始设立格力科技进步奖，2018年总奖金5000万人民币</li>
<li>鼓励内部实现从宏观(核心技术、空调芯片)到微观(生产线环节优化)的研发攻关</li>
<li>与国内24所高校建立&quot;卓越人才伙伴&quot;</li>
</ol>
</li>
</ol>
<h1 id="多边平台商业模式"><a class="header-anchor" href="#多边平台商业模式"></a>多边平台商业模式</h1>
<ul>
<li>多边平台(又称多边市场)将<strong>两个或更多独立但相互依存</strong>的客户群体连接到一起。</li>
<li>价值主张一般集中体现在三方面：
<ol>
<li><strong>吸引用户</strong>：网络效益，平台的价值在于它所吸引的用户数量的增加。</li>
<li><strong>群体配对</strong>：平台通过促进不同群体之间的互动而创造价值，群体无法独立生存。</li>
<li>利用<strong>平台交易</strong>渠道降低交易成本</li>
</ol>
</li>
<li>多个收益流，<strong>补贴正确的客户群是定价决策的关键</strong>，无需关联具体生产过程，&quot;印钞机&quot;</li>
<li>核心资源是<strong>平台</strong>，成本主要来自于平台的维护和开发，三项关键活动：<strong>平台管理、服务实现、平台升级</strong></li>
<li>多边平台会面临一个&quot;先有鸡还是先有蛋&quot;的两难问题
<ol>
<li>解决方案是<strong>向某一个客户群体发放补贴</strong></li>
<li>平台需要使用低廉或免费的价值主张来吸引某一个群体加入平台，需要明确群体加入平台的目的，以及哪一边是需要给予补贴。</li>
<li>单个用户群体的价值本质上取决于平台中<strong>另一群体的用户数量</strong></li>
<li>弄清楚哪一&quot;边&quot;能够更好的吸引其它&quot;边&quot;，从而提供免费服务甚至补贴，信用卡：商户结算交易费；索尼PS：低价游戏机；B站：观众免费，补贴Up主</li>
</ol>
</li>
</ul>
<h1 id="免费商业模式（Free）"><a class="header-anchor" href="#免费商业模式（Free）"></a>免费商业模式（Free）</h1>
<ul>
<li>在其它方面补贴免费产品</li>
<li>至少有一个关键的客户群体可以持续免费地享受服务
<ul>
<li>不付费客户所得到的财务支持来自于另一个客户群体</li>
<li>对价格为0的商品的需求要数倍于定价为1分钱或更高的商品
<ul>
<li>数字产品与服务的复制传播成本接近于0（海量用户下边界成本也趋向于0）</li>
</ul>
</li>
</ul>
</li>
<li>三种可行的免费商业模式（ 共同点：<strong>至少一个</strong>群体将得到免费的商品 ）
<ul>
<li>广告模式：基于<u>多边平台</u>的免费商品</li>
<li>免费增值：免费的基本服务，可选的增值服务</li>
<li>诱饵&amp;陷阱：以免费或很便宜的初始价格吸引客户，并引导其重复购买</li>
</ul>
</li>
</ul>
<h2 id="广告"><a class="header-anchor" href="#广告"></a>广告</h2>
<ul>
<li>基于广告的免费商业模式总结
<ul>
<li>好的产品和服务以及高流量会吸引广告商，进而补贴产品和服务
<ul>
<li>要考虑广告费能否支撑起产品服务质量</li>
<li><strong>吞噬广告费的产品太多，流量红利已见底</strong></li>
</ul>
</li>
<li>成本：平台的开发和维护，以及可能的获客与维系成本</li>
</ul>
</li>
</ul>
<h2 id="免费增值"><a class="header-anchor" href="#免费增值"></a>免费增值</h2>
<ul>
<li>
<p>收入形式：<u>大量用户从免费服务获益，少量用户为增值服务付费</u></p>
<ul>
<li>不到10%的用户会为增值服务付费</li>
<li>两个关键指标：<u>关注免费用户服务成本（低边界成本）与增值用户转化率</u></li>
</ul>
</li>
<li>
<p>免费增值模式总结</p>
<ul>
<li>平台是最重要的资产，产生三部分成本:
<ul>
<li><strong>可观的固定成本</strong></li>
<li><strong>免费账户的低边际成本服务</strong></li>
<li><strong>增值账户成本</strong>
<ul>
<li>比如人工服务</li>
</ul>
</li>
</ul>
</li>
<li>客户关系自动且低成本，免费用户向增值用户转化率是重要指标</li>
<li>收入来源三个重要公式
<ul>
<li>收入 = 用户数量<em>增值用户比重</em>增值服务价格<em>增长率</em>顾客流失率</li>
<li>服务成本 = 免费用户数<em>免费服务成本+增值用户数</em>增值服务成本</li>
<li>运营利润 = 收入 - 服务成本 - 固定成本 - 获客成本</li>
</ul>
</li>
<li>平台发展新趋势
<ul>
<li>需要<strong>高水平</strong>、差异化的产品与服务（为免费增值提供空间）</li>
<li>反面例子：庆余年与腾讯VVIP<br>
已被放弃，是平台低效的体现</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="反转免费模式举例：Cookpad食谱网站"><a class="header-anchor" href="#反转免费模式举例：Cookpad食谱网站"></a>反转免费模式举例：Cookpad食谱网站</h3>
<ul>
<li>免费的缺点是用户粘性低，通过收会员费来提高用户粘性
<ul>
<li>需要优质的服务和体验</li>
</ul>
</li>
<li>年营收67亿日元（2013年），<strong>利润率40%；会员费占一半营业收入，广告占37%（一般为89%-97%）</strong>
<ul>
<li>可以不靠广告，靠会员挣钱</li>
</ul>
</li>
<li>发展思路：<strong>丰富企业服务与媒体功能，推进线下运营与会员转化</strong></li>
</ul>
<h2 id="诱饵-陷阱"><a class="header-anchor" href="#诱饵-陷阱"></a>诱饵&amp;陷阱</h2>
<ul>
<li>
<p>特点是初期以<strong>不贵</strong>的或者<strong>免费</strong>的价格提供有吸引力的商品，且该商品还将进一步地鼓励对<strong>相关产品或服务</strong>的不断消费。</p>
</li>
<li>
<p>免费手机</p>
<ul>
<li>合约机：手机免费，套餐收费</li>
<li>3g神机：中兴N880，V880，U880</li>
</ul>
</li>
<li>
<p>英雄联盟活动门票</p>
<ul>
<li>谋财害命</li>
</ul>
</li>
<li>
<p>知乎</p>
<ul>
<li>诱饵：精英“俱乐部”时期的优质回答
<ul>
<li>封闭邀请制使得答主从“自我实现”角度产生高质量答案，<strong>并沉淀为平台引流的“诱饵”（搜索引擎的高权重、用户的口碑）</strong></li>
<li>缺点：“俱乐部”形式商业价值有限（wiki），不成功的商业化转型导致早期精英流失；<strong>问答制的概括性不利于专业内容持续输出</strong></li>
</ul>
</li>
<li>陷阱：营销“圣地”、贩卖焦虑、对抗、装X情绪、平</li>
</ul>
</li>
<li>
<p>总结</p>
<ul>
<li>产品与后续产品之间要有<strong>紧密连接</strong>，从而使得极小收益的初始购买为后续高收益产品或服务的重复购买创造可能</li>
<li><strong>关注后续产品交付，需要强大品牌支撑</strong></li>
<li>重要成本结构
<ul>
<li>初始产品补贴与后续产品的成本</li>
</ul>
</li>
<li>慢慢融入平台与免费增值
<ul>
<li>新套餐体验+自动续费</li>
<li>各类社交裂变式促销（“盖楼”）</li>
<li>游戏本体+DLC或平衡性无关道具</li>
<li>“又肝又氪”的游戏营销活动</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="长尾商业模式"><a class="header-anchor" href="#长尾商业模式"></a>长尾商业模式</h1>
<p>多品类的产品销售</p>
<ul>
<li>
<p>提供相当多种类的小众产品，每类卖出量相对很少，但汇总的销售收入可以与传统模式销售媲美</p>
<ul>
<li>行业内20%的产品占据绝大多数销量</li>
<li>长尾模式专注于销售剩下80%内尽可能多的品类，并获得可媲美主流产品销售的收入</li>
</ul>
</li>
<li>
<p>出现的原因（首次用于描述传媒领域）</p>
<ul>
<li>生产工具的普及：文字发布、视频录制、生产与设计外包</li>
<li>销售渠道的普及：互联网</li>
<li>连接供需双方的搜寻成本降低：搜索、推荐、用户评级、社区</li>
</ul>
</li>
<li>
<p>特点：</p>
<ol>
<li>提供宽范围非热销品， 与热销品共存</li>
<li>也可能基于用户创造， 并由平台支持</li>
</ol>
</li>
<li>
<p>要求：</p>
<ul>
<li>
<p>需要同时找到小众客户和小众产品提供者</p>
<ul>
<li>拥抱自主音乐人的网易云音乐、steam</li>
</ul>
</li>
<li>
<p>依赖于多边平台去连接小众客户和产品</p>
</li>
<li>
<p>收入来源五花八门：广告、产品销售、订阅费</p>
</li>
</ul>
</li>
</ul>
<p>由于细分市场越来越多、越来越大，长尾模式也能挣到钱</p>
<h2 id="案例-3"><a class="header-anchor" href="#案例-3"></a>案例</h2>
<h3 id="图书出版"><a class="header-anchor" href="#图书出版"></a>图书出版</h3>
<ul>
<li>图书出版的转型
<ul>
<li><strong>生产与渠道的工具化</strong></li>
<li><strong>资产生产与销售转向佣金与平台使用费</strong></li>
<li>宽泛内容、大范围读者 -&gt; 自助出版、小众作家与读者</li>
<li>国内：生产：选题会 -&gt; 出钱包销、渠道：出版商发行 -&gt; 赞助发行 -&gt; 零售</li>
</ul>
</li>
</ul>
<h2 id="长尾模式的流行与原因"><a class="header-anchor" href="#长尾模式的流行与原因"></a>长尾模式的流行与原因</h2>
<ul>
<li>
<p>大量行业都有“长尾”的趋势</p>
<ul>
<li>视听类节目：传统影视公司 - 平台自制剧 - 平台自制综艺 - PUGC（Professional User Generated Content）</li>
<li>娱乐圈：“四大天王” - 流量明显</li>
<li>各类消费品的联名款、众筹、定制
<ul>
<li>游戏里的各类皮肤和不影响游戏平衡的小道具</li>
<li>智能手机基于<u>自选APP</u>实现远超功能机的定制化与个性化（例： 手机主题）</li>
</ul>
</li>
</ul>
</li>
<li>
<p>原因</p>
<ul>
<li>消费端：个人主义流行和社会资源丰富导致的需求释放</li>
<li>生产端：生产、设计与渠道在效率上的不断提升使得产销能力<u>工具化、服务化</u>
<ul>
<li>复用工具和渠道</li>
</ul>
</li>
<li>渠道端：互联网技术不断发展导致的供需双方匹配更加便利</li>
<li>社会端：人类社会中的流行因素与趋势三年一小变、五年一大变</li>
</ul>
</li>
<li>
<p>长尾模式的共性与发展趋势</p>
<ul>
<li>对生产环节（含渠道）的标准化程度要求较高（媒体、影视、游戏、一般日用品、食品、服饰）</li>
<li>（除创意、构思之外）生产设计环节一般仍依赖于大型厂家，渠道依赖互联网（社区也可能是创意、构思的来源）</li>
<li><strong>“长尾之后”：突破因传统生产、设计、营销导致的二八曲线，长尾部分扁平化；形成若干“小众中心”，并分别向“大众中心”转化</strong></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Business</category>
      </categories>
      <tags>
        <tag>需求与商业模式创新</tag>
      </tags>
  </entry>
  <entry>
    <title>商业模式设计</title>
    <url>/2021/11/05/%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>客户洞察</li>
<li>构思</li>
<li>视觉化思考</li>
<li>模型构建</li>
<li>讲故事</li>
<li>场景</li>
</ul>
<span id="more"></span>
<h1 id="客户洞察"><a class="header-anchor" href="#客户洞察"></a>客户洞察</h1>
<blockquote>
<p><strong>客户视角</strong>是商业模式设计的<strong>指导性原则</strong>。客户的观点决定了我们选择的价值主张、渠道、客户关系和收益来源。</p>
</blockquote>
<ul>
<li>
<p>难点</p>
<ul>
<li>第一个挑战在于如何建立<u>对客户的彻底理解</u>，并基于这种理解进行商业模式设计
<ul>
<li>这种理解，并不是简单地问客户需要什么。透彻理解客户（ “问题背后的问题” ）；需要人类学、社会学理论（笼统的人），以及与实地调研（具体的人）结合；</li>
</ul>
</li>
<li>第二个挑战在于尽量避免过于聚焦在现有客户细分群体上，而应该盯着<u>新的和未被满足的客户细分群体</u>。清楚了解企业当前关注哪些客户（的需要），忽略哪些客户（的需要）</li>
</ul>
</li>
<li>
<p>变需要为需求（人为核心）</p>
<ul>
<li>细致观察并接纳目标客户的行为</li>
<li>“笼统的人”与“具体的人”和场景相结合</li>
<li>功能、认知、情感逐渐深入的换位思考以及拓展</li>
<li>将用户引入设计</li>
</ul>
</li>
</ul>
<h2 id="移情图"><a class="header-anchor" href="#移情图"></a>移情图</h2>
<ul>
<li>
<p>构建用户画像的易用工具（“素描”），可导出价值主张、渠道、客户关系、收入来源</p>
</li>
<li>
<p>使用方式：罗列所有客户群体，挑选三个最有希望的，选择一个作为分析对象</p>
</li>
</ul>
<p><img data-src="https://box.nju.edu.cn/f/b3f0c03e5bc94911b5ce/?dl=1" alt="移情图.png"></p>
<h4 id="她看到的是什么？"><a class="header-anchor" href="#她看到的是什么？"></a>她看到的是什么？</h4>
<p>描述客户在她的环境里看到了什么。</p>
<p>环境看起来像什么？谁在她的周围？谁是她的朋友？她每天接触什么类型的产品或服务？她遭遇的问题有哪些？</p>
<h4 id="她听到的是什么？"><a class="header-anchor" href="#她听到的是什么？"></a>她听到的是什么？</h4>
<p>描述客户所处环境是如何影响客户的。</p>
<p>她的朋友说什么？她的配偶说什么？谁能真正影响她？如何影响？哪些媒体渠道能影响她？</p>
<h4 id="她真正的想法和感觉是什么？"><a class="header-anchor" href="#她真正的想法和感觉是什么？"></a>她真正的想法和感觉是什么？</h4>
<p>设法概述你的客户所想的是什么。</p>
<p>对她来讲，什么是最重的？想象一下她的情感，什么能感动她？什么能让她失眠？尝试描述她的梦想和愿望。</p>
<h4 id="她说些什么，又做些什么？"><a class="header-anchor" href="#她说些什么，又做些什么？"></a>她说些什么，又做些什么？</h4>
<p>想象这位客户可能会说什么或者在公开场合可能的行为。</p>
<p>她的态度是什么？她会给别人讲什么？要特别留意客户所说的和她真正感受之间的潜在冲突。</p>
<h4 id="这个客户的痛苦是什么？"><a class="header-anchor" href="#这个客户的痛苦是什么？"></a>这个客户的痛苦是什么？</h4>
<p>她最大的挫折是什么？在她和她想要的事物或需要达到的目标之间有什么障碍？她会害怕承担哪些风险？</p>
<h4 id="这个客户想得到什么？"><a class="header-anchor" href="#这个客户想得到什么？"></a>这个客户想得到什么？</h4>
<p>她真正要想和希望达到的是什么？她如何衡量成功？猜想一些她可能用来实现其目标的策略。</p>
<h3 id="案例"><a class="header-anchor" href="#案例"></a>案例</h3>
<p><img data-src="https://box.nju.edu.cn/f/a167fb2414534895bf03/?dl=1" alt="移情图实例 在线office客户"></p>
<h1 id="构思新的商业模式"><a class="header-anchor" href="#构思新的商业模式"></a>构思新的商业模式</h1>
<ul>
<li>
<p>构思的两个步骤：生成大量创意-&gt;对创意进行整合并挑选</p>
<ul>
<li>生成阶段要重视数量；可行的创意可以是颠覆性的，也可以是领域的扩展</li>
</ul>
</li>
<li>
<p>提出新创意的两个出发点</p>
<ul>
<li><strong>从画布中寻找创新的焦点</strong></li>
<li><strong>不断提出“如果…会怎样”的问题</strong></li>
</ul>
</li>
</ul>
<h2 id="商业模式创新的焦点"><a class="header-anchor" href="#商业模式创新的焦点"></a>商业模式创新的焦点</h2>
<ul>
<li>
<p><strong>资源驱动</strong>：创新来源于组织现有的基础设施或合作伙伴资源</p>
<ul>
<li>云计算服务、高传输低时延的5g网络</li>
</ul>
</li>
<li>
<p><strong>供给驱动</strong>：创造全新的价值主张，并影响到其它模块</p>
<ul>
<li>水泥输送从48小时减为4小时</li>
<li>云端的全托管机器学习与自动调优、云游戏</li>
</ul>
</li>
<li>
<p><strong>客户驱动</strong>：基于客户需求、可获得性或便利性的提升，并影响其他模块</p>
<ul>
<li>23andMe的个人DNA测试服务（从医疗与研究领域转来）</li>
<li>付费自习室：价值主张-（成年人）沉浸式学习空间；收入来源：5-20元/小时租赁</li>
</ul>
</li>
<li>
<p><strong>财务驱动</strong>：由新收益来源、定价机制或者被缩减的成本驱动的创新</p>
<ul>
<li>施乐复印机从卖设备转向复印机出租（月费95美元，含2000份复印，超出5美分每张）</li>
<li>免费经济：360免费杀毒，IBM服务器从软件+硬件转型为开源+咨询+硬件</li>
</ul>
</li>
<li>
<p><strong>多点驱动</strong>：多焦点驱动的创新，并对其它模块产生深远影响</p>
<ul>
<li>“卖设备”转为“卖服务”：财务、供给、客户、资源</li>
<li>B站：与共青团及官媒的合作、内容从二次元到多圈融合、从内容转向社交（陪伴）、高粘性用户的游戏运营与内容驱动直播</li>
</ul>
</li>
</ul>
<h2 id="构思的流程与团队建设"><a class="header-anchor" href="#构思的流程与团队建设"></a>构思的流程与团队建设</h2>
<h3 id="团队组建"><a class="header-anchor" href="#团队组建"></a>团队组建</h3>
<ul>
<li>除了“创意天才”，更需要多样化创新团队</li>
<li>成员多样化：业务单元/领域不同、年龄/资历水平不同、文化背景不同、经验互补（例：美团成长期重要人物 – 原阿里“中供铁军”骨干干嘉伟）</li>
<li>要引导积极倾听，并考虑在关键会议上引入一个中立的引导员或主持人</li>
</ul>
<h3 id="钻研"><a class="header-anchor" href="#钻研"></a>钻研</h3>
<ul>
<li>创新所需要的知识：总体研究、客户与潜在客户、新技术调研、现有商业模式评估等</li>
</ul>
<h3 id="开拓"><a class="header-anchor" href="#开拓"></a>开拓</h3>
<ul>
<li>从九大模块任意一点出发作为创新起点；数量是关键；重在创意，避免过早评论价值</li>
</ul>
<h3 id="甄选标准"><a class="header-anchor" href="#甄选标准"></a>甄选标准</h3>
<ul>
<li>在业务背景下包含：预期实施时间、潜在收入、可能的客户阻力、对竞争优势的影响</li>
</ul>
<h3 id="构建原型（模型）"><a class="header-anchor" href="#构建原型（模型）"></a>构建原型（模型）</h3>
<ul>
<li>确立标准后从创意中整理一个最优短名单，由此构建3-5个创新的商业模式，再利用画布进行勾勒和讨论</li>
</ul>
<h2 id="构思补充：头脑风暴"><a class="header-anchor" href="#构思补充：头脑风暴"></a>构思补充：头脑风暴</h2>
<ul>
<li>
<p>保持聚焦</p>
<ul>
<li>精确表达当前问题、始终与客户需求有关、不要跑题太远、将讨论拉回到开始问题</li>
</ul>
</li>
<li>
<p>执行规则</p>
<ul>
<li>坚决执行开始时的规则：“不过早下结论”、“每次一人讲“、”追求数量”、“可视化”、“疯狂创意”</li>
</ul>
</li>
<li>
<p>视觉化思考</p>
<ul>
<li>将创意写或者画在每个人都能看到的地方：便利贴+黑板/墙</li>
</ul>
</li>
<li>
<p>准备</p>
<ul>
<li>为一次头脑风暴所准备的钻研：技术研讨、实地考察、客户讨论等各种形式</li>
</ul>
</li>
</ul>
<h1 id="视觉化思考"><a class="header-anchor" href="#视觉化思考"></a>视觉化思考</h1>
<ul>
<li>
<p><strong>抽象的东西具体化、复杂的概念简单化</strong></p>
</li>
<li>
<p>视觉化思考可以帮助我们看清楚一个模式的全貌。一个模式就是一个系统，只有看到全貌才能促进我们对模式的创新。</p>
</li>
<li>
<p>视觉化思考能够把抽象变为具体，并能有效地阐明各个元素之间的逻辑关系，简化了事物的复杂性，进而大大地改善了讨论的质量。</p>
</li>
<li>
<p>实现：便利贴+绘画</p>
</li>
<li>
<p>辅助实现视觉化思考的流程：<strong>理解、对话、探索、沟通</strong></p>
</li>
</ul>
<h2 id="实现"><a class="header-anchor" href="#实现"></a>实现</h2>
<ul>
<li>
<p>便利贴+绘画</p>
</li>
<li>
<p>便利贴的重要性：随意的添加、删除、移动（在画布上的位置）</p>
<ul>
<li>三个指导方针：粗的马克笔+只写一项元素+只用少量文字抓住关键点</li>
<li>便利贴的绘制、添加、删除和移动能够有效组织人们参与讨论，反映了商业模式的动态变化过程，与结果同样重要</li>
<li>CRC卡片（正面对象状态+行为与协作者，背面简短描述）、Story Card（正面故事描述，背面故事实现的理由）</li>
</ul>
</li>
<li>
<p>绘画的强大表现力：人对图像的反应要比文字强烈的多</p>
<ul>
<li>最简陋的素描也能让事物变得具体和易于理解：如情绪、比例等</li>
<li>帮助向别人解释和沟通你的商业模式，容易激发起建设性的讨论与创意</li>
<li>可用于勾勒一个典型客户与他所处的环境，也可用于勾勒出客户群体的需求和任务</li>
</ul>
</li>
</ul>
<h2 id="作用"><a class="header-anchor" href="#作用"></a>作用</h2>
<ul>
<li>
<p><strong>理解商业模式的本质</strong></p>
<ul>
<li>视觉化的语言：画布是一张概念图，其功能类似于具有语法规则的视觉化语言，提供了视觉和文字的指引，帮助画出模式中所需的所有信息</li>
<li>抓住全貌：画布的草图能够为观众提供足够的信息理解全貌，而不被过多的细节影响理解</li>
<li>看到关键：一定要理解元素/模块之间的关联关系</li>
</ul>
</li>
<li>
<p><strong>提升对话效率</strong></p>
<ul>
<li>共同的参照点：将头脑中不言而喻的主观假设具象化，并将大量内容固化成为可回溯的参照点（人类的短时记忆只能保留有限数量的想法）</li>
<li>统一的语言：利用图形和画布帮助不同参与者聚焦，特别是来自不同领域的人</li>
<li>一致的理解：帮助不同部门的人将其深入理解的部分表达出来，再一起形成整体的洞察与一致的理解</li>
</ul>
</li>
<li>
<p>探索创意</p>
<ul>
<li>激发创意：模糊的想法-随着灵感发挥-有机地整合成一幅图画</li>
<li>演习：视觉化的模型帮助思考部分元素的改变引发的系统性冲击</li>
</ul>
</li>
<li>
<p><strong>提升沟通</strong></p>
<ul>
<li>统一公司内部的理解：用图画在组织内形成共识，朝一个战略方向前进</li>
<li>内部推销：好的图画使组织的现状、需要做的事情、怎么做、未来会怎样等方面变得易于沟通，从而赢得组织内部的理解和支撑</li>
<li>外部推销：提升向投资人或潜在合作伙伴推销成功的概率</li>
</ul>
</li>
</ul>
<h2 id="讲述视觉化的故事"><a class="header-anchor" href="#讲述视觉化的故事"></a>讲述视觉化的故事</h2>
<ul>
<li>
<p>解释商业模式的一种有力的方式：利用画布草图逐一介绍一个完整的视觉化故事</p>
</li>
<li>
<p>如何讲述</p>
<ul>
<li>绘制商业模式
<ul>
<li>用简单的文字填充各个商业模式模块</li>
<li>一个模块只用一张便利贴</li>
</ul>
</li>
<li>用图形描绘每个商业模式元素
<ul>
<li>每次取下一张便利贴，再用图形去取代文字想表达的内容</li>
<li>图形保持简单</li>
</ul>
</li>
<li>设计故事主线
<ul>
<li>决定讲故事的时候先贴哪张便利贴</li>
<li>可以尝试不同的主线与起点，只要能支撑故事</li>
</ul>
</li>
<li>讲述故事
<ul>
<li>根据便利贴的顺序与贴图的内容逐一讲述你的商业模式</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="模型构建"><a class="header-anchor" href="#模型构建"></a>模型构建</h1>
<ul>
<li>与视觉化思考一样，模型构建可以使抽象的概念具体化，帮助探索新的创意
<ul>
<li>在产品、架构和交互设计上得到广泛应用，但在商业管理领域不太常用</li>
</ul>
</li>
<li>商业模式原型是用于讨论、调查或者验证概念目标的工具</li>
<li>模型构建有助于实际商业模式的探索
<ul>
<li>建模-（疑问点明确化、视觉化）-添加、删除或修改元素-观察结果</li>
<li>在不同规模（抽象层面）的模型上进行互动</li>
<li>有助于获得突破性的商业模式，同时能够有效控制细节</li>
</ul>
</li>
</ul>
<h2 id="流程"><a class="header-anchor" href="#流程"></a>流程</h2>
<p><img data-src="https://box.nju.edu.cn/f/141c8ba5a8f74fad8d56/?dl=1" alt="模型构建的流程"></p>
<h2 id="不同程度的模型"><a class="header-anchor" href="#不同程度的模型"></a>不同程度的模型</h2>
<ul>
<li>
<p>随手素描（napkin sketch）：勾勒和推销一个粗略的主意</p>
<ul>
<li>勾勒想法，含价值主张和主要收益来源</li>
</ul>
</li>
<li>
<p>精心描绘的画布（elaborated canvas）：探索实现该创意所需的因素</p>
<ul>
<li>完整画布，商业逻辑思考，市场潜力预估、理解模块之间联系、“事实查证”</li>
</ul>
</li>
<li>
<p>商业案例（business case）：检查该创意的可存活度</p>
<ul>
<li>全面画布，关键输入、核算成本与收入、估算利润潜力、模拟财务场景</li>
</ul>
</li>
<li>
<p>实地验证（field-test）：调查客户的可接受度和可行性</p>
<ul>
<li>准备合情合理的商业案例，站在客户角度进行实地验证，验证价值主张、渠道、定价机制等实际市场中的元素素</li>
</ul>
</li>
</ul>
<h1 id="讲故事"><a class="header-anchor" href="#讲故事"></a>讲故事</h1>
<ul>
<li>
<p>故事是一个理想的热身工具，为深度讨论商业模式与其内在逻辑做好准备</p>
<ul>
<li>将故事与画布结合，利用叙事性克服听众对不熟悉模式的抵触，放下对陌生事物的怀疑</li>
</ul>
</li>
<li>
<p>为什么要讲故事</p>
<ul>
<li>介绍新想法：尝试融入组织战略</li>
<li>向投资人推销：争取外部资源（是什么，为谁服务，如何获得收益）</li>
<li>吸引员工（成员）：抓住组员的注意力和好奇心，为下一步探讨准备</li>
<li>让未来触手可及：激发创意、辩证变革</li>
</ul>
</li>
</ul>
<h2 id="故事的不同视角（两个）"><a class="header-anchor" href="#故事的不同视角（两个）"></a>故事的不同视角（两个）</h2>
<ul>
<li>
<p>以员工为视角（即公司视角）：</p>
<ol>
<li>观察到的新商业模式所解决的客户问题</li>
<li>新商业模式如何比旧模式更好的利用资源、业务和伙伴关系（降本增效、开源节流）</li>
<li>员工承载了组织内部工作与商业模式，以及转向新模式的原因</li>
</ol>
</li>
<li>
<p>以客户为视角：</p>
<ol>
<li>客户面临的挑战与必须完成的工作，以及组织如何为其创造价值</li>
<li>描述她得到的东西、这些东西如何融入她的生活、以及她愿意为哪些东西付费</li>
<li>可以添加一些戏剧性和情感因素，描述你的组织如何让她的生活更简单，并尝试加入组织如何提供帮助，并需要哪些资源和活动</li>
<li>故事需要真实可信</li>
</ol>
</li>
</ul>
<h1 id="场景构建"><a class="header-anchor" href="#场景构建"></a>场景构建</h1>
<ul>
<li>搭建一个物理环境来给用户带来一个独立体验。</li>
<li>将模型构建中明确的方向具体化,从而给出有见地的设计</li>
<li>场景可以让抽象的事物变得具体。</li>
</ul>
<h3 id="类型"><a class="header-anchor" href="#类型"></a>类型</h3>
<h4 id="基于客户的场景"><a class="header-anchor" href="#基于客户的场景"></a>基于客户的场景</h4>
<p>案例</p>
<p><img data-src="https://box.nju.edu.cn/f/c50e1be21c0641579651/?dl=1" alt="场景构建 基于客户的场景 案例"></p>
<ul>
<li>产品或服务将被如何使用</li>
<li>什么样的客户会用到它们</li>
<li>客户的担忧、诉求和目标</li>
<li>以上都是基于<strong>客户洞察</strong>而产生的。</li>
<li>结合<strong>客户洞察</strong>描绘出独特、具体的图景</li>
</ul>
<h4 id="基于未来的场景"><a class="header-anchor" href="#基于未来的场景"></a>基于未来的场景</h4>
<p>案例<img data-src="https://box.nju.edu.cn/f/699a237a5557454fa60f/?dl=1" alt="场景构建 基于未来的场景 案例"></p>
<ul>
<li>描述一个<strong>商业模式</strong>未来可能的竞争环境</li>
</ul>
<ol start="2">
<li>为了想象未来可能的具体细节,战略研究领域将这种联系归为&quot;场景规划&quot;的课题</li>
</ol>
<ul>
<li>流程：
<ol>
<li>根据两个或多个主要标准开发一系列的未来场景。</li>
<li>为每种场景描述一个故事,其中列举出该场景的主要元素。</li>
<li>商业研讨会开始前,各种场景必须被开发出来,帮助小组成员最大限度地理解未来的所有可能。</li>
<li>研讨会:为每种场景开发一个或多个合适的商业模式。</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Business</category>
      </categories>
      <tags>
        <tag>需求与商业模式创新</tag>
      </tags>
  </entry>
  <entry>
    <title>国史大纲</title>
    <url>/2021/10/20/%E5%9B%BD%E5%8F%B2%E5%A4%A7%E7%BA%B2/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>中国文明的起源</li>
</ul>
<p>ref: <em>国史大纲</em></p>
<p>to be continued</p>
 <span id="more"></span>
<h1 id="中国文明的起源"><a class="header-anchor" href="#中国文明的起源"></a>中国文明的起源</h1>
<p>ref：《中国文明的起源》-- 夏鼐</p>
<ul>
<li>六大古文明：埃及、两河流域、 印度、墨西哥、秘鲁、中国
<ul>
<li>埃及、两河流域、 印度相互影响</li>
<li>墨西哥、秘鲁和旧大陆无关，是独立发展的文明</li>
<li>中国文明主要是自身独立发展起来，但不排除受到一些外来影响</li>
</ul>
</li>
</ul>
<h2 id="文明起源的早晚"><a class="header-anchor" href="#文明起源的早晚"></a>文明起源的早晚</h2>
<ul>
<li>文明：
<ul>
<li>《易经》: ”天下文明“</li>
<li>孔颖达：”有文章而光明也“</li>
<li>现代：社会已从氏族制度解体而进入有了国家组织的阶级社会的阶段。这种这回中，除了政治组织上的国家外，已有城市作为政治（宫殿和宫署）、经济（手工业和商业）、文化（包括宗教）活动的中心</li>
</ul>
</li>
<li>文明的最重要标志：文字
<ul>
<li>欧洲的缘故文化只有爱琴-米诺文化，有文字，可称为”文明“。 此外，欧洲的各种史前文化，虽然有的进入青铜时代，甚至铁器时代，都不能称为”文明“</li>
</ul>
</li>
<li>文明追溯：
<ol>
<li>偃师二里头文化</li>
<li>郑州二里岗文化</li>
</ol>
</li>
</ul>
<h2 id="小屯的殷墟文化"><a class="header-anchor" href="#小屯的殷墟文化"></a>小屯的殷墟文化</h2>
<ul>
<li>商朝后期的首都，有都市规模</li>
<li>已经是高度发达的文明，因此不能视为中国文明的诞生（不可能一开始就如此成熟），有人因此认为中国文明是西来的</li>
<li>有都市、文字和青铜器</li>
<li>可向上追溯，第一步是郑州二里岗文化</li>
</ul>
<h2 id="商殷时代的文字制度"><a class="header-anchor" href="#商殷时代的文字制度"></a>商殷时代的文字制度</h2>
<ul>
<li>商代使用”六书“以记录语言
<ul>
<li>六书:<strong>象形、指事、会意、形声、转注、假借</strong>， 实际指象形、象意、象声
<ul>
<li>象意：用两个或更多的象形字合为一字（人言为信），或用几个不成字的点划表示意思（上下为事）</li>
<li>象声：用同音的象形字以代表无法象形或象意的抽象概念或”虚字“（假借);；或于同音的象形字之外，又加一表示含义的象形字（部首），合成一字（形声）。这样使用不同部首，可以区分同音而异意的字</li>
</ul>
</li>
</ul>
</li>
<li>甲骨文能记录史事，表明小屯文化已进入历史时期，不仅只是有了文字而已</li>
</ul>
<h2 id="已经发达的青铜器铸造技术"><a class="header-anchor" href="#已经发达的青铜器铸造技术"></a>已经发达的青铜器铸造技术</h2>
<ul>
<li>商代青铜器冶炼技术突出
<ul>
<li>使用复合范，而西方各文明使用失蜡法</li>
</ul>
</li>
<li>冶铸青铜需要一批熟练掌握该技术的熟练工匠，一定的贸易活动和保持交通路线的畅通，这样才能解决原料和产品的运输问题。这又需要社会组织和政治组织上有一定的效率。</li>
</ul>
<h2 id="殷墟文化独有的特点"><a class="header-anchor" href="#殷墟文化独有的特点"></a>殷墟文化独有的特点</h2>
<ul>
<li>玉石雕刻</li>
<li>使用架马的车子</li>
<li>陶业发展，灰陶占绝对优势</li>
</ul>
<h2 id="郑州二里岗文化"><a class="header-anchor" href="#郑州二里岗文化"></a>郑州二里岗文化</h2>
<ul>
<li>早于小屯殷墟文化，属于商文明</li>
</ul>
<h2 id="偃师二里头文化"><a class="header-anchor" href="#偃师二里头文化"></a>偃师二里头文化</h2>
<ul>
<li>至少在晚期，已达到了文明的阶段</li>
<li>与较晚的文化比较，是直接与郑州二里岗文化，间接与小屯殷墟文化有承继关系</li>
<li>偃师二里头文化的晚期相当与夏末商初，但没有确切证据将它与传说中的夏联系起来</li>
</ul>
<h2 id="文明的起源和新石器文化"><a class="header-anchor" href="#文明的起源和新石器文化"></a>文明的起源和新石器文化</h2>
<ul>
<li>也有人认为文明的标准是新石器时代
<ul>
<li>”新石器革命“： 指人类发明农业和畜牧业而控制了食物的生产这一过程</li>
</ul>
</li>
<li>中国的新石器时代遗址很多。
<ul>
<li>其中的半坡遗址，是仰韶文化早期的代表</li>
<li>长江流域发现了河姆渡文化。 是除了良渚文化外的又一个中国早期文化中心</li>
<li>庙底沟二期文化的发现，证实了仰韶到河南龙山文化的过渡期的存在</li>
<li>龙山文化以光亮的黑陶著名，大汶口以另一种风格的彩陶著名。大汶口文化与仰韶文化相对</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>History</category>
      </categories>
      <tags>
        <tag>Chinese History</tag>
      </tags>
  </entry>
  <entry>
    <title>商业模式设计流程</title>
    <url>/2021/12/29/%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>设计目标</li>
<li>五个步骤</li>
</ul>
<span id="more"></span>
<h2 id="设计目标"><a class="header-anchor" href="#设计目标"></a>设计目标</h2>
<h3 id="商业模式设计与创新"><a class="header-anchor" href="#商业模式设计与创新"></a>商业模式设计与创新</h3>
<ul>
<li>满足市场：满足尚未被响应的、被忽视的市场需求；</li>
<li>投放市场：把新的技术、产品或服务推向市场，或利用现有的知识产权；</li>
<li>改善市场：通过一个更好的商业模式来改进、颠覆或变革现有的市场；</li>
<li>创造市场：创造一种全新的市场，提供一种全新的业务。</li>
</ul>
<h4 id="挑战"><a class="header-anchor" href="#挑战"></a>挑战</h4>
<ul>
<li>
<p>找到正确的模式</p>
</li>
<li>
<p>全面启动前展开验证</p>
</li>
<li>
<p>诱导市场接受新模式</p>
</li>
<li>
<p>根据市场反馈不断调整</p>
</li>
<li>
<p>管理不确定因素</p>
</li>
</ul>
<h3 id="成熟组织特有的因素"><a class="header-anchor" href="#成熟组织特有的因素"></a>成熟组织特有的因素</h3>
<ul>
<li>反应性：现行模式遇到了危机，如濒临破产的局面等；</li>
<li>适应性：为了调整、改善和稳固现行的模式，以适应不断变化的环境；</li>
<li>扩张性：为了把新的技术、产品或服务推向市场；</li>
<li>积极性/探索性：为了探索和测试未来的可能的全新模式，为未来做准备。</li>
</ul>
<h4 id="挑战-2"><a class="header-anchor" href="#挑战-2"></a>挑战</h4>
<ul>
<li>为新模式培育市场</li>
<li>磨合新旧两种模式</li>
<li>管理好既得利益</li>
<li>着眼于长远</li>
</ul>
<h2 id="五个步骤"><a class="header-anchor" href="#五个步骤"></a>五个步骤</h2>
<h3 id="概述"><a class="header-anchor" href="#概述"></a>概述</h3>
<!--![商业模式设计流程 五个步骤](../assets/需求与商业模式设计/商业模式设计流程 五个步骤.png)-->
<p><img data-src="https://box.nju.edu.cn/f/e0d75426e2cb41ccac25/?dl=1" alt="商业模式设计流程 五个步骤"></p>
<h3 id="注意事项"><a class="header-anchor" href="#注意事项"></a>注意事项</h3>
<ul>
<li>
<p>动员</p>
<ul>
<li>项目合法性、管理既得利益、跨职能团队、引导决策者</li>
</ul>
</li>
<li>
<p>理解</p>
<ul>
<li>绘制并评估当前商业模式、跳出现状看问题、不要局限于当前的客户群体、展示进展</li>
</ul>
</li>
<li>
<p>设计</p>
<ul>
<li>避免对大胆想法的遏制、参与式设计、思考新旧模式之间的关系、避免聚焦短期利益</li>
</ul>
</li>
<li>
<p>实施</p>
<ul>
<li>主动管理“路障”、项目赞助人、新旧商业模式之间的关系、内部沟通活动</li>
</ul>
</li>
<li>
<p>管理</p>
<ul>
<li>商业模式管理机制、管理协同和冲突、商业模式组合、空杯心态</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Business</category>
      </categories>
      <tags>
        <tag>需求与商业模式创新</tag>
      </tags>
  </entry>
  <entry>
    <title>AI Intro</title>
    <url>/2022/09/26/%E5%AF%BC%E8%AE%BA-%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>What is AI</li>
<li>What will we learn</li>
<li>Agent</li>
</ul>
<p>Ref:</p>
<p><em>Artificial Intelligence A Modern Approach</em></p>
<span id="more"></span>
<h1 id="What-is-AI"><a class="header-anchor" href="#What-is-AI"></a>What is AI</h1>
<ul>
<li>
<p>强人工智能：think like humans</p>
</li>
<li>
<p>弱人工智能： act rationally</p>
<ul>
<li>目前的研究都是弱人工智能</li>
</ul>
</li>
<li>
<p>发展： 达特茅斯会议→ 推理期（60s-70s）→ 知识期(80s初期 - 90s中期) → 学习期（2006）</p>
</li>
</ul>
<h1 id="What-will-we-learn"><a class="header-anchor" href="#What-will-we-learn"></a>What will we learn</h1>
<ul>
<li>Search  搜索与规划</li>
<li>knowledge 知识表达与处理</li>
<li>Uncertainty 不确定建模</li>
<li>Learning 机器学习</li>
</ul>
<h1 id="Agent（智能体）"><a class="header-anchor" href="#Agent（智能体）"></a>Agent（智能体）</h1>
<p>The <strong>agent function</strong> maps from percept histories to actions:<br>
$$<br>
f: P^* \rarr A<br>
$$</p>
<h2 id="Agent-types"><a class="header-anchor" href="#Agent-types"></a>Agent types</h2>
<ul>
<li>Simple  reflex agents
<ul>
<li>简单条件反射，作者把规则写进去</li>
</ul>
</li>
<li>Reflex agents with state
<ul>
<li>有记忆能力</li>
</ul>
</li>
<li>Goal-based agents
<ul>
<li>没有规则，只有目标</li>
</ul>
</li>
<li>Utility-based agents
<ul>
<li>最大化得分</li>
</ul>
</li>
</ul>
<p>All these can be turned into learning agents</p>
<hr>
<ul>
<li>Learning agents
<ul>
<li>能够生成当下目标（Problem generator）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Artificial Intelligence</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>尼金斯基手记</title>
    <url>/2021/05/18/%E5%B0%BC%E9%87%91%E6%96%AF%E5%9F%BA%E6%89%8B%E8%AE%B0/</url>
    <content><![CDATA[<p>《尼金斯基手记》是现代芭蕾舞的开创者尼金斯基在精神上脱离社会的束缚，但心中还残存有一丝理性时的 作品。文中记述了他悲惨的童年、辉煌的艺术生涯、家人的隔离疏远和对生活的焦虑。书中充满了作者的幻想、记忆和喃喃自语，如同一个装疯的&quot;哈姆雷特&quot;，透露了这个世界的真相。由于社会和时代道德的束缚，该书几经波折，直到20世纪末才全部得见天日。</p>
<span id="more"></span>
<p>据一些回忆文章说，尼金斯基很早就有情绪上的严重问题。大约在1918至1919年的冬天，他听从医生的嘱咐举家到瑞士休养。期间，他写下秘不示人的四册笔记，并将它们分别定名为情感、生命、死亡和信件。也正是在这期间他的精神失常现象日趋严重，甚至使家人受到惊吓。但这并未阻碍他的创作，他不断构想出许多新的舞蹈，并画了大量素描作品。 正如他的素描大多以圆为主题，对他有深入研究的精神病医生认为，这是尼金斯基&quot;在面临威胁他存在的分裂力量时努力保持自我平衡的一种企图&quot;。的确，《手记》中也可以看出他为了与人群趋同所付出的努力。</p>
<p>尼金斯基的一生可以贯穿在情感的无处安放。他的手记事实上是一部忏悔录。这部忏悔录应当和奥古斯丁的《忏悔录》齐名，应该提倡所有专业人士给予关注。奥古斯丁年轻时所有的失败和激情的降落，在尼金斯基身上有类似的痕迹。人不完美，人无法完善，人需要救赎。尼金斯基除了在人的世界的跌宕，还有对神的世界的追逐。他寻求爱，只是在寻求的中途屈服于现&quot;《尼金斯基手记》三部曲&quot;情感&quot;&quot;生命&quot;&quot;死亡&quot;，是一次艰难的精神忏悔录。他一次次将自己剖析，一次次依靠上帝赋予的残存理性进行自我防卫。这也是一次优美而动人的亲吻旅程。他的爱情是上帝。从&quot;情感&quot;部分对人的畸形的爱，到&quot;死亡&quot;部分对人公义和仁慈的爱，上帝是完善尼金斯基自我塑造的终极链接。在完善的过程当中，尼金斯基进行了一次艰难的蜕变，对世事本相也有了本质的洞穿。</p>
<p>所谓的&quot;疯狂&quot;，构成了尼金斯基的一种暴力倾向，这仅在法译本前言里有所提及，在他的文字里却不着痕迹。从他的文字来看，&quot;疯狂&quot;带给他的，只是一种呓语般的行文风格:短促，像即将窒息;重复，像喃喃低语;有的时候条理清楚，有的时候语无伦次--都是他思维状态的投射;只是一种对&quot;神&quot;的遵从:排除病态的幻觉因素，这可以被看作是对情感和直觉的诉求，他鄙视&quot;聪明&quot;(理智)，认为&quot;聪明&quot;是一种缺陷，会阻碍人的真正的理解力;此外，还有一种&quot;隔&quot;:他能清楚地意识到人们看他时的眼光，可是他仍然爱，他呻吟般说着他爱妻子，爱女儿，爱这个世界;可这种爱终究只是一种玻璃屋中的爱，他能看到屋外人的形色，洞若观火，并且他充沛地爱着，然而这爱只是硬邦邦地撞在玻璃围墙上。</p>
<p>精彩句子摘录:</p>
<p>&quot;我不喜欢娱乐，我了解什么是娱乐，我并不愉快，因为我知道欢愉就是死亡，心智的死亡，我害怕死亡，所以我热爱生命。 &quot;</p>
<p>&quot;他的聪明头脑破坏了他的情感。&quot;</p>
<p>&quot;我不喜欢过去了的时代，因为我活在今天。&quot;</p>
<p>&quot;我不想轻举妄动，我不想变得愚蠢，因为对我来说那是死亡。&quot;</p>
<p>&quot;我是个有情感的丑陋的人，所以我跳驼子和畸形的热的舞。我是个懂得形式和美的艺术家。美不是相对的。美是神。神在情感和美之中。美在情感之中。我喜欢美，因为我深刻地感觉过美，我了解它。那些又思想的人关于美所写的一切都很愚蠢。人不必讨论美，也不必批评。美并不是批评，我也不是批评。批评是聪明的，我不需要聪明，因为我去创造美，我感受到美并感受到爱。&quot;</p>
<p>&quot;他们没有对人的情感，他们只要钱。钱会让灵魂痛苦。&quot;</p>
<p>&quot;小人物在寻找他们的幸福，有钱人却四处搜刮金钱，最后导致小人物只好往自己头上射一颗子弹。&quot;</p>
<p>&quot;科学家说上帝不存在。但我认为上帝存在着。我感觉得到他，而不是去思考他。&quot;</p>
<p>&quot;我喜欢犹太人，因为他们懂得畏惧。&quot;</p>
<p>&quot;我寻求爱，但我发现爱并不存在。它是污秽的，大家要的爱是吹捧和恭维。&quot;</p>
<p>&quot;我很怕人，他们感受不到我，但却了解我。我很怕人群--因为他们既没有感受到我也不能了解我，而且要我过和他们一样的生活。他们要我跳令人欢愉的舞蹈。我不喜欢欢愉，我只喜欢生命。 &quot;</p>
<p>&quot;今天她(尼金斯基的妻子)在精神上用感觉爱我，我和想对她说，有一天我们要在精神上结婚，因为没有精神我无法爱人。&quot;</p>
<p>&quot;我要问他们一个关于生命的问题，如果他们能够深深感受到我--我就得救了;如果不能，如果他们没有感觉到我，不了解我。我就是一个习惯不幸福的人，我会感到很痛苦。&quot;</p>
]]></content>
      <categories>
        <category>Art</category>
      </categories>
  </entry>
  <entry>
    <title>我和我的父辈</title>
    <url>/2021/10/03/%E6%88%91%E5%92%8C%E6%88%91%E7%9A%84%E7%88%B6%E8%BE%88/</url>
    <content><![CDATA[<p>我和我的父辈： 8.0/10</p>
<span id="more"></span>
<h1 id="第一单元"><a class="header-anchor" href="#第一单元"></a>第一单元</h1>
<ul>
<li>主旋律抗日，但父亲牺牲儿子的那段真的没想到，也特别煽情。这和配乐有很大关系，小提琴高亢热烈的音色就适合表现如火一般炽烈的革命情感。个人觉得，红色音乐都应该多多采用小提琴，只有小提琴才配得上那份热血和赤诚。隔壁《长津湖》就因为配乐不行，导致电影完全没有情感调动可言</li>
<li>说句明白话，这部电影的第一单元的几分钟，就比整部《长津湖》要精彩、动人。每一分钟我的眼泪都在眼眶里打转</li>
<li>吴京真忙啊</li>
</ul>
<h1 id="第二单元"><a class="header-anchor" href="#第二单元"></a>第二单元</h1>
<ul>
<li>讲研发火箭的工程师的事，章子怡执导</li>
<li>章子怡太强了！ 没想到她有这么强的执导能力，从中也能看出许多有别于张艺谋的地方（本来我以为她的内容只会是对张艺谋的模仿）。也许是女性导演的缘故，家庭和感情的戏份比较多。章子怡的演技也是无可挑剔</li>
<li>这一单元很美，章子怡和儿子在夜色中行走的那一幕极具美感，像是欧洲文艺片一般。可见子怡导演的功力</li>
<li>还很浪漫，“在天空写诗”哦</li>
</ul>
<h1 id="第三单元"><a class="header-anchor" href="#第三单元"></a>第三单元</h1>
<ul>
<li>“鸭先知”，讲一个总被嘲笑但是有远见的父亲</li>
<li>我个人最喜欢也最有共鸣的一个单元。徐峥把这个父亲角色演活了，我从中真的看到了我父亲的影子。 这一单元的父亲，没有前两个单元的那么伟大，只是个普通小市民，还总是被人嘲笑，被老婆欺负，完事儿了还要安慰儿子说爸爸其实很厉害，这才是大多数人心中父亲的样子吧。不管再卑微再看着好笑，爱孩子面前也永远一副乐观的样子</li>
<li>故事线：父亲想出了拍摄中国第一条广告以解决产品滞销的故事。 “春江水暖鸭先知”，我们要努力做那只先到水里的鸭子，这样才能把握机遇。</li>
<li>（之前我对徐峥的印象是一个油腻的中年男子，《人在囧途》《泰囧》让我意识到他是个电影天才，才华横溢。但《心花路放》又让我觉得此人满脑子中年人的肮脏思想：钱、性、势利眼这些。 即使在《无人区》《我不是药神》《一出好戏》这些名作中，他出演的也都是油腻男子的形象（不过演的是真好）。今天“鸭先知”让我见识到了，原来徐峥演的不只是中年人的油腻，还有那份阅历和沧桑。 那个胖乎乎的胆小怕事的，在妈妈面前又胆小又卑微的，但在你面前又永远开心乐观的，不就是你的父亲吗</li>
</ul>
<h1 id="第四单元"><a class="header-anchor" href="#第四单元"></a>第四单元</h1>
<ul>
<li>
<p>开心麻花。。。 懂得都懂。 深度和好看程度都不如前三个单元。 不过该单元也是让电影院笑声最多的一个单元，好笑这块儿腾哥还是玩得溜啊</p>
<ul>
<li>沈腾这次真扮演了超级英雄似的角色，穿着高科技紧身衣，胸口还有个发光的三角体，隐射漫威哪位英雄我就不用说了吧。B站之前有沈腾和唐尼的换脸，没想到今天成真了</li>
</ul>
</li>
<li>
<p>单元里，儿子的亲生父亲居然是个人工智能学者，看样子研究的还是强人工智能φ(*￣0￣)， 只能说respect。</p>
<p>不过这年头真有研究强人工智能的吗。。。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Art</category>
      </categories>
      <tags>
        <tag>Movie</tag>
      </tags>
  </entry>
  <entry>
    <title>涉众分析</title>
    <url>/2021/12/29/%E6%B6%89%E4%BC%97%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>Outline</p>
<ul>
<li>涉众评估
<ul>
<li>优先级评估</li>
<li>风险评估</li>
<li>共赢分析</li>
</ul>
</li>
<li>案例分析： 阅文</li>
</ul>
<span id="more"></span>
<h1 id="涉众评估"><a class="header-anchor" href="#涉众评估"></a>涉众评估</h1>
<h2 id="优先级评估"><a class="header-anchor" href="#优先级评估"></a>优先级评估</h2>
<ol>
<li>涉众并不是完全平等的，<strong>有些涉众</strong>比其他涉众更为重要</li>
<li>优先考虑涉众的基本特征，尤其是<strong>任务特征</strong>：不一定出钱多的涉众就重要，可能使用系统更多或更重要功能、使用系统更频繁、规模更大的用户群体具有更高的优先级。</li>
</ol>
<!--![涉众优先级评估](../assets/需求与商业模式设计/涉众分析/涉众优先级评估.png)-->
<p><img data-src="https://box.nju.edu.cn/f/e697275127614d7f922b/?dl=1" alt="涉众优先级评估"></p>
<ol start="3">
<li>基于涉众扩展特征进行<strong>涉众优先级</strong>的评估：Power/Interest图
<ol>
<li>参与者：系统的实际使用者，对系统成功有较大影响力，对系统也有较大影响力，优先级最高。</li>
<li>环境设定者：很少使用系统，但是由于政治、经济等因素对系统有比较大的影响，优先级次之，最常见的是政府和管理者。</li>
<li>被影响者：可能是系统直接使用者，也可能是因为系统出现被剥夺了部分利益的输家，受影响大，能影响少，优先级一般低于环境设定这，但是特殊情况下也可能高于环境设定者。</li>
<li>观众：不受影响，也不影响，优先级最低，比如环境专家和市场力量。</li>
</ol>
</li>
</ol>
<!--![power_interest图](../assets/需求与商业模式设计/涉众分析/power_interest图.png)-->
<p><img data-src="https://box.nju.edu.cn/f/37dd0668b1fc4484881e/?dl=1" alt=""></p>
<h2 id="风险评估"><a class="header-anchor" href="#风险评估"></a>风险评估</h2>
<h3 id="分析态度Power-Attitude图"><a class="header-anchor" href="#分析态度Power-Attitude图"></a>分析态度Power/Attitude图</h3>
<ol>
<li>强反对者是需要重点分析的。</li>
<li>涉众的关注点和兴趣去向也是重要内容，一般环境设定者是项目高风险因素。</li>
<li>对于高风险的涉众类别，要尽可能澄清各个涉众类别的角色和指着，发现项目对他们的依赖和假设条件，分析实际情况与预期不一致时可能出现的风险，并提前化解。</li>
</ol>
<!--![power_attitude图](../assets/需求与商业模式设计/涉众分析/power_attitude图.png)-->
<p><img data-src="https://box.nju.edu.cn/f/4c9ab25578b04376aa56/?dl=1" alt="power_attitude图"></p>
<h3 id="化解涉众风险策略"><a class="header-anchor" href="#化解涉众风险策略"></a>化解涉众风险策略</h3>
<ol>
<li>一方面提高环境设定者对系统的关注，转化为参与者</li>
<li>一方面消除强反对者的反对原因，变为强支持者</li>
<li>给予被影响者一些发表和实现自身意见的全体， 缓解忧虑。</li>
</ol>
<!--![solve_power_attitude](../assets/需求与商业模式设计/涉众分析/solve_power_attitude.png)-->
<p><img data-src="https://box.nju.edu.cn/f/24083815c06741039577/?dl=1" alt="solve_power_attitude"></p>
<h2 id="共赢分析"><a class="header-anchor" href="#共赢分析"></a>共赢分析</h2>
<h3 id="发现冲突-建立Stakeholder-Issue关系图"><a class="header-anchor" href="#发现冲突-建立Stakeholder-Issue关系图"></a>发现冲突(建立Stakeholder/Issue关系图)</h3>
<ol>
<li>列出系统的<strong>所有涉众类别</strong>，明确描述他们的<strong>兴趣</strong>和<strong>对系统的期望</strong></li>
<li>从涉众们的<strong>兴趣和期望</strong>中发现背后涉及的<strong>共同问题</strong>(Issue)</li>
<li>建立涉众类别和问题的<strong>关联</strong>，如果某个涉众类别对一个Issue<strong>存在兴趣</strong>，那么该涉众类别和这个Issue就存在<strong>关联</strong>关系</li>
<li>对每一个Stakeholder-Issue关系，标明该关系上面所被<strong>寄予的期望</strong></li>
</ol>
<!--![stakeholder_issue图](../assets/需求与商业模式设计/涉众分析/stakeholder_issue图.png)-->
<p><img data-src="https://box.nju.edu.cn/f/6d9428a1175e4b45967d/?dl=1" alt="stakeholder_issue图"></p>
<ol>
<li>如果某个Stakeholder-Issue关系上所寄予的期望与项目的业务需求无法保持一致，那么它关联的涉众就在该Issue的问题上和项目整体目标存在冲突
<ol>
<li>涉众和项目负责人互相<strong>调整、折中</strong></li>
<li>重新评估项目的<strong>可行性</strong></li>
</ol>
</li>
<li>如果Stakeholder/Issue关系图中某个Issue所关联的<strong>不同关系标识</strong>有互相冲突的期望，那么就意味着它所关联的涉众在该Issue上存在需求冲突
<ol>
<li>分析各冲突方成为<strong>项目赢家</strong>的条件</li>
<li>适当的调整，化解冲突</li>
<li>分析项目在该Issue上的目标、约束和可选方案，并提供给<strong>冲突方</strong>进行权衡，促进他们之间协商解决</li>
</ol>
</li>
</ol>
<h2 id="阅文的免费模式能否与订阅模式共赢？"><a class="header-anchor" href="#阅文的免费模式能否与订阅模式共赢？"></a>阅文的免费模式能否与订阅模式共赢？</h2>
<ol>
<li>Issue：<strong>免费带来的更多流量</strong>与<strong>写手身份转换</strong></li>
<li>Stakeholder：
<ol>
<li>头部与底部写手、普通读者：可以接受</li>
<li>腰部写手：影响收入，进一步弱化保障</li>
<li>核心读者：担忧文章质量下降</li>
</ol>
</li>
<li>能否共赢：免费与订阅在多大程度上共存
<ol>
<li>免费创作与订阅写作区分开，但共存</li>
<li>同时成为免费与订阅写手，或先从免费写手做起</li>
<li>可能达成共赢的Issue：利用<strong>免费阅读模式</strong>为平台引流</li>
<li>较难达成共赢的Issue：平台对<strong>IP的强力掌控</strong>与作者<strong>本身的著作权</strong>主张</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>Business</category>
      </categories>
      <tags>
        <tag>需求与商业模式创新</tag>
      </tags>
  </entry>
  <entry>
    <title>矿工笔记</title>
    <url>/2022/09/26/%E7%9F%BF%E5%B7%A5%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>注：我不挖矿</p>
<span id="more"></span>
<h1 id="问题"><a class="header-anchor" href="#问题"></a>问题</h1>
<p>[原文链接]（<a href="https://zhuanlan.zhihu.com/p/73819309%EF%BC%89">https://zhuanlan.zhihu.com/p/73819309）</a></p>
<h2 id="挖矿与囤币"><a class="header-anchor" href="#挖矿与囤币"></a>挖矿与囤币</h2>
<p>我先抛出我对这个问题的答案：在大多数情况下，挖矿的收益是比较高的。为什么这么说呢？其实大家可以思考一个很简单的问题，那到底是挖矿麻烦呢，还是直接买币麻烦？囤币的话这个答案是很显而易见的，肯定是挖矿要比买币麻烦很多。那为什么这么多人，这么多矿业的从业人员，要放弃简单的买币操作方式，选择一个比较复杂的呢？</p>
<p>我先讲一下，什么样的条件下，囤币的收益可能会比挖矿的收益高吧。在我六年的从业经历里面，我确实观察到在某一些特定的情况下，囤币的收益会比挖矿高。第一个情况：当币价暴涨的时候，币价涨得特别快，类似于几天就翻几倍，这种情况下，挖矿的收益肯定没有直接囤币的收益高。这种情况一般发生在牛市的尾声，或者牛市非常早期，一些小币种身上，可能两三天三四天就翻倍了。这种情况下挖矿，可能你买的矿机都还在路上呢，矿机可能会有些涨幅，但是肯定没有币价涨幅快。</p>
<p>还有一种情况，是在这个<strong>牛市转熊市</strong>这样的一种前提条件下。这个时候币价已经到了高位，矿机也很贵，如果这个时候币价开始从牛转熊开始下跌，这时候挖矿，会碰到我们称之为“戴维斯双杀”的一个过程：币价跌，难度还在涨。这时候对于挖矿矿机的收益来讲，它是双重打击：这个时候收益下降的速度非常快，矿机的贬值速度也很快。这个时候可能就是，你的矿机的贬值幅度扣掉你挖出来的币，会比你直接囤币的损失要多。</p>
<p>除了这种比较极端的行情外，我挖矿都可能会比囤币的收益高。**对挖矿来说，最友好的就是币价温和的上涨，甚至币价横盘的阶段。**以我们当时的2015年为例，那个时候可能币价一年都没涨，如果你囤币的话呢，可能这一年都没有任何收益，但那个时候买矿机都已经回本了，这就意味着矿机已经取得了100%的收益。</p>
<p>除了从收益的角度考虑，我觉得挖矿可能还有额外的两个好处。一个是<strong>它会增强你对数字货币的理解</strong>，让你清楚的知道整个数字货币是怎么运作的，因为挖矿是整个数字货币，尤其是像比特币这种，POW挖矿是运行的非常重要的环节，你如果理解了挖矿，非常有助于你去理解对应数字货币。<strong>这样还有一个好处呢，就是它可以做成一个业务</strong>。你囤币的话，我不能说他绝对不能做业务，但很难。挖矿的话，你可能会接触到，销售啊，云算力啊，矿池啊，这些未来可能让你在囤币之外，还能额外赚取一些收入。这就是我们所说的“卖水的钱”，其实就是提供业务的价值。</p>
<p>还有两个好处，第一，<strong>它对新人来说是比较友好的</strong>，因为你可以把它理解为一个生意，就是我投了设备，设备每天会有产出，我根据产出计算什么时间能回本，这跟传统生意是比较像的。但是如果你直接屯币的话，需要你对比特币建立一些很强的信仰，因为这个数字货币是非常新的，要理解这个数字货币的价值来源于哪里，它值不值得长期持有......如果没有这个这些知识，背景，那你就会很难拿得住币。币圈有句名言叫“守币比守寡难”。</p>
<p>所以综合上面的这些原因，我觉得在大多数的情况下，挖矿的收益会比囤币的收益更好。再加上它对新人也比较友好，也有一些额外的好处，所以我觉得如果大家是刚接触数字货币的新人的话，尝试挖矿是一条相对来说更好的投资数字货币的方式吧。</p>
<h2 id="挖矿收益最大化"><a class="header-anchor" href="#挖矿收益最大化"></a>挖矿收益最大化</h2>
<p>这个其实是一个择时的问题，那就我的从业经验而言的话选择一个好的进入时机，买一个对的机型，你才会取得比较好的收益。</p>
<p>用一个比较通俗易懂的比喻叫天时地利人和，那什么叫天时呢？天时主要是币价和难度这两个因素，因为这两个因素都不是你能控制的。第二个是地利，地利主要是矿场和矿机。矿场是可以提前准备的，矿机对于矿机生产厂商来说是可以提前准备的，但是对大多数人来说呢，只能等厂家发货。</p>
<p>人和呢，这里面主要是这个两个因素。一个是你的资金情况，还有一个是你的策略。接下来呢，我会对这六个因素进行一一解读，让大家知道这些因素怎么来评估。</p>
<p>首先我们来讲天时里面的两个因素，币价和挖矿难度。币价呢，我们肯定是希望我们买完矿机之后币价是上涨的。我们绝对不希望买完之后这个币价就下跌。但币价的判断是比较困难的。我觉得可以做一个比较简单的定性判断，就是到底是在熊市还是在牛市，或者是横盘阶段进入。在熊市里面和在这个横盘阶段，对挖矿是比较友好的，因为这期间币价都是涨的可能性要比跌的可能性大。</p>
<p>影响难度的两个主要因素呢，一个是要不要会减半，另外一个是你在购买之后会不会有更多的新矿机进入挖矿市场。第一个因素是比较容易判断，因为减半这个事情是固定的。第二个因素呢，你可以从这个矿机有没有足够多的利润，就是你买矿机的价格和它生产矿机成本相比，是不是有很大的溢价。如果说你买的矿机，它和它的生产产品相比有很大的增长利润空间的话，那么矿机生产厂商就有足够的动力去生产更多的矿机，来投往市场里，也就这个时候到后期的话，难度增长会是比较快的，但是如果说利润很低，那就比较慢。</p>
<p>地利主要是矿场和矿机。矿场这个因素是什么呢？就是你在挖矿之前最好能够提前准备，或者是找到一个靠谱的、稳定的、电费相对合理的一个矿场。这个因素可能会被很多人忽略掉，就是觉得我是不是随时进来挖矿都可以找到一个矿场，其实不是这样的，这样的矿场，有的时候非常非常稀缺。机位难求，或者说有的非常不靠谱，可能你矿机到了之后发现跑不起来，甚至根本完全跑不动，或者跑的效率很差，这个事情在挖矿市场上也是经常有听闻的。</p>
<p>矿机呢主要是说，是不是在你想挖矿的时候，你就马上能买到一个价格比较合理的矿机。这个因素，对于大多数人来说其实也是不可控的，有可能厂商，他可能会断货，甚至没有货，或者只有期货。以现在为例，如果你想买比特矿机，像好的比特矿机的话，都只有10月份，11月份的期货。和换成四五月份的时候，那时候就可以当天付完钱之后，第二天第三天就能拿到矿机，是不可同日而语的。</p>
<p>人和这里面，我觉得嗯，两个要素，一个是资金，一个策略，那所谓资金你要把资金准备好，到一个好的机会的时候，其他因素都具备的时候，你要马上能够把这个机会抓住。策略也很重要，你要想好你在什么样的条件下要出手，并且提前把能准备的这些条件都准备好，比如说我先准备好矿场，准备好资金，然后一旦币价合适，也有比较好的矿机的时候，就杀进来，我觉得也是非常非常重要的，就是要形成一个自己的一个相对完整的投资策略。</p>
<p>最后我想说的是这些因素呢有的时候是互相排斥的。就是当一个因素变好的时候，可能另外一个因素就会变差。币价现在开始上涨了，而且涨的还不错，那可能这个时候矿机就开始缺货了，矿场也没有位置，难度后面可能也跟着涨了，不是一成不变的。所以你要综合考虑找到一个各项条件相对来说都比较好的挖矿的时候。</p>
<p>主流矿机呢，我可以介绍一下住目前的主流矿机，从大的分类来说呢，可以分成比特矿机，莱特矿机，显卡矿机，还有一些小币种矿机这四大类吧。主流的，如果我们只说比特矿机的话，那么主流的其实也可以分成两代，一代是S9类的，还有一代是比S9更好的新一代。s9这一代里面有841啊，就是L的841啊，新增的机器，还有神马的M3，还有一些小牌子的S9，T9啊，这个都是比较常见的。比较好的机型的话，那主要就是比特大陆的。S17、T17系列还有神马的，M20、M21系列，芯动的T3系列。</p>
<p>莱特主流矿机主要是L3+就是比特大陆的和芯动的A4和A6。小币种矿机就很多了，我就不一一介绍了。显卡矿机呢，主要是AMD的这个，X170、570、580系列，还有N卡的1060、1080、1070。还有最新的一代是这个1660、2660系列。</p>
<h2 id="以租代售，共享矿机"><a class="header-anchor" href="#以租代售，共享矿机"></a>以租代售，共享矿机</h2>
<p>以租代售这个可能大家也观察到了，我们挖易最近推了一些算力租赁的服务。那么这个模式会成为未来的一个发展方向吗，我觉得这个要从两个维度来讲，一个维度是对这种大资金的进入，就是你真的看好挖矿市场，资金体量非常大，那么我估计还是多半会选择自己去直接买矿机挖矿，这样的收益才最高。但是我觉得这个租赁矿机服务呢，其实对很多新人来说是非常非常友好的，它比云算力，还要友好。因为有一些产品的周期特别短，购买成本会非常便宜，就非常适合新人。</p>
<p>其实挖矿里面有一个很核心的可能大家以前忽略的点就是它其实需要你有一个逐步的上手的投资额。挖矿存在着投资窗口期的问题，可能好的投资窗口期就那么几个月，甚至一年，这样子。如果说啊，你花了很多的机会，很多时间才开始挖矿，然后等你这个弄明白了之后，可能这个投资窗口期已经过了。那么我觉得租赁矿机呢，对很多新人来说呢，是非常友好的，因为它很便宜，比如说像我们最初30天的租赁，那么它的价格可能只有直接买矿机的1/12，因为便宜，就方便你快速体验什么是挖矿，挖矿是怎么回事儿。</p>
<p>有了这些经验之后，你就可以加大这个投资的规模，然后抓住更好的投资机会，取得更好的收益。</p>
]]></content>
      <categories>
        <category>Technology</category>
      </categories>
      <tags>
        <tag>Block Chain</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章-绪论</title>
    <url>/2021/07/04/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%AE%9E%E9%AA%8C%E5%BF%83%E7%90%86%E5%AD%A6%E7%BB%AA%E8%AE%BA/</url>
    <content><![CDATA[<p>Outline</p>
<ul>
<li>实验心理学简史</li>
<li>实验心理学的性质</li>
<li>实验心理学程序</li>
</ul>
<span id="more"></span>
<h1 id="实验心理学简史"><a class="header-anchor" href="#实验心理学简史"></a>实验心理学简史</h1>
<h2 id="近代哲学与实验生理学的发展"><a class="header-anchor" href="#近代哲学与实验生理学的发展"></a>近代哲学与实验生理学的发展</h2>
<ul>
<li>
<p>（一）欧洲哲学流派对心理学的诞生</p>
<ul>
<li>
<p>唯理论 （笛卡尔）</p>
</li>
<li>
<p>经验主义（洛克）</p>
</li>
<li>
<p>联想主义 (培因)</p>
</li>
</ul>
</li>
<li>
<p>（二）实验生理学对心理学诞生的贡献</p>
<ul>
<li>维萨刘斯（Andreas Vesalius，1515-1564）</li>
<li>哈维（William Harvey,1578-1657 )</li>
<li>列文霍克（Leeuwen Hoek,1632-1723)</li>
</ul>
</li>
</ul>
<h2 id="实验心理学的创立"><a class="header-anchor" href="#实验心理学的创立"></a>实验心理学的创立</h2>
<ul>
<li>费希纳（Gustav Theodor Fechner，1801-1887） 开创性地提出了量化研究“心灵”的思想，以及具体可操作 的量化方法，即影响深远的<strong>心理物理法</strong>，从而为实验心理学指明了方向。</li>
<li>冯特（1832－1920） 1862年， 冯特出版了《对于感知觉的贡献》一书， 并在书中 论述了对感知觉的实验研究， 这也是实验心理学产生的前期著述。该著作在内容上属于实验心理学的内容， 并在此书中 正式<strong>提出了“实验心理学”</strong> ， 这也是冯特的第一部实验心理 学著作。</li>
<li>艾宾浩斯（Hermann Ebbinghaus，1850-1908） 开辟了用<strong>实证方法</strong>研究记忆等高级心理过程的先河，从而铸造出了实验心理学的雏形.</li>
</ul>
<h2 id="现代实验心理学的发展"><a class="header-anchor" href="#现代实验心理学的发展"></a>现代实验心理学的发展</h2>
<h3 id="行为主义与实验心理学的发展"><a class="header-anchor" href="#行为主义与实验心理学的发展"></a>行为主义与实验心理学的发展</h3>
<ul>
<li>华生
<ol>
<li>否定意识， 主张心理学应该研究行为</li>
<li>反对内省， 主张应该用实验的方法研究人的心理与行 为；</li>
<li>否定遗传和神经中枢对心理发展的作用</li>
</ol>
</li>
<li>桑代克</li>
<li>斯金纳</li>
<li>上述实验说明了行为主义心理学在研究方法和手段上对实验 法和实验器材的重视， 对行为与反应之间关系的重视。</li>
</ul>
<h3 id="信号检测论与现代心理物理学"><a class="header-anchor" href="#信号检测论与现代心理物理学"></a>信号检测论与现代心理物理学</h3>
<ul>
<li>传统心理物理法一般只能测量出被试的辨别力或感觉敏感性， 而对被试的反应倾向和判断标准则无法进行测量和判断。</li>
<li>基于受雷达设备工作原理的启发。信号检测论认为， 如果个体对某一刺激不能作出正确判断， 可能是因为噪声的干扰导 致的。因此（信号检测论）可以对人们在判断客观刺激信息时，对不确定的情况做出科学的决策。</li>
<li>20世纪50年代以来，信号检测理论在心理学研究领域得到了 广泛的应用。如在感知觉研究、个体反应倾向性的评价、工业心理学以及内隐记忆与阈下知觉等领域。</li>
</ul>
<h3 id="认知心理学与现代实验研究方法"><a class="header-anchor" href="#认知心理学与现代实验研究方法"></a>认知心理学与现代实验研究方法</h3>
<ul>
<li>20世纪50 年代，由于计算机科学、信息论、系统论的发展， 对行为主义心理学产生了巨大的冲击。</li>
<li>认知心理学认为，人不是刺激的被动接受者， 而是主动地、 积极地<strong>对各种环境刺激信息进行加工</strong>。个体的这个<strong>加工过程就是认知过程</strong>。认知心理学是研究人的认知心理过程， 主要研究内容包括个体的感知觉、注意、记忆、思维、推 理、概念形成、问题解决等大脑内在的心理加工过程，并用计算机模拟人脑，来研究大脑对信息的加工过程和加工 机制。</li>
</ul>
<h2 id="实验心理学理论、方法与技术的发展"><a class="header-anchor" href="#实验心理学理论、方法与技术的发展"></a>实验心理学理论、方法与技术的发展</h2>
<ul>
<li>
<p>基于计算机科学的信息加工理论、人工智能的理论、 医学研究领域中的各种神经电活动的理论和规律 （包括脑电、皮肤电位、肌电、眼电、心电等） 以 及神经系统活动的脑功能成像的理论、物理光学和 声学的理论以及生物化学的理论等， 上述诸研究领 域的理论从不同的学科为心理学各个领域的实验研 究奠定理论基础。</p>
</li>
<li>
<p>基于<em>反应时</em>测量技术研究范式</p>
<ul>
<li>如在感知觉、注意研究领域中采用的启动范式、快速视觉 出现范式（RSVP）</li>
</ul>
</li>
<li>
<p>眼动技术 • 各种用于视觉、注意、阅读、运动心理、人机交互界面、 工程心理学研究和医学研究领域的眼动仪.</p>
</li>
<li>
<p>医学研究与诊断技术在心理学研究中的广泛应用</p>
<ul>
<li>脑电技术（EEG／ERP） 、医学影像学技术（包括fMRI 、 PET 、rTMS 、CT 等）</li>
</ul>
</li>
<li>
<p>听觉与语言分析技术</p>
<ul>
<li>发展了用于听觉研究的专业的声学设备和听觉设备（如电 子声级计、听觉诊断仪、语言分析仪等）</li>
</ul>
</li>
</ul>
<h1 id="实验心理学的性质"><a class="header-anchor" href="#实验心理学的性质"></a>实验心理学的性质</h1>
<h2 id="定义"><a class="header-anchor" href="#定义"></a>定义</h2>
<ul>
<li>实验心理学就是在<strong>实验控制条件下</strong>对<strong>心理和行为</strong>进行研究工作的心理学</li>
</ul>
<h2 id="内容"><a class="header-anchor" href="#内容"></a>内容</h2>
<p>通常包括两个部分：</p>
<ul>
<li>阐述实验方法和实验设计（一般原理）</li>
<li>阐述实验法在一些专门领域中的应用。 （如何在具体领域中应用实验方法）</li>
</ul>
<h2 id="目的"><a class="header-anchor" href="#目的"></a>目的</h2>
<ul>
<li>说明和解释人 在完成某种活动时的心理活动是如何进行的，即<strong>通过刺激和反应之间的关系来推断心理活动的方式</strong></li>
</ul>
<h2 id="实验法与其他研究方法的区别"><a class="header-anchor" href="#实验法与其他研究方法的区别"></a>实验法与其他研究方法的区别</h2>
<ul>
<li>
<p>实验法不同于自然观察法。</p>
</li>
<li>
<p>在使用自然观察法时，研究者只能<strong>被动</strong>地仔细观察和记录研究对象在<strong>自然状态</strong>下所发生的情况，而不能有任何干预。</p>
</li>
<li>
<p>实验则是人为地去干预、控制所研究的对象。实验者可以创造条件，引发所需要的事件来观察其变化；为了验证，可 以创造同样的条件进行重复观察。</p>
</li>
</ul>
<h3 id="访谈法"><a class="header-anchor" href="#访谈法"></a>访谈法</h3>
<ul>
<li>访谈法（<code>Interview</code>） 又叫个案法（<code>Case Study</code>） 或临床法（<code>Clinical Study</code>） ,是 研究者围绕事先设计好的问题， 通过与 研究对象交谈的形式获取资料的一种方 法。谈话法是教育心理学、发展心理学 和社会心理学调查中常用的研究方法</li>
</ul>
<h3 id="问卷法"><a class="header-anchor" href="#问卷法"></a>问卷法</h3>
<p>问卷法（<code>Questionaires</code>） 是通过严格设 计的调查问卷对人的心理与行为进行调 查研究的一种数据收集方法。通常问卷 法适用于大规模的调查研究</p>
<h3 id="测验法"><a class="header-anchor" href="#测验法"></a>测验法</h3>
<p>测验法(<code>Testing</code>) 是通过修订的标准化 的试题、按照一定的测量程序收集数据 的一种方法。是心理与教育研究中最常 用的方法之一</p>
<h3 id="实验法"><a class="header-anchor" href="#实验法"></a>实验法</h3>
<p>实验法（<code>Experiment</code>） 包括自然实验法和实验室实验法。 自然实验法是在自然情境下， 对实验情境进行一定的控制来对人 的心理和行为变化进行实验研究的一种研究方法。一般自然实验 的结果与真实生活或工作情境比较接近， 结果具有很好的推论性。 实验室实验法是指在实验室条件下， 通过对实验条件和研究变量 进行严格的控制来对人的心理和行为进行研究的一种实验方法。 实验室实验法得到的研究结果一般比较精确， 但是由于对实验条 件控制比较严格， 与真实的生活或工作情境有较大的差异</p>
<h1 id="心理实验的程序"><a class="header-anchor" href="#心理实验的程序"></a>心理实验的程序</h1>
<ul>
<li>实验的程序就是实验的进程。它是指实验在各个阶段应做的事，它包括：
<ol>
<li>课题的确定</li>
<li>被试的选择</li>
<li>实验因素的控制</li>
<li>实验资料的收集与分析和综合</li>
<li>撰写实验报告</li>
</ol>
</li>
</ul>
<h2 id="课题的确定"><a class="header-anchor" href="#课题的确定"></a>课题的确定</h2>
<h3 id="课题的来源"><a class="header-anchor" href="#课题的来源"></a>课题的来源</h3>
<ul>
<li>实际需要</li>
<li>理论需要</li>
<li>个人经验</li>
<li>前人的研究与文献资料</li>
</ul>
<h3 id="实验类型的确定"><a class="header-anchor" href="#实验类型的确定"></a>实验类型的确定</h3>
<ul>
<li>课题虽然有不同的来源，但都是从提出问题开始的。对于“为什么” 科学的探索，大致可分为两阶段或两个类型。第一阶段是探明规定<strong>某个行为的条件</strong>，第二个阶段是探明哪些<strong>条件与行为之间的函数关系</strong>。与这两个阶段相对 应，可以把实验分为两种类型</li>
</ul>
<h4 id="因素型实验"><a class="header-anchor" href="#因素型实验"></a>因素型实验</h4>
<ul>
<li>第一种类型是因素型实验，即探求规定行为的条件“是什么”的“什么型实验”，或是探明行为的规定要因的实验。 在因素型实验里，<em>逐个地除去、破坏或变化 被看作是行为规定要因的几个条件，根据有无相应的行为变化，探明它是否是行为的规定要因</em>。 毫无疑义，这时候，<em>对于被操作的条件之外 的条件，都应当进行严密的控制</em>。</li>
</ul>
<h4 id="函数性实验"><a class="header-anchor" href="#函数性实验"></a>函数性实验</h4>
<ul>
<li>第二种类型是函数型实验，即探求各种条件是 “怎样”规定行为的“怎样型实验”，或是探<br>
明条件和行为之间的函数关系的实验。 在函数型实验里，根据因素型实验的结果，系统地、分阶段地变化规定要因的条件，以进行 确定条件和行为之间的函数关系的函数型实验， 以找出行为的法则。</li>
</ul>
<h3 id="提出假设"><a class="header-anchor" href="#提出假设"></a>提出假设</h3>
<ul>
<li>在<strong>课题确定</strong>及其所属的<strong>实验类型</strong>均明确之后， 若能以假设的形式提出，那就更符合科学原则。 假设是关于条件和行为之间的关系的陈述。<br>
如果把对条件的叙述记为a，把对行为的叙述记为b， 一般取“如果a，那么b”这样的形式。 一切科学定律、法则虽然表面上不一定都符合这个 形式，但实际上却包含先行条件（自变量）和后继 条件（因变量）这样的逻辑关系。 例如，对于缪勒-莱尔错觉来说，“若变化夹角的大小，则视错觉就有变化”这一假设，是确定夹角是否是视错觉的要因这一<code>因素型实验</code>的假设。这是 假设陈述的第一种方式。</li>
<li>假设的另一种陈述方式是用函数关系来 表示。它用方程式b=f（a）来表明自变 量a与因变量b共变的函数关系，这个方程式读作b为a的函数，或b数量地依存于a。应用这个模型，就可将上述关系改为： “视错觉的量与夹角的余弦成正比”。 这就是函数型的假设。</li>
</ul>
<h2 id="被试的选择"><a class="header-anchor" href="#被试的选择"></a>被试的选择</h2>
<ul>
<li>涉及被试选择的问题有：
<ol>
<li>是使用人类被试还是使用非人类被试？</li>
<li>被试应具备哪些机体特征？</li>
<li>用哪一种取样方法才能使被试者样本代表总体？</li>
</ol>
</li>
<li>这些问题的解答主要取决于二个因素： 即<strong>课题的性质</strong>及<strong>研究结果的概括程度</strong>。</li>
</ul>
<h3 id="依问题的性质选择被试"><a class="header-anchor" href="#依问题的性质选择被试"></a>依问题的性质选择被试</h3>
<ul>
<li>选用人类被试者还是非人类被试者，依据课题的性质而定。
<ul>
<li>许多心理学研究选用人类被试者，因为它关心的是人类的心理和行为。有损被试者身心健康的实验就 不能选用人类被试者，而应当考虑选用适当的非人 类被试者。</li>
<li>有的心理学实验使用非人类被试者是因为考虑到要严密地控制无关变量。</li>
</ul>
</li>
</ul>
<h3 id="依研究结果的概括程度来选择被试"><a class="header-anchor" href="#依研究结果的概括程度来选择被试"></a>依研究结果的概括程度来选择被试</h3>
<ul>
<li>在从事一项研究时必须要依据研究结果的概括程度来选择被试者。
<ul>
<li>心理学研究的群体可能是一个小群体，或仅具有某种特性的成员。</li>
<li>因此，选定什么样的被试者样本，要依研究的问题 和据此而推论的全体而定。如果被试者的选择出现偏差，就会影响实验效度。</li>
<li>用什么方法能减少这种偏差呢？可用如下二种方法：
<ol>
<li>随机抽样法（抽签法、随机数字表法）</li>
<li>分层随机取样法</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="实验因素的控制"><a class="header-anchor" href="#实验因素的控制"></a>实验因素的控制</h2>
<ul>
<li>在实验进行之前，要通过<strong>实验设计</strong>对影响实验效果的各种因素进行控制。
<ul>
<li>自变量的控制（操作定义）</li>
<li>反应的控制（指示语：学习并记住这些字串； 试发现这些字串的内在规则）</li>
<li>反应指标的选择
<ul>
<li>有效性</li>
<li>客观性(具有可重复性)</li>
<li>数量化(便于记录,统计和比较)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="实验资料的收集与分析和综合"><a class="header-anchor" href="#实验资料的收集与分析和综合"></a>实验资料的收集与分析和综合</h3>
<ul>
<li>心理学研究的资料类别
<ul>
<li>计数资料(分类资料,如性别,反应有无,对错)</li>
<li>计量资料(测得的数值大小,)</li>
<li>等级资料(心理量表法)</li>
<li>描述性资料</li>
</ul>
</li>
<li>研究资料的整理与解释
<ul>
<li>选用统计方法都有其前提条件．
<ul>
<li>如T和F检验都假设资料的数值呈正态分布.</li>
</ul>
</li>
<li>在验证实验的假设时，有两种结果．</li>
</ul>
</li>
</ul>
<h3 id="撰写实验报告"><a class="header-anchor" href="#撰写实验报告"></a>撰写实验报告</h3>
<ul>
<li>研究论文具有三个特点：
<ol>
<li>有比较严格的格式要求</li>
<li>所表达的内容是研究的新成果</li>
<li>具有<strong>真实性、客观性</strong></li>
</ol>
</li>
<li>一个完整的实验报告，必须包括以下几项内容：摘要、题目、引言、方法、结果、讨论、结论、参考文献及附录</li>
</ul>
<h4 id="摘要"><a class="header-anchor" href="#摘要"></a>摘要</h4>
<p>正式发表的科研报告，一般应写出论文摘要（<code>abstract</code>），把它放在正文的前面。 论文提要应当以最概括、最简洁的语言 写出，内容包括本课题所要解决的问题、 方法、以及获得的结果和结论。</p>
<h4 id="题目"><a class="header-anchor" href="#题目"></a>题目</h4>
<ul>
<li>题目（title）是说明<em>要做的实验研究是属于哪方面的</em>的问题。 一般要求在题目中既要指出<code>自变量</code>，也要指出<code>因变量</code></li>
</ul>
<h4 id="引言"><a class="header-anchor" href="#引言"></a>引言</h4>
<ul>
<li>在引言（<code>foreword</code>）中一般要求说明此实验的意义以及题目产生的过程，提出问题的背景材料或提出问题的假设，最好能引经据典，把这类实验的来龙去脉指出来。当然，语句要简练，一般不超过一千字。
<ol>
<li>简单介绍实验中用到的方法、要测的心理特点或要演示的心理现象</li>
<li>说明关于这方面的经典结论</li>
<li>自己对实验的分析 和假设</li>
<li>本实验的理论意义和实践意义。</li>
</ol>
</li>
</ul>
<h4 id="方法"><a class="header-anchor" href="#方法"></a>方法</h4>
<ul>
<li>
<p>这一部分的总的要求是尽可能<em>详尽而准确</em>地描述各个成分，目的是能够使别人<em>重复</em>你的研究。</p>
<ul>
<li>
<p>被试</p>
</li>
<li>
<p>材料和仪器</p>
<p>实验程序</p>
<ul>
<li>实验的原则、方法、步骤、指示语是什么、要控制什么条件等。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="结果"><a class="header-anchor" href="#结果"></a>结果</h4>
<ul>
<li>要如实地以描述和数量的形式把主要结果呈现出来。</li>
<li>结果只要陈述事实，不要解释研究结果，更不要夹叙夹议。</li>
<li>实验的原始记录不要放在结果中，如有必要可放在文 章的附录中。 实验结果必须将原始材料整理后用图或表呈现出来。</li>
<li>表格要分类列出，切忌把所有的结果都填在一张大表 中，各处理的平均数、标准差和统计检验水平都要列出来。</li>
<li>仅有图表是不够的，你要告诉读者根据图表发现了什么。</li>
<li>要交代清楚所使用的统计检验方法及结果，是否表现出显著性差异，接受或拒绝虚无假设。</li>
</ul>
<h4 id="讨论"><a class="header-anchor" href="#讨论"></a>讨论</h4>
<ul>
<li>是整个报告最关键的部分之一</li>
<li>讨论应与前言相呼应。</li>
<li>分析和讨论部分包括：
<ul>
<li>Summarizing the findings</li>
<li>Evaluating the method</li>
<li>Suggest modifications and extensions</li>
</ul>
</li>
</ul>
<ol>
<li>从实验的实施过程方面分析，如” 被试疲劳了”、”主试有点急躁”、” 仪器不灵敏”等；</li>
<li>从研究方法方面分析，如”平均差 误法得出的只是近似值”、”信号检测 论的两个指标比较灵敏”等；</li>
<li>从理论的角度分析，这方面的论述 一般比较少。</li>
</ol>
<h4 id="结论"><a class="header-anchor" href="#结论"></a>结论</h4>
<ul>
<li>说明本实验证实了或否定了什么假设。</li>
<li>结论一般以条文形式、用简短的语句表达出来。</li>
<li>结论应具有客观性和恰当的概括性。</li>
<li>结论一定要<strong>具体</strong>，不可夸大本研究的结果和适用范围。</li>
</ul>
<h4 id="参考文献"><a class="header-anchor" href="#参考文献"></a>参考文献</h4>
<ul>
<li>要把参考文献（references）的题目、出处、作者、出版日期都写明，以便查找。 文献的顺序一般以在文章中出现的先后 为序，也可按出版社的规定。</li>
</ul>
<h4 id="附录"><a class="header-anchor" href="#附录"></a>附录</h4>
<ul>
<li>学生型的实验报告一般要把全部的原始资料都列入附录（<code>appendix</code>）。因为同 一结果，不同的人，在不同的时候都可<br>
以进行不同的分析和处理。另外，重要 的实验材料、指示语等也应列入附录。</li>
</ul>
]]></content>
      <categories>
        <category>Psychology</category>
      </categories>
      <tags>
        <tag>实验心理学</tag>
      </tags>
  </entry>
  <entry>
    <title>第三章-实验设计</title>
    <url>/2021/07/04/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E5%AE%9E%E9%AA%8C%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p>Outline</p>
<ul>
<li>第一节 实验设计的基本类型
<ul>
<li>一、被试者内设计</li>
<li>二、被试者间设计</li>
<li>三、混合设计</li>
</ul>
</li>
<li>第二节 多变量实验技术
<ul>
<li>一、多自变量实验的优点</li>
<li>二、多因素实验设计</li>
<li>三、拉丁方设计</li>
</ul>
</li>
<li>第三节 实验数据的统计分析（略）</li>
</ul>
<span id="more"></span>
<h1 id="第一节-实验设计的基本类型"><a class="header-anchor" href="#第一节-实验设计的基本类型"></a>第一节 实验设计的基本类型</h1>
<ul>
<li>实验设计的概念
<ul>
<li>实验设计乃是进行科学实验前做的具体 计划。它主要是控制实验条件和安排实 验程序的计划。它的目的在于找出实验 条件和实验结果之间的关系，做出正确 的结论，来检验解决问题的假设。</li>
</ul>
</li>
<li>实验设计的内容
<ul>
<li>①刺激变量(或刺激变项)的确定及其呈现的方式；</li>
<li>②反应变量(或反应变项)的指标及其测量方法；</li>
<li>③对一切有关变量(或变项)的控制措施；</li>
<li>④确定被试总体及被试样本人数和选择被试的方法；</li>
<li>⑤拟定主试在实验开始前对被试者要说的指示语；</li>
<li>⑥规定实验次数；</li>
<li>⑦安排实验程序；</li>
<li>⑧规定使用仪器的型号；</li>
<li>⑨规定处理实验数据的方法。</li>
</ul>
</li>
<li>每一个实验设计都必须回答三个基本问题
<ol>
<li>实验采用多少自变量？ 例如在一个阅读速度的研究中取“照明强度”为自变量。</li>
<li>各自变量内又采用多少处理水平？ 例如照明强度又分为强、中、弱等处理水平。</li>
<li>在各自变量和各处理水平中用相同的被试者，还是用不同的被试者？</li>
<li>根据这三个条件的组合，就可构成许多不同类型的实验设计。 <code>被试内设计</code>、<code>被试间设计</code>、<code>混合设计</code></li>
</ol>
</li>
</ul>
<h2 id="被试内设计"><a class="header-anchor" href="#被试内设计"></a>被试内设计</h2>
<ul>
<li>也叫<code>单组实验设计（within-subjects design)</code>，是每个被试须接受自变量的所有情况的处理。</li>
<li>基本原理：每个被试参与所有的实验处理，然 后比较系统被试在不同处理下的行为变化。</li>
<li>在实验研究中，如果实验者主要想研究每一个被试对实验处理所引起的行为上的变化，可考虑采用被试内设计。 被试内设计可分为三种子类型：1、实验前后设计；2、定时系列设计；3、抵消实验条件的设计。</li>
</ul>
<h3 id="实验前后设计"><a class="header-anchor" href="#实验前后设计"></a>实验前后设计</h3>
<ul>
<li>指在实验条件处理前对被试进行观测结果与实验条件处理所做的同样观测结果加以对比的设计。即，这种设计类型是实验（处理）前后的比较设计。</li>
<li>优点：
<ul>
<li>能较明显地检测出实验处理的效果如何；</li>
<li>对被试的需要量较少， 一组被试当两组被试用，无须设控制组，不但提高效率，被试变量也得到较好控 制。</li>
</ul>
</li>
<li>缺点：
<ul>
<li>前后两次观测之间存在时间间隔，会带来外来影响；</li>
<li>易产生顺序误差</li>
</ul>
</li>
</ul>
<h3 id="定时系列设计"><a class="header-anchor" href="#定时系列设计"></a>定时系列设计</h3>
<ul>
<li>指实验<em>处理前对一组被试作一系列的定时重复观测，然后实施实验处理</em>。在对被试作一系列的定时重复观测，分析自变量（实验处理）对因变量的关系</li>
<li>优点：除具有前后设计的优点，还具有
<ul>
<li>降低由于一次观测而得到被试不正常行为的 率；</li>
<li>提供测量过程中的信息。</li>
</ul>
</li>
<li>缺点：</li>
<li>由于更多次的观测，势必延长实验时间，从而会有更多的外来影响；</li>
<li>也正是更多次的观测，更易引起顺序误差，更易导致练习、疲劳、紧张或厌烦等效应</li>
</ul>
<h3 id="抵消实验条件的设计"><a class="header-anchor" href="#抵消实验条件的设计"></a>抵消实验条件的设计</h3>
<ul>
<li>
<p>指抵消实验过程中无关变量的一种设计。 前面讲到，有些无关变量在某些实验情况下既不能被消除，又不能保持恒定。 例如，单组实验往往由于前一处理影响后一处理的效果，产生顺序误差。为了 抵消顺序误差，最简单的方法就是用ABBA的排列顺序来安排实验顺序。</p>
</li>
<li>
<p>优点：</p>
<ul>
<li>能较好地控制被试变量；</li>
<li>能较好地控制顺序误差；</li>
<li>时间上比较经济。</li>
</ul>
</li>
<li>
<p>缺点：</p>
<ul>
<li>反应变量在时间维度（轴）上的关系是线性时才能使用。</li>
<li>对有些实验不适用。如用两种学习方法学习同一实验材料</li>
</ul>
</li>
</ul>
<h2 id="被试间设计"><a class="header-anchor" href="#被试间设计"></a>被试间设计</h2>
<ul>
<li>被试间设计是要求每个被试（组）只接 受一个自变量的处理，对另一被试者 （组）进行另一种处理，故又称<code>独立组设计</code></li>
<li>包括<code>随机组设计</code>和<code>配对组设计</code></li>
<li>被试间设计的统计检验——独立样本的差异显著性</li>
</ul>
<h3 id="随机组设计"><a class="header-anchor" href="#随机组设计"></a>随机组设计</h3>
<ul>
<li>将被试随机分配在不同的组内接受不同的自变量处理。</li>
<li>随机组设计的基本假设是将被试随机分配到不同的组，若对各组用同一样的课题，在系统的条件下进行测量，其结果就成为系统组，则他们的成绩在统计上应是相等的。</li>
<li>如何做到随机分组？
<ul>
<li>同时分配法
<ul>
<li>抽签法</li>
<li>笔划法</li>
<li>报数法</li>
</ul>
</li>
<li>次第分配法
<ul>
<li>简便法：按被试出现在实验的先后分配</li>
<li>区内随机法</li>
</ul>
</li>
</ul>
</li>
<li>随机组设计的优缺点
<ul>
<li>优点：
<ul>
<li>用随机分配被试者的方法可 制两组被试者变量的差异，分组方法简单可行。</li>
<li>由于对每一被试者只作一次观测，可消除某些实验误差，如消除学习误差的影响。</li>
</ul>
</li>
<li>缺点是：
<ol>
<li>分成等组的方法仍欠精密。</li>
<li>若两组在不同时期观测，就有可能插入实验以外的偶发事件，影响因变量的观测结果。</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="配对组设计"><a class="header-anchor" href="#配对组设计"></a>配对组设计</h3>
<ul>
<li>
<p>也叫对等组设计、匹配组设计，是<code>随机组设计</code>的一种扩展。目的是使各组的特性更加相同。这种设计可以控制组内变 异和组间变异。</p>
</li>
<li>
<p>匹配被试就是对全部被试进行预备测验， 测验的性质与正式实验的性质是类似的， 或者说是相关的，然后按测验成绩均匀地形成组。</p>
</li>
<li>
<p>配对设计的优缺点</p>
<ul>
<li>优点：在实验处理之前，就把<code>组间变异</code>缩到最小，并使各组内变异比单独的随 机分配更接近相等。因此，这种设计能 对被试个别差异给予更多的控制，小型实验用配对设计，其效果比用随机分组的效果更为显著。</li>
<li>缺点：实验者因分配被试而大大增加工作量。</li>
</ul>
</li>
<li>
<p>被试内和被试间设计比较</p>
<ul>
<li>被试内设计：也叫单组实验设计，是每个被试须接受<code>自变量</code>的所有情况的处理。</li>
<li>被试间设计：被试间设计是要求每个被试者只接受一种实验处理，对另一被试 者进行另一种处理，故又称独立组设计</li>
</ul>
</li>
</ul>
<h2 id="混合设计"><a class="header-anchor" href="#混合设计"></a>混合设计</h2>
<ul>
<li>混合设计是指在一个研究中有些自变量按组内设计安排，有些自变量按组间设计安排。一般说来，<strong>如果一种自变量很可能会影响另一种自变量，那么对这些自变量按组间设计安排，其余的自变量按组内设计安排</strong></li>
</ul>
<h4 id="配对组设计的基本模式"><a class="header-anchor" href="#配对组设计的基本模式"></a>配对组设计的基本模式</h4>
<h1 id="第二节-多变量实验技术"><a class="header-anchor" href="#第二节-多变量实验技术"></a>第二节 多变量实验技术</h1>
<h2 id="多变量实验的优点"><a class="header-anchor" href="#多变量实验的优点"></a>多变量实验的优点</h2>
<ul>
<li>
<p>效率高</p>
<p>有两个自变量的实验要比分别做两个只有单一自变量的实验效率要高，也就是说事半功倍，花同样的时间，做了一倍， 甚至二倍、三倍的工作。</p>
</li>
<li>
<p>实验控制较好</p>
<p>做一个实验时某些控制变量比进行两个实验时更易于控制和恒定。如被试者条件是一样的，同一个被试者，同样的身心 状况。再如时间条件也是一样的，日期相同、时间相同。其他条件就更不用说了，如相同的外界环境、相同的温度、相同的湿度等等。这就在很大程度上排除了许多实验误差，减 少了实验污染。</p>
</li>
<li>
<p>实验结果更有价值 有多种自变量的实验所得的结果，由于在多种情况下都证明是确实的，这样就比多个单独实验所概括的结果更有价值。</p>
</li>
</ul>
<h2 id="多因素实验设计"><a class="header-anchor" href="#多因素实验设计"></a>多因素实验设计</h2>
<ul>
<li>
<p>多因素实验设计是指在实验中<strong>包括两个或两个以上因素(自变量)，并且每个因素都有两个或两个以上 的水平，各因素的各个水平互相结合，构成多种组合处理</strong>的一种实验设计，又称<code>完全随机析因设计</code></p>
</li>
<li>
<p>在完全随机析因设计中，研究者可以考察各个自变 量交互作用对因变量的主要影响效应(交互作用)， 并同时考察各自变量对同一因变量的主要影响效应 (主效应)，以及考察一个因素的各个水平在另一个 因素的某个水平上的效应(简单效应)；在心理学的 实验研究中，这种设计具有很大的实用价值</p>
</li>
<li>
<p>多因素析因设计的<code>主要效应</code>与<code>交互作用的效应</code></p>
<ul>
<li><code>主效应</code>是指由每个单独因素(自变量)所引起的 因变量的变化</li>
<li><code>交互作用的效应</code>是指当一个因素(自变量)<strong>对因变量影响大小因其他因素的水平或安排的不同而有所不同时，所产生的交互作用影响因变量的结果</strong>。相反，如果某一因素(自变量)对因变量影响大小，不受其他因素的水平或安排的影响，我们就说这个因素与其他因素是没有交互作用的。</li>
</ul>
</li>
</ul>
<h2 id="拉丁方设计"><a class="header-anchor" href="#拉丁方设计"></a>拉丁方设计</h2>
<ul>
<li>拉丁方设计（或拉丁方格设计）（<code>Latin－square design</code>）是多变量实验设计中一种较为常用的设计方 案。</li>
<li>心理实验中采用<code>循环法</code>平衡实验顺序对实验结果的影响，就使实验顺序、被试者差异都作为一个自变量来处理。 只要是实验中<strong>自变量的个数（因素）与实验处理水平 数相同，而且这些自变量之间没有交互作用的存在</strong>时， 都可采用拉丁方设计方案。</li>
</ul>
<h1 id="第三节-实验数据的统计分析"><a class="header-anchor" href="#第三节-实验数据的统计分析"></a>第三节 实验数据的统计分析</h1>
]]></content>
      <categories>
        <category>Psychology</category>
      </categories>
      <tags>
        <tag>实验心理学</tag>
      </tags>
  </entry>
  <entry>
    <title>第二章-实验研究的基本问题</title>
    <url>/2021/07/04/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%AE%9E%E9%AA%8C%E7%A0%94%E7%A9%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>Outline</p>
<ul>
<li>实验研究中的变量及其控制</li>
<li>实验的效度</li>
<li>实验的信度</li>
<li>实验材料的收集与分析和综合</li>
</ul>
<span id="more"></span>
<h1 id="实验研究中的变量及其控制"><a class="header-anchor" href="#实验研究中的变量及其控制"></a>实验研究中的变量及其控制</h1>
<ul>
<li>
<p><strong>实验的灵魂：控制</strong></p>
</li>
<li>
<p>实验控制的目的：<strong>探索人的心理和行为发生、发展变化的原因</strong></p>
</li>
<li>
<p>实验具有三个优点：</p>
<ul>
<li>在实验的方法中，实验者可以在他愿意时，使事件产生，可以充分地进行精密的观察。</li>
<li>实验在同样条件下是可以重复的，别人可以验证 它。</li>
<li>系统地变化条件，可以追究与此相随的事件的变化。</li>
</ul>
</li>
<li>
<p>什么是<code>变量</code></p>
<ul>
<li><strong>变量（<code>variable</code>）是指在数量上或质量上可变的事物的属性</strong>
<ul>
<li>变量包括<code>作业变量</code>（刺激变量）、<code>环境变量</code>、<code>机体变量</code><br>
• 在一个具体的实验中，变量分为<code>自变量</code>、<code>因变量</code> 和<code>额外变量</code>。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="变量的类型"><a class="header-anchor" href="#变量的类型"></a>变量的类型</h2>
<h3 id="自变量"><a class="header-anchor" href="#自变量"></a>自变量</h3>
<ul>
<li>定义
<ul>
<li><strong>在实验中实验者所操纵的、对被试者的反应产生影响的变量</strong>称为<code>自变量</code>；</li>
<li>自变量的类型
<ul>
<li><code>作业变量</code>（刺激变量、任务变量）</li>
<li><code>环境自变量 </code></li>
<li><code>被试者变量</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="因变量"><a class="header-anchor" href="#因变量"></a>因变量</h3>
<ul>
<li>因为自变量的变化而产生的<em>现象变化（行为表现）</em>，称为<code>因变量</code>。
<ul>
<li>反应的速度</li>
<li>反应的准确性</li>
<li>反应的难度</li>
<li>反应的次数或机率</li>
<li>反应的强度</li>
</ul>
</li>
</ul>
<h3 id="额外变量"><a class="header-anchor" href="#额外变量"></a>额外变量</h3>
<ul>
<li>
<p>凡是对<code>因变量</code>产生影响的实验条件都称为<code>相关变量</code>；</p>
</li>
<li>
<p>对因变量不产生影响的实验条件称为<code>无关变量</code> （或无关变项）。</p>
</li>
<li>
<p>在相关变量中，实验者用以研究的变量称为自变量，实验者不用于研究的那些相关变量称为额外相关变量，或简称为<code>额外变量</code>。 由于在实验中额外变量是必须加以控制的，所以额外变量也被称为<code>控制变量</code>。</p>
</li>
<li>
<p>评价一项实验设计的好坏的一个<strong>重要依据</strong>就是 <em>研究者能否成功地控制那些额外变量</em>。</p>
</li>
<li>
<p>心理学实验中典型的额外变量</p>
<ul>
<li>实验者效应 (罗森塔尔)</li>
<li>要求特征（霍桑效应、安慰剂效应)
<ul>
<li><code>霍桑效应</code>指的是在行为田野实验[<code>Field Experiment</code>]中由于研究对象意识到自己正在被研究而带来的<strong>方法上的人为效应</strong>。这种意识导致他们对于数据收集过程这一社会条件作出反应,而不是对于研究者试图研究的实验处理作出反应</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="变量的操纵"><a class="header-anchor" href="#变量的操纵"></a>变量的操纵</h2>
<h3 id="自变量的控制"><a class="header-anchor" href="#自变量的控制"></a>自变量的控制</h3>
<ul>
<li>在实验中对自变量的操纵、变化称为自变量的控制。</li>
<li>对自变量的控制，<strong>首先要对自变量进行严格的规定</strong>，对心理学中一些含混不清的变量必 须使之<strong>操作定义</strong>化，只有这样才能进行实验。
<ul>
<li>操作定义：指用可感知、度量的事物、时间、现象和方法对变量或指标作出具体的界定。</li>
<li>例如，把“刚刚感受到”定义为“50%次感受到”，就可 测定感觉阈限了。</li>
<li>又如，疲倦（<code>fatigue</code>）没有一个共同的起点和尺度，怎么测量呢？如果定义为“工作效率的下降”，那么就可以进 行测量和比较了。</li>
</ul>
</li>
<li>其次，对于在刺激维度上<em>连续变化</em>的自变量，要做好三项工作：
<ol>
<li>要确定好自变量的范围</li>
<li>要选一定数量的<code>检查点</code></li>
<li>要确定好各检查点之间的间距。</li>
</ol>
</li>
</ul>
<h3 id="因变量的控制"><a class="header-anchor" href="#因变量的控制"></a>因变量的控制</h3>
<ul>
<li>
<p>把实验中的被试者的反应控制在主试者所设想的方向上，这就是反应的控制问题。</p>
</li>
<li>
<p>以人作被试者，往往用<code>指示语</code>来控制被试者的反应。</p>
</li>
<li>
<p>指示语乃是心理实验中主试者给被试者交代任务时说的话。</p>
</li>
<li>
<p>使用指示语时，应注意在允许的范围内做到引起动机，激发兴趣。被试者来到实验室时，不一定对参 加实验感兴趣。因此主试者必须利用言词来引起他 们的兴趣。在可能的范围内，告诉他们实验目的与 应用价值，使他们认识到参与和合作的意义。</p>
</li>
<li>
<p>反应指标的选择</p>
<ul>
<li>在心理学实验中，一般常用的指标有：
<ul>
<li>绝对阈限</li>
<li>差别阈限</li>
<li>反应时</li>
<li>反应持续时间</li>
<li>反应程度</li>
<li>完成量</li>
<li>错误率</li>
<li>完成一定的作业所需要的时间</li>
<li>达到一定基准所需要的次数</li>
<li>口头报告</li>
</ul>
</li>
</ul>
</li>
<li>
<p>选择指标的<strong>条件</strong>主要有：</p>
<ul>
<li>有效性，即指标充分代表当时的现象或过程的程度，也称为效度。</li>
<li>客观性</li>
<li>数量化</li>
</ul>
</li>
</ul>
<h3 id="额外变量的控制"><a class="header-anchor" href="#额外变量的控制"></a>额外变量的控制</h3>
<ul>
<li>排除法</li>
<li>恒定法</li>
<li>匹配法</li>
<li>随机化法</li>
<li>抵消平衡法</li>
<li>统计控制法</li>
</ul>
<h1 id="实验效度"><a class="header-anchor" href="#实验效度"></a>实验效度</h1>
<ul>
<li>
<p><strong>实验效度</strong>是指<strong>实验方法能达到实验目的的程度</strong>。</p>
</li>
<li>
<p>实验目的是验证假设，验证自变量和因变量之间的关系，使实验结果的推论可用以解释和预测其他同类现象。</p>
</li>
<li>
<p>由于不同的实验者在设计上和<em>对额外变量的控制程度</em>极不相同，实验的效度也会有很大的不同。</p>
</li>
<li>
<p>此外，每种实验都有几个不同的组成部分，其中每一部分也会影响整个实验的效度。</p>
</li>
<li>
<p>了解影响实验效度的诸因素，将有助于我们评价实验设计的质量，提高实验设计的科学性。</p>
</li>
<li>
<p>实验效度主要包括<code>内部效度</code>和<code>外部效度</code>。</p>
</li>
<li>
<p>实验的内部效度和外部效度是相互联系、相互影响的。提高实验内部效度的措施可能会降低 其外部效度，而提高实验外部效度的措施又可能会降低其内部效度。</p>
</li>
<li>
<p>这两种效度的相对重要性，主要取决于实验的 目的和实验的要求。一般而言，在实验中控制 额外变量的程度越大，则对因果关系的测量就 越有效。因此，可以在保证实验内部效度的前题下，采取适当措施以提高外部效度</p>
</li>
</ul>
<h2 id="影响实验内部效度的因素"><a class="header-anchor" href="#影响实验内部效度的因素"></a>影响实验内部效度的因素</h2>
<ul>
<li>实验的<strong>内部效度</strong>是指实验中的<strong>自变量与因变量之间的因果关系的明确程度</strong>。</li>
<li>一项实验的<code>内部效度</code>高，就意味着<code>因变量</code>的变化确系由特定的<code>自变量</code>引起的。</li>
<li>由于除了<code>自变量</code>以外，任何<code>额外变量</code>都可能对因变量产生影响，导致实验结果的混淆。这样我们就难以判定实验中自变量与因变量之间的关系的确定性。</li>
<li>因此，要使实验具有较高的<code>内部效</code>度，就必须控制各种<code>额外变量</code>。</li>
<li>在设计实验时，如果能考虑到以下六个方面的因素， 将有助于提高实验的内部效度。</li>
</ul>
<h3 id="生长和成熟"><a class="header-anchor" href="#生长和成熟"></a>生长和成熟</h3>
<ul>
<li>除了实验中的自变量可能使个体行为发生变化外，个体本身的生长和成熟也是使其行为变化的重要因素。 特别是在以幼小的儿童为被试者而又采用单组前测后 测实验的情况下，生长和成熟因素的影响就更大。</li>
<li><strong>单组前测后测实验</strong>通常是实验处理之前先对被试者的某种行为作一次测量，实验处理后再以同样方法测量 一次，两次测量之差即表示实验变量（即自变量）产生的效果。</li>
<li>很明显，这种设计忽略了前后两次测量之间被试者的 生长和成熟因素，其实验效果易受生长和成熟因素的 混淆，从而降低了内部效度。</li>
<li>解决的主要办法是<strong>增设同样条件的控制组</strong>进行比较。</li>
</ul>
<h3 id="前测的影响"><a class="header-anchor" href="#前测的影响"></a>前测的影响</h3>
<ul>
<li>一般情况下，前后两次测量的结果会有一定的差异，后测的分数将比前测的高。这中间包括练习因素、临场经验、以及对实验目的的敏感程度，从而提 高了后测的成绩。特别是前后两次测量时间较近，这 一因素的影响就更显著。</li>
</ul>
<h3 id="被试者的选择偏性"><a class="header-anchor" href="#被试者的选择偏性"></a>被试者的选择偏性</h3>
<ul>
<li>在对被试者进行分组时，如果没有用随机取样和随机分配的方法，在实验处理之前，他们<strong>在各方面并不相等或有偏性</strong>，从而造成实验结果的混淆，降低了<code>内部效度</code>。</li>
</ul>
<h3 id="被试者的缺失"><a class="header-anchor" href="#被试者的缺失"></a>被试者的缺失</h3>
<ul>
<li>如果是一项长期的实验，要保持原实验被试者的人数不变是相当困难的。即使开始参加实验的被试者样本 是经过随机取样和随机分配的，但由于被试者的中途缺失，常常使缺失后的被试者样本难以代表原来的样本。这就降低了内部效度。</li>
</ul>
<h3 id="实验程序的不一致"><a class="header-anchor" href="#实验程序的不一致"></a>实验程序的不一致</h3>
<ul>
<li>在实验过程中，实验仪器、控制方式的<strong>不一致</strong>，测量程度的变化，实验处理的扩散和交流等都可能混淆实验变量（即<code>自变量</code>）的效果。实验者知道实验目的所产生的“实验者效应”以及被试者知道实验目的或其自己正被研究所产生的“霍桑效应”和“安慰剂效应” 等都将混淆实验变量（即自变量）的效果，从而降低 了内部效度。</li>
</ul>
<h3 id="统计回归"><a class="header-anchor" href="#统计回归"></a>统计回归</h3>
<ul>
<li>统计回归现象是，第一次测量平均值偏高者，第二次 测量平均值有趋低的倾向（向常态分布的平均数回 归）；第一次测量平均值偏低者，第二次测量平均值 有趋高的倾向（也向常态分布的平均数回归）</li>
<li>因此<em>第二次测验虽在实验处理之后,其升高或降低只是 受统计回归的影响,可能并非是实验变量(即自变量所 产生的效果</em>)</li>
</ul>
<h2 id="影响实验外部效度的因素"><a class="header-anchor" href="#影响实验外部效度的因素"></a>影响实验外部效度的因素</h2>
<ul>
<li>实验的<strong>外部效度</strong>是指<strong>实验结果能够普遍推论到样本的总体和其他同类现象中去的程度</strong>，即<strong>实验结果的普遍代表性和适用性</strong>。</li>
<li>以人的行为为对象所获得的实验结果， 其推论法往往有相当的局限性。</li>
<li>实验的外部效度主要受下列三方面的影响：</li>
</ul>
<h3 id="实验环境的人为性"><a class="header-anchor" href="#实验环境的人为性"></a>实验环境的人为性</h3>
<ul>
<li>实验是在控制条件下进行的，实验环境的人为 性可能使某些实验结果难以用来解释日常生活中的行为现象。
<ul>
<li>实验室中的仪器设备会影响被试者的典型行为。</li>
<li>被试者参与实验的<code>动机</code>也会影响其行为表现。</li>
</ul>
</li>
<li>而在实验室之外的日常生活中，就不会有这些因素的影响。因此，实验结果还不能完全等同 于实验室之外的日常行为现象</li>
</ul>
<h3 id="被试者样本缺乏代表性"><a class="header-anchor" href="#被试者样本缺乏代表性"></a>被试者样本缺乏代表性</h3>
<ul>
<li>从理论上讲，从事于实验的被试者必须具有代表性、 必须从将来预期推论、解释同类行为现象的总体中进 行随机取样。但实际上这是很难做到的。</li>
<li>因为，如果总体很大，即使能够随机取样，但心理学 实验的被试者通常是自愿的，所以也很难把被随机选 上的人全都请来做实验。</li>
<li>如果总体是无限的（例如，“七岁儿童”就是一个无 限的总体，其包括过去的、现在的、将来的所有七岁 儿童），随机取样实际上是行不通的。这样的实验结 果自然会降低其外部效度。</li>
</ul>
<h3 id="测量工具的局限性"><a class="header-anchor" href="#测量工具的局限性"></a>测量工具的局限性</h3>
<ul>
<li>实验者对实验变量（即自变量）和反应变量的操作性定义往往是以所使用的测量工具的测量结果来加以考虑的。</li>
<li>例如，把成就动机作为一个因变量，实验者常以某 种成就动机量表所测得的分数来界定并评定其强度。 但成就动机的测量工具有各种不同的形式，所测量 出的分数并不代表同一种成就动机及其强度。如果 在实验时采用的是某一种成就动机的量表，那么所 得出的实验结果便不能推论到采用其他成就动机的 量表的情况中去</li>
</ul>
<h1 id="实验信度"><a class="header-anchor" href="#实验信度"></a>实验信度</h1>
<h2 id="考察实验信度的方法"><a class="header-anchor" href="#考察实验信度的方法"></a>考察实验信度的方法</h2>
<h3 id="推断统计"><a class="header-anchor" href="#推断统计"></a>推断统计</h3>
<h3 id="实验验证"><a class="header-anchor" href="#实验验证"></a>实验验证</h3>
<p>三种实验验证方法</p>
<ul>
<li>直接</li>
<li>系统验证</li>
<li>概念验证</li>
</ul>
<h4 id="直接验证"><a class="header-anchor" href="#直接验证"></a>直接验证</h4>
<ul>
<li>直接验证是指在尽可能保持原实验方法 的情况下在实际中重复它。</li>
</ul>
<h4 id="系统验证"><a class="header-anchor" href="#系统验证"></a>系统验证</h4>
<ul>
<li>所谓系统验证，就是<em>系统变化那些被认为与实验结果不相关的因素</em>，考察是否会出现同样的实验结果。 也就是说，如果原始实验中发现的某种现象是真的，那么，尽管重做中一些因素发生了变化， 但它仍然该出现</li>
</ul>
<h4 id="概念验证"><a class="header-anchor" href="#概念验证"></a>概念验证</h4>
<ul>
<li>所谓概念验证，就是根据一个较为抽象 的概念或者理论模型设计实验，验证实 验结果。</li>
</ul>
<h1 id="实验材料的收集与分析和综合"><a class="header-anchor" href="#实验材料的收集与分析和综合"></a>实验材料的收集与分析和综合</h1>
<ul>
<li>心理学研究的资料类别
<ul>
<li>计数资料（<code>enumeration data</code>）就是按个体的某一属性或某一反应属性进行分类记数的资料。这种资料只反映个体间有质的不同，而没有量的差别。</li>
<li>2.计量资料（<code>measurment data</code>）就是用测量所得到的<strong>数值</strong>的大小来表示的资料。</li>
<li>等级资料（<code>ranked data</code>）介于计数资料和计量资 料之间，可称为半计量资料。</li>
<li>描述性资料（<code>descriptive data</code>）即非数量化的资料。在心理学研究中，数量化的资料固然重要，但 描述性资料也同样重要。</li>
</ul>
</li>
<li>研究资料的整理与解释
<ol>
<li>很多统计方法都有其前提条件</li>
<li>根据实验所得到的资料，在验证实验的假设时，不外有两种结果：
<ol>
<li>如果实验结果与假设相一致，则进一步演绎而找出更深的假设，推进实验；</li>
<li>如果实验结果与假设不一致，则修正假设， 反复实验；或放弃它；或建立新的假设，再进行 实验。</li>
</ol>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Psychology</category>
      </categories>
      <tags>
        <tag>实验心理学</tag>
      </tags>
  </entry>
  <entry>
    <title>第四章-反应时间</title>
    <url>/2021/07/04/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E5%8F%8D%E5%BA%94%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<p>Outline</p>
<ul>
<li>一、反应时间的性质</li>
<li>二、影响反应时间的因素</li>
<li>三、反应时间的测定方法</li>
</ul>
<span id="more"></span>
<h1 id="一、反应时间的性质"><a class="header-anchor" href="#一、反应时间的性质"></a>一、反应时间的性质</h1>
<ul>
<li>反应时间是心理实验中使用最早、应用最广泛的反应变量之一。</li>
<li>对反应时间的研究最先始于天文学家<code>Bessel</code>对于人差方程的研究。</li>
<li>最早将反应时间的测量用于心理实验的是荷兰生理学家<code>Donders</code>.</li>
<li>1879年以后，冯特及其学生对反应时间进行了一系列实验研究。</li>
<li>认知心理学兴起后，为了揭示信息加工过程和特点， 反应时间的测量也获得进一步的发展，出现了一些新的研究方法，如相加因素法、开窗实验法、速度准确率分离技术。</li>
</ul>
<h2 id="（一）反应时间的概念"><a class="header-anchor" href="#（一）反应时间的概念"></a>（一）反应时间的概念</h2>
<ul>
<li>反应时间是指<strong>从刺激的呈现到反应的开始之间的时距</strong>。</li>
<li>反应时间也被称为“反应的潜伏期”。</li>
</ul>
<h2 id="（二）反应时间研究的简史"><a class="header-anchor" href="#（二）反应时间研究的简史"></a>（二）反应时间研究的简史</h2>
<ul>
<li>
<p>1796年英国格林尼治天文台公案；</p>
</li>
<li>
<p><code>Brandly</code>的眼耳法（1820年）、人差方程；</p>
</li>
<li>
<p>1850年Helmholtz运用反应时间来测定神经传导速度;</p>
</li>
<li>
<p>1868年，Donders发明分离反应时间的实验（反应时间的相减法），分离出简单反应时、辨别反应时和选择反应时；</p>
</li>
<li>
<p>1879年及以后，冯特及其学生对反应时间进行了系列研究。 其中，Cattell揭示了选择反应时长于简单反应时的原因—— 在反应的准备上不同；</p>
</li>
<li>
<p>20世纪50年代中期以后，认知心理学兴起。 认知心理学主张研究<strong>认知活动本身的结构和过程</strong>，并把这些过程看作<strong>信息加工过程</strong>。而任何过程都需要时间，因而可利用<code>反应时间</code>这一客观指标，来对加工过程进行研究，以揭示信息加工过程和信息加工的各个阶段。</p>
<ul>
<li>例如，运用反应时间相减法，安排两种作业A和B， 其中A包含B所没有的某个特定心理过程，而在其 他方面相同，那么这两个作业的反应时间之差就 是那个特定的心理过程所需要的时间</li>
</ul>
</li>
<li>
<p>1969年，<code>Sternberg</code>在相减法的基础上发展 了反应时间的相加因素法。相加因素法假定，完成一个作业所需的时间是一系列信息加工阶段分别所需时间的总和。</p>
</li>
<li>
<p>由于反应时间的<code>相减法</code>和<code>相加因素法</code>都不是直接测得某一特定加工阶段所需的时间，而 是要通过间接的比较才能得到，并且相应的 加工阶段也要通过严密的推理才能被发现。 因此，<code>Hamilton</code>等（1977）、<code>Hockey</code>等（1981） 发展了一种新的实验技术——<code>“开窗”实验</code>。</p>
</li>
<li>
<p>Meyer等（1988）速度-准确率分解技术 （<code>speed-accuracy decomposition, SAD</code>）</p>
</li>
</ul>
<h2 id="（三）简单反应时间和选择反应时间"><a class="header-anchor" href="#（三）简单反应时间和选择反应时间"></a>（三）简单反应时间和选择反应时间</h2>
<ul>
<li>简单反应时间是给予被试者以单一的刺激， 要求他作同样的反应。被试的任务很简单， 他预先已知道将有什么样的刺激出现并需 要作出什么样的反应。</li>
<li>选择反应时间是根据不同的刺激物，在各种可能性中选择一种符合要求的反应。</li>
</ul>
<h2 id="（四）反应时间实验的要求"><a class="header-anchor" href="#（四）反应时间实验的要求"></a>（四）反应时间实验的要求</h2>
<ul>
<li>进行反应时间实验，和其他心理实验一样，都要很严格地控制实验条件，像刺激的强度和刺激持续的时间等等。除此之外，还要讲求策略思想，应严格遵循一定的程序和要求</li>
</ul>
<ol>
<li>对被试反应的要求
<ul>
<li><u>首先从被试反应要求上看，应避免出现过早反应或其他错误的反应</u>。</li>
<li>防止出现“假反应”的有效措施是在实验中插入侦察试验（<code>detection test</code>），即给预备信号之后并不呈现刺激。</li>
</ul>
</li>
<li>选择反应数目
<ul>
<li>选择反应的数目需要与辨别的刺激数目相等，即有几种反应就要有几种刺激。</li>
</ul>
</li>
</ol>
<h2 id="（五）反应时间的因变量"><a class="header-anchor" href="#（五）反应时间的因变量"></a>（五）反应时间的因变量</h2>
<ul>
<li>反应时实验中有二个<u>基本因变量</u>（或依变项） （dependent variable），即<code>速度（speed</code>和<code>准确性 （accuracy）</code>。</li>
<li>反应时间实验中的一个突出问题就是权衡反应速度和反应准确性的相互关系。</li>
<li>人们都有这样的常识，当一个人很快去完成某件事时，他会比慢慢地做某件事犯更多的错误。反之， 如果某人很正确地做某件事时，速度上就会变慢。 心理学家称这种关系为速度-准确性权衡。</li>
<li>帕彻拉（<code>Pachella</code>，1974）的实验结果表明，为了使错误率降低到2％，反应时将增加100毫秒</li>
<li>这说明根据速度-准确性权衡，为了减少错误率，反应时间就会延长。</li>
<li>在进行反应时的实验时,应考虑速度和准确性两个指标,当然,有时可以同时选择两个指标,有时可以选择其中一个指标。但是在只选择其中一个指标时，应对另一个指标有所交代，说明其可以忽略不计的原因。 这是反应时实验中一种重要技术。</li>
</ul>
<h1 id="二、影响反应时间的因素"><a class="header-anchor" href="#二、影响反应时间的因素"></a>二、影响反应时间的因素</h1>
<h2 id="反应时间受刺激变量的影响"><a class="header-anchor" href="#反应时间受刺激变量的影响"></a>反应时间受刺激变量的影响</h2>
<ul>
<li>
<p>在刺激变量中，对反应时间影响比较大的因素有：刺激的不同类型、强度、复杂程度及 刺激呈现的方式等。</p>
</li>
<li>
<p>因刺激的不同类型而异</p>
<ul>
<li>不同类型的刺激通过特定的通道(<strong>感觉道</strong>)作用于各个感官，它们的反应时间是不同的。<u>同一感觉道里，刺激的部位不同，反应时间也有差异</u></li>
</ul>
<p>不同感觉道的反应时间(被试为有训练的成人)</p>
<table>
<thead>
<tr>
<th>感觉道</th>
<th>反应时间（ms）</th>
</tr>
</thead>
<tbody>
<tr>
<td>触觉</td>
<td>117 ~ 182</td>
</tr>
<tr>
<td>听觉</td>
<td>120 ~182</td>
</tr>
<tr>
<td>视觉</td>
<td>150 ~ 225</td>
</tr>
<tr>
<td>冷觉</td>
<td>180 ~ 240</td>
</tr>
<tr>
<td>温觉</td>
<td>210 ~ 300</td>
</tr>
<tr>
<td>嗅觉</td>
<td>308 ~ 1082</td>
</tr>
<tr>
<td>味觉</td>
<td>400 ~ 1000</td>
</tr>
<tr>
<td>痛觉</td>
<td>400~1000</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h2 id="反应时间受机体变量影响"><a class="header-anchor" href="#反应时间受机体变量影响"></a>反应时间受机体变量影响</h2>
<ul>
<li>影响反应时间的主要刺激变量如上所述，但外在原因需通过内在条件而起作用，和其他心理现象一样，反应时间也是以机体的内部状态为中介而对外界刺激作出反应的。</li>
<li>影响反应时间的机体变量为数众多，主要有： 机体适应水平、准备状态、练习次数、动机、 年龄因素和个别差异、酒精和药物作用等。
<ol>
<li>适应水平
<ul>
<li>适应（adaptation）在此处指在刺激物的持续作用下，<code>感受器</code>发生的变化。<code>感受器</code>的<code>适应水平</code>对反应时间有着明显的影响。</li>
</ul>
</li>
<li>准备状态
<ul>
<li>准备状态（readiness）是指机体对于某种行为作出的准备情况。这个材料表明，感受器适应水平的变化对反应时间的影响 。</li>
<li>试者在主试者发出“预备”口令到刺激呈 现这段预备时间内的准备状态也是影响反应时间的因素之—。在这时距内，被试者处于 积极准备状态，力求尽快对刺激作出反应。 如果预备时间太短，被试者可能来不及准备； 如果太长，被试者的准备状态又可能出现衰退而延误反应。</li>
</ul>
</li>
<li>练习次数
<ul>
<li>在心理实验中，<code>练习</code>（exercise）是一个<code>控制变量</code>，即一个潜在的自变量。练习与反应时间的关系相当密切。在一定范围内，练习次数越多（上百次），反应会越快，反应时间 减少的趋势是逼近一个极限而稳定下来。</li>
</ul>
</li>
<li>动机
<ul>
<li>动机（motive）是由于人的某种需要所引起的有意识或无意识的行为指向。</li>
<li>反应时间实验中被试者易受某种额外动机的影响。</li>
</ul>
</li>
<li>年龄因素和个体差异
<ul>
<li>一般认为，自发育阶段至25岁前（青少年阶段），<u>反应时间随年龄增长而减少</u>，起初减少得快，以后较慢。</li>
<li>戈茨达克（<code>Gottsdamker</code>，1968）在对一组年 龄为 18～93 岁的成人被试者的研究中注意到， 随着年龄的增长，感觉-运动反应时间逐渐延 长。</li>
<li>此外，还有人发现在25岁以后到 60 岁的一段 时间内，反应时间的增长极为缓慢，但60 岁以后反应时间开始有了较大增加</li>
<li>个体差异（或个别差异）指不同个体之间在 品质和属性上存在的任何差别。</li>
<li>菲萨尔（<code>Fessard</code>，1926）曾对1000名男性成人 被试者作听觉简单反应时间的测定，结果发 现反应时间的均数分配大致上呈常态。但是老年组的变异系数较显著地高于青年和中年组，说明老年组在感觉-运动反应速度方面存 在着较大的个别差异。</li>
</ul>
</li>
<li>酒精及药物作用
<ul>
<li>酒精在脑神经系统达到一定浓度时，中枢神经系统逐渐迟钝，对周围情况变化的反应速度大大下降。 如果是酗酒，其反应时间将延长2～3倍，甚至更长</li>
</ul>
</li>
</ol>
</li>
</ul>
<h1 id="三、反应时间的测定方法"><a class="header-anchor" href="#三、反应时间的测定方法"></a>三、反应时间的测定方法</h1>
<ul>
<li>反应时间的测量有两个用途:
<ul>
<li>作为成就的指标,因为对一件工作越精通,就完成得越快.</li>
<li>也可作为借以产生一种行为结果的内部过程<u>复杂性</u>的指标,因为内部过程越复杂,所消耗的时间便越长.</li>
</ul>
</li>
</ul>
<h2 id="（一）反应时间的相减法"><a class="header-anchor" href="#（一）反应时间的相减法"></a>（一）反应时间的相减法</h2>
<ul>
<li>
<p>逻辑</p>
<p>安排两种反应作业，其中一个 作业包含另一个作业所没有的一个处理（加工）阶段，并在其 他方面均相同，从这两个反应时间之差来判定此加工阶段。这 种实验在原则上是合理的，在实践上是可行的。认知心理学也 正是应用减数法反应时间实验提供的数据来推论其背后的信息加工过程的。</p>
</li>
<li>
<p>评价</p>
<p>使用这种方法要求实验者对实验任务引起 的刺激与反应之间的一系列心理过程有精确的认识，并且要求 两个相减的任务中共有的心理过程要严格匹配，这一般是很难 的。这些弱点大大限制了减数法的广泛使用</p>
</li>
</ul>
<h2 id="（二）反应时间的相加因素法"><a class="header-anchor" href="#（二）反应时间的相加因素法"></a>（二）反应时间的相加因素法</h2>
<ul>
<li>
<p>Intro</p>
<ul>
<li>在20世纪，Sternberg（1969）发展了唐德斯的减数法反应时间，提出了加法法则，称之为加因 素法（additive factors method）。这种实验 并不是对减数法反应时间的否定，而是减数法的发 展和延伸。</li>
<li>相加因素法反应时间实验认为完成一个作业所需的时间是<u>一系列信息加工阶段分别需要的时间的总和</u>， 如果发现可以影响完成作业所需时间的一些因素， 那么单独地或成对地应用这些因素进行实验，就可 以观察到完成作业时间的变化。</li>
</ul>
</li>
<li>
<p>逻辑</p>
<ul>
<li>如果两个因素的效应是互相制约的，即一个因素的效应可以改变另一因素的效应，那么这两个因素只作用于同一个信息加工阶段；如果两个因素的效应是分别独立的，即<u>可以相加</u>，那么这两个因素各自作用于不同的加工阶段。</li>
<li>这样，通过单变量和多变量的实验，从完成作业的时间变化来确定这一信息加工过程的各个阶段。</li>
<li>因此，重要的不是区分出每个阶段的加工时间，而是辨别认知加工的顺 序，并证实不同加工阶段的存在。</li>
<li>加因素法假定，当两个实验因素影响两个不同的阶段时，它们将对总反应时间产生独立的效应，即不管一个因素的水平变化如何，另一个因素 对反应时间的影响是恒定的。这样称两个因素的影响效应是相加的。</li>
<li>加因素法的基本手段是探索有相加效应的因素，以区分不同的加工阶段。</li>
</ul>
</li>
<li>
<p>评价</p>
<ul>
<li>相加因素法的弱点是，它的基本前提是人的信息加工是系列加 工，这一点受到很多心理学家的质疑。因为加因素法反应时实 验是以信息的系列加工而不是平行加工为前提的，因而有人认为其应用会有很多限制。</li>
<li>更为直接的问题是关于加因素法反应时实验的逻辑，即能否应 用可相加和相互制约的效应来确认信息加工的阶段。 <code>Pachella</code>（1974）指出，两个因素也许能以相加的方式对同一个加工阶段起作用，也许能对不同的加工阶段起作用并且 相互发生影响。</li>
<li>还有人指出，加因素法反应时实验本身并不能指明一些加工阶段的顺序，在这个方面，它极大地依赖于一定的理论模型</li>
</ul>
</li>
</ul>
<h2 id="（三）反应时间的“开窗”实验"><a class="header-anchor" href="#（三）反应时间的“开窗”实验"></a>（三）反应时间的“开窗”实验</h2>
<ul>
<li>Intro
<ul>
<li>前面谈到的减数法和加因素法反应时实验 难以直接得到某个特定加工阶段所需的时间，并且还要通过严密的推理才能被确认。 如果能够比较直接地测量每个加工阶段的时间，而且也能比较明显地看出这些加工 阶段，那就好像打开窗户一览无遗了。这 种实验技术称为“开窗”实验，它是反应时实验的一种新形式。</li>
</ul>
</li>
<li>评价
<ul>
<li>不难看到，这种“开窗”实验的优点是引人注目的，但也存在着一些问题。例如， 可能在后一个加工阶段出现对前一个阶段的复查，贮存阶段有时还包含对前面字母 的转换结果的提取和整合，并且它难以与反应组织分开来</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Psychology</category>
      </categories>
      <tags>
        <tag>实验心理学</tag>
      </tags>
  </entry>
  <entry>
    <title>第五章-传统心理物理法</title>
    <url>/2021/07/04/%E7%AC%AC%E4%BA%94%E7%AB%A0-%E4%BC%A0%E7%BB%9F%E5%BF%83%E7%90%86%E7%89%A9%E7%90%86%E6%B3%95/</url>
    <content><![CDATA[<p>Outline</p>
<ul>
<li>
<p>一、阈限的性质</p>
</li>
<li>
<p>二、测定阈限的3种基本方法</p>
<ul>
<li>最小变化法</li>
<li>恒定刺激法</li>
<li>平均差误法</li>
</ul>
</li>
<li>
<p>三、心理量表法</p>
<span id="more"></span>
</li>
</ul>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<h2 id="什么是心理物理学"><a class="header-anchor" href="#什么是心理物理学"></a>什么是心理物理学</h2>
<ul>
<li>Definition： 研究心理量和物理量之间的 关系的科学。
<ul>
<li>心理物理学(<code>psychophysics</code>)这个名词是由 两个希腊字根<code>psyche</code>和<code>physike</code>所组成。</li>
</ul>
</li>
<li>物理量是指对身体各感官的刺激；心理 量是指各种感觉或主观印象。如：
<ul>
<li>– 亮度（物理量）——明度（心理量）</li>
<li>– 强度（物理量）——响度（心理量）</li>
</ul>
</li>
</ul>
<h2 id="心理物理学的发展和介绍"><a class="header-anchor" href="#心理物理学的发展和介绍"></a>心理物理学的发展和介绍</h2>
<ul>
<li>心理物理学的先驱是G. T. Fechner（1801-1887）。</li>
<li>Fechner通过对感觉强度与刺激强度之间的数量关系的 长期研究，发展出了测量感觉的基本方法。</li>
<li>一百多年来，心理物理学方法不断发展，但它的中心问题仍然是物理量和心理量之间的数量关系的问题。</li>
<li>心理物理学方法所处理的问题大体上可以分为两大类
<ul>
<li>– 感觉阈限的测量；</li>
<li>– 阈上感觉的测量，也就是心理量表的制作。</li>
</ul>
</li>
<li>自从本世纪50年代，W. P. Tanner, Jr.和J. A. Swets把<code>信号检测论</code>（signal detection theory，SDT）引入心理学领域 以来，又为心理物理学的研究提供了一个新的有力工 具。</li>
</ul>
<h1 id="一、阈限的性质"><a class="header-anchor" href="#一、阈限的性质"></a>一、阈限的性质</h1>
<h2 id="感觉阈限的界定"><a class="header-anchor" href="#感觉阈限的界定"></a>感觉阈限的界定</h2>
<ul>
<li>
<p><strong>刚刚能引起感觉的最小刺激强度</strong>被叫做<code>绝对阈限</code>。</p>
</li>
<li>
<p><strong>刚刚能引起感觉的最小差别</strong>叫做<code>差别阈限</code>。</p>
</li>
<li>
<p>人的感受性的这种随机性变化，在每一种感觉道中都能发现。这种随机变化往往与以下几个方面有关:</p>
<ol>
<li>如何测量阈限有关；</li>
<li>被试对任务的注意程度及其态度有关；</li>
<li>被试的感受性暂时出现不稳定的摇摆有关。</li>
</ol>
</li>
<li>
<p>不过，这种随机变化的感觉，其次数分配基本上呈常态分布</p>
</li>
<li>
<p>根据统计学，可以把那个可以刚刚引起感觉的最小刺激强度以其算术平均数来表示。而这个平均数恰好有50％的实验次数报告为“有感觉” 的刺激强度，由此可见，阈限是个<strong>统计值</strong>。<br>
表1 某些近似的觉察阈限 感觉种类 觉察阈限值</p>
</li>
<li>
<p>因而，我们把<code>阈限</code>定义为：<i>有50％的实验次数能引起积极反应的刺激之值；同理，把差别阈限定义为有50％的实验次数能引起差别感觉的 那个刺激强度之差。</i></p>
</li>
</ul>
<h2 id="差别阈限"><a class="header-anchor" href="#差别阈限"></a>差别阈限</h2>
<ul>
<li>
<p>关于差别阈限 表2 最优条件下各种感觉道的韦伯比例</p>
</li>
<li>
<p>1846年E. H. Weber发表了他关于重量差别阈限的研究， 系统地阐明了差别阈限和标准刺激之间的关系。</p>
</li>
<li>
<p>他指出差别阈限和标准刺激成正比，并且差别阈限和 标准刺激的比例是一个常数，通常用<strong>△I/I = k</strong> 表示。在这里，△I代表<code>差别阈限</code>，I代表<code>标准刺激强度</code>，k是小于1的常数。k也称作韦伯比例或韦伯分数。</p>
</li>
<li>
<p>不同感觉道的韦伯分数是不同的。后来，Fechner把这 个关于差别阈限的规律称为<code>韦伯定律</code>（Weber Law）</p>
</li>
</ul>
<p>最优条件下各种感觉道的韦伯比例</p>
<table>
<thead>
<tr>
<th>感觉道</th>
<th>韦伯比例</th>
</tr>
</thead>
<tbody>
<tr>
<td>音高/ 200Hz</td>
<td>1/333</td>
</tr>
<tr>
<td>重压觉</td>
<td>1/77</td>
</tr>
<tr>
<td>视明度/100光子</td>
<td>1/62</td>
</tr>
<tr>
<td>举重/300g</td>
<td>1/52</td>
</tr>
<tr>
<td>响度/100dB, 1000Hz</td>
<td>1/11</td>
</tr>
<tr>
<td>橡胶气味</td>
<td>1/10</td>
</tr>
<tr>
<td>皮肤压觉/5g/mm^2</td>
<td>1/7</td>
</tr>
</tbody>
</table>
<ul>
<li>韦伯定律的主要贡献
<ol>
<li>给我们提供了一个比较辨别能力的指标。</li>
<li>第二，可对不同感觉道的感受性进行比较</li>
</ol>
</li>
</ul>
<h1 id="二、测定阈限的3种基本方法"><a class="header-anchor" href="#二、测定阈限的3种基本方法"></a>二、测定阈限的3种基本方法</h1>
<h2 id="最小变化法"><a class="header-anchor" href="#最小变化法"></a>最小变化法</h2>
<h3 id="Intro-2"><a class="header-anchor" href="#Intro-2"></a>Intro</h3>
<ul>
<li>又叫极限法、最小可觉差法，是测量阈限的直接方法；</li>
<li>最小变化法的刺激由递减和递增的两个系列组成；</li>
<li>每次呈现刺激后让被试报告他是否有感觉；</li>
<li>刺激的增减应尽可能地小，目的是系统地探求被试由一类反应到另一类反应的<u>转折点</u>，即在多强刺激时，由有感觉 变为无感觉，或由无感觉变为有感觉。每个系列的转折点 就是该系列的<code>绝对阈限</code>。</li>
</ul>
<h3 id="用最小变化法测定绝对阈限"><a class="header-anchor" href="#用最小变化法测定绝对阈限"></a>用最小变化法测定绝对阈限</h3>
<h4 id="自变量"><a class="header-anchor" href="#自变量"></a>自变量</h4>
<ul>
<li>用极限法测定绝对阈限，自变量是刺激序列。</li>
<li>刺激序列要按递增或递减系列交替呈现。
<ul>
<li>递增时，刺激要从阈限以下的某个强度开始；</li>
<li>递减时，刺激系列的起点要大于阈限的某个强度；</li>
<li>一般应选10到20个强度水平。</li>
</ul>
</li>
<li>为了使测定的阈限准确，并使每一刺激系列的 阈限能相对稳定，一般递增和递减刺激系列要分别测定50次左右（共100 次左右）、刺激应由实验者操纵。</li>
<li>为了避免被试者形成定势，每次呈现刺激的起点不应固定不变，而应随机变化。</li>
</ul>
<h4 id="因变量（反应变量）"><a class="header-anchor" href="#因变量（反应变量）"></a>因变量（反应变量）</h4>
<ul>
<li>用极限法测定绝对阈限的反应变量时， 要求被试以<strong>口头报告</strong>方式表示。</li>
<li>当刺激呈现之后，被试感觉到有刺激， 就报告“有”，当被试没感觉到有刺激， 就报告“无”，其依<strong>据是被试的内省， 而不是刺激是否呈现</strong>。</li>
</ul>
<h4 id="阈限的确定（计算）"><a class="header-anchor" href="#阈限的确定（计算）"></a>阈限的确定（计算）</h4>
<ul>
<li>在一个刺激系列中，被试者报告“有” 和“无”这两个报告相应的两个刺激强度的中点就是这个系列的阈限。</li>
</ul>
<h4 id="误差及其控制"><a class="header-anchor" href="#误差及其控制"></a>误差及其控制</h4>
<ul>
<li>用极限法求绝对阈限经常会产生一些误差。</li>
<li>在这些误差中，有些是由直接对感觉产生干扰的因素引起的；还有些是非感觉方面的因素引起的，如习惯和期望、练习和疲劳、时间和空间等等。</li>
<li>这些在测定阈限的过程中经常起作用，以致使测定结果产生一定倾向的误差。这类误差叫做<code>常误</code>（constant error）。</li>
<li>极限法测定绝对阈限产生的误差主要有 四种：
<ul>
<li>习惯误差和期望误差</li>
<li>练习误差和疲劳误差。</li>
</ul>
</li>
</ul>
<h4 id="习惯误差和期望误差"><a class="header-anchor" href="#习惯误差和期望误差"></a>习惯误差和期望误差</h4>
<ul>
<li>消除: 采用抵消平衡设计（即ABBA设计）：
<ul>
<li>第一次：递增（A）</li>
<li>第二次：递减（B)</li>
<li>第三次：递减（B)</li>
<li>第四次：递增（A)</li>
</ul>
</li>
</ul>
<h5 id="练习误差和疲劳误差"><a class="header-anchor" href="#练习误差和疲劳误差"></a>练习误差和疲劳误差</h5>
<ul>
<li><code>练习误差</code>（error of practice）是由于实验的多次重复，被试逐渐熟悉了实验情景，对实验产生了兴趣和学习效果，而导致反应速度加快 和准确性逐步提高的一种<code>系统误差</code>。</li>
<li>与此相反，由于实验多次重复，随着实验进程 而发展的疲倦或厌烦情绪的影响，而导致被试 反应速度减慢和准确性逐步降低的一种<code>系统误差</code>，称之为<code>疲劳误差</code>（error of fatigue）。</li>
<li>随着时间的进展，练习可能使阈限降低，而疲劳可能使阈限升高</li>
</ul>
<h3 id="用最小变化法测定差别阈限"><a class="header-anchor" href="#用最小变化法测定差别阈限"></a>用最小变化法测定差别阈限</h3>
<h4 id="自变量-2"><a class="header-anchor" href="#自变量-2"></a>自变量</h4>
<ul>
<li>用极限法测定差别阈限时，每次要呈现两个刺激，让被试比较，其中一个是<code>标准刺激</code>，即刺激是固定的，其强度大小不变；另一个是<code>比较刺激</code>又称变异刺激，即刺激的强度按由小而大或由大而小顺序排列。</li>
<li>标准刺激和比较刺激可同时呈现，标准刺激在每次比较时都出现，比较刺激按递增或递减系列，以测定绝对阈限的同样方法与标准刺激匹配呈现。</li>
</ul>
<h4 id="因变量"><a class="header-anchor" href="#因变量"></a>因变量</h4>
<ul>
<li>用极限法测定差别阈限的反应变量要求 被试以口头报告方式表示，一般用三类反应，将比较刺激与标准刺激加以比较，</li>
<li>当比较刺激大于标准刺激时，主试记录 “＋”；当比较刺激等于标准刺激时， 主试记录“=”；当比较刺激小于标准刺激时，主试记录“-”。当被试在比较时表示怀疑，可记作“？”</li>
</ul>
<h4 id="阈限的确定-计算"><a class="header-anchor" href="#阈限的确定-计算"></a>阈限的确定(计算)</h4>
<ul>
<li>确定差别阈限时先要求得一系列的数据，这些数据有：
<ol>
<li>在<strong>递减系列</strong>中最后一次“＋”到非“+” 之间的中点为差别阈限的<strong>上限</strong> ；第一次非“-” 到“-” 之间的中点为差别阈限的<strong>下限</strong> ；</li>
<li>在<strong>递增系列</strong>中最后依次“-”到非“-” 之 间的中点为差别阈限的下限；第一次非“＋” 到“＋”之间的中点为差别阈限的<strong>上限</strong></li>
<li>在上限与下限之间的距离为<code>不肯定间距</code>。</li>
<li>不肯定间距的中点是<code>主观相等点</code>。在理论上主观相等点（或主观等点）应与标准刺激 相等，但实际上两者有一定的差距，这个差距称为常误。</li>
<li>取不肯定间距的一半或者取上差别阈和 下差别阈之和的一半为<code>差别阈限</code>。</li>
</ol>
</li>
</ul>
<h4 id="误差及其控制-2"><a class="header-anchor" href="#误差及其控制-2"></a>误差及其控制</h4>
<ul>
<li>与用极限法求绝对阈限一样，在测定差别阈限时，也必须想方设法控制常误。<br>
• 除了要控制习惯和期望误差外，还要控 制因标准刺激和比较刺激同时呈现所造 成的误差（空间误差）或者因先后呈现 所造成的（顺序误差）。<br>
• 控制方法可采用多层次的ABBA法。</li>
</ul>
<h2 id="恒定刺激法"><a class="header-anchor" href="#恒定刺激法"></a>恒定刺激法</h2>
<h3 id="Intro-3"><a class="header-anchor" href="#Intro-3"></a>Intro</h3>
<ul>
<li>恒定刺激法（或固定刺激法）又叫正误法、次数法，通常由5-7个刺激组成，这几个刺激在实 验过程中保持不变。</li>
<li>它是心理物理学中最准确、应用最广的方法， 可用于测定绝对阈限、差别阈限和等值，还可用于确定其他很多种心理值。</li>
<li>此法的特点是：根据出现次数来定阈限，即以次数的整个分布求阈限。</li>
</ul>
<h4 id="流程"><a class="header-anchor" href="#流程"></a>流程</h4>
<ol>
<li>主试从预备实验中选出少数刺激，一般是5到7个， 这几个刺激值在整个测定过程中是固定不变的；</li>
<li>选定的每种刺激要向被试呈现多次，一般每种刺激呈现50到200次；</li>
<li>呈现刺激的次序事先经随机安排，不让被试知道。 用以测量绝对阈限，即无需标准值，如用以确定差别阈 限或等值，则需包括一个标准值；</li>
<li>此法在统计结果时必须求出各个刺激变量引起某 种反应（有、无或大、小）的次数。</li>
</ol>
<ul>
<li>特别要注意的是，此法在实验之前需要选定刺激。</li>
<li>所选定的刺激最大强度应为每次呈现几乎都能 为被试感觉到的强度，它被感觉到的可能性应<strong>不低于95%</strong>。所选刺激的最小强度应为每次呈现几乎都不能感觉到的强度，它被感觉到的可能性应<strong>不高于5%</strong>。</li>
<li>选定呈现刺激范围之后，再在这个范围内取距离相等的刺激，每种刺激强度呈现<strong>不得少于50 次</strong>。</li>
</ul>
<h4 id="用恒定刺激法测定绝对阈限"><a class="header-anchor" href="#用恒定刺激法测定绝对阈限"></a>用恒定刺激法测定绝对阈限</h4>
<h5 id="自变量-3"><a class="header-anchor" href="#自变量-3"></a>自变量</h5>
<ul>
<li>用恒定刺激法测定绝对阈限，是从<u>略高于感觉到略低于感觉这一范围内选5到7个等距的刺激强度</u>。</li>
</ul>
<h5 id="因变量-2"><a class="header-anchor" href="#因变量-2"></a>因变量</h5>
<ul>
<li>用恒定刺激法测定绝对阈限的反应变量要求被试者以<strong>口头报告</strong>方式表示，</li>
<li>在实验中每呈现一次刺激后，被试者若感觉到 了，则报告“有”，主试者记录“+”；被试者<br>
若感觉不到，则报告“无”，主试者就记录 “-”。</li>
<li>然后根据被试者对不同刺激所报告的“有”或 “无”的次数来求出百分数，以此来计算阈限。</li>
</ul>
<h5 id="绝对阈限的计算"><a class="header-anchor" href="#绝对阈限的计算"></a>绝对阈限的计算</h5>
<ul>
<li>直线内插法</li>
</ul>
<h4 id="用恒定刺激法测定差别阈限"><a class="header-anchor" href="#用恒定刺激法测定差别阈限"></a>用恒定刺激法测定差别阈限</h4>
<h5 id="自变量-4"><a class="header-anchor" href="#自变量-4"></a>自变量</h5>
<ul>
<li>用恒定刺激法测定差别阈限，是让被试者将<code>比较刺激</code>与<code>标准刺激</code>加以比较；</li>
<li>标准刺激是能被感觉到的某一刺激强度；</li>
<li>比较刺激可在标准刺激上下一段距离内确定， 一般从完全没被感觉出差别到完全感觉出差别 的范围内选定5到7个刺激强度作为比较刺激。</li>
<li>比较刺激要随机呈现，每个比较刺激与标准刺激至少要比100次。</li>
</ul>
<h5 id="因变量-3"><a class="header-anchor" href="#因变量-3"></a>因变量</h5>
<ul>
<li>用恒定刺激法测定差别阈限的反应变量 要求被试者以<strong>口头报告</strong>方式表示</li>
</ul>
<h6 id="三类反应"><a class="header-anchor" href="#三类反应"></a>三类反应</h6>
<ul>
<li>即“大于”、“等于”和“小于”，分 别记为“+”、“=”和“-”。</li>
<li>让被试作三类反应时，因其中有“等于” 的反应，若被试较为自信，则作出“等 于”的反应就较少；若被试较为谨慎， 则作出“等于”的反应就较多。这样会 直接影响到差别阈限的大小。</li>
<li>这种反应<strong>易受到被试的态度的影响</strong>。</li>
</ul>
<h6 id="二类反应"><a class="header-anchor" href="#二类反应"></a>二类反应</h6>
<ul>
<li>让被试者作“大于”和“小于”两种判断，即使分不清时也要作出其中的一 种判断。</li>
</ul>
<h5 id="差别阈限的计算"><a class="header-anchor" href="#差别阈限的计算"></a>差别阈限的计算</h5>
<h2 id="平均差误法"><a class="header-anchor" href="#平均差误法"></a>平均差误法</h2>
<h3 id="Intro-4"><a class="header-anchor" href="#Intro-4"></a>Intro</h3>
<ul>
<li>平均差误法（或均误法）又称调整法、 再造法、均等法，是最古老且基本的心理物理学方法之一。</li>
<li>虽然它最适用于测量绝对阈限和等值， 但也可用以测量差别阈限</li>
</ul>
<h3 id="流程-2"><a class="header-anchor" href="#流程-2"></a>流程</h3>
<ul>
<li>•呈现一个标准刺激，令被试再造、复制或调节一个比较刺激，使它与标准刺激相等。比较刺激也可由实验者调节，由被试判断</li>
<li>这个方法是要求被试判断什么时候<code>比较刺激</code>和<code>标准刺激</code>相等。</li>
<li>被试判断为与标准刺激相等的比较刺激，并不总是一个固定的数值，而是围绕着一个平均数 变化的一个数。这个变化的范围就是<code>不肯定间距</code>。</li>
<li>不肯定间距的中点就是<code>主观相等点</code>。</li>
<li>通过对主观相等点和不肯定间距的测量，就可以估计<code>差别阈限</code>。</li>
</ul>
<h3 id="用平均差误法测定阈限-用平均差误法测定绝对阈限"><a class="header-anchor" href="#用平均差误法测定阈限-用平均差误法测定绝对阈限"></a>用平均差误法测定阈限 用平均差误法测定绝对阈限</h3>
<h4 id="用平均差误法测定绝对阈限"><a class="header-anchor" href="#用平均差误法测定绝对阈限"></a>用平均差误法测定绝对阈限</h4>
<h5 id="自变量-5"><a class="header-anchor" href="#自变量-5"></a>自变量</h5>
<ul>
<li>用平均差误法测定绝对阈限，是让被试者调整一个比较刺激与一个标准刺激相 等。不过，此时的标准刺激假设为零， 即让被试者每次将比较刺激与“零”相比较。</li>
</ul>
<h5 id="因变量（反应变量）-2"><a class="header-anchor" href="#因变量（反应变量）-2"></a>因变量（反应变量）</h5>
<ul>
<li>用平均差误法测定绝对阈限的<code>反应变量</code>是被试者每次调整比较刺激与标准刺激相等的那个数值。</li>
</ul>
<h5 id="绝对阈限的测定（计算）"><a class="header-anchor" href="#绝对阈限的测定（计算）"></a>绝对阈限的测定（计算）</h5>
<ul>
<li>让被试者每次调到刚刚感觉不到（即与 “零”标准刺激等值），然后把各次测定数值加以平均即为绝对阈限。</li>
</ul>
<h4 id="用平均差误法测定差别阈限"><a class="header-anchor" href="#用平均差误法测定差别阈限"></a>用平均差误法测定差别阈限</h4>
<h5 id="自变量-6"><a class="header-anchor" href="#自变量-6"></a>自变量</h5>
<ul>
<li>用平均差误法测定差别阈限，是向被试者呈现一个标准刺激，让其调整比较刺 激。比较刺激是一种连续的量。在被试 认为接近时，可反复调整，直到其认为满意为止。</li>
</ul>
<h5 id="因变量-4"><a class="header-anchor" href="#因变量-4"></a>因变量</h5>
<ul>
<li>用平均差误法测定差别阈限的反应变量是被试 每次调整的数值，即其认为与标准刺激相等的数值。</li>
<li>由于被试反复测试，每次的结果并不是一个固定的数值，它们是围绕着一个平均数变化的数值。这个变化范围就是不肯定间距。</li>
<li>不肯定间距的中点，即多次调整结果的平均数， 就是主观相等点，主观相等点与标准刺激的差就是常误。</li>
</ul>
<h5 id="绝对阈限的测定（计算）-2"><a class="header-anchor" href="#绝对阈限的测定（计算）-2"></a>绝对阈限的测定（计算）</h5>
<ul>
<li>用平均差误法求差别阈限，所得差别阈限只是一个估计值，平均差误有两种计算方法：
<ol>
<li>把每次调节的结果(或每次的判断)与标准刺激之差的绝对值平均起来作为差别阈限</li>
<li>把每次调节的结果与主观相等点之差的绝对值平均起来作为差别阈限。</li>
</ol>
</li>
</ul>
<h5 id="误差及其控制-3"><a class="header-anchor" href="#误差及其控制-3"></a>误差及其控制</h5>
<ul>
<li>在平均差误法实验中，一般要被试自己操纵实验仪器 来调整比较刺激，使其与标准刺激相等。这就要产生<code>动作误差</code>，亦即因被试所采用的方式不同而产生误差。 若标准刺激和比较刺激是相继呈现的，又易产生<code>时间误差</code>。因此，在实验中应加以控制，控制方法依具体实验不同而不同，一般可采用多层次的<code>ABBA法</code>，还可使比较刺激从小到大，从大到小两方面来进行调整， 以便控制动作误差等</li>
</ul>
<h2 id="测量阈限的三种方法的比较"><a class="header-anchor" href="#测量阈限的三种方法的比较"></a>测量阈限的三种方法的比较</h2>
<ul>
<li>最小变化法的实验程序和计算过程都具体地说明了感 觉阈限的含义，但它会因其渐增和渐减的刺激系列而 产生习惯误差与期望误差。</li>
<li>恒定刺激法的实验结果可以应用各种数学方法加以处 理，因而便于与其它测定感受性的方法进行比较。在 应用3类反应的实验程序时，被试的态度会对差别阈限 值有较大影响。</li>
<li>平均差误法的特点是求等值，它的实验程序容易引起 被试的兴趣，但对不能连续变化的刺激则不能用平均 差误法来测其差别阈限。</li>
</ul>
<h1 id="三、心理量表法"><a class="header-anchor" href="#三、心理量表法"></a>三、心理量表法</h1>
<ul>
<li>
<p>物理刺激可由物理量表来测量</p>
</li>
<li>
<p>心理量的大小却不能用物理量表来测量</p>
</li>
<li>
<p>心理量需要用心理量表来测量</p>
</li>
<li>
<p>从量表有无相等单位和有无绝对零点来分，心理量表可分为<code>顺序量表</code>、<code>等距量表</code>和<code>比例量表</code>三类</p>
</li>
</ul>
<h2 id="顺序量表"><a class="header-anchor" href="#顺序量表"></a>顺序量表</h2>
<ul>
<li>顺序量表的制作方法
<ul>
<li>等级排列法
<ul>
<li>等级排列法是一种制作顺序量表的直接方法。这个方法是把许多刺激同时呈现， 让许多被试者按照一定标准，把这些刺激排成一个顺序，然后把许多人对同一刺激评定的等级加以平均，这样，就能求出每一刺激的各自平均等级，最后， 把各刺激按平均等级排出的顺序就是一个顺序量表</li>
</ul>
</li>
<li>对偶比较法
<ul>
<li>对偶比较法是把所有要比较的刺激配成对，然 后一对一对地呈现，让被试者对于刺激的某一 特性进行比较，并做出判断：这种特性的两个刺激中哪一个更为明显。</li>
<li>配成对的个数是n（n-1）/2</li>
<li>对偶比较法的两类误差及消除
<ul>
<li>如果有五种样品，A、B、C、D、E，则可配成5× （5 -1）/2=10对。</li>
<li>如果各对样品同时呈现，则要消除<code>空间误差</code> --- 即样品在空间中不同方位呈现，于判断时产 生的误差现象。若第一轮以AB形式呈现，则 第二轮中以BA形式呈现即左右颠倒。</li>
<li>如果是相继呈现，则要注意消除<code>时间误差</code> --- 即相等的二个样品在先后不同时间出现，于判断时产生的误差。若第一轮以先A后B次序相 继呈现，则第二轮要按先B后A次序相继呈现</li>
</ul>
</li>
<li>对偶比较法需要注意两点：
<ol>
<li>用这种方法得到的顺序量表，还仅仅 是针对一个被试的心理物理量表，尚不能直 接推广到更大的人群。</li>
<li>这一量表模型<strong>要求对偶比较是可传递的</strong>（transitive），如果刺激A优先于刺激B， 而且刺激B优先于刺激C，那么刺激A优先于刺激C。然而，有些情况下这种传递性难以保证，这时就不能采用对偶比较法</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="等距量表"><a class="header-anchor" href="#等距量表"></a>等距量表</h2>
<ul>
<li>制作等距量表的方法
<ul>
<li>感觉等距法</li>
<li>差别阈限法
<ul>
<li>差别阈限法（或差异阈限法）是制作等距量表 的一种间接方法，通过在不同强度的基础上测 量最小可觉差来实现。<br>
• 具体地说，用任何一种古典的心理物理法测出 感觉的绝对阈，并以此为起点，产生第一个最 小可觉差的刺激强度，以第一个最小可觉差为 基准，再测量第二个最小可觉差……。<br>
• 这样测得许多最小可觉差以后，以刺激强度为 横坐标，以绝对阈以上的最小可觉差数为纵坐 标，画出的心理物理关系图就是等距量表</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="比例量表"><a class="header-anchor" href="#比例量表"></a>比例量表</h2>
<ul>
<li>
<p>比例量表（或比率量表）（<code>ratio scale</code>）既有真正的零点，也是等距的。</p>
</li>
<li>
<p>一个比例量表除含有名称、等级这些等距量表的 特征外，还有一个具有实际意义的绝对零点。</p>
</li>
<li>
<p>由于它具有绝对的零点，且量表上的单位相等， 因此就可进行加、减、乘、除四则运算。</p>
</li>
<li>
<p>在物理学中，我们所用的绝对温度量表就属于这 类量表。更为熟悉的是公制的尺所采用的量表制 度。</p>
</li>
<li>
<p>比例量表的制作方法</p>
<ul>
<li>分段法
<ul>
<li>分段法是制作感觉比例量表的一种最直接的方法。 这个方法是通过把一个感觉量加倍或减半或取任何其他比例来建立心理量表的。</li>
<li>具体作法是呈现一个固定的阈上刺激作为标准， 让被试者调整比较刺激，使它所引起的感觉为标准刺激的一定比例，例如，2倍、3倍、1/2倍、或 1/3倍等等。</li>
<li>每个实验只选定同一个比例进行比较，同一个标 准刺激比较若干次后，再换另外几个标准刺激进行比较。</li>
<li>当把所有的标准刺激都比较完之后，便可用与各标准刺激在感觉上成一定比例的相应的物理量值制成一个感觉比例量表。</li>
</ul>
</li>
<li>数量估量法
<ul>
<li>具体步骤是主试者先呈现一个标准刺激，例如， 一个重量，并赋予标准刺激一个主观值，例如 为10，</li>
<li>然后让被试者以这个主观值为标准，把其他不 同强度比较刺激的主观值，放在这个标准刺激 的主观值的关系中进行判断，并用数字表示出 来。</li>
<li>然后计算出每组被试者对每个比较刺激量估计 的几何平均数或中数，再以刺激值为横坐标， 感觉值为纵坐标，即可制成感觉比例量表。</li>
<li>数量估量法的数据处理：
<ul>
<li>在心理量和物理量关系的实验中，常 会出现特别大的数字，所以数量估计法采用的数据处理通常是<code>几何平均值</code>。 几何平均值定义为n个数值相乘之积的 n次方根</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Psychology</category>
      </categories>
      <tags>
        <tag>实验心理学</tag>
      </tags>
  </entry>
  <entry>
    <title>需求分析</title>
    <url>/2021/12/30/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>流程</li>
<li>面向对象建模
<ul>
<li>顺序图</li>
<li>状态图</li>
<li>OCL</li>
<li>CRC</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h1 id="流程"><a class="header-anchor" href="#流程"></a>流程</h1>
<!--![}(../assets/需求与商业模式设计/需求分析/需求分析 流程.png)-->
<p><img data-src="https://box.nju.edu.cn/f/36ac57c95fc2426dbfd1/?dl=1" alt="流程"></p>
<h2 id="需求细化"><a class="header-anchor" href="#需求细化"></a>需求细化</h2>
<h3 id="用例图"><a class="header-anchor" href="#用例图"></a>用例图</h3>
<!--![用例图](../assets/需求与商业模式设计/需求分析/需求细化 用例图.png)-->
<p><img data-src="https://box.nju.edu.cn/f/a63df9aa2dbc4c0fb74b/?dl=1" alt="用例图"></p>
<h3 id="解决方案细节"><a class="header-anchor" href="#解决方案细节"></a>解决方案细节</h3>
<!--![解决方案细节](../assets/需求与商业模式设计/需求分析/需求细化 解决方案细节.png)-->
<p><img data-src="https://box.nju.edu.cn/f/e3c57151c510429a8548/?dl=1" alt="image-20210114124015315"></p>
<h2 id="需求优先级"><a class="header-anchor" href="#需求优先级"></a>需求优先级</h2>
<!-- ![需求优先级](../assets/需求与商业模式设计/需求分析/ 需求优先级.png)-->
<p><img data-src="https://box.nju.edu.cn/f/41bb457ba755404597b8/?dl=1" alt="需求优先级"></p>
<h2 id="需求协商"><a class="header-anchor" href="#需求协商"></a>需求协商</h2>
<!--![需求协商](..x/assets/需求与商业模式设计/需求分析/需求协商.png)-->
<p><img data-src="https://box.nju.edu.cn/f/1eb8ccf133ca4101b427/?dl=1" alt="需求协商"></p>
<h2 id="建立分析模型"><a class="header-anchor" href="#建立分析模型"></a>建立分析模型</h2>
<ul>
<li>结构化建模（没写）</li>
<li>面向对象建模</li>
</ul>
<h1 id="面向对象建模"><a class="header-anchor" href="#面向对象建模"></a>面向对象建模</h1>
<h3 id="顺序图"><a class="header-anchor" href="#顺序图"></a>顺序图</h3>
<!--![顺序图](../assets/需求与商业模式设计/需求分析/顺序图/顺序图.png)-->
<p><img data-src="https://box.nju.edu.cn/f/8f5a5107a6484b8f92bd/?dl=1" alt="顺序图"></p>
<h4 id="组合"><a class="header-anchor" href="#组合"></a>组合</h4>
<ul>
<li>alt：选择</li>
<li>opt：条件执行</li>
<li>loop：循环</li>
<li>break：跳出循环</li>
<li>par：并行</li>
<li>critical：原子操作，不可被打断</li>
<li>strict：顺序执行</li>
<li>seq：不同生命线的可以并发执行（google和bing或yahoo可以并发，bing和yahoo必须顺序）</li>
</ul>
<!--![组合](../assets/需求与商业模式设计/需求分析/顺序图/组合.png)-->
<p><img data-src="https://box.nju.edu.cn/f/0a0ebf6823e649999154/?dl=1" alt="组合"></p>
<h4 id="示例"><a class="header-anchor" href="#示例"></a>示例</h4>
<!--![示例](../assets/需求与商业模式设计/需求分析/顺序图/实例.png)-->
<p><img data-src="https://box.nju.edu.cn/f/caa040cba7fb48b89a12/?dl=1" alt="示例"></p>
<h3 id="状态图"><a class="header-anchor" href="#状态图"></a>状态图</h3>
<h4 id="简单示例"><a class="header-anchor" href="#简单示例"></a>简单示例</h4>
<!--![状态图](../assets/需求与商业模式设计/需求分析/状态图/状态图.png)-->
<p><img data-src="https://box.nju.edu.cn/f/949e122b1a714fa4be84/?dl=1" alt="状态图"></p>
<h4 id="组合-2"><a class="header-anchor" href="#组合-2"></a>组合</h4>
<!--![组合](../assets/需求与商业模式设计/需求分析/状态图/组合.png)-->
<p><img data-src="https://box.nju.edu.cn/f/c77c0ec287254621942a/?dl=1" alt="状态图"></p>
<h4 id="并发"><a class="header-anchor" href="#并发"></a>并发</h4>
<!--![并发](../assets/需求与商业模式设计/需求分析/状态图/并发.png)-->
<p><img data-src="https://box.nju.edu.cn/f/24a8f8baf35745b480f6/?dl=1" alt="并发"></p>
<h4 id="入口与出口"><a class="header-anchor" href="#入口与出口"></a>入口与出口</h4>
<!--![入口与出口](../assets/需求与商业模式设计/需求分析/状态图/入口与出口.png)-->
<p><img data-src="https://box.nju.edu.cn/f/9bf03c7a04aa46a4b3dc/?dl=1" alt="入口与出口"></p>
<h4 id="决策"><a class="header-anchor" href="#决策"></a>决策</h4>
<!--![决策](../assets/需求与商业模式设计/需求分析/状态图/决策.png)-->
<p><img data-src="https://box.nju.edu.cn/f/ee4b4d9e8a2e46fa952b/?dl=1" alt="决策"></p>
<h4 id="汇集点"><a class="header-anchor" href="#汇集点"></a>汇集点</h4>
<!--![汇集点](../assets/需求与商业模式设计/需求分析/状态图/汇集点.png)-->
<p><img data-src="https://box.nju.edu.cn/f/566d6697d0844bedae8f/?dl=1" alt="汇集点"></p>
<h4 id="终止与历史状态"><a class="header-anchor" href="#终止与历史状态"></a>终止与历史状态</h4>
<!--![终止与历史状态](../assets/需求与商业模式设计/需求分析/状态图/终止与历史状态.png)-->
<p><img data-src="https://box.nju.edu.cn/f/68b6dc280fac4b4b8cd4/?dl=1" alt="终止与历史状态"></p>
<h3 id="对象约束语言OCL"><a class="header-anchor" href="#对象约束语言OCL"></a>对象约束语言OCL</h3>
<h4 id="不变量"><a class="header-anchor" href="#不变量"></a>不变量</h4>
<ul>
<li>类元需要保持它的表达式取值在指定的时间范围内或者指定的条件下始终为“真”</li>
<li>最常见的是用来约束类的属性或者类的方法</li>
</ul>
<!--![OCL](../assets/需求与商业模式设计/需求分析/OCL/OCL.png)-->
<p><img data-src="https://box.nju.edu.cn/f/6d9aac09aa574be384b4/?dl=1" alt="OCL"></p>
<h4 id="前置条件与后置条件"><a class="header-anchor" href="#前置条件与后置条件"></a>前置条件与后置条件</h4>
<ul>
<li>前置条件要求类元在执行操作之前必须保证前置条件的表达式为真</li>
<li>后置条件要求类元在操作执行完成之后必须保证后置条件的表达式为真</li>
</ul>
<!--![前置条件与后置条件](../assets/需求与商业模式设计/需求分析/OCL/前置条件与后置条件.png)-->
<p><img data-src="https://box.nju.edu.cn/f/138cd559eb31466bb0e1/?dl=1" alt="前置条件与后置条件"></p>
<h4 id="监护条件"><a class="header-anchor" href="#监护条件"></a>监护条件</h4>
<ul>
<li>在状态机到达转移点时，监护条件的表达式需要根据实际状态进行评估，并只有在表达式实际取值为“真”的情况下才进行转移</li>
</ul>
<!--![监护条件](../assets/需求与商业模式设计/需求分析/OCL/监护条件.png)-->
<p><img data-src="https://box.nju.edu.cn/f/88565b7887974fc6801d/?dl=1" alt="监护条件"></p>
<h4 id="示例-2"><a class="header-anchor" href="#示例-2"></a>示例</h4>
<!--![示例](../assets/需求与商业模式设计/需求分析/OCL/示例.png)-->
<p><img data-src="https://box.nju.edu.cn/f/ef1467f1f062428a86dc/?dl=1" alt="示例"></p>
<h3 id="CRC"><a class="header-anchor" href="#CRC"></a>CRC</h3>
<ul>
<li>
<p>Candidates、 Responsibilities和 Collaborators三者的缩写</p>
</li>
<li>
<p>基于CRC可以建立一种索引卡片，被称为CRC卡，每个卡片代表了一个被发现的候选对象</p>
</li>
</ul>
<h4 id="示例-3"><a class="header-anchor" href="#示例-3"></a>示例</h4>
<!--![CRC示例](../assets/需求与商业模式设计/需求分析/CRC/CRC示例.png)-->
<p><img data-src="https://box.nju.edu.cn/f/20bba339259544969486/?dl=1" alt="CRC示例"></p>
]]></content>
      <categories>
        <category>Business</category>
      </categories>
      <tags>
        <tag>需求与商业模式创新</tag>
      </tags>
  </entry>
  <entry>
    <title>需求与商业模式创新  readme</title>
    <url>/2021/12/29/%E9%9C%80%E6%B1%82%E4%B8%8E%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F-readme/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>阅读说明</li>
</ul>
<span id="more"></span>
<ul>
<li>Powered by NJU BOX, 图床可能会失效，若发现这种情况，请私信我</li>
<li>想要文档和pdf的也可以私信我</li>
</ul>
]]></content>
      <categories>
        <category>Business</category>
      </categories>
      <tags>
        <tag>需求与商业模式创新</tag>
      </tags>
  </entry>
  <entry>
    <title>需求管理</title>
    <url>/2021/12/29/%E9%9C%80%E6%B1%82%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>需求管理的3个方法:
<ul>
<li>维护需求基线</li>
<li>实现需求跟踪</li>
<li>控制变更</li>
</ul>
</li>
</ul>
<span id="more"></span>
<p><img data-src="https://box.nju.edu.cn/f/303407a4d68e4f44b20c/?dl=1" alt="需求管理的流程"></p>
<h1 id="维护需求基线"><a class="header-anchor" href="#维护需求基线"></a>维护需求基线</h1>
<h2 id="需求基线"><a class="header-anchor" href="#需求基线"></a>需求基线</h2>
<ol>
<li>基线：已经通过正式评审和批准的规格说明或产品，它可以作为进一步开发的基础，并且只有通过正式的变更控制过程才能修改它</li>
<li>基线是被<strong>明确和固定</strong>下来的需求集合，是项目团队需要在某一特定产品版本中实现的<strong>特征和需求集合</strong></li>
<li>需求基线是需求开发过程的成果总结，在后续产品生命周期中持续发挥作用。</li>
<li>一般将需求基线编写成文档纳入配置管理。</li>
</ol>
<!--![需求基线](../assets/需求与商业模式设计/需求管理/需求基线.png)---->
<p><img data-src="https://box.nju.edu.cn/f/7e1e002473b64699a3f9/?dl=1" alt="需求基线"></p>
<h2 id="需求基线的内容"><a class="header-anchor" href="#需求基线的内容"></a>需求基线的内容</h2>
<ol>
<li>标识符(ID)，为后续的项目工作提供一个共同的交流参照。</li>
<li>当前版本号(Version)，保证项目的各项工作都建立在最新的一致需求基础之上。</li>
<li>源头(Source)，在需要进一步深入理解或者改变需求时，可以回溯到需求的源头。</li>
<li>理由(Rational)，提供需求产生的背景知识。</li>
<li>优先级(Priority)，后续的项目工作可以参照优先级进行安排和调度。</li>
<li>状态(Status)，交流和具体需求相关的项目工作状况。</li>
<li>成本、工作量、风险、可变性(Cost、Effort、Risk、Volatility)，为需求的设计和实现提供参考信息，驱动设计和实现工作。</li>
<li>需求创建的日期</li>
<li>和需求相关的项目工作人员，包括需求的作者、设计者、实现者、测试者等</li>
<li>需求涉及的子系统</li>
<li>需求涉及的产品版本号</li>
<li>需求的验收和验证标准</li>
<li>…</li>
</ol>
<h2 id="需求基线的维护"><a class="header-anchor" href="#需求基线的维护"></a>需求基线的维护</h2>
<h3 id="配置管理"><a class="header-anchor" href="#配置管理"></a>配置管理</h3>
<ol>
<li>标识配置项
<ol>
<li><strong>递增数值</strong>，例如1，2，…x；</li>
<li><strong>层次式数值编码</strong>，例如1.1.1，1.2.1，…x.y.z；</li>
<li><strong>层次式命名编码</strong>，例如Order.Place.Date，Order.Place.Register，…Task.Step.Substep</li>
</ol>
</li>
<li>版本控制
<ol>
<li>每一条单独的需求需要进行版本控制</li>
<li>相关的需求文档也需要进行版本控制</li>
<li>每一个刚纳入配置管理的软件需求项赋予一个初始的版本号，并在需求发生变更时更新需求的版本号。</li>
</ol>
</li>
<li>变更控制</li>
<li>访问审计：应当易于被项目涉众访问，记录和审计访问的情况，不应当很随意访问需求基线。</li>
<li>状态报告：反映需求基线的成熟度(变化的幅度越大，成熟度越低)、稳定性(改变的次数越多，稳定性越差)等</li>
</ol>
<h3 id="状态维护"><a class="header-anchor" href="#状态维护"></a>状态维护</h3>
<!--![需求的状态类别](../assets/需求与商业模式设计/需求管理/需求的状态类别.png)-->
<p><img data-src="https://box.nju.edu.cn/f/f2ab3cd5e5184b4b9977/?dl=1" alt="需求的状态类别"></p>
<!--![需求的状态类别2](../assets/需求与商业模式设计/需求管理/需求的状态类别2.png)-->
<p><img data-src="https://box.nju.edu.cn/f/47f5ec8c11c44b6e8639/?dl=1" alt="需求的状态类别"></p>
<h1 id="实现需求跟踪"><a class="header-anchor" href="#实现需求跟踪"></a>实现需求跟踪</h1>
<ol>
<li>避免在开发过程或者演化过程中与需求基线不一致或者偏离的风险</li>
<li>需求跟踪是以软件需求规格说明文档作为基线，在向前和向后两个方向上，描述需求以及跟踪需求变化的能力。</li>
</ol>
<!--![需求跟踪的过程](../assets/需求与商业模式设计/需求管理/需求跟踪的过程.png)-->
<p><img data-src="https://box.nju.edu.cn/f/75b5f9b3ac274101aa2f/?dl=1" alt=""></p>
<h2 id="需求跟踪"><a class="header-anchor" href="#需求跟踪"></a>需求跟踪</h2>
<h3 id="前向跟踪"><a class="header-anchor" href="#前向跟踪"></a>前向跟踪</h3>
<ol>
<li>前向跟踪是指被定义到软件需求规格说明文档之前的需求演化过程
<ol>
<li>向前跟踪到需求：<strong>说明涉众的需要和目标产生了哪些软件需求</strong></li>
<li>从需求向后回溯：<strong>说明软件需求来源于哪些涉众的需要和目标</strong></li>
</ol>
</li>
</ol>
<h3 id="后向跟踪"><a class="header-anchor" href="#后向跟踪"></a>后向跟踪</h3>
<ol>
<li>后向跟踪是指被定义到软件需求规格说明文档之后的需求演化过程
<ol>
<li>从需求向前跟踪：说明软件需求是如何被<strong>后续的开发物件支持和实现</strong>的</li>
<li>回溯到需求的跟踪：说明各种系统开发的物件是<strong>因为什么原因(软件需求)而被开发出来的</strong></li>
</ol>
</li>
</ol>
<h2 id="需求跟踪的用途"><a class="header-anchor" href="#需求跟踪的用途"></a>需求跟踪的用途</h2>
<ol>
<li>需求的后向跟踪可以帮助项目管理者
<ol>
<li>评估需求<strong>变更的影响</strong>。</li>
<li>尽早发现需求之间的<strong>冲突</strong>，避免未预料的产品延期。</li>
<li>可以收集<strong>没有被实现</strong>的需求，并估算这些需求需要的工作量。</li>
<li>发现可以复用的<strong>已有组件</strong>，从而降低新系统开发的时间和精力。</li>
<li>明确需求的<strong>实现进度</strong>，跟踪项目的状态。</li>
</ol>
</li>
<li>需求的后向跟踪可以帮助客户和用户：
<ol>
<li>评价针对用户需求的<strong>产品的质量</strong>。</li>
<li>可以确认成本上没有(昂贵的)<strong>镀金浪费</strong>。</li>
<li>确认验收测试的<strong>有效性</strong>。</li>
<li>确信开发者的<strong>关注点</strong>始终保持在需求的实现上。</li>
</ol>
</li>
<li>需求跟踪中针对具体需求的设计方案选择、设计假设条件以及设计结果等信息可以帮助设计人员
<ol>
<li>验证设计方案正确的满足了需求。</li>
<li>评估需求变更对设计的影响。</li>
<li>在设计完，成很久之后仍然可以理解设计的原始思路。</li>
<li>评估技术变化带来的影响。</li>
<li>实现系统组件的复用。</li>
</ol>
</li>
<li>需求跟踪信息还可以帮助维护人员
<ol>
<li>评估某一个需求变化时对其他需求的影响</li>
<li>评估需求变化时对实现的影响。</li>
<li>评估未变化需求对实现变更的允许度。</li>
</ol>
</li>
</ol>
<h2 id="需求跟踪的内容"><a class="header-anchor" href="#需求跟踪的内容"></a>需求跟踪的内容</h2>
<ol>
<li>需求跟踪的内容依赖于项目的跟踪策略。</li>
<li>最低层次上，需求跟踪仅仅是捕获了产品内部各个系统组件之间的依赖、满足和实现关系。</li>
<li>最低层次上的需求跟踪策略使用者称为低端用户。</li>
<li>实现了工作背景和过程背景捕获的需求跟踪实现者称为高端用户。</li>
<li>产品本身所包含的各种联系、项目的组织过程</li>
</ol>
<h2 id="Traceability-view"><a class="header-anchor" href="#Traceability-view"></a>Traceability view</h2>
<!--![Traceability view](../assets/需求与商业模式设计/需求管理/Traceability view.png)-->
<p><img data-src="https://box.nju.edu.cn/f/f0d41592d6174804890a/?dl=1" alt="Traceability view"></p>
<h2 id="实现方法"><a class="header-anchor" href="#实现方法"></a>实现方法</h2>
<ol>
<li>需求跟踪的实现方法主要有矩阵、实体关系模型和交叉引用。</li>
<li>需求跟踪矩阵是最常用的，如下图所示。
<ol>
<li>优点：跟踪信息清晰易懂</li>
<li>缺点：只能表达二元的跟踪关系。</li>
</ol>
</li>
</ol>
<!--![ 需求跟踪矩阵](../assets/需求与商业模式设计/需求管理/ 需求跟踪矩阵.png)-->
<p><img data-src="https://box.nju.edu.cn/f/28ceb7fd51aa4685b0f6/?dl=1" alt=" 需求跟踪矩阵"></p>
<ol start="3">
<li>实体关系模型：使用实体关系模型来描述需求的跟踪联系，图17-5可以被认为是一个元模型示例。
<ol>
<li>优点：表达多元的跟踪关系，并且建立的跟踪信息可以利用关系数据库来实现、易于查询和维护。</li>
<li>缺点：不够直观，需要实体关系基础。</li>
</ol>
</li>
<li>交叉引用：文档之间建立跟踪关系。
<ol>
<li>优点：直接，利于使用</li>
<li>缺点：只适用于需求文档的处理</li>
</ol>
</li>
</ol>
<h2 id="建立过程"><a class="header-anchor" href="#建立过程"></a>建立过程</h2>
<ol>
<li>认识到需求跟踪的重要性，明确需求跟踪需要解决的问题</li>
<li>说明需求跟踪过程的目标</li>
<li>明确需要捕获的跟踪联系</li>
<li>组织提供资源支持和技术支持</li>
<li>制定有效的过程策略：需求跟踪过程与实际的项目开发工作融合，作为项目开发工作的一部分。</li>
<li>便利需求跟踪信息的使用：为客户、项目管理者以及开发者等项目涉众提供便利的使用途径。</li>
</ol>
<h2 id="需求依赖"><a class="header-anchor" href="#需求依赖"></a>需求依赖</h2>
<ol>
<li>大多数的需求并不是<strong>完全独立</strong>的，它们在一种<strong>复杂</strong>的机制中互相影响</li>
<li>需求之间的依赖联系对很多项目开发工作都有重要影响。例如在表17-3所示的需求依赖关系示例当中，R1依赖于R3和R4，那么在实现、变更或者复用R1时，就必须将R3和R4也考虑在内。</li>
<li>需求依赖联系的特殊性并不在于它的重要性，而在于它是难以发现、建立和维护的</li>
<li>需求交互作用管理：用于<strong>发现、管理和部署</strong>(disposition)需求之间关键联系的活动</li>
</ol>
<!--![需求依赖](x../assets/需求与商业模式设计/需求管理/需求依赖.png)-->
<p><img data-src="https://box.nju.edu.cn/f/32111542811b4f289a20/?dl=1" alt="需求依赖"></p>
<h1 id="需求变更控制"><a class="header-anchor" href="#需求变更控制"></a>需求变更控制</h1>
<h2 id="需求变化"><a class="header-anchor" href="#需求变化"></a>需求变化</h2>
<ol>
<li>需求开发时一个获取、明确并定义需求的过程，并且需求并不是在需求开发结束之后就会固定不变的。</li>
<li>需求的变化是正当和不可避免
<ol>
<li>问题发生了改变</li>
<li>环境发生了改变：比如法律变化和业务变化</li>
<li>需求基线存在缺陷</li>
<li>用户变动</li>
<li>用户对软件的认识变化</li>
<li>相关产品的出现</li>
</ol>
</li>
</ol>
<h2 id="变更控制过程"><a class="header-anchor" href="#变更控制过程"></a>变更控制过程</h2>
<ol>
<li>
<p>以<strong>可控、一致</strong>的方式进行需求基线中需求的变更处理，包括对变化的<strong>评估、协调、批准或拒绝、实现和验证</strong></p>
</li>
<li>
<p>变更控制过程</p>
<ol>
<li><strong>提交</strong>需求变化</li>
<li><strong>评估</strong>需求变化可能带来的影响
<ol>
<li>利用需求跟踪信息确定变更的影响范围，包括需要修改的系统组件、文档、模型等。</li>
<li>依据需求依赖信息确定变更将会带来的冲突和连锁反应，确定解决的方法。</li>
<li>评估变更请求的优先级和潜在风险。</li>
<li>明确执行变更需要执行的任务，估算变更所需要的工作量和资源。</li>
<li>评价变更可能给项目计划带来的影响。</li>
</ol>
</li>
<li>变更评估结果使用<strong>正式文档的方式固定，提交给变更控制委员会</strong>。</li>
</ol>
</li>
<li>
<p>配置管理部门：<strong>批准</strong>后的变更请求被通知给所有需要修改工作产品的团队成员，由他们完成变更的修改工作。</p>
</li>
</ol>
<!--![需求变更请求表单](../assets/需求与商业模式设计/需求管理/需求变更请求表单.png)-->
<p><img data-src="https://box.nju.edu.cn/f/c7b8b185a99046f18265/?dl=1" alt="需求变更请求表单"></p>
<h2 id="变更控制委员会-CCB"><a class="header-anchor" href="#变更控制委员会-CCB"></a>变更控制委员会(CCB)</h2>
<ol>
<li>评价需求的变更，做出批准或者拒绝变化的决定，并确保已批准变化的实现</li>
<li>变更控制委员会可能由来自下列部门的人员组成
<ol>
<li>项目或程序管理部门</li>
<li>产品管理或者需求分析部门</li>
<li>开发部门</li>
<li>测试或者质量保障部门</li>
<li>市场或客户代表</li>
<li>编写用户文档的部门</li>
<li>技术支持或帮助部门</li>
<li>配置管理部门</li>
</ol>
</li>
</ol>
<h2 id="注意事项"><a class="header-anchor" href="#注意事项"></a>注意事项</h2>
<ol>
<li>认识到变更的必要性，并为之制定计划
<ol>
<li>定义明确的变更控制过程，建立变更控制的有效渠道</li>
<li>所有提交的需求变更请求都要进行仔细的评估</li>
<li>是否进行变更的决定应该由变更控制委员会统一做出</li>
<li>必须对变更的实现结果进行验证</li>
<li>需求的变化情况要及时的通知到所有会受到影响的项目涉众</li>
</ol>
</li>
<li>维护需求基线，审计变更记录：保证向项目涉众可以访问到最新的需求和变更情况。</li>
<li>管理范围蔓延
<ol>
<li>根据业务目标、产品前景和项目范围，评估每一项提议的新增需求和特性</li>
<li>对不合理的需求说&quot;不&quot;</li>
</ol>
</li>
<li>灵活应对变更请求
<ol>
<li>推迟产品的交付时间</li>
<li>要求增派人手：在有限的情况下有效</li>
<li>要求员工加班工作：只能适度的使用</li>
<li>推迟或者去除尚未实现的优先级较低的需求</li>
<li>容许产品质量的降低：尽量不使用</li>
</ol>
</li>
<li>使用辅助工具：工具应该具有以下几个特性，以支持需求变更过程：
<ol>
<li>可用定义变更请求中的数据项</li>
<li>可用辅助项目涉众完成变更控制过程中的协作</li>
<li>可以帮助维护需求基线，审计变更记录</li>
<li>能够将变更情况及时的通知到相关人员</li>
<li>可以生成标准的和定制的报告和图表</li>
</ol>
</li>
</ol>
<h1 id="需求管理的实践调查"><a class="header-anchor" href="#需求管理的实践调查"></a>需求管理的实践调查</h1>
<h2 id="需求的变更"><a class="header-anchor" href="#需求的变更"></a>需求的变更</h2>
<ol>
<li><strong>有效</strong>处理变更非常重要</li>
<li><strong>新增</strong>(Added)需求影响最大</li>
<li><strong>缺陷</strong>修复最为频繁</li>
<li><strong>范围蔓延常</strong>见</li>
<li>需求<strong>可变性</strong>很高</li>
<li>变更控制还需要继续完善</li>
</ol>
<h2 id="需求跟踪-2"><a class="header-anchor" href="#需求跟踪-2"></a>需求跟踪</h2>
<ol>
<li>重视和关注了对后向跟踪联系的处理</li>
<li>忽视了对前向跟踪联系的处理</li>
<li>最低层次需求跟踪策略存在广泛</li>
<li>高端用户的需求跟踪实现仍需努力</li>
<li>需求之间的依赖关系困难和复杂
<ol>
<li>只有大概20％的需求是完全独立的</li>
<li>20％左右的需求产生了所有依赖关系的75％。</li>
</ol>
</li>
</ol>
<h2 id="需求管理工具"><a class="header-anchor" href="#需求管理工具"></a>需求管理工具</h2>
<ol>
<li>非常需要需求管理工具</li>
<li>通用的<strong>文本处理器</strong>(Word Processor)和<strong>电子表格</strong>(Spreadsheet)使用最为广泛</li>
<li>部分组织自己开发了专用需求管理工具</li>
<li>很少有组织使用专用的商业需求管理工具
<ol>
<li>无法和软件的开发过程以及其他辅助工具进行有效的集成</li>
</ol>
</li>
</ol>
<h2 id="实例分析"><a class="header-anchor" href="#实例分析"></a>实例分析</h2>
<ol>
<li>经常出现一个模块的需求刚刚整理完毕或者程序编写了一半，业务已经发生变化的情况。在一年的开发过程中，我们陆续接到的业务变更行政命令多达几十条，这给整个软件开发和推广都带来了很大困惑。为了保证软件正常运行，省局信息中心不得不专门成立了软件推广维护小组，不断就新业务改写程序，各地也不得不在后续的过程中不停的从省局下载新的升级包，好在这件事情已经经历了很多年，大家都已经习惯了。</li>
</ol>
]]></content>
      <categories>
        <category>Business</category>
      </categories>
      <tags>
        <tag>需求与商业模式创新</tag>
      </tags>
  </entry>
  <entry>
    <title>需求获取</title>
    <url>/2021/12/29/%E9%9C%80%E6%B1%82%E8%8E%B7%E5%8F%96/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>需求获取
<ul>
<li>面谈</li>
<li>原型</li>
<li>观察</li>
<li>文档审查</li>
</ul>
</li>
<li>确定项目的前景与范围（需求获取的重要过程）
<ul>
<li><strong>简单情况下可以进行问题分析</strong>，<strong>复杂情况下考虑进行目标分析</strong>，<strong>必要时辅以业务过程分析</strong></li>
</ul>
</li>
<li>问题分析</li>
<li>目标分析</li>
<li>业务过程分析（没记）</li>
</ul>
<span id="more"></span>
<h1 id="需求获取的过程"><a class="header-anchor" href="#需求获取的过程"></a>需求获取的过程</h1>
<ul>
<li>
<p>研究应用背景，建立初始的知识框架；</p>
</li>
<li>
<p>根据获取的需要，采用必要的获取方法和技巧；</p>
<ul>
<li>
<p>先行确定获取的内容和主题，设定场景；</p>
</li>
<li>
<p>分析用户的高（深）层目标，理解用户的意图；</p>
</li>
</ul>
</li>
<li>
<p>进行涉众分析，针对涉众的特点开展工作。</p>
</li>
</ul>
<!--![需求获取的过程](..x/assets/需求与商业模式设计/需求获取/需求获取的过程.png)-->
<p><img data-src="https://box.nju.edu.cn/f/474d0a1195cd4f828d46/?dl=1" alt="需求获取的过程"></p>
<h1 id="需求获取的要点"><a class="header-anchor" href="#需求获取的要点"></a>需求获取的要点</h1>
<h2 id="来源"><a class="header-anchor" href="#来源"></a>来源</h2>
<ol>
<li>涉众
<ol>
<li>用户：<strong>最主要的</strong></li>
<li>客户</li>
<li><strong>领域专家</strong></li>
<li>市场人员、销售人员等其他用户替代源</li>
</ol>
</li>
<li><strong>硬数据</strong>
<ol>
<li>登记表格、单据、报表等定量文档</li>
<li>备忘录、日志等定性文档</li>
</ol>
</li>
<li>相关产品
<ol>
<li>原有系统</li>
<li><strong>竞争产品</strong></li>
<li>协作产品(和解系统存在接口的其他软件系统)</li>
</ol>
</li>
<li>重要文档
<ol>
<li>原有系统的规格说明</li>
<li>竞争产品的规格说明</li>
<li>协作产品的规格说明</li>
<li><strong>客户的需求文档(委托开发的规格说明、招标书)</strong></li>
</ol>
</li>
<li>相关技术标准和法规
<ol>
<li>相关法律、法规及规章制度</li>
<li><strong>行业规范、行业标准、领域参考模型</strong></li>
</ol>
</li>
</ol>
<h2 id="方法"><a class="header-anchor" href="#方法"></a>方法</h2>
<ul>
<li>面谈：常规方法
<ul>
<li>集体面谈： 快速方法</li>
<li>调查表：用户分散</li>
<li>头脑风暴： “”发明“需求</li>
</ul>
</li>
<li>不确定性： 原型</li>
<li>情景性： 观察</li>
<li>传统方法： 文档审查</li>
</ul>
<h2 id="过程"><a class="header-anchor" href="#过程"></a>过程</h2>
<h3 id="注意事项"><a class="header-anchor" href="#注意事项"></a>注意事项</h3>
<ol>
<li>在整体上制定组织方案：确定系统的边界，(最好)建立<strong>上下文图或系统用例图</strong></li>
<li>维护项目的<strong>前景和范围</strong>
<ol>
<li>引导和控制获取过程</li>
<li>适当修改不准确的前景和范围</li>
</ol>
</li>
<li>接受需求的不稳定性：世界是随时变化的，用户随世界而变化，需接受</li>
<li>控制探索性工作( 例如模拟和原型)：有延期和超支的风险，可考虑额外立项或增量式开发</li>
</ol>
<h3 id="结束获取活动的判断条件"><a class="header-anchor" href="#结束获取活动的判断条件"></a>结束获取活动的判断条件</h3>
<ol>
<li>用户想不出<strong>更多</strong>的用例；</li>
<li>用户想出的新用例都是<strong>导出用例</strong>(通过其他用例的结合可以推导出该用例)；</li>
<li>用户只是在<strong>重复已经讨论过</strong>的问题；</li>
<li>新提出的特性、需求等都在<strong>项目范围</strong>之外；</li>
<li>新提出的需求<strong>优先级都很低</strong>；</li>
<li>用户提出的新功能都属于<strong>后继版本</strong>，而非当前版本</li>
</ol>
<h3 id="获取的结果"><a class="header-anchor" href="#获取的结果"></a>获取的结果</h3>
<ol>
<li><strong>笔录</strong>(Elicitation Notes)
<ol>
<li>用户需求、问题域知识和约束</li>
<li>可能具有<strong>组织差、冗余、遗漏、自相矛盾</strong>等诸多问题</li>
<li>可以包括<strong>文字记录、录音、摄像</strong>等各种形式</li>
</ol>
</li>
<li>可能会产生两份定义明确的正式文档(与需求分析结合)
<ol>
<li><strong>项目前景和范围</strong>文档</li>
<li><strong>用例</strong>文档</li>
</ol>
</li>
</ol>
<h1 id="面谈"><a class="header-anchor" href="#面谈"></a>面谈</h1>
<h2 id="问题类型"><a class="header-anchor" href="#问题类型"></a>问题类型</h2>
<ul>
<li>
<p>开放式问题</p>
<ul>
<li>被会见者对答复的选择可以是开放和不受限制的，他们可能答复两个词，也可能答复两段话。</li>
<li>在希望得到丰富（具有一定深度和广度）信息时，开放式问题比较合适</li>
<li>Ex. “你觉得把所有的经理都置于一个内联网内怎么样？”</li>
</ul>
</li>
<li>
<p>封闭式问题</p>
<ul>
<li>答案有基本的形式，被会见者的回答是受到限制的</li>
<li>Ex. “下列信息中哪个对你最有用：（1）填好的客户投诉单；（2）访问web站点的客户的电子邮件投诉；（3）与客户面对面的交流；（4）退回的货物。”</li>
</ul>
</li>
<li>
<p>探究式问题</p>
<ul>
<li>深入探讨某个问题</li>
<li>Ex. 为什么？你能举个例子吗？你能详细描述一下吗？</li>
</ul>
</li>
<li>
<p>诱导性问题</p>
<ul>
<li>诱导问题的答案</li>
<li>Ex. “你和其他经理一样，都同意把财产管理计算机化，是吗”</li>
</ul>
</li>
<li>
<p>双筒问题</p>
<ul>
<li>有两个问题</li>
<li>Ex. “每天你通常会做什么决策，你是怎样做的”</li>
</ul>
</li>
<li>
<p>元问题</p>
<ul>
<li>关于面谈本身的问题</li>
<li>Ex. 我的问题看起来相关吗？你的回答正式吗？你是回答这些问题的最佳人选吗？我问了太多的问题吗？我还应该见什么人？</li>
</ul>
</li>
</ul>
<h2 id="问题准备"><a class="header-anchor" href="#问题准备"></a>问题准备</h2>
<ol>
<li>前期
<ol>
<li><strong>开放式问题</strong>为主</li>
<li>决策层以<strong>专家</strong>为主，保证快速收敛</li>
<li>遵循：问题-&gt;目标-&gt;解决方案路线
<ol>
<li>问题、目标</li>
<li>目标、任务(流程任务)</li>
</ol>
</li>
<li>分析基本的涉众特点：角色、任务、个人目标、频率、优先级</li>
</ol>
</li>
<li>后期
<ol>
<li><strong>封闭式问题</strong>为主</li>
<li>抓住主题与线索：例如，任务分解、流程图、界面示意</li>
<li>问题针对性
<ol>
<li>任务分解关系</li>
<li>流程正确性、异常</li>
<li>界面中的行为、数据项</li>
</ol>
</li>
<li>事先准备面谈记录材料</li>
</ol>
</li>
</ol>
<h1 id="原型"><a class="header-anchor" href="#原型"></a>原型</h1>
<ol>
<li>探索式(exploratory)
<ol>
<li>以缺陷需求开始继而不断<strong>调整和修正</strong>需求的原型开发方式称为探索式</li>
<li>要尽可能的调整各种<strong>设计选项</strong></li>
</ol>
</li>
<li>实验式(experimental)
<ol>
<li>以清晰的用户需求和<strong>模糊的实现方法、实现效果、可行性</strong>开始，明确需求的可行性和技术实现方案</li>
<li><strong>定义</strong>一个对原型的<strong>评估方法</strong>，确定评估的属性</li>
</ol>
</li>
<li>演化式(evolutionary)
<ol>
<li>以清晰的原型化需求和项目积累下来的<strong>原型资产</strong>为开始</li>
<li>原型化的需求，也有项目积累下来的原型资产</li>
</ol>
</li>
<li>探索式和实验式方法产生的原型产品又被称为<strong>抛弃式原型</strong>
<ol>
<li>花费最小的代价，争取最快的速度</li>
<li>可能会使用简易的开发工具和不成熟的构造技术</li>
<li>可能会忽略或简化处理原型目的不相关的功能特征</li>
<li>要坚决的抛弃</li>
</ol>
</li>
<li>演化式原型方法产生的原型产品被称为<strong>演化式原型</strong>(evolutionary prototype)
<ol>
<li>质量要从一开始就能达到最终系统的要求</li>
<li>要易于进行扩展和频繁改进，因此开发者必须重视演化式原型的设计</li>
<li>仅应该被用于处理清晰的需求、规格说明和技术方案</li>
</ol>
</li>
<li>因为基于不确定的需求基础，所以抛弃式原型难免反复修改，导致代码质量较低，应该坚决<strong>抛弃</strong>。</li>
<li>抛弃式原型的贡献不在于它的代码，而是<strong>它所包含的内容</strong>，它说明了正确的需求和正确的技术方案，如果认识不到这一点，他们就只能得到低质量的代码，而丢失真正宝贵的内容</li>
</ol>
<h1 id="观察"><a class="header-anchor" href="#观察"></a>观察</h1>
<p>应用于用户无法完成主动的信息告知的情况下</p>
<ol>
<li>采样观察(Sampling Observation)：传统且简单，对特定时间段或特定事件进行观察。</li>
<li>民族志(Ethnography)：长期且浸入式，观察者深入用户较长时间</li>
<li>话语分析(Discourse Analysis)：对用户交谈行为观察，观察和分析交互方式或特定话语分析</li>
<li>协议分析(Protocol Analysis)：对用户任务的观察，一边观察对象一边执行任务</li>
<li>任务分析(Task Analysis)：对人机交互行为进行的观察，引入相关的模型方法来观察、记录和执行用户与软件系统的交互行为。</li>
</ol>
<h1 id="文档审查"><a class="header-anchor" href="#文档审查"></a>文档审查</h1>
<!--![文档审查的过程](../assets/需求与商业模式设计/需求获取/文档审查的过程 .png)-->
<p><img data-src="https://box.nju.edu.cn/f/64c6ff34bade4b9ca634/?dl=1" alt="文档审查的过程"></p>
<ol>
<li>文档审核是传统的需求获取方法，专门对文档进行需求获取活动。</li>
<li>范畴包括相关产品(原有产品和竞品)的需求规格说明、硬数据和客户的需求文档(委托开发的规格说明、招标书)</li>
</ol>
<h1 id="确定项目前景和范围"><a class="header-anchor" href="#确定项目前景和范围"></a>确定项目前景和范围</h1>
<h2 id="原因"><a class="header-anchor" href="#原因"></a>原因</h2>
<ol>
<li>在看待现实世界时：世界是复杂的，从不同的角度观察(目的与条件)，会看到不同的内容(抽象与映射)</li>
<li>因此有2个问题：
<ol>
<li>如何保证项目涉众以符合项目需要的角度描述现实世界？</li>
<li>描述哪些事物和事件才会尽可能的符合项目的需要？</li>
</ol>
</li>
<li>第一个问题：<strong>项目的目标就是系统的业务需求</strong>，在<strong>简单情况下可以进行问题分析</strong>，<strong>复杂情况下考虑进行目标分析</strong>，<strong>必要时辅以业务过程分析</strong>。</li>
<li>项目前景与范围文档：业务需求、高层解决方案以及系统特性，还有部分涉众分析的结果——涉众特征分析。
<ol>
<li>前景描述产品用来干什么，将所有的涉众都统一到一个方向，所有的涉众都从共同认同的项目前景出发，理解和描述问题域及需求</li>
<li>范围指出了当前项目是要解决的产品长远规划中的哪一部分，限定了需求的界限，范围内的事物和事件是描述的目标</li>
</ol>
</li>
</ol>
<h2 id="作用"><a class="header-anchor" href="#作用"></a>作用</h2>
<!--![确定项目前景和范围的作用](..x/assets/需求与商业模式设计/需求获取/确定项目的前景和范围/确定项目前景和范围的作用.png)-->
<p><img data-src="https://box.nju.edu.cn/f/e7a1804824bc481592e3/?dl=1" alt="确定项目前景和范围的作用"></p>
<h2 id="关键"><a class="header-anchor" href="#关键"></a>关键</h2>
<ol>
<li>定义业务需求和能够满足需求的高层解决方案，包括:
<ol>
<li>业务目标、目的</li>
<li>高层业务功能</li>
<li>每个高层业务功能所关联的高层数据</li>
<li>每个功能相关的<strong>项目涉众</strong></li>
<li>......</li>
</ol>
</li>
<li><strong>如果存在不同业务需求之间的冲突，那么在确定项目前景和范围阶段必须予以解决</strong>：不然会导致软件很难甚至无法继续推进。</li>
</ol>
<h2 id="过程-2"><a class="header-anchor" href="#过程-2"></a>过程</h2>
<!--![确定项目前景和范围 过程](..x/assets/需求与商业模式设计/需求获取/确定项目的前景和范围/确定项目前景和范围 过程.png)-->
<p><img data-src="https://box.nju.edu.cn/f/253d140cd68f44d4bbba/?dl=1" alt="确定项目前景和范围 过程"></p>
<h1 id="问题分析"><a class="header-anchor" href="#问题分析"></a>问题分析</h1>
<!--![问题分析 过程](..x/assets/需求与商业模式设计/需求获取/问题分析/问题分析 过程.png)-->
<p><img data-src="https://box.nju.edu.cn/f/b6ae59174e144c089a74/?dl=1" alt="问题分析 过程"></p>
<h2 id="获取问题"><a class="header-anchor" href="#获取问题"></a>获取问题</h2>
<ol>
<li>问题分析的前提是<strong>获取问题</strong>，通过收集<strong>背景资料或者与涉众</strong>沟通来实现</li>
<li>收集背景资料时要收集<strong>业务描述</strong>及其<strong>统计数据</strong>关注业务困难与问题。</li>
<li>与涉众的沟通主要通过<strong>面谈</strong>完成。</li>
<li>示例：×××连锁商店是一家刚刚发展起来的小型连锁商店，其前身是一家独立的小百货门面店。原商店只有销售的收银部分使用软件处理，其他业务都是<strong>手工作业</strong>，这已经不能适应它的业务发展要求。首先是随着商店规模的扩大，顾客量大幅增长，手工作业销售迟缓，顾客购物排队现象严重，导致流失客源。其次是<strong>商店的商品品种增多，无法准确掌握库存</strong>，商品积压、缺货和报废的现象上升明显。再次是商店面临的竞争比以前更大，希望在<strong>降低成本</strong>，<strong>吸引顾客</strong>，增强竞争力的同时，保持盈利水平。
<ol>
<li>P1：手工作业销售迟缓，效率不高。</li>
<li>P2：商店的商品品种太多，无法准确掌握库存。</li>
<li>P3：成本不够低，导致竞争力不强，盈利水平不够。</li>
<li>P4：顾客不够多，销售额不高，盈利水平不够。</li>
</ol>
</li>
<li>对每个问题：<strong>发现问题 $\rightarrow$ 明确问题 $\rightarrow$ 发现业务需求 $\rightarrow$ 定义问题解决方案及系统特性</strong>，得到每一个问题的业务需求和解决方案(特性、边界及约束)</li>
</ol>
<h2 id="明确问题"><a class="header-anchor" href="#明确问题"></a>明确问题</h2>
<ul>
<li>
<p>对问题达成共识： 描述问题并在涉众之间取得认同</p>
</li>
<li>
<p>判断问题的明确性</p>
<ul>
<li>问题的明确性要求它们具备以下两点：
<ul>
<li>
<p>易于理解；</p>
<ul>
<li><em>P1. 图书管理员：图书总是无法上架。</em></li>
<li><em>P2. 图书管理员：图书的内容分类不合适，无法分类上架图书上架的工作太繁杂，导致来不及上架。图书的借阅不遵守章程，不能保证上架。</em></li>
</ul>
</li>
<li>
<p>能指明解决的方向</p>
<ul>
<li><em>P3. 决策者：生产的废品过多。</em></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>发现问题背后的问题</p>
</li>
</ul>
<h2 id="发现业务需求"><a class="header-anchor" href="#发现业务需求"></a>发现业务需求</h2>
<ul>
<li>
<p>每一个明确、一致的问题都意味着涉众存在一些相应的期望目标，即业务需求。</p>
</li>
<li>
<p>一般情况下，<u>业务需求就是问题的反面</u></p>
<ul>
<li><em>P3. 决策者：生产的废品过多</em></li>
<li><em>BR2：提供销售订单的准确性，在系统使用后3个月内，减少50%因此而产生的废品。</em></li>
</ul>
</li>
<li>
<p><strong>注意：业务目标要具有第二章所述的各种优秀特性，尤其是要有可验证性</strong></p>
</li>
</ul>
<h2 id="定义解决方案及系统特性"><a class="header-anchor" href="#定义解决方案及系统特性"></a>定义解决方案及系统特性</h2>
<h3 id="确定高层次的解决方案"><a class="header-anchor" href="#确定高层次的解决方案"></a>确定高层次的解决方案</h3>
<ul>
<li>发现各种可行的高层次解决方案，分析不同方案的业务优势和代价，然后通过和涉众的协商，选定其中一个</li>
</ul>
<!--![确定高层次的解决方案](..x/assets/需求与商业模式设计/需求获取/问题分析/确定高层次的解决方案.png)-->
<p><img data-src="https://box.nju.edu.cn/f/2f607fbba1cf4d42869b/?dl=1" alt="确定高层次的解决方案"></p>
<h3 id="确定系统特性"><a class="header-anchor" href="#确定系统特性"></a>确定系统特性</h3>
<ul>
<li>
<p>明确该解决方案需要具备的功能特征，即系统特性</p>
</li>
<li>
<p>特性是对一系列内聚的相互联系的需求（<em>要求</em>）、领域特征和规格的总称[Classen2008]。通常，一个特性内聚于一个目标与任务，反映了<u>系统与外界一次有价值的完整互动过程</u>（一组<strong>任务的要求</strong>）</p>
</li>
</ul>
<h3 id="确定解决方案的边界"><a class="header-anchor" href="#确定解决方案的边界"></a>确定解决方案的边界</h3>
<ul>
<li>
<p>分析解决方案需要和周围环境形成的<strong>交互作用</strong>，定义解决<strong>方案的边界</strong></p>
</li>
<li>
<p><strong>面向对象</strong>方法：<strong>用例图</strong></p>
<ol>
<li>涉及哪些用户？</li>
<li>用户的目标有哪些？需要执行的任务有哪些？</li>
<li>建立用例图(角色：用户； 用例：目标-任务)</li>
</ol>
</li>
</ul>
<!--![确定解决方案的边界 用例图](..x/assets/需求与商业模式设计/需求获取/问题分析/确定解决方案的边界 用例图.png)-->
<p><img data-src="https://box.nju.edu.cn/f/a6f6bdd3fe3144919de5/?dl=1" alt="确定解决方案的边界 用例图"></p>
<ul>
<li><strong>结构化</strong>方法：<strong>上下文图(DFD)</strong>
<ol>
<li>它需要的信息由谁提供？</li>
<li>它产生的信息由谁使用？</li>
<li>谁控制它的执行？</li>
<li>谁会影响它的执行？</li>
</ol>
</li>
</ul>
<!--![确定解决方案的边界 上下文图](../assets/需求与商业模式设计/需求获取/问题分析/确定解决方案的边界 上下文图.png)-->
<p><img data-src="https://box.nju.edu.cn/f/5bb4d42b772c467792a1/?dl=1" alt="确定解决方案的边界 上下文图"></p>
<h3 id="确定解决方案的约束"><a class="header-anchor" href="#确定解决方案的约束"></a>确定解决方案的约束</h3>
<!--![确定解决方案的约束](../assets/需求与商业模式设计/需求获取/问题分析/确定解决方案的约束.png)-->
<p><img data-src="https://box.nju.edu.cn/f/9ef52e2b081048ec83bd/?dl=1" alt="确定解决方案的约束"></p>
<h2 id="案例"><a class="header-anchor" href="#案例"></a>案例</h2>
<h3 id="描述"><a class="header-anchor" href="#描述"></a>描述</h3>
<p>×××连锁商店是一家刚刚发展起来的小型连锁商店，其前身是一家独立的小百货门面店。原商店只有销售的收银部分使用软件处理，其他业务都是手工作业，这已经不能适应它的业务发展要求。首先是随着商店规模的扩大，顾客量大幅增长，手工作业销售迟缓，顾客购物排队现象严重，导致流失客源。其次是商店的商品品种增多，无法准确掌握库存，商品积压、缺货和报废的现象上升明显。再次是商店面临的竞争比以前更大，希望在降低成本，吸引顾客，增强竞争力的同时，保持盈利水平。</p>
<h3 id="问题"><a class="header-anchor" href="#问题"></a>问题</h3>
<p>P1：手工作业销售迟缓，效率不高。</p>
<p>P2：商店的商品品种太多，无法准确掌握库存。</p>
<p>P3：成本不够低，导致竞争力不强，盈利水平不够。</p>
<p>P4：顾客不够多，销售额不高，盈利水平不够。</p>
<h3 id="案例分析"><a class="header-anchor" href="#案例分析"></a>案例分析</h3>
<h4 id="业务需求"><a class="header-anchor" href="#业务需求"></a>业务需求</h4>
<ol>
<li>BR1：在系统使用6个月后，商品积压、缺货和报废的现象要减少50%</li>
<li>BR2：在系统使用3个月后，销售人员工作效率提高50%</li>
<li>BR3：在系统使用6个月后，店铺运营成本要降低15%
<ol>
<li>范围：人力成本和库存成本</li>
<li>度量：检查平均每个店铺的员工数量和平均每10,000元销售额的库存成本</li>
</ol>
</li>
<li>BR4：在系统使用6个月后，销售额度要提高20%
<ol>
<li>最好情况：40%</li>
<li>最可能情况：20%</li>
<li>最坏情况：10%</li>
</ol>
</li>
</ol>
<h4 id="系统特性"><a class="header-anchor" href="#系统特性"></a>系统特性</h4>
<ol>
<li>SF1：分析店铺商品库存，发现可能的商品积压、缺货和报废现象：BR1，BR3</li>
<li>SF2：根据市场变化调整销售的商品：BR1，BR3，BR4</li>
<li>SF3：制定促销手段，处理积压商品：BR1，BR3，BR4</li>
<li>SF4：与生产厂家联合进行商品促销：BR1，BR3，BR4，CH</li>
<li>SF5：制定促销手段进行销售竞争：BR1，BR4，CH</li>
<li>SF6：掌握员工变动和授权情况：BR2</li>
<li>SF7：处理商品入库与出库：BR1</li>
<li>SF8：发展会员，提高顾客回头率：BR4，CR</li>
<li>SF9：允许积分兑换商品和赠送吸引会员的礼品，提高会员满意度：BR3，BR4，CR</li>
<li>SF10：帮助收银员处理销售与退货任务：BR2</li>
</ol>
<h4 id="边界"><a class="header-anchor" href="#边界"></a>边界</h4>
<p>用例图：</p>
<!--![问题分析 案例分析 用例图](../assets/需求与商业模式设计/需求获取/问题分析/问题分析 案例分析 用例图.png)-->
<p><img data-src="https://box.nju.edu.cn/f/69965023bb7e497fa3c4/?dl=1" alt="问题分析 案例分析 用例图"></p>
<h1 id="目标分析"><a class="header-anchor" href="#目标分析"></a>目标分析</h1>
<ul>
<li>目标：是系统被开发的目的
<ul>
<li>它有着明确的定义方式</li>
<li>具有一定的特征属性，常见的有名称、类型、关注、定义（正式与非正式））、优先级、主体、拥有者等</li>
</ul>
</li>
</ul>
<h2 id="目标的分类"><a class="header-anchor" href="#目标的分类"></a>目标的分类</h2>
<ul>
<li>
<p>按抽象层次分类</p>
<ul>
<li>高层次目标
<ul>
<li>战略性的,全局的, 业务相关的</li>
<li>“增加50% 的传输能力”</li>
</ul>
</li>
<li>低层次目标
<ul>
<li>技术性的，局部的，产品设计相关的</li>
<li>“加速器每3秒发出一次命令”</li>
</ul>
</li>
</ul>
</li>
<li>
<p>按功能分类</p>
<ul>
<li>功能目标（Functional Goal）
<ul>
<li>描述预期的系统行为</li>
<li>满足型目标（Satisfaction Goal）和信息型目标（Information Goal）</li>
</ul>
</li>
<li>非功能目标（Non-functional Goal）
<ul>
<li>常见的是质量目标（Quality goals）和约束目标（Constraint goals）</li>
<li>安全目标（Safety Goal）、性能目标（Performance Goal）、可用性目标（Usability Goal）等等</li>
</ul>
</li>
</ul>
</li>
<li>
<p>按技术手段分类</p>
<ul>
<li>
<p>软目标（Soft Goal）和硬目标（Hard Goal）</p>
<ul>
<li>能否利用技术手段确认是否满足</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="目标的规格的基本模式"><a class="header-anchor" href="#目标的规格的基本模式"></a>目标的规格的基本模式</h2>
<table>
<thead>
<tr>
<th>模式</th>
<th>符号描述</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>实现(Achieve)</td>
<td>$P \Rightarrow \Diamond Q$</td>
<td>如果将来某一时刻Q为真(被满足)，则目标实现</td>
</tr>
<tr>
<td>终止(Cease)</td>
<td>$P \Rightarrow \Diamond \neg Q$</td>
<td>如果将来某一时刻Q为假(被终止)，则目标实现</td>
</tr>
<tr>
<td>保持(Maintain)</td>
<td>$P \Rightarrow \Box Q$</td>
<td>将来任一时刻Q都为真，则目标实现</td>
</tr>
<tr>
<td>避免(Avoid)</td>
<td>$P \Rightarrow \Box \neg Q$</td>
<td>将来任一时刻Q都为假，则目标实现</td>
</tr>
<tr>
<td>优化(Optimize)</td>
<td>-</td>
<td>最大化Maximize(目标功能) 或 最小化Minimize (目标功能)</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>实现（Achieve）：P ⇒ ◊ Q  //如果将来某一时刻Q为真（被满足），则目标实现</p>
</li>
<li>
<p>终止（Cease）： P ⇒ ◊ ¬ Q //如果将来某一时刻Q为假（被终止），则目标实现</p>
</li>
<li>
<p>保持（Maintain）： P ⇒ □Q //将来任一时刻Q都为真，则目标实现</p>
</li>
<li>
<p>避免（Avoid）： P ⇒ □¬ Q //将来任一时刻Q都为假，则目标实现</p>
</li>
<li>
<p>优化（Optimize）：最大化Maximize (目标功能) 或 最小化Minimize (目标功能)</p>
</li>
</ul>
<h2 id="目标模型的关系"><a class="header-anchor" href="#目标模型的关系"></a>目标模型的关系</h2>
<ol>
<li>目标模型的另一个核心要素是元素之间的关系，又称为链接</li>
<li><strong>精化</strong>(Refinement)关系</li>
<li><strong>阻碍</strong>(Obstruction)关系</li>
<li><strong>支持与冲突</strong>(Support/Conflict)关系</li>
</ol>
<h3 id="目标精化"><a class="header-anchor" href="#目标精化"></a>目标精化</h3>
<ul>
<li>一个高层次目标G可以精化为低层次目标{G1,G2,…,Gn}：</li>
<li>如果一系列子目标{G1,G2,…,Gn}的完成有助于目标G的完成，那么G与{G1,G2,…,Gn}之间就是AND 精化关系。此时任意两子目标Gi与Gj之间是互补的。</li>
<li>如果任一子目标Gi都是G的替代方案，那么G与{G1,G2,…,Gn}之间就是OR 精化关系。此时，任意两子目标Gi与Gj之间是互相替代的。</li>
</ul>
<!--![目标精化](../assets/需求与商业模式设计/需求获取/目标分析/目标精化.png)-->
<p><img data-src="https://box.nju.edu.cn/f/de5b232dc30b4b9aa85e/?dl=1" alt="目标精化"></p>
<h3 id="目标阻碍"><a class="header-anchor" href="#目标阻碍"></a>目标阻碍</h3>
<ul>
<li>
<p>如果子目标O的达成会使得高层目标G失败O**|=**¬G，那么O与G的关系就是阻碍关系</p>
</li>
<li>
<p>阻碍目标也可以继续AND精化、OR精化</p>
</li>
<li>
<p>阻碍关系本身是一种特殊的精化——反向精化</p>
</li>
</ul>
<!--![目标阻碍](../assets/需求与商业模式设计/需求获取/目标分析/目标阻碍.png)-->
<p><img data-src="https://box.nju.edu.cn/f/1dfb0101b8f2484a9eb3/?dl=1" alt="目标阻碍"></p>
<h3 id="目标支持与冲突"><a class="header-anchor" href="#目标支持与冲突"></a>目标支持与冲突</h3>
<ul>
<li>
<p>Support链接表示一个目标对其他目标的支持作用</p>
<ul>
<li>支持关系可以被处理为OR精化关系</li>
</ul>
</li>
<li>
<p>Conflict链接表示一个目标的实现对其他目标的实现有阻碍作用</p>
</li>
</ul>
<!--![目标支持与冲突](../assets/需求与商业模式设计/需求获取/目标分析/目标支持与冲突.png)-->
<p><img data-src="https://box.nju.edu.cn/f/8258cb6c3c124754acc3/?dl=1" alt="目标支持与冲突"></p>
<h2 id="目标与其他元素的关系"><a class="header-anchor" href="#目标与其他元素的关系"></a>目标与其他元素的关系</h2>
<ol>
<li>主体(Agent)</li>
<li>场景(Scenario)</li>
<li>操作(Operation)</li>
<li>任务(Task)</li>
<li>资源(Resource)</li>
<li>UML元素</li>
</ol>
<h2 id="目标分析的过程"><a class="header-anchor" href="#目标分析的过程"></a>目标分析的过程</h2>
<!--![目标分析 过程](..x/assets/需求与商业模式设计/需求获取/目标分析/目标分析 过程.png)-->
<p><img data-src="https://box.nju.edu.cn/f/cccde504e03b4887b88e/?dl=1" alt="目标分析 过程"></p>
<ol>
<li>高层目标的获取：现状和背景的分析：问题与缺陷
<ul>
<li>得到<strong>业务需求</strong>、 高层目标目标模型</li>
</ul>
</li>
<li>低层目标的获取：目标分析与实现
<ol>
<li>已有目标的验证和细化(基于目标分析)</li>
<li>基于场景的方法等等(基于目标实现)</li>
</ol>
</li>
<li>目标分析：精化与分解，建立系统的目标模型</li>
<li>目标实现：收集与目标相关的需求信息，讨论可能的候选解决方案，确定最终的系统详细需求和解决方案</li>
</ol>
<h1 id="案例-2"><a class="header-anchor" href="#案例-2"></a>案例</h1>
<h2 id="描述-2"><a class="header-anchor" href="#描述-2"></a>描述</h2>
<p>×××连锁商店是一家刚刚发展起来的小型连锁商店，其前身是一家独立的小百货门面店。原商店只有销售的收银部分使用软件处理，其他业务都是手工作业，这已经不能适应它的业务发展要求。首先是随着商店规模的扩大，顾客量大幅增长，手工作业销售迟缓，顾客购物排队现象严重，导致流失客源。其次是商店的商品品种增多，无法准确掌握库存，商品积压、缺货和报废的现象上升明显。再次是商店面临的竞争比以前更大，希望在降低成本，吸引顾客，增强竞争力的同时，保持盈利水平。</p>
<h2 id="高层目标的获取"><a class="header-anchor" href="#高层目标的获取"></a>高层目标的获取</h2>
<ul>
<li>
<p>业务需求：</p>
<ul>
<li>BR1：在系统使用6个月后，商品积压、缺货和报废的现象要减少50%</li>
<li>BR2：在系统使用3个月后，销售人员工作效率提高50%</li>
<li>BR3：在系统使用6个月后，店铺运营成本要降低15%
<ol>
<li>范围：人力成本和库存成本</li>
<li>度量：检查平均每个店铺的员工数量和平均每10,000元销售额的库存成本</li>
</ol>
</li>
<li>BR4：在系统使用6个月后，销售额度要提高20%
<ol>
<li>最好情况：40%</li>
<li>最可能情况：20%</li>
<li>最坏情况：10%</li>
</ol>
</li>
</ul>
</li>
<li>
<p>高层目标模型</p>
</li>
</ul>
<!--![目标分析 案例 高层目标模型](..x/assets/需求与商业模式设计/需求获取/目标分析/目标分析 案例 高层目标模型.png)-->
<p><img data-src="https://box.nju.edu.cn/f/ea88925c768746ad923a/?dl=1" alt="目标分析 案例 高层目标模型"></p>
<h2 id="低层目标的获取：-目标分析"><a class="header-anchor" href="#低层目标的获取：-目标分析"></a>低层目标的获取： 目标分析</h2>
<h3 id="目标精化-2"><a class="header-anchor" href="#目标精化-2"></a>目标精化</h3>
<!--![目标分析 案例 目标精化](..x/assets/需求与商业模式设计/需求获取/目标分析/目标分析 案例 目标精化.png)-->
<p><img data-src="https://box.nju.edu.cn/f/35e269396b584549975d/?dl=1" alt="目标分析 案例 目标精化"></p>
<h3 id="目标冲突与协作"><a class="header-anchor" href="#目标冲突与协作"></a>目标冲突与协作</h3>
<!--![目标分析 案例 目标 冲突与协作](..x/assets/需求与商业模式设计/需求获取/目标分析/目标分析 案例 目标 冲突与协作.png)-->
<p><img data-src="https://box.nju.edu.cn/f/7270ee5886814542adb8/?dl=1" alt="目标分析 案例 目标 冲突与协作"></p>
<h3 id="目标实现"><a class="header-anchor" href="#目标实现"></a>目标实现</h3>
<ul>
<li>主体</li>
</ul>
<!--![目标分析 案例 目标实现 主体](..x/assets/需求与商业模式设计/需求获取/目标分析/目标分析 案例 目标实现 主体.png)-->
<p><img data-src="https://box.nju.edu.cn/f/c6906afadce041939003/?dl=1" alt="目标分析 案例 目标实现 主体"></p>
<ul>
<li>
<p>操作</p>
<!--![目标分析 案例 目标实现 操作](..x/assets/需求与商业模式设计/需求获取/目标分析/目标分析 案例 目标实现 操作.png)-->
</li>
</ul>
<p><img data-src="https://box.nju.edu.cn/f/bfaf41e8e3784a8fb511/?dl=1" alt="目标分析 案例 目标实现 操作"></p>
]]></content>
      <categories>
        <category>Business</category>
      </categories>
      <tags>
        <tag>需求与商业模式创新</tag>
      </tags>
  </entry>
  <entry>
    <title>尼金斯基给佳吉列夫的最后一封信</title>
    <url>/2021/05/18/%E5%B0%BC%E9%87%91%E6%96%AF%E5%9F%BA%E7%BB%99%E4%BD%B3%E5%90%89%E5%88%97%E5%A4%AB%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%B0%81%E4%BF%A1/</url>
    <content><![CDATA[<p>由传奇舞者尼金斯基寄给他的老板佳吉列夫, 这封信也许并未寄出</p>
<span id="more"></span>
<p>给某人:</p>
<p>我不想叫出你的名字，因为人们都不想叫出你的名字。我不会在仓促之中给你写信，因为我不会让你以为我很紧张，我不是个容易紧张的人，我喜欢平静地写信，我喜欢写信，但我不喜欢写信时过于注重那些华美的文字修饰，我没学过如何去修饰文字，我只需要写出我心中的想法。我并不怕你，我知道你很讨厌我，但我爱你如同我爱其他每一个人。</p>
<p>我不想同你一起工作，我要告诉你一件事，我很努力地在工作，我并没死掉，我活得好好的，神在我身上活着，我也活在神的身上。神在我身上活着，我努力在舞蹈方面取得进步，我的舞蹈已经进步了很多。我努力地写作，但我不懂如何去使用华丽的词藻，我知道你一向喜欢华丽的词藻，而我可不喜欢;你喜欢结党营利，我厌恶这一套。我不是一个死的物，我是个活人;你才是一个死的物，因为你的意愿已经死了。我不会把你看成朋友，因为我知道你是我的敌人。但我不是你的敌人，敌人不属于神，神没有敌人。敌人在寻求死亡，而我则在寻求生命;我怀有很大的爱，而你则是恶毒的化身。我不是凶残的野兽，你才是。凶残的野兽不会懂得去爱人，而我爱人们，陀思妥耶夫斯基也爱人们。我不是一个白痴，我是一个真实的人，陀思妥耶夫斯基的&quot;白痴&quot;也是一个真实的人。我是白痴，陀思妥耶夫斯基也是白痴。你认为我很愚蠢，而我却看到你处在真正的愚蠢中，我们都认为对方很愚蠢。</p>
<p>我不要成群结党，我不喜欢成群结党，你喜欢别人在你面前俯首听命，我也曾经这样。你辱骂那些在你面前服从的人，我喜欢那些服从的人:我吸引他们，而你则是使他们畏惧。他们对你的服从是虚假的，对我的才是真的。我不要你冲我做出那种微笑，因为你的微笑是死的，我不是死亡，所以我从不微笑。我写东西并不是为了自我嘲弄，我为哭泣而写作。我是一个有情感和理性的人，你有聪明，却缺乏情感，你的情感很低劣，而我的情感很强壮。**你要我堕落，而我要拯救你:我爱你，你却不爱我;我希望你好，而你却要毁掉我。**我了解你的诡计，我假装很神经质，我装做我很愚蠢。我不是孩子，我是神，我是你身上的神。你是野兽，而我是爱，你已经不爱那些人，而我还爱他们，我爱每个人。我不要思想，不要听。<strong>我不属于你，你也并不属于我，我会永远爱你，我属于你，也属于我自己。我要和自己结合在一起。我属于你，我也属于我自己。</strong></p>
<p>……</p>
<p>我想写信给你，但不想同你一起工作，**因为你的意图不在工作中。**我知道你很懂得伪装，我不喜欢会伪装的人，我只在对人有益时才会接受伪装。你是个邪恶的人，你并不是沙皇，而我才是沙皇。你并不是我的沙皇，我才是你的沙皇。你要伤害我，而我不会伤害你。你很邪恶，而我是一支摇篮曲。睡吧，睡，睡，睡，睡，安心地睡，睡，睡。睡，睡。</p>
]]></content>
      <categories>
        <category>Art</category>
      </categories>
  </entry>
  <entry>
    <title>长津湖</title>
    <url>/2022/09/26/%E9%95%BF%E6%B4%A5%E6%B9%96/</url>
    <content><![CDATA[<p>易烊千玺主演, 抗美援朝电影，国庆头号烂片。</p>
<span id="more"></span>
<ul>
<li>
<p>本片是一部爆米花电影，我没有看出来任何新颖的有价值的思想。 表达的还是老一套，也就是爱国主旋律，表达得很差， 没有代入感不说， 叙事能力都不足，手法还偏要往欧美战争电影的宏大路线靠，典型的眼高手低。 整个电影用那么多特效、 高空摄影、 宏大的管弦乐，丝毫没有代入感。 高格调的表现手法是建立在对基本功的极度自信的情况下的， 导演连基本故事都没讲明白，还在往电影里添油加醋，是为了让影片更有“国际感么”？</p>
<ul>
<li>作为教科书，诺兰的《敦刻尔克》拍摄手法非常新颖， 全片表达爱国思想的就那么几句台词，这几句台词的分量比整部《长津湖》还重</li>
</ul>
</li>
<li>
<p>全片相对而言最好看的，就是火车出发时，一个女孩给易烊千玺送围巾的那一幕，其实除了演员的脸之外也没什么出彩之处。</p>
</li>
<li>
<p>剩下的部分一点也不煽情，为了表现战场浩大的声势，用了管弦乐，可是一点情感的调动都没有，我看的时候心情毫无波澜，觉得荧幕上那些人和现实中的我没什么关系。这么差的代入感剧情、表演和配乐等等因素共同造成的</p>
<ul>
<li>最后杨根思的片段还是挺感动的</li>
</ul>
</li>
<li>
<p>最大也是最明显的问题：全程用配音。不管是美军还是中国人，都用的配音，且声音也不合适，听着很僵硬，破坏了观影体验</p>
</li>
<li>
<p>根本没有讲清楚历史，即“抗美援朝为什么中国能赢”。全片讲了美军的精良，但中国军队是怎么战胜如此强大的美军的呢？ 靠几个神枪手？ 炮手？ 和美军拼刺刀总是赢？ 为啥中国军队总是能埋伏美军，美军总是不知道中国军队的动向？ 就靠志愿军战士精神坚定，宁死不暴露电台吗？ 还有作战计划的调度等等，一场战争的胜利，肯定有其必然性在里面，尤其是双方实力如此悬殊的情况下，胜利者必定有大量的优秀的战术和决策，这些我都没有在电影院看到。只有易烊千玺和吴京、胡军他们在唠嗑，彭司令说了两句话，仗就打赢啦？？而且这些戏份都非常不合时宜，安插在本应该继续煽情的地方，使得战场如同儿戏，没看出多少战争对人的锻炼</p>
<ul>
<li>有一段儿易烊千玺要杀美国军官，被吴京制止了，说“有的枪必须开，有的枪可以不开”，这段是唯一达到该系列影片正常水平的一段内容。 许多媒体对此大书特书， 我不觉得这有什么好夸的， 都2021年了要是还没有这种思想，只能说明导演的世界观还停留在清朝。 即使如此，这部片的意识形态宣传还是不到位的，因为它连爱国都没说清楚</li>
</ul>
</li>
<li>
<p>《长津湖》能有这么高票房，有三大因素：政治， 同期的国庆档没有大片， 以及作为长期疫情封锁后，的第一部国产大片，观众和院线已经饥不择食了。 说到底，这就是一部爆米花电影，而且拍的还很烂， 连娱乐观众都做不到。</p>
</li>
<li>
<p>不过，《长津湖》不是近段时间最烂的电影，因为我看了《1921》， 这部电影，一言以蔽之： 烂透了。 《1921》比《长津湖》还烂， 这是相当有难度的一件事情，我真佩服制作人员</p>
<ul>
<li>《1921》最离奇的是， 每个共产党早期革命斗士，无论男女，皆为衣着时尚，面容精致（ 并且妆容也很精致 ）， 居住和出入的地方都是奢华高雅的上流场所。灯红酒绿的眩目，使观众完全看不到革命的任何艰辛。 我非常愿意相信， 这些角色打扮得这么漂亮是给影院的粉丝看的，他们也十分清楚，《1921》的主要受众，也就是爱慕虚荣人云亦云的普通大众。</li>
</ul>
</li>
<li>
<p>《1921》和《长津湖》能成为这2021年最高规格的主旋律影片，令人丝毫不觉悲哀，相反烂地还很让人想笑， 什么样的市场催生什么样的产品。 国内观众如此，中国电影也就那样</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Art</category>
      </categories>
      <tags>
        <tag>Movie</tag>
      </tags>
  </entry>
  <entry>
    <title>满江红</title>
    <url>/2023/02/08/%E6%BB%A1%E6%B1%9F%E7%BA%A2/</url>
    <content><![CDATA[<p>我给这部电影打满分.</p>
<span id="more"></span>
<p>看这个电影的时候我的脑子宕机了, 起初我试着思考人物关系, 思考每一句对白的用意, 接着就是一轮又一轮的反转, 最后我不想想了, 随他去吧, 任由导演把内容输送给我.</p>
<p>满江红精彩的是, 它设计了一个极其复杂的剧情, 使用极其复杂的叙述, 又能在最后达到自洽, 并让观众不花费那么大的精力理解一切.</p>
<p>我简单列举下观影时和导演的思想斗争:</p>
<ol>
<li>
<p>电影开头张大耍小聪明, 在抽命时换了根较长的签, 但他没算到今天是偶数日, 因而差点被孙均杀掉.</p>
<p>直到孙均上秦桧阁楼前, 我都没想通张大为何会犯这么一个失误. 因为那时已经知道这一切都是张大的局, 且毫无疑问张大是个极其聪明的人, 那么他怎么会犯这么低级的失误, 差点就送命?  他如果死了, 计划就失败了. 后来看到孙均也是张大的人, 我明白了, 无论当天是奇是偶, 无论张大抽什么签, 他都不会被孙均杀死, 因为他和孙均是一伙的!</p>
<p>这也解释了为什么孙均在抽命时没有杀张大. 一开始我以为是因为张大和孙均是亲戚, 我相信其他观众也这么认为. 但这又无法解释为何孙均会干净利落地杀掉前面的人, 直到轮到张大, 才给他看那个皮袋. 因为如果孙均的目的是辨认那个皮袋, 他又出于亲戚感情放张大一命, 那他就没有道理把前面的人审都不审就杀掉, 毕竟他的任务是调查皮袋.</p>
<p>但是, 当发现孙均是张大一伙时, 一切都说得通了: 孙均的目的根本不是调查皮袋, 他的目的就是在众人面前堂而皇之地找出张大, 将后者推到台前. 因此他可以直接杀掉前面的人, 因为他根本不需要审问他们, “调查皮袋”就是个幌子.</p>
</li>
<li>
<p>孙均和张大被关进牢房, 张大和孙均交流时, 我发现孙均是张大这边的, 当张大说出“把你拉入计划”时, 我还不确定孙均是:</p>
<ol>
<li>一开始就被纳入计划中</li>
<li>之后在看见张大背后刺字时, 被感化而加入, 而这一切又早就被张大算到了. 这也算是一种“加入计划”.</li>
</ol>
<p>孙均问张大“为什么”(言下之意是, 为什么张大确定自己会帮他), 而张大揭开背后衣衫露出刺字, 并说道他发现孙均没有把刺字真的刮下来, 就明白孙均被感化了. 此时我觉得孙均应该属于情况2. 否则张大没必要向孙均解释自己为什么信任他, 孙均也没必要冒这么大风险留下刺字.</p>
<p>当张大被秦桧的侍女杀死, 孙均冷眼旁观时, 我又觉得孙均是秦桧的人, 上面两种假设都是错误的, 至于他留下刺字的动机, 应该是想骗取张大的信任.</p>
<p>当孙均上秦桧的楼, 逼秦桧说岳飞遗言时, 我明白了孙均是张大的人, 但我无法理解他为什么要在牢房里看着张大死. 如果他们的目的是得到遗言, 那么显然应该还包括杀死秦桧, 这点虽没说, 但应当是显而易见的. 且杀死秦桧这个目的肯定更重要, 毕竟按理来说遗言只是一个精神象征, 一个精神上的目标, 得到遗言后杀掉秦桧才是物质上的目标. 观众不太能相信他们仅仅只有一个精神目标, 没有物质目标. 既然如此, 为何孙均不在牢房里和张大一起动手?</p>
<p>稍后秦桧问这个疑问:“是怕没有把握么?”, 稍微解释了这一点. 但我依然不相信孙均会解决不了一个侍女.</p>
<p>当然还有一种可能, 孙均在牢房里时还和秦桧一伙, 在走出牢房时又反悔, 觉悟了. 这更不可能, 人物性格转变不会这么奇怪.</p>
<p>最后假秦桧自杀, 真秦桧出场, 我本以为孙均会沮丧, 因为显然他们的任务没有完成, 他们仅仅得到了遗言, 却没有杀死秦桧. 但后来又反转了, 张大他们原来根本不想杀秦桧, 他们的目的自始至终是: 得到岳飞遗言, 然后让秦桧活下去, 受人唾骂.</p>
<p>此时一切都解释通了:</p>
<ol>
<li>孙均为什么和张大一伙,却不在牢房里杀秦桧 ? 因为张大他们的目的自始至终都是: 得到遗言, 并让秦桧活着. 秦桧不能死, 或者说没必要在得到遗言之前主动杀死, 遗言才是首要的.</li>
<li>孙均是一开始就加入张大的计划的, 而不是在计划执行中“被感化的”. 如果他是被感化的, 他不可能知道张大他们的真实目的是得到遗言.</li>
</ol>
<p>此时还有个问题, 如果孙均是张大一伙的, 那为何还有他不忍刮掉刺字, 并问张大“为什么” 这一段? 这似乎没法解释, 姑且认为是张大他们怕隔墙有耳, 所以自导自演的戏.</p>
</li>
<li>
<p>在影片的开头部分, 我以为电影的剧情就是: 张大为了活命, 向众人瞎编了袋子的来历, 实际上袋子不一定是信袋, 那封信也不存在. 张大凭借智慧,坑死了丁三旺和王彪, 没想到丁三旺和王彪果然有鬼. 而当孙均杀死了这二人却依然没有发现信时, 他和张大就处在一条船上了, 两人只能把这个谎言传递下去, 最后引出一场闹剧. 也就是说, 我本以为剧情大纲是“A撒了谎, 导致B犯了错, 为此B只能接着把谎撒下去, 没想到撒谎的同时还引出了别的事情(这里指丁三旺和王彪)”.</p>
<p>随着剧情推进, 我发现原来电影比这高级多了, 张艺谋给我们开了个玩笑. 张大不是个光撒谎的喜剧角色, 这一切都是有所预谋的!</p>
<p>关于张大的身份, 其实早就有所预告. 如果说张大一而再再而三地表现出的超常的推理能力属于导演强加的设定, 那他在杀金人传译时展露的敏捷身手, 就暗示着他并非一个普通士卒了.</p>
<p>那么, 既然张大的立场是那样, 为何他又要多此一举杀掉金人传译呢? 我认为是他想要完成任务(得到遗言), 而如果金人传译回去, 金廷就会有所戒备, 和秦桧的交流就会更加小心, 不容易抓住把柄了. 当然这都是以后的事, 和当前的计划好像没什么关系.</p>
</li>
<li>
<p>孙均提到三年前是他帮张大赶跑了债主, 联想张大和瑶琴的对话, 应该是张大当时借钱把瑶琴赎了出来, 因此被债主逼迫.</p>
</li>
<li>
<p>为什么秦桧在朗诵《满江红》时那么激动? 难道他一个奸臣还能对这首词有共鸣? 或者他是个变态, 所作所为无法理喻?  因为朗诵者是假秦桧, 他是反对秦桧的.</p>
<p>同理, 为什么假秦桧会知道岳飞遗言? 因为假秦桧是支持岳飞的. 所有人, 除了真秦桧自己, 都以为秦桧看到了遗言, 张大他们也这么认为, 没想到实际是假秦桧看到的. 真秦桧想必在偷听孙均和假秦桧对话时觉得可笑, 因为他不知道什么遗言. 没想到啊, 假秦桧看到了.</p>
</li>
<li>
<p>我一直在想, 电影名字为何叫《满江红》. 在电影前半段, 我认为它代表一种讽刺, 将《满江红》所表达的忠勇和电影里的机关算尽作对比. 后来张大的刺字暴露, 我又认为“满江红”作为岳飞的词, 代表了张大他们这些岳飞旧部的精神. 最后我才意识到, 原来它指的就是《满江红这首词》, 它没有别的意义, 张大他们真的在找这首词.</p>
</li>
<li>
<p>本以为信是张大胡诹出来的, 信根本不存在. 没想到真的有这封信, 且内容真的是秦桧通敌. 但这就引出一个问题: 张大他们, 怎么会知道这封信的存在?</p>
<p>张大是岳飞旧部, 那么张大他们的势力不会很大. 如果连他们都知道“金国使者带着和秦桧的信”的消息, 那么其他更大的势力, 比如朝廷大臣和皇帝也都能知道.</p>
<p>唯一的解释是, 张大他们知道秦桧通敌, 因此推断金国使者会在这次会议中携带和秦桧交流的“物件”. 至于那个物件是什么, 他们事先不知道. 但他们只需杀死金国使者, 自然能从尸体中得到物件, 到时候再随机应变开展计划即可.</p>
<p>但是, 后面的很多套路又都和“信”有关, 所以这个局必然是事先设定好的, 已知这个局从杀死金国使者拿到信开始, 那么他们在杀人前怎么知道那个物件是信呢? 总不能在发现那是封信后, 才设计了后面的计划吧. 要知道从使者被杀到计划开始没过多久, 他们没有条件聚在一起商量这个复杂的计划.</p>
</li>
<li>
<p>刘喜暴露后, 张大塞给刘喜女儿的手镯也被何立摔碎了, 但影片结尾, 女儿却没事, 没有被杀掉. 这是否不符合何立和秦桧的性格, 或者说这个情节是导演的艺术加工?</p>
</li>
<li>
<p>秦桧的两个侍女到底是不是聋子. 假秦桧在和孙均对话时, 答应把鸽笼送给孙均, 他说话时手没怎么动, 应该表达不出“把鸽笼送给孙均”这么复杂的意思. 且两个侍女都站在他后面, 应该看不到秦桧的手势?</p>
<p>话说回来, 秦桧说他鸟笼里是黑鸽子, 而世人以为是乌鸦时, 我还以为那真的是乌鸦. 因为乌鸦代表贬义, 而秦桧明明是奸臣, 却自称好人, 正和那只鸟明明是乌鸦, 却被秦桧称作鸽子一样. 没想到那鸟真的是乌鸦... 这算是秦桧说的为数不多的真话.</p>
</li>
<li>
<p>孙均放飞鸽子, 后者被侍女们用剑击落时, 我心里咯噔了一下, 并且纳闷孙均怎么这么大意, 只要往门外走两步再放飞, 不就不会让鸽子离开房间, 进而不被击落吗? 其实他是故意的, 因为他的目的是把剑架在秦桧脖子上逼秦桧说岳飞遗言, 而他此时手无寸铁, 通过把鸽子放在房间里乱窜,  侍女就会拔刀砍鸽子, 他就有机会夺刀, 进而逼迫秦桧. 至于鸽子, 死了就死了, 它能不能飞到京城不重要, 让皇上知道秦桧通金进而杀死秦桧不是张大他们的目的.</p>
</li>
<li>
<p>这个局里死的最冤的就是武义淳和何立了.</p>
<p>武义淳拥有一定的智慧, 也拥有免死金牌这威力巨大的工具, 甚至说他和张大他们某种意义上立场也是一伙的. 武义淳是皇上的人, 是来监视秦桧的, 而张大等人的目的也是秦桧. 可惜了, 这个局确实凶险, 武义淳占尽优势, 依然被害死了.</p>
<p>何立虽然和秦桧一伙, 但也算聪明绝顶, 他死的原因仅仅是他想活下去, 想知道信的内容, 从而抓住秦桧的把柄. 可能他也觉得通金这个事情太大, 秦桧不会留他活着, 因而出此计谋. 和武义淳不同的是, 何立不是被阴死的, 他纯粹是大意了, 被偷袭得手.... 他知道瑶琴和张大是一伙的, 此时他要么:</p>
<ol>
<li>认为张大和瑶琴死了, 局就结束了</li>
<li>认为二人死亡后, 局还不会结束</li>
</ol>
<p>即使是情况1, 瑶琴在杀了张大后, 也可能会和自己换一条命. 因此无论如何, 在命令瑶琴杀张大时, 他都应该防着点. 但一时大意了, 没防住...</p>
<p>王彪就更可怜了, 丁三旺拿出金子的时候我以为张大歪打正着发现了二人的隐秘关系, 没想到王彪真是清白的...</p>
</li>
</ol>
<p>如前所述, 我个人认为影片是有一些Bug的, 如下:</p>
<ol>
<li>张大为什么要杀金国传译</li>
<li>刘喜的女儿为何没事</li>
<li>张大他们为什么知道信的存在</li>
<li>孙均为何不刮掉张大的刺字, 孙均为何还要问张大“为什么”</li>
</ol>
<p>《满江红》讲的是一群人, 前赴后继地死去, 仅仅为了一首词, 多么有有传奇色彩, 多么有诗意. 其实这也侧面反映出张大他们已经不再有志于抗金了, 他们或许认为, 天下大势已定, 朝廷已经无可救药, 杀了秦桧一人也改变不了什么. 他们只想要缅怀岳飞, 并留下他的遗言, 把他的精神传递下去, 聊作精神慰藉, 仅此而已.  有两点可以证明:</p>
<ol>
<li>张大他们如果是为了抗金, 那么出于现实情况考虑 应该杀死秦桧, 起码秦桧的死能对宋朝局势有一丁点的影响.</li>
<li>孙均在牢房里也说, 他希望和张大过老百姓的生活, 不再掺合朝廷之事. 我们知道中国古人喜欢明知不可为而为之, 如果他们是为了抗金, 那么即使朝廷政治再黑暗, 也会奋斗其中. 不参与政治代表着对局势已经心灰意冷.</li>
</ol>
<p>总之, 《满江红》是相当优秀的电影, 我在这里甚至没有夸电影的制作部分, 包括服装, 摄影, 场景, 灯光. 张艺谋的摄影技巧一向很高级, 《影》的光影变幻, 《悬崖之上》的俯视视角, 都在《满江红》大量使用. 不过张艺谋似乎太偏爱“替身”这个设定了, 《影》里面已出现了一次, 这次《满江红》还要用, 是不是有点频繁?</p>
<p>《满江红》是今年最优秀的电影, 张艺谋是中国最好的导演. 易洋千玺在电影里的表现也没的黑.  我给这部电影打满分.</p>
]]></content>
      <categories>
        <category>Art</category>
      </categories>
      <tags>
        <tag>Movie</tag>
      </tags>
  </entry>
  <entry>
    <title>TOEFL Hometest Experience</title>
    <url>/2023/02/13/TOEFL-Hometest-Experience/</url>
    <content><![CDATA[<p>分享一下TOEFL hometest的经验.</p>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<p>作为IELTS -&gt; GRE -&gt; TOEFL三场考试的最后一场, TOEFL的备考不仅是一段难忘的经历, 更是一次试炼. 毫不夸张地说, 考完这三门后, 我的精神状态, 意志力和作息都有了很大的改变.</p>
<p><em><strong>NOTE: 由于都是ETS开办的考试, IELTS, GRE , TOEFL有很多相似之处. 请按照 IELTS -&gt; GRE -&gt; TOEFL的顺序阅读, 在前面的文章中叙述的内容, 后面的文章就不再复述了.</strong></em></p>
<p>虽然雅思成绩被全世界认可, 但美国学校对雅思成绩会有歧视, 比如雅思7.0只能等于TOEFL90. 也有些学校(尽管很少见)会明目张胆地说“更喜欢TOEFL分数”:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Study%20Abroad/TOEFL/TOEFL%20Preference.png" alt="TOEFL Preference"></p>
<p>因此, 即使有雅思, 也必须再考个TOEFL. 这不意味着雅思白考了, 后者还可以用来申请欧洲和加拿大作为保底.</p>
<p>以下是我的TOEFL备考经历, 我考了两次, 第一次准备了14天, 分数98; 第二次准备了8天, 分数102. 这里的“准备时间”指的是从报名考试到考试当天的时间, 毕竟在没报名之前我也不会认真复习. 当然, 实际学习时间远小于准备时间. 请原谅我凌乱的叙述, 因为那是段痛苦的记忆, 一想到它我就语无伦次...</p>
<p>心急的可以直接拉到最下方<a href="#Summary">Summary</a></p>
<h1 id="Register"><a class="header-anchor" href="#Register"></a>Register</h1>
<p><a href="https://zhuanlan.zhihu.com/p/443859295">托福家考报名教程</a></p>
<ul>
<li>没有中国护照的就不要填passport</li>
<li>national ID这里选China，在ID这里写身份证号。</li>
</ul>
<p>TOEFL线上考试报名和GRE几乎一样:</p>
<ul>
<li>同样用Visa卡买考试券
<ul>
<li>TOEFL线下</li>
</ul>
</li>
<li>同样有超多考位任挑选</li>
<li>考试用同样的软件: ProtectU和ETS browser. 我考完GRE后电脑不需要做改动就能考TOEFL.</li>
<li>同样的场地要求, 找教务员约个教室就行.</li>
</ul>
<p>不过, TOEFL成绩单上会注明考试是线上还是线下, 因此hometest的分数可能会不被某些学校接受. 但这也是罕见的(仅见过ASU和Connel), 而且考虑到疫情期间线下根本报不到名, 线上考是唯一的选择.</p>
<h1 id="Prop"><a class="header-anchor" href="#Prop"></a>Prop</h1>
<p>GRE和雅思考试时间间隔是21天, 若申请季在即, 则必须一次通过. 否则可能来不及考第二次.</p>
<p>但TOEFL只有3天间隔, ETS巴不得让考生过(托福“过”一般是指超过100分). 只要钱多就不用担心过不了/来不及.</p>
<ul>
<li>出成绩时间: <strong>4-8天</strong>. Reading和Speaking考完当场出分, 总体成绩要等4-8天在ETS官网查看.
<ul>
<li>如果8天没出分, 说明成绩被Hold了.... 也就是怀疑你有作弊嫌疑.</li>
</ul>
</li>
<li>TOEFL考试<strong>全年的报名次数无限制</strong></li>
<li><strong>两次考试的间隔时间最短为三天</strong>, 线上线下分别计算间隔. 也就是说可以当天考完线下, 然后约第二天的线上...</li>
</ul>
<h1 id="Test-Procedure"><a class="header-anchor" href="#Test-Procedure"></a>Test Procedure</h1>
<p>之前说过了, TOEFL家考和GRE是一模一样的, 用的软件一样, 考试要求也一样, 因此在流程方面没什么可说的.</p>
<p>对于带的物品, 也和GRE相同, 只能带一个可擦拭的白板以及对应的笔和海绵, 直接使用GRE时期的遗产即可.</p>
<p>在考完阅读和听力后有10min的休息, 这个休息时间不能主动要求缩短. 考生可以在此期间上厕所(需要先和考官说一声). 休息结束后, 考官会要求考生重新做一次和开考前一样的房间检查.</p>
<p>TOEFL家考据说要考4h, 但我两次考试都只花了约3h20min.</p>
<h1 id="Preparation"><a class="header-anchor" href="#Preparation"></a>Preparation</h1>
<p>我的GRE考试在2022.10.26. 但在11.25那天, 一个同学和我说了美国留学的好处. 说来惭愧, 此前一直没有考虑过去US, 是我的疏忽. 在听说了美国留学的好处后, 我心潮澎湃了一整天, 并下定决心要去US追逐全新的人生. 当然了,  这也意味着了我的GRE必须一次通过, 否则就赶不上美国申请(最早的DDL在11.30, 大部分在12.15)的时间了. 其中的压力自不必多说.</p>
<p>10.26中午我考完了GRE, 那天下午我开始琢磨美国申请, 之后的两天我不停通过网络, 同学和中介了解美国留学的信息, 包括: 费用, 门槛, 回报, 步骤, 所需材料等. 经过长达四天的探索, 我发现自己是能够申请美国的某些学校的, 尽管我背景很差, 但如果把要求放低, 依然能够去一些学校. 在费用方面, 如果申请公立学校, 加上假期的实习, 也是能承担的.</p>
<p>但是, 申请美国就需要TOEFL, 我又得面对语言考试的折磨中. 我九月考完雅思, 十月考完GRE, 运气好, 都是一次就过了. GRE考完后, 我的意志已经接受了苦难的洗礼, 整个人说是脱胎换骨也不为过. 本以为GRE之后一切都结束了, 没想到才出狼群又入虎口, TOEFL堵在命运的隘口向我冷笑. 由于美国申请的最早ddl是11.30, 大部分是12.15, 为了赶上时间, TOEFL必须是一次过.</p>
<p>其实只用雅思和GRE也已经能申请一些学校, 但教育之事不可马虎, 为了让自己的选择更多, TOEFL还是得考. 再加上距离最早的DDL( 11.30 )还有一个月, 考一次完全来得及, 因此必须得搏一把.</p>
<p>以上是我当时的想法, 后来我又收集了一些信息, 其实情况没有我想的那么严峻:</p>
<ul>
<li>其实可以在网申阶段先提交雅思成绩, 后面TOEFL出分了, 再把TOEFL成绩update上去( 即使此时网申已经结束 ), 这意味着我理论上拥有好多次TOEFL的容错, 一月份考都来得及.</li>
<li>直到考前两天我才知道, TOEFL考试间隔只有三天, 因此只要钱多和不怕失败, 怎么都是来得及的...</li>
</ul>
<p>所以, 我可以安慰自己: TOEFL第一次不过也没关系, 因为考第二次很方便 ); TOEFL不过也没关系, 可以用雅思; 甚至不去美国也没关系, 可以去欧洲. 但这都是虚假的自我安慰, 是迫不得已的下下之策. 失败的确可以承受, 但谁又愿意失败呢? 考试失败不仅会多花好多钱( 家考报名费1500多 ),  而且对意志力和自信心是极大的打击. 我都不敢想象第一次没过的话, 之后的心情会如何, 会有多么彷徨, 焦虑和自责.</p>
<p>我在11.1报名了11.15的TOEFL家考. 我选择在14天内备考, 原因有二:</p>
<ol>
<li>首先, 我想为美国申请留足时间, 提高容错率.</li>
<li>其次, 我认为我已经有了GRE基础和家考基础.</li>
</ol>
<p>事后看来, 这个安排很微妙. 如果我好好复习, 只准备十天都足够了; 但若复习不认真, 二十天可能都不够. 当时我还比较懒散, 只能在DDL前迸发出动力, 即使准备时间延长到20天, 也不过只努力最后5天罢了. 当然我也不敢只准备十天, 那样过于冒险. 因此14天是很合理的.</p>
<p>TOEFL的备考过程异常艰辛, GRE是地狱, 而TOEFL是横亘在天堂大门前的深渊. 虽然不同于GRE, 有许多次机会, 但谁又愿意承受额外的痛苦呢? 退一步说, 即使考第二次, 那么连第一次都没考过, 准备时间更仓促的第二次又能考多高呢? 此外, 为了追求高效率, 我做了个贪婪的tradeoff, 比较冒险地把大量的DDL和私人事务都被安排在了11.15之后. 也就是说, 我所有对“美好”未来的假设, 都建立在首考通过的基础上. 如果过了, 那我将会拥有一个舒服的下半学期; 如果没过, 就需要在备考中赶DDL, 并承受巨大的心理压力.</p>
<p>因此, 怀着对成功的渴望(离美国申请就差这一场考试)和对失败的恐惧, 我开始了TOEFL的备考之路, 度过了折磨程度丝毫不减GRE, 的噩梦般的十四天.</p>
<h2 id="Day-1-7"><a class="header-anchor" href="#Day-1-7"></a>Day 1-7</h2>
<p>IELTS -&gt; GRE -&gt; TOEFL是我不断蜕变的过程, 反过来说, 在考完TOEFL之前我还没蜕变成功, 因此做事不够合理, 不够自律也在所难免. GRE备考后, 我的意志力在短时间内大幅度地衰退, 这可能是大脑对先前的压力所采取的报复性的保护措施. 因此我曾经点燃的灵魂的火焰, 现在虽依然存在着火种, 却已然潜藏在灰烬下了. TOEFL就是我拨开灰烬重燃火焰的时候.</p>
<p>在备考的前七天, 我是比较懈怠的. 我没有认真复习, 而仅仅在网络上收集关于TOEFL的信息, 包括考试形式, 考试内容和复习资料. 我了解到TOEFL最难的是同理, 因此每天听<a href="https://www.bilibili.com/video/BV1jJ411X7KE/?share_source=copy_web&amp;vd_source=9bb7bae2f9b5b41ed3bf1d8b955097d4">托福听力练习</a>. 对于阅读, 在做了一次模考, 发现它不难后, 就没有放在心上. 对于作文, 网传它和GRE作文一样有模板, 可以两天内速成, 我也就没复习.  同时我天真地以为七天就可以搞定口语...</p>
<p>这七天内我并没有做题, 每天仅仅是听听力和收集资料. 这种低效不仅是意志力不足, 还有我当时在节食的缘故. 人在低碳状态下确实是很难集中注意力的.</p>
<h2 id="Day-8-14"><a class="header-anchor" href="#Day-8-14"></a>Day 8-14</h2>
<p>在最后七天, 我意识到了形势的严峻:</p>
<p>根据收集的信息, 不像GRE有成套的书和练习册可以做, TOEFL的资源几乎只有TPO(一套官方提供的模考卷子). 在做了一次TPO(使用了考满分, 免费, 而且效果很好, 和考试很接近 )后, 我发现自己有诸多不足:</p>
<ol>
<li>阅读虽简单, 但也有难的, 而且阅读的单词有很多不在GRE中. 这样的单词一旦出现三四个, 这篇阅读就很容易错. TOEFL阅读一般都追求满分, 因此任何错误都不能容忍.且阅读时间很紧, 一篇18min, 来不及做</li>
<li>听力非常非常难, 而且找不到(快速)提升的手段. 我除了多做题, 多重放外别无他法. 而且听力只放一次, 在考试时是最大的不确定因素, 万一有什么闪失( 比如一段没听到 )就完蛋了</li>
<li>作文还没开始练</li>
<li>口语一窍不通, 不仅不知道说什么, 还经常超过规定时间. Task1只有45s, 想不到应对的方法. 指望我在45s编出一段话也太难了.</li>
</ol>
<p>此时我非常后悔之前虚掷光阴, 把多少机会都浪费了.  这段时间我在纠结要不要改期, 改期有如下缺点:</p>
<p>改期有三个问题:</p>
<ol>
<li>转考费高达四百多元, 有点贵.</li>
<li>备考已经非常痛苦了, 再改期又会延续痛苦. 而且之前的tradeoff决定了我在11.15后有很多事情. 如果改期, 我就得边备考边忙这些事, 压力更大</li>
<li>改期是对自己不自信的表现, 会损害自尊心和意志力. 考个TOEFL还要改期, 面子上挂不住.</li>
</ol>
<p>当然, 比改期更可怕的是考试没通过..... 此时我还以为TOEFL考试间隔和GRE一样是21天, 所以当时认为必须一次通过TOEFL才能赶上申请的DDL.</p>
<p>最后, 凭借着倔强和一丝自信, 我毅然决定不改期, 其实转考费太贵了也是一个因素.... 这也意味着我在之后几天需要拼命了.</p>
<p>接下去四天, 我继续收集资料, 有了一定进步:</p>
<ol>
<li>阅读只需要多练就能提升. 一方面, 练了几篇后阅读速度就提升了, 不用担心时间紧张; 另一方面, 练多了就对出题思路和题型更了解了, 不仅不需要浪费时间读题目要求, 还可以排除曲解题意而丢分的风险. 此外我还发现了一个<strong>阅读学科词汇表</strong>, 照着背能极大地改善TOEFL词汇问题.</li>
<li>我从B站上找到了讲解作文模板的视频, 非常好用.  此外作文分数普遍偏高且稳定, 不必太过担心. TOEFL作文比GRE还简单, 后者我准备了三天, 前者我虽然较早就开始准备, 实际训练也没有几篇.</li>
<li>我收集到了口语模板,前者针对Task2,3,4, 后者针对Task1. 据说, <u>Task2,3,4只要时间说满, 没出太大问题就能拿个fair(23分), 拿高分则需要在Task1上表现出色</u>.  但是, Task1和雅思口语差不多, 不是短时间内能训练的. 我只能不断地练习套路, 希望能在考试时用上.</li>
<li>又做了三四次TPO.</li>
</ol>
<p>可以看到, 在这四天里我的复习效率极低, 没有做多少题, 也没有进行专项训练, 时间都花在收集材料上. 而且我还把这四天中的两天用来锻炼, 事后看来这是个很奇怪的决定. 这四天结束后我很不开心, 也非常自责, 这也是我备考的常态了.</p>
<h2 id="Last-3-days"><a class="header-anchor" href="#Last-3-days"></a>Last 3 days</h2>
<p>最后三天, 效率随着压力而提升, 有了如下进展:</p>
<ol>
<li>阅读又多练了几篇, 觉得没问题了. 那个词汇表非常有用, 背完后不仅是阅读, 其他section出现的词汇也能解决.</li>
<li>听力有一定进步, 但是在三天内不太可能有质的突破.</li>
<li>看到一个言论: 口语的task1据说只要硬背素材, 把时间说满就能拿23分. 这个“硬背”有多“硬”呢? 几乎是不管问题直接闭眼回答的程度. 因此我再把模板背完后, 有了一定信心.</li>
<li>作文套模板写得比较顺利</li>
</ol>
<p>我做了大量的TPO并背了一半的阅读词表. 因为没时间练整个模考, 所以对TPO, 我只单独地做它的某个section.</p>
<p>很坑的是, TOEFL在19年经历过一次改革, 自那之后口语就从六题变成了四题, 但是大部分TPO都是历史遗留产物, 其口语都是六题的. 为此我非常着急, 担心无法及时找到资源,  好在后来发现了考满分上的新版听力模考入口.( 这也说明我之前就没做过听力模考, 考前三天才开始第一次模考.... )</p>
<p>倒数第二天, 我的复习量比较大, 大概学了6h, 包括: 3h口语, 背阅读词表, 并在中午和睡觉前练了一遍作文. 此时我觉得口语和作文都有迹可循了, 但要达到不经思索就能回答的程度, 还得继续巩固.</p>
<p>压力的顶峰也在这一天(而不是明天)来到.  失眠; 压力大; 白天大量学习但仍效率不足, 以上在考试前一天经常出现的症状, 居然在考试前第二天出现了. 对此我一般会在第二天, 也就是考试当天, 早起并继续复习. 在第13天有了考试前一天的状态, 其实说明我的准备时间太长了, 我可以只准备13天, 而非14天.</p>
<p>考试前一天, 巨大的压力累积在我心中, 如同一颗炸弹, 此时我反而平静下来, 因为理智告诉我, 水平已经无法改变了.</p>
<p>这一天我依然是:</p>
<ul>
<li>做大量的模考(阅读, 口语), 确认已经解决了阅读速度问题, 并又看了一遍词表.</li>
<li>大量练口语, 能够流利地背诵几个套路.</li>
<li>对于作文, 其实昨天就已熟谙了, 今天在中午和睡觉前分别写了一篇作为巩固.</li>
</ul>
<p>虽然做了这么多事, 我依然毫无把握, 因为TOEFL以听力和口语为主, 这二者都很大程度上取决于考试时的发挥, 所以无法拿高分并没有保证.按照我的估计, 如果发挥正常, 应该能100+. 然而, 如果听力漏听, 或者口语卡壳, 那么结果就无法想象. 因此我反而十分慌乱, 许是太烦躁的缘故, 或者是巨大的压力给了我又某种盲目的自信或破罐子破摔的想法, 当晚我还花了1h健身.</p>
<h1 id="Test-Day"><a class="header-anchor" href="#Test-Day"></a>Test Day</h1>
<p>总算到了考试当天, 我的抑郁在清晨起床时达到顶点. 这种早起考试, 考十分重要却又没有把握的试的感觉有谁懂? 我在过去两个月经历过两次, 每次都希望是最后一次.</p>
<p>由于有GRE家考的经验, 考试过程应该是顺风顺水的, 但好巧不巧, 就在此时事故发生了:</p>
<ul>
<li>
<p>家考需要在预约时间12 min内 “check in”, 我不知道check in是什么东西, 是进入ProtectU的“Start Session”, 还是成功在LMI上连接examer? 总之, 在8:35点击Start Session后我的界面一直处在这个阶段:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Study%20Abroad/TOEFL/LMI%20waiting.png" alt="LMI waiting"></p>
<p>之前家考我也经历过这一场景, 到了这一步什么都不需要做, 等examer接管电脑就行了. 但到8:40我觉得不对了, 我的考试时间就是8:40, 怎么examer还没来? 之后漫长的等待中, 我重复了无数次Start Session, 无果. 到8:50时我的心在地震. 我在网上查, 在QQ群里问, 都没有结果.</p>
<p>到了8:52, 理论上我已经失去了考试机会, 我瘫坐在椅子上, 意识是空白的, 我不知道自己要做什么, 也不知道接下来要怎么办. 我要找ETS argue吗? 怎么argue? 能安排我在当天再考吗? 我不想等三天了. 钱能退吗? 总之, 这几分钟是我人生中最痛苦的几分钟, 我永远忘不了那种坐在椅子上手足无措的感觉.</p>
<p>此时我想到, 要不手动打开LMI试试, 由于我考GRE时, 该软件是由examer打开的(大概?), 因此我不认为“手动打开它”有什么意义, 就当是死马当活马医吧. 打开LMI, 没找到examer, 但界面上输出“Connection Closed”, 我猜“打开LMI”这一行为在8:52之前是有效的, 此时过了12min的期限, 考官早已离开了.此时我彻底绝望, 只觉得自己要为没打开LMI这一行为付出巨大的代价.</p>
<p>接着.... 接着奇迹出现了. LMI上突然显示Connect成功, examer也出现了. 我非常非常激动, 对他解释自己的情况, 并且问他我能不能正常考试( 因为超过了12min的限制 ), 但examer只字未提, 默默地指导我开始考试... 此时我有点意识到了, <strong>很可能不是我的问题, 是考官迟到了....</strong></p>
<p>虽然这个猜想未经证实, 但我认为可信度很高. 因为我清楚地记得, GRE那次也没有手动打开LMI, 到了那个网页自动就被examer接管了, 没道理这次会因为没手动打开而迟迟连不上examer.</p>
<p>总之这段经历非常非常凶险, 也非常非常揪心, ETS成天搞这些东西.... 哎!</p>
</li>
<li>
<p>听力考完后有10min休息, , 我觉得考得还行, 就想出去上个厕所. 由于对在前两个section的表现比较满意, 我在洗手间对着镜子手舞足蹈了好一会. 等回去时才发现出门时把门锁了, 而这间房间是我向院楼借的, 我没有钥匙. 眼看要超过规定的休息时间, 热锅上的蚂蚁都没有我急, 我飞快地坐电梯到楼下(吐槽一下院楼的电梯, 来得太慢了, 使我非常紧张, 看着显示屏上红色数字跳动, 仿佛听着我的心跳)找管理教室的老师, 万幸这位老师有钥匙, 最后我在休息时间剩下3min时成功返回座位. 如果我真的因为它而导致考试失败, 那这件事会成为我一生的污点. 幸好我没有在洗手间多呆两分钟.</p>
</li>
</ul>
<p>其余部分没什么可说的, 出乎意料的是正式考试很简单, 这也符合我对ETS的一贯认知: 准备很痛苦, 考试时很简单, 而且给分也很友好(希望吧). 阅读不仅super easy, 时间也很充裕, 做完后我甚至还剩了20min. 听力也放得很慢, 但我依然没做好, 出分时发现错了很多.</p>
<p>口语和阅读也挺简单的, 但我的发挥出乎意料的差. 特别是口语task1, 我不仅说得磕磕绊绊, 观点也只讲了讲了一点, 其内容当然是事先背的模版, 最要命的是, 我在说完这点后, 发现时间还剩20s. 我愣住了, 不知道要不要说第二点, 因为此时我脑子里根本没准备第二点... 在愣了10s后, 我开始即兴发挥说第二点, 结果说到一半时间就到了! 这是灾难级发挥啊!  阅读的独立写作只写了300多字, 论点根本想不出来, 只能写套话凑字数.... 且最后检查时还发现了个错别字, 但只剩1s了, 没时间改..</p>
<p>考完后我自己也感到意外, 没想到会栽在口语和阅读上. 考后当场就会出前两个section的分数, 我的是30 + 25. 如果ETS给分好一点, 口语和阅读别扣那么多分, 我应该能满100. 可我偏偏在这两个部分发挥最差, 因此对最终得分完全没有把握. 总之我选择相信ETS, 相信我的好运会延续下去, 相信我不需要考第二次TOEFL(太痛苦了).</p>
<p>==》12.11 update</p>
<p>哈哈哈哈, 11.23早晨一觉醒来收到了ETS的邮件, 通知我TOEFL出分了, 心下窃喜, 没有被hold. 结果打开电脑一看傻眼了: 98分! 口语19! 这下麻烦了, 由于之前比较贪婪的安排, 我在后面的一个月都很忙, 没时间准备TOEFL, 而且美国申请ddl在即, 第二次考试必须一次过. 不过有了第一次的经验, 我已经明白了TOEFL正式考试的难度并不高. 换句话说, 难度不成问题, 问题是准备时间紧以及容错率低.</p>
<p>当然了, 我还有些侥幸心理, 因为我申请的许多学校, 纸面上只要求TOEFL80, 96等, 很少有要求100的. 我现有的98分其实也够了. 但这毕竟是幻想, 谁又敢真的去赌呢? 别的不说, TOEFL不满100不仅不是一个优点, 反而是一个缺点, 谁没事儿干给自己找缺点啊.</p>
<p>本着速战速决的原则, 我决定在月底把TOEFL考掉, 然而想象是美好的, 现实是残酷的. 由于其他事情, 等到我约TOEFL考试的时候已经是12.3了, 无奈约了12.11. 此外我在12.6收到通知, 有个非常重要的考试安排在12.11.</p>
<p>为此我特别焦虑, 首先是担心两个考试没时间复习, 其次是两个考试在同一天, 时间上无法安排. 后面得到确认, 那个考试在当天下午, 而TOEFL在上午, 因此不会冲突. 不夸张地说, 我之后的几天差点得抑郁症. 一直在反思我的错误, 其一, 如果我早点考完第二次TOEFL, 比如按之前计划的11月底, 那么根本不会面临如今的窘境; 其二, 哪怕我考试约的晚, 如果我之前好好地又复习了TOEFL, 同时准备两门考试的压力也可以大大减轻. 多说无益了, 我顶着巨大的压力度过了后面的几天, 那段时间非常煎熬, 我不想再体验第二次了.</p>
<p>最终, 我仅在12.8这天复习了TOEFL; 其他时间, 包括12.9和12.10, 都在复习另一门考试, TOEFL完全没碰.</p>
<p>12.11上午, 我裸考了我的第二次TOEFL. 那个早晨我在借的教室内踱步, 心中万念俱灰, 觉得自己已经完蛋了, 今天不过是来送钱的. 没想到考下来感觉还好:</p>
<ul>
<li>
<p>阅读和听力的发挥和上一次差不多, 顺风顺水地, 没出啥问题. 在我最头疼的口语部分, 我牢记了前两天学到的诀窍: 以流畅度为第一位. 哪怕只说一点, 也不要卡壳. 我一字一句地背出了和上次考试时完全相同的模板, 区别就是更慢更流利, 这次我说完后只剩下5s, 再接了一句万能的总结句(其实TOEFL口语不需要总结句, 但我很紧张, 觉得不能沉默5s)就结束了, 发挥意外地稳定. 更幸运的是, 这次的task1题目和我的模板能对应上, 不会像之前那么牵强.</p>
</li>
<li>
<p>Task2,3,4就非常魔幻, 居然和我上次考试是一模一样的题目! 我一度以为自己看错了或者记错了, 难道是上天要给我过吗? 好笑的是, 老天爷都开后门了, 我却没把握住, 回答得很卡, 反而比上次还卡, 甚至有个task没说完...</p>
</li>
</ul>
<p>考完后我仔细思考了一番, 这次除了口语, 发挥和上次差不多. 口语task1发挥更好, 2,3,4又更差, 只要口语分数不会像之前那样是耻辱的19份, 我就能上100. 但我依然很忐忑, 不清楚task1说得好, task2,3,4爆炸, 在评分上处于什么情况, 毕竟我问了别人, 口语每个task都是独立评分, 某个task的优秀并不能弥补其他task的失误.</p>
<p>==》12.17 update</p>
<p>哈哈哈哈, 早上又是收到了出分的消息, 打开网站一看, 102! 口语22, 差强人意. 总算和TOEFL分手了! 整个过程非常魔幻, 第一次考试我认真地备考了两周(额, 七天吧?), 结果差两分没过. 第二次考试是裸考却过了.... 命运给我开了个大大的玩笑.</p>
<p>准确地说, 如果你的实力仅仅在及格线上下徘徊的话, 运气会对成功与否有很大影响. 以我为例, 本来就只认真复习了七天, 横竖一百来分的水平, 稍微运气不好, 当然就跌落下去了. 要是我认真准备了两周, 或者准备一个月, 拥有105甚至110的水平, 发挥不好也起码能有个100. 总之这是个权衡的问题, 我只为TOEFL付出了这么点的时间, 就要为此承担风险.</p>
<h1 id="Summary"><a class="header-anchor" href="#Summary"></a>Summary</h1>
<p>ETS的考试都比较简单, TOEFL高分比较难, IELTS低分比较难, GRE只要刷刷题就行了. 我个人是不推荐报班的, 觉得没什么用.</p>
<p>TOEFL的备考时间看个人基础而定, 但不推荐超过一个月, 因为TOEFL属于应试, 考前突击两周就足够了, 准备太久徒增折磨.</p>
<p>考托福也不需要额外背单词, 边做题边认识单词, 再背那张词表就够了, 因为纯粹背单词也是效率很低的, 遗忘速度很快.</p>
<p>我所用到的学习资源放在<a href="https://github.com/LYK-love/ELP-Resources/tree/master/TOEFL">这里</a>.</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Study Abroad</tag>
      </tags>
  </entry>
  <entry>
    <title>Sending Scores</title>
    <url>/2023/02/13/Sending-Scores/</url>
    <content><![CDATA[<p>TOEFL, GRE, IELTS的送分流程.</p>
<span id="more"></span>
<h1 id="GRE-TOEFL"><a class="header-anchor" href="#GRE-TOEFL"></a>GRE&amp;TOEFL</h1>
<p>TOEFL和GRE的送分流程是相似的.</p>
<p>在报名考试后, 考试当天前, 可以选择若干所学校进行免费送分, 托福是四所:</p>
<blockquote>
<p>“You can send your scores to up to 4 score recipients as part of your test fee. Do not include yourself as a recipient. ”</p>
</blockquote>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Study%20Abroad/Sending%20Scores/Free%20Score%20Recipients.png" alt="Free Score Recipients"></p>
<p>新手(比如我)常犯的错误就是<strong>没有利用免费送分的机会</strong>, 导致后面要多自费送分四所学校, 白白亏了80$</p>
<hr>
<p>在考试出分后, 就只能<a href="https://v2.ereg.ets.org/ereg/orderScoreReport">自费送分</a>了:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Study%20Abroad/Sending%20Scores/TOEFL%20Send%20Score%20Recipients.png" alt="TOEFL Send Score Recipients"></p>
<p>托福每所20$, GRE每所30$.</p>
<p>学校会在招生页面上提供TOEFL和GRE的institution代码和department code用于送分. 当然事实上你会发现很多学校没有提供department code, 这表明它们不使用它. (如果对此有疑问, 最好问一下学校)</p>
<p>以Gatech的CSE program为例:</p>
<blockquote>
<ul>
<li>GRE Institute Code: R5248 (<strong>it is not necessary to have a Department Code</strong>)</li>
<li>TOEFL Institute Code: 5248 (<strong>it is not necessary to have a Department Code</strong>)</li>
</ul>
</blockquote>
<p>对于GRE来说, 若没有department code, 就在该学校的送分的“department code”处什么都不填. 而对于TOEFL, 如果没有department code, 则在该处填<strong>99</strong>:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Study%20Abroad/Sending%20Scores/TOEFL%20Department%20code%2099.png" alt="TOEFL Department code 99"></p>
<h2 id="送分状态"><a class="header-anchor" href="#送分状态"></a>送分状态</h2>
<p>ETS在一两天内就可以完成送分(“Processed”):</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Study%20Abroad/Sending%20Scores/Send%20Score%20Processed.png" alt="Send Score Processed"></p>
<p>但是, ETS完成了送分, 不代表对应学校收到了分数. 到确认目标学校是否收到了送分, 要么发邮件问, 要么在申请系统上看, 例如:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Study%20Abroad/Sending%20Scores/Score%20Verified.png" alt="Score Verified"></p>
<p>说明完成了送分</p>
<h1 id="IELTS"><a class="header-anchor" href="#IELTS"></a>IELTS</h1>
<p>IELTS送分是免费的, 比TOEFL, GRE良心很多. 由于我的IELTS是在NEEA而非ETS报的名, 因此只给出NEEA上的送分步骤.</p>
<p><a href="https://ielts.neea.edu.cn/homepage?QuVcIYRngAyv=1676203642769#">NEEA雅思官网</a> -&gt; 个人主页 -&gt; 考后服务 -&gt; 额外成绩单寄送:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Study%20Abroad/Sending%20Scores/Additional%20Test%20Report%20Form.png" alt="Additional Test Report Form"></p>
<p>-&gt; 申请额外成绩单寄送:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Study%20Abroad/Sending%20Scores/Apply%20for%20Additional%20Test%20report%20form%20Now.png" alt="Apply for Additional Test report form Now"></p>
<p>-&gt; 按要求填写即可:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Study%20Abroad/Sending%20Scores/Application%20Details.png" alt="Application Details"></p>
<p>注意, 现在应该全都是电子寄送了, 没有实体寄送的, 如果发现所选择的学校/部门只支持实体寄送, 建议问一下对方项目的Committee.</p>
<p>院校和部门应该都会在各个项目官网给出, 例如Gatech:</p>
<blockquote>
<p>IELTS has no Institute code - Select &quot;Georgia Institute of Technology&quot; and then choose &quot;Graduate&quot;.</p>
</blockquote>
<p>当然这里的名称可能有些不匹配, 文中说&quot;Graduate&quot;, NEEA上是&quot;Graduate Studies&quot;.</p>
<p>美国学校的雅思送分确实不如托福/GRE方便, 送分信息找起来比较麻烦.</p>
<p>雅思的送分状态也和TOEFL/GRE一样, 需要向目标学校查询.</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Study Abroad</tag>
      </tags>
  </entry>
  <entry>
    <title>GRE Hometest Experience</title>
    <url>/2023/02/13/GRE-Hometest-Experience/</url>
    <content><![CDATA[<p>分享一下GRE hometest的经验.</p>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<p>早就听说GRE特别难, 在获得雅思成绩后( 2022.10.29 ), 我马上就开始准备GRE了, 一开始报的名是11.23的苏州校区线下, 后来在考前第十天ETS短信通知我GRE延期了.... 无奈只能选择家考, 没想到打开了新天地, 家考实在太方便了!</p>
<p><em><strong>NOTE: 由于都是ETS开办的考试, IELTS, GRE , TOEFL有很多相似之处. 请按照 IELTS -&gt; GRE -&gt; TOEFL的顺序阅读, 在前面的文章中叙述的内容, 后面的文章就不再复述了.</strong></em></p>
<p>用到的学习资源在<a href="https://github.com/LYK-love/ELP-Resources/tree/master/GRE">这里</a></p>
<h1 id="Background"><a class="header-anchor" href="#Background"></a>Background</h1>
<p>我报名了两次, 11/30(大概?)报名的线下考试, 被取消后又在10/12报名了线上考试.</p>
<p>线下考试的报名没啥可说的, 可以不用到ETS GRE官网, 而是在NEEA GRE报名(相当于ETS在中国的官方代理). 线下考试据我观察没有任何优点:</p>
<ul>
<li>
<p>时间很不友好, 线下一般只能约早上八点. 考虑到很多人都不在自己学校考试, 那么得7:30赶到考场. 以我为例, 如果要在7:30赶到南京的南财经考场, 那可能得六点多起床....</p>
</li>
<li>
<p>日期非常少, 每个城市每个月只有两天, 一般是月中和月末各有一次</p>
</li>
<li>
<p>贵, 一次两千多</p>
</li>
<li>
<p>考试条件反而不如家考. 别的不说, GRE作文的最大问题就是没时间 ,需要打字速度快, 家考可以用自己的电脑, 体验肯定比考场好</p>
</li>
<li>
<p>线下考试时固有的不便:</p>
<ul>
<li>超长的检录时间, 我没有线下考过GRE, 但是以雅思的经历来说, 我8点多到考场, 还得排队排半小时, 排完队还要进考场慢慢等, 期间检查身份证查的, 九点四五十分才正式开始考试, 平白无故浪费一小时多时间</li>
<li>核酸,口罩等防疫措施..... 当时还有防疫承诺书, 线下考试得确保前两天核酸, 虽然这个要求很容易满足, 不过多了一个要担心的地方总是很难受.</li>
</ul>
</li>
<li>
<p><strong>放弃吧, 即使以上条件都能克服, 你依然是考不成的!</strong> 我雅思线下选的南京, 结果考试前十天南京疫情, 通知我取消. GRE也是这样, 这次我未雨绸缪报名了苏州校区, 想着苏州的防疫政策比南京宽松很多, 不会那么容易取消, 结果还是取消了. 而且根据我的观察, 今年就几乎不可能考成, 南京几乎每个月都来一波疫情, 苏州本来值得信任, 11月取消之后又失去信任了. 总而言之, 在现在这个时代, 线下考几乎就不可能. 极大概率会被取消报名的, 谁又愿意考试一再延期, 多拖好几个月呢?</p>
<p>--&gt; <strong>2023.2.12 UPDATE:</strong> 上面是当时我的观点, 如今疫情已经退去, 线下考场也不会取消了.</p>
</li>
</ul>
<p>线上考试就不一样了:</p>
<ul>
<li>时间自由安排, 凌晨到中午到下午都能约.再加上地点也是自由安排的, 不需要去别的学校了, 可以直接和本校的辅导员交流,借一间教室. 早上起床走两步路就到了.</li>
<li><strong>日期每天都有</strong>, 甚至可以直接约明天到考试.  我家考注册时, 看到11月份每天都有排期, 直接震惊了</li>
<li>便宜. 因为GRE“中国内地考生必须前往ETS授权的<a href="https://mip.hkeaa.edu.hk/mip/gre/register/139?locale=zh-CN">香港考试及评核局（HKEAA）官方网站</a>订购考试兑换券”, 价格是<strong>港币1,604</strong>,换算成人民币就是<strong>1300</strong>左右, 而线下考的话只能直接用<strong>人民币1665元</strong>, 直接省了300多!</li>
<li>考试过程舒服, 毕竟自己的电脑自己的键盘, 打字速度绝对快. 而且也没有了线下考试那些不便</li>
<li>不会因为疫情被取消</li>
<li><strong>GRE成绩上不会对家考和线下考试做任何区别, 家考和线下成绩的效力是完全一样的</strong></li>
</ul>
<h1 id="Registration"><a class="header-anchor" href="#Registration"></a>Registration</h1>
<p>线下考试可以到NEEA GRE报名: <a href="https://gre.neea.edu.cn/">https://gre.neea.edu.cn/</a>. 线上考试只能去<a href="https://www.ets.org/login.html">ETS GRE官网</a>报名. ETS的账号管理很混乱. 总之, ETS GRE和TOEFL账号是不同的, 我们要注册的是ETS GRE账号.</p>
<ul>
<li>
<p>报名教程:</p>
<ol>
<li>知乎: <a href="https://zhuanlan.zhihu.com/p/134076388">https://zhuanlan.zhihu.com/p/134076388</a></li>
<li>官方: <a href="https://takethegre.cn/gre-at-home/">https://takethegre.cn/gre-at-home/</a>. 官方的最全</li>
</ol>
<ul>
<li>其实就是选择考试类型的时候选“Test at Home”, 别的没什么</li>
<li>填Address的时候建议如实填写, 这样比较放心. 很多人说地址不能填China, 这是老早以前的事情了, 现在填China没问题的</li>
<li>还会有一个“是否接受GRE Search Service”的选项, 这是广告, 不选也没关系.</li>
</ul>
</li>
<li>
<p>需要注意, 中国大陆的家考报名的缴费只能使用<strong>考试兑换券</strong>, 而不是直接缴费.考生在GRE考试注册的付款页面也<u>看不到什么充值入口, 只有一个填兑换券号码的表单</u>, 往里面填兑换券号码就完成了付款. 兑换券购买方法是<a href="https://takethegre.cn/gre-at-home/voucher/">ETS 官方教程</a>:</p>
<ul>
<li>
<p>简而言之就是去<a href="https://mip.hkeaa.edu.hk/mip/gre/register/139?locale=zh-CN">香港考试及评核局（HKEAA）官方网站</a>订购考试兑换券。付款后就就可以在邮箱收到兑换券号码, 拿号码去报名</p>
<ul>
<li>
<p>注意, 兑换券的信息一定要填对, 特别是邮箱, 否则号码就会发到别人的邮箱, 白花钱了:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Study%20Abroad/GRE/Buy%20Coupon.png" alt="Buy Coupon"></p>
</li>
<li>
<p>邮箱收到的号码长这样:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Study%20Abroad/GRE/Coupon%20Code.png" alt="Coupon Code"></p>
</li>
</ul>
</li>
<li>
<p>兑换券购买<strong>只能使用Mastercard或者Visa卡, 使用港币以实时汇率结算</strong>. 不支持中国银联, 也不支持支付宝微信等手段</p>
</li>
<li>
<p>我之前都没听说过VISA卡, 被这步操作难住了. 其实VISA卡就是外国的银联, 中国本地的银行卡很多都默认不支持VISA, 但是可以到银行免费开一张. <strong>学生好像开不了VISA卡</strong>, 可以叫家长去银行开, 免费的, 而且几分钟搞定. 新开的卡和原有的银行卡挂钩, 即: 扣新卡的钱( 1604港币 )就相当于按实时汇率扣父卡的钱( 1300多rmb )</p>
</li>
<li>
<p>其实兑换券这个东西是个福利, 因为相比线下考试, 使用兑换券购买能<strong>省几百元</strong>!</p>
</li>
</ul>
</li>
<li>
<p>另外, 在最终的付款页面, ETS还会和你推销一些额外的服务, 比如一些模考, 其中有三套模考是免费的, 建议勾选上, 当然忘记选也没关系, 后面可以随时再在这个界面选:</p>
</li>
<li>
<p>报名成功后就会发你一封邮件, 里面有考试的链接, 到时候点这个链接进入考试:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Study%20Abroad/GRE/Taking%20Test%20Email.png" alt="Taking Test Email"></p>
</li>
<li>
<p>GRE和托福家考其实是用的一个APP: <strong>ProtectU</strong>, 它会提供考试服务. 点击上述链接其实就是打开ProtectU. 进去之后可以看到类似信息:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Study%20Abroad/GRE/ProtectU.png" alt="ProtectU"></p>
<p>因为没到考试时间, 所以显示的是“Scheduled”, 到考试当天的那个时候, 它就会多一个“Start Session”按钮, 点那个按钮就可以进行考试.</p>
</li>
<li>
<p>ProtectU是需要事先安装的,方式见下文</p>
</li>
</ul>
<h1 id="Prerequisites"><a class="header-anchor" href="#Prerequisites"></a>Prerequisites</h1>
<p>请看官方教程下的<a href="https://takethegre.cn/gre-at-home/equipment/">ETS GRE Hometest Equipment and Environment</a></p>
<h2 id="Equipment"><a class="header-anchor" href="#Equipment"></a>Equipment</h2>
<p>线上考需要安装两个东西:</p>
<ul>
<li>ETS考试专用浏览器</li>
<li>需要使用Chrome浏览器, 并在其上安装ProtectU插件</li>
</ul>
<p>步骤:</p>
<ul>
<li>
<p>Download and install the ETS Secure Test Browser on the computer you will use for the test. To fully install the browser, <strong>run the file</strong> after downloading it. Close the browser once you see the following message: &quot;Success! You have installed the ETS secure test browser.&quot;</p>
</li>
<li>
<ul>
<li><a href="https://ibtprod-rp.ets.org/SoftwareDistribution/rp/UnifyRPInstaller/0.1/UnifyRPInstaller_PROD.exe">Download the Windows version</a>. If you receive an error message, please follow these <a href="https://www.ets.org/content/dam/ets-org/pdfs/gre/ets-test-browser-installation-troubleshooting.pdf">troubleshooting steps (PDF)</a>.</li>
<li><a href="https://ibtprod-rp.ets.org/SoftwareDistribution/rp/PROD/mac/ETS-RP-PROD.dmg?_gl=1*mmzaz7*_ga*MTEzMjIxOTI0Ny4xNjY1NTAzMjA0*_ga_LSPK6N3LCN*MTY2NTU1MjE1NS4zLjEuMTY2NTU1MzQ2OS4wLjAuMA..&amp;_ga=2.99135898.565488951.1665503204-1132219247.1665503204">Download the Mac version</a>.</li>
</ul>
</li>
<li>
<p>Run the <a href="https://go.proctoru.com/testitout">ProctorU Equipment Check</a> from the computer you will use for the test. If you fail the equipment check, you must fix any issues before test day. Live ProctorU representatives are available to help.</p>
</li>
</ul>
<p><strong>Mac电脑完全OK, 我用的MacbookPro M1, 完全能支持</strong></p>
<h2 id="Environment"><a class="header-anchor" href="#Environment"></a>Environment</h2>
<p>很简单, 就是教室封闭, 不能戴耳机等等:</p>
<ul>
<li>
<p>确保你的考试空间符合所有<a href="https://takethegre.cn/gre-at-home/equipment/">环境要求</a>：</p>
</li>
<li>
<ul>
<li>房间安静且照明良好</li>
<li>桌子和周围区域无杂物</li>
<li>桌椅摆放的位置应确保监考员能看到房门</li>
</ul>
</li>
<li>
<p>确保着装得当，必须露出耳朵和面部。避免穿戴任何首饰或其它饰品</p>
</li>
<li>
<p>考试全程<strong>请始终露出你的耳朵</strong>，确保不被头发、帽子或其它物体遮住。考试期间，在始终露出耳朵的前提下，允许佩戴宗教头饰。<strong>在检入签到和其他在家考环节不佩戴口罩</strong></p>
</li>
</ul>
<p><strong>扬声器</strong></p>
<ul>
<li>使用内置或外置扬声器</li>
<li>不允许使用头戴式耳机或耳塞耳机</li>
</ul>
<p><strong>麦克风</strong></p>
<ul>
<li>使用独立于耳机之外的内置或外置麦克风</li>
</ul>
<p><strong>摄像头</strong></p>
<ul>
<li>既可以是电脑内置的摄像头，也可以是独立的网络摄像头</li>
<li>摄像头能够移动，以便在考试前向监考员360度展示房间，包括你的桌子表面</li>
</ul>
<h2 id="Tools"><a class="header-anchor" href="#Tools"></a>Tools</h2>
<ul>
<li>不能用平板电脑, 计算器等等, 只能使用“一个桌面小白板和可擦记号笔，不允许使用铅笔或钢笔”, 直接<strong>去淘宝买</strong>就可以了
<ul>
<li>考试界面上会提供计算器</li>
</ul>
</li>
<li>考试结束时，你需要向监考员展示所有笔记均已擦除
<ul>
<li>这种“需要擦干净白板”的<strong>小细节不需要记, 考的时候监考员会通过聊天框告诉你的</strong></li>
</ul>
</li>
</ul>
<h1 id="Procedure"><a class="header-anchor" href="#Procedure"></a>Procedure</h1>
<p>ETS官方说明:</p>
<p><strong>考试检入</strong></p>
<ul>
<li>在考试检入签到正式开始前，最后运行一次<a href="https://go.proctoru.com/testitout">ProctorU ® 设备检查</a>（ProctorU Equipment Check）并解决所有问题。<strong>请务必在你预约的考试预约时间开始前解决所有问题</strong></li>
<li><strong>到了预约的考试时间，在你的预约确认邮件中，点击“开始考试（Start Your Test）”链接。最迟在考试时间开始后的 12 分钟内进行检入签到。如果你超时未能检入，考试将被取消，并且考试费用不予退款</strong></li>
<li></li>
<li>选择“开始考试（Start Session）”</li>
<li></li>
<li>向监考员展示你的<strong>身份证件</strong>，完成身份验证步骤。注意身份证件上的姓名必须与 ETS 账户中的姓名完全一致
<ul>
<li>身份证件就是护照或者<strong>二代身份证</strong></li>
</ul>
</li>
<li>监考员会重申考试规则并要求远程连接你的电脑屏幕以进行监考</li>
<li>监考员会要求你使用手持镜子或手机来展示你的电脑屏幕
<ul>
<li>不需要买镜子, 用笔记本的摄像头就OK. 当然监考员可能还会要求你使用手机的镜子模式来作为镜子的替代</li>
</ul>
</li>
<li>监考员会要求你移动电脑摄像头以 360 度展示房间，其中包括你的桌子表面</li>
<li>监考员会启动 ETS Test Browser（ETS 考试浏览器），并输入 ETS 账号和密码以进入考试</li>
<li>预计完成检入签到过程约 20 分钟</li>
</ul>
<p><strong>考试中</strong></p>
<p>考试中和考试前都会被监控, 和监考员语音交流一般很少, 都是通过监考软件的对话框(考试时会打开)打字交流的, 非常方便, 有什么问题就问</p>
<p>以下内容都在官方教材里面写了, 总结一下就是听监考员的话, 有事问监考员:</p>
<blockquote>
<p>你的整场考试会由 ProctorU ® 录制视频，并由真人监考员全程监考，同时系统还会对你进行拍照。</p>
<ul>
<li>
<p>在考试的第三部分结束后将会有 10 分钟的休息时间，其他部分之间有一分钟的休息时间。在一分钟的休息时间内，请不要离开座位。在十分钟的休息时间内，你可以离开座位。<strong>请务必按时返回座位</strong>，额外的休息时间将不被允许。</p>
</li>
<li>
<p><strong>遇到技术问题？</strong></p>
</li>
</ul>
<p>如果在考试中遇到技术问题，请大声说话或者通过 LogMeln 聊天工具来通知监考员。聊天标志（蓝色猫头鹰）位于你的 PC 端任务栏或者 Mac ® 中的菜单栏。如果网络暂时中断，待正常恢复连接后，系统将自动重新连接至监考员。如果连接成功，监考员会帮你重新进入考试。如果你始终无法恢复网络连接、无法与监考员通话，请致电 ProctorU ® 以获取帮助 <a href="tel:+001-855-772-8678">+001-855-772-8678</a>。</p>
<ul>
<li>在考试中，监考员会（通过摄像头）对你和你的电脑屏幕进行监督，以确保符合所有考试程序。</li>
<li>确保监考员始终通过摄像头看到你，可疑动作会导致考试无效。</li>
<li>如果在考试中需要联系监考员，请通过讲话和/或利用页面上的 LogMeIn 聊天功能以引起监考员注意。监考员可能需要 30 – 60 秒的时间做出响应。</li>
<li>如果监考员尝试与你交流，蓝色猫头鹰的聊天图标则会闪烁。</li>
</ul>
</blockquote>
<hr>
<h1 id="Formula"><a class="header-anchor" href="#Formula"></a>Formula</h1>
<h2 id="分数"><a class="header-anchor" href="#分数"></a>分数</h2>
<p>GRE分数分三部分:</p>
<ul>
<li>
<p>Verbal: 满分170. 分为填空和阅读</p>
</li>
<li>
<p>Quant: 满分170, 绝大部分这个人都是满分或者扣一两分, 不怎么需要复习, 只需做两道题了解一下常用单词</p>
<ul>
<li>GRE的Verbal和Quant一般加起来一起算分, 比如V156+Q170 = 326.</li>
<li>V和Q其实都是选择题, 有单选有多选. GRE<strong>多选和雅思不同, 错一个就全错</strong></li>
</ul>
</li>
<li>
<p>Analytical Writing: 满分6分, 大部分美国学校不会卡AW分, 但是部分德国学校会卡( TUM要求4.0, 亚琛要求3.5 ).</p>
<ul>
<li>
<p>AW分两部分, 每个一个section:</p>
<ul>
<li><strong>Issue 30min</strong></li>
<li><strong>Argument 30min</strong></li>
</ul>
</li>
<li>
<p>ISSUE和ARGUMENT<strong>都有模板</strong>, 一般都是套模板写. ARGUMENT套路非常简单, 我只准备了一天半, ISSUE由于是话题类的, 如果想冲高分的话可以多花几天准备.</p>
</li>
</ul>
</li>
</ul>
<h2 id="考试结构"><a class="header-anchor" href="#考试结构"></a>考试结构</h2>
<p>GRE一共有6个section, <strong>第一个section必定是AW</strong>, 后面五个section中只有四个算分, 还有一个是<strong>不算分的加试</strong>, 当然考试时无法知道哪个section是加试, 全都好好考就行了.</p>
<ul>
<li>
<p>除AW外, 每个section满分170分, 最终V和Q的分数是各自的2个section( 因为加试不算分 )的平均</p>
</li>
<li>
<p>如果第二个section是Verbal, 则二, 四, 六是Verbal, 其余为Quant. 即加试了Verbal</p>
<ul>
<li>Quant加试也同理.</li>
</ul>
</li>
<li>
<p>前三个section和后三个中间有10min休息,可以离开座位.</p>
</li>
</ul>
<h1 id="Prepare"><a class="header-anchor" href="#Prepare"></a>Prepare</h1>
<p>我GRE从开始准备到上考场似乎只用了26天, 过程非常曲折, 但总的来说, <strong>GRE一点都不难, 一个月内绝对能搞定, 根本不需要花一个月以上</strong>. 我面对的问题很多都是我自己的问题, 而不是考试太难了.</p>
<p>此外, 一定要<strong>相信ETS, ETS的所有考试要么给分好(雅思), 要么题目简单(GRE), 是绝对很容易过的</strong></p>
<p>很多人都说GRE要花三个月, 包括我同届的很多同学, 我只花了一个月搞定了, 没有别的原因, 就是因为虽然准备很痛苦, 题目也确实难, 但正式考试时的题目一定是超简单的, 因此不用过于担心.</p>
<p>当然了, 我考前并不知道这些事, 慌得要死, 最后考完出成绩才放松.</p>
<p>下面是我的备考经历:</p>
<ol>
<li>
<p>起初我报名的是苏州校区的10.23的线下考试. 说是准备1个月, 其实前半个月我都在背单词, 就是《GRE高频真词表》, 每天花四小时, 事实证明这完全是浪费时间, 因为做题时根本记不住. 此外我还在看之前提到的讲解长难句的视频</p>
</li>
<li>
<p>前半个月可以说我什么都没干, 也就是说我实际复习只花了半个月..... 在剩下的2周内, 我继续看视频, 并且不背单词了(因为那本书背完了), 我先在雷哥网做了一次模考(相当于裸考), 成绩很一般, 300左右....</p>
</li>
<li>
<p>模考如此之低把我吓到了, 我也认识到了GRE Verbal的难度, 于是我开始“正式”复习, 单词书再也不背了, 我开始做之前说的填空书, 加上看视频, 每天学4h左右...</p>
</li>
<li>
<p>在我焦虑“还有半个月, 来不及了怎么办”的时候(因为线下考试, 我10.20就计划回苏州, 路上还要时间, 所以备考时间连两周都不到了), ETS来了短信, 说线下考试取消了, 真的让我长出了一口气, 算是我为数不多的感谢疫情的时候了吧. 但是, 苏州都能取消,南京更没指望了, 因此我又了解了一下线上考试, 结果当天花了一整天来查线上考试的资料, 别的啥也没干, 最后卡在了VISA卡那里,毕竟我当时没有VISA卡. 第二天我又花了半天搞VISA卡, 通知家长有空去办后就继续复习了. 第三天我和家长花了半天,终于搞定了VISA卡, 买了兑换券, 报了名. 因为我对未来特别乐观, 想着快点结束痛苦, 就报了特别激进的时间, 报了10.26. 事实证明报的早有好有坏, 坏处是复习时间重新紧张了(但比之前10.23好点, 多了3天), 好处是其实复习时间再长, 其实多出来的时间我还是会摆烂, 不会学习的, 因此时间短和长没什么区别, 后者徒增痛苦时常罢了. 总之,当时的我太乐观了, 以为接下去的时间我会加倍努力, 以为我会因为这个很短的ddl而增加学习动力. 事实证明我错了</p>
</li>
<li>
<p>接下去的一周, 我终于看完了长难句视频, 并且又做了两次模考和一些小的单section模考. 注意直到此时, 我的复习依然非常非常的烂: 可以说, 我只复习了填空, 数学和阅读除了模考时做了题外根本没复习过, 而我阅读成绩也非常差. 作文因为雷哥网不提供模考, 也没复习. 而即使只对于填空这个题目型, 每天花3h复习也是不够的, 因为我是在考前2周才开始复习填空的, 照这个速度根本来不及</p>
</li>
<li>
<p>考试只有一周了, 总算认真了点, 加上视频看完了, 我学习时间更多了. 我只复习填空, 并且也在做阅读的书. 然而这段时间我的复习还是很烂, 因为我根本不专心, 每天花在GRE的时间依然没有超过4h, 有两天甚至是3h都不到, 因为这段时间S赛和TI都开打了, 我尝尝整个上午都在看比赛, 下午才开始学习. 阅读我就做了一次就再也没做过, 填空的话, 我每天给自己定目标是做八个section, 但七天里其实只有一天是完成这个目标的. 也就是说即使是考前一周, 我的复习依然是烂的离谱. 此时我开始认真考虑AW部分, 因为德国的某些学校对于AW有小分要求, 而我AW完全没复习, 为此我极度地担忧.</p>
</li>
<li>
<p>考试只有3天了, 我精神压力特别大, 一方面我愤怒于自己的学习动力, 这么重要的考试我居然如此地摆烂, 另一方面也非常焦虑, GRE复习的这一个月来我十分痛苦, 再也不想痛苦第二次了, 考不过的话又得折磨一个月, 真的难以想象这样的后果.  此外, 即使我Q+V过了, AW也很有可能不通过, 因此我得抓紧复习AW.</p>
<p>第一天我看了网上的AW的视频, 并整理了模板, 但没有实际写作文, 再做了点填空就结束了.</p>
<p>第二天我进一步整理模板吗, 并终于开始写作文了,但ISSUE和ARGUMENT各自就写了二篇, 除了填空我还稍微做了点数学.  这一天我和之前一样, 没学多久GRE. 在DDL如此紧张的情况下我居然又浪费了一天, 当晚睡觉前我都感到十分悔恨, 我觉得这就是我人生的一个缩影: 自制力太差, 没有规划, 信息不足, 花了半个月的时间采取了错误的方法学习, 后面的半个月明明有机会补救, 却一直摆烂, 自律能力差的要命, 一切只能凭运气, 祈祷ETS给我考的简单点.</p>
<p>第三天, 也是最后一天了, 我依然没花多久时间学习.... 我发现我越是准备不充分, 越是在DDL前容易摆烂. 这一天我可以起得很早,来复习, 结果突然想了解美国留学的信息, 逛论坛一直逛到下午两点. 也就是说我下午两点才开始学习.... 这天就ISSUE和ARGUMENT各写了三篇, 晚上熬夜又写了4个section填空, 以及做了二十道数学. 最后我花了2h做了一次, 也是我的第一次PPO, 只做了前三个section就去睡觉了.. 并且当天下午我又在论坛找到了一个很好的AW模板, 可惜已经没时间学它了.</p>
</li>
<li>
<p>考试当天我提前4h起来, 事实上就是一宿没睡嘛. 熬夜的感觉难受的要死, 但也没有办法啊, 我得早点复习呢. 在这段时间内我又做了点数学和填空, 把AW又各自写了一遍, 并且融入了一点昨天遇到的新模板</p>
</li>
</ol>
<p>以上就是我的整个GRE复习过程, 可以看到, 前半月使用了错误的学习方法, 只背单词, 不做任何题目, 其实效果几乎为0 , 并且此时由于ddl还晚, 也没有端正心态. 后面半个月我有了正确的资料, 但是每天学习时间超短, 心态非常摆烂, 而且只复习了填空.... 当然长难句视频我倒是看完了, 模考也考了两次, 这些也是仅有的正确的事.</p>
<p>最后一周我的心理压力非常大, 但由于各种娱乐项目(比赛)的出现, 我的复习时间反而还少了... 直到最后三天的时候我依然只复习了填空, 作文只复习了一次, 感觉收获很大, 却再也没复习过第二次</p>
<p>最后的三天我的心理压力快爆炸了, 但是, 依然没有哪天是学的特别多的, 基本上大量精力都用来了内耗, 却没有任何实际的行动. 除了填空, 我倒数第三天看作文, 倒数第二天写作文, 倒数第一天写数学和作文, 最后考试当天几小时再写了点数学和作文, 这就是全部了.</p>
<p>过去的一个月是痛苦的一个月, 备考过程相当痛苦, 我每天完全无法干GRE之外的事情, 也就是没法学习计算机, 但是我GRE本身也没学多少, 一直在内耗. 此外, 我的内心更痛苦, 我对自己这个月的表现非常失望, 效率极低, 学习意志差的要命, 而且经常摆烂, 何况是面对GRE这么重要的考试. 总之这个月从表现上来看无疑是失败的, 并且让我认识到了自己的巨大缺陷.</p>
<p>考前我很焦虑, 只能不断祈祷ETS给我放水, 没想到真的放水了, GRE最后考了个比较高的分数. 但是,这个分数不是我凭努力得来的, 而是靠着运气, 和ETS的放水得到的, 考试通过并不能掩盖我的失败.</p>
<p>.</p>
<h1 id="During-Test"><a class="header-anchor" href="#During-Test"></a>During Test</h1>
<ul>
<li>约的教室内没有校园网, 我开了热点. 但是考完之后手机几乎没电了, 所以很惊险. 并且, 考完后电脑也几乎没电了. 因此, 一定要带好充电宝和充电器, 预防意外情况. (手机流量也得少用点, 不过其实我至今没遇到过流量不够用的情况, 因此不用担心)</li>
<li>白板, 笔一定要准备好. 实战证明, 没有这些东西是不可能做数学的.</li>
</ul>
<h1 id="Math"><a class="header-anchor" href="#Math"></a>Math</h1>
<ul>
<li>
<p>multiple-answers questions指多个答案的问题。 在英语国家，选择题一般是单选题。 所以<strong>不加说明的multiple choice就是指单选</strong>.</p>
</li>
<li>
<p><strong>2 是素数</strong>而且是偶数的唯一的数。</p>
</li>
<li>
<p>unit digit指<strong>个位数</strong>， 同样道理，tens digit指十位数， hundreds digit指百位数</p>
</li>
<li>
<p>弧长计算公式: <strong>L=n× π× r/180，L=α× r</strong></p>
</li>
<li>
<p>税率: 假设一个州的税率为9个点，商品价格为100块。则实际支付=100+100*0.09=109.</p>
</li>
</ul>
<h2 id="Terms"><a class="header-anchor" href="#Terms"></a>Terms</h2>
<p>数学只需要注意一些数学术语的英文翻译:  <a href="https://zhuanlan.zhihu.com/p/262560116">GRE数学中难懂的题干</a></p>
<ul>
<li>
<p>what fraction of A do B</p>
<p>A中有多少做了B这件事</p>
</li>
<li>
<p>1.5 standard deviations: 1.5个标准差</p>
</li>
<li>
<p>For how many of the seven export categories did not the value of exports increase by more than 50 percent from2002 to 2003?</p>
<p>= 增长，但增幅不到50% （不包括降低的）</p>
</li>
<li>
<p>increase in the unemployment</p>
<p>失业率增长了多少</p>
<p>the percent increase in the unemployment</p>
<p>失业率增长了百分之多少</p>
</li>
<li>
<p>mean 平均数</p>
<p>median 中位数</p>
<p>mode 众数</p>
</li>
<li>
<p>ones digit 个位数</p>
</li>
<li>
<p>geometric sequence 等比数列</p>
</li>
<li>
<p>arithmetic sequence 等差数列</p>
</li>
<li>
<p>factorial 阶乘</p>
</li>
<li>
<p>numenator 分子</p>
</li>
<li>
<p>denominator 分母</p>
</li>
<li>
<p>quadrants 象限</p>
<p>diagonal 对角线</p>
<p>hypotenuse 斜边</p>
</li>
<li>
<p>arc 弧</p>
<p>chord 弦</p>
</li>
<li>
<p>multiple of both A and B: A和B的公倍数</p>
</li>
</ul>
<h1 id="Summary"><a class="header-anchor" href="#Summary"></a>Summary</h1>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Study Abroad</tag>
      </tags>
  </entry>
  <entry>
    <title>Parallel Desktop</title>
    <url>/2023/04/03/Parallel-Desktop/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Intro</li>
<li>Download</li>
<li>Use</li>
</ul>
<span id="more"></span>
<h1 id="Intro"><a class="header-anchor" href="#Intro"></a>Intro</h1>
<ul>
<li><a href="https://www.parallels.com/eu/">PD</a>: 支持M1 Mac的虚拟机工具</li>
<li><a href="https://github.com/MikeWang000000/PD-Runner-Revived/tree/pdp">PD Runner</a>: A tool for <code>Parallels Desktop</code> can start VMs <strong>even expired</strong>
<ul>
<li><a href="https://github.com/MikeWang000000/PD-Runner-Revived/releases/tag/18.1.1r1">Releases</a>. 会下载对应所有支持的PD版本的PD Patcher</li>
</ul>
</li>
</ul>
<h1 id="Download"><a class="header-anchor" href="#Download"></a>Download</h1>
<ul>
<li>
<p>Parallels Desktop</p>
<ul>
<li><a href="https://www.parallels.com/products/desktop/download/">Releases</a></li>
</ul>
</li>
<li>
<p>PD Runner: 已改名为PD Patcher,</p>
<ul>
<li><a href="https://github.com/MikeWang000000/PD-Runner-Revived/releases/tag/18.1.1r1">Releases</a>. 会下载对应所有支持的PD版本的PD Patcher.</li>
<li>PD的最新版本是18.2, 但PD Patcher只支持到PD 18.1.1. 因此, 需要到<a href="(https://www.parallels.com/products/desktop/download/)">PD官网</a>下载老版本的PD .</li>
</ul>
</li>
</ul>
<h1 id="Use"><a class="header-anchor" href="#Use"></a>Use</h1>
<p>按照并打开PD Patcher后, 再启动PD, 即可绕过授权检查.</p>
<h1 id="Problems"><a class="header-anchor" href="#Problems"></a>Problems</h1>
<h1 id="虚拟机画面模糊"><a class="header-anchor" href="#虚拟机画面模糊"></a>虚拟机画面模糊</h1>
<p>View -&gt; Retina Resolution -&gt; More Space</p>
<p>分辨率调高后, 原有的桌面图标会变小. 需要将图标放大:</p>
<p>Settings -&gt; Display -&gt; Scale 调到200%</p>
]]></content>
      <categories>
        <category>Toolkit</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Cammera Manuel</title>
    <url>/2023/04/13/Cammera-Manuel/</url>
    <content><![CDATA[<p>For Fuji XA-7</p>
<p><a href="https://fujifilm-dsc.com/en/manual/x-a7/">FUJIFILM X-A7 Owner’s Manual</a></p>
<span id="more"></span>
<h1 id="APP"><a class="header-anchor" href="#APP"></a>APP</h1>
<p>日本的工业软件行业水平惨不忍睹, 这点从Fuji的app可见一斑. 页面十分老旧, 和移动设备的无线连接也很慢.</p>
<p><a href="https://fujifilm-dsc.com/zhs/manual/x-a7/technical_notes/software/index.html">富士软件官网</a></p>
<ul>
<li>
<p><a href="http://app.fujifilm-dsc.com/en/camera_remote/">FUJIFILM Camera Remote</a>: connecting to Smartphones and Tablets</p>
</li>
<li>
<p><a href="https://post.smzdm.com/p/a07nwd38/">手机端使用教程</a></p>
</li>
<li>
<p><a href="http://app.fujifilm-dsc.com/en/pc_autosave/">FUJIFILM PC AutoSave</a>：upload pictures from the camera over wireless networks.</p>
</li>
<li>
<p>Capture One Express Fujifilm：  Capture One A/S 开发的免费的图像编辑软件，可用于在计算机上查看 RAW 照片并将其转换为其他格式。</p>
<ul>
<li>
<p>可以理解为CaptureOne为富士开发的免费版app</p>
</li>
<li>
<p>其实就是买相机的时候会送一个该软件的License Key，用它就可以免费解锁该软件</p>
</li>
</ul>
</li>
<li>
<p>RAW FILE CONVERTER EX： 查看计算机上的 RAW 照片并将它们转换成其他格式</p>
</li>
</ul>
<h1 id="Wireless-Transfer"><a class="header-anchor" href="#Wireless-Transfer"></a><a href="https://fujifilm-dsc.com/en/manual/x-h1/connections/wireless/index.html">Wireless Transfer</a></h1>
<p>Use <a href="http://app.fujifilm-dsc.com/en/camera_remote/">FUJIFILM Camera Remote</a></p>
<h2 id="Connecting-to-Smartphones-and-Tablets-Bluetooth®-Pairing"><a class="header-anchor" href="#Connecting-to-Smartphones-and-Tablets-Bluetooth®-Pairing"></a>Connecting to Smartphones and Tablets: Bluetooth® Pairing</h2>
<p>Use <strong>CONNECTION SETTING</strong> &gt; <strong>Bluetooth SETTINGS</strong> &gt; <strong>PAIRING REGISTRATION</strong> to pair the camera with smartphones or tablets. Pairing offers a simple method for downloading photos from the camera.</p>
<h2 id="Connecting-to-Smartphones-and-Tablets-Wireless-LAN"><a class="header-anchor" href="#Connecting-to-Smartphones-and-Tablets-Wireless-LAN"></a>Connecting to Smartphones and Tablets: Wireless LAN</h2>
<p>Use the <strong>WIRELESS COMMUNICATION</strong> options in <strong>SHOOTING SETTING</strong> or the playback menu to connect to a smartphone or tablet via a wireless LAN. Once connected, you can browse the images on the camera, download selected images, control the camera remotely, or copy location data to the camera.</p>
<h2 id="Copying-Pictures-to-a-Computer-PC-AutoSave"><a class="header-anchor" href="#Copying-Pictures-to-a-Computer-PC-AutoSave"></a>Copying Pictures to a Computer: PC AutoSave</h2>
<p><a href="http://app.fujifilm-dsc.com/en/pc_autosave/">FUJIFILM PC AutoSave</a></p>
<p>You can upload pictures from the camera using the <strong>PC AUTO SAVE</strong> option in the playback menu.</p>
<h1 id="Connections"><a class="header-anchor" href="#Connections"></a>Connections</h1>
<h2 id="Connecting-to-HDMI-Devices"><a class="header-anchor" href="#Connecting-to-HDMI-Devices"></a><a href="https://fujifilm-dsc.com/en/manual/x-s10/connections/hdmi_output/">Connecting to HDMI Devices</a></h2>
<ol>
<li>
<p>Turn the camera off.</p>
</li>
<li>
<p>Connect the cable as shown below.</p>
<p>Insert into HDMI connector</p>
<p><img data-src="https://fujifilm-dsc.com/en/manual/x-s10/images/ill_bd_connect_hdmi_x-s10.png" alt="img"></p>
<p>Insert into HDMI Micro connector (Type D)<a href="%E5%8F%82%E8%A7%81%5B%E5%AF%B9%E5%90%84%E7%A7%8D%E7%B1%BB%E5%9E%8BHDMI%E6%8E%A5%E5%8F%A3%E7%9A%84%E4%BB%8B%E7%BB%8D%5D(https://lyk-love.cn/2023/04/13/Common-HDMI-Products/).">^1</a></p>
</li>
<li>
<p>Configure the device for HDMI input as described in the documentation supplied with the device.</p>
</li>
<li>
<p>Turn the camera on. The contents of the camera display will be shown on the HDMI device. The camera display turns off in playback mode (<a href="https://fujifilm-dsc.com/en/manual/x-s10/connections/hdmi_output/#playback">Playback</a>).</p>
</li>
</ol>
<h1 id="Capture"><a class="header-anchor" href="#Capture"></a>Capture</h1>
<p><a href="https://www.captureone.com/en/account">官网</a></p>
]]></content>
      <categories>
        <category>Other Hobbies</category>
      </categories>
      <tags>
        <tag>Camera</tag>
      </tags>
  </entry>
  <entry>
    <title>Common HDMI Products</title>
    <url>/2023/04/13/Common-HDMI-Products/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>HDMI Types</li>
</ul>
<span id="more"></span>
<p><a href="https://en.wikipedia.org/wiki/HDMI">HDMI WIKI</a></p>
<h1 id="HDMI-Types"><a class="header-anchor" href="#HDMI-Types"></a>HDMI Types</h1>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Common%20HDMI%20Products/hdmi_connector_types.png" alt="hdmi_connector_types"></p>
<p>There are currently five standard connector types available for HDMI cables, namely:</p>
<ul>
<li><strong>Type A</strong> (standard): 应用于HDMI1.0版本, 总共有19pin, 规格为4.45 mm×13.9 mm, 为最常见的HDMI接头规格. 在HDMI 1.2a之前, 最大能传输165MHz的TMDS，所以最大传输规格只能在于1600×1200 ( TMDS 162.0 MHz ).</li>
<li><strong>Type B</strong> (dual link - not currently used in any mainstream consumer products):  有29pin。可傳输HDMI A type兩倍的TMDS資料量，相對等於DVI Dual-Link傳輸，用於傳輸高分辨率WQXGA 2560x1600以上.</li>
<li><strong>Type C</strong> (mini): 有19pin, 最常見, 俗称 Mini HDMI, 可以說是缩小版的HDMI A type。</li>
<li><strong>Type D</strong> (micro): 俗称Micro HDMI. D Type应用于HDMI 1.4版本, 保持HDMI标准的19pin, 但是尺寸和micro-USB的接口差不多. 比Type C（2.42 mm × 10.42 mm）小很多, 主要應用在一些小型的移动设备上, 例如手机和<strong>相机</strong>.</li>
<li>Type E (the Automotive Connection System, chiefly developed for in-vehicle use)</li>
</ul>
<h2 id="Type-A"><a class="header-anchor" href="#Type-A"></a>Type A</h2>
<h2 id="Type-B"><a class="header-anchor" href="#Type-B"></a>Type B</h2>
<h2 id="Type-C"><a class="header-anchor" href="#Type-C"></a>Type C</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Common%20HDMI%20Products/mini-HDMI%20connector.png" alt="mini-HDMI connector"></p>
<h2 id="Type-D"><a class="header-anchor" href="#Type-D"></a>Type D</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Common%20HDMI%20Products/Micro-HDMI%20connector.png" alt="Micro-HDMI connector"></p>
<p><a href="https://fujifilm-dsc.com/en/manual/x-s10/connections/hdmi_output/">Fuji XA-7的HDMI接口</a>就是Type D.</p>
<p><img data-src="https://fujifilm-dsc.com/en/manual/x-s10/images/ill_bd_connect_hdmi_x-s10.png" alt="img"></p>
]]></content>
      <categories>
        <category>Electronic Engineering</category>
      </categories>
      <tags>
        <tag>Hardware</tag>
        <tag>Camera</tag>
      </tags>
  </entry>
  <entry>
    <title>Transport Buses, Tranfer Protocals and Physical Interfaces</title>
    <url>/2023/04/13/Transport-Buses-Tranfer-Protocals-and-Physical-Interfaces/</url>
    <content><![CDATA[<p>Outline:</p>
<ul>
<li>Transport Buses</li>
<li>Transfer Protocals</li>
<li>Physical Interfaces</li>
</ul>
<span id="more"></span>
<p><a href="https://lyk-love.cn/2022/08/06/Computer-I:O-Device">前面</a>说过, OS通过调用Driver来处理外部设备. 而外部设备的连接是通过暴露自身<strong>物理接口</strong>, 通过<strong>总线</strong>, 按相应的<strong>数据传输协议</strong>连接到计算机的. 不同的数据传输协议就对应着不同的driver.</p>
<p>本文介绍常见的总线, 数据传输协议和物理接口.</p>
<p>注意, 总线, 数据传输协议和物理接口之间可能存在同名的对应.</p>
<p>例如:</p>
<ul>
<li>SATA是总线标准, 也是物理接口标准.</li>
<li>USB是总线标准, 也是传输协议标准. 但USB不是物理接口标准;</li>
</ul>
<h1 id="Transport-Buses"><a class="header-anchor" href="#Transport-Buses"></a>Transport Buses</h1>
<p>ref: <a href="https://www.cnblogs.com/liuzhengliang/p/5548451.html">讲总线的文章</a></p>
<p>总线就是物理上的一根线(cable).</p>
<p>有很多种类型的总线.</p>
<ul>
<li>
<p>存储领域的总线有: ATA/SATA/PCIe/SCSI/SAS/FC. 它们都对应<strong>同名的Physical Interfaces</strong>, 比如SATA接口, PCIe接口, SCSI接口.</p>
<ul>
<li>例如: SATA总线的版本也对应着SATA接口的版本.</li>
</ul>
</li>
<li>
<p>此外, 还有其他用途的总线, 例如我们很熟悉的USB和Thunder bolt.</p>
</li>
</ul>
<p>注意, 有些人用&quot;通道&quot;来指总线</p>
<h2 id="ATA"><a class="header-anchor" href="#ATA"></a>ATA</h2>
<ul>
<li>AT A（AT Attachment）：总的来说，ATA是一个总线技术，它并行传输数据, 总线位宽为 16bits. 因此ATA也称为<strong>PATA</strong>(Parallel ATA, 并行ATA )
<ul>
<li>In case you are curious what AT stands for, this was IBM’s second generation &quot;Personal Computer Advanced Technology&quot; built around the then-extremely-potent 6-MHz 80286 processor that the company introduced in 1984.</li>
</ul>
</li>
<li>ATA对应的物理接口就是ATA( or PATA )， 现在都没人用了</li>
</ul>
<h2 id="SATA"><a class="header-anchor" href="#SATA"></a>SATA</h2>
<p><a href="https://www.techtarget.com/searchstorage/definition/Serial-ATA">https://www.techtarget.com/searchstorage/definition/Serial-ATA</a></p>
<p><img data-src="https://www.digitaltrends.com/wp-content/uploads/2020/09/sata-cables.jpg?fit=720%2C522&amp;p=1" alt="SATA cable"></p>
<ul>
<li>
<p><strong>SATA</strong> ( <strong>Serial ATA</strong>, 串行ATA )对PATA进行了改进， 故名思义就是使用了串行, 规避了并行总线在高速下的串扰和同步问题</p>
<ul>
<li>在2000 年发明</li>
</ul>
</li>
<li>
<p>SATA 只有 4 根线, 分别为：发送数据线，接收数据线，电源线, 地线.</p>
</li>
</ul>
<h3 id="SATA-Types"><a class="header-anchor" href="#SATA-Types"></a>SATA Types</h3>
<p>SATA 有三个版本, 对应物理接口也有三个版本:</p>
<ul>
<li>
<p>SATA: 正式名稱爲<strong>SATA 1.5Gb/s</strong>, 是第一代SATA接口. 有效带宽为 150MB/s, 数据速率为 1.5Gbps( 传输的数据经过了8B/10B 变换,  150MB/s*10=1.5Gbps) .</p>
</li>
<li>
<p>SATA II: 正式名稱爲<strong>SATA 3Gb/s</strong>, 是第二代SATA接口.  有效带宽为 300MB/s , 数据速率为 3Gbps.</p>
</li>
<li>
<p><strong>SATA III</strong>: 正式名稱爲<strong>SATA 6Gb/s</strong>, 是第三代SATA接口, 有效带宽为 600MB/s , 数据速率为 6Gbps.</p>
</li>
<li>
<p>SATA配套的传输协议是AHCI. SATA和AHCI是HDD时代的产物, ATA总线的传输速率上限也就是几百MB, 所以SATA + AHCI在HDD时代是够用的, 虽然目前主流SSD依然支持它们, 但已经不够用了</p>
</li>
<li>
<p>SATA II向后兼容SATA I. SATA III向后兼容SATA I和SATA II/ 但是, 由于低版本接口的数据传输率的限制, 使用低版本的接口时数据传输率也会降低.</p>
<ul>
<li>例子: 闪迪至尊极速固态硬盘支持SATA 6Gb/s接口并且当连接到SATA 6Gb/s 接口时，顺序读速度和写速度分别能达到550/520MB/s。但是，当连接到SATA 3 Gb/s 接口时，顺序读速度和顺序写速度则分别能达到285/275MB/s</li>
</ul>
</li>
</ul>
<h2 id="PCIe"><a class="header-anchor" href="#PCIe"></a>PCIe</h2>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Transport%20Buses%2C%20Tranfer%20Protocals%20and%20Physical%20Interfaces/PCIe%20cable.png" alt="PCIe cable"></p>
<ul>
<li><strong>PCIe( Peripheral Component Interconnect Express )</strong>: 是一个比SATA快好几倍的总线, 2004年发明.
<ul>
<li>PCIe是PCI的后继, 而PCI总线取代了更古老的ISA (Industry Standard Architecture)总线
<ul>
<li>2004年PCIe刚发明时，流行<strong>shared bus architecture</strong>，许多设备用一条线传输数据，需要一个arbiter来调度</li>
</ul>
</li>
<li><strong>PCIe可以连接各种设备</strong>, 包括<strong>显卡</strong>、SSD（需要M.2接口或者PCIe接口）、无线网卡、有线网卡、声卡、视频采集卡、PCIe转接M.2接口、PCIe转接USB接口、PCIe转接Tpye-C接口</li>
<li>PCI使用<strong>parallel bus architecture</strong>，即将每个数据字分多条线传输。 比如32-bit数据需要32根并行的线</li>
<li>PCIe使用<strong>serial bus architecture</strong>，把数据包装成一个message， 点对点传输（一次连接称为一个<strong>lane</strong>）。</li>
<li>PICe也支持并行传输，按lane( 通道 )的个数可分为 x1 x2 x4 x8 x16 x32（最大可支持32个通道）
<ul>
<li>如果PCI e x1接口的网卡插x16的插槽， 只占用一条lane</li>
</ul>
</li>
<li>微星的B450主板支持的就是PCI-E 3.0, B550支持PCI-E 4.0</li>
<li>现在的PCIe 5.0 已经支持132GB/s 了</li>
<li>PCIe是<a href="#NVMe">NVMe</a>协议最常使用的总线.</li>
</ul>
</li>
</ul>
<h3 id="PCIePerformance"><a class="header-anchor" href="#PCIePerformance"></a>PCIePerformance</h3>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Transport%20Buses%2C%20Tranfer%20Protocals%20and%20Physical%20Interfaces/PCIe%20Performance.png" alt="PCIe Performance"></p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Transport%20Buses%2C%20Tranfer%20Protocals%20and%20Physical%20Interfaces/PCIe%20Link%20Performance.png" alt="PCIe Link Performance"></p>
<h3 id="PCIe-vs-PCI"><a class="header-anchor" href="#PCIe-vs-PCI"></a>PCIe vs PCI</h3>
<p>PCIe 与 PCI 的区别:</p>
<table>
<thead>
<tr>
<th>category</th>
<th>speed</th>
<th></th>
<th>transport model</th>
<th></th>
<th>hardware</th>
</tr>
</thead>
<tbody>
<tr>
<td>PCI</td>
<td>PCI的工作频率分为33MHz和66MHz，最大吞吐率 266MB/s</td>
<td></td>
<td>PCI 是并行数据传输，一次传输4字节/8字节，半双工</td>
<td></td>
<td>传输PCI信号的是普通电平</td>
</tr>
<tr>
<td>PCIe</td>
<td>PCIe 1.0 x1 的吞吐率就达到了250MB/s</td>
<td></td>
<td>PCIe是串行数据传输，全双工. 而且是<strong>点对点传输</strong>(当然也可以并行)</td>
<td></td>
<td>传输PCIe信号的是差分电平</td>
</tr>
</tbody>
</table>
<h2 id="SCSI"><a class="header-anchor" href="#SCSI"></a>SCSI</h2>
<ul>
<li>SCSI( Small Computer System Interfae, 小型计算机系统专用接口 ) : 一种连接主机和外围设备的接口，支持包括硬盘、光驱及扫描仪在内的多种设备。SCSI 总线是一种<strong>并行</strong>总线，其优点是适应面广，性能高；缺点是价格昂贵，安装复杂</li>
</ul>
<h2 id="SAS"><a class="header-anchor" href="#SAS"></a>SAS</h2>
<ul>
<li>
<p>SAS( Serial Attached SCSI, 串行连接SCSI) : 串行化的SCSI. 和SATA总线类似, 都采用串行技术以获得更高的传输速度. 一般用于企业级硬盘</p>
</li>
<li>
<p>SAS 的接口技术可以向下兼容SATA 。具体来说，二者的兼容性主要体现在物理层和协议层的兼容:</p>
<ul>
<li>在物理层，<strong>SAS 接口和SATA 接口完全兼容</strong>，SATA 硬盘可以直接使用在SAS 的环境中，</li>
<li>从接口标准上而言，SATA 是SAS 的一个子标准，因此SAS 控制器可以直接操控SATA 硬盘，但是SAS 却不能直接使用在SATA 的环境中，因为SATA 控制器并不能对SAS 硬盘进行控制</li>
</ul>
</li>
</ul>
<h2 id="FC"><a class="header-anchor" href="#FC"></a>FC</h2>
<ul>
<li>FC: 用于光纤</li>
</ul>
<h2 id="USB"><a class="header-anchor" href="#USB"></a>USB</h2>
<p>常见的USB logo:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Transport%20Buses%2C%20Tranfer%20Protocals%20and%20Physical%20Interfaces/USB%20logo.png" alt="USB logo"></p>
<p>USB logo on devices:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Transport%20Buses%2C%20Tranfer%20Protocals%20and%20Physical%20Interfaces/USB%20logo%20on%20devices.png" alt="USB logo on devices"></p>
<ul>
<li><strong>USB</strong> (Universal Serial Bus, 通用串行总线) : 用于连接计算机的外部设备, 它们的I/O通常很慢</li>
<li>此外, USB还对应着同名的传输协议( USB ).</li>
<li>USB是总线标准和传输协议标准, 但不是物理接口标准. 因此不存在“USB物理接口”.</li>
</ul>
<h2 id="Thunderbolt"><a class="header-anchor" href="#Thunderbolt"></a>Thunderbolt</h2>
<p>Thunderbolt-4 logo on cable:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Transport%20Buses%2C%20Tranfer%20Protocals%20and%20Physical%20Interfaces/Thunderbolt-4%20logo%20on%20cable.png" alt="Thunderbolt-4 logo on cable"></p>
<ul>
<li>Thunderbolt(雷电总线): 由Intel研发, 用于取代电脑上奇奇怪怪的各种总线( SCSI, SATA, USB, PCIe ... ). 如果协议能推广, 以后电脑里只需要一种总线.
<ul>
<li><a href="https://support.apple.com/kb/SP854?viewlocale=zh_CN&amp;locale=zh_CN">Macbook 2021</a>拥有3个 Type-C Thunderbolt-4 物理接口.</li>
<li>从雷电3开始, 使用Type-C物理接口.</li>
</ul>
</li>
<li>和USB一样拥有同名的传输协议( Thunder bolt ). 我们说雷电的时候, 既可以指总线也可以指协议, 因为雷电总线好像只支持雷电协议.</li>
<li>Thunderbolt是用于取代各种总线, 因此是各种总线的超集. 例如, Thunderbolt是USB的超集, 因此可以在Thunderbolt线上传输USB信号. 由于Thunderbolt 3, 4都使用Type-C接口, USB也常常使用Type-C接口, 因此在生活中, <u>一根Type-C Thunderbolt线就可以当作Type-C USB线来用.</u>
<ul>
<li>反过来, Type-C USB线并不能替代Type-C Thunderbolt线.</li>
</ul>
</li>
</ul>
<h1 id="Transfer-Protocals"><a class="header-anchor" href="#Transfer-Protocals"></a>Transfer Protocals</h1>
<p>有了总线和对应的物理接口, 还需要抽象的数据传输协议( 就和计算机网络的协议一样 ), 在软件层面，针对协议来编写驱动，来实现数据I/O.</p>
<h2 id="AHCI"><a class="header-anchor" href="#AHCI"></a>AHCI</h2>
<ul>
<li>AHCI( Serial ATA Advanced Host Controller Interface, 串行ATA高级主控接口/高级主机控制器接 ): 适配SATA和PCIe( 主要是适配SATA ), 是HDD时代的通信标准，速度比较慢</li>
</ul>
<h2 id="NVMe"><a class="header-anchor" href="#NVMe"></a>NVMe</h2>
<ul>
<li><strong>NVMe</strong>( Non-Volatile Memory express, 非易失性内存主机控制器接口规范 ):  适配<strong>SATA和PCIe</strong>接口. 简而言之NVMe比AHCI快好几倍，是<strong>SSD</strong>时代的传输协议.
<ul>
<li><strong>NVMe建立在[M.2接口](#M.2 Interface)上, 且使用<a href="#PCIe">PCIe总线</a>.</strong>
<ul>
<li>很多商家把NVMe和PCIe混用. NVMe是协议, 而PCIe是物理上的总线.</li>
</ul>
</li>
<li>NVMe1.X只支持<strong>SSD</strong>,  从2.X开始也支持HDD. 不过现在很少有人用HDD了.</li>
</ul>
</li>
</ul>
<h2 id="USB-2"><a class="header-anchor" href="#USB-2"></a>USB</h2>
<ul>
<li>和PCIe协议一样, 没有自己的名字...</li>
<li>USB协议目前发展到USB4</li>
</ul>
<h2 id="Thunder-bolt"><a class="header-anchor" href="#Thunder-bolt"></a>Thunder bolt</h2>
<ul>
<li>和USB协议一样, 没有自己的名字... 一般称为雷电协议, 目前发展到雷电4( <strong>Thunderbolt™4</strong> )</li>
<li>雷电4相比USB4, 带宽更高, 兼容的传输协议也更多
<ul>
<li>雷电4适配了PCIe协议和Displayport协议</li>
</ul>
</li>
</ul>
<h1 id="Physical-Interfaces"><a class="header-anchor" href="#Physical-Interfaces"></a>Physical Interfaces</h1>
<p>总线需要连接到主板的物理接口上, 这里的“接口”指的是<u>物理尺寸和形状</u>, 内部的电路逻辑不做讨论.</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Transport%20Buses%2C%20Tranfer%20Protocals%20and%20Physical%20Interfaces/%E6%8E%A5%E5%8F%A3%2C%20%E6%80%BB%E7%BA%BF%E5%92%8C%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="接口, 总线和协议的关系"></p>
<h2 id="SATA-Interface"><a class="header-anchor" href="#SATA-Interface"></a>SATA Interface</h2>
<ul>
<li>SATA接口只能接SATA总线. 这个接口比较悲催，没有自己的名字, 我们用它适配的总线( SATA )称呼它</li>
<li>SATA2和SATA3总线对应不同的SATA2接口和SATA3接口</li>
</ul>
<h2 id="PCIe-Interface"><a class="header-anchor" href="#PCIe-Interface"></a>PCIe Interface</h2>
<ul>
<li>PCIe接口只能接PCIe总线. 这个接口和SATA接口一样, 也没有自己的名字....</li>
</ul>
<h2 id="M-2-Interface"><a class="header-anchor" href="#M-2-Interface"></a>M.2 Interface</h2>
<ul>
<li>M.2( 以前叫 NGFF( Next Generation Form Factor )，现在统一叫 M.2 ) 接口: 被设计为支持<strong>NVMe</strong>协议, 可以接SATA和PCIe总线.</li>
<li>M.2接口有两种类型：Socket 2和Socket 3.
<ul>
<li>Socket2( aka SATA M.2 ): 只能接SATA总线, 可以等价于SATA接口.</li>
<li>Socket3( aka PCIe M.2): <strong>兼容</strong>Socket2, 并且能接PCIe总线.</li>
</ul>
</li>
</ul>
<h3 id="M-2-Slots"><a class="header-anchor" href="#M-2-Slots"></a>M.2 Slots</h3>
<p>on motherboard:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Transport%20Buses%2C%20Tranfer%20Protocals%20and%20Physical%20Interfaces/M.2%20slots.png" alt="M.2 slots"></p>
<h3 id="M-2-Connector"><a class="header-anchor" href="#M-2-Connector"></a>M.2 Connector</h3>
<h4 id="SSD"><a class="header-anchor" href="#SSD"></a>SSD</h4>
<p>on SSD:</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Transport%20Buses%2C%20Tranfer%20Protocals%20and%20Physical%20Interfaces/SSD%20with%20M.2%20connector.png" alt="SSD with M.2 connector"></p>
<h4 id="Wi-Fi-Card"><a class="header-anchor" href="#Wi-Fi-Card"></a>Wi-Fi Card</h4>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Transport%20Buses%2C%20Tranfer%20Protocals%20and%20Physical%20Interfaces/Wi-Fi%20Card%20with%20M.2%20connector.png" alt="Wi-Fi Card with M.2 connector"></p>
<h4 id="GPU"><a class="header-anchor" href="#GPU"></a>GPU</h4>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Transport%20Buses%2C%20Tranfer%20Protocals%20and%20Physical%20Interfaces/GPU%20with%20M.2%20connector.png" alt="GPU with M.2 connector"></p>
<p>It seems amazing, but since M.2 can carry PCI Express, you can use a graphics card and connect it to a system. You can find M.2 adapters for full PCI Express 16x cards, where you can connect and use graphics cards.</p>
<h2 id="Type-A-B-C"><a class="header-anchor" href="#Type-A-B-C"></a>Type A/B/C</h2>
<p>常见的Type A/B/C也是物理接口</p>
<p><img data-src="https://seec2-lyk.oss-cn-shanghai.aliyuncs.com/Hexo/Hardware/Transport%20Buses%2C%20Tranfer%20Protocals%20and%20Physical%20Interfaces/Type%20A%3AB%3AC.png" alt="Type A/B/C"></p>
<ul>
<li>USB总线和雷电3总线一般都用Type C接口</li>
<li>不要把雷电3和Type C混为一谈，前者是总线/传输协议, 后者是物理接口</li>
</ul>
<h2 id="HDMI"><a class="header-anchor" href="#HDMI"></a>HDMI</h2>
<p>参见<a href="https://lyk-love.cn/2023/04/13/Common-HDMI-Products">Common HDMI Products</a></p>
]]></content>
      <categories>
        <category>Electronic Engineering</category>
      </categories>
      <tags>
        <tag>Hardware</tag>
      </tags>
  </entry>
</search>
